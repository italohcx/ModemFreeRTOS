
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014e8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003138  0801501c  0801501c  0002501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018154  08018154  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08018154  08018154  00028154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801815c  0801815c  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801815c  0801815c  0002815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018160  08018160  00028160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08018164  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          0000c768  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c7f8  2000c7f8  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002cb61  00000000  00000000  00030103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007838  00000000  00000000  0005cc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002268  00000000  00000000  000644a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001b45  00000000  00000000  00066708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003116b  00000000  00000000  0006824d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000333ea  00000000  00000000  000993b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f133c  00000000  00000000  000cc7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000095e8  00000000  00000000  001bdae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001c70c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015004 	.word	0x08015004

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08015004 	.word	0x08015004

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200000b0 	.word	0x200000b0
 800059c:	20000150 	.word	0x20000150

080005a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005a6:	4b0a      	ldr	r3, [pc, #40]	; (80005d0 <MX_FREERTOS_Init+0x30>)
 80005a8:	1d3c      	adds	r4, r7, #4
 80005aa:	461d      	mov	r5, r3
 80005ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f9c9 	bl	8004954 <osThreadCreate>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a03      	ldr	r2, [pc, #12]	; (80005d4 <MX_FREERTOS_Init+0x34>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bdb0      	pop	{r4, r5, r7, pc}
 80005d0:	08015028 	.word	0x08015028
 80005d4:	200000ac 	.word	0x200000ac

080005d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80005e0:	f003 fc64 	bl	8003eac <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f004 fa01 	bl	80049ec <osDelay>
 80005ea:	e7fb      	b.n	80005e4 <StartDefaultTask+0xc>

080005ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08a      	sub	sp, #40	; 0x28
 80005f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <MX_GPIO_Init+0xd4>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a26      	ldr	r2, [pc, #152]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0xd4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_GPIO_Init+0xd4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a11      	ldr	r2, [pc, #68]	; (80006c0 <MX_GPIO_Init+0xd4>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_GPIO_Init+0xd4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 800068e:	2200      	movs	r2, #0
 8000690:	f24e 1108 	movw	r1, #57608	; 0xe108
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0xd8>)
 8000696:	f002 f9c1 	bl	8002a1c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 800069a:	f24e 1308 	movw	r3, #57608	; 0xe108
 800069e:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_GPIO_Init+0xd8>)
 80006b4:	f002 f816 	bl	80026e4 <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	; 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40021000 	.word	0x40021000

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fc66 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f80c 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f7ff ff8a 	bl	80005ec <MX_GPIO_Init>
  MX_SPI2_Init();
 80006d8:	f000 f88a 	bl	80007f0 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */


  /*Initialize lib from winbond memory */
  W25qxx_Init();
 80006dc:	f013 fb5a 	bl	8013d94 <W25qxx_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006e0:	f7ff ff5e 	bl	80005a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006e4:	f004 f91f 	bl	8004926 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x20>
	...

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f013 fe65 	bl	80143ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a27      	ldr	r2, [pc, #156]	; (80007b8 <SystemClock_Config+0xcc>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <SystemClock_Config+0xcc>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a21      	ldr	r2, [pc, #132]	; (80007bc <SystemClock_Config+0xd0>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <SystemClock_Config+0xd0>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000756:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800075c:	2319      	movs	r3, #25
 800075e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 316;
 8000760:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8000764:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800076a:	2304      	movs	r3, #4
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	4618      	mov	r0, r3
 8000774:	f002 f96c 	bl	8002a50 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077e:	f000 f831 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800078e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000794:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000798:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2105      	movs	r1, #5
 80007a0:	4618      	mov	r0, r3
 80007a2:	f002 fbcd 	bl	8002f40 <HAL_RCC_ClockConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007ac:	f000 f81a 	bl	80007e4 <Error_Handler>
  }
}
 80007b0:	bf00      	nop
 80007b2:	3750      	adds	r7, #80	; 0x50
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d101      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d2:	f000 fc05 	bl	8000fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40002000 	.word	0x40002000

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI2_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI2_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI2_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI2_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI2_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI2_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI2_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI2_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI2_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI2_Init+0x64>)
 8000842:	f002 fd7b 	bl	800333c <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800084c:	f7ff ffca 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000350 	.word	0x20000350
 8000858:	40003800 	.word	0x40003800

0800085c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a28      	ldr	r2, [pc, #160]	; (800091c <HAL_SPI_MspInit+0xc0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d14a      	bne.n	8000914 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b27      	ldr	r3, [pc, #156]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b24      	ldr	r3, [pc, #144]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b19      	ldr	r3, [pc, #100]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <HAL_SPI_MspInit+0xc4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008d2:	230c      	movs	r3, #12
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008e2:	2305      	movs	r3, #5
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <HAL_SPI_MspInit+0xc8>)
 80008ee:	f001 fef9 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000900:	2303      	movs	r3, #3
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000904:	2305      	movs	r3, #5
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	; (8000928 <HAL_SPI_MspInit+0xcc>)
 8000910:	f001 fee8 	bl	80026e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	; 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40003800 	.word	0x40003800
 8000920:	40023800 	.word	0x40023800
 8000924:	40020800 	.word	0x40020800
 8000928:	40020400 	.word	0x40020400

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_MspInit+0x54>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a11      	ldr	r2, [pc, #68]	; (8000980 <HAL_MspInit+0x54>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x54>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x54>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_MspInit+0x54>)
 8000958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x54>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	210f      	movs	r1, #15
 800096e:	f06f 0001 	mvn.w	r0, #1
 8000972:	f000 fc31 	bl	80011d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08e      	sub	sp, #56	; 0x38
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <HAL_InitTick+0xe4>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <HAL_InitTick+0xe4>)
 800099e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <HAL_InitTick+0xe4>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b0:	f107 0210 	add.w	r2, r7, #16
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4611      	mov	r1, r2
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 fc8c 	bl	80032d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d103      	bne.n	80009d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009ca:	f002 fc71 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80009ce:	6378      	str	r0, [r7, #52]	; 0x34
 80009d0:	e004      	b.n	80009dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d2:	f002 fc6d 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80009d6:	4603      	mov	r3, r0
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <HAL_InitTick+0xe8>)
 80009e0:	fba2 2303 	umull	r2, r3, r2, r3
 80009e4:	0c9b      	lsrs	r3, r3, #18
 80009e6:	3b01      	subs	r3, #1
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <HAL_InitTick+0xec>)
 80009ec:	4a21      	ldr	r2, [pc, #132]	; (8000a74 <HAL_InitTick+0xf0>)
 80009ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <HAL_InitTick+0xec>)
 80009f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_InitTick+0xec>)
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80009fe:	4b1c      	ldr	r3, [pc, #112]	; (8000a70 <HAL_InitTick+0xec>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a04:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <HAL_InitTick+0xec>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_InitTick+0xec>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <HAL_InitTick+0xec>)
 8000a12:	f002 ffa9 	bl	8003968 <HAL_TIM_Base_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d11b      	bne.n	8000a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000a24:	4812      	ldr	r0, [pc, #72]	; (8000a70 <HAL_InitTick+0xec>)
 8000a26:	f002 fff9 	bl	8003a1c <HAL_TIM_Base_Start_IT>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d111      	bne.n	8000a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a38:	202d      	movs	r0, #45	; 0x2d
 8000a3a:	f000 fbe9 	bl	8001210 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d808      	bhi.n	8000a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	202d      	movs	r0, #45	; 0x2d
 8000a4a:	f000 fbc5 	bl	80011d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_InitTick+0xf4>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e002      	b.n	8000a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	431bde83 	.word	0x431bde83
 8000a70:	200003a8 	.word	0x200003a8
 8000a74:	40002000 	.word	0x40002000
 8000a78:	20000004 	.word	0x20000004

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000aae:	f003 f825 	bl	8003afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200003a8 	.word	0x200003a8

08000abc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <ETH_IRQHandler+0x10>)
 8000ac2:	f000 ff39 	bl	8001938 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20004f10 	.word	0x20004f10

08000ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return 1;
 8000ad4:	2301      	movs	r3, #1
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_kill>:

int _kill(int pid, int sig)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <_kill+0x20>)
 8000aec:	2216      	movs	r2, #22
 8000aee:	601a      	str	r2, [r3, #0]
  return -1;
 8000af0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	2000c7f0 	.word	0x2000c7f0

08000b04 <_exit>:

void _exit (int status)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ffe5 	bl	8000ae0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b16:	e7fe      	b.n	8000b16 <_exit+0x12>

08000b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b2a:	f3af 8000 	nop.w
 8000b2e:	4601      	mov	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
  }

  return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3718      	adds	r7, #24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf1      	blt.n	8000b64 <_write+0x12>
  }
  return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_close>:

int _close(int file)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_isatty>:

int _isatty(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d205      	bcs.n	8000c30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <_sbrk+0x6c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	371c      	adds	r7, #28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	20020000 	.word	0x20020000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200003f0 	.word	0x200003f0
 8000c5c:	2000c7f8 	.word	0x2000c7f8
 8000c60:	2000c7f0 	.word	0x2000c7f0

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c8c:	f7ff ffea 	bl	8000c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c98:	e002      	b.n	8000ca0 <LoopCopyDataInit>

08000c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9e:	3304      	adds	r3, #4

08000ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca4:	d3f9      	bcc.n	8000c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	; (8000cd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca8:	4c0a      	ldr	r4, [pc, #40]	; (8000cd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cac:	e001      	b.n	8000cb2 <LoopFillZerobss>

08000cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb0:	3204      	adds	r2, #4

08000cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb4:	d3fb      	bcc.n	8000cae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f013 fc3d 	bl	8014534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fd05 	bl	80006c8 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000ccc:	08018164 	.word	0x08018164
  ldr r2, =_sbss
 8000cd0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000cd4:	2000c7f8 	.word	0x2000c7f8

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>

08000cda <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <DP83848_RegisterBusIO+0x28>
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <DP83848_RegisterBusIO+0x28>
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d003      	beq.n	8000d02 <DP83848_RegisterBusIO+0x28>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d102      	bne.n	8000d08 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	e014      	b.n	8000d32 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	689a      	ldr	r2, [r3, #8]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	691a      	ldr	r2, [r3, #16]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d17c      	bne.n	8000e58 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	689b      	ldr	r3, [r3, #8]
 8000d6a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2220      	movs	r2, #32
 8000d70:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	e01c      	b.n	8000db2 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	f107 0208 	add.w	r2, r7, #8
 8000d80:	2119      	movs	r1, #25
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	4798      	blx	r3
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	da03      	bge.n	8000d94 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8000d8c:	f06f 0304 	mvn.w	r3, #4
 8000d90:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000d92:	e00b      	b.n	8000dac <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	f003 031f 	and.w	r3, r3, #31
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d105      	bne.n	8000dac <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
         break;
 8000daa:	e005      	b.n	8000db8 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b1f      	cmp	r3, #31
 8000db6:	d9df      	bls.n	8000d78 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b1f      	cmp	r3, #31
 8000dbe:	d902      	bls.n	8000dc6 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8000dc0:	f06f 0302 	mvn.w	r3, #2
 8000dc4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d145      	bne.n	8000e58 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6810      	ldr	r0, [r2, #0]
 8000dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4798      	blx	r3
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	db37      	blt.n	8000e52 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	6810      	ldr	r0, [r2, #0]
 8000dea:	f107 0208 	add.w	r2, r7, #8
 8000dee:	2100      	movs	r1, #0
 8000df0:	4798      	blx	r3
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db28      	blt.n	8000e4a <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4798      	blx	r3
 8000dfe:	4603      	mov	r3, r0
 8000e00:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000e02:	e01c      	b.n	8000e3e <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4798      	blx	r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e16:	d80e      	bhi.n	8000e36 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	f107 0208 	add.w	r2, r7, #8
 8000e24:	2100      	movs	r1, #0
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da07      	bge.n	8000e3e <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8000e2e:	f06f 0304 	mvn.w	r3, #4
 8000e32:	613b      	str	r3, [r7, #16]
                 break;
 8000e34:	e010      	b.n	8000e58 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8000e36:	f06f 0301 	mvn.w	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
               break;
 8000e3c:	e00c      	b.n	8000e58 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1dd      	bne.n	8000e04 <DP83848_Init+0xc6>
 8000e48:	e006      	b.n	8000e58 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8000e4a:	f06f 0304 	mvn.w	r3, #4
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	e002      	b.n	8000e58 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8000e52:	f06f 0303 	mvn.w	r3, #3
 8000e56:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d112      	bne.n	8000e84 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4798      	blx	r3
 8000e64:	4603      	mov	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8000e68:	bf00      	nop
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4798      	blx	r3
 8000e70:	4603      	mov	r3, r0
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e7c:	d9f5      	bls.n	8000e6a <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	605a      	str	r2, [r3, #4]
   }

   return status;
 8000e84:	693b      	ldr	r3, [r7, #16]
 }
 8000e86:	4618      	mov	r0, r3
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6810      	ldr	r0, [r2, #0]
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	4798      	blx	r3
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da02      	bge.n	8000eb6 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8000eb0:	f06f 0304 	mvn.w	r3, #4
 8000eb4:	e06e      	b.n	8000f94 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6810      	ldr	r0, [r2, #0]
 8000ebe:	f107 020c 	add.w	r2, r7, #12
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	4798      	blx	r3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	da02      	bge.n	8000ed2 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8000ecc:	f06f 0304 	mvn.w	r3, #4
 8000ed0:	e060      	b.n	8000f94 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d101      	bne.n	8000ee0 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8000edc:	2301      	movs	r3, #1
 8000ede:	e059      	b.n	8000f94 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6810      	ldr	r0, [r2, #0]
 8000ee8:	f107 020c 	add.w	r2, r7, #12
 8000eec:	2100      	movs	r1, #0
 8000eee:	4798      	blx	r3
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	da02      	bge.n	8000efc <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8000ef6:	f06f 0304 	mvn.w	r3, #4
 8000efa:	e04b      	b.n	8000f94 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d11b      	bne.n	8000f3e <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d006      	beq.n	8000f1e <DP83848_GetLinkState+0x90>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	e03a      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e033      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000f36:	2304      	movs	r3, #4
 8000f38:	e02c      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e02a      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6810      	ldr	r0, [r2, #0]
 8000f46:	f107 020c 	add.w	r2, r7, #12
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4798      	blx	r3
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da02      	bge.n	8000f5a <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8000f54:	f06f 0304 	mvn.w	r3, #4
 8000f58:	e01c      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8000f64:	2306      	movs	r3, #6
 8000f66:	e015      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0306 	and.w	r3, r3, #6
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	d101      	bne.n	8000f76 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8000f72:	2302      	movs	r3, #2
 8000f74:	e00e      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f003 0306 	and.w	r3, r3, #6
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e007      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f003 0306 	and.w	r3, r3, #6
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d101      	bne.n	8000f92 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e000      	b.n	8000f94 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8000f92:	2305      	movs	r3, #5
    }
  }
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f000 f8fc 	bl	80011c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f7ff fcda 	bl	8000984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f7ff fcac 	bl	800092c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	200003f4 	.word	0x200003f4

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	200003f4 	.word	0x200003f4

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ff4c 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ea:	f7ff ff61 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	68b9      	ldr	r1, [r7, #8]
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff ffb1 	bl	800115c <NVIC_EncodePriority>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	4611      	mov	r1, r2
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff80 	bl	8001108 <__NVIC_SetPriority>
}
 8001208:	bf00      	nop
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff54 	bl	80010cc <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e06c      	b.n	8001318 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001244:	2b00      	cmp	r3, #0
 8001246:	d106      	bne.n	8001256 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2223      	movs	r2, #35	; 0x23
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f003 f939 	bl	80044c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <HAL_ETH_Init+0xf4>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_ETH_Init+0xf4>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <HAL_ETH_Init+0xf4>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a2b      	ldr	r2, [pc, #172]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001278:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800127c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <HAL_ETH_Init+0xf8>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_ETH_Init+0xf8>)
 800128e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6812      	ldr	r2, [r2, #0]
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012a8:	f7ff feae 	bl	8001008 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012ae:	e011      	b.n	80012d4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012b0:	f7ff feaa 	bl	8001008 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012be:	d909      	bls.n	80012d4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2204      	movs	r2, #4
 80012c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	22e0      	movs	r2, #224	; 0xe0
 80012cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e021      	b.n	8001318 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1e4      	bne.n	80012b0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f000 ff56 	bl	8002198 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fffd 	bl	80022ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f001 f853 	bl	800239e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 ffbb 	bl	800227c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2210      	movs	r2, #16
 8001312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800

08001328 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001336:	2b10      	cmp	r3, #16
 8001338:	d17f      	bne.n	800143a <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2223      	movs	r2, #35	; 0x23
 800133e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2201      	movs	r2, #1
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800136c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001380:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2204      	movs	r2, #4
 8001388:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f9f8 	bl	8001780 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0208 	orr.w	r2, r2, #8
 800139e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fe39 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f042 0204 	orr.w	r2, r2, #4
 80013c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fe26 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fd7c 	bl	8001eda <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001410:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001424:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001428:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800142c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2223      	movs	r2, #35	; 0x23
 8001432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	e000      	b.n	800143c <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
  }
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001452:	2b23      	cmp	r3, #35	; 0x23
 8001454:	d170      	bne.n	8001538 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2223      	movs	r2, #35	; 0x23
 800145a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	687a      	ldr	r2, [r7, #4]
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001470:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001478:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800148c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001490:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	f023 0302 	bic.w	r3, r3, #2
 80014a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014a8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0204 	bic.w	r2, r2, #4
 80014b8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff fdac 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 fd02 	bl	8001eda <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0208 	bic.w	r2, r2, #8
 80014e4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff fd96 	bl	8001020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00e      	b.n	8001520 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	3212      	adds	r2, #18
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d9ed      	bls.n	8001502 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2210      	movs	r2, #16
 8001530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
  }
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
 800154a:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d109      	bne.n	8001566 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001558:	f043 0201 	orr.w	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e045      	b.n	80015f2 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800156c:	2b23      	cmp	r3, #35	; 0x23
 800156e:	d13f      	bne.n	80015f0 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001578:	2201      	movs	r2, #1
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 ff7b 	bl	8002478 <ETH_Prepare_Tx_Descriptors>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	f043 0202 	orr.w	r2, r3, #2
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e02a      	b.n	80015f2 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800159c:	f3bf 8f4f 	dsb	sy
}
 80015a0:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d904      	bls.n	80015be <HAL_ETH_Transmit_IT+0x7c>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	1f1a      	subs	r2, r3, #4
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00d      	beq.n	80015ec <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	461a      	mov	r2, r3
 80015da:	2304      	movs	r3, #4
 80015dc:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	461a      	mov	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
  }
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b088      	sub	sp, #32
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0a8      	b.n	8001778 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800162c:	2b23      	cmp	r3, #35	; 0x23
 800162e:	d001      	beq.n	8001634 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e0a1      	b.n	8001778 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	3212      	adds	r2, #18
 8001640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001644:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800164a:	f1c3 0304 	rsb	r3, r3, #4
 800164e:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001650:	e06a      	b.n	8001728 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d007      	beq.n	800166e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <HAL_ETH_ReadData+0x88>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800167e:	2b00      	cmp	r3, #0
 8001680:	d040      	beq.n	8001704 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016b6:	3b04      	subs	r3, #4
 80016b8:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80016de:	461a      	mov	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	f003 f8aa 	bl	800483c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	441a      	add	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	3301      	adds	r3, #1
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d902      	bls.n	8001716 <HAL_ETH_ReadData+0x11c>
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	3b04      	subs	r3, #4
 8001714:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69fa      	ldr	r2, [r7, #28]
 800171a:	3212      	adds	r2, #18
 800171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001720:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800172c:	2b00      	cmp	r3, #0
 800172e:	db06      	blt.n	800173e <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	429a      	cmp	r2, r3
 8001736:	d202      	bcs.n	800173e <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d089      	beq.n	8001652 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	441a      	add	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800174e:	2b00      	cmp	r3, #0
 8001750:	d002      	beq.n	8001758 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f000 f814 	bl	8001780 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800178c:	2301      	movs	r3, #1
 800178e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001794:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	3212      	adds	r2, #18
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017a6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80017a8:	e03d      	b.n	8001826 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d112      	bne.n	80017d8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 f810 	bl	80047dc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	74fb      	strb	r3, [r7, #19]
 80017c6:	e007      	b.n	80017d8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	461a      	mov	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	461a      	mov	r2, r3
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80017d8:	7cfb      	ldrb	r3, [r7, #19]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d023      	beq.n	8001826 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <ETH_UpdateDescriptor+0xfc>)
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	e003      	b.n	80017f6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80017f4:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b03      	cmp	r3, #3
 800180c:	d902      	bls.n	8001814 <ETH_UpdateDescriptor+0x94>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b04      	subs	r3, #4
 8001812:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	3212      	adds	r2, #18
 800181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181e:	617b      	str	r3, [r7, #20]
      desccount--;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	3b01      	subs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d002      	beq.n	8001832 <ETH_UpdateDescriptor+0xb2>
 800182c:	7cfb      	ldrb	r3, [r7, #19]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1bb      	bne.n	80017aa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	429a      	cmp	r2, r3
 800183a:	d01a      	beq.n	8001872 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	3301      	adds	r3, #1
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001846:	f3bf 8f5f 	dmb	sy
}
 800184a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	18ca      	adds	r2, r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001864:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	80004600 	.word	0x80004600

08001880 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3318      	adds	r3, #24
 800188c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800189e:	e03f      	b.n	8001920 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	3304      	adds	r3, #4
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d106      	bne.n	80018c8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	3301      	adds	r3, #1
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80018c8:	7bbb      	ldrb	r3, [r7, #14]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d028      	beq.n	8001920 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68d9      	ldr	r1, [r3, #12]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4613      	mov	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4413      	add	r3, r2
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	440b      	add	r3, r1
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db1b      	blt.n	800191c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	3304      	adds	r3, #4
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 ffe3 	bl	80048bc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3304      	adds	r3, #4
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	3301      	adds	r3, #1
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
 800191a:	e001      	b.n	8001920 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_ETH_ReleaseTxPacket+0xac>
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1b9      	bne.n	80018a0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d112      	bne.n	8001978 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001960:	2b40      	cmp	r3, #64	; 0x40
 8001962:	d109      	bne.n	8001978 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800196c:	461a      	mov	r2, r3
 800196e:	4b50      	ldr	r3, [pc, #320]	; (8001ab0 <HAL_ETH_IRQHandler+0x178>)
 8001970:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f002 faf0 	bl	8003f58 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d113      	bne.n	80019b2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10a      	bne.n	80019b2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a4:	461a      	mov	r2, r3
 80019a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80019aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f002 fae3 	bl	8003f78 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c4:	d14c      	bne.n	8001a60 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d8:	d142      	bne.n	8001a60 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e0:	f043 0208 	orr.w	r2, r3, #8
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019fc:	d11a      	bne.n	8001a34 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_ETH_IRQHandler+0x17c>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001a24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a28:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	22e0      	movs	r2, #224	; 0xe0
 8001a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001a32:	e012      	b.n	8001a5a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a52:	461a      	mov	r2, r3
 8001a54:	f248 6380 	movw	r3, #34432	; 0x8680
 8001a58:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f002 fa9c 	bl	8003f98 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d10e      	bne.n	8001a8c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 f81c 	bl	8001abc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_ETH_IRQHandler+0x180>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_ETH_IRQHandler+0x180>)
 8001a9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a9e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f815 	bl	8001ad0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	00010040 	.word	0x00010040
 8001ab4:	007e2000 	.word	0x007e2000
 8001ab8:	40013c00 	.word	0x40013c00

08001abc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f003 031c 	and.w	r3, r3, #28
 8001b00:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	02db      	lsls	r3, r3, #11
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	019b      	lsls	r3, r3, #6
 8001b12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f023 0302 	bic.w	r3, r3, #2
 8001b22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001b34:	f7ff fa68 	bl	8001008 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b3a:	e00d      	b.n	8001b58 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b3c:	f7ff fa64 	bl	8001008 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4a:	d301      	bcc.n	8001b50 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e010      	b.n	8001b72 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1ec      	bne.n	8001b3c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695b      	ldr	r3, [r3, #20]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3718      	adds	r7, #24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b086      	sub	sp, #24
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
 8001b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	02db      	lsls	r3, r3, #11
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	019b      	lsls	r3, r3, #6
 8001ba8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bd4:	f7ff fa18 	bl	8001008 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bda:	e00d      	b.n	8001bf8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bdc:	f7ff fa14 	bl	8001008 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d301      	bcc.n	8001bf0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e009      	b.n	8001c04 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1ec      	bne.n	8001bdc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0d9      	b.n	8001dd4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	bf14      	ite	ne
 8001c2e:	2301      	movne	r3, #1
 8001c30:	2300      	moveq	r3, #0
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bf0c      	ite	eq
 8001c58:	2301      	moveq	r3, #1
 8001c5a:	2300      	movne	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	bf0c      	ite	eq
 8001c8e:	2301      	moveq	r3, #1
 8001c90:	2300      	movne	r3, #0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	bf14      	ite	ne
 8001ca8:	2301      	movne	r3, #1
 8001caa:	2300      	moveq	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf0c      	ite	eq
 8001cf8:	2301      	moveq	r3, #1
 8001cfa:	2300      	movne	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	461a      	mov	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	461a      	mov	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	461a      	mov	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	0c1b      	lsrs	r3, r3, #16
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e00b      	b.n	8001e0c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dfa:	2b10      	cmp	r3, #16
 8001dfc:	d105      	bne.n	8001e0a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f88f 	bl	8001f24 <ETH_SetMACConfig>

    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
  }
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 031c 	bic.w	r3, r3, #28
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e2c:	f001 fa34 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 8001e30:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	; (8001eac <HAL_ETH_SetMDIOClockRange+0x98>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d908      	bls.n	8001e4c <HAL_ETH_SetMDIOClockRange+0x38>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	4a1c      	ldr	r2, [pc, #112]	; (8001eb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d804      	bhi.n	8001e4c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f043 0308 	orr.w	r3, r3, #8
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e027      	b.n	8001e9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d908      	bls.n	8001e66 <HAL_ETH_SetMDIOClockRange+0x52>
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d204      	bcs.n	8001e66 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f043 030c 	orr.w	r3, r3, #12
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e01a      	b.n	8001e9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d303      	bcc.n	8001e76 <HAL_ETH_SetMDIOClockRange+0x62>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d911      	bls.n	8001e9a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d908      	bls.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d804      	bhi.n	8001e90 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f043 0304 	orr.w	r3, r3, #4
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	e005      	b.n	8001e9c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e000      	b.n	8001e9c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e9a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	01312cff 	.word	0x01312cff
 8001eb0:	02160ebf 	.word	0x02160ebf
 8001eb4:	03938700 	.word	0x03938700
 8001eb8:	05f5e0ff 	.word	0x05f5e0ff
 8001ebc:	08f0d17f 	.word	0x08f0d17f

08001ec0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ef8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001efc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f7ff f888 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f1a:	6193      	str	r3, [r2, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4b51      	ldr	r3, [pc, #324]	; (8002080 <ETH_SetMACConfig+0x15c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7c1b      	ldrb	r3, [r3, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d102      	bne.n	8001f4c <ETH_SetMACConfig+0x28>
 8001f46:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f4a:	e000      	b.n	8001f4e <ETH_SetMACConfig+0x2a>
 8001f4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	7c5b      	ldrb	r3, [r3, #17]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d102      	bne.n	8001f5c <ETH_SetMACConfig+0x38>
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	e000      	b.n	8001f5e <ETH_SetMACConfig+0x3a>
 8001f5c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001f5e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001f64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	7fdb      	ldrb	r3, [r3, #31]
 8001f6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001f6c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001f72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	7f92      	ldrb	r2, [r2, #30]
 8001f78:	2a00      	cmp	r2, #0
 8001f7a:	d102      	bne.n	8001f82 <ETH_SetMACConfig+0x5e>
 8001f7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f80:	e000      	b.n	8001f84 <ETH_SetMACConfig+0x60>
 8001f82:	2200      	movs	r2, #0
                        macconf->Speed |
 8001f84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7f1b      	ldrb	r3, [r3, #28]
 8001f8a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001f8c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001f92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	791b      	ldrb	r3, [r3, #4]
 8001f98:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001fa2:	2a00      	cmp	r2, #0
 8001fa4:	d102      	bne.n	8001fac <ETH_SetMACConfig+0x88>
 8001fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001faa:	e000      	b.n	8001fae <ETH_SetMACConfig+0x8a>
 8001fac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001fae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	7bdb      	ldrb	r3, [r3, #15]
 8001fb4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001fb6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001fbc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fc4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7ff f81e 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002002:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800200a:	2a00      	cmp	r2, #0
 800200c:	d101      	bne.n	8002012 <ETH_SetMACConfig+0xee>
 800200e:	2280      	movs	r2, #128	; 0x80
 8002010:	e000      	b.n	8002014 <ETH_SetMACConfig+0xf0>
 8002012:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002014:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800201a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002022:	2a01      	cmp	r2, #1
 8002024:	d101      	bne.n	800202a <ETH_SetMACConfig+0x106>
 8002026:	2208      	movs	r2, #8
 8002028:	e000      	b.n	800202c <ETH_SetMACConfig+0x108>
 800202a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800202c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002034:	2a01      	cmp	r2, #1
 8002036:	d101      	bne.n	800203c <ETH_SetMACConfig+0x118>
 8002038:	2204      	movs	r2, #4
 800203a:	e000      	b.n	800203e <ETH_SetMACConfig+0x11a>
 800203c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800203e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002046:	2a01      	cmp	r2, #1
 8002048:	d101      	bne.n	800204e <ETH_SetMACConfig+0x12a>
 800204a:	2202      	movs	r2, #2
 800204c:	e000      	b.n	8002050 <ETH_SetMACConfig+0x12c>
 800204e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002050:	4313      	orrs	r3, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002068:	2001      	movs	r0, #1
 800206a:	f7fe ffd9 	bl	8001020 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	ff20810f 	.word	0xff20810f

08002084 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4b3d      	ldr	r3, [pc, #244]	; (8002194 <ETH_SetDMAConfig+0x110>)
 800209e:	4013      	ands	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	7b1b      	ldrb	r3, [r3, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <ETH_SetDMAConfig+0x2c>
 80020aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020ae:	e000      	b.n	80020b2 <ETH_SetDMAConfig+0x2e>
 80020b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	7b5b      	ldrb	r3, [r3, #13]
 80020b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	7f52      	ldrb	r2, [r2, #29]
 80020be:	2a00      	cmp	r2, #0
 80020c0:	d102      	bne.n	80020c8 <ETH_SetDMAConfig+0x44>
 80020c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020c6:	e000      	b.n	80020ca <ETH_SetDMAConfig+0x46>
 80020c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80020ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	7b9b      	ldrb	r3, [r3, #14]
 80020d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80020d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80020d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	7f1b      	ldrb	r3, [r3, #28]
 80020de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7f9b      	ldrb	r3, [r3, #30]
 80020e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80020e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80020ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80020f8:	4313      	orrs	r3, r2
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002108:	461a      	mov	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800211a:	2001      	movs	r0, #1
 800211c:	f7fe ff80 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002128:	461a      	mov	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002138:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800213e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002144:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800214c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800214e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002156:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800215c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002166:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800216a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002178:	2001      	movs	r0, #1
 800217a:	f7fe ff51 	bl	8001020 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002186:	461a      	mov	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	f8de3f23 	.word	0xf8de3f23

08002198 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0a6      	sub	sp, #152	; 0x98
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80021c8:	2300      	movs	r3, #0
 80021ca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80021d4:	2300      	movs	r3, #0
 80021d6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80021fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021fe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002204:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800220c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff fe86 	bl	8001f24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002218:	2301      	movs	r3, #1
 800221a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800221c:	2301      	movs	r3, #1
 800221e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002226:	2301      	movs	r3, #1
 8002228:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800223a:	2300      	movs	r3, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002244:	2301      	movs	r3, #1
 8002246:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800224c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800224e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002252:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002258:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002260:	2300      	movs	r3, #0
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002264:	2300      	movs	r3, #0
 8002266:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	4619      	mov	r1, r3
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ff08 	bl	8002084 <ETH_SetDMAConfig>
}
 8002274:	bf00      	nop
 8002276:	3798      	adds	r7, #152	; 0x98
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3305      	adds	r3, #5
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	021b      	lsls	r3, r3, #8
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	3204      	adds	r2, #4
 8002294:	7812      	ldrb	r2, [r2, #0]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <ETH_MACAddressConfig+0x68>)
 800229e:	4413      	add	r3, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3303      	adds	r3, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3302      	adds	r3, #2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <ETH_MACAddressConfig+0x6c>)
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	6013      	str	r3, [r2, #0]
}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40028040 	.word	0x40028040
 80022e8:	40028044 	.word	0x40028044

080022ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e03e      	b.n	8002378 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68d9      	ldr	r1, [r3, #12]
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	3206      	adds	r2, #6
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d80c      	bhi.n	800235c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68d9      	ldr	r1, [r3, #12]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	461a      	mov	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	e004      	b.n	8002366 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	461a      	mov	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	3301      	adds	r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d9bd      	bls.n	80022fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	611a      	str	r2, [r3, #16]
}
 8002392:	bf00      	nop
 8002394:	3714      	adds	r7, #20
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	e046      	b.n	800243a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6919      	ldr	r1, [r3, #16]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	440b      	add	r3, r1
 80023bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2200      	movs	r2, #0
 80023d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80023f0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	3212      	adds	r2, #18
 8002406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d80c      	bhi.n	800242a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6919      	ldr	r1, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	461a      	mov	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60da      	str	r2, [r3, #12]
 8002428:	e004      	b.n	8002434 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	461a      	mov	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d9b5      	bls.n	80023ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800246a:	60da      	str	r2, [r3, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002478:	b480      	push	{r7}
 800247a:	b08d      	sub	sp, #52	; 0x34
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3318      	adds	r3, #24
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024ba:	d007      	beq.n	80024cc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	3304      	adds	r3, #4
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80024cc:	2302      	movs	r3, #2
 80024ce:	e103      	b.n	80026d8 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3301      	adds	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	461a      	mov	r2, r3
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80024e8:	f023 031f 	bic.w	r3, r3, #31
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	6852      	ldr	r2, [r2, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	431a      	orrs	r2, r3
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002556:	f3bf 8f5f 	dmb	sy
}
 800255a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002568:	e084      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800256a:	6a3b      	ldr	r3, [r7, #32]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	e005      	b.n	8002596 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	3301      	adds	r3, #1
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d902      	bls.n	80025a8 <ETH_Prepare_Tx_Descriptors+0x130>
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	3b04      	subs	r3, #4
 80025a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025b0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80025c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ca:	d007      	beq.n	80025dc <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d0:	3304      	adds	r3, #4
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d029      	beq.n	8002630 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ee:	e019      	b.n	8002624 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80025f0:	f3bf 8f5f 	dmb	sy
}
 80025f4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	3301      	adds	r3, #1
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260a:	2b03      	cmp	r3, #3
 800260c:	d902      	bls.n	8002614 <ETH_Prepare_Tx_Descriptors+0x19c>
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	3b04      	subs	r3, #4
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	3301      	adds	r3, #1
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
 8002624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	429a      	cmp	r2, r3
 800262a:	d3e1      	bcc.n	80025f0 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 800262c:	2302      	movs	r3, #2
 800262e:	e053      	b.n	80026d8 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	3301      	adds	r3, #1
 8002634:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800264e:	f023 031f 	bic.w	r3, r3, #31
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	6852      	ldr	r2, [r2, #4]
 8002656:	431a      	orrs	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	3301      	adds	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002662:	f3bf 8f5f 	dmb	sy
}
 8002666:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f47f af76 	bne.w	800256a <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e005      	b.n	800269e <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ae:	6979      	ldr	r1, [r7, #20]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	3304      	adds	r3, #4
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026be:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80026d2:	b662      	cpsie	i
}
 80026d4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3734      	adds	r7, #52	; 0x34
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	e16b      	b.n	80029d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002700:	2201      	movs	r2, #1
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	429a      	cmp	r2, r3
 800271a:	f040 815a 	bne.w	80029d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d005      	beq.n	8002736 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002732:	2b02      	cmp	r3, #2
 8002734:	d130      	bne.n	8002798 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4313      	orrs	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	69b9      	ldr	r1, [r7, #24]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80b4 	beq.w	80029d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_GPIO_Init+0x30c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002886:	4a5b      	ldr	r2, [pc, #364]	; (80029f4 <HAL_GPIO_Init+0x310>)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	089b      	lsrs	r3, r3, #2
 800288c:	3302      	adds	r3, #2
 800288e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	220f      	movs	r2, #15
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	; (80029f8 <HAL_GPIO_Init+0x314>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02b      	beq.n	800290a <HAL_GPIO_Init+0x226>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a51      	ldr	r2, [pc, #324]	; (80029fc <HAL_GPIO_Init+0x318>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d025      	beq.n	8002906 <HAL_GPIO_Init+0x222>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a50      	ldr	r2, [pc, #320]	; (8002a00 <HAL_GPIO_Init+0x31c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d01f      	beq.n	8002902 <HAL_GPIO_Init+0x21e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4f      	ldr	r2, [pc, #316]	; (8002a04 <HAL_GPIO_Init+0x320>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d019      	beq.n	80028fe <HAL_GPIO_Init+0x21a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4e      	ldr	r2, [pc, #312]	; (8002a08 <HAL_GPIO_Init+0x324>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_GPIO_Init+0x216>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	; (8002a0c <HAL_GPIO_Init+0x328>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d00d      	beq.n	80028f6 <HAL_GPIO_Init+0x212>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4c      	ldr	r2, [pc, #304]	; (8002a10 <HAL_GPIO_Init+0x32c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d007      	beq.n	80028f2 <HAL_GPIO_Init+0x20e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4b      	ldr	r2, [pc, #300]	; (8002a14 <HAL_GPIO_Init+0x330>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d101      	bne.n	80028ee <HAL_GPIO_Init+0x20a>
 80028ea:	2307      	movs	r3, #7
 80028ec:	e00e      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028ee:	2308      	movs	r3, #8
 80028f0:	e00c      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00a      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028f6:	2305      	movs	r3, #5
 80028f8:	e008      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fa:	2304      	movs	r3, #4
 80028fc:	e006      	b.n	800290c <HAL_GPIO_Init+0x228>
 80028fe:	2303      	movs	r3, #3
 8002900:	e004      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002902:	2302      	movs	r3, #2
 8002904:	e002      	b.n	800290c <HAL_GPIO_Init+0x228>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <HAL_GPIO_Init+0x228>
 800290a:	2300      	movs	r3, #0
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f002 0203 	and.w	r2, r2, #3
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	4093      	lsls	r3, r2
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800291c:	4935      	ldr	r1, [pc, #212]	; (80029f4 <HAL_GPIO_Init+0x310>)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	089b      	lsrs	r3, r3, #2
 8002922:	3302      	adds	r3, #2
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800294e:	4a32      	ldr	r2, [pc, #200]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002954:	4b30      	ldr	r3, [pc, #192]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_GPIO_Init+0x334>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x334>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029cc:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b0f      	cmp	r3, #15
 80029dc:	f67f ae90 	bls.w	8002700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40013800 	.word	0x40013800
 80029f8:	40020000 	.word	0x40020000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	40020800 	.word	0x40020800
 8002a04:	40020c00 	.word	0x40020c00
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40021800 	.word	0x40021800
 8002a14:	40021c00 	.word	0x40021c00
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e267      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a6e:	4b88      	ldr	r3, [pc, #544]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d00c      	beq.n	8002a94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7a:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d112      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a92:	d10b      	bne.n	8002aac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	4b7e      	ldr	r3, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d05b      	beq.n	8002b58 <HAL_RCC_OscConfig+0x108>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d157      	bne.n	8002b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e242      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x74>
 8002ab6:	4b76      	ldr	r3, [pc, #472]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x98>
 8002ace:	4b70      	ldr	r3, [pc, #448]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a6f      	ldr	r2, [pc, #444]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6d      	ldr	r3, [pc, #436]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6c      	ldr	r2, [pc, #432]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xb0>
 8002ae8:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a68      	ldr	r2, [pc, #416]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b66      	ldr	r3, [pc, #408]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a65      	ldr	r2, [pc, #404]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fa7e 	bl	8001008 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fa7a 	bl	8001008 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e207      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xc0>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa6a 	bl	8001008 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa66 	bl	8001008 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1f3      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0xe8>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1c7      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3b      	ldr	r3, [pc, #236]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b34      	ldr	r3, [pc, #208]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fa1f 	bl	8001008 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fa1b 	bl	8001008 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e1a8      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4925      	ldr	r1, [pc, #148]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_RCC_OscConfig+0x244>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c08:	f7fe f9fe 	bl	8001008 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe f9fa 	bl	8001008 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e187      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d036      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d016      	beq.n	8002c70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe f9de 	bl	8001008 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe f9da 	bl	8001008 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e167      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCC_OscConfig+0x240>)
 8002c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x200>
 8002c6e:	e01b      	b.n	8002ca8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_OscConfig+0x248>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c76:	f7fe f9c7 	bl	8001008 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7c:	e00e      	b.n	8002c9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f7fe f9c3 	bl	8001008 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d907      	bls.n	8002c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e150      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002c90:	40023800 	.word	0x40023800
 8002c94:	42470000 	.word	0x42470000
 8002c98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ea      	bne.n	8002c7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8097 	beq.w	8002de4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b81      	ldr	r3, [pc, #516]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10f      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a7c      	ldr	r2, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	60bb      	str	r3, [r7, #8]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d118      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf2:	4b74      	ldr	r3, [pc, #464]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a73      	ldr	r2, [pc, #460]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfe:	f7fe f983 	bl	8001008 <HAL_GetTick>
 8002d02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d06:	f7fe f97f 	bl	8001008 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e10c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_OscConfig+0x474>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0f0      	beq.n	8002d06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCC_OscConfig+0x2ea>
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e01c      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x30c>
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b5c      	ldr	r3, [pc, #368]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0x324>
 8002d5c:	4b58      	ldr	r3, [pc, #352]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	4a57      	ldr	r2, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a54      	ldr	r2, [pc, #336]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	f023 0304 	bic.w	r3, r3, #4
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7c:	f7fe f944 	bl	8001008 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d84:	f7fe f940 	bl	8001008 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e0cb      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0ee      	beq.n	8002d84 <HAL_RCC_OscConfig+0x334>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da8:	f7fe f92e 	bl	8001008 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002db0:	f7fe f92a 	bl	8001008 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e0b5      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ee      	bne.n	8002db0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a38      	ldr	r2, [pc, #224]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80a1 	beq.w	8002f30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d05c      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d141      	bne.n	8002e86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e08:	f7fe f8fe 	bl	8001008 <HAL_GetTick>
 8002e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe f8fa 	bl	8001008 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e087      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	041b      	lsls	r3, r3, #16
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e50:	061b      	lsls	r3, r3, #24
 8002e52:	491b      	ldr	r1, [pc, #108]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5e:	f7fe f8d3 	bl	8001008 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e64:	e008      	b.n	8002e78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e66:	f7fe f8cf 	bl	8001008 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e05c      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCC_OscConfig+0x416>
 8002e84:	e054      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f8bc 	bl	8001008 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe f8b8 	bl	8001008 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e045      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x444>
 8002eb2:	e03d      	b.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e038      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ecc:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_OscConfig+0x4ec>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d028      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d121      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d11a      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002efc:	4013      	ands	r3, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	3b01      	subs	r3, #1
 8002f16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0cc      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b68      	ldr	r3, [pc, #416]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d90c      	bls.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b63      	ldr	r3, [pc, #396]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0b8      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d020      	beq.n	8002fca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f94:	4b59      	ldr	r3, [pc, #356]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	4a58      	ldr	r2, [pc, #352]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d005      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fac:	4b53      	ldr	r3, [pc, #332]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	4a52      	ldr	r2, [pc, #328]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fb8:	4b50      	ldr	r3, [pc, #320]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	494d      	ldr	r1, [pc, #308]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d044      	beq.n	8003060 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d107      	bne.n	8002fee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d119      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e07f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d107      	bne.n	800300e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e06f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e067      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	4934      	ldr	r1, [pc, #208]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	4313      	orrs	r3, r2
 800302e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fd ffea 	bl	8001008 <HAL_GetTick>
 8003034:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fd ffe6 	bl	8001008 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e04f      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b2b      	ldr	r3, [pc, #172]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d20c      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003076:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e032      	b.n	80030ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	4916      	ldr	r1, [pc, #88]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	490e      	ldr	r1, [pc, #56]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c6:	f000 f821 	bl	800310c <HAL_RCC_GetSysClockFreq>
 80030ca:	4602      	mov	r2, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	490a      	ldr	r1, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x1c0>)
 80030d8:	5ccb      	ldrb	r3, [r1, r3]
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fc4c 	bl	8000984 <HAL_InitTick>

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00
 80030fc:	40023800 	.word	0x40023800
 8003100:	08017f10 	.word	0x08017f10
 8003104:	20000000 	.word	0x20000000
 8003108:	20000004 	.word	0x20000004

0800310c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800310c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003110:	b090      	sub	sp, #64	; 0x40
 8003112:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	2300      	movs	r3, #0
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311c:	2300      	movs	r3, #0
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003124:	4b59      	ldr	r3, [pc, #356]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d00d      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x40>
 8003130:	2b08      	cmp	r3, #8
 8003132:	f200 80a1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x34>
 800313a:	2b04      	cmp	r3, #4
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x3a>
 800313e:	e09b      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003144:	e09b      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003146:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003148:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800314a:	e098      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800314c:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d028      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003162:	4b4a      	ldr	r3, [pc, #296]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	099b      	lsrs	r3, r3, #6
 8003168:	2200      	movs	r2, #0
 800316a:	623b      	str	r3, [r7, #32]
 800316c:	627a      	str	r2, [r7, #36]	; 0x24
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003174:	2100      	movs	r1, #0
 8003176:	4b47      	ldr	r3, [pc, #284]	; (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003178:	fb03 f201 	mul.w	r2, r3, r1
 800317c:	2300      	movs	r3, #0
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	4413      	add	r3, r2
 8003184:	4a43      	ldr	r2, [pc, #268]	; (8003294 <HAL_RCC_GetSysClockFreq+0x188>)
 8003186:	fba0 1202 	umull	r1, r2, r0, r2
 800318a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800318c:	460a      	mov	r2, r1
 800318e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003192:	4413      	add	r3, r2
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003198:	2200      	movs	r2, #0
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	61fa      	str	r2, [r7, #28]
 800319e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031a6:	f7fd f863 	bl	8000270 <__aeabi_uldivmod>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4613      	mov	r3, r2
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b2:	e053      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	2200      	movs	r2, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	617a      	str	r2, [r7, #20]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80031c6:	f04f 0b00 	mov.w	fp, #0
 80031ca:	4652      	mov	r2, sl
 80031cc:	465b      	mov	r3, fp
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	0159      	lsls	r1, r3, #5
 80031d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031dc:	0150      	lsls	r0, r2, #5
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	ebb2 080a 	subs.w	r8, r2, sl
 80031e6:	eb63 090b 	sbc.w	r9, r3, fp
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80031f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80031fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003202:	eb63 0509 	sbc.w	r5, r3, r9
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	00eb      	lsls	r3, r5, #3
 8003210:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003214:	00e2      	lsls	r2, r4, #3
 8003216:	4614      	mov	r4, r2
 8003218:	461d      	mov	r5, r3
 800321a:	eb14 030a 	adds.w	r3, r4, sl
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	eb45 030b 	adc.w	r3, r5, fp
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	2200      	movs	r2, #0
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	60fa      	str	r2, [r7, #12]
 800324c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003250:	f7fd f80e 	bl	8000270 <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_GetSysClockFreq+0x180>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800326c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetSysClockFreq+0x184>)
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003280:	4618      	mov	r0, r3
 8003282:	3740      	adds	r7, #64	; 0x40
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	017d7840 	.word	0x017d7840

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	08017f20 	.word	0x08017f20

080032d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	220f      	movs	r2, #15
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800330c:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_RCC_GetClockConfig+0x5c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	08db      	lsrs	r3, r3, #3
 8003312:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <HAL_RCC_GetClockConfig+0x60>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0207 	and.w	r2, r3, #7
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	601a      	str	r2, [r3, #0]
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07b      	b.n	8003446 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800335e:	d009      	beq.n	8003374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e005      	b.n	8003374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fa64 	bl	800085c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	ea42 0103 	orr.w	r1, r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0104 	and.w	r1, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0210 	and.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08c      	sub	sp, #48	; 0x30
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
 800345a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800345c:	2301      	movs	r3, #1
 800345e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x26>
 8003470:	2302      	movs	r3, #2
 8003472:	e198      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x358>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800347c:	f7fd fdc4 	bl	8001008 <HAL_GetTick>
 8003480:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003492:	887b      	ldrh	r3, [r7, #2]
 8003494:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003496:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800349a:	2b01      	cmp	r3, #1
 800349c:	d00f      	beq.n	80034be <HAL_SPI_TransmitReceive+0x70>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034a4:	d107      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x68>
 80034ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d003      	beq.n	80034be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
 80034b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034bc:	e16d      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x82>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_TransmitReceive+0x82>
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d103      	bne.n	80034d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80034d6:	e160      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d003      	beq.n	80034ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2205      	movs	r2, #5
 80034e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	887a      	ldrh	r2, [r7, #2]
 80034fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	887a      	ldrh	r2, [r7, #2]
 800350e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d007      	beq.n	8003540 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003548:	d17c      	bne.n	8003644 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d002      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x10a>
 8003552:	8b7b      	ldrh	r3, [r7, #26]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d16a      	bne.n	800362e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	881a      	ldrh	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003568:	1c9a      	adds	r2, r3, #2
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800357c:	e057      	b.n	800362e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d11b      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x176>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d016      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0x176>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	2b01      	cmp	r3, #1
 800359a:	d113      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a0:	881a      	ldrh	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	1c9a      	adds	r2, r3, #2
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d119      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x1b8>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d014      	beq.n	8003606 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	b292      	uxth	r2, r2
 80035e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003602:	2301      	movs	r3, #1
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003606:	f7fd fcff 	bl	8001008 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003612:	429a      	cmp	r2, r3
 8003614:	d80b      	bhi.n	800362e <HAL_SPI_TransmitReceive+0x1e0>
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800361c:	d007      	beq.n	800362e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800362c:	e0b5      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1a2      	bne.n	800357e <HAL_SPI_TransmitReceive+0x130>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d19d      	bne.n	800357e <HAL_SPI_TransmitReceive+0x130>
 8003642:	e080      	b.n	8003746 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SPI_TransmitReceive+0x204>
 800364c:	8b7b      	ldrh	r3, [r7, #26]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d16f      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	330c      	adds	r3, #12
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003678:	e05b      	b.n	8003732 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	d11c      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x274>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d017      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x274>
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d114      	bne.n	80036c2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	330c      	adds	r3, #12
 80036a2:	7812      	ldrb	r2, [r2, #0]
 80036a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	1c5a      	adds	r2, r3, #1
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d119      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x2b6>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d014      	beq.n	8003704 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ec:	1c5a      	adds	r2, r3, #1
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003700:	2301      	movs	r3, #1
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003704:	f7fd fc80 	bl	8001008 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003710:	429a      	cmp	r2, r3
 8003712:	d803      	bhi.n	800371c <HAL_SPI_TransmitReceive+0x2ce>
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800371a:	d102      	bne.n	8003722 <HAL_SPI_TransmitReceive+0x2d4>
 800371c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003730:	e033      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d19e      	bne.n	800367a <HAL_SPI_TransmitReceive+0x22c>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d199      	bne.n	800367a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8b8 	bl	80038c0 <SPI_EndRxTxTransaction>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003762:	e01a      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10a      	bne.n	8003782 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003790:	e003      	b.n	800379a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037c0:	f7fd fc22 	bl	8001008 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	4413      	add	r3, r2
 80037ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037d0:	f7fd fc1a 	bl	8001008 <HAL_GetTick>
 80037d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	015b      	lsls	r3, r3, #5
 80037dc:	0d1b      	lsrs	r3, r3, #20
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	fb02 f303 	mul.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037e6:	e054      	b.n	8003892 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ee:	d050      	beq.n	8003892 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037f0:	f7fd fc0a 	bl	8001008 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d902      	bls.n	8003806 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d13d      	bne.n	8003882 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003814:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800381e:	d111      	bne.n	8003844 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003828:	d004      	beq.n	8003834 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003832:	d107      	bne.n	8003844 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003842:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384c:	d10f      	bne.n	800386e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e017      	b.n	80038b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	3b01      	subs	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	4013      	ands	r3, r2
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	bf0c      	ite	eq
 80038a2:	2301      	moveq	r3, #1
 80038a4:	2300      	movne	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	461a      	mov	r2, r3
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d19b      	bne.n	80037e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3720      	adds	r7, #32
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000000 	.word	0x20000000

080038c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af02      	add	r7, sp, #8
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2201      	movs	r2, #1
 80038d4:	2102      	movs	r1, #2
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f7ff ff6a 	bl	80037b0 <SPI_WaitFlagStateUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e6:	f043 0220 	orr.w	r2, r3, #32
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e032      	b.n	8003958 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038f2:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <SPI_EndRxTxTransaction+0xa0>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <SPI_EndRxTxTransaction+0xa4>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	0d5b      	lsrs	r3, r3, #21
 80038fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003910:	d112      	bne.n	8003938 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f7ff ff47 	bl	80037b0 <SPI_WaitFlagStateUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d016      	beq.n	8003956 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e00f      	b.n	8003958 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	3b01      	subs	r3, #1
 8003942:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394e:	2b80      	cmp	r3, #128	; 0x80
 8003950:	d0f2      	beq.n	8003938 <SPI_EndRxTxTransaction+0x78>
 8003952:	e000      	b.n	8003956 <SPI_EndRxTxTransaction+0x96>
        break;
 8003954:	bf00      	nop
  }

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3718      	adds	r7, #24
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000000 	.word	0x20000000
 8003964:	165e9f81 	.word	0x165e9f81

08003968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e041      	b.n	80039fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d106      	bne.n	8003994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f000 f839 	bl	8003a06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2202      	movs	r2, #2
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4619      	mov	r1, r3
 80039a6:	4610      	mov	r0, r2
 80039a8:	f000 f9c0 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e04e      	b.n	8003ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	; (8003ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	; (8003aec <HAL_TIM_Base_Start_IT+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d020      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01b      	beq.n	8003b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0202 	mvn.w	r2, #2
 8003b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f8d2 	bl	8003cf0 <HAL_TIM_IC_CaptureCallback>
 8003b4c:	e005      	b.n	8003b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8c4 	bl	8003cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8d5 	bl	8003d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d020      	beq.n	8003bac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0204 	mvn.w	r2, #4
 8003b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 f8ac 	bl	8003cf0 <HAL_TIM_IC_CaptureCallback>
 8003b98:	e005      	b.n	8003ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f89e 	bl	8003cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 f8af 	bl	8003d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d020      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0208 	mvn.w	r2, #8
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f886 	bl	8003cf0 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f878 	bl	8003cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f889 	bl	8003d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d020      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0210 	mvn.w	r2, #16
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f860 	bl	8003cf0 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f852 	bl	8003cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f863 	bl	8003d04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00c      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0201 	mvn.w	r2, #1
 8003c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fc fdac 	bl	80007c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00c      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f906 	bl	8003e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00c      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f834 	bl	8003d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0220 	mvn.w	r2, #32
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8d8 	bl	8003e84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a46      	ldr	r2, [pc, #280]	; (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d00f      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a43      	ldr	r2, [pc, #268]	; (8003e5c <TIM_Base_SetConfig+0x130>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00b      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a42      	ldr	r2, [pc, #264]	; (8003e60 <TIM_Base_SetConfig+0x134>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d007      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a41      	ldr	r2, [pc, #260]	; (8003e64 <TIM_Base_SetConfig+0x138>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0x40>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d108      	bne.n	8003d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d02b      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8c:	d027      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a32      	ldr	r2, [pc, #200]	; (8003e5c <TIM_Base_SetConfig+0x130>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d023      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a31      	ldr	r2, [pc, #196]	; (8003e60 <TIM_Base_SetConfig+0x134>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d01f      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a30      	ldr	r2, [pc, #192]	; (8003e64 <TIM_Base_SetConfig+0x138>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d01b      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d017      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <TIM_Base_SetConfig+0x140>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d013      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <TIM_Base_SetConfig+0x144>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00f      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <TIM_Base_SetConfig+0x148>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00b      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <TIM_Base_SetConfig+0x14c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d007      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <TIM_Base_SetConfig+0x150>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d003      	beq.n	8003dde <TIM_Base_SetConfig+0xb2>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <TIM_Base_SetConfig+0x154>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d108      	bne.n	8003df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689a      	ldr	r2, [r3, #8]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a10      	ldr	r2, [pc, #64]	; (8003e58 <TIM_Base_SetConfig+0x12c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_Base_SetConfig+0xf8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <TIM_Base_SetConfig+0x13c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	f023 0201 	bic.w	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40000400 	.word	0x40000400
 8003e60:	40000800 	.word	0x40000800
 8003e64:	40000c00 	.word	0x40000c00
 8003e68:	40010400 	.word	0x40010400
 8003e6c:	40014000 	.word	0x40014000
 8003e70:	40014400 	.word	0x40014400
 8003e74:	40014800 	.word	0x40014800
 8003e78:	40001800 	.word	0x40001800
 8003e7c:	40001c00 	.word	0x40001c00
 8003e80:	40002000 	.word	0x40002000

08003e84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	b08c      	sub	sp, #48	; 0x30
 8003eb0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f003 fd91 	bl	80079dc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <MX_LWIP_Init+0x78>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <MX_LWIP_Init+0x7c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003ec6:	4b19      	ldr	r3, [pc, #100]	; (8003f2c <MX_LWIP_Init+0x80>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <MX_LWIP_Init+0x84>)
 8003ece:	9302      	str	r3, [sp, #8]
 8003ed0:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <MX_LWIP_Init+0x88>)
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	4b14      	ldr	r3, [pc, #80]	; (8003f2c <MX_LWIP_Init+0x80>)
 8003eda:	4a13      	ldr	r2, [pc, #76]	; (8003f28 <MX_LWIP_Init+0x7c>)
 8003edc:	4911      	ldr	r1, [pc, #68]	; (8003f24 <MX_LWIP_Init+0x78>)
 8003ede:	4816      	ldr	r0, [pc, #88]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003ee0:	f004 fb46 	bl	8008570 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003ee4:	4814      	ldr	r0, [pc, #80]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003ee6:	f004 fcfd 	bl	80088e4 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003eea:	4813      	ldr	r0, [pc, #76]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003eec:	f004 fd0a 	bl	8008904 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003ef0:	4912      	ldr	r1, [pc, #72]	; (8003f3c <MX_LWIP_Init+0x90>)
 8003ef2:	4811      	ldr	r0, [pc, #68]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003ef4:	f004 fe0c 	bl	8008b10 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 1024);
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_LWIP_Init+0x94>)
 8003efa:	1d3c      	adds	r4, r7, #4
 8003efc:	461d      	mov	r5, r3
 8003efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	490a      	ldr	r1, [pc, #40]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd20 	bl	8004954 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003f14:	4808      	ldr	r0, [pc, #32]	; (8003f38 <MX_LWIP_Init+0x8c>)
 8003f16:	f00b ff61 	bl	800fddc <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003f1a:	bf00      	nop
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000430 	.word	0x20000430
 8003f28:	20000434 	.word	0x20000434
 8003f2c:	20000438 	.word	0x20000438
 8003f30:	08007919 	.word	0x08007919
 8003f34:	0800441d 	.word	0x0800441d
 8003f38:	200003f8 	.word	0x200003f8
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	0801504c 	.word	0x0801504c

08003f44 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8003f60:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <HAL_ETH_RxCpltCallback+0x1c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fe71 	bl	8004c4c <osSemaphoreRelease>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20004f08 	.word	0x20004f08

08003f78 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003f80:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <HAL_ETH_TxCpltCallback+0x1c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe61 	bl	8004c4c <osSemaphoreRelease>
}
 8003f8a:	bf00      	nop
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20004f0c 	.word	0x20004f0c

08003f98 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fd ff8d 	bl	8001ec0 <HAL_ETH_GetDMAError>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d104      	bne.n	8003fba <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003fb0:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <HAL_ETH_ErrorCallback+0x2c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fe49 	bl	8004c4c <osSemaphoreRelease>
  }
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20004f08 	.word	0x20004f08

08003fc8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003fc8:	b5b0      	push	{r4, r5, r7, lr}
 8003fca:	b0ac      	sub	sp, #176	; 0xb0
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8003fe2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fe6:	2264      	movs	r2, #100	; 0x64
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4618      	mov	r0, r3
 8003fec:	f010 f9ed 	bl	80143ca <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003ff0:	4b90      	ldr	r3, [pc, #576]	; (8004234 <low_level_init+0x26c>)
 8003ff2:	4a91      	ldr	r2, [pc, #580]	; (8004238 <low_level_init+0x270>)
 8003ff4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 8003ff6:	23ae      	movs	r3, #174	; 0xae
 8003ff8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8004002:	2365      	movs	r3, #101	; 0x65
 8004004:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 8004008:	2311      	movs	r3, #17
 800400a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 800400e:	23c2      	movs	r3, #194	; 0xc2
 8004010:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8004014:	23d9      	movs	r3, #217	; 0xd9
 8004016:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800401a:	4a86      	ldr	r2, [pc, #536]	; (8004234 <low_level_init+0x26c>)
 800401c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004020:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004022:	4b84      	ldr	r3, [pc, #528]	; (8004234 <low_level_init+0x26c>)
 8004024:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004028:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800402a:	4b82      	ldr	r3, [pc, #520]	; (8004234 <low_level_init+0x26c>)
 800402c:	4a83      	ldr	r2, [pc, #524]	; (800423c <low_level_init+0x274>)
 800402e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004030:	4b80      	ldr	r3, [pc, #512]	; (8004234 <low_level_init+0x26c>)
 8004032:	4a83      	ldr	r2, [pc, #524]	; (8004240 <low_level_init+0x278>)
 8004034:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004036:	4b7f      	ldr	r3, [pc, #508]	; (8004234 <low_level_init+0x26c>)
 8004038:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800403c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800403e:	487d      	ldr	r0, [pc, #500]	; (8004234 <low_level_init+0x26c>)
 8004040:	f7fd f8f4 	bl	800122c <HAL_ETH_Init>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800404a:	2238      	movs	r2, #56	; 0x38
 800404c:	2100      	movs	r1, #0
 800404e:	487d      	ldr	r0, [pc, #500]	; (8004244 <low_level_init+0x27c>)
 8004050:	f010 f9bb 	bl	80143ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004054:	4b7b      	ldr	r3, [pc, #492]	; (8004244 <low_level_init+0x27c>)
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800405a:	4b7a      	ldr	r3, [pc, #488]	; (8004244 <low_level_init+0x27c>)
 800405c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004060:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004062:	4b78      	ldr	r3, [pc, #480]	; (8004244 <low_level_init+0x27c>)
 8004064:	2200      	movs	r2, #0
 8004066:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004068:	4877      	ldr	r0, [pc, #476]	; (8004248 <low_level_init+0x280>)
 800406a:	f004 f93b 	bl	80082e4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2206      	movs	r2, #6
 8004072:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004076:	4b6f      	ldr	r3, [pc, #444]	; (8004234 <low_level_init+0x26c>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	781a      	ldrb	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <low_level_init+0x26c>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	785a      	ldrb	r2, [r3, #1]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800408e:	4b69      	ldr	r3, [pc, #420]	; (8004234 <low_level_init+0x26c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	789a      	ldrb	r2, [r3, #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800409a:	4b66      	ldr	r3, [pc, #408]	; (8004234 <low_level_init+0x26c>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	78da      	ldrb	r2, [r3, #3]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040a6:	4b63      	ldr	r3, [pc, #396]	; (8004234 <low_level_init+0x26c>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	791a      	ldrb	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040b2:	4b60      	ldr	r3, [pc, #384]	; (8004234 <low_level_init+0x26c>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	795a      	ldrb	r2, [r3, #5]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040c4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040cc:	f043 030a 	orr.w	r3, r3, #10
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80040d8:	2300      	movs	r3, #0
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040dc:	2300      	movs	r3, #0
 80040de:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80040e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040e4:	2101      	movs	r1, #1
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd30 	bl	8004b4c <osSemaphoreCreate>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4a57      	ldr	r2, [pc, #348]	; (800424c <low_level_init+0x284>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 80040f2:	2300      	movs	r3, #0
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
 80040f6:	2300      	movs	r3, #0
 80040f8:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 80040fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fd23 	bl	8004b4c <osSemaphoreCreate>
 8004106:	4603      	mov	r3, r0
 8004108:	4a51      	ldr	r2, [pc, #324]	; (8004250 <low_level_init+0x288>)
 800410a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800410c:	4b4f      	ldr	r3, [pc, #316]	; (800424c <low_level_init+0x284>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fd4c 	bl	8004bb0 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8004118:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <low_level_init+0x288>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f000 fd46 	bl	8004bb0 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004124:	4b4b      	ldr	r3, [pc, #300]	; (8004254 <low_level_init+0x28c>)
 8004126:	f107 0408 	add.w	r4, r7, #8
 800412a:	461d      	mov	r5, r3
 800412c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800412e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004130:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004138:	f107 0308 	add.w	r3, r7, #8
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fc08 	bl	8004954 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8004144:	4944      	ldr	r1, [pc, #272]	; (8004258 <low_level_init+0x290>)
 8004146:	4845      	ldr	r0, [pc, #276]	; (800425c <low_level_init+0x294>)
 8004148:	f7fc fdc7 	bl	8000cda <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 800414c:	4843      	ldr	r0, [pc, #268]	; (800425c <low_level_init+0x294>)
 800414e:	f7fc fdf6 	bl	8000d3e <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8004152:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004156:	2b00      	cmp	r3, #0
 8004158:	d165      	bne.n	8004226 <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800415a:	4840      	ldr	r0, [pc, #256]	; (800425c <low_level_init+0x294>)
 800415c:	f7fc fe97 	bl	8000e8e <DP83848_GetLinkState>
 8004160:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8004164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004168:	2b01      	cmp	r3, #1
 800416a:	dc06      	bgt.n	800417a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f004 fc9f 	bl	8008ab0 <netif_set_link_down>
      netif_set_down(netif);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f004 fc32 	bl	80089dc <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004178:	e057      	b.n	800422a <low_level_init+0x262>
      switch (PHYLinkState)
 800417a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800417e:	3b02      	subs	r3, #2
 8004180:	2b03      	cmp	r3, #3
 8004182:	d82b      	bhi.n	80041dc <low_level_init+0x214>
 8004184:	a201      	add	r2, pc, #4	; (adr r2, 800418c <low_level_init+0x1c4>)
 8004186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418a:	bf00      	nop
 800418c:	0800419d 	.word	0x0800419d
 8004190:	080041af 	.word	0x080041af
 8004194:	080041bf 	.word	0x080041bf
 8004198:	080041cf 	.word	0x080041cf
        duplex = ETH_FULLDUPLEX_MODE;
 800419c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80041a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80041ac:	e01f      	b.n	80041ee <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80041b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80041bc:	e017      	b.n	80041ee <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80041be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80041cc:	e00f      	b.n	80041ee <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80041da:	e008      	b.n	80041ee <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80041dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80041e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80041ec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80041ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f2:	4619      	mov	r1, r3
 80041f4:	480f      	ldr	r0, [pc, #60]	; (8004234 <low_level_init+0x26c>)
 80041f6:	f7fd fd09 	bl	8001c0c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80041fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fe:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8004200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004204:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800420a:	4619      	mov	r1, r3
 800420c:	4809      	ldr	r0, [pc, #36]	; (8004234 <low_level_init+0x26c>)
 800420e:	f7fd fde7 	bl	8001de0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8004212:	4808      	ldr	r0, [pc, #32]	; (8004234 <low_level_init+0x26c>)
 8004214:	f7fd f888 	bl	8001328 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f004 fb73 	bl	8008904 <netif_set_up>
    netif_set_link_up(netif);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f004 fc0e 	bl	8008a40 <netif_set_link_up>
}
 8004224:	e001      	b.n	800422a <low_level_init+0x262>
    Error_Handler();
 8004226:	f7fc fadd 	bl	80007e4 <Error_Handler>
}
 800422a:	bf00      	nop
 800422c:	37b0      	adds	r7, #176	; 0xb0
 800422e:	46bd      	mov	sp, r7
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	bf00      	nop
 8004234:	20004f10 	.word	0x20004f10
 8004238:	40028000 	.word	0x40028000
 800423c:	20004e68 	.word	0x20004e68
 8004240:	20004dc8 	.word	0x20004dc8
 8004244:	20004fc0 	.word	0x20004fc0
 8004248:	08017f28 	.word	0x08017f28
 800424c:	20004f08 	.word	0x20004f08
 8004250:	20004f0c 	.word	0x20004f0c
 8004254:	08015070 	.word	0x08015070
 8004258:	2000000c 	.word	0x2000000c
 800425c:	20004ff8 	.word	0x20004ff8

08004260 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b092      	sub	sp, #72	; 0x48
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2230      	movs	r2, #48	; 0x30
 800427e:	2100      	movs	r1, #0
 8004280:	4618      	mov	r0, r3
 8004282:	f010 f8a2 	bl	80143ca <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004286:	f107 030c 	add.w	r3, r7, #12
 800428a:	2230      	movs	r2, #48	; 0x30
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f010 f89b 	bl	80143ca <memset>

  for(q = p; q != NULL; q = q->next)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
 8004298:	e045      	b.n	8004326 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800429a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429c:	2b03      	cmp	r3, #3
 800429e:	d902      	bls.n	80042a6 <low_level_output+0x46>
      return ERR_IF;
 80042a0:	f06f 030b 	mvn.w	r3, #11
 80042a4:	e06c      	b.n	8004380 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80042a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a8:	6859      	ldr	r1, [r3, #4]
 80042aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ac:	4613      	mov	r3, r2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	3348      	adds	r3, #72	; 0x48
 80042b6:	443b      	add	r3, r7
 80042b8:	3b3c      	subs	r3, #60	; 0x3c
 80042ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80042bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042be:	895b      	ldrh	r3, [r3, #10]
 80042c0:	4619      	mov	r1, r3
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	4613      	mov	r3, r2
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	3348      	adds	r3, #72	; 0x48
 80042ce:	443b      	add	r3, r7
 80042d0:	3b38      	subs	r3, #56	; 0x38
 80042d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80042d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80042da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	f107 000c 	add.w	r0, r7, #12
 80042e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042e4:	460b      	mov	r3, r1
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	440b      	add	r3, r1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	18c1      	adds	r1, r0, r3
 80042ee:	4613      	mov	r3, r2
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	3348      	adds	r3, #72	; 0x48
 80042f8:	443b      	add	r3, r7
 80042fa:	3b34      	subs	r3, #52	; 0x34
 80042fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80042fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	3348      	adds	r3, #72	; 0x48
 8004312:	443b      	add	r3, r7
 8004314:	3b34      	subs	r3, #52	; 0x34
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    }

    i++;
 800431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431c:	3301      	adds	r3, #1
 800431e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	643b      	str	r3, [r7, #64]	; 0x40
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1b6      	bne.n	800429a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	891b      	ldrh	r3, [r3, #8]
 8004330:	461a      	mov	r2, r3
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <low_level_output+0x128>)
 8004334:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004336:	4a14      	ldr	r2, [pc, #80]	; (8004388 <low_level_output+0x128>)
 8004338:	f107 030c 	add.w	r3, r7, #12
 800433c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <low_level_output+0x128>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8004344:	6838      	ldr	r0, [r7, #0]
 8004346:	f005 f837 	bl	80093b8 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800434a:	490f      	ldr	r1, [pc, #60]	; (8004388 <low_level_output+0x128>)
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <low_level_output+0x12c>)
 800434e:	f7fd f8f8 	bl	8001542 <HAL_ETH_Transmit_IT>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10e      	bne.n	8004376 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8004358:	bf00      	nop
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <low_level_output+0x130>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fc24 	bl	8004bb0 <osSemaphoreWait>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f5      	bne.n	800435a <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800436e:	4807      	ldr	r0, [pc, #28]	; (800438c <low_level_output+0x12c>)
 8004370:	f7fd fa86 	bl	8001880 <HAL_ETH_ReleaseTxPacket>
 8004374:	e002      	b.n	800437c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8004376:	6838      	ldr	r0, [r7, #0]
 8004378:	f004 ff78 	bl	800926c <pbuf_free>
  }

  return errval;
 800437c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004380:	4618      	mov	r0, r3
 8004382:	3748      	adds	r7, #72	; 0x48
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20004fc0 	.word	0x20004fc0
 800438c:	20004f10 	.word	0x20004f10
 8004390:	20004f0c 	.word	0x20004f0c

08004394 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <low_level_input+0x2c>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d105      	bne.n	80043b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80043a8:	f107 030c 	add.w	r3, r7, #12
 80043ac:	4619      	mov	r1, r3
 80043ae:	4805      	ldr	r0, [pc, #20]	; (80043c4 <low_level_input+0x30>)
 80043b0:	f7fd f923 	bl	80015fa <HAL_ETH_ReadData>
  }

  return p;
 80043b4:	68fb      	ldr	r3, [r7, #12]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20004dc4 	.word	0x20004dc4
 80043c4:	20004f10 	.word	0x20004f10

080043c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <ethernetif_input+0x50>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043e0:	4618      	mov	r0, r3
 80043e2:	f000 fbe5 	bl	8004bb0 <osSemaphoreWait>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f5      	bne.n	80043d8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f7ff ffd1 	bl	8004394 <low_level_input>
 80043f2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	4798      	blx	r3
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f004 ff2e 	bl	800926c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1ea      	bne.n	80043ec <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004416:	e7df      	b.n	80043d8 <ethernetif_input+0x10>
 8004418:	20004f08 	.word	0x20004f08

0800441c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d106      	bne.n	8004438 <ethernetif_init+0x1c>
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <ethernetif_init+0x48>)
 800442c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004430:	490d      	ldr	r1, [pc, #52]	; (8004468 <ethernetif_init+0x4c>)
 8004432:	480e      	ldr	r0, [pc, #56]	; (800446c <ethernetif_init+0x50>)
 8004434:	f00f ff64 	bl	8014300 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2273      	movs	r2, #115	; 0x73
 800443c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2274      	movs	r2, #116	; 0x74
 8004444:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a09      	ldr	r2, [pc, #36]	; (8004470 <ethernetif_init+0x54>)
 800444c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a08      	ldr	r2, [pc, #32]	; (8004474 <ethernetif_init+0x58>)
 8004452:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff fdb7 	bl	8003fc8 <low_level_init>

  return ERR_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3708      	adds	r7, #8
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	0801508c 	.word	0x0801508c
 8004468:	080150a8 	.word	0x080150a8
 800446c:	080150b8 	.word	0x080150b8
 8004470:	08011ca9 	.word	0x08011ca9
 8004474:	08004261 	.word	0x08004261

08004478 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	4809      	ldr	r0, [pc, #36]	; (80044ac <pbuf_free_custom+0x34>)
 8004488:	f004 f81c 	bl	80084c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800448c:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <pbuf_free_custom+0x38>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <pbuf_free_custom+0x38>)
 8004496:	2200      	movs	r2, #0
 8004498:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <pbuf_free_custom+0x3c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fbd4 	bl	8004c4c <osSemaphoreRelease>
  }
}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08017f28 	.word	0x08017f28
 80044b0:	20004dc4 	.word	0x20004dc4
 80044b4:	20004f08 	.word	0x20004f08

080044b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80044bc:	f7fc fda4 	bl	8001008 <HAL_GetTick>
 80044c0:	4603      	mov	r3, r0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08e      	sub	sp, #56	; 0x38
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	605a      	str	r2, [r3, #4]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	60da      	str	r2, [r3, #12]
 80044de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a4a      	ldr	r2, [pc, #296]	; (8004610 <HAL_ETH_MspInit+0x148>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f040 808d 	bne.w	8004606 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80044ec:	2300      	movs	r3, #0
 80044ee:	623b      	str	r3, [r7, #32]
 80044f0:	4b48      	ldr	r3, [pc, #288]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	4a47      	ldr	r2, [pc, #284]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 80044f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80044fa:	6313      	str	r3, [r2, #48]	; 0x30
 80044fc:	4b45      	ldr	r3, [pc, #276]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	623b      	str	r3, [r7, #32]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	2300      	movs	r3, #0
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	4b41      	ldr	r3, [pc, #260]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	4a40      	ldr	r2, [pc, #256]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004512:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004516:	6313      	str	r3, [r2, #48]	; 0x30
 8004518:	4b3e      	ldr	r3, [pc, #248]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800452a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452c:	4a39      	ldr	r2, [pc, #228]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800452e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004532:	6313      	str	r3, [r2, #48]	; 0x30
 8004534:	4b37      	ldr	r3, [pc, #220]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	4b33      	ldr	r3, [pc, #204]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	4a32      	ldr	r2, [pc, #200]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	6313      	str	r3, [r2, #48]	; 0x30
 8004550:	4b30      	ldr	r3, [pc, #192]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	4b2c      	ldr	r3, [pc, #176]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	4a2b      	ldr	r2, [pc, #172]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004566:	f043 0301 	orr.w	r3, r3, #1
 800456a:	6313      	str	r3, [r2, #48]	; 0x30
 800456c:	4b29      	ldr	r3, [pc, #164]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	4b25      	ldr	r3, [pc, #148]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800457e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004580:	4a24      	ldr	r2, [pc, #144]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	6313      	str	r3, [r2, #48]	; 0x30
 8004588:	4b22      	ldr	r3, [pc, #136]	; (8004614 <HAL_ETH_MspInit+0x14c>)
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	60fb      	str	r3, [r7, #12]
 8004592:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004594:	2332      	movs	r3, #50	; 0x32
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004598:	2302      	movs	r3, #2
 800459a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459c:	2300      	movs	r3, #0
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a0:	2303      	movs	r3, #3
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045a4:	230b      	movs	r3, #11
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ac:	4619      	mov	r1, r3
 80045ae:	481a      	ldr	r0, [pc, #104]	; (8004618 <HAL_ETH_MspInit+0x150>)
 80045b0:	f7fe f898 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80045b4:	2386      	movs	r3, #134	; 0x86
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b8:	2302      	movs	r3, #2
 80045ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045c0:	2303      	movs	r3, #3
 80045c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045c4:	230b      	movs	r3, #11
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045cc:	4619      	mov	r1, r3
 80045ce:	4813      	ldr	r0, [pc, #76]	; (800461c <HAL_ETH_MspInit+0x154>)
 80045d0:	f7fe f888 	bl	80026e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80045d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045da:	2302      	movs	r3, #2
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e2:	2303      	movs	r3, #3
 80045e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045e6:	230b      	movs	r3, #11
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ee:	4619      	mov	r1, r3
 80045f0:	480b      	ldr	r0, [pc, #44]	; (8004620 <HAL_ETH_MspInit+0x158>)
 80045f2:	f7fe f877 	bl	80026e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	2105      	movs	r1, #5
 80045fa:	203d      	movs	r0, #61	; 0x3d
 80045fc:	f7fc fdec 	bl	80011d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004600:	203d      	movs	r0, #61	; 0x3d
 8004602:	f7fc fe05 	bl	8001210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004606:	bf00      	nop
 8004608:	3738      	adds	r7, #56	; 0x38
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40028000 	.word	0x40028000
 8004614:	40023800 	.word	0x40023800
 8004618:	40020800 	.word	0x40020800
 800461c:	40020000 	.word	0x40020000
 8004620:	40020400 	.word	0x40020400

08004624 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <ETH_PHY_IO_Init+0x10>)
 800462a:	f7fd fbf3 	bl	8001e14 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}
 8004634:	20004f10 	.word	0x20004f10

08004638 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	4807      	ldr	r0, [pc, #28]	; (8004678 <ETH_PHY_IO_ReadReg+0x30>)
 800465c:	f7fd fa42 	bl	8001ae4 <HAL_ETH_ReadPHYRegister>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466a:	e000      	b.n	800466e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20004f10 	.word	0x20004f10

0800467c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	68f9      	ldr	r1, [r7, #12]
 800468e:	4807      	ldr	r0, [pc, #28]	; (80046ac <ETH_PHY_IO_WriteReg+0x30>)
 8004690:	f7fd fa73 	bl	8001b7a <HAL_ETH_WritePHYRegister>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d002      	beq.n	80046a0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800469e:	e000      	b.n	80046a2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20004f10 	.word	0x20004f10

080046b0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80046b4:	f7fc fca8 	bl	8001008 <HAL_GetTick>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b0a0      	sub	sp, #128	; 0x80
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	2264      	movs	r2, #100	; 0x64
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f00f fe7a 	bl	80143ca <memset>
  int32_t PHYLinkState = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046de:	2300      	movs	r3, #0
 80046e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80046e2:	2300      	movs	r3, #0
 80046e4:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80046ea:	483a      	ldr	r0, [pc, #232]	; (80047d4 <ethernet_link_thread+0x114>)
 80046ec:	f7fc fbcf 	bl	8000e8e <DP83848_GetLinkState>
 80046f0:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80046f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00c      	beq.n	800471e <ethernet_link_thread+0x5e>
 8004704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004706:	2b01      	cmp	r3, #1
 8004708:	dc09      	bgt.n	800471e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800470a:	4833      	ldr	r0, [pc, #204]	; (80047d8 <ethernet_link_thread+0x118>)
 800470c:	f7fc fe9a 	bl	8001444 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8004710:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004712:	f004 f963 	bl	80089dc <netif_set_down>
    netif_set_link_down(netif);
 8004716:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004718:	f004 f9ca 	bl	8008ab0 <netif_set_link_down>
 800471c:	e055      	b.n	80047ca <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800471e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d14e      	bne.n	80047ca <ethernet_link_thread+0x10a>
 800472c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800472e:	2b01      	cmp	r3, #1
 8004730:	dd4b      	ble.n	80047ca <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8004732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004734:	3b02      	subs	r3, #2
 8004736:	2b03      	cmp	r3, #3
 8004738:	d82a      	bhi.n	8004790 <ethernet_link_thread+0xd0>
 800473a:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <ethernet_link_thread+0x80>)
 800473c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004740:	08004751 	.word	0x08004751
 8004744:	08004763 	.word	0x08004763
 8004748:	08004773 	.word	0x08004773
 800474c:	08004783 	.word	0x08004783
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004750:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004754:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800475a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800475c:	2301      	movs	r3, #1
 800475e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004760:	e017      	b.n	8004792 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004762:	2300      	movs	r3, #0
 8004764:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004766:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800476a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800476c:	2301      	movs	r3, #1
 800476e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004770:	e00f      	b.n	8004792 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8004772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004776:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004778:	2300      	movs	r3, #0
 800477a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800477c:	2301      	movs	r3, #1
 800477e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004780:	e007      	b.n	8004792 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8004782:	2300      	movs	r3, #0
 8004784:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004786:	2300      	movs	r3, #0
 8004788:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800478e:	e000      	b.n	8004792 <ethernet_link_thread+0xd2>
    default:
      break;
 8004790:	bf00      	nop
    }

    if(linkchanged)
 8004792:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d018      	beq.n	80047ca <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	4619      	mov	r1, r3
 800479e:	480e      	ldr	r0, [pc, #56]	; (80047d8 <ethernet_link_thread+0x118>)
 80047a0:	f7fd fa34 	bl	8001c0c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80047a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80047a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047aa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80047ac:	f107 0308 	add.w	r3, r7, #8
 80047b0:	4619      	mov	r1, r3
 80047b2:	4809      	ldr	r0, [pc, #36]	; (80047d8 <ethernet_link_thread+0x118>)
 80047b4:	f7fd fb14 	bl	8001de0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80047b8:	4807      	ldr	r0, [pc, #28]	; (80047d8 <ethernet_link_thread+0x118>)
 80047ba:	f7fc fdb5 	bl	8001328 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80047be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047c0:	f004 f8a0 	bl	8008904 <netif_set_up>
      netif_set_link_up(netif);
 80047c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80047c6:	f004 f93b 	bl	8008a40 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80047ca:	2064      	movs	r0, #100	; 0x64
 80047cc:	f000 f90e 	bl	80049ec <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80047d0:	e78b      	b.n	80046ea <ethernet_link_thread+0x2a>
 80047d2:	bf00      	nop
 80047d4:	20004ff8 	.word	0x20004ff8
 80047d8:	20004f10 	.word	0x20004f10

080047dc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af02      	add	r7, sp, #8
 80047e2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80047e4:	4812      	ldr	r0, [pc, #72]	; (8004830 <HAL_ETH_RxAllocateCallback+0x54>)
 80047e6:	f003 fdf9 	bl	80083dc <memp_malloc_pool>
 80047ea:	60f8      	str	r0, [r7, #12]
  if (p)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d014      	beq.n	800481c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f103 0220 	add.w	r2, r3, #32
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <HAL_ETH_RxAllocateCallback+0x58>)
 8004800:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800480a:	9201      	str	r2, [sp, #4]
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2241      	movs	r2, #65	; 0x41
 8004812:	2100      	movs	r1, #0
 8004814:	2000      	movs	r0, #0
 8004816:	f004 fb6f 	bl	8008ef8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800481a:	e005      	b.n	8004828 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_ETH_RxAllocateCallback+0x5c>)
 800481e:	2201      	movs	r2, #1
 8004820:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	08017f28 	.word	0x08017f28
 8004834:	08004479 	.word	0x08004479
 8004838:	20004dc4 	.word	0x20004dc4

0800483c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3b20      	subs	r3, #32
 800485a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	2200      	movs	r2, #0
 8004866:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	887a      	ldrh	r2, [r7, #2]
 800486c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	69fa      	ldr	r2, [r7, #28]
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e003      	b.n	8004886 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e009      	b.n	80048a8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	891a      	ldrh	r2, [r3, #8]
 8004898:	887b      	ldrh	r3, [r7, #2]
 800489a:	4413      	add	r3, r2
 800489c:	b29a      	uxth	r2, r3
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	61fb      	str	r3, [r7, #28]
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f2      	bne.n	8004894 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	3724      	adds	r7, #36	; 0x24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f004 fcd1 	bl	800926c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80048e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048e4:	2b84      	cmp	r3, #132	; 0x84
 80048e6:	d005      	beq.n	80048f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80048e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	3303      	adds	r3, #3
 80048f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004908:	f3ef 8305 	mrs	r3, IPSR
 800490c:	607b      	str	r3, [r7, #4]
  return(result);
 800490e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800492a:	f001 fc73 	bl	8006214 <vTaskStartScheduler>
  
  return osOK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}

08004934 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8004938:	f7ff ffe3 	bl	8004902 <inHandlerMode>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004942:	f001 fd8b 	bl	800645c <xTaskGetTickCountFromISR>
 8004946:	4603      	mov	r3, r0
 8004948:	e002      	b.n	8004950 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800494a:	f001 fd77 	bl	800643c <xTaskGetTickCount>
 800494e:	4603      	mov	r3, r0
  }
}
 8004950:	4618      	mov	r0, r3
 8004952:	bd80      	pop	{r7, pc}

08004954 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af04      	add	r7, sp, #16
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d020      	beq.n	80049a8 <osThreadCreate+0x54>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d01c      	beq.n	80049a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685c      	ldr	r4, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691e      	ldr	r6, [r3, #16]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff ffa6 	bl	80048d2 <makeFreeRtosPriority>
 8004986:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	9100      	str	r1, [sp, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	4632      	mov	r2, r6
 800499a:	4629      	mov	r1, r5
 800499c:	4620      	mov	r0, r4
 800499e:	f001 fa5b 	bl	8005e58 <xTaskCreateStatic>
 80049a2:	4603      	mov	r3, r0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e01c      	b.n	80049e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685c      	ldr	r4, [r3, #4]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049b4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff ff88 	bl	80048d2 <makeFreeRtosPriority>
 80049c2:	4602      	mov	r2, r0
 80049c4:	f107 030c 	add.w	r3, r7, #12
 80049c8:	9301      	str	r3, [sp, #4]
 80049ca:	9200      	str	r2, [sp, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	4632      	mov	r2, r6
 80049d0:	4629      	mov	r1, r5
 80049d2:	4620      	mov	r0, r4
 80049d4:	f001 fa9d 	bl	8005f12 <xTaskCreate>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80049e2:	68fb      	ldr	r3, [r7, #12]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <osDelay+0x16>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	e000      	b.n	8004a04 <osDelay+0x18>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 fbd1 	bl	80061ac <vTaskDelay>
  
  return osOK;
 8004a0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f000 fc3f 	bl	80052ae <xQueueCreateMutexStatic>
 8004a30:	4603      	mov	r3, r0
 8004a32:	e003      	b.n	8004a3c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004a34:	2001      	movs	r0, #1
 8004a36:	f000 fc22 	bl	800527e <xQueueCreateMutex>
 8004a3a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <osMutexWait+0x18>
    return osErrorParameter;
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	e03a      	b.n	8004ad2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a66:	d103      	bne.n	8004a70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a6c:	60fb      	str	r3, [r7, #12]
 8004a6e:	e009      	b.n	8004a84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d006      	beq.n	8004a84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <osMutexWait+0x40>
      ticks = 1;
 8004a80:	2301      	movs	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a84:	f7ff ff3d 	bl	8004902 <inHandlerMode>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d017      	beq.n	8004abe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	461a      	mov	r2, r3
 8004a94:	2100      	movs	r1, #0
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 f836 	bl	8005b08 <xQueueReceiveFromISR>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d001      	beq.n	8004aa6 <osMutexWait+0x62>
      return osErrorOS;
 8004aa2:	23ff      	movs	r3, #255	; 0xff
 8004aa4:	e015      	b.n	8004ad2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d011      	beq.n	8004ad0 <osMutexWait+0x8c>
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <osMutexWait+0x98>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	e008      	b.n	8004ad0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 ff15 	bl	80058f0 <xQueueSemaphoreTake>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d001      	beq.n	8004ad0 <osMutexWait+0x8c>
    return osErrorOS;
 8004acc:	23ff      	movs	r3, #255	; 0xff
 8004ace:	e000      	b.n	8004ad2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004af0:	f7ff ff07 	bl	8004902 <inHandlerMode>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004afa:	f107 0308 	add.w	r3, r7, #8
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fd88 	bl	8005616 <xQueueGiveFromISR>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d001      	beq.n	8004b10 <osMutexRelease+0x30>
      return osErrorOS;
 8004b0c:	23ff      	movs	r3, #255	; 0xff
 8004b0e:	e017      	b.n	8004b40 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d013      	beq.n	8004b3e <osMutexRelease+0x5e>
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <osMutexRelease+0x68>)
 8004b18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	e00a      	b.n	8004b3e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004b28:	2300      	movs	r3, #0
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fbd8 	bl	80052e4 <xQueueGenericSend>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d001      	beq.n	8004b3e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004b3a:	23ff      	movs	r3, #255	; 0xff
 8004b3c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00f      	beq.n	8004b7e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d10a      	bne.n	8004b7a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	9200      	str	r2, [sp, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2001      	movs	r0, #1
 8004b72:	f000 fa99 	bl	80050a8 <xQueueGenericCreateStatic>
 8004b76:	4603      	mov	r3, r0
 8004b78:	e016      	b.n	8004ba8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e014      	b.n	8004ba8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d110      	bne.n	8004ba6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004b84:	2203      	movs	r2, #3
 8004b86:	2100      	movs	r1, #0
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f000 fb05 	bl	8005198 <xQueueGenericCreate>
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d005      	beq.n	8004ba2 <osSemaphoreCreate+0x56>
 8004b96:	2300      	movs	r3, #0
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fba1 	bl	80052e4 <xQueueGenericSend>
      return sema;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	e000      	b.n	8004ba8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004ba6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	e03a      	b.n	8004c3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bd2:	d103      	bne.n	8004bdc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e009      	b.n	8004bf0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d101      	bne.n	8004bf0 <osSemaphoreWait+0x40>
      ticks = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004bf0:	f7ff fe87 	bl	8004902 <inHandlerMode>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d017      	beq.n	8004c2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004bfa:	f107 0308 	add.w	r3, r7, #8
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2100      	movs	r1, #0
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 ff80 	bl	8005b08 <xQueueReceiveFromISR>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d001      	beq.n	8004c12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004c0e:	23ff      	movs	r3, #255	; 0xff
 8004c10:	e015      	b.n	8004c3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d011      	beq.n	8004c3c <osSemaphoreWait+0x8c>
 8004c18:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <osSemaphoreWait+0x98>)
 8004c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	e008      	b.n	8004c3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fe5f 	bl	80058f0 <xQueueSemaphoreTake>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d001      	beq.n	8004c3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004c38:	23ff      	movs	r3, #255	; 0xff
 8004c3a:	e000      	b.n	8004c3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004c5c:	f7ff fe51 	bl	8004902 <inHandlerMode>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fcd2 	bl	8005616 <xQueueGiveFromISR>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d001      	beq.n	8004c7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004c78:	23ff      	movs	r3, #255	; 0xff
 8004c7a:	e017      	b.n	8004cac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d013      	beq.n	8004caa <osSemaphoreRelease+0x5e>
 8004c82:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <osSemaphoreRelease+0x68>)
 8004c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	e00a      	b.n	8004caa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004c94:	2300      	movs	r3, #0
 8004c96:	2200      	movs	r2, #0
 8004c98:	2100      	movs	r1, #0
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fb22 	bl	80052e4 <xQueueGenericSend>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004ca6:	23ff      	movs	r3, #255	; 0xff
 8004ca8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004caa:	68fb      	ldr	r3, [r7, #12]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	e000ed04 	.word	0xe000ed04

08004cb8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004cb8:	b590      	push	{r4, r7, lr}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d011      	beq.n	8004cee <osMessageCreate+0x36>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6818      	ldr	r0, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6859      	ldr	r1, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2400      	movs	r4, #0
 8004ce4:	9400      	str	r4, [sp, #0]
 8004ce6:	f000 f9df 	bl	80050a8 <xQueueGenericCreateStatic>
 8004cea:	4603      	mov	r3, r0
 8004cec:	e008      	b.n	8004d00 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f000 fa4d 	bl	8005198 <xQueueGenericCreate>
 8004cfe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd90      	pop	{r4, r7, pc}

08004d08 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <osMessagePut+0x1e>
    ticks = 1;
 8004d22:	2301      	movs	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004d26:	f7ff fdec 	bl	8004902 <inHandlerMode>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d018      	beq.n	8004d62 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004d30:	f107 0210 	add.w	r2, r7, #16
 8004d34:	f107 0108 	add.w	r1, r7, #8
 8004d38:	2300      	movs	r3, #0
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fbd0 	bl	80054e0 <xQueueGenericSendFromISR>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <osMessagePut+0x42>
      return osErrorOS;
 8004d46:	23ff      	movs	r3, #255	; 0xff
 8004d48:	e018      	b.n	8004d7c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d014      	beq.n	8004d7a <osMessagePut+0x72>
 8004d50:	4b0c      	ldr	r3, [pc, #48]	; (8004d84 <osMessagePut+0x7c>)
 8004d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	e00b      	b.n	8004d7a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004d62:	f107 0108 	add.w	r1, r7, #8
 8004d66:	2300      	movs	r3, #0
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 faba 	bl	80052e4 <xQueueGenericSend>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d001      	beq.n	8004d7a <osMessagePut+0x72>
      return osErrorOS;
 8004d76:	23ff      	movs	r3, #255	; 0xff
 8004d78:	e000      	b.n	8004d7c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	e000ed04 	.word	0xe000ed04

08004d88 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004d88:	b590      	push	{r4, r7, lr}
 8004d8a:	b08b      	sub	sp, #44	; 0x2c
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10a      	bne.n	8004db8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	617b      	str	r3, [r7, #20]
    return event;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	461c      	mov	r4, r3
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004db2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004db6:	e054      	b.n	8004e62 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc6:	d103      	bne.n	8004dd0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e009      	b.n	8004de4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d006      	beq.n	8004de4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <osMessageGet+0x5c>
      ticks = 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004de4:	f7ff fd8d 	bl	8004902 <inHandlerMode>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d01c      	beq.n	8004e28 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004dee:	f107 0220 	add.w	r2, r7, #32
 8004df2:	f107 0314 	add.w	r3, r7, #20
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	68b8      	ldr	r0, [r7, #8]
 8004dfc:	f000 fe84 	bl	8005b08 <xQueueReceiveFromISR>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d102      	bne.n	8004e0c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004e06:	2310      	movs	r3, #16
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e001      	b.n	8004e10 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e10:	6a3b      	ldr	r3, [r7, #32]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01d      	beq.n	8004e52 <osMessageGet+0xca>
 8004e16:	4b15      	ldr	r3, [pc, #84]	; (8004e6c <osMessageGet+0xe4>)
 8004e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	e014      	b.n	8004e52 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004e28:	f107 0314 	add.w	r3, r7, #20
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	4619      	mov	r1, r3
 8004e32:	68b8      	ldr	r0, [r7, #8]
 8004e34:	f000 fc7c 	bl	8005730 <xQueueReceive>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d102      	bne.n	8004e44 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004e3e:	2310      	movs	r3, #16
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e006      	b.n	8004e52 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <osMessageGet+0xc6>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <osMessageGet+0xc8>
 8004e4e:	2340      	movs	r3, #64	; 0x40
 8004e50:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	461c      	mov	r4, r3
 8004e56:	f107 0314 	add.w	r3, r7, #20
 8004e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	372c      	adds	r7, #44	; 0x2c
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	e000ed04 	.word	0xe000ed04

08004e70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f103 0208 	add.w	r2, r3, #8
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0208 	add.w	r2, r3, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f103 0208 	add.w	r2, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ebe:	bf00      	nop
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689a      	ldr	r2, [r3, #8]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	601a      	str	r2, [r3, #0]
}
 8004f06:	bf00      	nop
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f12:	b480      	push	{r7}
 8004f14:	b085      	sub	sp, #20
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f28:	d103      	bne.n	8004f32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e00c      	b.n	8004f4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	3308      	adds	r3, #8
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e002      	b.n	8004f40 <vListInsert+0x2e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d2f6      	bcs.n	8004f3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6892      	ldr	r2, [r2, #8]
 8004f9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6852      	ldr	r2, [r2, #4]
 8004fa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d103      	bne.n	8004fb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1e5a      	subs	r2, r3, #1
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005002:	f002 f887 	bl	8007114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	441a      	add	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	3b01      	subs	r3, #1
 8005034:	68f9      	ldr	r1, [r7, #12]
 8005036:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d114      	bne.n	8005082 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01a      	beq.n	8005096 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3310      	adds	r3, #16
 8005064:	4618      	mov	r0, r3
 8005066:	f001 fb49 	bl	80066fc <xTaskRemoveFromEventList>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d012      	beq.n	8005096 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <xQueueGenericReset+0xcc>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	e009      	b.n	8005096 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3310      	adds	r3, #16
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fef2 	bl	8004e70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3324      	adds	r3, #36	; 0x24
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff feed 	bl	8004e70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005096:	f002 f86d 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800509a:	2301      	movs	r3, #1
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	; 0x38
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10a      	bne.n	80050d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ce:	bf00      	nop
 80050d0:	e7fe      	b.n	80050d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10a      	bne.n	80050ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050dc:	f383 8811 	msr	BASEPRI, r3
 80050e0:	f3bf 8f6f 	isb	sy
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050ea:	bf00      	nop
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d002      	beq.n	80050fa <xQueueGenericCreateStatic+0x52>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <xQueueGenericCreateStatic+0x56>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <xQueueGenericCreateStatic+0x58>
 80050fe:	2300      	movs	r3, #0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	f383 8811 	msr	BASEPRI, r3
 800510c:	f3bf 8f6f 	isb	sy
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	623b      	str	r3, [r7, #32]
}
 8005116:	bf00      	nop
 8005118:	e7fe      	b.n	8005118 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d102      	bne.n	8005126 <xQueueGenericCreateStatic+0x7e>
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <xQueueGenericCreateStatic+0x82>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <xQueueGenericCreateStatic+0x84>
 800512a:	2300      	movs	r3, #0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	61fb      	str	r3, [r7, #28]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005146:	2348      	movs	r3, #72	; 0x48
 8005148:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b48      	cmp	r3, #72	; 0x48
 800514e:	d00a      	beq.n	8005166 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	61bb      	str	r3, [r7, #24]
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005166:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00d      	beq.n	800518e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800517a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800517e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f83f 	bl	800520c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005190:	4618      	mov	r0, r3
 8005192:	3730      	adds	r7, #48	; 0x30
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10a      	bne.n	80051c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80051ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b0:	f383 8811 	msr	BASEPRI, r3
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	f3bf 8f4f 	dsb	sy
 80051bc:	613b      	str	r3, [r7, #16]
}
 80051be:	bf00      	nop
 80051c0:	e7fe      	b.n	80051c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	3348      	adds	r3, #72	; 0x48
 80051d0:	4618      	mov	r0, r3
 80051d2:	f002 f8c1 	bl	8007358 <pvPortMalloc>
 80051d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d011      	beq.n	8005202 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	3348      	adds	r3, #72	; 0x48
 80051e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051f0:	79fa      	ldrb	r2, [r7, #7]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	68b9      	ldr	r1, [r7, #8]
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 f805 	bl	800520c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005202:	69bb      	ldr	r3, [r7, #24]
	}
 8005204:	4618      	mov	r0, r3
 8005206:	3720      	adds	r7, #32
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e002      	b.n	800522e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800523a:	2101      	movs	r1, #1
 800523c:	69b8      	ldr	r0, [r7, #24]
 800523e:	f7ff fecb 	bl	8004fd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005242:	bf00      	nop
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800526a:	2300      	movs	r3, #0
 800526c:	2200      	movs	r2, #0
 800526e:	2100      	movs	r1, #0
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f837 	bl	80052e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800527e:	b580      	push	{r7, lr}
 8005280:	b086      	sub	sp, #24
 8005282:	af00      	add	r7, sp, #0
 8005284:	4603      	mov	r3, r0
 8005286:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005288:	2301      	movs	r3, #1
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	461a      	mov	r2, r3
 8005294:	6939      	ldr	r1, [r7, #16]
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f7ff ff7e 	bl	8005198 <xQueueGenericCreate>
 800529c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f7ff ffd3 	bl	800524a <prvInitialiseMutex>

		return xNewQueue;
 80052a4:	68fb      	ldr	r3, [r7, #12]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b088      	sub	sp, #32
 80052b2:	af02      	add	r7, sp, #8
 80052b4:	4603      	mov	r3, r0
 80052b6:	6039      	str	r1, [r7, #0]
 80052b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	2300      	movs	r3, #0
 80052c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	6939      	ldr	r1, [r7, #16]
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7ff feeb 	bl	80050a8 <xQueueGenericCreateStatic>
 80052d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f7ff ffb8 	bl	800524a <prvInitialiseMutex>

		return xNewQueue;
 80052da:	68fb      	ldr	r3, [r7, #12]
	}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052f2:	2300      	movs	r3, #0
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xQueueGenericSend+0x32>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d103      	bne.n	8005324 <xQueueGenericSend+0x40>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <xQueueGenericSend+0x44>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <xQueueGenericSend+0x46>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <xQueueGenericSend+0x60>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d103      	bne.n	8005352 <xQueueGenericSend+0x6e>
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <xQueueGenericSend+0x72>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xQueueGenericSend+0x74>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericSend+0x8e>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	623b      	str	r3, [r7, #32]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005372:	f001 fb83 	bl	8006a7c <xTaskGetSchedulerState>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	d102      	bne.n	8005382 <xQueueGenericSend+0x9e>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <xQueueGenericSend+0xa2>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueGenericSend+0xa4>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053a2:	f001 feb7 	bl	8007114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d302      	bcc.n	80053b8 <xQueueGenericSend+0xd4>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d129      	bne.n	800540c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053be:	f000 fc3b 	bl	8005c38 <prvCopyDataToQueue>
 80053c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	3324      	adds	r3, #36	; 0x24
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 f993 	bl	80066fc <xTaskRemoveFromEventList>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053dc:	4b3f      	ldr	r3, [pc, #252]	; (80054dc <xQueueGenericSend+0x1f8>)
 80053de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	e00a      	b.n	8005404 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053f4:	4b39      	ldr	r3, [pc, #228]	; (80054dc <xQueueGenericSend+0x1f8>)
 80053f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053fa:	601a      	str	r2, [r3, #0]
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005404:	f001 feb6 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8005408:	2301      	movs	r3, #1
 800540a:	e063      	b.n	80054d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d103      	bne.n	800541a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005412:	f001 feaf 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005416:	2300      	movs	r3, #0
 8005418:	e05c      	b.n	80054d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800541a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800541c:	2b00      	cmp	r3, #0
 800541e:	d106      	bne.n	800542e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005420:	f107 0314 	add.w	r3, r7, #20
 8005424:	4618      	mov	r0, r3
 8005426:	f001 f9cb 	bl	80067c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800542a:	2301      	movs	r3, #1
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800542e:	f001 fea1 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005432:	f000 ff59 	bl	80062e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005436:	f001 fe6d 	bl	8007114 <vPortEnterCritical>
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005440:	b25b      	sxtb	r3, r3
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005446:	d103      	bne.n	8005450 <xQueueGenericSend+0x16c>
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545c:	d103      	bne.n	8005466 <xQueueGenericSend+0x182>
 800545e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005466:	f001 fe85 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800546a:	1d3a      	adds	r2, r7, #4
 800546c:	f107 0314 	add.w	r3, r7, #20
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f001 f9ba 	bl	80067ec <xTaskCheckForTimeOut>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d124      	bne.n	80054c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800547e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005480:	f000 fcd2 	bl	8005e28 <prvIsQueueFull>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	3310      	adds	r3, #16
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4611      	mov	r1, r2
 8005492:	4618      	mov	r0, r3
 8005494:	f001 f90e 	bl	80066b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549a:	f000 fc5d 	bl	8005d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800549e:	f000 ff31 	bl	8006304 <xTaskResumeAll>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f47f af7c 	bne.w	80053a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80054aa:	4b0c      	ldr	r3, [pc, #48]	; (80054dc <xQueueGenericSend+0x1f8>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	e772      	b.n	80053a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80054bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054be:	f000 fc4b 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054c2:	f000 ff1f 	bl	8006304 <xTaskResumeAll>
 80054c6:	e76c      	b.n	80053a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054ca:	f000 fc45 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054ce:	f000 ff19 	bl	8006304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3738      	adds	r7, #56	; 0x38
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b090      	sub	sp, #64	; 0x40
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	f383 8811 	msr	BASEPRI, r3
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	f3bf 8f4f 	dsb	sy
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800550a:	bf00      	nop
 800550c:	e7fe      	b.n	800550c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <xQueueGenericSendFromISR+0x3c>
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <xQueueGenericSendFromISR+0x40>
 800551c:	2301      	movs	r3, #1
 800551e:	e000      	b.n	8005522 <xQueueGenericSendFromISR+0x42>
 8005520:	2300      	movs	r3, #0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005538:	bf00      	nop
 800553a:	e7fe      	b.n	800553a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b02      	cmp	r3, #2
 8005540:	d103      	bne.n	800554a <xQueueGenericSendFromISR+0x6a>
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <xQueueGenericSendFromISR+0x6e>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <xQueueGenericSendFromISR+0x70>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	623b      	str	r3, [r7, #32]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800556a:	f001 feb5 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800556e:	f3ef 8211 	mrs	r2, BASEPRI
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005586:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800558a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <xQueueGenericSendFromISR+0xbc>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d12f      	bne.n	80055fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800559c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80055b2:	f000 fb41 	bl	8005c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055be:	d112      	bne.n	80055e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d016      	beq.n	80055f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ca:	3324      	adds	r3, #36	; 0x24
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f895 	bl	80066fc <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00e      	beq.n	80055f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00b      	beq.n	80055f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e007      	b.n	80055f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	b25a      	sxtb	r2, r3
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055f6:	2301      	movs	r3, #1
 80055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80055fa:	e001      	b.n	8005600 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800560a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800560e:	4618      	mov	r0, r3
 8005610:	3740      	adds	r7, #64	; 0x40
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08e      	sub	sp, #56	; 0x38
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800562a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562e:	f383 8811 	msr	BASEPRI, r3
 8005632:	f3bf 8f6f 	isb	sy
 8005636:	f3bf 8f4f 	dsb	sy
 800563a:	623b      	str	r3, [r7, #32]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61fb      	str	r3, [r7, #28]
}
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <xQueueGiveFromISR+0x58>
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d101      	bne.n	8005672 <xQueueGiveFromISR+0x5c>
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <xQueueGiveFromISR+0x5e>
 8005672:	2300      	movs	r3, #0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10a      	bne.n	800568e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567c:	f383 8811 	msr	BASEPRI, r3
 8005680:	f3bf 8f6f 	isb	sy
 8005684:	f3bf 8f4f 	dsb	sy
 8005688:	61bb      	str	r3, [r7, #24]
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800568e:	f001 fe23 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005692:	f3ef 8211 	mrs	r2, BASEPRI
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	617a      	str	r2, [r7, #20]
 80056a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80056aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d22b      	bcs.n	8005716 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056d8:	d112      	bne.n	8005700 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	4618      	mov	r0, r3
 80056e8:	f001 f808 	bl	80066fc <xTaskRemoveFromEventList>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00e      	beq.n	8005710 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e007      	b.n	8005710 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005704:	3301      	adds	r3, #1
 8005706:	b2db      	uxtb	r3, r3
 8005708:	b25a      	sxtb	r2, r3
 800570a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005710:	2301      	movs	r3, #1
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
 8005714:	e001      	b.n	800571a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005716:	2300      	movs	r3, #0
 8005718:	637b      	str	r3, [r7, #52]	; 0x34
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f383 8811 	msr	BASEPRI, r3
}
 8005724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005728:	4618      	mov	r0, r3
 800572a:	3738      	adds	r7, #56	; 0x38
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xQueueReceive+0x30>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	623b      	str	r3, [r7, #32]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d103      	bne.n	800576e <xQueueReceive+0x3e>
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <xQueueReceive+0x42>
 800576e:	2301      	movs	r3, #1
 8005770:	e000      	b.n	8005774 <xQueueReceive+0x44>
 8005772:	2300      	movs	r3, #0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <xQueueReceive+0x5e>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	61fb      	str	r3, [r7, #28]
}
 800578a:	bf00      	nop
 800578c:	e7fe      	b.n	800578c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800578e:	f001 f975 	bl	8006a7c <xTaskGetSchedulerState>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d102      	bne.n	800579e <xQueueReceive+0x6e>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <xQueueReceive+0x72>
 800579e:	2301      	movs	r3, #1
 80057a0:	e000      	b.n	80057a4 <xQueueReceive+0x74>
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10a      	bne.n	80057be <xQueueReceive+0x8e>
	__asm volatile
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	61bb      	str	r3, [r7, #24]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057be:	f001 fca9 	bl	8007114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01f      	beq.n	800580e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f000 fa9b 	bl	8005d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1e5a      	subs	r2, r3, #1
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00f      	beq.n	8005806 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	3310      	adds	r3, #16
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 ff86 	bl	80066fc <xTaskRemoveFromEventList>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057f6:	4b3d      	ldr	r3, [pc, #244]	; (80058ec <xQueueReceive+0x1bc>)
 80057f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005806:	f001 fcb5 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 800580a:	2301      	movs	r3, #1
 800580c:	e069      	b.n	80058e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005814:	f001 fcae 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005818:	2300      	movs	r3, #0
 800581a:	e062      	b.n	80058e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f000 ffca 	bl	80067c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005830:	f001 fca0 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005834:	f000 fd58 	bl	80062e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005838:	f001 fc6c 	bl	8007114 <vPortEnterCritical>
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005842:	b25b      	sxtb	r3, r3
 8005844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005848:	d103      	bne.n	8005852 <xQueueReceive+0x122>
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005854:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005858:	b25b      	sxtb	r3, r3
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800585e:	d103      	bne.n	8005868 <xQueueReceive+0x138>
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005868:	f001 fc84 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586c:	1d3a      	adds	r2, r7, #4
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f000 ffb9 	bl	80067ec <xTaskCheckForTimeOut>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d123      	bne.n	80058c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005882:	f000 fabb 	bl	8005dfc <prvIsQueueEmpty>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d017      	beq.n	80058bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	3324      	adds	r3, #36	; 0x24
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f000 ff0d 	bl	80066b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800589a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589c:	f000 fa5c 	bl	8005d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058a0:	f000 fd30 	bl	8006304 <xTaskResumeAll>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d189      	bne.n	80057be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058aa:	4b10      	ldr	r3, [pc, #64]	; (80058ec <xQueueReceive+0x1bc>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	e780      	b.n	80057be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058be:	f000 fa4b 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c2:	f000 fd1f 	bl	8006304 <xTaskResumeAll>
 80058c6:	e77a      	b.n	80057be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80058c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ca:	f000 fa45 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ce:	f000 fd19 	bl	8006304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d4:	f000 fa92 	bl	8005dfc <prvIsQueueEmpty>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f43f af6f 	beq.w	80057be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80058fa:	2300      	movs	r3, #0
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005902:	2300      	movs	r3, #0
 8005904:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	623b      	str	r3, [r7, #32]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00a      	beq.n	8005940 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800592a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592e:	f383 8811 	msr	BASEPRI, r3
 8005932:	f3bf 8f6f 	isb	sy
 8005936:	f3bf 8f4f 	dsb	sy
 800593a:	61fb      	str	r3, [r7, #28]
}
 800593c:	bf00      	nop
 800593e:	e7fe      	b.n	800593e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005940:	f001 f89c 	bl	8006a7c <xTaskGetSchedulerState>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <xQueueSemaphoreTake+0x60>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <xQueueSemaphoreTake+0x64>
 8005950:	2301      	movs	r3, #1
 8005952:	e000      	b.n	8005956 <xQueueSemaphoreTake+0x66>
 8005954:	2300      	movs	r3, #0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10a      	bne.n	8005970 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800595a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595e:	f383 8811 	msr	BASEPRI, r3
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	f3bf 8f4f 	dsb	sy
 800596a:	61bb      	str	r3, [r7, #24]
}
 800596c:	bf00      	nop
 800596e:	e7fe      	b.n	800596e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005970:	f001 fbd0 	bl	8007114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800597a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597c:	2b00      	cmp	r3, #0
 800597e:	d024      	beq.n	80059ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	1e5a      	subs	r2, r3, #1
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d104      	bne.n	800599a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005990:	f001 fa1c 	bl	8006dcc <pvTaskIncrementMutexHeldCount>
 8005994:	4602      	mov	r2, r0
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00f      	beq.n	80059c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	3310      	adds	r3, #16
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fea8 	bl	80066fc <xTaskRemoveFromEventList>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d007      	beq.n	80059c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059b2:	4b54      	ldr	r3, [pc, #336]	; (8005b04 <xQueueSemaphoreTake+0x214>)
 80059b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059c2:	f001 fbd7 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e097      	b.n	8005afa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d111      	bne.n	80059f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	617b      	str	r3, [r7, #20]
}
 80059e8:	bf00      	nop
 80059ea:	e7fe      	b.n	80059ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80059ec:	f001 fbc2 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e082      	b.n	8005afa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059fa:	f107 030c 	add.w	r3, r7, #12
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fede 	bl	80067c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a08:	f001 fbb4 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a0c:	f000 fc6c 	bl	80062e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a10:	f001 fb80 	bl	8007114 <vPortEnterCritical>
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a1a:	b25b      	sxtb	r3, r3
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a20:	d103      	bne.n	8005a2a <xQueueSemaphoreTake+0x13a>
 8005a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a30:	b25b      	sxtb	r3, r3
 8005a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a36:	d103      	bne.n	8005a40 <xQueueSemaphoreTake+0x150>
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a40:	f001 fb98 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a44:	463a      	mov	r2, r7
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fecd 	bl	80067ec <xTaskCheckForTimeOut>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d132      	bne.n	8005abe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a5a:	f000 f9cf 	bl	8005dfc <prvIsQueueEmpty>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d026      	beq.n	8005ab2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d109      	bne.n	8005a80 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005a6c:	f001 fb52 	bl	8007114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 f81f 	bl	8006ab8 <xTaskPriorityInherit>
 8005a7a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005a7c:	f001 fb7a 	bl	8007174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a82:	3324      	adds	r3, #36	; 0x24
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 fe13 	bl	80066b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a90:	f000 f962 	bl	8005d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a94:	f000 fc36 	bl	8006304 <xTaskResumeAll>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f47f af68 	bne.w	8005970 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005aa0:	4b18      	ldr	r3, [pc, #96]	; (8005b04 <xQueueSemaphoreTake+0x214>)
 8005aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	e75e      	b.n	8005970 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ab4:	f000 f950 	bl	8005d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ab8:	f000 fc24 	bl	8006304 <xTaskResumeAll>
 8005abc:	e758      	b.n	8005970 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005abe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ac0:	f000 f94a 	bl	8005d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac4:	f000 fc1e 	bl	8006304 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005aca:	f000 f997 	bl	8005dfc <prvIsQueueEmpty>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f43f af4d 	beq.w	8005970 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00d      	beq.n	8005af8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005adc:	f001 fb1a 	bl	8007114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ae2:	f000 f891 	bl	8005c08 <prvGetDisinheritPriorityAfterTimeout>
 8005ae6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f001 f8de 	bl	8006cb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005af4:	f001 fb3e 	bl	8007174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005af8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3738      	adds	r7, #56	; 0x38
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10a      	bne.n	8005b34 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b22:	f383 8811 	msr	BASEPRI, r3
 8005b26:	f3bf 8f6f 	isb	sy
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	623b      	str	r3, [r7, #32]
}
 8005b30:	bf00      	nop
 8005b32:	e7fe      	b.n	8005b32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <xQueueReceiveFromISR+0x3a>
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <xQueueReceiveFromISR+0x3e>
 8005b42:	2301      	movs	r3, #1
 8005b44:	e000      	b.n	8005b48 <xQueueReceiveFromISR+0x40>
 8005b46:	2300      	movs	r3, #0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10a      	bne.n	8005b62 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61fb      	str	r3, [r7, #28]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b62:	f001 fbb9 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005b66:	f3ef 8211 	mrs	r2, BASEPRI
 8005b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6e:	f383 8811 	msr	BASEPRI, r3
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	f3bf 8f4f 	dsb	sy
 8005b7a:	61ba      	str	r2, [r7, #24]
 8005b7c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005b7e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d02f      	beq.n	8005bee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b9c:	f000 f8b6 	bl	8005d0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	1e5a      	subs	r2, r3, #1
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ba8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bb0:	d112      	bne.n	8005bd8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fd9c 	bl	80066fc <xTaskRemoveFromEventList>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00e      	beq.n	8005be8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	e007      	b.n	8005be8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bdc:	3301      	adds	r3, #1
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	b25a      	sxtb	r2, r3
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005be8:	2301      	movs	r3, #1
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
 8005bec:	e001      	b.n	8005bf2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f383 8811 	msr	BASEPRI, r3
}
 8005bfc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3738      	adds	r7, #56	; 0x38
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d006      	beq.n	8005c26 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1c3 0307 	rsb	r3, r3, #7
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e001      	b.n	8005c2a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
	}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10d      	bne.n	8005c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d14d      	bne.n	8005cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 ff9e 	bl	8006ba4 <xTaskPriorityDisinherit>
 8005c68:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	609a      	str	r2, [r3, #8]
 8005c70:	e043      	b.n	8005cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d119      	bne.n	8005cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6858      	ldr	r0, [r3, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	461a      	mov	r2, r3
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	f00e fc7d 	bl	8014582 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	441a      	add	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d32b      	bcc.n	8005cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	605a      	str	r2, [r3, #4]
 8005caa:	e026      	b.n	8005cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68d8      	ldr	r0, [r3, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	f00e fc63 	bl	8014582 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	425b      	negs	r3, r3
 8005cc6:	441a      	add	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d207      	bcs.n	8005ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	425b      	negs	r3, r3
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d105      	bne.n	8005cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005d02:	697b      	ldr	r3, [r7, #20]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	441a      	add	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d303      	bcc.n	8005d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68d9      	ldr	r1, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	461a      	mov	r2, r3
 8005d4a:	6838      	ldr	r0, [r7, #0]
 8005d4c:	f00e fc19 	bl	8014582 <memcpy>
	}
}
 8005d50:	bf00      	nop
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f001 f9d8 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d6c:	e011      	b.n	8005d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d012      	beq.n	8005d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	3324      	adds	r3, #36	; 0x24
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 fcbe 	bl	80066fc <xTaskRemoveFromEventList>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d86:	f000 fd93 	bl	80068b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dce9      	bgt.n	8005d6e <prvUnlockQueue+0x16>
 8005d9a:	e000      	b.n	8005d9e <prvUnlockQueue+0x46>
					break;
 8005d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	22ff      	movs	r2, #255	; 0xff
 8005da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005da6:	f001 f9e5 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005daa:	f001 f9b3 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005db6:	e011      	b.n	8005ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d012      	beq.n	8005de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3310      	adds	r3, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fc99 	bl	80066fc <xTaskRemoveFromEventList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005dd0:	f000 fd6e 	bl	80068b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005dd4:	7bbb      	ldrb	r3, [r7, #14]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dce9      	bgt.n	8005db8 <prvUnlockQueue+0x60>
 8005de4:	e000      	b.n	8005de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	22ff      	movs	r2, #255	; 0xff
 8005dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005df0:	f001 f9c0 	bl	8007174 <vPortExitCritical>
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e04:	f001 f986 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d102      	bne.n	8005e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e10:	2301      	movs	r3, #1
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e001      	b.n	8005e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e1a:	f001 f9ab 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e30:	f001 f970 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d102      	bne.n	8005e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e001      	b.n	8005e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e4a:	f001 f993 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08e      	sub	sp, #56	; 0x38
 8005e5c:	af04      	add	r7, sp, #16
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	623b      	str	r3, [r7, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	e7fe      	b.n	8005e80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10a      	bne.n	8005e9e <xTaskCreateStatic+0x46>
	__asm volatile
 8005e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8c:	f383 8811 	msr	BASEPRI, r3
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	f3bf 8f4f 	dsb	sy
 8005e98:	61fb      	str	r3, [r7, #28]
}
 8005e9a:	bf00      	nop
 8005e9c:	e7fe      	b.n	8005e9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e9e:	23a0      	movs	r3, #160	; 0xa0
 8005ea0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2ba0      	cmp	r3, #160	; 0xa0
 8005ea6:	d00a      	beq.n	8005ebe <xTaskCreateStatic+0x66>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	61bb      	str	r3, [r7, #24]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ebe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01e      	beq.n	8005f04 <xTaskCreateStatic+0xac>
 8005ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d01b      	beq.n	8005f04 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2202      	movs	r2, #2
 8005eda:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ede:	2300      	movs	r3, #0
 8005ee0:	9303      	str	r3, [sp, #12]
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	9302      	str	r3, [sp, #8]
 8005ee6:	f107 0314 	add.w	r3, r7, #20
 8005eea:	9301      	str	r3, [sp, #4]
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	68b9      	ldr	r1, [r7, #8]
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f000 f850 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005efe:	f000 f8eb 	bl	80060d8 <prvAddNewTaskToReadyList>
 8005f02:	e001      	b.n	8005f08 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f08:	697b      	ldr	r3, [r7, #20]
	}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b08c      	sub	sp, #48	; 0x30
 8005f16:	af04      	add	r7, sp, #16
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4618      	mov	r0, r3
 8005f28:	f001 fa16 	bl	8007358 <pvPortMalloc>
 8005f2c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f34:	20a0      	movs	r0, #160	; 0xa0
 8005f36:	f001 fa0f 	bl	8007358 <pvPortMalloc>
 8005f3a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
 8005f48:	e005      	b.n	8005f56 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f4a:	6978      	ldr	r0, [r7, #20]
 8005f4c:	f001 fad0 	bl	80074f0 <vPortFree>
 8005f50:	e001      	b.n	8005f56 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f64:	88fa      	ldrh	r2, [r7, #6]
 8005f66:	2300      	movs	r3, #0
 8005f68:	9303      	str	r3, [sp, #12]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	9301      	str	r3, [sp, #4]
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f80e 	bl	8005f9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f80:	69f8      	ldr	r0, [r7, #28]
 8005f82:	f000 f8a9 	bl	80060d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f86:	2301      	movs	r3, #1
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	e002      	b.n	8005f92 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f90:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f92:	69bb      	ldr	r3, [r7, #24]
	}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f023 0307 	bic.w	r3, r3, #7
 8005fc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	617b      	str	r3, [r7, #20]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01f      	beq.n	800602a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	e012      	b.n	8006016 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	7819      	ldrb	r1, [r3, #0]
 8005ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	3334      	adds	r3, #52	; 0x34
 8006000:	460a      	mov	r2, r1
 8006002:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	4413      	add	r3, r2
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d006      	beq.n	800601e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	3301      	adds	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b0f      	cmp	r3, #15
 800601a:	d9e9      	bls.n	8005ff0 <prvInitialiseNewTask+0x54>
 800601c:	e000      	b.n	8006020 <prvInitialiseNewTask+0x84>
			{
				break;
 800601e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006028:	e003      	b.n	8006032 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	2b06      	cmp	r3, #6
 8006036:	d901      	bls.n	800603c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006038:	2306      	movs	r3, #6
 800603a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006040:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006046:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2200      	movs	r2, #0
 800604c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	3304      	adds	r3, #4
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe ff2c 	bl	8004eb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	3318      	adds	r3, #24
 800605c:	4618      	mov	r0, r3
 800605e:	f7fe ff27 	bl	8004eb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	f1c3 0207 	rsb	r2, r3, #7
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	2200      	movs	r2, #0
 8006084:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	334c      	adds	r3, #76	; 0x4c
 800608c:	224c      	movs	r2, #76	; 0x4c
 800608e:	2100      	movs	r1, #0
 8006090:	4618      	mov	r0, r3
 8006092:	f00e f99a 	bl	80143ca <memset>
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	4a0c      	ldr	r2, [pc, #48]	; (80060cc <prvInitialiseNewTask+0x130>)
 800609a:	651a      	str	r2, [r3, #80]	; 0x50
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <prvInitialiseNewTask+0x134>)
 80060a0:	655a      	str	r2, [r3, #84]	; 0x54
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	4a0b      	ldr	r2, [pc, #44]	; (80060d4 <prvInitialiseNewTask+0x138>)
 80060a6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	69b8      	ldr	r0, [r7, #24]
 80060ae:	f000 ff07 	bl	8006ec0 <pxPortInitialiseStack>
 80060b2:	4602      	mov	r2, r0
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060c4:	bf00      	nop
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	2000c6b4 	.word	0x2000c6b4
 80060d0:	2000c71c 	.word	0x2000c71c
 80060d4:	2000c784 	.word	0x2000c784

080060d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e0:	f001 f818 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060e4:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <prvAddNewTaskToReadyList+0xb8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <prvAddNewTaskToReadyList+0xb8>)
 80060ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060ee:	4b29      	ldr	r3, [pc, #164]	; (8006194 <prvAddNewTaskToReadyList+0xbc>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d109      	bne.n	800610a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060f6:	4a27      	ldr	r2, [pc, #156]	; (8006194 <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <prvAddNewTaskToReadyList+0xb8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d110      	bne.n	8006126 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006104:	f000 fbf8 	bl	80068f8 <prvInitialiseTaskLists>
 8006108:	e00d      	b.n	8006126 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800610a:	4b23      	ldr	r3, [pc, #140]	; (8006198 <prvAddNewTaskToReadyList+0xc0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <prvAddNewTaskToReadyList+0xbc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d802      	bhi.n	8006126 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006120:	4a1c      	ldr	r2, [pc, #112]	; (8006194 <prvAddNewTaskToReadyList+0xbc>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006126:	4b1d      	ldr	r3, [pc, #116]	; (800619c <prvAddNewTaskToReadyList+0xc4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <prvAddNewTaskToReadyList+0xc4>)
 800612e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4313      	orrs	r3, r2
 800613e:	4a18      	ldr	r2, [pc, #96]	; (80061a0 <prvAddNewTaskToReadyList+0xc8>)
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <prvAddNewTaskToReadyList+0xcc>)
 8006150:	441a      	add	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7fe feb6 	bl	8004eca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800615e:	f001 f809 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <prvAddNewTaskToReadyList+0xc0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00e      	beq.n	8006188 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800616a:	4b0a      	ldr	r3, [pc, #40]	; (8006194 <prvAddNewTaskToReadyList+0xbc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	429a      	cmp	r2, r3
 8006176:	d207      	bcs.n	8006188 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <prvAddNewTaskToReadyList+0xd0>)
 800617a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20005118 	.word	0x20005118
 8006194:	20005018 	.word	0x20005018
 8006198:	20005124 	.word	0x20005124
 800619c:	20005134 	.word	0x20005134
 80061a0:	20005120 	.word	0x20005120
 80061a4:	2000501c 	.word	0x2000501c
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061b4:	2300      	movs	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d017      	beq.n	80061ee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061be:	4b13      	ldr	r3, [pc, #76]	; (800620c <vTaskDelay+0x60>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <vTaskDelay+0x30>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60bb      	str	r3, [r7, #8]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80061dc:	f000 f884 	bl	80062e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061e0:	2100      	movs	r1, #0
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fe06 	bl	8006df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061e8:	f000 f88c 	bl	8006304 <xTaskResumeAll>
 80061ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d107      	bne.n	8006204 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <vTaskDelay+0x64>)
 80061f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20005140 	.word	0x20005140
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006222:	463a      	mov	r2, r7
 8006224:	1d39      	adds	r1, r7, #4
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4618      	mov	r0, r3
 800622c:	f7fa f99e 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	9202      	str	r2, [sp, #8]
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	2300      	movs	r3, #0
 800623c:	9300      	str	r3, [sp, #0]
 800623e:	2300      	movs	r3, #0
 8006240:	460a      	mov	r2, r1
 8006242:	4921      	ldr	r1, [pc, #132]	; (80062c8 <vTaskStartScheduler+0xb4>)
 8006244:	4821      	ldr	r0, [pc, #132]	; (80062cc <vTaskStartScheduler+0xb8>)
 8006246:	f7ff fe07 	bl	8005e58 <xTaskCreateStatic>
 800624a:	4603      	mov	r3, r0
 800624c:	4a20      	ldr	r2, [pc, #128]	; (80062d0 <vTaskStartScheduler+0xbc>)
 800624e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006250:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <vTaskStartScheduler+0xbc>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d002      	beq.n	800625e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e001      	b.n	8006262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d11b      	bne.n	80062a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	613b      	str	r3, [r7, #16]
}
 800627a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800627c:	4b15      	ldr	r3, [pc, #84]	; (80062d4 <vTaskStartScheduler+0xc0>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	334c      	adds	r3, #76	; 0x4c
 8006282:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <vTaskStartScheduler+0xc4>)
 8006284:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006286:	4b15      	ldr	r3, [pc, #84]	; (80062dc <vTaskStartScheduler+0xc8>)
 8006288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800628c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800628e:	4b14      	ldr	r3, [pc, #80]	; (80062e0 <vTaskStartScheduler+0xcc>)
 8006290:	2201      	movs	r2, #1
 8006292:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006294:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <vTaskStartScheduler+0xd0>)
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800629a:	f000 fe99 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800629e:	e00e      	b.n	80062be <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062a6:	d10a      	bne.n	80062be <vTaskStartScheduler+0xaa>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <vTaskStartScheduler+0xa8>
}
 80062be:	bf00      	nop
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	080150e0 	.word	0x080150e0
 80062cc:	080068c9 	.word	0x080068c9
 80062d0:	2000513c 	.word	0x2000513c
 80062d4:	20005018 	.word	0x20005018
 80062d8:	2000008c 	.word	0x2000008c
 80062dc:	20005138 	.word	0x20005138
 80062e0:	20005124 	.word	0x20005124
 80062e4:	2000511c 	.word	0x2000511c

080062e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80062ec:	4b04      	ldr	r3, [pc, #16]	; (8006300 <vTaskSuspendAll+0x18>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	4a03      	ldr	r2, [pc, #12]	; (8006300 <vTaskSuspendAll+0x18>)
 80062f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	20005140 	.word	0x20005140

08006304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006312:	4b41      	ldr	r3, [pc, #260]	; (8006418 <xTaskResumeAll+0x114>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <xTaskResumeAll+0x2c>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	603b      	str	r3, [r7, #0]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006330:	f000 fef0 	bl	8007114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006334:	4b38      	ldr	r3, [pc, #224]	; (8006418 <xTaskResumeAll+0x114>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3b01      	subs	r3, #1
 800633a:	4a37      	ldr	r2, [pc, #220]	; (8006418 <xTaskResumeAll+0x114>)
 800633c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633e:	4b36      	ldr	r3, [pc, #216]	; (8006418 <xTaskResumeAll+0x114>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d161      	bne.n	800640a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <xTaskResumeAll+0x118>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d05d      	beq.n	800640a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634e:	e02e      	b.n	80063ae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <xTaskResumeAll+0x11c>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3318      	adds	r3, #24
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe fe11 	bl	8004f84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fe0c 	bl	8004f84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	2201      	movs	r2, #1
 8006372:	409a      	lsls	r2, r3
 8006374:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <xTaskResumeAll+0x120>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4313      	orrs	r3, r2
 800637a:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <xTaskResumeAll+0x120>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a27      	ldr	r2, [pc, #156]	; (8006428 <xTaskResumeAll+0x124>)
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7fe fd98 	bl	8004eca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <xTaskResumeAll+0x128>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <xTaskResumeAll+0x12c>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ae:	4b1c      	ldr	r3, [pc, #112]	; (8006420 <xTaskResumeAll+0x11c>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1cc      	bne.n	8006350 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063bc:	f000 fb3e 	bl	8006a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063c0:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xTaskResumeAll+0x130>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063cc:	f000 f858 	bl	8006480 <xTaskIncrementTick>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80063d6:	4b16      	ldr	r3, [pc, #88]	; (8006430 <xTaskResumeAll+0x12c>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f1      	bne.n	80063cc <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <xTaskResumeAll+0x130>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xTaskResumeAll+0x12c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063fa:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <xTaskResumeAll+0x134>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800640a:	f000 feb3 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 800640e:	68bb      	ldr	r3, [r7, #8]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20005140 	.word	0x20005140
 800641c:	20005118 	.word	0x20005118
 8006420:	200050d8 	.word	0x200050d8
 8006424:	20005120 	.word	0x20005120
 8006428:	2000501c 	.word	0x2000501c
 800642c:	20005018 	.word	0x20005018
 8006430:	2000512c 	.word	0x2000512c
 8006434:	20005128 	.word	0x20005128
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <xTaskGetTickCount+0x1c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006448:	687b      	ldr	r3, [r7, #4]
}
 800644a:	4618      	mov	r0, r3
 800644c:	370c      	adds	r7, #12
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	2000511c 	.word	0x2000511c

0800645c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006462:	f000 ff39 	bl	80072d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006466:	2300      	movs	r3, #0
 8006468:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800646a:	4b04      	ldr	r3, [pc, #16]	; (800647c <xTaskGetTickCountFromISR+0x20>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006470:	683b      	ldr	r3, [r7, #0]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000511c 	.word	0x2000511c

08006480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800648a:	4b4e      	ldr	r3, [pc, #312]	; (80065c4 <xTaskIncrementTick+0x144>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f040 808e 	bne.w	80065b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006494:	4b4c      	ldr	r3, [pc, #304]	; (80065c8 <xTaskIncrementTick+0x148>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	3301      	adds	r3, #1
 800649a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800649c:	4a4a      	ldr	r2, [pc, #296]	; (80065c8 <xTaskIncrementTick+0x148>)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d120      	bne.n	80064ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80064a8:	4b48      	ldr	r3, [pc, #288]	; (80065cc <xTaskIncrementTick+0x14c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	603b      	str	r3, [r7, #0]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xTaskIncrementTick+0x46>
 80064c8:	4b40      	ldr	r3, [pc, #256]	; (80065cc <xTaskIncrementTick+0x14c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	4b40      	ldr	r3, [pc, #256]	; (80065d0 <xTaskIncrementTick+0x150>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a3e      	ldr	r2, [pc, #248]	; (80065cc <xTaskIncrementTick+0x14c>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	4a3e      	ldr	r2, [pc, #248]	; (80065d0 <xTaskIncrementTick+0x150>)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	4b3d      	ldr	r3, [pc, #244]	; (80065d4 <xTaskIncrementTick+0x154>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3301      	adds	r3, #1
 80064e2:	4a3c      	ldr	r2, [pc, #240]	; (80065d4 <xTaskIncrementTick+0x154>)
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	f000 faa9 	bl	8006a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064ea:	4b3b      	ldr	r3, [pc, #236]	; (80065d8 <xTaskIncrementTick+0x158>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d348      	bcc.n	8006586 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064f4:	4b35      	ldr	r3, [pc, #212]	; (80065cc <xTaskIncrementTick+0x14c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064fe:	4b36      	ldr	r3, [pc, #216]	; (80065d8 <xTaskIncrementTick+0x158>)
 8006500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006504:	601a      	str	r2, [r3, #0]
					break;
 8006506:	e03e      	b.n	8006586 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006508:	4b30      	ldr	r3, [pc, #192]	; (80065cc <xTaskIncrementTick+0x14c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d203      	bcs.n	8006528 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006520:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <xTaskIncrementTick+0x158>)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006526:	e02e      	b.n	8006586 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3304      	adds	r3, #4
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fd29 	bl	8004f84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	3318      	adds	r3, #24
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fd20 	bl	8004f84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	4b23      	ldr	r3, [pc, #140]	; (80065dc <xTaskIncrementTick+0x15c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4313      	orrs	r3, r2
 8006552:	4a22      	ldr	r2, [pc, #136]	; (80065dc <xTaskIncrementTick+0x15c>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <xTaskIncrementTick+0x160>)
 8006564:	441a      	add	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe fcac 	bl	8004eca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006576:	4b1b      	ldr	r3, [pc, #108]	; (80065e4 <xTaskIncrementTick+0x164>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657c:	429a      	cmp	r2, r3
 800657e:	d3b9      	bcc.n	80064f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006580:	2301      	movs	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006584:	e7b6      	b.n	80064f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006586:	4b17      	ldr	r3, [pc, #92]	; (80065e4 <xTaskIncrementTick+0x164>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4914      	ldr	r1, [pc, #80]	; (80065e0 <xTaskIncrementTick+0x160>)
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d901      	bls.n	80065a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800659e:	2301      	movs	r3, #1
 80065a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <xTaskIncrementTick+0x168>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80065aa:	2301      	movs	r3, #1
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e004      	b.n	80065ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80065b0:	4b0e      	ldr	r3, [pc, #56]	; (80065ec <xTaskIncrementTick+0x16c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3301      	adds	r3, #1
 80065b6:	4a0d      	ldr	r2, [pc, #52]	; (80065ec <xTaskIncrementTick+0x16c>)
 80065b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80065ba:	697b      	ldr	r3, [r7, #20]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20005140 	.word	0x20005140
 80065c8:	2000511c 	.word	0x2000511c
 80065cc:	200050d0 	.word	0x200050d0
 80065d0:	200050d4 	.word	0x200050d4
 80065d4:	20005130 	.word	0x20005130
 80065d8:	20005138 	.word	0x20005138
 80065dc:	20005120 	.word	0x20005120
 80065e0:	2000501c 	.word	0x2000501c
 80065e4:	20005018 	.word	0x20005018
 80065e8:	2000512c 	.word	0x2000512c
 80065ec:	20005128 	.word	0x20005128

080065f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065f6:	4b29      	ldr	r3, [pc, #164]	; (800669c <vTaskSwitchContext+0xac>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065fe:	4b28      	ldr	r3, [pc, #160]	; (80066a0 <vTaskSwitchContext+0xb0>)
 8006600:	2201      	movs	r2, #1
 8006602:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006604:	e044      	b.n	8006690 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006606:	4b26      	ldr	r3, [pc, #152]	; (80066a0 <vTaskSwitchContext+0xb0>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800660c:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <vTaskSwitchContext+0xb4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	fab3 f383 	clz	r3, r3
 8006618:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800661a:	7afb      	ldrb	r3, [r7, #11]
 800661c:	f1c3 031f 	rsb	r3, r3, #31
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	4921      	ldr	r1, [pc, #132]	; (80066a8 <vTaskSwitchContext+0xb8>)
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	607b      	str	r3, [r7, #4]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <vTaskSwitchContext+0x5a>
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4a14      	ldr	r2, [pc, #80]	; (80066a8 <vTaskSwitchContext+0xb8>)
 8006658:	4413      	add	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	3308      	adds	r3, #8
 800666e:	429a      	cmp	r2, r3
 8006670:	d104      	bne.n	800667c <vTaskSwitchContext+0x8c>
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <vTaskSwitchContext+0xbc>)
 8006684:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <vTaskSwitchContext+0xbc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	334c      	adds	r3, #76	; 0x4c
 800668c:	4a08      	ldr	r2, [pc, #32]	; (80066b0 <vTaskSwitchContext+0xc0>)
 800668e:	6013      	str	r3, [r2, #0]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20005140 	.word	0x20005140
 80066a0:	2000512c 	.word	0x2000512c
 80066a4:	20005120 	.word	0x20005120
 80066a8:	2000501c 	.word	0x2000501c
 80066ac:	20005018 	.word	0x20005018
 80066b0:	2000008c 	.word	0x2000008c

080066b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60fb      	str	r3, [r7, #12]
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <vTaskPlaceOnEventList+0x44>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3318      	adds	r3, #24
 80066e0:	4619      	mov	r1, r3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fe fc15 	bl	8004f12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066e8:	2101      	movs	r1, #1
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	f000 fb82 	bl	8006df4 <prvAddCurrentTaskToDelayedList>
}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20005018 	.word	0x20005018

080066fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10a      	bne.n	8006728 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	60fb      	str	r3, [r7, #12]
}
 8006724:	bf00      	nop
 8006726:	e7fe      	b.n	8006726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	3318      	adds	r3, #24
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe fc29 	bl	8004f84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006732:	4b1d      	ldr	r3, [pc, #116]	; (80067a8 <xTaskRemoveFromEventList+0xac>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d11c      	bne.n	8006774 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	3304      	adds	r3, #4
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe fc20 	bl	8004f84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	4b17      	ldr	r3, [pc, #92]	; (80067ac <xTaskRemoveFromEventList+0xb0>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4313      	orrs	r3, r2
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <xTaskRemoveFromEventList+0xb0>)
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	4613      	mov	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	4413      	add	r3, r2
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <xTaskRemoveFromEventList+0xb4>)
 8006764:	441a      	add	r2, r3
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7fe fbac 	bl	8004eca <vListInsertEnd>
 8006772:	e005      	b.n	8006780 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	3318      	adds	r3, #24
 8006778:	4619      	mov	r1, r3
 800677a:	480e      	ldr	r0, [pc, #56]	; (80067b4 <xTaskRemoveFromEventList+0xb8>)
 800677c:	f7fe fba5 	bl	8004eca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <xTaskRemoveFromEventList+0xbc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678a:	429a      	cmp	r2, r3
 800678c:	d905      	bls.n	800679a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800678e:	2301      	movs	r3, #1
 8006790:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <xTaskRemoveFromEventList+0xc0>)
 8006794:	2201      	movs	r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e001      	b.n	800679e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800679a:	2300      	movs	r3, #0
 800679c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800679e:	697b      	ldr	r3, [r7, #20]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20005140 	.word	0x20005140
 80067ac:	20005120 	.word	0x20005120
 80067b0:	2000501c 	.word	0x2000501c
 80067b4:	200050d8 	.word	0x200050d8
 80067b8:	20005018 	.word	0x20005018
 80067bc:	2000512c 	.word	0x2000512c

080067c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067c8:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <vTaskInternalSetTimeOutState+0x24>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <vTaskInternalSetTimeOutState+0x28>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	20005130 	.word	0x20005130
 80067e8:	2000511c 	.word	0x2000511c

080067ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	f383 8811 	msr	BASEPRI, r3
 8006820:	f3bf 8f6f 	isb	sy
 8006824:	f3bf 8f4f 	dsb	sy
 8006828:	60fb      	str	r3, [r7, #12]
}
 800682a:	bf00      	nop
 800682c:	e7fe      	b.n	800682c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800682e:	f000 fc71 	bl	8007114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006832:	4b1d      	ldr	r3, [pc, #116]	; (80068a8 <xTaskCheckForTimeOut+0xbc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800684a:	d102      	bne.n	8006852 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e023      	b.n	800689a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <xTaskCheckForTimeOut+0xc0>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d007      	beq.n	800686e <xTaskCheckForTimeOut+0x82>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	429a      	cmp	r2, r3
 8006866:	d302      	bcc.n	800686e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e015      	b.n	800689a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	429a      	cmp	r2, r3
 8006876:	d20b      	bcs.n	8006890 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	1ad2      	subs	r2, r2, r3
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff9b 	bl	80067c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e004      	b.n	800689a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006896:	2301      	movs	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f000 fc6b 	bl	8007174 <vPortExitCritical>

	return xReturn;
 800689e:	69fb      	ldr	r3, [r7, #28]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3720      	adds	r7, #32
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	2000511c 	.word	0x2000511c
 80068ac:	20005130 	.word	0x20005130

080068b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <vTaskMissedYield+0x14>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
}
 80068ba:	bf00      	nop
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr
 80068c4:	2000512c 	.word	0x2000512c

080068c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068d0:	f000 f852 	bl	8006978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <prvIdleTask+0x28>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d9f9      	bls.n	80068d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <prvIdleTask+0x2c>)
 80068de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	f3bf 8f4f 	dsb	sy
 80068e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80068ec:	e7f0      	b.n	80068d0 <prvIdleTask+0x8>
 80068ee:	bf00      	nop
 80068f0:	2000501c 	.word	0x2000501c
 80068f4:	e000ed04 	.word	0xe000ed04

080068f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	e00c      	b.n	800691e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	4a12      	ldr	r2, [pc, #72]	; (8006958 <prvInitialiseTaskLists+0x60>)
 8006910:	4413      	add	r3, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe faac 	bl	8004e70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3301      	adds	r3, #1
 800691c:	607b      	str	r3, [r7, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b06      	cmp	r3, #6
 8006922:	d9ef      	bls.n	8006904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006924:	480d      	ldr	r0, [pc, #52]	; (800695c <prvInitialiseTaskLists+0x64>)
 8006926:	f7fe faa3 	bl	8004e70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800692a:	480d      	ldr	r0, [pc, #52]	; (8006960 <prvInitialiseTaskLists+0x68>)
 800692c:	f7fe faa0 	bl	8004e70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006930:	480c      	ldr	r0, [pc, #48]	; (8006964 <prvInitialiseTaskLists+0x6c>)
 8006932:	f7fe fa9d 	bl	8004e70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006936:	480c      	ldr	r0, [pc, #48]	; (8006968 <prvInitialiseTaskLists+0x70>)
 8006938:	f7fe fa9a 	bl	8004e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800693c:	480b      	ldr	r0, [pc, #44]	; (800696c <prvInitialiseTaskLists+0x74>)
 800693e:	f7fe fa97 	bl	8004e70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <prvInitialiseTaskLists+0x78>)
 8006944:	4a05      	ldr	r2, [pc, #20]	; (800695c <prvInitialiseTaskLists+0x64>)
 8006946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <prvInitialiseTaskLists+0x7c>)
 800694a:	4a05      	ldr	r2, [pc, #20]	; (8006960 <prvInitialiseTaskLists+0x68>)
 800694c:	601a      	str	r2, [r3, #0]
}
 800694e:	bf00      	nop
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	2000501c 	.word	0x2000501c
 800695c:	200050a8 	.word	0x200050a8
 8006960:	200050bc 	.word	0x200050bc
 8006964:	200050d8 	.word	0x200050d8
 8006968:	200050ec 	.word	0x200050ec
 800696c:	20005104 	.word	0x20005104
 8006970:	200050d0 	.word	0x200050d0
 8006974:	200050d4 	.word	0x200050d4

08006978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800697e:	e019      	b.n	80069b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006980:	f000 fbc8 	bl	8007114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006984:	4b10      	ldr	r3, [pc, #64]	; (80069c8 <prvCheckTasksWaitingTermination+0x50>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe faf7 	bl	8004f84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006996:	4b0d      	ldr	r3, [pc, #52]	; (80069cc <prvCheckTasksWaitingTermination+0x54>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3b01      	subs	r3, #1
 800699c:	4a0b      	ldr	r2, [pc, #44]	; (80069cc <prvCheckTasksWaitingTermination+0x54>)
 800699e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069aa:	f000 fbe3 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f810 	bl	80069d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069b4:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <prvCheckTasksWaitingTermination+0x58>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1e1      	bne.n	8006980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	200050ec 	.word	0x200050ec
 80069cc:	20005118 	.word	0x20005118
 80069d0:	20005100 	.word	0x20005100

080069d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	334c      	adds	r3, #76	; 0x4c
 80069e0:	4618      	mov	r0, r3
 80069e2:	f00d fd0b 	bl	80143fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d108      	bne.n	8006a02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fd7b 	bl	80074f0 <vPortFree>
				vPortFree( pxTCB );
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fd78 	bl	80074f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a00:	e018      	b.n	8006a34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d103      	bne.n	8006a14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fd6f 	bl	80074f0 <vPortFree>
	}
 8006a12:	e00f      	b.n	8006a34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d00a      	beq.n	8006a34 <prvDeleteTCB+0x60>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60fb      	str	r3, [r7, #12]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <prvDeleteTCB+0x5e>
	}
 8006a34:	bf00      	nop
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a42:	4b0c      	ldr	r3, [pc, #48]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d104      	bne.n	8006a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a54:	e008      	b.n	8006a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a56:	4b07      	ldr	r3, [pc, #28]	; (8006a74 <prvResetNextTaskUnblockTime+0x38>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <prvResetNextTaskUnblockTime+0x3c>)
 8006a66:	6013      	str	r3, [r2, #0]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	200050d0 	.word	0x200050d0
 8006a78:	20005138 	.word	0x20005138

08006a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <xTaskGetSchedulerState+0x34>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d102      	bne.n	8006a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	607b      	str	r3, [r7, #4]
 8006a8e:	e008      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <xTaskGetSchedulerState+0x38>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d102      	bne.n	8006a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	607b      	str	r3, [r7, #4]
 8006a9c:	e001      	b.n	8006aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aa2:	687b      	ldr	r3, [r7, #4]
	}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	20005124 	.word	0x20005124
 8006ab4:	20005140 	.word	0x20005140

08006ab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d05e      	beq.n	8006b8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad2:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <xTaskPriorityInherit+0xe0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d24e      	bcs.n	8006b7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	db06      	blt.n	8006af2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae4:	4b2c      	ldr	r3, [pc, #176]	; (8006b98 <xTaskPriorityInherit+0xe0>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aea:	f1c3 0207 	rsb	r2, r3, #7
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	6959      	ldr	r1, [r3, #20]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afa:	4613      	mov	r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4a26      	ldr	r2, [pc, #152]	; (8006b9c <xTaskPriorityInherit+0xe4>)
 8006b04:	4413      	add	r3, r2
 8006b06:	4299      	cmp	r1, r3
 8006b08:	d12f      	bne.n	8006b6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fa38 	bl	8004f84 <uxListRemove>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1e:	2201      	movs	r2, #1
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43da      	mvns	r2, r3
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <xTaskPriorityInherit+0xe8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <xTaskPriorityInherit+0xe8>)
 8006b2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b30:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <xTaskPriorityInherit+0xe0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	2201      	movs	r2, #1
 8006b40:	409a      	lsls	r2, r3
 8006b42:	4b17      	ldr	r3, [pc, #92]	; (8006ba0 <xTaskPriorityInherit+0xe8>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	4a15      	ldr	r2, [pc, #84]	; (8006ba0 <xTaskPriorityInherit+0xe8>)
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b50:	4613      	mov	r3, r2
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4a10      	ldr	r2, [pc, #64]	; (8006b9c <xTaskPriorityInherit+0xe4>)
 8006b5a:	441a      	add	r2, r3
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fe f9b1 	bl	8004eca <vListInsertEnd>
 8006b68:	e004      	b.n	8006b74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b6a:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <xTaskPriorityInherit+0xe0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e008      	b.n	8006b8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <xTaskPriorityInherit+0xe0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d201      	bcs.n	8006b8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20005018 	.word	0x20005018
 8006b9c:	2000501c 	.word	0x2000501c
 8006ba0:	20005120 	.word	0x20005120

08006ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06e      	beq.n	8006c98 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bba:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <xTaskPriorityDisinherit+0x100>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d00a      	beq.n	8006bda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	60fb      	str	r3, [r7, #12]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	60bb      	str	r3, [r7, #8]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bfc:	1e5a      	subs	r2, r3, #1
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d044      	beq.n	8006c98 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d140      	bne.n	8006c98 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe f9b2 	bl	8004f84 <uxListRemove>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d115      	bne.n	8006c52 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	491f      	ldr	r1, [pc, #124]	; (8006ca8 <xTaskPriorityDisinherit+0x104>)
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xTaskPriorityDisinherit+0xae>
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	2201      	movs	r2, #1
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	43da      	mvns	r2, r3
 8006c48:	4b18      	ldr	r3, [pc, #96]	; (8006cac <xTaskPriorityDisinherit+0x108>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	4a17      	ldr	r2, [pc, #92]	; (8006cac <xTaskPriorityDisinherit+0x108>)
 8006c50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	f1c3 0207 	rsb	r2, r3, #7
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <xTaskPriorityDisinherit+0x108>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	4a0d      	ldr	r2, [pc, #52]	; (8006cac <xTaskPriorityDisinherit+0x108>)
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4a08      	ldr	r2, [pc, #32]	; (8006ca8 <xTaskPriorityDisinherit+0x104>)
 8006c86:	441a      	add	r2, r3
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f7fe f91b 	bl	8004eca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c98:	697b      	ldr	r3, [r7, #20]
	}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20005018 	.word	0x20005018
 8006ca8:	2000501c 	.word	0x2000501c
 8006cac:	20005120 	.word	0x20005120

08006cb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d077      	beq.n	8006db8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	60fb      	str	r3, [r7, #12]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d902      	bls.n	8006cf6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e002      	b.n	8006cfc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d058      	beq.n	8006db8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d153      	bne.n	8006db8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d10:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d10a      	bne.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	db04      	blt.n	8006d4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	f1c3 0207 	rsb	r2, r3, #7
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	6959      	ldr	r1, [r3, #20]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4613      	mov	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4a19      	ldr	r2, [pc, #100]	; (8006dc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d5e:	4413      	add	r3, r2
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d129      	bne.n	8006db8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3304      	adds	r3, #4
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fe f90b 	bl	8004f84 <uxListRemove>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	2201      	movs	r2, #1
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43da      	mvns	r2, r3
 8006d80:	4b11      	ldr	r3, [pc, #68]	; (8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4013      	ands	r3, r2
 8006d86:	4a10      	ldr	r2, [pc, #64]	; (8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8e:	2201      	movs	r2, #1
 8006d90:	409a      	lsls	r2, r3
 8006d92:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	4a0b      	ldr	r2, [pc, #44]	; (8006dc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4a06      	ldr	r2, [pc, #24]	; (8006dc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006daa:	441a      	add	r2, r3
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f7fe f889 	bl	8004eca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db8:	bf00      	nop
 8006dba:	3720      	adds	r7, #32
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20005018 	.word	0x20005018
 8006dc4:	2000501c 	.word	0x2000501c
 8006dc8:	20005120 	.word	0x20005120

08006dcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006dd8:	4b05      	ldr	r3, [pc, #20]	; (8006df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006dde:	3201      	adds	r2, #1
 8006de0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006de2:	4b03      	ldr	r3, [pc, #12]	; (8006df0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006de4:	681b      	ldr	r3, [r3, #0]
	}
 8006de6:	4618      	mov	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	20005018 	.word	0x20005018

08006df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006dfe:	4b29      	ldr	r3, [pc, #164]	; (8006ea4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e04:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7fe f8ba 	bl	8004f84 <uxListRemove>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43da      	mvns	r2, r3
 8006e24:	4b21      	ldr	r3, [pc, #132]	; (8006eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	4a20      	ldr	r2, [pc, #128]	; (8006eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e34:	d10a      	bne.n	8006e4c <prvAddCurrentTaskToDelayedList+0x58>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d007      	beq.n	8006e4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e3c:	4b1a      	ldr	r3, [pc, #104]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	481a      	ldr	r0, [pc, #104]	; (8006eb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e46:	f7fe f840 	bl	8004eca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e4a:	e026      	b.n	8006e9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006e54:	4b14      	ldr	r3, [pc, #80]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d209      	bcs.n	8006e78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e64:	4b13      	ldr	r3, [pc, #76]	; (8006eb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	4b0f      	ldr	r3, [pc, #60]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fe f84e 	bl	8004f12 <vListInsert>
}
 8006e76:	e010      	b.n	8006e9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	3304      	adds	r3, #4
 8006e82:	4619      	mov	r1, r3
 8006e84:	4610      	mov	r0, r2
 8006e86:	f7fe f844 	bl	8004f12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006e8a:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d202      	bcs.n	8006e9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006e94:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6013      	str	r3, [r2, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2000511c 	.word	0x2000511c
 8006ea8:	20005018 	.word	0x20005018
 8006eac:	20005120 	.word	0x20005120
 8006eb0:	20005104 	.word	0x20005104
 8006eb4:	200050d4 	.word	0x200050d4
 8006eb8:	200050d0 	.word	0x200050d0
 8006ebc:	20005138 	.word	0x20005138

08006ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <pxPortInitialiseStack+0x64>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b14      	subs	r3, #20
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f06f 0202 	mvn.w	r2, #2
 8006f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b20      	subs	r3, #32
 8006f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvTaskExitError+0x54>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d00a      	beq.n	8006f52 <prvTaskExitError+0x2a>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f66:	bf00      	nop
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0fc      	beq.n	8006f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000020 	.word	0x20000020

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20005018 	.word	0x20005018
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <xPortStartScheduler+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <xPortStartScheduler+0x128>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xPortStartScheduler+0x12c>)
 8007018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <xPortStartScheduler+0x130>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <xPortStartScheduler+0x134>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xPortStartScheduler+0x134>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <xPortStartScheduler+0xb8>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <xPortStartScheduler+0x134>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <xPortStartScheduler+0x134>)
 8007090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xPortStartScheduler+0x134>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <xPortStartScheduler+0x134>)
 800709c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <xPortStartScheduler+0x138>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xPortStartScheduler+0x138>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <xPortStartScheduler+0x138>)
 80070b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070be:	f000 f8dd 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <xPortStartScheduler+0x13c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070c8:	f000 f8fc 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xPortStartScheduler+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <xPortStartScheduler+0x140>)
 80070d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d8:	f7ff ff66 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070dc:	f7ff fa88 	bl	80065f0 <vTaskSwitchContext>
	prvTaskExitError();
 80070e0:	f7ff ff22 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed00 	.word	0xe000ed00
 80070f4:	410fc271 	.word	0x410fc271
 80070f8:	410fc270 	.word	0x410fc270
 80070fc:	e000e400 	.word	0xe000e400
 8007100:	20005144 	.word	0x20005144
 8007104:	20005148 	.word	0x20005148
 8007108:	e000ed20 	.word	0xe000ed20
 800710c:	20000020 	.word	0x20000020
 8007110:	e000ef34 	.word	0xe000ef34

08007114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <vPortEnterCritical+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <vPortEnterCritical+0x58>)
 8007136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <vPortEnterCritical+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortEnterCritical+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <vPortEnterCritical+0x4c>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x4a>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000020 	.word	0x20000020
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <vPortExitCritical+0x50>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortExitCritical+0x24>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <vPortExitCritical+0x50>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <vPortExitCritical+0x50>)
 80071a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <vPortExitCritical+0x42>
 80071aa:	2300      	movs	r3, #0
 80071ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f383 8811 	msr	BASEPRI, r3
}
 80071b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000020 	.word	0x20000020
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7ff f9f6 	bl	80065f0 <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20005018 	.word	0x20005018
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7ff f915 	bl	8006480 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <SysTick_Handler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d914      	bls.n	8007314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <vPortValidateInterruptPriority+0x70>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vPortValidateInterruptPriority+0x74>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20a      	bcs.n	8007314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <vPortValidateInterruptPriority+0x78>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x7c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x60>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e3f0 	.word	0xe000e3f0
 800734c:	20005144 	.word	0x20005144
 8007350:	e000ed0c 	.word	0xe000ed0c
 8007354:	20005148 	.word	0x20005148

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007364:	f7fe ffc0 	bl	80062e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007368:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <pvPortMalloc+0x180>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007370:	f000 f920 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007374:	4b59      	ldr	r3, [pc, #356]	; (80074dc <pvPortMalloc+0x184>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8093 	bne.w	80074a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007388:	2208      	movs	r2, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d06e      	beq.n	80074a8 <pvPortMalloc+0x150>
 80073ca:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <pvPortMalloc+0x188>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d869      	bhi.n	80074a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <pvPortMalloc+0x18c>)
 80073d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <pvPortMalloc+0x18c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073de:	e004      	b.n	80073ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <pvPortMalloc+0xa4>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <pvPortMalloc+0x180>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d050      	beq.n	80074a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2208      	movs	r2, #8
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2308      	movs	r3, #8
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d91f      	bls.n	8007468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0xf8>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	613b      	str	r3, [r7, #16]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007462:	69b8      	ldr	r0, [r7, #24]
 8007464:	f000 f908 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <pvPortMalloc+0x188>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <pvPortMalloc+0x188>)
 8007474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <pvPortMalloc+0x188>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <pvPortMalloc+0x190>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d203      	bcs.n	800748a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <pvPortMalloc+0x188>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <pvPortMalloc+0x190>)
 8007488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x184>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <pvPortMalloc+0x194>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a11      	ldr	r2, [pc, #68]	; (80074ec <pvPortMalloc+0x194>)
 80074a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a8:	f7fe ff2c 	bl	8006304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <pvPortMalloc+0x174>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <pvPortMalloc+0x172>
	return pvReturn;
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20008d54 	.word	0x20008d54
 80074dc:	20008d68 	.word	0x20008d68
 80074e0:	20008d58 	.word	0x20008d58
 80074e4:	20008d4c 	.word	0x20008d4c
 80074e8:	20008d5c 	.word	0x20008d5c
 80074ec:	20008d60 	.word	0x20008d60

080074f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d04d      	beq.n	800759e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007502:	2308      	movs	r3, #8
 8007504:	425b      	negs	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <vPortFree+0xb8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <vPortFree+0x44>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <vPortFree+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <vPortFree+0xb8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <vPortFree+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007578:	f7fe feb6 	bl	80062e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <vPortFree+0xbc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortFree+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f000 f874 	bl	8007678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xc0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3301      	adds	r3, #1
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xc0>)
 8007598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800759a:	f7fe feb3 	bl	8006304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20008d68 	.word	0x20008d68
 80075ac:	20008d58 	.word	0x20008d58
 80075b0:	20008d64 	.word	0x20008d64

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	2000514c 	.word	0x2000514c
 8007664:	20008d4c 	.word	0x20008d4c
 8007668:	20008d54 	.word	0x20008d54
 800766c:	20008d5c 	.word	0x20008d5c
 8007670:	20008d58 	.word	0x20008d58
 8007674:	20008d68 	.word	0x20008d68

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20008d4c 	.word	0x20008d4c
 8007728:	20008d54 	.word	0x20008d54

0800772c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007736:	f007 fae1 	bl	800ecfc <sys_timeouts_sleeptime>
 800773a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007742:	d10b      	bne.n	800775c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007744:	4813      	ldr	r0, [pc, #76]	; (8007794 <tcpip_timeouts_mbox_fetch+0x68>)
 8007746:	f00c fa0c 	bl	8013b62 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800774a:	2200      	movs	r2, #0
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f00c f97e 	bl	8013a50 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007754:	480f      	ldr	r0, [pc, #60]	; (8007794 <tcpip_timeouts_mbox_fetch+0x68>)
 8007756:	f00c f9f5 	bl	8013b44 <sys_mutex_lock>
    return;
 800775a:	e018      	b.n	800778e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007762:	f007 fa91 	bl	800ec88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007766:	e7e6      	b.n	8007736 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007768:	480a      	ldr	r0, [pc, #40]	; (8007794 <tcpip_timeouts_mbox_fetch+0x68>)
 800776a:	f00c f9fa 	bl	8013b62 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f00c f96c 	bl	8013a50 <sys_arch_mbox_fetch>
 8007778:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800777a:	4806      	ldr	r0, [pc, #24]	; (8007794 <tcpip_timeouts_mbox_fetch+0x68>)
 800777c:	f00c f9e2 	bl	8013b44 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007786:	d102      	bne.n	800778e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007788:	f007 fa7e 	bl	800ec88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800778c:	e7d3      	b.n	8007736 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	20008d78 	.word	0x20008d78

08007798 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80077a0:	4810      	ldr	r0, [pc, #64]	; (80077e4 <tcpip_thread+0x4c>)
 80077a2:	f00c f9cf 	bl	8013b44 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <tcpip_thread+0x50>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80077ae:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <tcpip_thread+0x50>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a0e      	ldr	r2, [pc, #56]	; (80077ec <tcpip_thread+0x54>)
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	4610      	mov	r0, r2
 80077b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80077ba:	f107 030c 	add.w	r3, r7, #12
 80077be:	4619      	mov	r1, r3
 80077c0:	480b      	ldr	r0, [pc, #44]	; (80077f0 <tcpip_thread+0x58>)
 80077c2:	f7ff ffb3 	bl	800772c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80077cc:	4b09      	ldr	r3, [pc, #36]	; (80077f4 <tcpip_thread+0x5c>)
 80077ce:	2291      	movs	r2, #145	; 0x91
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <tcpip_thread+0x60>)
 80077d2:	480a      	ldr	r0, [pc, #40]	; (80077fc <tcpip_thread+0x64>)
 80077d4:	f00c fd94 	bl	8014300 <iprintf>
      continue;
 80077d8:	e003      	b.n	80077e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 f80f 	bl	8007800 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80077e2:	e7ea      	b.n	80077ba <tcpip_thread+0x22>
 80077e4:	20008d78 	.word	0x20008d78
 80077e8:	20008d6c 	.word	0x20008d6c
 80077ec:	20008d70 	.word	0x20008d70
 80077f0:	20008d74 	.word	0x20008d74
 80077f4:	080150e8 	.word	0x080150e8
 80077f8:	08015118 	.word	0x08015118
 80077fc:	08015138 	.word	0x08015138

08007800 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b02      	cmp	r3, #2
 800780e:	d026      	beq.n	800785e <tcpip_thread_handle_msg+0x5e>
 8007810:	2b02      	cmp	r3, #2
 8007812:	dc2b      	bgt.n	800786c <tcpip_thread_handle_msg+0x6c>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <tcpip_thread_handle_msg+0x1e>
 8007818:	2b01      	cmp	r3, #1
 800781a:	d015      	beq.n	8007848 <tcpip_thread_handle_msg+0x48>
 800781c:	e026      	b.n	800786c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6850      	ldr	r0, [r2, #4]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	6892      	ldr	r2, [r2, #8]
 800782a:	4611      	mov	r1, r2
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	4618      	mov	r0, r3
 800783a:	f001 fd17 	bl	800926c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	2009      	movs	r0, #9
 8007842:	f000 fe63 	bl	800850c <memp_free>
      break;
 8007846:	e018      	b.n	800787a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	6892      	ldr	r2, [r2, #8]
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	2008      	movs	r0, #8
 8007858:	f000 fe58 	bl	800850c <memp_free>
      break;
 800785c:	e00d      	b.n	800787a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6892      	ldr	r2, [r2, #8]
 8007866:	4610      	mov	r0, r2
 8007868:	4798      	blx	r3
      break;
 800786a:	e006      	b.n	800787a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <tcpip_thread_handle_msg+0x84>)
 800786e:	22cf      	movs	r2, #207	; 0xcf
 8007870:	4905      	ldr	r1, [pc, #20]	; (8007888 <tcpip_thread_handle_msg+0x88>)
 8007872:	4806      	ldr	r0, [pc, #24]	; (800788c <tcpip_thread_handle_msg+0x8c>)
 8007874:	f00c fd44 	bl	8014300 <iprintf>
      break;
 8007878:	bf00      	nop
  }
}
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	080150e8 	.word	0x080150e8
 8007888:	08015118 	.word	0x08015118
 800788c:	08015138 	.word	0x08015138

08007890 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800789c:	481a      	ldr	r0, [pc, #104]	; (8007908 <tcpip_inpkt+0x78>)
 800789e:	f00c f916 	bl	8013ace <sys_mbox_valid>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <tcpip_inpkt+0x24>
 80078a8:	4b18      	ldr	r3, [pc, #96]	; (800790c <tcpip_inpkt+0x7c>)
 80078aa:	22fc      	movs	r2, #252	; 0xfc
 80078ac:	4918      	ldr	r1, [pc, #96]	; (8007910 <tcpip_inpkt+0x80>)
 80078ae:	4819      	ldr	r0, [pc, #100]	; (8007914 <tcpip_inpkt+0x84>)
 80078b0:	f00c fd26 	bl	8014300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80078b4:	2009      	movs	r0, #9
 80078b6:	f000 fdb3 	bl	8008420 <memp_malloc>
 80078ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078c6:	e01a      	b.n	80078fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80078e0:	6979      	ldr	r1, [r7, #20]
 80078e2:	4809      	ldr	r0, [pc, #36]	; (8007908 <tcpip_inpkt+0x78>)
 80078e4:	f00c f89a 	bl	8013a1c <sys_mbox_trypost>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d006      	beq.n	80078fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80078ee:	6979      	ldr	r1, [r7, #20]
 80078f0:	2009      	movs	r0, #9
 80078f2:	f000 fe0b 	bl	800850c <memp_free>
    return ERR_MEM;
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078fa:	e000      	b.n	80078fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80078fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	20008d74 	.word	0x20008d74
 800790c:	080150e8 	.word	0x080150e8
 8007910:	08015160 	.word	0x08015160
 8007914:	08015138 	.word	0x08015138

08007918 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007928:	f003 0318 	and.w	r3, r3, #24
 800792c:	2b00      	cmp	r3, #0
 800792e:	d006      	beq.n	800793e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007930:	4a08      	ldr	r2, [pc, #32]	; (8007954 <tcpip_input+0x3c>)
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffab 	bl	8007890 <tcpip_inpkt>
 800793a:	4603      	mov	r3, r0
 800793c:	e005      	b.n	800794a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800793e:	4a06      	ldr	r2, [pc, #24]	; (8007958 <tcpip_input+0x40>)
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff ffa4 	bl	8007890 <tcpip_inpkt>
 8007948:	4603      	mov	r3, r0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3708      	adds	r7, #8
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	0801382d 	.word	0x0801382d
 8007958:	080126f9 	.word	0x080126f9

0800795c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007966:	4819      	ldr	r0, [pc, #100]	; (80079cc <tcpip_try_callback+0x70>)
 8007968:	f00c f8b1 	bl	8013ace <sys_mbox_valid>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <tcpip_try_callback+0x24>
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <tcpip_try_callback+0x74>)
 8007974:	f240 125d 	movw	r2, #349	; 0x15d
 8007978:	4916      	ldr	r1, [pc, #88]	; (80079d4 <tcpip_try_callback+0x78>)
 800797a:	4817      	ldr	r0, [pc, #92]	; (80079d8 <tcpip_try_callback+0x7c>)
 800797c:	f00c fcc0 	bl	8014300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007980:	2008      	movs	r0, #8
 8007982:	f000 fd4d 	bl	8008420 <memp_malloc>
 8007986:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d102      	bne.n	8007994 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800798e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007992:	e017      	b.n	80079c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2201      	movs	r2, #1
 8007998:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80079a6:	68f9      	ldr	r1, [r7, #12]
 80079a8:	4808      	ldr	r0, [pc, #32]	; (80079cc <tcpip_try_callback+0x70>)
 80079aa:	f00c f837 	bl	8013a1c <sys_mbox_trypost>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d006      	beq.n	80079c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80079b4:	68f9      	ldr	r1, [r7, #12]
 80079b6:	2008      	movs	r0, #8
 80079b8:	f000 fda8 	bl	800850c <memp_free>
    return ERR_MEM;
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079c0:	e000      	b.n	80079c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	20008d74 	.word	0x20008d74
 80079d0:	080150e8 	.word	0x080150e8
 80079d4:	08015160 	.word	0x08015160
 80079d8:	08015138 	.word	0x08015138

080079dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80079e6:	f000 f871 	bl	8007acc <lwip_init>

  tcpip_init_done = initfunc;
 80079ea:	4a17      	ldr	r2, [pc, #92]	; (8007a48 <tcpip_init+0x6c>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80079f0:	4a16      	ldr	r2, [pc, #88]	; (8007a4c <tcpip_init+0x70>)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80079f6:	2106      	movs	r1, #6
 80079f8:	4815      	ldr	r0, [pc, #84]	; (8007a50 <tcpip_init+0x74>)
 80079fa:	f00b ffed 	bl	80139d8 <sys_mbox_new>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <tcpip_init+0x78>)
 8007a06:	f240 2261 	movw	r2, #609	; 0x261
 8007a0a:	4913      	ldr	r1, [pc, #76]	; (8007a58 <tcpip_init+0x7c>)
 8007a0c:	4813      	ldr	r0, [pc, #76]	; (8007a5c <tcpip_init+0x80>)
 8007a0e:	f00c fc77 	bl	8014300 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007a12:	4813      	ldr	r0, [pc, #76]	; (8007a60 <tcpip_init+0x84>)
 8007a14:	f00c f87a 	bl	8013b0c <sys_mutex_new>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007a1e:	4b0d      	ldr	r3, [pc, #52]	; (8007a54 <tcpip_init+0x78>)
 8007a20:	f240 2265 	movw	r2, #613	; 0x265
 8007a24:	490f      	ldr	r1, [pc, #60]	; (8007a64 <tcpip_init+0x88>)
 8007a26:	480d      	ldr	r0, [pc, #52]	; (8007a5c <tcpip_init+0x80>)
 8007a28:	f00c fc6a 	bl	8014300 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a34:	2200      	movs	r2, #0
 8007a36:	490c      	ldr	r1, [pc, #48]	; (8007a68 <tcpip_init+0x8c>)
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <tcpip_init+0x90>)
 8007a3a:	f00c f89f 	bl	8013b7c <sys_thread_new>
}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20008d6c 	.word	0x20008d6c
 8007a4c:	20008d70 	.word	0x20008d70
 8007a50:	20008d74 	.word	0x20008d74
 8007a54:	080150e8 	.word	0x080150e8
 8007a58:	08015170 	.word	0x08015170
 8007a5c:	08015138 	.word	0x08015138
 8007a60:	20008d78 	.word	0x20008d78
 8007a64:	08015194 	.word	0x08015194
 8007a68:	08007799 	.word	0x08007799
 8007a6c:	080151b8 	.word	0x080151b8

08007a70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	b21a      	sxth	r2, r3
 8007a80:	88fb      	ldrh	r3, [r7, #6]
 8007a82:	0a1b      	lsrs	r3, r3, #8
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	b21b      	sxth	r3, r3
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	b21b      	sxth	r3, r3
 8007a8c:	b29b      	uxth	r3, r3
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	061a      	lsls	r2, r3, #24
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	021b      	lsls	r3, r3, #8
 8007aaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0a1b      	lsrs	r3, r3, #8
 8007ab4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	4313      	orrs	r3, r2
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	370c      	adds	r7, #12
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aca:	4770      	bx	lr

08007acc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007ad6:	f00c f80b 	bl	8013af0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007ada:	f000 f8d5 	bl	8007c88 <mem_init>
  memp_init();
 8007ade:	f000 fc31 	bl	8008344 <memp_init>
  pbuf_init();
  netif_init();
 8007ae2:	f000 fd3d 	bl	8008560 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007ae6:	f007 f941 	bl	800ed6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007aea:	f001 fe69 	bl	80097c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007aee:	f007 f883 	bl	800ebf8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
	...

08007afc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8007b06:	4b05      	ldr	r3, [pc, #20]	; (8007b1c <ptr_to_mem+0x20>)
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	88fb      	ldrh	r3, [r7, #6]
 8007b0c:	4413      	add	r3, r2
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	370c      	adds	r7, #12
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	200093e8 	.word	0x200093e8

08007b20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007b28:	4b05      	ldr	r3, [pc, #20]	; (8007b40 <mem_to_ptr+0x20>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29b      	uxth	r3, r3
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	200093e8 	.word	0x200093e8

08007b44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007b44:	b590      	push	{r4, r7, lr}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007b4c:	4b45      	ldr	r3, [pc, #276]	; (8007c64 <plug_holes+0x120>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d206      	bcs.n	8007b64 <plug_holes+0x20>
 8007b56:	4b44      	ldr	r3, [pc, #272]	; (8007c68 <plug_holes+0x124>)
 8007b58:	f240 12df 	movw	r2, #479	; 0x1df
 8007b5c:	4943      	ldr	r1, [pc, #268]	; (8007c6c <plug_holes+0x128>)
 8007b5e:	4844      	ldr	r0, [pc, #272]	; (8007c70 <plug_holes+0x12c>)
 8007b60:	f00c fbce 	bl	8014300 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007b64:	4b43      	ldr	r3, [pc, #268]	; (8007c74 <plug_holes+0x130>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d306      	bcc.n	8007b7c <plug_holes+0x38>
 8007b6e:	4b3e      	ldr	r3, [pc, #248]	; (8007c68 <plug_holes+0x124>)
 8007b70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007b74:	4940      	ldr	r1, [pc, #256]	; (8007c78 <plug_holes+0x134>)
 8007b76:	483e      	ldr	r0, [pc, #248]	; (8007c70 <plug_holes+0x12c>)
 8007b78:	f00c fbc2 	bl	8014300 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	791b      	ldrb	r3, [r3, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <plug_holes+0x4e>
 8007b84:	4b38      	ldr	r3, [pc, #224]	; (8007c68 <plug_holes+0x124>)
 8007b86:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007b8a:	493c      	ldr	r1, [pc, #240]	; (8007c7c <plug_holes+0x138>)
 8007b8c:	4838      	ldr	r0, [pc, #224]	; (8007c70 <plug_holes+0x12c>)
 8007b8e:	f00c fbb7 	bl	8014300 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b9a:	d906      	bls.n	8007baa <plug_holes+0x66>
 8007b9c:	4b32      	ldr	r3, [pc, #200]	; (8007c68 <plug_holes+0x124>)
 8007b9e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007ba2:	4937      	ldr	r1, [pc, #220]	; (8007c80 <plug_holes+0x13c>)
 8007ba4:	4832      	ldr	r0, [pc, #200]	; (8007c70 <plug_holes+0x12c>)
 8007ba6:	f00c fbab 	bl	8014300 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ffa4 	bl	8007afc <ptr_to_mem>
 8007bb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d024      	beq.n	8007c08 <plug_holes+0xc4>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d120      	bne.n	8007c08 <plug_holes+0xc4>
 8007bc6:	4b2b      	ldr	r3, [pc, #172]	; (8007c74 <plug_holes+0x130>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d01b      	beq.n	8007c08 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8007bd0:	4b2c      	ldr	r3, [pc, #176]	; (8007c84 <plug_holes+0x140>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d102      	bne.n	8007be0 <plug_holes+0x9c>
      lfree = mem;
 8007bda:	4a2a      	ldr	r2, [pc, #168]	; (8007c84 <plug_holes+0x140>)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	881a      	ldrh	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007bf0:	d00a      	beq.n	8007c08 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff80 	bl	8007afc <ptr_to_mem>
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff ff8e 	bl	8007b20 <mem_to_ptr>
 8007c04:	4603      	mov	r3, r0
 8007c06:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	885b      	ldrh	r3, [r3, #2]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7ff ff75 	bl	8007afc <ptr_to_mem>
 8007c12:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d01f      	beq.n	8007c5c <plug_holes+0x118>
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	791b      	ldrb	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d11b      	bne.n	8007c5c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8007c24:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <plug_holes+0x140>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d102      	bne.n	8007c34 <plug_holes+0xf0>
      lfree = pmem;
 8007c2e:	4a15      	ldr	r2, [pc, #84]	; (8007c84 <plug_holes+0x140>)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	881a      	ldrh	r2, [r3, #0]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c44:	d00a      	beq.n	8007c5c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff ff56 	bl	8007afc <ptr_to_mem>
 8007c50:	4604      	mov	r4, r0
 8007c52:	68b8      	ldr	r0, [r7, #8]
 8007c54:	f7ff ff64 	bl	8007b20 <mem_to_ptr>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd90      	pop	{r4, r7, pc}
 8007c64:	200093e8 	.word	0x200093e8
 8007c68:	080151c8 	.word	0x080151c8
 8007c6c:	080151f8 	.word	0x080151f8
 8007c70:	08015210 	.word	0x08015210
 8007c74:	200093ec 	.word	0x200093ec
 8007c78:	08015238 	.word	0x08015238
 8007c7c:	08015254 	.word	0x08015254
 8007c80:	08015270 	.word	0x08015270
 8007c84:	200093f4 	.word	0x200093f4

08007c88 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007c8e:	4b1f      	ldr	r3, [pc, #124]	; (8007d0c <mem_init+0x84>)
 8007c90:	3303      	adds	r3, #3
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	461a      	mov	r2, r3
 8007c98:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <mem_init+0x88>)
 8007c9a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007c9c:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <mem_init+0x88>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007ca8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007cb6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8007cba:	f7ff ff1f 	bl	8007afc <ptr_to_mem>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	4a14      	ldr	r2, [pc, #80]	; (8007d14 <mem_init+0x8c>)
 8007cc2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007cc4:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <mem_init+0x8c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <mem_init+0x8c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007cd4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007cd6:	4b0f      	ldr	r3, [pc, #60]	; (8007d14 <mem_init+0x8c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8007cde:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <mem_init+0x88>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a0c      	ldr	r2, [pc, #48]	; (8007d18 <mem_init+0x90>)
 8007ce6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007ce8:	480c      	ldr	r0, [pc, #48]	; (8007d1c <mem_init+0x94>)
 8007cea:	f00b ff0f 	bl	8013b0c <sys_mutex_new>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007cf4:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <mem_init+0x98>)
 8007cf6:	f240 221f 	movw	r2, #543	; 0x21f
 8007cfa:	490a      	ldr	r1, [pc, #40]	; (8007d24 <mem_init+0x9c>)
 8007cfc:	480a      	ldr	r0, [pc, #40]	; (8007d28 <mem_init+0xa0>)
 8007cfe:	f00c faff 	bl	8014300 <iprintf>
  }
}
 8007d02:	bf00      	nop
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20008d94 	.word	0x20008d94
 8007d10:	200093e8 	.word	0x200093e8
 8007d14:	200093ec 	.word	0x200093ec
 8007d18:	200093f4 	.word	0x200093f4
 8007d1c:	200093f0 	.word	0x200093f0
 8007d20:	080151c8 	.word	0x080151c8
 8007d24:	0801529c 	.word	0x0801529c
 8007d28:	08015210 	.word	0x08015210

08007d2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f7ff fef3 	bl	8007b20 <mem_to_ptr>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff feda 	bl	8007afc <ptr_to_mem>
 8007d48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fed4 	bl	8007afc <ptr_to_mem>
 8007d54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d5e:	d818      	bhi.n	8007d92 <mem_link_valid+0x66>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	885b      	ldrh	r3, [r3, #2]
 8007d64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007d68:	d813      	bhi.n	8007d92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007d6e:	8afa      	ldrh	r2, [r7, #22]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d004      	beq.n	8007d7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	881b      	ldrh	r3, [r3, #0]
 8007d78:	8afa      	ldrh	r2, [r7, #22]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d109      	bne.n	8007d92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007d7e:	4b08      	ldr	r3, [pc, #32]	; (8007da0 <mem_link_valid+0x74>)
 8007d80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007d82:	693a      	ldr	r2, [r7, #16]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d006      	beq.n	8007d96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	885b      	ldrh	r3, [r3, #2]
 8007d8c:	8afa      	ldrh	r2, [r7, #22]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d001      	beq.n	8007d96 <mem_link_valid+0x6a>
    return 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	e000      	b.n	8007d98 <mem_link_valid+0x6c>
  }
  return 1;
 8007d96:	2301      	movs	r3, #1
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200093ec 	.word	0x200093ec

08007da4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d070      	beq.n	8007e94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f003 0303 	and.w	r3, r3, #3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007dbc:	4b37      	ldr	r3, [pc, #220]	; (8007e9c <mem_free+0xf8>)
 8007dbe:	f240 2273 	movw	r2, #627	; 0x273
 8007dc2:	4937      	ldr	r1, [pc, #220]	; (8007ea0 <mem_free+0xfc>)
 8007dc4:	4837      	ldr	r0, [pc, #220]	; (8007ea4 <mem_free+0x100>)
 8007dc6:	f00c fa9b 	bl	8014300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007dca:	f00b fefd 	bl	8013bc8 <sys_arch_protect>
 8007dce:	60f8      	str	r0, [r7, #12]
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f00b ff07 	bl	8013be4 <sys_arch_unprotect>
    return;
 8007dd6:	e05e      	b.n	8007e96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3b08      	subs	r3, #8
 8007ddc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007dde:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <mem_free+0x104>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d306      	bcc.n	8007df6 <mem_free+0x52>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f103 020c 	add.w	r2, r3, #12
 8007dee:	4b2f      	ldr	r3, [pc, #188]	; (8007eac <mem_free+0x108>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d90d      	bls.n	8007e12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007df6:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <mem_free+0xf8>)
 8007df8:	f240 227f 	movw	r2, #639	; 0x27f
 8007dfc:	492c      	ldr	r1, [pc, #176]	; (8007eb0 <mem_free+0x10c>)
 8007dfe:	4829      	ldr	r0, [pc, #164]	; (8007ea4 <mem_free+0x100>)
 8007e00:	f00c fa7e 	bl	8014300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007e04:	f00b fee0 	bl	8013bc8 <sys_arch_protect>
 8007e08:	6138      	str	r0, [r7, #16]
 8007e0a:	6938      	ldr	r0, [r7, #16]
 8007e0c:	f00b feea 	bl	8013be4 <sys_arch_unprotect>
    return;
 8007e10:	e041      	b.n	8007e96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007e12:	4828      	ldr	r0, [pc, #160]	; (8007eb4 <mem_free+0x110>)
 8007e14:	f00b fe96 	bl	8013b44 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d110      	bne.n	8007e42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007e20:	4b1e      	ldr	r3, [pc, #120]	; (8007e9c <mem_free+0xf8>)
 8007e22:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007e26:	4924      	ldr	r1, [pc, #144]	; (8007eb8 <mem_free+0x114>)
 8007e28:	481e      	ldr	r0, [pc, #120]	; (8007ea4 <mem_free+0x100>)
 8007e2a:	f00c fa69 	bl	8014300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007e2e:	4821      	ldr	r0, [pc, #132]	; (8007eb4 <mem_free+0x110>)
 8007e30:	f00b fe97 	bl	8013b62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007e34:	f00b fec8 	bl	8013bc8 <sys_arch_protect>
 8007e38:	6178      	str	r0, [r7, #20]
 8007e3a:	6978      	ldr	r0, [r7, #20]
 8007e3c:	f00b fed2 	bl	8013be4 <sys_arch_unprotect>
    return;
 8007e40:	e029      	b.n	8007e96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007e42:	69f8      	ldr	r0, [r7, #28]
 8007e44:	f7ff ff72 	bl	8007d2c <mem_link_valid>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d110      	bne.n	8007e70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007e4e:	4b13      	ldr	r3, [pc, #76]	; (8007e9c <mem_free+0xf8>)
 8007e50:	f240 2295 	movw	r2, #661	; 0x295
 8007e54:	4919      	ldr	r1, [pc, #100]	; (8007ebc <mem_free+0x118>)
 8007e56:	4813      	ldr	r0, [pc, #76]	; (8007ea4 <mem_free+0x100>)
 8007e58:	f00c fa52 	bl	8014300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007e5c:	4815      	ldr	r0, [pc, #84]	; (8007eb4 <mem_free+0x110>)
 8007e5e:	f00b fe80 	bl	8013b62 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007e62:	f00b feb1 	bl	8013bc8 <sys_arch_protect>
 8007e66:	61b8      	str	r0, [r7, #24]
 8007e68:	69b8      	ldr	r0, [r7, #24]
 8007e6a:	f00b febb 	bl	8013be4 <sys_arch_unprotect>
    return;
 8007e6e:	e012      	b.n	8007e96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2200      	movs	r2, #0
 8007e74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007e76:	4b12      	ldr	r3, [pc, #72]	; (8007ec0 <mem_free+0x11c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d202      	bcs.n	8007e86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007e80:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <mem_free+0x11c>)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007e86:	69f8      	ldr	r0, [r7, #28]
 8007e88:	f7ff fe5c 	bl	8007b44 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007e8c:	4809      	ldr	r0, [pc, #36]	; (8007eb4 <mem_free+0x110>)
 8007e8e:	f00b fe68 	bl	8013b62 <sys_mutex_unlock>
 8007e92:	e000      	b.n	8007e96 <mem_free+0xf2>
    return;
 8007e94:	bf00      	nop
}
 8007e96:	3720      	adds	r7, #32
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	080151c8 	.word	0x080151c8
 8007ea0:	080152b8 	.word	0x080152b8
 8007ea4:	08015210 	.word	0x08015210
 8007ea8:	200093e8 	.word	0x200093e8
 8007eac:	200093ec 	.word	0x200093ec
 8007eb0:	080152dc 	.word	0x080152dc
 8007eb4:	200093f0 	.word	0x200093f0
 8007eb8:	080152f8 	.word	0x080152f8
 8007ebc:	08015320 	.word	0x08015320
 8007ec0:	200093f4 	.word	0x200093f4

08007ec4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b088      	sub	sp, #32
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007ed0:	887b      	ldrh	r3, [r7, #2]
 8007ed2:	3303      	adds	r3, #3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007edc:	8bfb      	ldrh	r3, [r7, #30]
 8007ede:	2b0b      	cmp	r3, #11
 8007ee0:	d801      	bhi.n	8007ee6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007ee2:	230c      	movs	r3, #12
 8007ee4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007ee6:	8bfb      	ldrh	r3, [r7, #30]
 8007ee8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007eec:	d803      	bhi.n	8007ef6 <mem_trim+0x32>
 8007eee:	8bfa      	ldrh	r2, [r7, #30]
 8007ef0:	887b      	ldrh	r3, [r7, #2]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d201      	bcs.n	8007efa <mem_trim+0x36>
    return NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	e0d8      	b.n	80080ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007efa:	4b6e      	ldr	r3, [pc, #440]	; (80080b4 <mem_trim+0x1f0>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d304      	bcc.n	8007f0e <mem_trim+0x4a>
 8007f04:	4b6c      	ldr	r3, [pc, #432]	; (80080b8 <mem_trim+0x1f4>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d306      	bcc.n	8007f1c <mem_trim+0x58>
 8007f0e:	4b6b      	ldr	r3, [pc, #428]	; (80080bc <mem_trim+0x1f8>)
 8007f10:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007f14:	496a      	ldr	r1, [pc, #424]	; (80080c0 <mem_trim+0x1fc>)
 8007f16:	486b      	ldr	r0, [pc, #428]	; (80080c4 <mem_trim+0x200>)
 8007f18:	f00c f9f2 	bl	8014300 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007f1c:	4b65      	ldr	r3, [pc, #404]	; (80080b4 <mem_trim+0x1f0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d304      	bcc.n	8007f30 <mem_trim+0x6c>
 8007f26:	4b64      	ldr	r3, [pc, #400]	; (80080b8 <mem_trim+0x1f4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d307      	bcc.n	8007f40 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007f30:	f00b fe4a 	bl	8013bc8 <sys_arch_protect>
 8007f34:	60b8      	str	r0, [r7, #8]
 8007f36:	68b8      	ldr	r0, [r7, #8]
 8007f38:	f00b fe54 	bl	8013be4 <sys_arch_unprotect>
    return rmem;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	e0b5      	b.n	80080ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3b08      	subs	r3, #8
 8007f44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007f46:	69b8      	ldr	r0, [r7, #24]
 8007f48:	f7ff fdea 	bl	8007b20 <mem_to_ptr>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	8afb      	ldrh	r3, [r7, #22]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b08      	subs	r3, #8
 8007f5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007f5e:	8bfa      	ldrh	r2, [r7, #30]
 8007f60:	8abb      	ldrh	r3, [r7, #20]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d906      	bls.n	8007f74 <mem_trim+0xb0>
 8007f66:	4b55      	ldr	r3, [pc, #340]	; (80080bc <mem_trim+0x1f8>)
 8007f68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007f6c:	4956      	ldr	r1, [pc, #344]	; (80080c8 <mem_trim+0x204>)
 8007f6e:	4855      	ldr	r0, [pc, #340]	; (80080c4 <mem_trim+0x200>)
 8007f70:	f00c f9c6 	bl	8014300 <iprintf>
  if (newsize > size) {
 8007f74:	8bfa      	ldrh	r2, [r7, #30]
 8007f76:	8abb      	ldrh	r3, [r7, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d901      	bls.n	8007f80 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e095      	b.n	80080ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007f80:	8bfa      	ldrh	r2, [r7, #30]
 8007f82:	8abb      	ldrh	r3, [r7, #20]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d101      	bne.n	8007f8c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	e08f      	b.n	80080ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007f8c:	484f      	ldr	r0, [pc, #316]	; (80080cc <mem_trim+0x208>)
 8007f8e:	f00b fdd9 	bl	8013b44 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fdb0 	bl	8007afc <ptr_to_mem>
 8007f9c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	791b      	ldrb	r3, [r3, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d13f      	bne.n	8008026 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	881b      	ldrh	r3, [r3, #0]
 8007faa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007fae:	d106      	bne.n	8007fbe <mem_trim+0xfa>
 8007fb0:	4b42      	ldr	r3, [pc, #264]	; (80080bc <mem_trim+0x1f8>)
 8007fb2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007fb6:	4946      	ldr	r1, [pc, #280]	; (80080d0 <mem_trim+0x20c>)
 8007fb8:	4842      	ldr	r0, [pc, #264]	; (80080c4 <mem_trim+0x200>)
 8007fba:	f00c f9a1 	bl	8014300 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007fc4:	8afa      	ldrh	r2, [r7, #22]
 8007fc6:	8bfb      	ldrh	r3, [r7, #30]
 8007fc8:	4413      	add	r3, r2
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3308      	adds	r3, #8
 8007fce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007fd0:	4b40      	ldr	r3, [pc, #256]	; (80080d4 <mem_trim+0x210>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d106      	bne.n	8007fe8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007fda:	89fb      	ldrh	r3, [r7, #14]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fd8d 	bl	8007afc <ptr_to_mem>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	4a3b      	ldr	r2, [pc, #236]	; (80080d4 <mem_trim+0x210>)
 8007fe6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7ff fd86 	bl	8007afc <ptr_to_mem>
 8007ff0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	89ba      	ldrh	r2, [r7, #12]
 8007ffc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	8afa      	ldrh	r2, [r7, #22]
 8008002:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	89fa      	ldrh	r2, [r7, #14]
 8008008:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008012:	d047      	beq.n	80080a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	881b      	ldrh	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7ff fd6f 	bl	8007afc <ptr_to_mem>
 800801e:	4602      	mov	r2, r0
 8008020:	89fb      	ldrh	r3, [r7, #14]
 8008022:	8053      	strh	r3, [r2, #2]
 8008024:	e03e      	b.n	80080a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008026:	8bfb      	ldrh	r3, [r7, #30]
 8008028:	f103 0214 	add.w	r2, r3, #20
 800802c:	8abb      	ldrh	r3, [r7, #20]
 800802e:	429a      	cmp	r2, r3
 8008030:	d838      	bhi.n	80080a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008032:	8afa      	ldrh	r2, [r7, #22]
 8008034:	8bfb      	ldrh	r3, [r7, #30]
 8008036:	4413      	add	r3, r2
 8008038:	b29b      	uxth	r3, r3
 800803a:	3308      	adds	r3, #8
 800803c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008046:	d106      	bne.n	8008056 <mem_trim+0x192>
 8008048:	4b1c      	ldr	r3, [pc, #112]	; (80080bc <mem_trim+0x1f8>)
 800804a:	f240 3216 	movw	r2, #790	; 0x316
 800804e:	4920      	ldr	r1, [pc, #128]	; (80080d0 <mem_trim+0x20c>)
 8008050:	481c      	ldr	r0, [pc, #112]	; (80080c4 <mem_trim+0x200>)
 8008052:	f00c f955 	bl	8014300 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fd4f 	bl	8007afc <ptr_to_mem>
 800805e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008060:	4b1c      	ldr	r3, [pc, #112]	; (80080d4 <mem_trim+0x210>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	429a      	cmp	r2, r3
 8008068:	d202      	bcs.n	8008070 <mem_trim+0x1ac>
      lfree = mem2;
 800806a:	4a1a      	ldr	r2, [pc, #104]	; (80080d4 <mem_trim+0x210>)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2200      	movs	r2, #0
 8008074:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	881a      	ldrh	r2, [r3, #0]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	8afa      	ldrh	r2, [r7, #22]
 8008082:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	89fa      	ldrh	r2, [r7, #14]
 8008088:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008092:	d007      	beq.n	80080a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	881b      	ldrh	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff fd2f 	bl	8007afc <ptr_to_mem>
 800809e:	4602      	mov	r2, r0
 80080a0:	89fb      	ldrh	r3, [r7, #14]
 80080a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80080a4:	4809      	ldr	r0, [pc, #36]	; (80080cc <mem_trim+0x208>)
 80080a6:	f00b fd5c 	bl	8013b62 <sys_mutex_unlock>
  return rmem;
 80080aa:	687b      	ldr	r3, [r7, #4]
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	200093e8 	.word	0x200093e8
 80080b8:	200093ec 	.word	0x200093ec
 80080bc:	080151c8 	.word	0x080151c8
 80080c0:	08015354 	.word	0x08015354
 80080c4:	08015210 	.word	0x08015210
 80080c8:	0801536c 	.word	0x0801536c
 80080cc:	200093f0 	.word	0x200093f0
 80080d0:	0801538c 	.word	0x0801538c
 80080d4:	200093f4 	.word	0x200093f4

080080d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b088      	sub	sp, #32
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80080e2:	88fb      	ldrh	r3, [r7, #6]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <mem_malloc+0x14>
    return NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e0e2      	b.n	80082b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	3303      	adds	r3, #3
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f023 0303 	bic.w	r3, r3, #3
 80080f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80080f8:	8bbb      	ldrh	r3, [r7, #28]
 80080fa:	2b0b      	cmp	r3, #11
 80080fc:	d801      	bhi.n	8008102 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80080fe:	230c      	movs	r3, #12
 8008100:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008102:	8bbb      	ldrh	r3, [r7, #28]
 8008104:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008108:	d803      	bhi.n	8008112 <mem_malloc+0x3a>
 800810a:	8bba      	ldrh	r2, [r7, #28]
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	429a      	cmp	r2, r3
 8008110:	d201      	bcs.n	8008116 <mem_malloc+0x3e>
    return NULL;
 8008112:	2300      	movs	r3, #0
 8008114:	e0cd      	b.n	80082b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008116:	4869      	ldr	r0, [pc, #420]	; (80082bc <mem_malloc+0x1e4>)
 8008118:	f00b fd14 	bl	8013b44 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800811c:	4b68      	ldr	r3, [pc, #416]	; (80082c0 <mem_malloc+0x1e8>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4618      	mov	r0, r3
 8008122:	f7ff fcfd 	bl	8007b20 <mem_to_ptr>
 8008126:	4603      	mov	r3, r0
 8008128:	83fb      	strh	r3, [r7, #30]
 800812a:	e0b7      	b.n	800829c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800812c:	8bfb      	ldrh	r3, [r7, #30]
 800812e:	4618      	mov	r0, r3
 8008130:	f7ff fce4 	bl	8007afc <ptr_to_mem>
 8008134:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	791b      	ldrb	r3, [r3, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80a7 	bne.w	800828e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	f1a3 0208 	sub.w	r2, r3, #8
 800814e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008150:	429a      	cmp	r2, r3
 8008152:	f0c0 809c 	bcc.w	800828e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	8bfb      	ldrh	r3, [r7, #30]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	f1a3 0208 	sub.w	r2, r3, #8
 8008164:	8bbb      	ldrh	r3, [r7, #28]
 8008166:	3314      	adds	r3, #20
 8008168:	429a      	cmp	r2, r3
 800816a:	d333      	bcc.n	80081d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800816c:	8bfa      	ldrh	r2, [r7, #30]
 800816e:	8bbb      	ldrh	r3, [r7, #28]
 8008170:	4413      	add	r3, r2
 8008172:	b29b      	uxth	r3, r3
 8008174:	3308      	adds	r3, #8
 8008176:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008178:	8a7b      	ldrh	r3, [r7, #18]
 800817a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800817e:	d106      	bne.n	800818e <mem_malloc+0xb6>
 8008180:	4b50      	ldr	r3, [pc, #320]	; (80082c4 <mem_malloc+0x1ec>)
 8008182:	f240 3287 	movw	r2, #903	; 0x387
 8008186:	4950      	ldr	r1, [pc, #320]	; (80082c8 <mem_malloc+0x1f0>)
 8008188:	4850      	ldr	r0, [pc, #320]	; (80082cc <mem_malloc+0x1f4>)
 800818a:	f00c f8b9 	bl	8014300 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800818e:	8a7b      	ldrh	r3, [r7, #18]
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fcb3 	bl	8007afc <ptr_to_mem>
 8008196:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	881a      	ldrh	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8bfa      	ldrh	r2, [r7, #30]
 80081aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	8a7a      	ldrh	r2, [r7, #18]
 80081b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	2201      	movs	r2, #1
 80081b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081c0:	d00b      	beq.n	80081da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	881b      	ldrh	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fc98 	bl	8007afc <ptr_to_mem>
 80081cc:	4602      	mov	r2, r0
 80081ce:	8a7b      	ldrh	r3, [r7, #18]
 80081d0:	8053      	strh	r3, [r2, #2]
 80081d2:	e002      	b.n	80081da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2201      	movs	r2, #1
 80081d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80081da:	4b39      	ldr	r3, [pc, #228]	; (80082c0 <mem_malloc+0x1e8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d127      	bne.n	8008234 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80081e4:	4b36      	ldr	r3, [pc, #216]	; (80082c0 <mem_malloc+0x1e8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80081ea:	e005      	b.n	80081f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fc83 	bl	8007afc <ptr_to_mem>
 80081f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	791b      	ldrb	r3, [r3, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d004      	beq.n	800820a <mem_malloc+0x132>
 8008200:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <mem_malloc+0x1f8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d1f0      	bne.n	80081ec <mem_malloc+0x114>
          }
          lfree = cur;
 800820a:	4a2d      	ldr	r2, [pc, #180]	; (80082c0 <mem_malloc+0x1e8>)
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008210:	4b2b      	ldr	r3, [pc, #172]	; (80082c0 <mem_malloc+0x1e8>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	4b2e      	ldr	r3, [pc, #184]	; (80082d0 <mem_malloc+0x1f8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	429a      	cmp	r2, r3
 800821a:	d00b      	beq.n	8008234 <mem_malloc+0x15c>
 800821c:	4b28      	ldr	r3, [pc, #160]	; (80082c0 <mem_malloc+0x1e8>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	791b      	ldrb	r3, [r3, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d006      	beq.n	8008234 <mem_malloc+0x15c>
 8008226:	4b27      	ldr	r3, [pc, #156]	; (80082c4 <mem_malloc+0x1ec>)
 8008228:	f240 32b5 	movw	r2, #949	; 0x3b5
 800822c:	4929      	ldr	r1, [pc, #164]	; (80082d4 <mem_malloc+0x1fc>)
 800822e:	4827      	ldr	r0, [pc, #156]	; (80082cc <mem_malloc+0x1f4>)
 8008230:	f00c f866 	bl	8014300 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008234:	4821      	ldr	r0, [pc, #132]	; (80082bc <mem_malloc+0x1e4>)
 8008236:	f00b fc94 	bl	8013b62 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800823a:	8bba      	ldrh	r2, [r7, #28]
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	4413      	add	r3, r2
 8008240:	3308      	adds	r3, #8
 8008242:	4a23      	ldr	r2, [pc, #140]	; (80082d0 <mem_malloc+0x1f8>)
 8008244:	6812      	ldr	r2, [r2, #0]
 8008246:	4293      	cmp	r3, r2
 8008248:	d906      	bls.n	8008258 <mem_malloc+0x180>
 800824a:	4b1e      	ldr	r3, [pc, #120]	; (80082c4 <mem_malloc+0x1ec>)
 800824c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8008250:	4921      	ldr	r1, [pc, #132]	; (80082d8 <mem_malloc+0x200>)
 8008252:	481e      	ldr	r0, [pc, #120]	; (80082cc <mem_malloc+0x1f4>)
 8008254:	f00c f854 	bl	8014300 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f003 0303 	and.w	r3, r3, #3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d006      	beq.n	8008270 <mem_malloc+0x198>
 8008262:	4b18      	ldr	r3, [pc, #96]	; (80082c4 <mem_malloc+0x1ec>)
 8008264:	f240 32bb 	movw	r2, #955	; 0x3bb
 8008268:	491c      	ldr	r1, [pc, #112]	; (80082dc <mem_malloc+0x204>)
 800826a:	4818      	ldr	r0, [pc, #96]	; (80082cc <mem_malloc+0x1f4>)
 800826c:	f00c f848 	bl	8014300 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d006      	beq.n	8008288 <mem_malloc+0x1b0>
 800827a:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <mem_malloc+0x1ec>)
 800827c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8008280:	4917      	ldr	r1, [pc, #92]	; (80082e0 <mem_malloc+0x208>)
 8008282:	4812      	ldr	r0, [pc, #72]	; (80082cc <mem_malloc+0x1f4>)
 8008284:	f00c f83c 	bl	8014300 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	3308      	adds	r3, #8
 800828c:	e011      	b.n	80082b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800828e:	8bfb      	ldrh	r3, [r7, #30]
 8008290:	4618      	mov	r0, r3
 8008292:	f7ff fc33 	bl	8007afc <ptr_to_mem>
 8008296:	4603      	mov	r3, r0
 8008298:	881b      	ldrh	r3, [r3, #0]
 800829a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800829c:	8bfa      	ldrh	r2, [r7, #30]
 800829e:	8bbb      	ldrh	r3, [r7, #28]
 80082a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80082a4:	429a      	cmp	r2, r3
 80082a6:	f4ff af41 	bcc.w	800812c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80082aa:	4804      	ldr	r0, [pc, #16]	; (80082bc <mem_malloc+0x1e4>)
 80082ac:	f00b fc59 	bl	8013b62 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	200093f0 	.word	0x200093f0
 80082c0:	200093f4 	.word	0x200093f4
 80082c4:	080151c8 	.word	0x080151c8
 80082c8:	0801538c 	.word	0x0801538c
 80082cc:	08015210 	.word	0x08015210
 80082d0:	200093ec 	.word	0x200093ec
 80082d4:	080153a0 	.word	0x080153a0
 80082d8:	080153bc 	.word	0x080153bc
 80082dc:	080153ec 	.word	0x080153ec
 80082e0:	0801541c 	.word	0x0801541c

080082e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2200      	movs	r2, #0
 80082f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	3303      	adds	r3, #3
 80082fa:	f023 0303 	bic.w	r3, r3, #3
 80082fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e011      	b.n	800832a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	881b      	ldrh	r3, [r3, #0]
 800831c:	461a      	mov	r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	4413      	add	r3, r2
 8008322:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	885b      	ldrh	r3, [r3, #2]
 800832e:	461a      	mov	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4293      	cmp	r3, r2
 8008334:	dbe7      	blt.n	8008306 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008336:	bf00      	nop
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800834a:	2300      	movs	r3, #0
 800834c:	80fb      	strh	r3, [r7, #6]
 800834e:	e009      	b.n	8008364 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008350:	88fb      	ldrh	r3, [r7, #6]
 8008352:	4a08      	ldr	r2, [pc, #32]	; (8008374 <memp_init+0x30>)
 8008354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff ffc3 	bl	80082e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800835e:	88fb      	ldrh	r3, [r7, #6]
 8008360:	3301      	adds	r3, #1
 8008362:	80fb      	strh	r3, [r7, #6]
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	2b0c      	cmp	r3, #12
 8008368:	d9f2      	bls.n	8008350 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	08017fd0 	.word	0x08017fd0

08008378 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008380:	f00b fc22 	bl	8013bc8 <sys_arch_protect>
 8008384:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d015      	beq.n	80083c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f003 0303 	and.w	r3, r3, #3
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d006      	beq.n	80083b6 <do_memp_malloc_pool+0x3e>
 80083a8:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <do_memp_malloc_pool+0x58>)
 80083aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 80083ae:	4909      	ldr	r1, [pc, #36]	; (80083d4 <do_memp_malloc_pool+0x5c>)
 80083b0:	4809      	ldr	r0, [pc, #36]	; (80083d8 <do_memp_malloc_pool+0x60>)
 80083b2:	f00b ffa5 	bl	8014300 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f00b fc14 	bl	8013be4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	e003      	b.n	80083c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f00b fc0f 	bl	8013be4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	08015440 	.word	0x08015440
 80083d4:	08015470 	.word	0x08015470
 80083d8:	08015494 	.word	0x08015494

080083dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d106      	bne.n	80083f8 <memp_malloc_pool+0x1c>
 80083ea:	4b0a      	ldr	r3, [pc, #40]	; (8008414 <memp_malloc_pool+0x38>)
 80083ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80083f0:	4909      	ldr	r1, [pc, #36]	; (8008418 <memp_malloc_pool+0x3c>)
 80083f2:	480a      	ldr	r0, [pc, #40]	; (800841c <memp_malloc_pool+0x40>)
 80083f4:	f00b ff84 	bl	8014300 <iprintf>
  if (desc == NULL) {
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <memp_malloc_pool+0x26>
    return NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	e003      	b.n	800840a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff ffb8 	bl	8008378 <do_memp_malloc_pool>
 8008408:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	08015440 	.word	0x08015440
 8008418:	080154bc 	.word	0x080154bc
 800841c:	08015494 	.word	0x08015494

08008420 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800842a:	79fb      	ldrb	r3, [r7, #7]
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d908      	bls.n	8008442 <memp_malloc+0x22>
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <memp_malloc+0x3c>)
 8008432:	f240 1257 	movw	r2, #343	; 0x157
 8008436:	490a      	ldr	r1, [pc, #40]	; (8008460 <memp_malloc+0x40>)
 8008438:	480a      	ldr	r0, [pc, #40]	; (8008464 <memp_malloc+0x44>)
 800843a:	f00b ff61 	bl	8014300 <iprintf>
 800843e:	2300      	movs	r3, #0
 8008440:	e008      	b.n	8008454 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008442:	79fb      	ldrb	r3, [r7, #7]
 8008444:	4a08      	ldr	r2, [pc, #32]	; (8008468 <memp_malloc+0x48>)
 8008446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff ff94 	bl	8008378 <do_memp_malloc_pool>
 8008450:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008452:	68fb      	ldr	r3, [r7, #12]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	08015440 	.word	0x08015440
 8008460:	080154d0 	.word	0x080154d0
 8008464:	08015494 	.word	0x08015494
 8008468:	08017fd0 	.word	0x08017fd0

0800846c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d006      	beq.n	800848e <do_memp_free_pool+0x22>
 8008480:	4b0d      	ldr	r3, [pc, #52]	; (80084b8 <do_memp_free_pool+0x4c>)
 8008482:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8008486:	490d      	ldr	r1, [pc, #52]	; (80084bc <do_memp_free_pool+0x50>)
 8008488:	480d      	ldr	r0, [pc, #52]	; (80084c0 <do_memp_free_pool+0x54>)
 800848a:	f00b ff39 	bl	8014300 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008492:	f00b fb99 	bl	8013bc8 <sys_arch_protect>
 8008496:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80084aa:	68b8      	ldr	r0, [r7, #8]
 80084ac:	f00b fb9a 	bl	8013be4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80084b0:	bf00      	nop
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	08015440 	.word	0x08015440
 80084bc:	080154f0 	.word	0x080154f0
 80084c0:	08015494 	.word	0x08015494

080084c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d106      	bne.n	80084e2 <memp_free_pool+0x1e>
 80084d4:	4b0a      	ldr	r3, [pc, #40]	; (8008500 <memp_free_pool+0x3c>)
 80084d6:	f240 1295 	movw	r2, #405	; 0x195
 80084da:	490a      	ldr	r1, [pc, #40]	; (8008504 <memp_free_pool+0x40>)
 80084dc:	480a      	ldr	r0, [pc, #40]	; (8008508 <memp_free_pool+0x44>)
 80084de:	f00b ff0f 	bl	8014300 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d007      	beq.n	80084f8 <memp_free_pool+0x34>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ffbb 	bl	800846c <do_memp_free_pool>
 80084f6:	e000      	b.n	80084fa <memp_free_pool+0x36>
    return;
 80084f8:	bf00      	nop
}
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	08015440 	.word	0x08015440
 8008504:	080154bc 	.word	0x080154bc
 8008508:	08015494 	.word	0x08015494

0800850c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b0c      	cmp	r3, #12
 800851c:	d907      	bls.n	800852e <memp_free+0x22>
 800851e:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <memp_free+0x44>)
 8008520:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008524:	490b      	ldr	r1, [pc, #44]	; (8008554 <memp_free+0x48>)
 8008526:	480c      	ldr	r0, [pc, #48]	; (8008558 <memp_free+0x4c>)
 8008528:	f00b feea 	bl	8014300 <iprintf>
 800852c:	e00c      	b.n	8008548 <memp_free+0x3c>

  if (mem == NULL) {
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d008      	beq.n	8008546 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008534:	79fb      	ldrb	r3, [r7, #7]
 8008536:	4a09      	ldr	r2, [pc, #36]	; (800855c <memp_free+0x50>)
 8008538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff ff94 	bl	800846c <do_memp_free_pool>
 8008544:	e000      	b.n	8008548 <memp_free+0x3c>
    return;
 8008546:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	08015440 	.word	0x08015440
 8008554:	08015510 	.word	0x08015510
 8008558:	08015494 	.word	0x08015494
 800855c:	08017fd0 	.word	0x08017fd0

08008560 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008564:	bf00      	nop
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d108      	bne.n	8008596 <netif_add+0x26>
 8008584:	4b5b      	ldr	r3, [pc, #364]	; (80086f4 <netif_add+0x184>)
 8008586:	f240 1227 	movw	r2, #295	; 0x127
 800858a:	495b      	ldr	r1, [pc, #364]	; (80086f8 <netif_add+0x188>)
 800858c:	485b      	ldr	r0, [pc, #364]	; (80086fc <netif_add+0x18c>)
 800858e:	f00b feb7 	bl	8014300 <iprintf>
 8008592:	2300      	movs	r3, #0
 8008594:	e0a9      	b.n	80086ea <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	d108      	bne.n	80085ae <netif_add+0x3e>
 800859c:	4b55      	ldr	r3, [pc, #340]	; (80086f4 <netif_add+0x184>)
 800859e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80085a2:	4957      	ldr	r1, [pc, #348]	; (8008700 <netif_add+0x190>)
 80085a4:	4855      	ldr	r0, [pc, #340]	; (80086fc <netif_add+0x18c>)
 80085a6:	f00b feab 	bl	8014300 <iprintf>
 80085aa:	2300      	movs	r3, #0
 80085ac:	e09d      	b.n	80086ea <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80085b4:	4b53      	ldr	r3, [pc, #332]	; (8008704 <netif_add+0x194>)
 80085b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80085be:	4b51      	ldr	r3, [pc, #324]	; (8008704 <netif_add+0x194>)
 80085c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d101      	bne.n	80085cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80085c8:	4b4e      	ldr	r3, [pc, #312]	; (8008704 <netif_add+0x194>)
 80085ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4a49      	ldr	r2, [pc, #292]	; (8008708 <netif_add+0x198>)
 80085e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3324      	adds	r3, #36	; 0x24
 80085f6:	2204      	movs	r2, #4
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f00b fee5 	bl	80143ca <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800860c:	4b3f      	ldr	r3, [pc, #252]	; (800870c <netif_add+0x19c>)
 800860e:	781a      	ldrb	r2, [r3, #0]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800861a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	68b9      	ldr	r1, [r7, #8]
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f914 	bl	8008850 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	4798      	blx	r3
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <netif_add+0xc8>
    return NULL;
 8008634:	2300      	movs	r3, #0
 8008636:	e058      	b.n	80086ea <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800863e:	2bff      	cmp	r3, #255	; 0xff
 8008640:	d103      	bne.n	800864a <netif_add+0xda>
        netif->num = 0;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800864e:	4b30      	ldr	r3, [pc, #192]	; (8008710 <netif_add+0x1a0>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e02b      	b.n	80086ae <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	429a      	cmp	r2, r3
 800865c:	d106      	bne.n	800866c <netif_add+0xfc>
 800865e:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <netif_add+0x184>)
 8008660:	f240 128b 	movw	r2, #395	; 0x18b
 8008664:	492b      	ldr	r1, [pc, #172]	; (8008714 <netif_add+0x1a4>)
 8008666:	4825      	ldr	r0, [pc, #148]	; (80086fc <netif_add+0x18c>)
 8008668:	f00b fe4a 	bl	8014300 <iprintf>
        num_netifs++;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	3301      	adds	r3, #1
 8008670:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2bff      	cmp	r3, #255	; 0xff
 8008676:	dd06      	ble.n	8008686 <netif_add+0x116>
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <netif_add+0x184>)
 800867a:	f240 128d 	movw	r2, #397	; 0x18d
 800867e:	4926      	ldr	r1, [pc, #152]	; (8008718 <netif_add+0x1a8>)
 8008680:	481e      	ldr	r0, [pc, #120]	; (80086fc <netif_add+0x18c>)
 8008682:	f00b fe3d 	bl	8014300 <iprintf>
        if (netif2->num == netif->num) {
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008692:	429a      	cmp	r2, r3
 8008694:	d108      	bne.n	80086a8 <netif_add+0x138>
          netif->num++;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800869c:	3301      	adds	r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80086a6:	e005      	b.n	80086b4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	617b      	str	r3, [r7, #20]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1d0      	bne.n	8008656 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1be      	bne.n	8008638 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086c0:	2bfe      	cmp	r3, #254	; 0xfe
 80086c2:	d103      	bne.n	80086cc <netif_add+0x15c>
    netif_num = 0;
 80086c4:	4b11      	ldr	r3, [pc, #68]	; (800870c <netif_add+0x19c>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
 80086ca:	e006      	b.n	80086da <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086d2:	3301      	adds	r3, #1
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <netif_add+0x19c>)
 80086d8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80086da:	4b0d      	ldr	r3, [pc, #52]	; (8008710 <netif_add+0x1a0>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80086e2:	4a0b      	ldr	r2, [pc, #44]	; (8008710 <netif_add+0x1a0>)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80086e8:	68fb      	ldr	r3, [r7, #12]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	0801552c 	.word	0x0801552c
 80086f8:	080155c0 	.word	0x080155c0
 80086fc:	0801557c 	.word	0x0801557c
 8008700:	080155dc 	.word	0x080155dc
 8008704:	08018054 	.word	0x08018054
 8008708:	08008b33 	.word	0x08008b33
 800870c:	2000c4ec 	.word	0x2000c4ec
 8008710:	2000c4e4 	.word	0x2000c4e4
 8008714:	08015600 	.word	0x08015600
 8008718:	08015614 	.word	0x08015614

0800871c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f002 fb91 	bl	800ae50 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f006 ffa7 	bl	800f684 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008736:	bf00      	nop
 8008738:	3708      	adds	r7, #8
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
	...

08008740 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <netif_do_set_ipaddr+0x20>
 8008752:	4b1d      	ldr	r3, [pc, #116]	; (80087c8 <netif_do_set_ipaddr+0x88>)
 8008754:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008758:	491c      	ldr	r1, [pc, #112]	; (80087cc <netif_do_set_ipaddr+0x8c>)
 800875a:	481d      	ldr	r0, [pc, #116]	; (80087d0 <netif_do_set_ipaddr+0x90>)
 800875c:	f00b fdd0 	bl	8014300 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <netif_do_set_ipaddr+0x34>
 8008766:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <netif_do_set_ipaddr+0x88>)
 8008768:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800876c:	4917      	ldr	r1, [pc, #92]	; (80087cc <netif_do_set_ipaddr+0x8c>)
 800876e:	4818      	ldr	r0, [pc, #96]	; (80087d0 <netif_do_set_ipaddr+0x90>)
 8008770:	f00b fdc6 	bl	8014300 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3304      	adds	r3, #4
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d01c      	beq.n	80087bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3304      	adds	r3, #4
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008792:	f107 0314 	add.w	r3, r7, #20
 8008796:	4619      	mov	r1, r3
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ffbf 	bl	800871c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <netif_do_set_ipaddr+0x6a>
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	e000      	b.n	80087ac <netif_do_set_ipaddr+0x6c>
 80087aa:	2300      	movs	r3, #0
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80087b0:	2101      	movs	r1, #1
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 f8d2 	bl	800895c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80087b8:	2301      	movs	r3, #1
 80087ba:	e000      	b.n	80087be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	0801552c 	.word	0x0801552c
 80087cc:	08015644 	.word	0x08015644
 80087d0:	0801557c 	.word	0x0801557c

080087d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	3308      	adds	r3, #8
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d00a      	beq.n	8008804 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <netif_do_set_netmask+0x26>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	e000      	b.n	80087fc <netif_do_set_netmask+0x28>
 80087fa:	2300      	movs	r3, #0
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008812:	b480      	push	{r7}
 8008814:	b085      	sub	sp, #20
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	330c      	adds	r3, #12
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d00a      	beq.n	8008842 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <netif_do_set_gw+0x26>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	e000      	b.n	800883a <netif_do_set_gw+0x28>
 8008838:	2300      	movs	r3, #0
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008862:	2300      	movs	r3, #0
 8008864:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800886c:	4b1c      	ldr	r3, [pc, #112]	; (80088e0 <netif_set_addr+0x90>)
 800886e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008876:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <netif_set_addr+0x90>)
 8008878:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008880:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <netif_set_addr+0x90>)
 8008882:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <netif_set_addr+0x42>
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <netif_set_addr+0x46>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <netif_set_addr+0x48>
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
  if (remove) {
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d006      	beq.n	80088ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80088a0:	f107 0310 	add.w	r3, r7, #16
 80088a4:	461a      	mov	r2, r3
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff ff49 	bl	8008740 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80088ae:	69fa      	ldr	r2, [r7, #28]
 80088b0:	6879      	ldr	r1, [r7, #4]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ff8e 	bl	80087d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f7ff ffa8 	bl	8008812 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80088c8:	f107 0310 	add.w	r3, r7, #16
 80088cc:	461a      	mov	r2, r3
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff ff35 	bl	8008740 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80088d6:	bf00      	nop
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	08018054 	.word	0x08018054

080088e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80088ec:	4a04      	ldr	r2, [pc, #16]	; (8008900 <netif_set_default+0x1c>)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	2000c4e8 	.word	0x2000c4e8

08008904 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d107      	bne.n	8008922 <netif_set_up+0x1e>
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <netif_set_up+0x4c>)
 8008914:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008918:	490e      	ldr	r1, [pc, #56]	; (8008954 <netif_set_up+0x50>)
 800891a:	480f      	ldr	r0, [pc, #60]	; (8008958 <netif_set_up+0x54>)
 800891c:	f00b fcf0 	bl	8014300 <iprintf>
 8008920:	e013      	b.n	800894a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10c      	bne.n	800894a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	b2da      	uxtb	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008942:	2103      	movs	r1, #3
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f809 	bl	800895c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	0801552c 	.word	0x0801552c
 8008954:	080156b4 	.word	0x080156b4
 8008958:	0801557c 	.word	0x0801557c

0800895c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d106      	bne.n	800897c <netif_issue_reports+0x20>
 800896e:	4b18      	ldr	r3, [pc, #96]	; (80089d0 <netif_issue_reports+0x74>)
 8008970:	f240 326d 	movw	r2, #877	; 0x36d
 8008974:	4917      	ldr	r1, [pc, #92]	; (80089d4 <netif_issue_reports+0x78>)
 8008976:	4818      	ldr	r0, [pc, #96]	; (80089d8 <netif_issue_reports+0x7c>)
 8008978:	f00b fcc2 	bl	8014300 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008982:	f003 0304 	and.w	r3, r3, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d01e      	beq.n	80089c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008990:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008994:	2b00      	cmp	r3, #0
 8008996:	d017      	beq.n	80089c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d013      	beq.n	80089ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3304      	adds	r3, #4
 80089a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80089b2:	f003 0308 	and.w	r3, r3, #8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d007      	beq.n	80089ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3304      	adds	r3, #4
 80089be:	4619      	mov	r1, r3
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f009 fc5f 	bl	8012284 <etharp_request>
 80089c6:	e000      	b.n	80089ca <netif_issue_reports+0x6e>
    return;
 80089c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	0801552c 	.word	0x0801552c
 80089d4:	080156d0 	.word	0x080156d0
 80089d8:	0801557c 	.word	0x0801557c

080089dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d107      	bne.n	80089fa <netif_set_down+0x1e>
 80089ea:	4b12      	ldr	r3, [pc, #72]	; (8008a34 <netif_set_down+0x58>)
 80089ec:	f240 329b 	movw	r2, #923	; 0x39b
 80089f0:	4911      	ldr	r1, [pc, #68]	; (8008a38 <netif_set_down+0x5c>)
 80089f2:	4812      	ldr	r0, [pc, #72]	; (8008a3c <netif_set_down+0x60>)
 80089f4:	f00b fc84 	bl	8014300 <iprintf>
 80089f8:	e019      	b.n	8008a2e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d012      	beq.n	8008a2e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a0e:	f023 0301 	bic.w	r3, r3, #1
 8008a12:	b2da      	uxtb	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a20:	f003 0308 	and.w	r3, r3, #8
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d002      	beq.n	8008a2e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f008 ffe5 	bl	80119f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	0801552c 	.word	0x0801552c
 8008a38:	080156f4 	.word	0x080156f4
 8008a3c:	0801557c 	.word	0x0801557c

08008a40 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <netif_set_link_up+0x1e>
 8008a4e:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <netif_set_link_up+0x64>)
 8008a50:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008a54:	4914      	ldr	r1, [pc, #80]	; (8008aa8 <netif_set_link_up+0x68>)
 8008a56:	4815      	ldr	r0, [pc, #84]	; (8008aac <netif_set_link_up+0x6c>)
 8008a58:	f00b fc52 	bl	8014300 <iprintf>
 8008a5c:	e01e      	b.n	8008a9c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d117      	bne.n	8008a9c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a72:	f043 0304 	orr.w	r3, r3, #4
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f007 fa2a 	bl	800fed8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008a84:	2103      	movs	r1, #3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7ff ff68 	bl	800895c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <netif_set_link_up+0x5c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0801552c 	.word	0x0801552c
 8008aa8:	08015714 	.word	0x08015714
 8008aac:	0801557c 	.word	0x0801557c

08008ab0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d107      	bne.n	8008ace <netif_set_link_down+0x1e>
 8008abe:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <netif_set_link_down+0x54>)
 8008ac0:	f240 4206 	movw	r2, #1030	; 0x406
 8008ac4:	4910      	ldr	r1, [pc, #64]	; (8008b08 <netif_set_link_down+0x58>)
 8008ac6:	4811      	ldr	r0, [pc, #68]	; (8008b0c <netif_set_link_down+0x5c>)
 8008ac8:	f00b fc1a 	bl	8014300 <iprintf>
 8008acc:	e017      	b.n	8008afe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d010      	beq.n	8008afe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ae2:	f023 0304 	bic.w	r3, r3, #4
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d003      	beq.n	8008afe <netif_set_link_down+0x4e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	0801552c 	.word	0x0801552c
 8008b08:	08015738 	.word	0x08015738
 8008b0c:	0801557c 	.word	0x0801557c

08008b10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	61da      	str	r2, [r3, #28]
  }
}
 8008b26:	bf00      	nop
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	60b9      	str	r1, [r7, #8]
 8008b3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008b3e:	f06f 030b 	mvn.w	r3, #11
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
	...

08008b50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	4603      	mov	r3, r0
 8008b58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008b5a:	79fb      	ldrb	r3, [r7, #7]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d013      	beq.n	8008b88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8008b60:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <netif_get_by_index+0x48>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
 8008b66:	e00c      	b.n	8008b82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	79fa      	ldrb	r2, [r7, #7]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d101      	bne.n	8008b7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	e006      	b.n	8008b8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	60fb      	str	r3, [r7, #12]
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1ef      	bne.n	8008b68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	2000c4e4 	.word	0x2000c4e4

08008b9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8008ba2:	f00b f811 	bl	8013bc8 <sys_arch_protect>
 8008ba6:	6038      	str	r0, [r7, #0]
 8008ba8:	4b0d      	ldr	r3, [pc, #52]	; (8008be0 <pbuf_free_ooseq+0x44>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	701a      	strb	r2, [r3, #0]
 8008bae:	6838      	ldr	r0, [r7, #0]
 8008bb0:	f00b f818 	bl	8013be4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <pbuf_free_ooseq+0x48>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	e00a      	b.n	8008bd2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f002 f981 	bl	800aecc <tcp_free_ooseq>
      return;
 8008bca:	e005      	b.n	8008bd8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	607b      	str	r3, [r7, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f1      	bne.n	8008bbc <pbuf_free_ooseq+0x20>
    }
  }
}
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	2000c4ed 	.word	0x2000c4ed
 8008be4:	2000c4fc 	.word	0x2000c4fc

08008be8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b082      	sub	sp, #8
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008bf0:	f7ff ffd4 	bl	8008b9c <pbuf_free_ooseq>
}
 8008bf4:	bf00      	nop
 8008bf6:	3708      	adds	r7, #8
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008c02:	f00a ffe1 	bl	8013bc8 <sys_arch_protect>
 8008c06:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008c08:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <pbuf_pool_is_empty+0x4c>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <pbuf_pool_is_empty+0x4c>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f00a ffe5 	bl	8013be4 <sys_arch_unprotect>

  if (!queued) {
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10f      	bne.n	8008c40 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008c20:	2100      	movs	r1, #0
 8008c22:	480a      	ldr	r0, [pc, #40]	; (8008c4c <pbuf_pool_is_empty+0x50>)
 8008c24:	f7fe fe9a 	bl	800795c <tcpip_try_callback>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d008      	beq.n	8008c40 <pbuf_pool_is_empty+0x44>
 8008c2e:	f00a ffcb 	bl	8013bc8 <sys_arch_protect>
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	4b04      	ldr	r3, [pc, #16]	; (8008c48 <pbuf_pool_is_empty+0x4c>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f00a ffd2 	bl	8013be4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	2000c4ed 	.word	0x2000c4ed
 8008c4c:	08008be9 	.word	0x08008be9

08008c50 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	460b      	mov	r3, r1
 8008c60:	80fb      	strh	r3, [r7, #6]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	68ba      	ldr	r2, [r7, #8]
 8008c70:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	88fa      	ldrh	r2, [r7, #6]
 8008c76:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	88ba      	ldrh	r2, [r7, #4]
 8008c7c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8008c7e:	8b3b      	ldrh	r3, [r7, #24]
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	7f3a      	ldrb	r2, [r7, #28]
 8008c8a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	73da      	strb	r2, [r3, #15]
}
 8008c98:	bf00      	nop
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08c      	sub	sp, #48	; 0x30
 8008ca8:	af02      	add	r7, sp, #8
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	80bb      	strh	r3, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008cba:	887b      	ldrh	r3, [r7, #2]
 8008cbc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008cc0:	d07f      	beq.n	8008dc2 <pbuf_alloc+0x11e>
 8008cc2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008cc6:	f300 80c8 	bgt.w	8008e5a <pbuf_alloc+0x1b6>
 8008cca:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008cce:	d010      	beq.n	8008cf2 <pbuf_alloc+0x4e>
 8008cd0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8008cd4:	f300 80c1 	bgt.w	8008e5a <pbuf_alloc+0x1b6>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d002      	beq.n	8008ce2 <pbuf_alloc+0x3e>
 8008cdc:	2b41      	cmp	r3, #65	; 0x41
 8008cde:	f040 80bc 	bne.w	8008e5a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008ce2:	887a      	ldrh	r2, [r7, #2]
 8008ce4:	88bb      	ldrh	r3, [r7, #4]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	2000      	movs	r0, #0
 8008cea:	f000 f8d1 	bl	8008e90 <pbuf_alloc_reference>
 8008cee:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008cf0:	e0bd      	b.n	8008e6e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008cfa:	88bb      	ldrh	r3, [r7, #4]
 8008cfc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008cfe:	200c      	movs	r0, #12
 8008d00:	f7ff fb8e 	bl	8008420 <memp_malloc>
 8008d04:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d109      	bne.n	8008d20 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008d0c:	f7ff ff76 	bl	8008bfc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008d16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d18:	f000 faa8 	bl	800926c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	e0a7      	b.n	8008e70 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008d20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d22:	3303      	adds	r3, #3
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	f023 0303 	bic.w	r3, r3, #3
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8b7a      	ldrh	r2, [r7, #26]
 8008d34:	4293      	cmp	r3, r2
 8008d36:	bf28      	it	cs
 8008d38:	4613      	movcs	r3, r2
 8008d3a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d3e:	3310      	adds	r3, #16
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4413      	add	r3, r2
 8008d44:	3303      	adds	r3, #3
 8008d46:	f023 0303 	bic.w	r3, r3, #3
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	89f9      	ldrh	r1, [r7, #14]
 8008d4e:	8b7a      	ldrh	r2, [r7, #26]
 8008d50:	2300      	movs	r3, #0
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	887b      	ldrh	r3, [r7, #2]
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	6938      	ldr	r0, [r7, #16]
 8008d5e:	f7ff ff77 	bl	8008c50 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d006      	beq.n	8008d7c <pbuf_alloc+0xd8>
 8008d6e:	4b42      	ldr	r3, [pc, #264]	; (8008e78 <pbuf_alloc+0x1d4>)
 8008d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d74:	4941      	ldr	r1, [pc, #260]	; (8008e7c <pbuf_alloc+0x1d8>)
 8008d76:	4842      	ldr	r0, [pc, #264]	; (8008e80 <pbuf_alloc+0x1dc>)
 8008d78:	f00b fac2 	bl	8014300 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8008d7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008d7e:	3303      	adds	r3, #3
 8008d80:	f023 0303 	bic.w	r3, r3, #3
 8008d84:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8008d88:	d106      	bne.n	8008d98 <pbuf_alloc+0xf4>
 8008d8a:	4b3b      	ldr	r3, [pc, #236]	; (8008e78 <pbuf_alloc+0x1d4>)
 8008d8c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8008d90:	493c      	ldr	r1, [pc, #240]	; (8008e84 <pbuf_alloc+0x1e0>)
 8008d92:	483b      	ldr	r0, [pc, #236]	; (8008e80 <pbuf_alloc+0x1dc>)
 8008d94:	f00b fab4 	bl	8014300 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d102      	bne.n	8008da4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	627b      	str	r3, [r7, #36]	; 0x24
 8008da2:	e002      	b.n	8008daa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008dae:	8b7a      	ldrh	r2, [r7, #26]
 8008db0:	89fb      	ldrh	r3, [r7, #14]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8008dba:	8b7b      	ldrh	r3, [r7, #26]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d19e      	bne.n	8008cfe <pbuf_alloc+0x5a>
      break;
 8008dc0:	e055      	b.n	8008e6e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008dc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008dc4:	3303      	adds	r3, #3
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	f023 0303 	bic.w	r3, r3, #3
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	88bb      	ldrh	r3, [r7, #4]
 8008dd0:	3303      	adds	r3, #3
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f023 0303 	bic.w	r3, r3, #3
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008dde:	8b3b      	ldrh	r3, [r7, #24]
 8008de0:	3310      	adds	r3, #16
 8008de2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008de4:	8b3a      	ldrh	r2, [r7, #24]
 8008de6:	88bb      	ldrh	r3, [r7, #4]
 8008de8:	3303      	adds	r3, #3
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d306      	bcc.n	8008e00 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008df2:	8afa      	ldrh	r2, [r7, #22]
 8008df4:	88bb      	ldrh	r3, [r7, #4]
 8008df6:	3303      	adds	r3, #3
 8008df8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d201      	bcs.n	8008e04 <pbuf_alloc+0x160>
        return NULL;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e035      	b.n	8008e70 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008e04:	8afb      	ldrh	r3, [r7, #22]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7ff f966 	bl	80080d8 <mem_malloc>
 8008e0c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <pbuf_alloc+0x174>
        return NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	e02b      	b.n	8008e70 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1e:	4413      	add	r3, r2
 8008e20:	3303      	adds	r3, #3
 8008e22:	f023 0303 	bic.w	r3, r3, #3
 8008e26:	4618      	mov	r0, r3
 8008e28:	88b9      	ldrh	r1, [r7, #4]
 8008e2a:	88ba      	ldrh	r2, [r7, #4]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9301      	str	r3, [sp, #4]
 8008e30:	887b      	ldrh	r3, [r7, #2]
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	460b      	mov	r3, r1
 8008e36:	4601      	mov	r1, r0
 8008e38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e3a:	f7ff ff09 	bl	8008c50 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d010      	beq.n	8008e6c <pbuf_alloc+0x1c8>
 8008e4a:	4b0b      	ldr	r3, [pc, #44]	; (8008e78 <pbuf_alloc+0x1d4>)
 8008e4c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8008e50:	490d      	ldr	r1, [pc, #52]	; (8008e88 <pbuf_alloc+0x1e4>)
 8008e52:	480b      	ldr	r0, [pc, #44]	; (8008e80 <pbuf_alloc+0x1dc>)
 8008e54:	f00b fa54 	bl	8014300 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008e58:	e008      	b.n	8008e6c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008e5a:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <pbuf_alloc+0x1d4>)
 8008e5c:	f240 1227 	movw	r2, #295	; 0x127
 8008e60:	490a      	ldr	r1, [pc, #40]	; (8008e8c <pbuf_alloc+0x1e8>)
 8008e62:	4807      	ldr	r0, [pc, #28]	; (8008e80 <pbuf_alloc+0x1dc>)
 8008e64:	f00b fa4c 	bl	8014300 <iprintf>
      return NULL;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e001      	b.n	8008e70 <pbuf_alloc+0x1cc>
      break;
 8008e6c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3728      	adds	r7, #40	; 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	0801575c 	.word	0x0801575c
 8008e7c:	0801578c 	.word	0x0801578c
 8008e80:	080157bc 	.word	0x080157bc
 8008e84:	080157e4 	.word	0x080157e4
 8008e88:	08015818 	.word	0x08015818
 8008e8c:	08015844 	.word	0x08015844

08008e90 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	6078      	str	r0, [r7, #4]
 8008e98:	460b      	mov	r3, r1
 8008e9a:	807b      	strh	r3, [r7, #2]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008ea0:	883b      	ldrh	r3, [r7, #0]
 8008ea2:	2b41      	cmp	r3, #65	; 0x41
 8008ea4:	d009      	beq.n	8008eba <pbuf_alloc_reference+0x2a>
 8008ea6:	883b      	ldrh	r3, [r7, #0]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d006      	beq.n	8008eba <pbuf_alloc_reference+0x2a>
 8008eac:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <pbuf_alloc_reference+0x5c>)
 8008eae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008eb2:	490f      	ldr	r1, [pc, #60]	; (8008ef0 <pbuf_alloc_reference+0x60>)
 8008eb4:	480f      	ldr	r0, [pc, #60]	; (8008ef4 <pbuf_alloc_reference+0x64>)
 8008eb6:	f00b fa23 	bl	8014300 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008eba:	200b      	movs	r0, #11
 8008ebc:	f7ff fab0 	bl	8008420 <memp_malloc>
 8008ec0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e00b      	b.n	8008ee4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008ecc:	8879      	ldrh	r1, [r7, #2]
 8008ece:	887a      	ldrh	r2, [r7, #2]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	883b      	ldrh	r3, [r7, #0]
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7ff feb7 	bl	8008c50 <pbuf_init_alloced_pbuf>
  return p;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0801575c 	.word	0x0801575c
 8008ef0:	08015860 	.word	0x08015860
 8008ef4:	080157bc 	.word	0x080157bc

08008ef8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	460b      	mov	r3, r1
 8008f06:	81bb      	strh	r3, [r7, #12]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008f0c:	7bfb      	ldrb	r3, [r7, #15]
 8008f0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008f10:	8a7b      	ldrh	r3, [r7, #18]
 8008f12:	3303      	adds	r3, #3
 8008f14:	f023 0203 	bic.w	r2, r3, #3
 8008f18:	89bb      	ldrh	r3, [r7, #12]
 8008f1a:	441a      	add	r2, r3
 8008f1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d901      	bls.n	8008f26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008f22:	2300      	movs	r3, #0
 8008f24:	e018      	b.n	8008f58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008f26:	6a3b      	ldr	r3, [r7, #32]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d007      	beq.n	8008f3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008f2c:	8a7b      	ldrh	r3, [r7, #18]
 8008f2e:	3303      	adds	r3, #3
 8008f30:	f023 0303 	bic.w	r3, r3, #3
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	4413      	add	r3, r2
 8008f38:	617b      	str	r3, [r7, #20]
 8008f3a:	e001      	b.n	8008f40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	89b9      	ldrh	r1, [r7, #12]
 8008f44:	89ba      	ldrh	r2, [r7, #12]
 8008f46:	2302      	movs	r3, #2
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	897b      	ldrh	r3, [r7, #10]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	6979      	ldr	r1, [r7, #20]
 8008f52:	f7ff fe7d 	bl	8008c50 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008f56:	687b      	ldr	r3, [r7, #4]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d106      	bne.n	8008f80 <pbuf_realloc+0x20>
 8008f72:	4b3a      	ldr	r3, [pc, #232]	; (800905c <pbuf_realloc+0xfc>)
 8008f74:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008f78:	4939      	ldr	r1, [pc, #228]	; (8009060 <pbuf_realloc+0x100>)
 8008f7a:	483a      	ldr	r0, [pc, #232]	; (8009064 <pbuf_realloc+0x104>)
 8008f7c:	f00b f9c0 	bl	8014300 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	887a      	ldrh	r2, [r7, #2]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d263      	bcs.n	8009052 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	891a      	ldrh	r2, [r3, #8]
 8008f8e:	887b      	ldrh	r3, [r7, #2]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008f94:	887b      	ldrh	r3, [r7, #2]
 8008f96:	817b      	strh	r3, [r7, #10]
  q = p;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008f9c:	e018      	b.n	8008fd0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	895b      	ldrh	r3, [r3, #10]
 8008fa2:	897a      	ldrh	r2, [r7, #10]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	891a      	ldrh	r2, [r3, #8]
 8008fac:	893b      	ldrh	r3, [r7, #8]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <pbuf_realloc+0x70>
 8008fc2:	4b26      	ldr	r3, [pc, #152]	; (800905c <pbuf_realloc+0xfc>)
 8008fc4:	f240 12af 	movw	r2, #431	; 0x1af
 8008fc8:	4927      	ldr	r1, [pc, #156]	; (8009068 <pbuf_realloc+0x108>)
 8008fca:	4826      	ldr	r0, [pc, #152]	; (8009064 <pbuf_realloc+0x104>)
 8008fcc:	f00b f998 	bl	8014300 <iprintf>
  while (rem_len > q->len) {
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	895b      	ldrh	r3, [r3, #10]
 8008fd4:	897a      	ldrh	r2, [r7, #10]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d8e1      	bhi.n	8008f9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	7b1b      	ldrb	r3, [r3, #12]
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d121      	bne.n	800902a <pbuf_realloc+0xca>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	895b      	ldrh	r3, [r3, #10]
 8008fea:	897a      	ldrh	r2, [r7, #10]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d01c      	beq.n	800902a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	7b5b      	ldrb	r3, [r3, #13]
 8008ff4:	f003 0302 	and.w	r3, r3, #2
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d116      	bne.n	800902a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	b29a      	uxth	r2, r3
 8009006:	897b      	ldrh	r3, [r7, #10]
 8009008:	4413      	add	r3, r2
 800900a:	b29b      	uxth	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f7fe ff58 	bl	8007ec4 <mem_trim>
 8009014:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d106      	bne.n	800902a <pbuf_realloc+0xca>
 800901c:	4b0f      	ldr	r3, [pc, #60]	; (800905c <pbuf_realloc+0xfc>)
 800901e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009022:	4912      	ldr	r1, [pc, #72]	; (800906c <pbuf_realloc+0x10c>)
 8009024:	480f      	ldr	r0, [pc, #60]	; (8009064 <pbuf_realloc+0x104>)
 8009026:	f00b f96b 	bl	8014300 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	897a      	ldrh	r2, [r7, #10]
 800902e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	895a      	ldrh	r2, [r3, #10]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d004      	beq.n	800904a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 f911 	bl	800926c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	e000      	b.n	8009054 <pbuf_realloc+0xf4>
    return;
 8009052:	bf00      	nop

}
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	0801575c 	.word	0x0801575c
 8009060:	08015874 	.word	0x08015874
 8009064:	080157bc 	.word	0x080157bc
 8009068:	0801588c 	.word	0x0801588c
 800906c:	080158a4 	.word	0x080158a4

08009070 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b086      	sub	sp, #24
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	4613      	mov	r3, r2
 800907c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d106      	bne.n	8009092 <pbuf_add_header_impl+0x22>
 8009084:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <pbuf_add_header_impl+0xc4>)
 8009086:	f240 12df 	movw	r2, #479	; 0x1df
 800908a:	492b      	ldr	r1, [pc, #172]	; (8009138 <pbuf_add_header_impl+0xc8>)
 800908c:	482b      	ldr	r0, [pc, #172]	; (800913c <pbuf_add_header_impl+0xcc>)
 800908e:	f00b f937 	bl	8014300 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <pbuf_add_header_impl+0x30>
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800909e:	d301      	bcc.n	80090a4 <pbuf_add_header_impl+0x34>
    return 1;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e043      	b.n	800912c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <pbuf_add_header_impl+0x3e>
    return 0;
 80090aa:	2300      	movs	r3, #0
 80090ac:	e03e      	b.n	800912c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	891a      	ldrh	r2, [r3, #8]
 80090b6:	8a7b      	ldrh	r3, [r7, #18]
 80090b8:	4413      	add	r3, r2
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	8a7a      	ldrh	r2, [r7, #18]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d901      	bls.n	80090c6 <pbuf_add_header_impl+0x56>
    return 1;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e032      	b.n	800912c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	7b1b      	ldrb	r3, [r3, #12]
 80090ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80090cc:	8a3b      	ldrh	r3, [r7, #16]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00c      	beq.n	80090f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	425b      	negs	r3, r3
 80090de:	4413      	add	r3, r2
 80090e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3310      	adds	r3, #16
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d20d      	bcs.n	8009108 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e01d      	b.n	800912c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d006      	beq.n	8009104 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	425b      	negs	r3, r3
 80090fe:	4413      	add	r3, r2
 8009100:	617b      	str	r3, [r7, #20]
 8009102:	e001      	b.n	8009108 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009104:	2301      	movs	r3, #1
 8009106:	e011      	b.n	800912c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	895a      	ldrh	r2, [r3, #10]
 8009112:	8a7b      	ldrh	r3, [r7, #18]
 8009114:	4413      	add	r3, r2
 8009116:	b29a      	uxth	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	891a      	ldrh	r2, [r3, #8]
 8009120:	8a7b      	ldrh	r3, [r7, #18]
 8009122:	4413      	add	r3, r2
 8009124:	b29a      	uxth	r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	811a      	strh	r2, [r3, #8]


  return 0;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	0801575c 	.word	0x0801575c
 8009138:	080158c0 	.word	0x080158c0
 800913c:	080157bc 	.word	0x080157bc

08009140 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ff8e 	bl	8009070 <pbuf_add_header_impl>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d106      	bne.n	800917e <pbuf_remove_header+0x1e>
 8009170:	4b20      	ldr	r3, [pc, #128]	; (80091f4 <pbuf_remove_header+0x94>)
 8009172:	f240 224b 	movw	r2, #587	; 0x24b
 8009176:	4920      	ldr	r1, [pc, #128]	; (80091f8 <pbuf_remove_header+0x98>)
 8009178:	4820      	ldr	r0, [pc, #128]	; (80091fc <pbuf_remove_header+0x9c>)
 800917a:	f00b f8c1 	bl	8014300 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <pbuf_remove_header+0x2c>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800918a:	d301      	bcc.n	8009190 <pbuf_remove_header+0x30>
    return 1;
 800918c:	2301      	movs	r3, #1
 800918e:	e02c      	b.n	80091ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <pbuf_remove_header+0x3a>
    return 0;
 8009196:	2300      	movs	r3, #0
 8009198:	e027      	b.n	80091ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	895b      	ldrh	r3, [r3, #10]
 80091a2:	89fa      	ldrh	r2, [r7, #14]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d908      	bls.n	80091ba <pbuf_remove_header+0x5a>
 80091a8:	4b12      	ldr	r3, [pc, #72]	; (80091f4 <pbuf_remove_header+0x94>)
 80091aa:	f240 2255 	movw	r2, #597	; 0x255
 80091ae:	4914      	ldr	r1, [pc, #80]	; (8009200 <pbuf_remove_header+0xa0>)
 80091b0:	4812      	ldr	r0, [pc, #72]	; (80091fc <pbuf_remove_header+0x9c>)
 80091b2:	f00b f8a5 	bl	8014300 <iprintf>
 80091b6:	2301      	movs	r3, #1
 80091b8:	e017      	b.n	80091ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	441a      	add	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	895a      	ldrh	r2, [r3, #10]
 80091d0:	89fb      	ldrh	r3, [r7, #14]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	891a      	ldrh	r2, [r3, #8]
 80091de:	89fb      	ldrh	r3, [r7, #14]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3710      	adds	r7, #16
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0801575c 	.word	0x0801575c
 80091f8:	080158c0 	.word	0x080158c0
 80091fc:	080157bc 	.word	0x080157bc
 8009200:	080158cc 	.word	0x080158cc

08009204 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	460b      	mov	r3, r1
 800920e:	807b      	strh	r3, [r7, #2]
 8009210:	4613      	mov	r3, r2
 8009212:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009214:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009218:	2b00      	cmp	r3, #0
 800921a:	da08      	bge.n	800922e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800921c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009220:	425b      	negs	r3, r3
 8009222:	4619      	mov	r1, r3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff ff9b 	bl	8009160 <pbuf_remove_header>
 800922a:	4603      	mov	r3, r0
 800922c:	e007      	b.n	800923e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800922e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009232:	787a      	ldrb	r2, [r7, #1]
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff ff1a 	bl	8009070 <pbuf_add_header_impl>
 800923c:	4603      	mov	r3, r0
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009256:	2201      	movs	r2, #1
 8009258:	4619      	mov	r1, r3
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff ffd2 	bl	8009204 <pbuf_header_impl>
 8009260:	4603      	mov	r3, r0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d106      	bne.n	800928e <pbuf_free+0x22>
 8009280:	4b3b      	ldr	r3, [pc, #236]	; (8009370 <pbuf_free+0x104>)
 8009282:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009286:	493b      	ldr	r1, [pc, #236]	; (8009374 <pbuf_free+0x108>)
 8009288:	483b      	ldr	r0, [pc, #236]	; (8009378 <pbuf_free+0x10c>)
 800928a:	f00b f839 	bl	8014300 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800928e:	2300      	movs	r3, #0
 8009290:	e069      	b.n	8009366 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009292:	2300      	movs	r3, #0
 8009294:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009296:	e062      	b.n	800935e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009298:	f00a fc96 	bl	8013bc8 <sys_arch_protect>
 800929c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7b9b      	ldrb	r3, [r3, #14]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d106      	bne.n	80092b4 <pbuf_free+0x48>
 80092a6:	4b32      	ldr	r3, [pc, #200]	; (8009370 <pbuf_free+0x104>)
 80092a8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80092ac:	4933      	ldr	r1, [pc, #204]	; (800937c <pbuf_free+0x110>)
 80092ae:	4832      	ldr	r0, [pc, #200]	; (8009378 <pbuf_free+0x10c>)
 80092b0:	f00b f826 	bl	8014300 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	7b9b      	ldrb	r3, [r3, #14]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b2da      	uxtb	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	739a      	strb	r2, [r3, #14]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	7b9b      	ldrb	r3, [r3, #14]
 80092c4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80092c6:	69b8      	ldr	r0, [r7, #24]
 80092c8:	f00a fc8c 	bl	8013be4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80092cc:	7dfb      	ldrb	r3, [r7, #23]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d143      	bne.n	800935a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	f003 030f 	and.w	r3, r3, #15
 80092e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	7b5b      	ldrb	r3, [r3, #13]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d011      	beq.n	8009312 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d106      	bne.n	8009308 <pbuf_free+0x9c>
 80092fa:	4b1d      	ldr	r3, [pc, #116]	; (8009370 <pbuf_free+0x104>)
 80092fc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009300:	491f      	ldr	r1, [pc, #124]	; (8009380 <pbuf_free+0x114>)
 8009302:	481d      	ldr	r0, [pc, #116]	; (8009378 <pbuf_free+0x10c>)
 8009304:	f00a fffc 	bl	8014300 <iprintf>
        pc->custom_free_function(p);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	4798      	blx	r3
 8009310:	e01d      	b.n	800934e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d104      	bne.n	8009322 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009318:	6879      	ldr	r1, [r7, #4]
 800931a:	200c      	movs	r0, #12
 800931c:	f7ff f8f6 	bl	800850c <memp_free>
 8009320:	e015      	b.n	800934e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d104      	bne.n	8009332 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	200b      	movs	r0, #11
 800932c:	f7ff f8ee 	bl	800850c <memp_free>
 8009330:	e00d      	b.n	800934e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d103      	bne.n	8009340 <pbuf_free+0xd4>
          mem_free(p);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7fe fd33 	bl	8007da4 <mem_free>
 800933e:	e006      	b.n	800934e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009340:	4b0b      	ldr	r3, [pc, #44]	; (8009370 <pbuf_free+0x104>)
 8009342:	f240 320f 	movw	r2, #783	; 0x30f
 8009346:	490f      	ldr	r1, [pc, #60]	; (8009384 <pbuf_free+0x118>)
 8009348:	480b      	ldr	r0, [pc, #44]	; (8009378 <pbuf_free+0x10c>)
 800934a:	f00a ffd9 	bl	8014300 <iprintf>
        }
      }
      count++;
 800934e:	7ffb      	ldrb	r3, [r7, #31]
 8009350:	3301      	adds	r3, #1
 8009352:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	607b      	str	r3, [r7, #4]
 8009358:	e001      	b.n	800935e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d199      	bne.n	8009298 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009364:	7ffb      	ldrb	r3, [r7, #31]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	0801575c 	.word	0x0801575c
 8009374:	080158c0 	.word	0x080158c0
 8009378:	080157bc 	.word	0x080157bc
 800937c:	080158ec 	.word	0x080158ec
 8009380:	08015904 	.word	0x08015904
 8009384:	08015928 	.word	0x08015928

08009388 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009394:	e005      	b.n	80093a2 <pbuf_clen+0x1a>
    ++len;
 8009396:	89fb      	ldrh	r3, [r7, #14]
 8009398:	3301      	adds	r3, #1
 800939a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f6      	bne.n	8009396 <pbuf_clen+0xe>
  }
  return len;
 80093a8:	89fb      	ldrh	r3, [r7, #14]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3714      	adds	r7, #20
 80093ae:	46bd      	mov	sp, r7
 80093b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b4:	4770      	bx	lr
	...

080093b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80093c6:	f00a fbff 	bl	8013bc8 <sys_arch_protect>
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7b9b      	ldrb	r3, [r3, #14]
 80093d0:	3301      	adds	r3, #1
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	739a      	strb	r2, [r3, #14]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f00a fc03 	bl	8013be4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7b9b      	ldrb	r3, [r3, #14]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d106      	bne.n	80093f4 <pbuf_ref+0x3c>
 80093e6:	4b05      	ldr	r3, [pc, #20]	; (80093fc <pbuf_ref+0x44>)
 80093e8:	f240 3242 	movw	r2, #834	; 0x342
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <pbuf_ref+0x48>)
 80093ee:	4805      	ldr	r0, [pc, #20]	; (8009404 <pbuf_ref+0x4c>)
 80093f0:	f00a ff86 	bl	8014300 <iprintf>
  }
}
 80093f4:	bf00      	nop
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	0801575c 	.word	0x0801575c
 8009400:	0801593c 	.word	0x0801593c
 8009404:	080157bc 	.word	0x080157bc

08009408 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <pbuf_cat+0x16>
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d107      	bne.n	800942e <pbuf_cat+0x26>
 800941e:	4b20      	ldr	r3, [pc, #128]	; (80094a0 <pbuf_cat+0x98>)
 8009420:	f240 3259 	movw	r2, #857	; 0x359
 8009424:	491f      	ldr	r1, [pc, #124]	; (80094a4 <pbuf_cat+0x9c>)
 8009426:	4820      	ldr	r0, [pc, #128]	; (80094a8 <pbuf_cat+0xa0>)
 8009428:	f00a ff6a 	bl	8014300 <iprintf>
 800942c:	e034      	b.n	8009498 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	60fb      	str	r3, [r7, #12]
 8009432:	e00a      	b.n	800944a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	891a      	ldrh	r2, [r3, #8]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	891b      	ldrh	r3, [r3, #8]
 800943c:	4413      	add	r3, r2
 800943e:	b29a      	uxth	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1f0      	bne.n	8009434 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	891a      	ldrh	r2, [r3, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	895b      	ldrh	r3, [r3, #10]
 800945a:	429a      	cmp	r2, r3
 800945c:	d006      	beq.n	800946c <pbuf_cat+0x64>
 800945e:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <pbuf_cat+0x98>)
 8009460:	f240 3262 	movw	r2, #866	; 0x362
 8009464:	4911      	ldr	r1, [pc, #68]	; (80094ac <pbuf_cat+0xa4>)
 8009466:	4810      	ldr	r0, [pc, #64]	; (80094a8 <pbuf_cat+0xa0>)
 8009468:	f00a ff4a 	bl	8014300 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d006      	beq.n	8009482 <pbuf_cat+0x7a>
 8009474:	4b0a      	ldr	r3, [pc, #40]	; (80094a0 <pbuf_cat+0x98>)
 8009476:	f240 3263 	movw	r2, #867	; 0x363
 800947a:	490d      	ldr	r1, [pc, #52]	; (80094b0 <pbuf_cat+0xa8>)
 800947c:	480a      	ldr	r0, [pc, #40]	; (80094a8 <pbuf_cat+0xa0>)
 800947e:	f00a ff3f 	bl	8014300 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	891a      	ldrh	r2, [r3, #8]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	891b      	ldrh	r3, [r3, #8]
 800948a:	4413      	add	r3, r2
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009498:	3710      	adds	r7, #16
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	0801575c 	.word	0x0801575c
 80094a4:	08015950 	.word	0x08015950
 80094a8:	080157bc 	.word	0x080157bc
 80094ac:	08015988 	.word	0x08015988
 80094b0:	080159b8 	.word	0x080159b8

080094b4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff ffa1 	bl	8009408 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80094c6:	6838      	ldr	r0, [r7, #0]
 80094c8:	f7ff ff76 	bl	80093b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	2300      	movs	r3, #0
 80094e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d008      	beq.n	80094fe <pbuf_copy+0x2a>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <pbuf_copy+0x2a>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	891a      	ldrh	r2, [r3, #8]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	891b      	ldrh	r3, [r3, #8]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d209      	bcs.n	8009512 <pbuf_copy+0x3e>
 80094fe:	4b57      	ldr	r3, [pc, #348]	; (800965c <pbuf_copy+0x188>)
 8009500:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009504:	4956      	ldr	r1, [pc, #344]	; (8009660 <pbuf_copy+0x18c>)
 8009506:	4857      	ldr	r0, [pc, #348]	; (8009664 <pbuf_copy+0x190>)
 8009508:	f00a fefa 	bl	8014300 <iprintf>
 800950c:	f06f 030f 	mvn.w	r3, #15
 8009510:	e09f      	b.n	8009652 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	895b      	ldrh	r3, [r3, #10]
 8009516:	461a      	mov	r2, r3
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	1ad2      	subs	r2, r2, r3
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	895b      	ldrh	r3, [r3, #10]
 8009520:	4619      	mov	r1, r3
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	1acb      	subs	r3, r1, r3
 8009526:	429a      	cmp	r2, r3
 8009528:	d306      	bcc.n	8009538 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	895b      	ldrh	r3, [r3, #10]
 800952e:	461a      	mov	r2, r3
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	60fb      	str	r3, [r7, #12]
 8009536:	e005      	b.n	8009544 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	895b      	ldrh	r3, [r3, #10]
 800953c:	461a      	mov	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	18d0      	adds	r0, r2, r3
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	4413      	add	r3, r2
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4619      	mov	r1, r3
 8009558:	f00b f813 	bl	8014582 <memcpy>
    offset_to += len;
 800955c:	697a      	ldr	r2, [r7, #20]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	895b      	ldrh	r3, [r3, #10]
 8009570:	461a      	mov	r2, r3
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	4293      	cmp	r3, r2
 8009576:	d906      	bls.n	8009586 <pbuf_copy+0xb2>
 8009578:	4b38      	ldr	r3, [pc, #224]	; (800965c <pbuf_copy+0x188>)
 800957a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800957e:	493a      	ldr	r1, [pc, #232]	; (8009668 <pbuf_copy+0x194>)
 8009580:	4838      	ldr	r0, [pc, #224]	; (8009664 <pbuf_copy+0x190>)
 8009582:	f00a febd 	bl	8014300 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	895b      	ldrh	r3, [r3, #10]
 800958a:	461a      	mov	r2, r3
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	4293      	cmp	r3, r2
 8009590:	d906      	bls.n	80095a0 <pbuf_copy+0xcc>
 8009592:	4b32      	ldr	r3, [pc, #200]	; (800965c <pbuf_copy+0x188>)
 8009594:	f240 32da 	movw	r2, #986	; 0x3da
 8009598:	4934      	ldr	r1, [pc, #208]	; (800966c <pbuf_copy+0x198>)
 800959a:	4832      	ldr	r0, [pc, #200]	; (8009664 <pbuf_copy+0x190>)
 800959c:	f00a feb0 	bl	8014300 <iprintf>
    if (offset_from >= p_from->len) {
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	895b      	ldrh	r3, [r3, #10]
 80095a4:	461a      	mov	r2, r3
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d304      	bcc.n	80095b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	895b      	ldrh	r3, [r3, #10]
 80095ba:	461a      	mov	r2, r3
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	4293      	cmp	r3, r2
 80095c0:	d114      	bne.n	80095ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10c      	bne.n	80095ec <pbuf_copy+0x118>
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d009      	beq.n	80095ec <pbuf_copy+0x118>
 80095d8:	4b20      	ldr	r3, [pc, #128]	; (800965c <pbuf_copy+0x188>)
 80095da:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80095de:	4924      	ldr	r1, [pc, #144]	; (8009670 <pbuf_copy+0x19c>)
 80095e0:	4820      	ldr	r0, [pc, #128]	; (8009664 <pbuf_copy+0x190>)
 80095e2:	f00a fe8d 	bl	8014300 <iprintf>
 80095e6:	f06f 030f 	mvn.w	r3, #15
 80095ea:	e032      	b.n	8009652 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d013      	beq.n	800961a <pbuf_copy+0x146>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	895a      	ldrh	r2, [r3, #10]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	891b      	ldrh	r3, [r3, #8]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d10d      	bne.n	800961a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d009      	beq.n	800961a <pbuf_copy+0x146>
 8009606:	4b15      	ldr	r3, [pc, #84]	; (800965c <pbuf_copy+0x188>)
 8009608:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800960c:	4919      	ldr	r1, [pc, #100]	; (8009674 <pbuf_copy+0x1a0>)
 800960e:	4815      	ldr	r0, [pc, #84]	; (8009664 <pbuf_copy+0x190>)
 8009610:	f00a fe76 	bl	8014300 <iprintf>
 8009614:	f06f 0305 	mvn.w	r3, #5
 8009618:	e01b      	b.n	8009652 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d013      	beq.n	8009648 <pbuf_copy+0x174>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	895a      	ldrh	r2, [r3, #10]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	891b      	ldrh	r3, [r3, #8]
 8009628:	429a      	cmp	r2, r3
 800962a:	d10d      	bne.n	8009648 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <pbuf_copy+0x174>
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <pbuf_copy+0x188>)
 8009636:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800963a:	490e      	ldr	r1, [pc, #56]	; (8009674 <pbuf_copy+0x1a0>)
 800963c:	4809      	ldr	r0, [pc, #36]	; (8009664 <pbuf_copy+0x190>)
 800963e:	f00a fe5f 	bl	8014300 <iprintf>
 8009642:	f06f 0305 	mvn.w	r3, #5
 8009646:	e004      	b.n	8009652 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	f47f af61 	bne.w	8009512 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	0801575c 	.word	0x0801575c
 8009660:	08015a04 	.word	0x08015a04
 8009664:	080157bc 	.word	0x080157bc
 8009668:	08015a34 	.word	0x08015a34
 800966c:	08015a4c 	.word	0x08015a4c
 8009670:	08015a68 	.word	0x08015a68
 8009674:	08015a78 	.word	0x08015a78

08009678 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4611      	mov	r1, r2
 8009684:	461a      	mov	r2, r3
 8009686:	460b      	mov	r3, r1
 8009688:	80fb      	strh	r3, [r7, #6]
 800968a:	4613      	mov	r3, r2
 800968c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800968e:	2300      	movs	r3, #0
 8009690:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d108      	bne.n	80096ae <pbuf_copy_partial+0x36>
 800969c:	4b2b      	ldr	r3, [pc, #172]	; (800974c <pbuf_copy_partial+0xd4>)
 800969e:	f240 420a 	movw	r2, #1034	; 0x40a
 80096a2:	492b      	ldr	r1, [pc, #172]	; (8009750 <pbuf_copy_partial+0xd8>)
 80096a4:	482b      	ldr	r0, [pc, #172]	; (8009754 <pbuf_copy_partial+0xdc>)
 80096a6:	f00a fe2b 	bl	8014300 <iprintf>
 80096aa:	2300      	movs	r3, #0
 80096ac:	e04a      	b.n	8009744 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d108      	bne.n	80096c6 <pbuf_copy_partial+0x4e>
 80096b4:	4b25      	ldr	r3, [pc, #148]	; (800974c <pbuf_copy_partial+0xd4>)
 80096b6:	f240 420b 	movw	r2, #1035	; 0x40b
 80096ba:	4927      	ldr	r1, [pc, #156]	; (8009758 <pbuf_copy_partial+0xe0>)
 80096bc:	4825      	ldr	r0, [pc, #148]	; (8009754 <pbuf_copy_partial+0xdc>)
 80096be:	f00a fe1f 	bl	8014300 <iprintf>
 80096c2:	2300      	movs	r3, #0
 80096c4:	e03e      	b.n	8009744 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	61fb      	str	r3, [r7, #28]
 80096ca:	e034      	b.n	8009736 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80096cc:	88bb      	ldrh	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00a      	beq.n	80096e8 <pbuf_copy_partial+0x70>
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	895b      	ldrh	r3, [r3, #10]
 80096d6:	88ba      	ldrh	r2, [r7, #4]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d305      	bcc.n	80096e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	895b      	ldrh	r3, [r3, #10]
 80096e0:	88ba      	ldrh	r2, [r7, #4]
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	80bb      	strh	r3, [r7, #4]
 80096e6:	e023      	b.n	8009730 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	895a      	ldrh	r2, [r3, #10]
 80096ec:	88bb      	ldrh	r3, [r7, #4]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80096f2:	8b3a      	ldrh	r2, [r7, #24]
 80096f4:	88fb      	ldrh	r3, [r7, #6]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d901      	bls.n	80096fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80096fa:	88fb      	ldrh	r3, [r7, #6]
 80096fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80096fe:	8b7b      	ldrh	r3, [r7, #26]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	18d0      	adds	r0, r2, r3
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	88bb      	ldrh	r3, [r7, #4]
 800970a:	4413      	add	r3, r2
 800970c:	8b3a      	ldrh	r2, [r7, #24]
 800970e:	4619      	mov	r1, r3
 8009710:	f00a ff37 	bl	8014582 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009714:	8afa      	ldrh	r2, [r7, #22]
 8009716:	8b3b      	ldrh	r3, [r7, #24]
 8009718:	4413      	add	r3, r2
 800971a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800971c:	8b7a      	ldrh	r2, [r7, #26]
 800971e:	8b3b      	ldrh	r3, [r7, #24]
 8009720:	4413      	add	r3, r2
 8009722:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009724:	88fa      	ldrh	r2, [r7, #6]
 8009726:	8b3b      	ldrh	r3, [r7, #24]
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	61fb      	str	r3, [r7, #28]
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d002      	beq.n	8009742 <pbuf_copy_partial+0xca>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1c4      	bne.n	80096cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009742:	8afb      	ldrh	r3, [r7, #22]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	0801575c 	.word	0x0801575c
 8009750:	08015aa4 	.word	0x08015aa4
 8009754:	080157bc 	.word	0x080157bc
 8009758:	08015ac4 	.word	0x08015ac4

0800975c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	603a      	str	r2, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	460b      	mov	r3, r1
 800976a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	8919      	ldrh	r1, [r3, #8]
 8009770:	88ba      	ldrh	r2, [r7, #4]
 8009772:	79fb      	ldrb	r3, [r7, #7]
 8009774:	4618      	mov	r0, r3
 8009776:	f7ff fa95 	bl	8008ca4 <pbuf_alloc>
 800977a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <pbuf_clone+0x2a>
    return NULL;
 8009782:	2300      	movs	r3, #0
 8009784:	e011      	b.n	80097aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f7ff fea3 	bl	80094d4 <pbuf_copy>
 800978e:	4603      	mov	r3, r0
 8009790:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009792:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d006      	beq.n	80097a8 <pbuf_clone+0x4c>
 800979a:	4b06      	ldr	r3, [pc, #24]	; (80097b4 <pbuf_clone+0x58>)
 800979c:	f240 5224 	movw	r2, #1316	; 0x524
 80097a0:	4905      	ldr	r1, [pc, #20]	; (80097b8 <pbuf_clone+0x5c>)
 80097a2:	4806      	ldr	r0, [pc, #24]	; (80097bc <pbuf_clone+0x60>)
 80097a4:	f00a fdac 	bl	8014300 <iprintf>
  return q;
 80097a8:	68fb      	ldr	r3, [r7, #12]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	0801575c 	.word	0x0801575c
 80097b8:	08015bd0 	.word	0x08015bd0
 80097bc:	080157bc 	.word	0x080157bc

080097c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80097c4:	f00a fc8a 	bl	80140dc <rand>
 80097c8:	4603      	mov	r3, r0
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	4b01      	ldr	r3, [pc, #4]	; (80097e0 <tcp_init+0x20>)
 80097da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80097dc:	bf00      	nop
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	20000024 	.word	0x20000024

080097e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	7d1b      	ldrb	r3, [r3, #20]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d105      	bne.n	8009800 <tcp_free+0x1c>
 80097f4:	4b06      	ldr	r3, [pc, #24]	; (8009810 <tcp_free+0x2c>)
 80097f6:	22d4      	movs	r2, #212	; 0xd4
 80097f8:	4906      	ldr	r1, [pc, #24]	; (8009814 <tcp_free+0x30>)
 80097fa:	4807      	ldr	r0, [pc, #28]	; (8009818 <tcp_free+0x34>)
 80097fc:	f00a fd80 	bl	8014300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	2001      	movs	r0, #1
 8009804:	f7fe fe82 	bl	800850c <memp_free>
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	08015c5c 	.word	0x08015c5c
 8009814:	08015c8c 	.word	0x08015c8c
 8009818:	08015ca0 	.word	0x08015ca0

0800981c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7d1b      	ldrb	r3, [r3, #20]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d105      	bne.n	8009838 <tcp_free_listen+0x1c>
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <tcp_free_listen+0x2c>)
 800982e:	22df      	movs	r2, #223	; 0xdf
 8009830:	4906      	ldr	r1, [pc, #24]	; (800984c <tcp_free_listen+0x30>)
 8009832:	4807      	ldr	r0, [pc, #28]	; (8009850 <tcp_free_listen+0x34>)
 8009834:	f00a fd64 	bl	8014300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	2002      	movs	r0, #2
 800983c:	f7fe fe66 	bl	800850c <memp_free>
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	08015c5c 	.word	0x08015c5c
 800984c:	08015cc8 	.word	0x08015cc8
 8009850:	08015ca0 	.word	0x08015ca0

08009854 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009858:	f000 fea2 	bl	800a5a0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800985c:	4b07      	ldr	r3, [pc, #28]	; (800987c <tcp_tmr+0x28>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	b2da      	uxtb	r2, r3
 8009864:	4b05      	ldr	r3, [pc, #20]	; (800987c <tcp_tmr+0x28>)
 8009866:	701a      	strb	r2, [r3, #0]
 8009868:	4b04      	ldr	r3, [pc, #16]	; (800987c <tcp_tmr+0x28>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009874:	f000 fb54 	bl	8009f20 <tcp_slowtmr>
  }
}
 8009878:	bf00      	nop
 800987a:	bd80      	pop	{r7, pc}
 800987c:	2000c505 	.word	0x2000c505

08009880 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d105      	bne.n	800989c <tcp_remove_listener+0x1c>
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <tcp_remove_listener+0x48>)
 8009892:	22ff      	movs	r2, #255	; 0xff
 8009894:	490d      	ldr	r1, [pc, #52]	; (80098cc <tcp_remove_listener+0x4c>)
 8009896:	480e      	ldr	r0, [pc, #56]	; (80098d0 <tcp_remove_listener+0x50>)
 8009898:	f00a fd32 	bl	8014300 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	e00a      	b.n	80098b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d102      	bne.n	80098b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1f1      	bne.n	80098a2 <tcp_remove_listener+0x22>
    }
  }
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	08015c5c 	.word	0x08015c5c
 80098cc:	08015ce4 	.word	0x08015ce4
 80098d0:	08015ca0 	.word	0x08015ca0

080098d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d106      	bne.n	80098f0 <tcp_listen_closed+0x1c>
 80098e2:	4b14      	ldr	r3, [pc, #80]	; (8009934 <tcp_listen_closed+0x60>)
 80098e4:	f240 1211 	movw	r2, #273	; 0x111
 80098e8:	4913      	ldr	r1, [pc, #76]	; (8009938 <tcp_listen_closed+0x64>)
 80098ea:	4814      	ldr	r0, [pc, #80]	; (800993c <tcp_listen_closed+0x68>)
 80098ec:	f00a fd08 	bl	8014300 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7d1b      	ldrb	r3, [r3, #20]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d006      	beq.n	8009906 <tcp_listen_closed+0x32>
 80098f8:	4b0e      	ldr	r3, [pc, #56]	; (8009934 <tcp_listen_closed+0x60>)
 80098fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80098fe:	4910      	ldr	r1, [pc, #64]	; (8009940 <tcp_listen_closed+0x6c>)
 8009900:	480e      	ldr	r0, [pc, #56]	; (800993c <tcp_listen_closed+0x68>)
 8009902:	f00a fcfd 	bl	8014300 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009906:	2301      	movs	r3, #1
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e00b      	b.n	8009924 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800990c:	4a0d      	ldr	r2, [pc, #52]	; (8009944 <tcp_listen_closed+0x70>)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff ffb1 	bl	8009880 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b03      	cmp	r3, #3
 8009928:	d9f0      	bls.n	800990c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800992a:	bf00      	nop
 800992c:	bf00      	nop
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	08015c5c 	.word	0x08015c5c
 8009938:	08015d0c 	.word	0x08015d0c
 800993c:	08015ca0 	.word	0x08015ca0
 8009940:	08015d18 	.word	0x08015d18
 8009944:	0801801c 	.word	0x0801801c

08009948 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009948:	b5b0      	push	{r4, r5, r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af04      	add	r7, sp, #16
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d106      	bne.n	8009968 <tcp_close_shutdown+0x20>
 800995a:	4b63      	ldr	r3, [pc, #396]	; (8009ae8 <tcp_close_shutdown+0x1a0>)
 800995c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009960:	4962      	ldr	r1, [pc, #392]	; (8009aec <tcp_close_shutdown+0x1a4>)
 8009962:	4863      	ldr	r0, [pc, #396]	; (8009af0 <tcp_close_shutdown+0x1a8>)
 8009964:	f00a fccc 	bl	8014300 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d066      	beq.n	8009a3c <tcp_close_shutdown+0xf4>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	7d1b      	ldrb	r3, [r3, #20]
 8009972:	2b04      	cmp	r3, #4
 8009974:	d003      	beq.n	800997e <tcp_close_shutdown+0x36>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	2b07      	cmp	r3, #7
 800997c:	d15e      	bne.n	8009a3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <tcp_close_shutdown+0x48>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800998e:	d055      	beq.n	8009a3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	8b5b      	ldrh	r3, [r3, #26]
 8009994:	f003 0310 	and.w	r3, r3, #16
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <tcp_close_shutdown+0x62>
 800999c:	4b52      	ldr	r3, [pc, #328]	; (8009ae8 <tcp_close_shutdown+0x1a0>)
 800999e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80099a2:	4954      	ldr	r1, [pc, #336]	; (8009af4 <tcp_close_shutdown+0x1ac>)
 80099a4:	4852      	ldr	r0, [pc, #328]	; (8009af0 <tcp_close_shutdown+0x1a8>)
 80099a6:	f00a fcab 	bl	8014300 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80099b2:	687d      	ldr	r5, [r7, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3304      	adds	r3, #4
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	8ad2      	ldrh	r2, [r2, #22]
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	8b09      	ldrh	r1, [r1, #24]
 80099c0:	9102      	str	r1, [sp, #8]
 80099c2:	9201      	str	r2, [sp, #4]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	462b      	mov	r3, r5
 80099c8:	4622      	mov	r2, r4
 80099ca:	4601      	mov	r1, r0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f004 fe91 	bl	800e6f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 f8c6 	bl	800ab64 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80099d8:	4b47      	ldr	r3, [pc, #284]	; (8009af8 <tcp_close_shutdown+0x1b0>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d105      	bne.n	80099ee <tcp_close_shutdown+0xa6>
 80099e2:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <tcp_close_shutdown+0x1b0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	4a43      	ldr	r2, [pc, #268]	; (8009af8 <tcp_close_shutdown+0x1b0>)
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	e013      	b.n	8009a16 <tcp_close_shutdown+0xce>
 80099ee:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <tcp_close_shutdown+0x1b0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60fb      	str	r3, [r7, #12]
 80099f4:	e00c      	b.n	8009a10 <tcp_close_shutdown+0xc8>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d104      	bne.n	8009a0a <tcp_close_shutdown+0xc2>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	60da      	str	r2, [r3, #12]
 8009a08:	e005      	b.n	8009a16 <tcp_close_shutdown+0xce>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	60fb      	str	r3, [r7, #12]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1ef      	bne.n	80099f6 <tcp_close_shutdown+0xae>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	60da      	str	r2, [r3, #12]
 8009a1c:	4b37      	ldr	r3, [pc, #220]	; (8009afc <tcp_close_shutdown+0x1b4>)
 8009a1e:	2201      	movs	r2, #1
 8009a20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009a22:	4b37      	ldr	r3, [pc, #220]	; (8009b00 <tcp_close_shutdown+0x1b8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d102      	bne.n	8009a32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009a2c:	f003 fd5e 	bl	800d4ec <tcp_trigger_input_pcb_close>
 8009a30:	e002      	b.n	8009a38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fed6 	bl	80097e4 <tcp_free>
      }
      return ERR_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	e050      	b.n	8009ade <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	7d1b      	ldrb	r3, [r3, #20]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d03b      	beq.n	8009abc <tcp_close_shutdown+0x174>
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	dc44      	bgt.n	8009ad2 <tcp_close_shutdown+0x18a>
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <tcp_close_shutdown+0x10a>
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d02a      	beq.n	8009aa6 <tcp_close_shutdown+0x15e>
 8009a50:	e03f      	b.n	8009ad2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	8adb      	ldrh	r3, [r3, #22]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d021      	beq.n	8009a9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009a5a:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <tcp_close_shutdown+0x1bc>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d105      	bne.n	8009a70 <tcp_close_shutdown+0x128>
 8009a64:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <tcp_close_shutdown+0x1bc>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
 8009a6a:	4a26      	ldr	r2, [pc, #152]	; (8009b04 <tcp_close_shutdown+0x1bc>)
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	e013      	b.n	8009a98 <tcp_close_shutdown+0x150>
 8009a70:	4b24      	ldr	r3, [pc, #144]	; (8009b04 <tcp_close_shutdown+0x1bc>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60bb      	str	r3, [r7, #8]
 8009a76:	e00c      	b.n	8009a92 <tcp_close_shutdown+0x14a>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d104      	bne.n	8009a8c <tcp_close_shutdown+0x144>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68da      	ldr	r2, [r3, #12]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	60da      	str	r2, [r3, #12]
 8009a8a:	e005      	b.n	8009a98 <tcp_close_shutdown+0x150>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	60bb      	str	r3, [r7, #8]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1ef      	bne.n	8009a78 <tcp_close_shutdown+0x130>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff fea0 	bl	80097e4 <tcp_free>
      break;
 8009aa4:	e01a      	b.n	8009adc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7ff ff14 	bl	80098d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4816      	ldr	r0, [pc, #88]	; (8009b08 <tcp_close_shutdown+0x1c0>)
 8009ab0:	f001 f8a8 	bl	800ac04 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff feb1 	bl	800981c <tcp_free_listen>
      break;
 8009aba:	e00f      	b.n	8009adc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	480e      	ldr	r0, [pc, #56]	; (8009af8 <tcp_close_shutdown+0x1b0>)
 8009ac0:	f001 f8a0 	bl	800ac04 <tcp_pcb_remove>
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <tcp_close_shutdown+0x1b4>)
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f7ff fe8a 	bl	80097e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8009ad0:	e004      	b.n	8009adc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f81a 	bl	8009b0c <tcp_close_shutdown_fin>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	e000      	b.n	8009ade <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08015c5c 	.word	0x08015c5c
 8009aec:	08015d30 	.word	0x08015d30
 8009af0:	08015ca0 	.word	0x08015ca0
 8009af4:	08015d50 	.word	0x08015d50
 8009af8:	2000c4fc 	.word	0x2000c4fc
 8009afc:	2000c504 	.word	0x2000c504
 8009b00:	2000c53c 	.word	0x2000c53c
 8009b04:	2000c4f4 	.word	0x2000c4f4
 8009b08:	2000c4f8 	.word	0x2000c4f8

08009b0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d106      	bne.n	8009b28 <tcp_close_shutdown_fin+0x1c>
 8009b1a:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <tcp_close_shutdown_fin+0xc8>)
 8009b1c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8009b20:	492d      	ldr	r1, [pc, #180]	; (8009bd8 <tcp_close_shutdown_fin+0xcc>)
 8009b22:	482e      	ldr	r0, [pc, #184]	; (8009bdc <tcp_close_shutdown_fin+0xd0>)
 8009b24:	f00a fbec 	bl	8014300 <iprintf>

  switch (pcb->state) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7d1b      	ldrb	r3, [r3, #20]
 8009b2c:	2b07      	cmp	r3, #7
 8009b2e:	d020      	beq.n	8009b72 <tcp_close_shutdown_fin+0x66>
 8009b30:	2b07      	cmp	r3, #7
 8009b32:	dc2b      	bgt.n	8009b8c <tcp_close_shutdown_fin+0x80>
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d002      	beq.n	8009b3e <tcp_close_shutdown_fin+0x32>
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d00d      	beq.n	8009b58 <tcp_close_shutdown_fin+0x4c>
 8009b3c:	e026      	b.n	8009b8c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f003 fee6 	bl	800d910 <tcp_send_fin>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009b48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d11f      	bne.n	8009b90 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2205      	movs	r2, #5
 8009b54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b56:	e01b      	b.n	8009b90 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f003 fed9 	bl	800d910 <tcp_send_fin>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d114      	bne.n	8009b94 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2205      	movs	r2, #5
 8009b6e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b70:	e010      	b.n	8009b94 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f003 fecc 	bl	800d910 <tcp_send_fin>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d109      	bne.n	8009b98 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2209      	movs	r2, #9
 8009b88:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009b8a:	e005      	b.n	8009b98 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e01c      	b.n	8009bca <tcp_close_shutdown_fin+0xbe>
      break;
 8009b90:	bf00      	nop
 8009b92:	e002      	b.n	8009b9a <tcp_close_shutdown_fin+0x8e>
      break;
 8009b94:	bf00      	nop
 8009b96:	e000      	b.n	8009b9a <tcp_close_shutdown_fin+0x8e>
      break;
 8009b98:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d103      	bne.n	8009baa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f003 fff2 	bl	800db8c <tcp_output>
 8009ba8:	e00d      	b.n	8009bc6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb2:	d108      	bne.n	8009bc6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8b5b      	ldrh	r3, [r3, #26]
 8009bb8:	f043 0308 	orr.w	r3, r3, #8
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e001      	b.n	8009bca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8009bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	08015c5c 	.word	0x08015c5c
 8009bd8:	08015d0c 	.word	0x08015d0c
 8009bdc:	08015ca0 	.word	0x08015ca0

08009be0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d109      	bne.n	8009c02 <tcp_close+0x22>
 8009bee:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <tcp_close+0x4c>)
 8009bf0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009bf4:	490e      	ldr	r1, [pc, #56]	; (8009c30 <tcp_close+0x50>)
 8009bf6:	480f      	ldr	r0, [pc, #60]	; (8009c34 <tcp_close+0x54>)
 8009bf8:	f00a fb82 	bl	8014300 <iprintf>
 8009bfc:	f06f 030f 	mvn.w	r3, #15
 8009c00:	e00f      	b.n	8009c22 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	7d1b      	ldrb	r3, [r3, #20]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d006      	beq.n	8009c18 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	8b5b      	ldrh	r3, [r3, #26]
 8009c0e:	f043 0310 	orr.w	r3, r3, #16
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009c18:	2101      	movs	r1, #1
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f7ff fe94 	bl	8009948 <tcp_close_shutdown>
 8009c20:	4603      	mov	r3, r0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	08015c5c 	.word	0x08015c5c
 8009c30:	08015d6c 	.word	0x08015d6c
 8009c34:	08015ca0 	.word	0x08015ca0

08009c38 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08e      	sub	sp, #56	; 0x38
 8009c3c:	af04      	add	r7, sp, #16
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d107      	bne.n	8009c58 <tcp_abandon+0x20>
 8009c48:	4b52      	ldr	r3, [pc, #328]	; (8009d94 <tcp_abandon+0x15c>)
 8009c4a:	f240 223d 	movw	r2, #573	; 0x23d
 8009c4e:	4952      	ldr	r1, [pc, #328]	; (8009d98 <tcp_abandon+0x160>)
 8009c50:	4852      	ldr	r0, [pc, #328]	; (8009d9c <tcp_abandon+0x164>)
 8009c52:	f00a fb55 	bl	8014300 <iprintf>
 8009c56:	e099      	b.n	8009d8c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7d1b      	ldrb	r3, [r3, #20]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d106      	bne.n	8009c6e <tcp_abandon+0x36>
 8009c60:	4b4c      	ldr	r3, [pc, #304]	; (8009d94 <tcp_abandon+0x15c>)
 8009c62:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009c66:	494e      	ldr	r1, [pc, #312]	; (8009da0 <tcp_abandon+0x168>)
 8009c68:	484c      	ldr	r0, [pc, #304]	; (8009d9c <tcp_abandon+0x164>)
 8009c6a:	f00a fb49 	bl	8014300 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7d1b      	ldrb	r3, [r3, #20]
 8009c72:	2b0a      	cmp	r3, #10
 8009c74:	d107      	bne.n	8009c86 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	484a      	ldr	r0, [pc, #296]	; (8009da4 <tcp_abandon+0x16c>)
 8009c7a:	f000 ffc3 	bl	800ac04 <tcp_pcb_remove>
    tcp_free(pcb);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff fdb0 	bl	80097e4 <tcp_free>
 8009c84:	e082      	b.n	8009d8c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c92:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ca0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	7d1b      	ldrb	r3, [r3, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d126      	bne.n	8009cfe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	8adb      	ldrh	r3, [r3, #22]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d02e      	beq.n	8009d16 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009cb8:	4b3b      	ldr	r3, [pc, #236]	; (8009da8 <tcp_abandon+0x170>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d105      	bne.n	8009cce <tcp_abandon+0x96>
 8009cc2:	4b39      	ldr	r3, [pc, #228]	; (8009da8 <tcp_abandon+0x170>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	4a37      	ldr	r2, [pc, #220]	; (8009da8 <tcp_abandon+0x170>)
 8009cca:	6013      	str	r3, [r2, #0]
 8009ccc:	e013      	b.n	8009cf6 <tcp_abandon+0xbe>
 8009cce:	4b36      	ldr	r3, [pc, #216]	; (8009da8 <tcp_abandon+0x170>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	61fb      	str	r3, [r7, #28]
 8009cd4:	e00c      	b.n	8009cf0 <tcp_abandon+0xb8>
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d104      	bne.n	8009cea <tcp_abandon+0xb2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	68da      	ldr	r2, [r3, #12]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	60da      	str	r2, [r3, #12]
 8009ce8:	e005      	b.n	8009cf6 <tcp_abandon+0xbe>
 8009cea:	69fb      	ldr	r3, [r7, #28]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	61fb      	str	r3, [r7, #28]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1ef      	bne.n	8009cd6 <tcp_abandon+0x9e>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	e00b      	b.n	8009d16 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	8adb      	ldrh	r3, [r3, #22]
 8009d06:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	4828      	ldr	r0, [pc, #160]	; (8009dac <tcp_abandon+0x174>)
 8009d0c:	f000 ff7a 	bl	800ac04 <tcp_pcb_remove>
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <tcp_abandon+0x178>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fd1c 	bl	800a760 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d004      	beq.n	8009d3a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fd13 	bl	800a760 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d004      	beq.n	8009d4c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fd0a 	bl	800a760 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00e      	beq.n	8009d70 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3304      	adds	r3, #4
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	8b12      	ldrh	r2, [r2, #24]
 8009d5c:	9202      	str	r2, [sp, #8]
 8009d5e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009d60:	9201      	str	r2, [sp, #4]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	460b      	mov	r3, r1
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	69b9      	ldr	r1, [r7, #24]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f004 fcc2 	bl	800e6f4 <tcp_rst>
    }
    last_state = pcb->state;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7d1b      	ldrb	r3, [r3, #20]
 8009d74:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7ff fd34 	bl	80097e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <tcp_abandon+0x154>
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f06f 010c 	mvn.w	r1, #12
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	4798      	blx	r3
  }
}
 8009d8c:	3728      	adds	r7, #40	; 0x28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	08015c5c 	.word	0x08015c5c
 8009d98:	08015da0 	.word	0x08015da0
 8009d9c:	08015ca0 	.word	0x08015ca0
 8009da0:	08015dbc 	.word	0x08015dbc
 8009da4:	2000c500 	.word	0x2000c500
 8009da8:	2000c4f4 	.word	0x2000c4f4
 8009dac:	2000c4fc 	.word	0x2000c4fc
 8009db0:	2000c504 	.word	0x2000c504

08009db4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009dbc:	2101      	movs	r1, #1
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff ff3a 	bl	8009c38 <tcp_abandon>
}
 8009dc4:	bf00      	nop
 8009dc6:	3708      	adds	r7, #8
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d106      	bne.n	8009de8 <tcp_update_rcv_ann_wnd+0x1c>
 8009dda:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <tcp_update_rcv_ann_wnd+0xa4>)
 8009ddc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009de0:	4924      	ldr	r1, [pc, #144]	; (8009e74 <tcp_update_rcv_ann_wnd+0xa8>)
 8009de2:	4825      	ldr	r0, [pc, #148]	; (8009e78 <tcp_update_rcv_ann_wnd+0xac>)
 8009de4:	f00a fa8c 	bl	8014300 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009df0:	4413      	add	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009dfc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009e00:	bf28      	it	cs
 8009e02:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8009e06:	b292      	uxth	r2, r2
 8009e08:	4413      	add	r3, r2
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	db08      	blt.n	8009e24 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1e:	68fa      	ldr	r2, [r7, #12]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	e020      	b.n	8009e66 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	dd03      	ble.n	8009e3a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e38:	e014      	b.n	8009e64 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4c:	d306      	bcc.n	8009e5c <tcp_update_rcv_ann_wnd+0x90>
 8009e4e:	4b08      	ldr	r3, [pc, #32]	; (8009e70 <tcp_update_rcv_ann_wnd+0xa4>)
 8009e50:	f240 32b6 	movw	r2, #950	; 0x3b6
 8009e54:	4909      	ldr	r1, [pc, #36]	; (8009e7c <tcp_update_rcv_ann_wnd+0xb0>)
 8009e56:	4808      	ldr	r0, [pc, #32]	; (8009e78 <tcp_update_rcv_ann_wnd+0xac>)
 8009e58:	f00a fa52 	bl	8014300 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8009e64:	2300      	movs	r3, #0
  }
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	08015c5c 	.word	0x08015c5c
 8009e74:	08015eb8 	.word	0x08015eb8
 8009e78:	08015ca0 	.word	0x08015ca0
 8009e7c:	08015edc 	.word	0x08015edc

08009e80 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d107      	bne.n	8009ea2 <tcp_recved+0x22>
 8009e92:	4b1f      	ldr	r3, [pc, #124]	; (8009f10 <tcp_recved+0x90>)
 8009e94:	f240 32cf 	movw	r2, #975	; 0x3cf
 8009e98:	491e      	ldr	r1, [pc, #120]	; (8009f14 <tcp_recved+0x94>)
 8009e9a:	481f      	ldr	r0, [pc, #124]	; (8009f18 <tcp_recved+0x98>)
 8009e9c:	f00a fa30 	bl	8014300 <iprintf>
 8009ea0:	e032      	b.n	8009f08 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	7d1b      	ldrb	r3, [r3, #20]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d106      	bne.n	8009eb8 <tcp_recved+0x38>
 8009eaa:	4b19      	ldr	r3, [pc, #100]	; (8009f10 <tcp_recved+0x90>)
 8009eac:	f240 32d2 	movw	r2, #978	; 0x3d2
 8009eb0:	491a      	ldr	r1, [pc, #104]	; (8009f1c <tcp_recved+0x9c>)
 8009eb2:	4819      	ldr	r0, [pc, #100]	; (8009f18 <tcp_recved+0x98>)
 8009eb4:	f00a fa24 	bl	8014300 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009ebc:	887b      	ldrh	r3, [r7, #2]
 8009ebe:	4413      	add	r3, r2
 8009ec0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009ec2:	89fb      	ldrh	r3, [r7, #14]
 8009ec4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009ec8:	d804      	bhi.n	8009ed4 <tcp_recved+0x54>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ece:	89fa      	ldrh	r2, [r7, #14]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d204      	bcs.n	8009ede <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009eda:	851a      	strh	r2, [r3, #40]	; 0x28
 8009edc:	e002      	b.n	8009ee4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	89fa      	ldrh	r2, [r7, #14]
 8009ee2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7ff ff71 	bl	8009dcc <tcp_update_rcv_ann_wnd>
 8009eea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009ef2:	d309      	bcc.n	8009f08 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	8b5b      	ldrh	r3, [r3, #26]
 8009ef8:	f043 0302 	orr.w	r3, r3, #2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f003 fe42 	bl	800db8c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	08015c5c 	.word	0x08015c5c
 8009f14:	08015ef8 	.word	0x08015ef8
 8009f18:	08015ca0 	.word	0x08015ca0
 8009f1c:	08015f10 	.word	0x08015f10

08009f20 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009f20:	b5b0      	push	{r4, r5, r7, lr}
 8009f22:	b090      	sub	sp, #64	; 0x40
 8009f24:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009f26:	2300      	movs	r3, #0
 8009f28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8009f2c:	4b94      	ldr	r3, [pc, #592]	; (800a180 <tcp_slowtmr+0x260>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	4a93      	ldr	r2, [pc, #588]	; (800a180 <tcp_slowtmr+0x260>)
 8009f34:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009f36:	4b93      	ldr	r3, [pc, #588]	; (800a184 <tcp_slowtmr+0x264>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	b2da      	uxtb	r2, r3
 8009f3e:	4b91      	ldr	r3, [pc, #580]	; (800a184 <tcp_slowtmr+0x264>)
 8009f40:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8009f46:	4b90      	ldr	r3, [pc, #576]	; (800a188 <tcp_slowtmr+0x268>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8009f4c:	e29f      	b.n	800a48e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	7d1b      	ldrb	r3, [r3, #20]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d106      	bne.n	8009f64 <tcp_slowtmr+0x44>
 8009f56:	4b8d      	ldr	r3, [pc, #564]	; (800a18c <tcp_slowtmr+0x26c>)
 8009f58:	f240 42be 	movw	r2, #1214	; 0x4be
 8009f5c:	498c      	ldr	r1, [pc, #560]	; (800a190 <tcp_slowtmr+0x270>)
 8009f5e:	488d      	ldr	r0, [pc, #564]	; (800a194 <tcp_slowtmr+0x274>)
 8009f60:	f00a f9ce 	bl	8014300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f66:	7d1b      	ldrb	r3, [r3, #20]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d106      	bne.n	8009f7a <tcp_slowtmr+0x5a>
 8009f6c:	4b87      	ldr	r3, [pc, #540]	; (800a18c <tcp_slowtmr+0x26c>)
 8009f6e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009f72:	4989      	ldr	r1, [pc, #548]	; (800a198 <tcp_slowtmr+0x278>)
 8009f74:	4887      	ldr	r0, [pc, #540]	; (800a194 <tcp_slowtmr+0x274>)
 8009f76:	f00a f9c3 	bl	8014300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7c:	7d1b      	ldrb	r3, [r3, #20]
 8009f7e:	2b0a      	cmp	r3, #10
 8009f80:	d106      	bne.n	8009f90 <tcp_slowtmr+0x70>
 8009f82:	4b82      	ldr	r3, [pc, #520]	; (800a18c <tcp_slowtmr+0x26c>)
 8009f84:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009f88:	4984      	ldr	r1, [pc, #528]	; (800a19c <tcp_slowtmr+0x27c>)
 8009f8a:	4882      	ldr	r0, [pc, #520]	; (800a194 <tcp_slowtmr+0x274>)
 8009f8c:	f00a f9b8 	bl	8014300 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f92:	7f9a      	ldrb	r2, [r3, #30]
 8009f94:	4b7b      	ldr	r3, [pc, #492]	; (800a184 <tcp_slowtmr+0x264>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d105      	bne.n	8009fa8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009fa6:	e272      	b.n	800a48e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009fa8:	4b76      	ldr	r3, [pc, #472]	; (800a184 <tcp_slowtmr+0x264>)
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	7d1b      	ldrb	r3, [r3, #20]
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d10a      	bne.n	8009fda <tcp_slowtmr+0xba>
 8009fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	d905      	bls.n	8009fda <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009fce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fd8:	e11e      	b.n	800a218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fe0:	2b0b      	cmp	r3, #11
 8009fe2:	d905      	bls.n	8009ff0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe8:	3301      	adds	r3, #1
 8009fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009fee:	e113      	b.n	800a218 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d075      	beq.n	800a0e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d006      	beq.n	800a010 <tcp_slowtmr+0xf0>
 800a002:	4b62      	ldr	r3, [pc, #392]	; (800a18c <tcp_slowtmr+0x26c>)
 800a004:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a008:	4965      	ldr	r1, [pc, #404]	; (800a1a0 <tcp_slowtmr+0x280>)
 800a00a:	4862      	ldr	r0, [pc, #392]	; (800a194 <tcp_slowtmr+0x274>)
 800a00c:	f00a f978 	bl	8014300 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d106      	bne.n	800a026 <tcp_slowtmr+0x106>
 800a018:	4b5c      	ldr	r3, [pc, #368]	; (800a18c <tcp_slowtmr+0x26c>)
 800a01a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a01e:	4961      	ldr	r1, [pc, #388]	; (800a1a4 <tcp_slowtmr+0x284>)
 800a020:	485c      	ldr	r0, [pc, #368]	; (800a194 <tcp_slowtmr+0x274>)
 800a022:	f00a f96d 	bl	8014300 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a028:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a02c:	2b0b      	cmp	r3, #11
 800a02e:	d905      	bls.n	800a03c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a034:	3301      	adds	r3, #1
 800a036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a03a:	e0ed      	b.n	800a218 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a042:	3b01      	subs	r3, #1
 800a044:	4a58      	ldr	r2, [pc, #352]	; (800a1a8 <tcp_slowtmr+0x288>)
 800a046:	5cd3      	ldrb	r3, [r2, r3]
 800a048:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a050:	7c7a      	ldrb	r2, [r7, #17]
 800a052:	429a      	cmp	r2, r3
 800a054:	d907      	bls.n	800a066 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a058:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a05c:	3301      	adds	r3, #1
 800a05e:	b2da      	uxtb	r2, r3
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a068:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a06c:	7c7a      	ldrb	r2, [r7, #17]
 800a06e:	429a      	cmp	r2, r3
 800a070:	f200 80d2 	bhi.w	800a218 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a074:	2301      	movs	r3, #1
 800a076:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d108      	bne.n	800a094 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a084:	f004 fc2a 	bl	800e8dc <tcp_zero_window_probe>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d014      	beq.n	800a0b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a08e:	2300      	movs	r3, #0
 800a090:	623b      	str	r3, [r7, #32]
 800a092:	e011      	b.n	800a0b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a09a:	4619      	mov	r1, r3
 800a09c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a09e:	f003 faef 	bl	800d680 <tcp_split_unsent_seg>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d107      	bne.n	800a0b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a0a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0aa:	f003 fd6f 	bl	800db8c <tcp_output>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f000 80ac 	beq.w	800a218 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0ce:	2b06      	cmp	r3, #6
 800a0d0:	f200 80a2 	bhi.w	800a218 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a0da:	3301      	adds	r3, #1
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a0e4:	e098      	b.n	800a218 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	db0f      	blt.n	800a110 <tcp_slowtmr+0x1f0>
 800a0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d008      	beq.n	800a110 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a104:	b29b      	uxth	r3, r3
 800a106:	3301      	adds	r3, #1
 800a108:	b29b      	uxth	r3, r3
 800a10a:	b21a      	sxth	r2, r3
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a112:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a11c:	429a      	cmp	r2, r3
 800a11e:	db7b      	blt.n	800a218 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a122:	f004 f827 	bl	800e174 <tcp_rexmit_rto_prepare>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d007      	beq.n	800a13c <tcp_slowtmr+0x21c>
 800a12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	2b00      	cmp	r3, #0
 800a132:	d171      	bne.n	800a218 <tcp_slowtmr+0x2f8>
 800a134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d06d      	beq.n	800a218 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	7d1b      	ldrb	r3, [r3, #20]
 800a140:	2b02      	cmp	r3, #2
 800a142:	d03a      	beq.n	800a1ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a14a:	2b0c      	cmp	r3, #12
 800a14c:	bf28      	it	cs
 800a14e:	230c      	movcs	r3, #12
 800a150:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a158:	10db      	asrs	r3, r3, #3
 800a15a:	b21b      	sxth	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a164:	4413      	add	r3, r2
 800a166:	7efa      	ldrb	r2, [r7, #27]
 800a168:	4910      	ldr	r1, [pc, #64]	; (800a1ac <tcp_slowtmr+0x28c>)
 800a16a:	5c8a      	ldrb	r2, [r1, r2]
 800a16c:	4093      	lsls	r3, r2
 800a16e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800a176:	4293      	cmp	r3, r2
 800a178:	dc1a      	bgt.n	800a1b0 <tcp_slowtmr+0x290>
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	b21a      	sxth	r2, r3
 800a17e:	e019      	b.n	800a1b4 <tcp_slowtmr+0x294>
 800a180:	2000c4f0 	.word	0x2000c4f0
 800a184:	2000c506 	.word	0x2000c506
 800a188:	2000c4fc 	.word	0x2000c4fc
 800a18c:	08015c5c 	.word	0x08015c5c
 800a190:	08015fa0 	.word	0x08015fa0
 800a194:	08015ca0 	.word	0x08015ca0
 800a198:	08015fcc 	.word	0x08015fcc
 800a19c:	08015ff8 	.word	0x08015ff8
 800a1a0:	08016028 	.word	0x08016028
 800a1a4:	0801605c 	.word	0x0801605c
 800a1a8:	08018014 	.word	0x08018014
 800a1ac:	08018004 	.word	0x08018004
 800a1b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800a1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1bc:	2200      	movs	r2, #0
 800a1be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	bf28      	it	cs
 800a1d0:	4613      	movcs	r3, r2
 800a1d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a1d4:	8a7b      	ldrh	r3, [r7, #18]
 800a1d6:	085b      	lsrs	r3, r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d206      	bcs.n	800a200 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1f6:	005b      	lsls	r3, r3, #1
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800a20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800a212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a214:	f004 f81e 	bl	800e254 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21a:	7d1b      	ldrb	r3, [r3, #20]
 800a21c:	2b06      	cmp	r3, #6
 800a21e:	d111      	bne.n	800a244 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	8b5b      	ldrh	r3, [r3, #26]
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00b      	beq.n	800a244 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a22c:	4b9d      	ldr	r3, [pc, #628]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	6a1b      	ldr	r3, [r3, #32]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	2b28      	cmp	r3, #40	; 0x28
 800a238:	d904      	bls.n	800a244 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800a23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a23e:	3301      	adds	r3, #1
 800a240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	7a5b      	ldrb	r3, [r3, #9]
 800a248:	f003 0308 	and.w	r3, r3, #8
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d04c      	beq.n	800a2ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a254:	2b04      	cmp	r3, #4
 800a256:	d003      	beq.n	800a260 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a25c:	2b07      	cmp	r3, #7
 800a25e:	d144      	bne.n	800a2ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a260:	4b90      	ldr	r3, [pc, #576]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a270:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800a274:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800a278:	498b      	ldr	r1, [pc, #556]	; (800a4a8 <tcp_slowtmr+0x588>)
 800a27a:	fba1 1303 	umull	r1, r3, r1, r3
 800a27e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a280:	429a      	cmp	r2, r3
 800a282:	d90a      	bls.n	800a29a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800a284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a288:	3301      	adds	r3, #1
 800a28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800a28e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a292:	3301      	adds	r3, #1
 800a294:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a298:	e027      	b.n	800a2ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a29a:	4b82      	ldr	r3, [pc, #520]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	4b7e      	ldr	r3, [pc, #504]	; (800a4ac <tcp_slowtmr+0x58c>)
 800a2b4:	fb00 f303 	mul.w	r3, r0, r3
 800a2b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a2ba:	497b      	ldr	r1, [pc, #492]	; (800a4a8 <tcp_slowtmr+0x588>)
 800a2bc:	fba1 1303 	umull	r1, r3, r1, r3
 800a2c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d911      	bls.n	800a2ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800a2c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2c8:	f004 fac8 	bl	800e85c <tcp_keepalive>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800a2d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d107      	bne.n	800a2ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800a2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	b2da      	uxtb	r2, r3
 800a2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d011      	beq.n	800a316 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a2f2:	4b6c      	ldr	r3, [pc, #432]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	1ad2      	subs	r2, r2, r3
 800a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a302:	4619      	mov	r1, r3
 800a304:	460b      	mov	r3, r1
 800a306:	005b      	lsls	r3, r3, #1
 800a308:	440b      	add	r3, r1
 800a30a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d302      	bcc.n	800a316 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800a310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a312:	f000 fddb 	bl	800aecc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	7d1b      	ldrb	r3, [r3, #20]
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	d10b      	bne.n	800a336 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a31e:	4b61      	ldr	r3, [pc, #388]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	1ad3      	subs	r3, r2, r3
 800a328:	2b28      	cmp	r3, #40	; 0x28
 800a32a:	d904      	bls.n	800a336 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800a32c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a330:	3301      	adds	r3, #1
 800a332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800a336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a338:	7d1b      	ldrb	r3, [r3, #20]
 800a33a:	2b09      	cmp	r3, #9
 800a33c:	d10b      	bne.n	800a356 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a33e:	4b59      	ldr	r3, [pc, #356]	; (800a4a4 <tcp_slowtmr+0x584>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	6a1b      	ldr	r3, [r3, #32]
 800a346:	1ad3      	subs	r3, r2, r3
 800a348:	2bf0      	cmp	r3, #240	; 0xf0
 800a34a:	d904      	bls.n	800a356 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800a34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a350:	3301      	adds	r3, #1
 800a352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d060      	beq.n	800a420 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a364:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800a366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a368:	f000 fbfc 	bl	800ab64 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d010      	beq.n	800a394 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a372:	4b4f      	ldr	r3, [pc, #316]	; (800a4b0 <tcp_slowtmr+0x590>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a378:	429a      	cmp	r2, r3
 800a37a:	d106      	bne.n	800a38a <tcp_slowtmr+0x46a>
 800a37c:	4b4d      	ldr	r3, [pc, #308]	; (800a4b4 <tcp_slowtmr+0x594>)
 800a37e:	f240 526d 	movw	r2, #1389	; 0x56d
 800a382:	494d      	ldr	r1, [pc, #308]	; (800a4b8 <tcp_slowtmr+0x598>)
 800a384:	484d      	ldr	r0, [pc, #308]	; (800a4bc <tcp_slowtmr+0x59c>)
 800a386:	f009 ffbb 	bl	8014300 <iprintf>
        prev->next = pcb->next;
 800a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38c:	68da      	ldr	r2, [r3, #12]
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	e00f      	b.n	800a3b4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a394:	4b46      	ldr	r3, [pc, #280]	; (800a4b0 <tcp_slowtmr+0x590>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d006      	beq.n	800a3ac <tcp_slowtmr+0x48c>
 800a39e:	4b45      	ldr	r3, [pc, #276]	; (800a4b4 <tcp_slowtmr+0x594>)
 800a3a0:	f240 5271 	movw	r2, #1393	; 0x571
 800a3a4:	4946      	ldr	r1, [pc, #280]	; (800a4c0 <tcp_slowtmr+0x5a0>)
 800a3a6:	4845      	ldr	r0, [pc, #276]	; (800a4bc <tcp_slowtmr+0x59c>)
 800a3a8:	f009 ffaa 	bl	8014300 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	4a3f      	ldr	r2, [pc, #252]	; (800a4b0 <tcp_slowtmr+0x590>)
 800a3b2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800a3b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d013      	beq.n	800a3e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800a3c4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c8:	3304      	adds	r3, #4
 800a3ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3cc:	8ad2      	ldrh	r2, [r2, #22]
 800a3ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3d0:	8b09      	ldrh	r1, [r1, #24]
 800a3d2:	9102      	str	r1, [sp, #8]
 800a3d4:	9201      	str	r2, [sp, #4]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	462b      	mov	r3, r5
 800a3da:	4622      	mov	r2, r4
 800a3dc:	4601      	mov	r1, r0
 800a3de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3e0:	f004 f988 	bl	800e6f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	7d1b      	ldrb	r3, [r3, #20]
 800a3ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a3fa:	6838      	ldr	r0, [r7, #0]
 800a3fc:	f7ff f9f2 	bl	80097e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800a400:	4b30      	ldr	r3, [pc, #192]	; (800a4c4 <tcp_slowtmr+0x5a4>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <tcp_slowtmr+0x4f6>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f06f 010c 	mvn.w	r1, #12
 800a412:	68b8      	ldr	r0, [r7, #8]
 800a414:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a416:	4b2b      	ldr	r3, [pc, #172]	; (800a4c4 <tcp_slowtmr+0x5a4>)
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d037      	beq.n	800a48e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800a41e:	e590      	b.n	8009f42 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	7f1b      	ldrb	r3, [r3, #28]
 800a42e:	3301      	adds	r3, #1
 800a430:	b2da      	uxtb	r2, r3
 800a432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a434:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	7f1a      	ldrb	r2, [r3, #28]
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	7f5b      	ldrb	r3, [r3, #29]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d325      	bcc.n	800a48e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800a442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a444:	2200      	movs	r2, #0
 800a446:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800a448:	4b1e      	ldr	r3, [pc, #120]	; (800a4c4 <tcp_slowtmr+0x5a4>)
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <tcp_slowtmr+0x550>
 800a458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a460:	6912      	ldr	r2, [r2, #16]
 800a462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	4603      	mov	r3, r0
 800a46a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800a46e:	e002      	b.n	800a476 <tcp_slowtmr+0x556>
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800a476:	4b13      	ldr	r3, [pc, #76]	; (800a4c4 <tcp_slowtmr+0x5a4>)
 800a478:	781b      	ldrb	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d000      	beq.n	800a480 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800a47e:	e560      	b.n	8009f42 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a480:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800a484:	2b00      	cmp	r3, #0
 800a486:	d102      	bne.n	800a48e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800a488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a48a:	f003 fb7f 	bl	800db8c <tcp_output>
  while (pcb != NULL) {
 800a48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a490:	2b00      	cmp	r3, #0
 800a492:	f47f ad5c 	bne.w	8009f4e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a496:	2300      	movs	r3, #0
 800a498:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800a49a:	4b0b      	ldr	r3, [pc, #44]	; (800a4c8 <tcp_slowtmr+0x5a8>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a4a0:	e067      	b.n	800a572 <tcp_slowtmr+0x652>
 800a4a2:	bf00      	nop
 800a4a4:	2000c4f0 	.word	0x2000c4f0
 800a4a8:	10624dd3 	.word	0x10624dd3
 800a4ac:	000124f8 	.word	0x000124f8
 800a4b0:	2000c4fc 	.word	0x2000c4fc
 800a4b4:	08015c5c 	.word	0x08015c5c
 800a4b8:	08016094 	.word	0x08016094
 800a4bc:	08015ca0 	.word	0x08015ca0
 800a4c0:	080160c0 	.word	0x080160c0
 800a4c4:	2000c504 	.word	0x2000c504
 800a4c8:	2000c500 	.word	0x2000c500
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ce:	7d1b      	ldrb	r3, [r3, #20]
 800a4d0:	2b0a      	cmp	r3, #10
 800a4d2:	d006      	beq.n	800a4e2 <tcp_slowtmr+0x5c2>
 800a4d4:	4b2b      	ldr	r3, [pc, #172]	; (800a584 <tcp_slowtmr+0x664>)
 800a4d6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800a4da:	492b      	ldr	r1, [pc, #172]	; (800a588 <tcp_slowtmr+0x668>)
 800a4dc:	482b      	ldr	r0, [pc, #172]	; (800a58c <tcp_slowtmr+0x66c>)
 800a4de:	f009 ff0f 	bl	8014300 <iprintf>
    pcb_remove = 0;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a4e8:	4b29      	ldr	r3, [pc, #164]	; (800a590 <tcp_slowtmr+0x670>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2bf0      	cmp	r3, #240	; 0xf0
 800a4f4:	d904      	bls.n	800a500 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800a4f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a504:	2b00      	cmp	r3, #0
 800a506:	d02f      	beq.n	800a568 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a50a:	f000 fb2b 	bl	800ab64 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	2b00      	cmp	r3, #0
 800a512:	d010      	beq.n	800a536 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a514:	4b1f      	ldr	r3, [pc, #124]	; (800a594 <tcp_slowtmr+0x674>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d106      	bne.n	800a52c <tcp_slowtmr+0x60c>
 800a51e:	4b19      	ldr	r3, [pc, #100]	; (800a584 <tcp_slowtmr+0x664>)
 800a520:	f240 52af 	movw	r2, #1455	; 0x5af
 800a524:	491c      	ldr	r1, [pc, #112]	; (800a598 <tcp_slowtmr+0x678>)
 800a526:	4819      	ldr	r0, [pc, #100]	; (800a58c <tcp_slowtmr+0x66c>)
 800a528:	f009 feea 	bl	8014300 <iprintf>
        prev->next = pcb->next;
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	68da      	ldr	r2, [r3, #12]
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	60da      	str	r2, [r3, #12]
 800a534:	e00f      	b.n	800a556 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a536:	4b17      	ldr	r3, [pc, #92]	; (800a594 <tcp_slowtmr+0x674>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d006      	beq.n	800a54e <tcp_slowtmr+0x62e>
 800a540:	4b10      	ldr	r3, [pc, #64]	; (800a584 <tcp_slowtmr+0x664>)
 800a542:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800a546:	4915      	ldr	r1, [pc, #84]	; (800a59c <tcp_slowtmr+0x67c>)
 800a548:	4810      	ldr	r0, [pc, #64]	; (800a58c <tcp_slowtmr+0x66c>)
 800a54a:	f009 fed9 	bl	8014300 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	4a10      	ldr	r2, [pc, #64]	; (800a594 <tcp_slowtmr+0x674>)
 800a554:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800a560:	69f8      	ldr	r0, [r7, #28]
 800a562:	f7ff f93f 	bl	80097e4 <tcp_free>
 800a566:	e004      	b.n	800a572 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1a9      	bne.n	800a4cc <tcp_slowtmr+0x5ac>
    }
  }
}
 800a578:	bf00      	nop
 800a57a:	bf00      	nop
 800a57c:	3730      	adds	r7, #48	; 0x30
 800a57e:	46bd      	mov	sp, r7
 800a580:	bdb0      	pop	{r4, r5, r7, pc}
 800a582:	bf00      	nop
 800a584:	08015c5c 	.word	0x08015c5c
 800a588:	080160ec 	.word	0x080160ec
 800a58c:	08015ca0 	.word	0x08015ca0
 800a590:	2000c4f0 	.word	0x2000c4f0
 800a594:	2000c500 	.word	0x2000c500
 800a598:	0801611c 	.word	0x0801611c
 800a59c:	08016144 	.word	0x08016144

0800a5a0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a5a6:	4b2d      	ldr	r3, [pc, #180]	; (800a65c <tcp_fasttmr+0xbc>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	b2da      	uxtb	r2, r3
 800a5ae:	4b2b      	ldr	r3, [pc, #172]	; (800a65c <tcp_fasttmr+0xbc>)
 800a5b0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a5b2:	4b2b      	ldr	r3, [pc, #172]	; (800a660 <tcp_fasttmr+0xc0>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a5b8:	e048      	b.n	800a64c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	7f9a      	ldrb	r2, [r3, #30]
 800a5be:	4b27      	ldr	r3, [pc, #156]	; (800a65c <tcp_fasttmr+0xbc>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d03f      	beq.n	800a646 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a5c6:	4b25      	ldr	r3, [pc, #148]	; (800a65c <tcp_fasttmr+0xbc>)
 800a5c8:	781a      	ldrb	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	8b5b      	ldrh	r3, [r3, #26]
 800a5d2:	f003 0301 	and.w	r3, r3, #1
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	8b5b      	ldrh	r3, [r3, #26]
 800a5de:	f043 0302 	orr.w	r3, r3, #2
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f003 facf 	bl	800db8c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	8b5b      	ldrh	r3, [r3, #26]
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	8b5b      	ldrh	r3, [r3, #26]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d009      	beq.n	800a61c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	8b5b      	ldrh	r3, [r3, #26]
 800a60c:	f023 0308 	bic.w	r3, r3, #8
 800a610:	b29a      	uxth	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff fa78 	bl	8009b0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00a      	beq.n	800a640 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a62a:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <tcp_fasttmr+0xc4>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f819 	bl	800a668 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a636:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <tcp_fasttmr+0xc4>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d000      	beq.n	800a640 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a63e:	e7b8      	b.n	800a5b2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	e002      	b.n	800a64c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1b3      	bne.n	800a5ba <tcp_fasttmr+0x1a>
    }
  }
}
 800a652:	bf00      	nop
 800a654:	bf00      	nop
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	2000c506 	.word	0x2000c506
 800a660:	2000c4fc 	.word	0x2000c4fc
 800a664:	2000c504 	.word	0x2000c504

0800a668 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a668:	b590      	push	{r4, r7, lr}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d109      	bne.n	800a68a <tcp_process_refused_data+0x22>
 800a676:	4b37      	ldr	r3, [pc, #220]	; (800a754 <tcp_process_refused_data+0xec>)
 800a678:	f240 6209 	movw	r2, #1545	; 0x609
 800a67c:	4936      	ldr	r1, [pc, #216]	; (800a758 <tcp_process_refused_data+0xf0>)
 800a67e:	4837      	ldr	r0, [pc, #220]	; (800a75c <tcp_process_refused_data+0xf4>)
 800a680:	f009 fe3e 	bl	8014300 <iprintf>
 800a684:	f06f 030f 	mvn.w	r3, #15
 800a688:	e060      	b.n	800a74c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a68e:	7b5b      	ldrb	r3, [r3, #13]
 800a690:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a696:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <tcp_process_refused_data+0x58>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6918      	ldr	r0, [r3, #16]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	47a0      	blx	r4
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
 800a6be:	e007      	b.n	800a6d0 <tcp_process_refused_data+0x68>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	6879      	ldr	r1, [r7, #4]
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	f000 f8a4 	bl	800a814 <tcp_recv_null>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d12a      	bne.n	800a72e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a6d8:	7bbb      	ldrb	r3, [r7, #14]
 800a6da:	f003 0320 	and.w	r3, r3, #32
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d033      	beq.n	800a74a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a6ea:	d005      	beq.n	800a6f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <tcp_process_refused_data+0xb2>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6918      	ldr	r0, [r3, #16]
 800a70c:	2300      	movs	r3, #0
 800a70e:	2200      	movs	r2, #0
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	47a0      	blx	r4
 800a714:	4603      	mov	r3, r0
 800a716:	73fb      	strb	r3, [r7, #15]
 800a718:	e001      	b.n	800a71e <tcp_process_refused_data+0xb6>
 800a71a:	2300      	movs	r3, #0
 800a71c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a71e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a722:	f113 0f0d 	cmn.w	r3, #13
 800a726:	d110      	bne.n	800a74a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a728:	f06f 030c 	mvn.w	r3, #12
 800a72c:	e00e      	b.n	800a74c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a732:	f113 0f0d 	cmn.w	r3, #13
 800a736:	d102      	bne.n	800a73e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a738:	f06f 030c 	mvn.w	r3, #12
 800a73c:	e006      	b.n	800a74c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a744:	f06f 0304 	mvn.w	r3, #4
 800a748:	e000      	b.n	800a74c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	bd90      	pop	{r4, r7, pc}
 800a754:	08015c5c 	.word	0x08015c5c
 800a758:	0801616c 	.word	0x0801616c
 800a75c:	08015ca0 	.word	0x08015ca0

0800a760 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b084      	sub	sp, #16
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a768:	e007      	b.n	800a77a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f80a 	bl	800a78a <tcp_seg_free>
    seg = next;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1f4      	bne.n	800a76a <tcp_segs_free+0xa>
  }
}
 800a780:	bf00      	nop
 800a782:	bf00      	nop
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d004      	beq.n	800a7aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fd61 	bl	800926c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	2003      	movs	r0, #3
 800a7ae:	f7fd fead 	bl	800850c <memp_free>
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <tcp_seg_copy+0x1c>
 800a7ca:	4b0f      	ldr	r3, [pc, #60]	; (800a808 <tcp_seg_copy+0x4c>)
 800a7cc:	f240 6282 	movw	r2, #1666	; 0x682
 800a7d0:	490e      	ldr	r1, [pc, #56]	; (800a80c <tcp_seg_copy+0x50>)
 800a7d2:	480f      	ldr	r0, [pc, #60]	; (800a810 <tcp_seg_copy+0x54>)
 800a7d4:	f009 fd94 	bl	8014300 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a7d8:	2003      	movs	r0, #3
 800a7da:	f7fd fe21 	bl	8008420 <memp_malloc>
 800a7de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <tcp_seg_copy+0x2e>
    return NULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e00a      	b.n	800a800 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a7ea:	2210      	movs	r2, #16
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f009 fec7 	bl	8014582 <memcpy>
  pbuf_ref(cseg->p);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7fe fddd 	bl	80093b8 <pbuf_ref>
  return cseg;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08015c5c 	.word	0x08015c5c
 800a80c:	080161b0 	.word	0x080161b0
 800a810:	08015ca0 	.word	0x08015ca0

0800a814 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	607a      	str	r2, [r7, #4]
 800a820:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d109      	bne.n	800a83c <tcp_recv_null+0x28>
 800a828:	4b12      	ldr	r3, [pc, #72]	; (800a874 <tcp_recv_null+0x60>)
 800a82a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a82e:	4912      	ldr	r1, [pc, #72]	; (800a878 <tcp_recv_null+0x64>)
 800a830:	4812      	ldr	r0, [pc, #72]	; (800a87c <tcp_recv_null+0x68>)
 800a832:	f009 fd65 	bl	8014300 <iprintf>
 800a836:	f06f 030f 	mvn.w	r3, #15
 800a83a:	e016      	b.n	800a86a <tcp_recv_null+0x56>

  if (p != NULL) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d009      	beq.n	800a856 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	891b      	ldrh	r3, [r3, #8]
 800a846:	4619      	mov	r1, r3
 800a848:	68b8      	ldr	r0, [r7, #8]
 800a84a:	f7ff fb19 	bl	8009e80 <tcp_recved>
    pbuf_free(p);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7fe fd0c 	bl	800926c <pbuf_free>
 800a854:	e008      	b.n	800a868 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d104      	bne.n	800a868 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a85e:	68b8      	ldr	r0, [r7, #8]
 800a860:	f7ff f9be 	bl	8009be0 <tcp_close>
 800a864:	4603      	mov	r3, r0
 800a866:	e000      	b.n	800a86a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	08015c5c 	.word	0x08015c5c
 800a878:	080161cc 	.word	0x080161cc
 800a87c:	08015ca0 	.word	0x08015ca0

0800a880 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a88a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	db01      	blt.n	800a896 <tcp_kill_prio+0x16>
 800a892:	79fb      	ldrb	r3, [r7, #7]
 800a894:	e000      	b.n	800a898 <tcp_kill_prio+0x18>
 800a896:	237f      	movs	r3, #127	; 0x7f
 800a898:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d034      	beq.n	800a90a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8ae:	4b19      	ldr	r3, [pc, #100]	; (800a914 <tcp_kill_prio+0x94>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	e01f      	b.n	800a8f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	7d5b      	ldrb	r3, [r3, #21]
 800a8ba:	7afa      	ldrb	r2, [r7, #11]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d80c      	bhi.n	800a8da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a8c4:	7afa      	ldrb	r2, [r7, #11]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d112      	bne.n	800a8f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <tcp_kill_prio+0x98>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d80a      	bhi.n	800a8f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <tcp_kill_prio+0x98>)
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	7d5b      	ldrb	r3, [r3, #21]
 800a8ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d1dc      	bne.n	800a8b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d004      	beq.n	800a90c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a902:	6938      	ldr	r0, [r7, #16]
 800a904:	f7ff fa56 	bl	8009db4 <tcp_abort>
 800a908:	e000      	b.n	800a90c <tcp_kill_prio+0x8c>
    return;
 800a90a:	bf00      	nop
  }
}
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	2000c4fc 	.word	0x2000c4fc
 800a918:	2000c4f0 	.word	0x2000c4f0

0800a91c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	4603      	mov	r3, r0
 800a924:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	2b08      	cmp	r3, #8
 800a92a:	d009      	beq.n	800a940 <tcp_kill_state+0x24>
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	2b09      	cmp	r3, #9
 800a930:	d006      	beq.n	800a940 <tcp_kill_state+0x24>
 800a932:	4b1a      	ldr	r3, [pc, #104]	; (800a99c <tcp_kill_state+0x80>)
 800a934:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a938:	4919      	ldr	r1, [pc, #100]	; (800a9a0 <tcp_kill_state+0x84>)
 800a93a:	481a      	ldr	r0, [pc, #104]	; (800a9a4 <tcp_kill_state+0x88>)
 800a93c:	f009 fce0 	bl	8014300 <iprintf>

  inactivity = 0;
 800a940:	2300      	movs	r3, #0
 800a942:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a944:	2300      	movs	r3, #0
 800a946:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a948:	4b17      	ldr	r3, [pc, #92]	; (800a9a8 <tcp_kill_state+0x8c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	617b      	str	r3, [r7, #20]
 800a94e:	e017      	b.n	800a980 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	7d1b      	ldrb	r3, [r3, #20]
 800a954:	79fa      	ldrb	r2, [r7, #7]
 800a956:	429a      	cmp	r2, r3
 800a958:	d10f      	bne.n	800a97a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a95a:	4b14      	ldr	r3, [pc, #80]	; (800a9ac <tcp_kill_state+0x90>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	429a      	cmp	r2, r3
 800a968:	d807      	bhi.n	800a97a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a96a:	4b10      	ldr	r3, [pc, #64]	; (800a9ac <tcp_kill_state+0x90>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	617b      	str	r3, [r7, #20]
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e4      	bne.n	800a950 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a98c:	2100      	movs	r1, #0
 800a98e:	6938      	ldr	r0, [r7, #16]
 800a990:	f7ff f952 	bl	8009c38 <tcp_abandon>
  }
}
 800a994:	bf00      	nop
 800a996:	3718      	adds	r7, #24
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}
 800a99c:	08015c5c 	.word	0x08015c5c
 800a9a0:	080161e8 	.word	0x080161e8
 800a9a4:	08015ca0 	.word	0x08015ca0
 800a9a8:	2000c4fc 	.word	0x2000c4fc
 800a9ac:	2000c4f0 	.word	0x2000c4f0

0800a9b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9be:	4b12      	ldr	r3, [pc, #72]	; (800aa08 <tcp_kill_timewait+0x58>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	e012      	b.n	800a9ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a9c6:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <tcp_kill_timewait+0x5c>)
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	1ad3      	subs	r3, r2, r3
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d807      	bhi.n	800a9e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a9d6:	4b0d      	ldr	r3, [pc, #52]	; (800aa0c <tcp_kill_timewait+0x5c>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e9      	bne.n	800a9c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a9f8:	68b8      	ldr	r0, [r7, #8]
 800a9fa:	f7ff f9db 	bl	8009db4 <tcp_abort>
  }
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	2000c500 	.word	0x2000c500
 800aa0c:	2000c4f0 	.word	0x2000c4f0

0800aa10 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <tcp_handle_closepend+0x48>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800aa1c:	e014      	b.n	800aa48 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	8b5b      	ldrh	r3, [r3, #26]
 800aa28:	f003 0308 	and.w	r3, r3, #8
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d009      	beq.n	800aa44 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	8b5b      	ldrh	r3, [r3, #26]
 800aa34:	f023 0308 	bic.w	r3, r3, #8
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f7ff f864 	bl	8009b0c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e7      	bne.n	800aa1e <tcp_handle_closepend+0xe>
  }
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	2000c4fc 	.word	0x2000c4fc

0800aa5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	4603      	mov	r3, r0
 800aa64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa66:	2001      	movs	r0, #1
 800aa68:	f7fd fcda 	bl	8008420 <memp_malloc>
 800aa6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d126      	bne.n	800aac2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800aa74:	f7ff ffcc 	bl	800aa10 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aa78:	f7ff ff9a 	bl	800a9b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa7c:	2001      	movs	r0, #1
 800aa7e:	f7fd fccf 	bl	8008420 <memp_malloc>
 800aa82:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d11b      	bne.n	800aac2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800aa8a:	2009      	movs	r0, #9
 800aa8c:	f7ff ff46 	bl	800a91c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa90:	2001      	movs	r0, #1
 800aa92:	f7fd fcc5 	bl	8008420 <memp_malloc>
 800aa96:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d111      	bne.n	800aac2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aa9e:	2008      	movs	r0, #8
 800aaa0:	f7ff ff3c 	bl	800a91c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aaa4:	2001      	movs	r0, #1
 800aaa6:	f7fd fcbb 	bl	8008420 <memp_malloc>
 800aaaa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d107      	bne.n	800aac2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aab2:	79fb      	ldrb	r3, [r7, #7]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7ff fee3 	bl	800a880 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aaba:	2001      	movs	r0, #1
 800aabc:	f7fd fcb0 	bl	8008420 <memp_malloc>
 800aac0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d03f      	beq.n	800ab48 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aac8:	229c      	movs	r2, #156	; 0x9c
 800aaca:	2100      	movs	r1, #0
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	f009 fc7c 	bl	80143ca <memset>
    pcb->prio = prio;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	79fa      	ldrb	r2, [r7, #7]
 800aad6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aade:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800aae8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	22ff      	movs	r2, #255	; 0xff
 800aaf6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800aafe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2206      	movs	r2, #6
 800ab04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2206      	movs	r2, #6
 800ab0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab14:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2201      	movs	r2, #1
 800ab1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	; (800ab54 <tcp_alloc+0xf8>)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ab26:	4b0c      	ldr	r3, [pc, #48]	; (800ab58 <tcp_alloc+0xfc>)
 800ab28:	781a      	ldrb	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ab34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4a08      	ldr	r2, [pc, #32]	; (800ab5c <tcp_alloc+0x100>)
 800ab3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4a07      	ldr	r2, [pc, #28]	; (800ab60 <tcp_alloc+0x104>)
 800ab44:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ab48:	68fb      	ldr	r3, [r7, #12]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	2000c4f0 	.word	0x2000c4f0
 800ab58:	2000c506 	.word	0x2000c506
 800ab5c:	0800a815 	.word	0x0800a815
 800ab60:	006ddd00 	.word	0x006ddd00

0800ab64 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d107      	bne.n	800ab82 <tcp_pcb_purge+0x1e>
 800ab72:	4b21      	ldr	r3, [pc, #132]	; (800abf8 <tcp_pcb_purge+0x94>)
 800ab74:	f640 0251 	movw	r2, #2129	; 0x851
 800ab78:	4920      	ldr	r1, [pc, #128]	; (800abfc <tcp_pcb_purge+0x98>)
 800ab7a:	4821      	ldr	r0, [pc, #132]	; (800ac00 <tcp_pcb_purge+0x9c>)
 800ab7c:	f009 fbc0 	bl	8014300 <iprintf>
 800ab80:	e037      	b.n	800abf2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	7d1b      	ldrb	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d033      	beq.n	800abf2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ab8e:	2b0a      	cmp	r3, #10
 800ab90:	d02f      	beq.n	800abf2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d02b      	beq.n	800abf2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d007      	beq.n	800abb2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fe fb60 	bl	800926c <pbuf_free>
      pcb->refused_data = NULL;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f986 	bl	800aecc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fdc7 	bl	800a760 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff fdc2 	bl	800a760 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	66da      	str	r2, [r3, #108]	; 0x6c
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	08015c5c 	.word	0x08015c5c
 800abfc:	080162a8 	.word	0x080162a8
 800ac00:	08015ca0 	.word	0x08015ca0

0800ac04 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <tcp_pcb_remove+0x1e>
 800ac14:	4b3e      	ldr	r3, [pc, #248]	; (800ad10 <tcp_pcb_remove+0x10c>)
 800ac16:	f640 0283 	movw	r2, #2179	; 0x883
 800ac1a:	493e      	ldr	r1, [pc, #248]	; (800ad14 <tcp_pcb_remove+0x110>)
 800ac1c:	483e      	ldr	r0, [pc, #248]	; (800ad18 <tcp_pcb_remove+0x114>)
 800ac1e:	f009 fb6f 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <tcp_pcb_remove+0x32>
 800ac28:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <tcp_pcb_remove+0x10c>)
 800ac2a:	f640 0284 	movw	r2, #2180	; 0x884
 800ac2e:	493b      	ldr	r1, [pc, #236]	; (800ad1c <tcp_pcb_remove+0x118>)
 800ac30:	4839      	ldr	r0, [pc, #228]	; (800ad18 <tcp_pcb_remove+0x114>)
 800ac32:	f009 fb65 	bl	8014300 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	683a      	ldr	r2, [r7, #0]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d105      	bne.n	800ac4c <tcp_pcb_remove+0x48>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68da      	ldr	r2, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	601a      	str	r2, [r3, #0]
 800ac4a:	e013      	b.n	800ac74 <tcp_pcb_remove+0x70>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60fb      	str	r3, [r7, #12]
 800ac52:	e00c      	b.n	800ac6e <tcp_pcb_remove+0x6a>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	683a      	ldr	r2, [r7, #0]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d104      	bne.n	800ac68 <tcp_pcb_remove+0x64>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	60da      	str	r2, [r3, #12]
 800ac66:	e005      	b.n	800ac74 <tcp_pcb_remove+0x70>
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1ef      	bne.n	800ac54 <tcp_pcb_remove+0x50>
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	2200      	movs	r2, #0
 800ac78:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ac7a:	6838      	ldr	r0, [r7, #0]
 800ac7c:	f7ff ff72 	bl	800ab64 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	7d1b      	ldrb	r3, [r3, #20]
 800ac84:	2b0a      	cmp	r3, #10
 800ac86:	d013      	beq.n	800acb0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d00f      	beq.n	800acb0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	8b5b      	ldrh	r3, [r3, #26]
 800ac94:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d009      	beq.n	800acb0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	8b5b      	ldrh	r3, [r3, #26]
 800aca0:	f043 0302 	orr.w	r3, r3, #2
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800acaa:	6838      	ldr	r0, [r7, #0]
 800acac:	f002 ff6e 	bl	800db8c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	7d1b      	ldrb	r3, [r3, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d020      	beq.n	800acfa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d006      	beq.n	800acce <tcp_pcb_remove+0xca>
 800acc0:	4b13      	ldr	r3, [pc, #76]	; (800ad10 <tcp_pcb_remove+0x10c>)
 800acc2:	f640 0293 	movw	r2, #2195	; 0x893
 800acc6:	4916      	ldr	r1, [pc, #88]	; (800ad20 <tcp_pcb_remove+0x11c>)
 800acc8:	4813      	ldr	r0, [pc, #76]	; (800ad18 <tcp_pcb_remove+0x114>)
 800acca:	f009 fb19 	bl	8014300 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <tcp_pcb_remove+0xe0>
 800acd6:	4b0e      	ldr	r3, [pc, #56]	; (800ad10 <tcp_pcb_remove+0x10c>)
 800acd8:	f640 0294 	movw	r2, #2196	; 0x894
 800acdc:	4911      	ldr	r1, [pc, #68]	; (800ad24 <tcp_pcb_remove+0x120>)
 800acde:	480e      	ldr	r0, [pc, #56]	; (800ad18 <tcp_pcb_remove+0x114>)
 800ace0:	f009 fb0e 	bl	8014300 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d006      	beq.n	800acfa <tcp_pcb_remove+0xf6>
 800acec:	4b08      	ldr	r3, [pc, #32]	; (800ad10 <tcp_pcb_remove+0x10c>)
 800acee:	f640 0296 	movw	r2, #2198	; 0x896
 800acf2:	490d      	ldr	r1, [pc, #52]	; (800ad28 <tcp_pcb_remove+0x124>)
 800acf4:	4808      	ldr	r0, [pc, #32]	; (800ad18 <tcp_pcb_remove+0x114>)
 800acf6:	f009 fb03 	bl	8014300 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2200      	movs	r2, #0
 800acfe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2200      	movs	r2, #0
 800ad04:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	08015c5c 	.word	0x08015c5c
 800ad14:	080162c4 	.word	0x080162c4
 800ad18:	08015ca0 	.word	0x08015ca0
 800ad1c:	080162e0 	.word	0x080162e0
 800ad20:	08016300 	.word	0x08016300
 800ad24:	08016318 	.word	0x08016318
 800ad28:	08016334 	.word	0x08016334

0800ad2c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <tcp_next_iss+0x1c>
 800ad3a:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <tcp_next_iss+0x38>)
 800ad3c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ad40:	4909      	ldr	r1, [pc, #36]	; (800ad68 <tcp_next_iss+0x3c>)
 800ad42:	480a      	ldr	r0, [pc, #40]	; (800ad6c <tcp_next_iss+0x40>)
 800ad44:	f009 fadc 	bl	8014300 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <tcp_next_iss+0x44>)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <tcp_next_iss+0x48>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4413      	add	r3, r2
 800ad52:	4a07      	ldr	r2, [pc, #28]	; (800ad70 <tcp_next_iss+0x44>)
 800ad54:	6013      	str	r3, [r2, #0]
  return iss;
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <tcp_next_iss+0x44>)
 800ad58:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3708      	adds	r7, #8
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	08015c5c 	.word	0x08015c5c
 800ad68:	0801634c 	.word	0x0801634c
 800ad6c:	08015ca0 	.word	0x08015ca0
 800ad70:	20000028 	.word	0x20000028
 800ad74:	2000c4f0 	.word	0x2000c4f0

0800ad78 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	60b9      	str	r1, [r7, #8]
 800ad82:	607a      	str	r2, [r7, #4]
 800ad84:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d106      	bne.n	800ad9a <tcp_eff_send_mss_netif+0x22>
 800ad8c:	4b14      	ldr	r3, [pc, #80]	; (800ade0 <tcp_eff_send_mss_netif+0x68>)
 800ad8e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ad92:	4914      	ldr	r1, [pc, #80]	; (800ade4 <tcp_eff_send_mss_netif+0x6c>)
 800ad94:	4814      	ldr	r0, [pc, #80]	; (800ade8 <tcp_eff_send_mss_netif+0x70>)
 800ad96:	f009 fab3 	bl	8014300 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ada0:	89fb      	ldrh	r3, [r7, #14]
 800ada2:	e019      	b.n	800add8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ada8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800adaa:	8afb      	ldrh	r3, [r7, #22]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d012      	beq.n	800add6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800adb0:	2328      	movs	r3, #40	; 0x28
 800adb2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800adb4:	8afa      	ldrh	r2, [r7, #22]
 800adb6:	8abb      	ldrh	r3, [r7, #20]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d904      	bls.n	800adc6 <tcp_eff_send_mss_netif+0x4e>
 800adbc:	8afa      	ldrh	r2, [r7, #22]
 800adbe:	8abb      	ldrh	r3, [r7, #20]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	e000      	b.n	800adc8 <tcp_eff_send_mss_netif+0x50>
 800adc6:	2300      	movs	r3, #0
 800adc8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800adca:	8a7a      	ldrh	r2, [r7, #18]
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	4293      	cmp	r3, r2
 800add0:	bf28      	it	cs
 800add2:	4613      	movcs	r3, r2
 800add4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800add6:	89fb      	ldrh	r3, [r7, #14]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3718      	adds	r7, #24
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	08015c5c 	.word	0x08015c5c
 800ade4:	08016368 	.word	0x08016368
 800ade8:	08015ca0 	.word	0x08015ca0

0800adec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d119      	bne.n	800ae34 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ae00:	4b10      	ldr	r3, [pc, #64]	; (800ae44 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ae02:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ae06:	4910      	ldr	r1, [pc, #64]	; (800ae48 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ae08:	4810      	ldr	r0, [pc, #64]	; (800ae4c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ae0a:	f009 fa79 	bl	8014300 <iprintf>

  while (pcb != NULL) {
 800ae0e:	e011      	b.n	800ae34 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d108      	bne.n	800ae2e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ae22:	68f8      	ldr	r0, [r7, #12]
 800ae24:	f7fe ffc6 	bl	8009db4 <tcp_abort>
      pcb = next;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	60fb      	str	r3, [r7, #12]
 800ae2c:	e002      	b.n	800ae34 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1ea      	bne.n	800ae10 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	bf00      	nop
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	08015c5c 	.word	0x08015c5c
 800ae48:	08016390 	.word	0x08016390
 800ae4c:	08015ca0 	.word	0x08015ca0

0800ae50 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d02a      	beq.n	800aeb6 <tcp_netif_ip_addr_changed+0x66>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d026      	beq.n	800aeb6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <tcp_netif_ip_addr_changed+0x70>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff ffbc 	bl	800adec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ae74:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <tcp_netif_ip_addr_changed+0x74>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff ffb6 	bl	800adec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d017      	beq.n	800aeb6 <tcp_netif_ip_addr_changed+0x66>
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d013      	beq.n	800aeb6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae8e:	4b0e      	ldr	r3, [pc, #56]	; (800aec8 <tcp_netif_ip_addr_changed+0x78>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	60fb      	str	r3, [r7, #12]
 800ae94:	e00c      	b.n	800aeb0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d103      	bne.n	800aeaa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1ef      	bne.n	800ae96 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aeb6:	bf00      	nop
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	2000c4fc 	.word	0x2000c4fc
 800aec4:	2000c4f4 	.word	0x2000c4f4
 800aec8:	2000c4f8 	.word	0x2000c4f8

0800aecc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fc3d 	bl	800a760 <tcp_segs_free>
    pcb->ooseq = NULL;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800aef4:	b590      	push	{r4, r7, lr}
 800aef6:	b08d      	sub	sp, #52	; 0x34
 800aef8:	af04      	add	r7, sp, #16
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d105      	bne.n	800af10 <tcp_input+0x1c>
 800af04:	4b9b      	ldr	r3, [pc, #620]	; (800b174 <tcp_input+0x280>)
 800af06:	2283      	movs	r2, #131	; 0x83
 800af08:	499b      	ldr	r1, [pc, #620]	; (800b178 <tcp_input+0x284>)
 800af0a:	489c      	ldr	r0, [pc, #624]	; (800b17c <tcp_input+0x288>)
 800af0c:	f009 f9f8 	bl	8014300 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4a9a      	ldr	r2, [pc, #616]	; (800b180 <tcp_input+0x28c>)
 800af16:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	895b      	ldrh	r3, [r3, #10]
 800af1c:	2b13      	cmp	r3, #19
 800af1e:	f240 83d1 	bls.w	800b6c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800af22:	4b98      	ldr	r3, [pc, #608]	; (800b184 <tcp_input+0x290>)
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	4a97      	ldr	r2, [pc, #604]	; (800b184 <tcp_input+0x290>)
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	4611      	mov	r1, r2
 800af2c:	4618      	mov	r0, r3
 800af2e:	f007 fdfd 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 83c7 	bne.w	800b6c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800af3a:	4b92      	ldr	r3, [pc, #584]	; (800b184 <tcp_input+0x290>)
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800af42:	2be0      	cmp	r3, #224	; 0xe0
 800af44:	f000 83c0 	beq.w	800b6c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800af48:	4b8d      	ldr	r3, [pc, #564]	; (800b180 <tcp_input+0x28c>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	899b      	ldrh	r3, [r3, #12]
 800af4e:	b29b      	uxth	r3, r3
 800af50:	4618      	mov	r0, r3
 800af52:	f7fc fd8d 	bl	8007a70 <lwip_htons>
 800af56:	4603      	mov	r3, r0
 800af58:	0b1b      	lsrs	r3, r3, #12
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800af62:	7cbb      	ldrb	r3, [r7, #18]
 800af64:	2b13      	cmp	r3, #19
 800af66:	f240 83b1 	bls.w	800b6cc <tcp_input+0x7d8>
 800af6a:	7cbb      	ldrb	r3, [r7, #18]
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	891b      	ldrh	r3, [r3, #8]
 800af72:	429a      	cmp	r2, r3
 800af74:	f200 83aa 	bhi.w	800b6cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800af78:	7cbb      	ldrb	r3, [r7, #18]
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	3b14      	subs	r3, #20
 800af7e:	b29a      	uxth	r2, r3
 800af80:	4b81      	ldr	r3, [pc, #516]	; (800b188 <tcp_input+0x294>)
 800af82:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800af84:	4b81      	ldr	r3, [pc, #516]	; (800b18c <tcp_input+0x298>)
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	895a      	ldrh	r2, [r3, #10]
 800af8e:	7cbb      	ldrb	r3, [r7, #18]
 800af90:	b29b      	uxth	r3, r3
 800af92:	429a      	cmp	r2, r3
 800af94:	d309      	bcc.n	800afaa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800af96:	4b7c      	ldr	r3, [pc, #496]	; (800b188 <tcp_input+0x294>)
 800af98:	881a      	ldrh	r2, [r3, #0]
 800af9a:	4b7d      	ldr	r3, [pc, #500]	; (800b190 <tcp_input+0x29c>)
 800af9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800af9e:	7cbb      	ldrb	r3, [r7, #18]
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7fe f8dc 	bl	8009160 <pbuf_remove_header>
 800afa8:	e04e      	b.n	800b048 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d105      	bne.n	800afbe <tcp_input+0xca>
 800afb2:	4b70      	ldr	r3, [pc, #448]	; (800b174 <tcp_input+0x280>)
 800afb4:	22c2      	movs	r2, #194	; 0xc2
 800afb6:	4977      	ldr	r1, [pc, #476]	; (800b194 <tcp_input+0x2a0>)
 800afb8:	4870      	ldr	r0, [pc, #448]	; (800b17c <tcp_input+0x288>)
 800afba:	f009 f9a1 	bl	8014300 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800afbe:	2114      	movs	r1, #20
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7fe f8cd 	bl	8009160 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	895a      	ldrh	r2, [r3, #10]
 800afca:	4b71      	ldr	r3, [pc, #452]	; (800b190 <tcp_input+0x29c>)
 800afcc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800afce:	4b6e      	ldr	r3, [pc, #440]	; (800b188 <tcp_input+0x294>)
 800afd0:	881a      	ldrh	r2, [r3, #0]
 800afd2:	4b6f      	ldr	r3, [pc, #444]	; (800b190 <tcp_input+0x29c>)
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800afda:	4b6d      	ldr	r3, [pc, #436]	; (800b190 <tcp_input+0x29c>)
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f7fe f8bd 	bl	8009160 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	895b      	ldrh	r3, [r3, #10]
 800afec:	8a3a      	ldrh	r2, [r7, #16]
 800afee:	429a      	cmp	r2, r3
 800aff0:	f200 836e 	bhi.w	800b6d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	4a64      	ldr	r2, [pc, #400]	; (800b18c <tcp_input+0x298>)
 800affc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	8a3a      	ldrh	r2, [r7, #16]
 800b004:	4611      	mov	r1, r2
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe f8aa 	bl	8009160 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	891a      	ldrh	r2, [r3, #8]
 800b010:	8a3b      	ldrh	r3, [r7, #16]
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	b29a      	uxth	r2, r3
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	895b      	ldrh	r3, [r3, #10]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d005      	beq.n	800b02e <tcp_input+0x13a>
 800b022:	4b54      	ldr	r3, [pc, #336]	; (800b174 <tcp_input+0x280>)
 800b024:	22df      	movs	r2, #223	; 0xdf
 800b026:	495c      	ldr	r1, [pc, #368]	; (800b198 <tcp_input+0x2a4>)
 800b028:	4854      	ldr	r0, [pc, #336]	; (800b17c <tcp_input+0x288>)
 800b02a:	f009 f969 	bl	8014300 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	891a      	ldrh	r2, [r3, #8]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	891b      	ldrh	r3, [r3, #8]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d005      	beq.n	800b048 <tcp_input+0x154>
 800b03c:	4b4d      	ldr	r3, [pc, #308]	; (800b174 <tcp_input+0x280>)
 800b03e:	22e0      	movs	r2, #224	; 0xe0
 800b040:	4956      	ldr	r1, [pc, #344]	; (800b19c <tcp_input+0x2a8>)
 800b042:	484e      	ldr	r0, [pc, #312]	; (800b17c <tcp_input+0x288>)
 800b044:	f009 f95c 	bl	8014300 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b048:	4b4d      	ldr	r3, [pc, #308]	; (800b180 <tcp_input+0x28c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	4a4b      	ldr	r2, [pc, #300]	; (800b180 <tcp_input+0x28c>)
 800b052:	6814      	ldr	r4, [r2, #0]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fc fd0b 	bl	8007a70 <lwip_htons>
 800b05a:	4603      	mov	r3, r0
 800b05c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b05e:	4b48      	ldr	r3, [pc, #288]	; (800b180 <tcp_input+0x28c>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	885b      	ldrh	r3, [r3, #2]
 800b064:	b29b      	uxth	r3, r3
 800b066:	4a46      	ldr	r2, [pc, #280]	; (800b180 <tcp_input+0x28c>)
 800b068:	6814      	ldr	r4, [r2, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fc fd00 	bl	8007a70 <lwip_htons>
 800b070:	4603      	mov	r3, r0
 800b072:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b074:	4b42      	ldr	r3, [pc, #264]	; (800b180 <tcp_input+0x28c>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	4a41      	ldr	r2, [pc, #260]	; (800b180 <tcp_input+0x28c>)
 800b07c:	6814      	ldr	r4, [r2, #0]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7fc fd0b 	bl	8007a9a <lwip_htonl>
 800b084:	4603      	mov	r3, r0
 800b086:	6063      	str	r3, [r4, #4]
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	4a45      	ldr	r2, [pc, #276]	; (800b1a0 <tcp_input+0x2ac>)
 800b08c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b08e:	4b3c      	ldr	r3, [pc, #240]	; (800b180 <tcp_input+0x28c>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	4a3a      	ldr	r2, [pc, #232]	; (800b180 <tcp_input+0x28c>)
 800b096:	6814      	ldr	r4, [r2, #0]
 800b098:	4618      	mov	r0, r3
 800b09a:	f7fc fcfe 	bl	8007a9a <lwip_htonl>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	60a3      	str	r3, [r4, #8]
 800b0a2:	68a3      	ldr	r3, [r4, #8]
 800b0a4:	4a3f      	ldr	r2, [pc, #252]	; (800b1a4 <tcp_input+0x2b0>)
 800b0a6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b0a8:	4b35      	ldr	r3, [pc, #212]	; (800b180 <tcp_input+0x28c>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	89db      	ldrh	r3, [r3, #14]
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	4a33      	ldr	r2, [pc, #204]	; (800b180 <tcp_input+0x28c>)
 800b0b2:	6814      	ldr	r4, [r2, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fc fcdb 	bl	8007a70 <lwip_htons>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b0be:	4b30      	ldr	r3, [pc, #192]	; (800b180 <tcp_input+0x28c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	899b      	ldrh	r3, [r3, #12]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fc fcd2 	bl	8007a70 <lwip_htons>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	4b34      	ldr	r3, [pc, #208]	; (800b1a8 <tcp_input+0x2b4>)
 800b0d8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	891a      	ldrh	r2, [r3, #8]
 800b0de:	4b33      	ldr	r3, [pc, #204]	; (800b1ac <tcp_input+0x2b8>)
 800b0e0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b0e2:	4b31      	ldr	r3, [pc, #196]	; (800b1a8 <tcp_input+0x2b4>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00c      	beq.n	800b108 <tcp_input+0x214>
    tcplen++;
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	; (800b1ac <tcp_input+0x2b8>)
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	4b2d      	ldr	r3, [pc, #180]	; (800b1ac <tcp_input+0x2b8>)
 800b0f8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	891a      	ldrh	r2, [r3, #8]
 800b0fe:	4b2b      	ldr	r3, [pc, #172]	; (800b1ac <tcp_input+0x2b8>)
 800b100:	881b      	ldrh	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	f200 82e6 	bhi.w	800b6d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b108:	2300      	movs	r3, #0
 800b10a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b10c:	4b28      	ldr	r3, [pc, #160]	; (800b1b0 <tcp_input+0x2bc>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	e09d      	b.n	800b250 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	7d1b      	ldrb	r3, [r3, #20]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d105      	bne.n	800b128 <tcp_input+0x234>
 800b11c:	4b15      	ldr	r3, [pc, #84]	; (800b174 <tcp_input+0x280>)
 800b11e:	22fb      	movs	r2, #251	; 0xfb
 800b120:	4924      	ldr	r1, [pc, #144]	; (800b1b4 <tcp_input+0x2c0>)
 800b122:	4816      	ldr	r0, [pc, #88]	; (800b17c <tcp_input+0x288>)
 800b124:	f009 f8ec 	bl	8014300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	7d1b      	ldrb	r3, [r3, #20]
 800b12c:	2b0a      	cmp	r3, #10
 800b12e:	d105      	bne.n	800b13c <tcp_input+0x248>
 800b130:	4b10      	ldr	r3, [pc, #64]	; (800b174 <tcp_input+0x280>)
 800b132:	22fc      	movs	r2, #252	; 0xfc
 800b134:	4920      	ldr	r1, [pc, #128]	; (800b1b8 <tcp_input+0x2c4>)
 800b136:	4811      	ldr	r0, [pc, #68]	; (800b17c <tcp_input+0x288>)
 800b138:	f009 f8e2 	bl	8014300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	7d1b      	ldrb	r3, [r3, #20]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d105      	bne.n	800b150 <tcp_input+0x25c>
 800b144:	4b0b      	ldr	r3, [pc, #44]	; (800b174 <tcp_input+0x280>)
 800b146:	22fd      	movs	r2, #253	; 0xfd
 800b148:	491c      	ldr	r1, [pc, #112]	; (800b1bc <tcp_input+0x2c8>)
 800b14a:	480c      	ldr	r0, [pc, #48]	; (800b17c <tcp_input+0x288>)
 800b14c:	f009 f8d8 	bl	8014300 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	7a1b      	ldrb	r3, [r3, #8]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d033      	beq.n	800b1c0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	7a1a      	ldrb	r2, [r3, #8]
 800b15c:	4b09      	ldr	r3, [pc, #36]	; (800b184 <tcp_input+0x290>)
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b164:	3301      	adds	r3, #1
 800b166:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b168:	429a      	cmp	r2, r3
 800b16a:	d029      	beq.n	800b1c0 <tcp_input+0x2cc>
      prev = pcb;
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	61bb      	str	r3, [r7, #24]
      continue;
 800b170:	e06b      	b.n	800b24a <tcp_input+0x356>
 800b172:	bf00      	nop
 800b174:	080163c4 	.word	0x080163c4
 800b178:	080163f8 	.word	0x080163f8
 800b17c:	08016410 	.word	0x08016410
 800b180:	2000c518 	.word	0x2000c518
 800b184:	20008d7c 	.word	0x20008d7c
 800b188:	2000c51c 	.word	0x2000c51c
 800b18c:	2000c520 	.word	0x2000c520
 800b190:	2000c51e 	.word	0x2000c51e
 800b194:	08016438 	.word	0x08016438
 800b198:	08016448 	.word	0x08016448
 800b19c:	08016454 	.word	0x08016454
 800b1a0:	2000c528 	.word	0x2000c528
 800b1a4:	2000c52c 	.word	0x2000c52c
 800b1a8:	2000c534 	.word	0x2000c534
 800b1ac:	2000c532 	.word	0x2000c532
 800b1b0:	2000c4fc 	.word	0x2000c4fc
 800b1b4:	08016474 	.word	0x08016474
 800b1b8:	0801649c 	.word	0x0801649c
 800b1bc:	080164c8 	.word	0x080164c8
    }

    if (pcb->remote_port == tcphdr->src &&
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	8b1a      	ldrh	r2, [r3, #24]
 800b1c4:	4b72      	ldr	r3, [pc, #456]	; (800b390 <tcp_input+0x49c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d13a      	bne.n	800b246 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	8ada      	ldrh	r2, [r3, #22]
 800b1d4:	4b6e      	ldr	r3, [pc, #440]	; (800b390 <tcp_input+0x49c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	885b      	ldrh	r3, [r3, #2]
 800b1da:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b1dc:	429a      	cmp	r2, r3
 800b1de:	d132      	bne.n	800b246 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	4b6b      	ldr	r3, [pc, #428]	; (800b394 <tcp_input+0x4a0>)
 800b1e6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d12c      	bne.n	800b246 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	681a      	ldr	r2, [r3, #0]
 800b1f0:	4b68      	ldr	r3, [pc, #416]	; (800b394 <tcp_input+0x4a0>)
 800b1f2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d126      	bne.n	800b246 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	69fa      	ldr	r2, [r7, #28]
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d106      	bne.n	800b210 <tcp_input+0x31c>
 800b202:	4b65      	ldr	r3, [pc, #404]	; (800b398 <tcp_input+0x4a4>)
 800b204:	f240 120d 	movw	r2, #269	; 0x10d
 800b208:	4964      	ldr	r1, [pc, #400]	; (800b39c <tcp_input+0x4a8>)
 800b20a:	4865      	ldr	r0, [pc, #404]	; (800b3a0 <tcp_input+0x4ac>)
 800b20c:	f009 f878 	bl	8014300 <iprintf>
      if (prev != NULL) {
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d00a      	beq.n	800b22c <tcp_input+0x338>
        prev->next = pcb->next;
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	69bb      	ldr	r3, [r7, #24]
 800b21c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b21e:	4b61      	ldr	r3, [pc, #388]	; (800b3a4 <tcp_input+0x4b0>)
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b226:	4a5f      	ldr	r2, [pc, #380]	; (800b3a4 <tcp_input+0x4b0>)
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	429a      	cmp	r2, r3
 800b234:	d111      	bne.n	800b25a <tcp_input+0x366>
 800b236:	4b58      	ldr	r3, [pc, #352]	; (800b398 <tcp_input+0x4a4>)
 800b238:	f240 1215 	movw	r2, #277	; 0x115
 800b23c:	495a      	ldr	r1, [pc, #360]	; (800b3a8 <tcp_input+0x4b4>)
 800b23e:	4858      	ldr	r0, [pc, #352]	; (800b3a0 <tcp_input+0x4ac>)
 800b240:	f009 f85e 	bl	8014300 <iprintf>
      break;
 800b244:	e009      	b.n	800b25a <tcp_input+0x366>
    }
    prev = pcb;
 800b246:	69fb      	ldr	r3, [r7, #28]
 800b248:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	61fb      	str	r3, [r7, #28]
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	2b00      	cmp	r3, #0
 800b254:	f47f af5e 	bne.w	800b114 <tcp_input+0x220>
 800b258:	e000      	b.n	800b25c <tcp_input+0x368>
      break;
 800b25a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f040 80aa 	bne.w	800b3b8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b264:	4b51      	ldr	r3, [pc, #324]	; (800b3ac <tcp_input+0x4b8>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	e03f      	b.n	800b2ec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	7d1b      	ldrb	r3, [r3, #20]
 800b270:	2b0a      	cmp	r3, #10
 800b272:	d006      	beq.n	800b282 <tcp_input+0x38e>
 800b274:	4b48      	ldr	r3, [pc, #288]	; (800b398 <tcp_input+0x4a4>)
 800b276:	f240 121f 	movw	r2, #287	; 0x11f
 800b27a:	494d      	ldr	r1, [pc, #308]	; (800b3b0 <tcp_input+0x4bc>)
 800b27c:	4848      	ldr	r0, [pc, #288]	; (800b3a0 <tcp_input+0x4ac>)
 800b27e:	f009 f83f 	bl	8014300 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	7a1b      	ldrb	r3, [r3, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d009      	beq.n	800b29e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	7a1a      	ldrb	r2, [r3, #8]
 800b28e:	4b41      	ldr	r3, [pc, #260]	; (800b394 <tcp_input+0x4a0>)
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b296:	3301      	adds	r3, #1
 800b298:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d122      	bne.n	800b2e4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	8b1a      	ldrh	r2, [r3, #24]
 800b2a2:	4b3b      	ldr	r3, [pc, #236]	; (800b390 <tcp_input+0x49c>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	881b      	ldrh	r3, [r3, #0]
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d11b      	bne.n	800b2e6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	8ada      	ldrh	r2, [r3, #22]
 800b2b2:	4b37      	ldr	r3, [pc, #220]	; (800b390 <tcp_input+0x49c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	885b      	ldrh	r3, [r3, #2]
 800b2b8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d113      	bne.n	800b2e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	4b34      	ldr	r3, [pc, #208]	; (800b394 <tcp_input+0x4a0>)
 800b2c4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d10d      	bne.n	800b2e6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	4b31      	ldr	r3, [pc, #196]	; (800b394 <tcp_input+0x4a0>)
 800b2d0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d107      	bne.n	800b2e6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b2d6:	69f8      	ldr	r0, [r7, #28]
 800b2d8:	f000 fb56 	bl	800b988 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f7fd ffc5 	bl	800926c <pbuf_free>
        return;
 800b2e2:	e1fd      	b.n	800b6e0 <tcp_input+0x7ec>
        continue;
 800b2e4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d1bc      	bne.n	800b26c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b2f6:	4b2f      	ldr	r3, [pc, #188]	; (800b3b4 <tcp_input+0x4c0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	e02a      	b.n	800b354 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	7a1b      	ldrb	r3, [r3, #8]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00c      	beq.n	800b320 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	7a1a      	ldrb	r2, [r3, #8]
 800b30a:	4b22      	ldr	r3, [pc, #136]	; (800b394 <tcp_input+0x4a0>)
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b312:	3301      	adds	r3, #1
 800b314:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b316:	429a      	cmp	r2, r3
 800b318:	d002      	beq.n	800b320 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	61bb      	str	r3, [r7, #24]
        continue;
 800b31e:	e016      	b.n	800b34e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	8ada      	ldrh	r2, [r3, #22]
 800b324:	4b1a      	ldr	r3, [pc, #104]	; (800b390 <tcp_input+0x49c>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	885b      	ldrh	r3, [r3, #2]
 800b32a:	b29b      	uxth	r3, r3
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d10c      	bne.n	800b34a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	4b17      	ldr	r3, [pc, #92]	; (800b394 <tcp_input+0x4a0>)
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d00f      	beq.n	800b35c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d00d      	beq.n	800b35e <tcp_input+0x46a>
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	617b      	str	r3, [r7, #20]
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1d1      	bne.n	800b2fe <tcp_input+0x40a>
 800b35a:	e000      	b.n	800b35e <tcp_input+0x46a>
            break;
 800b35c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d029      	beq.n	800b3b8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d00a      	beq.n	800b380 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b372:	4b10      	ldr	r3, [pc, #64]	; (800b3b4 <tcp_input+0x4c0>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b37a:	4a0e      	ldr	r2, [pc, #56]	; (800b3b4 <tcp_input+0x4c0>)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b380:	6978      	ldr	r0, [r7, #20]
 800b382:	f000 fa03 	bl	800b78c <tcp_listen_input>
      }
      pbuf_free(p);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7fd ff70 	bl	800926c <pbuf_free>
      return;
 800b38c:	e1a8      	b.n	800b6e0 <tcp_input+0x7ec>
 800b38e:	bf00      	nop
 800b390:	2000c518 	.word	0x2000c518
 800b394:	20008d7c 	.word	0x20008d7c
 800b398:	080163c4 	.word	0x080163c4
 800b39c:	080164f0 	.word	0x080164f0
 800b3a0:	08016410 	.word	0x08016410
 800b3a4:	2000c4fc 	.word	0x2000c4fc
 800b3a8:	0801651c 	.word	0x0801651c
 800b3ac:	2000c500 	.word	0x2000c500
 800b3b0:	08016548 	.word	0x08016548
 800b3b4:	2000c4f8 	.word	0x2000c4f8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8158 	beq.w	800b670 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b3c0:	4b95      	ldr	r3, [pc, #596]	; (800b618 <tcp_input+0x724>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	891a      	ldrh	r2, [r3, #8]
 800b3ca:	4b93      	ldr	r3, [pc, #588]	; (800b618 <tcp_input+0x724>)
 800b3cc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b3ce:	4a92      	ldr	r2, [pc, #584]	; (800b618 <tcp_input+0x724>)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b3d4:	4b91      	ldr	r3, [pc, #580]	; (800b61c <tcp_input+0x728>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a8f      	ldr	r2, [pc, #572]	; (800b618 <tcp_input+0x724>)
 800b3da:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b3dc:	4b90      	ldr	r3, [pc, #576]	; (800b620 <tcp_input+0x72c>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b3e2:	4b90      	ldr	r3, [pc, #576]	; (800b624 <tcp_input+0x730>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b3e8:	4b8f      	ldr	r3, [pc, #572]	; (800b628 <tcp_input+0x734>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b3ee:	4b8f      	ldr	r3, [pc, #572]	; (800b62c <tcp_input+0x738>)
 800b3f0:	781b      	ldrb	r3, [r3, #0]
 800b3f2:	f003 0308 	and.w	r3, r3, #8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d006      	beq.n	800b408 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7b5b      	ldrb	r3, [r3, #13]
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	b2da      	uxtb	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d017      	beq.n	800b440 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b410:	69f8      	ldr	r0, [r7, #28]
 800b412:	f7ff f929 	bl	800a668 <tcp_process_refused_data>
 800b416:	4603      	mov	r3, r0
 800b418:	f113 0f0d 	cmn.w	r3, #13
 800b41c:	d007      	beq.n	800b42e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00c      	beq.n	800b440 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b426:	4b82      	ldr	r3, [pc, #520]	; (800b630 <tcp_input+0x73c>)
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d008      	beq.n	800b440 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b432:	2b00      	cmp	r3, #0
 800b434:	f040 80e3 	bne.w	800b5fe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b438:	69f8      	ldr	r0, [r7, #28]
 800b43a:	f003 f9ad 	bl	800e798 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b43e:	e0de      	b.n	800b5fe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b440:	4a7c      	ldr	r2, [pc, #496]	; (800b634 <tcp_input+0x740>)
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b446:	69f8      	ldr	r0, [r7, #28]
 800b448:	f000 fb18 	bl	800ba7c <tcp_process>
 800b44c:	4603      	mov	r3, r0
 800b44e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b450:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b454:	f113 0f0d 	cmn.w	r3, #13
 800b458:	f000 80d3 	beq.w	800b602 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b45c:	4b71      	ldr	r3, [pc, #452]	; (800b624 <tcp_input+0x730>)
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d015      	beq.n	800b494 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d008      	beq.n	800b484 <tcp_input+0x590>
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	6912      	ldr	r2, [r2, #16]
 800b47c:	f06f 010d 	mvn.w	r1, #13
 800b480:	4610      	mov	r0, r2
 800b482:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b484:	69f9      	ldr	r1, [r7, #28]
 800b486:	486c      	ldr	r0, [pc, #432]	; (800b638 <tcp_input+0x744>)
 800b488:	f7ff fbbc 	bl	800ac04 <tcp_pcb_remove>
        tcp_free(pcb);
 800b48c:	69f8      	ldr	r0, [r7, #28]
 800b48e:	f7fe f9a9 	bl	80097e4 <tcp_free>
 800b492:	e0da      	b.n	800b64a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b494:	2300      	movs	r3, #0
 800b496:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b498:	4b63      	ldr	r3, [pc, #396]	; (800b628 <tcp_input+0x734>)
 800b49a:	881b      	ldrh	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d01d      	beq.n	800b4dc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b4a0:	4b61      	ldr	r3, [pc, #388]	; (800b628 <tcp_input+0x734>)
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <tcp_input+0x5d2>
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	6910      	ldr	r0, [r2, #16]
 800b4ba:	89fa      	ldrh	r2, [r7, #14]
 800b4bc:	69f9      	ldr	r1, [r7, #28]
 800b4be:	4798      	blx	r3
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	74fb      	strb	r3, [r7, #19]
 800b4c4:	e001      	b.n	800b4ca <tcp_input+0x5d6>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b4ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b4ce:	f113 0f0d 	cmn.w	r3, #13
 800b4d2:	f000 8098 	beq.w	800b606 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b4d6:	4b54      	ldr	r3, [pc, #336]	; (800b628 <tcp_input+0x734>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b4dc:	69f8      	ldr	r0, [r7, #28]
 800b4de:	f000 f915 	bl	800b70c <tcp_input_delayed_close>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	f040 8090 	bne.w	800b60a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b4ea:	4b4d      	ldr	r3, [pc, #308]	; (800b620 <tcp_input+0x72c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d041      	beq.n	800b576 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d006      	beq.n	800b508 <tcp_input+0x614>
 800b4fa:	4b50      	ldr	r3, [pc, #320]	; (800b63c <tcp_input+0x748>)
 800b4fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b500:	494f      	ldr	r1, [pc, #316]	; (800b640 <tcp_input+0x74c>)
 800b502:	4850      	ldr	r0, [pc, #320]	; (800b644 <tcp_input+0x750>)
 800b504:	f008 fefc 	bl	8014300 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	8b5b      	ldrh	r3, [r3, #26]
 800b50c:	f003 0310 	and.w	r3, r3, #16
 800b510:	2b00      	cmp	r3, #0
 800b512:	d008      	beq.n	800b526 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b514:	4b42      	ldr	r3, [pc, #264]	; (800b620 <tcp_input+0x72c>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fd fea7 	bl	800926c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b51e:	69f8      	ldr	r0, [r7, #28]
 800b520:	f7fe fc48 	bl	8009db4 <tcp_abort>
            goto aborted;
 800b524:	e091      	b.n	800b64a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00c      	beq.n	800b54a <tcp_input+0x656>
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	6918      	ldr	r0, [r3, #16]
 800b53a:	4b39      	ldr	r3, [pc, #228]	; (800b620 <tcp_input+0x72c>)
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	2300      	movs	r3, #0
 800b540:	69f9      	ldr	r1, [r7, #28]
 800b542:	47a0      	blx	r4
 800b544:	4603      	mov	r3, r0
 800b546:	74fb      	strb	r3, [r7, #19]
 800b548:	e008      	b.n	800b55c <tcp_input+0x668>
 800b54a:	4b35      	ldr	r3, [pc, #212]	; (800b620 <tcp_input+0x72c>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	2300      	movs	r3, #0
 800b550:	69f9      	ldr	r1, [r7, #28]
 800b552:	2000      	movs	r0, #0
 800b554:	f7ff f95e 	bl	800a814 <tcp_recv_null>
 800b558:	4603      	mov	r3, r0
 800b55a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b55c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b560:	f113 0f0d 	cmn.w	r3, #13
 800b564:	d053      	beq.n	800b60e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b566:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b56e:	4b2c      	ldr	r3, [pc, #176]	; (800b620 <tcp_input+0x72c>)
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b576:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <tcp_input+0x730>)
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	f003 0320 	and.w	r3, r3, #32
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d030      	beq.n	800b5e4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b586:	2b00      	cmp	r3, #0
 800b588:	d009      	beq.n	800b59e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b58e:	7b5a      	ldrb	r2, [r3, #13]
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b594:	f042 0220 	orr.w	r2, r2, #32
 800b598:	b2d2      	uxtb	r2, r2
 800b59a:	735a      	strb	r2, [r3, #13]
 800b59c:	e022      	b.n	800b5e4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b5a6:	d005      	beq.n	800b5b4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <tcp_input+0x6e2>
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	6918      	ldr	r0, [r3, #16]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	69f9      	ldr	r1, [r7, #28]
 800b5ce:	47a0      	blx	r4
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	74fb      	strb	r3, [r7, #19]
 800b5d4:	e001      	b.n	800b5da <tcp_input+0x6e6>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b5da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5de:	f113 0f0d 	cmn.w	r3, #13
 800b5e2:	d016      	beq.n	800b612 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b5e4:	4b13      	ldr	r3, [pc, #76]	; (800b634 <tcp_input+0x740>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b5ea:	69f8      	ldr	r0, [r7, #28]
 800b5ec:	f000 f88e 	bl	800b70c <tcp_input_delayed_close>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d128      	bne.n	800b648 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b5f6:	69f8      	ldr	r0, [r7, #28]
 800b5f8:	f002 fac8 	bl	800db8c <tcp_output>
 800b5fc:	e025      	b.n	800b64a <tcp_input+0x756>
        goto aborted;
 800b5fe:	bf00      	nop
 800b600:	e023      	b.n	800b64a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b602:	bf00      	nop
 800b604:	e021      	b.n	800b64a <tcp_input+0x756>
              goto aborted;
 800b606:	bf00      	nop
 800b608:	e01f      	b.n	800b64a <tcp_input+0x756>
          goto aborted;
 800b60a:	bf00      	nop
 800b60c:	e01d      	b.n	800b64a <tcp_input+0x756>
            goto aborted;
 800b60e:	bf00      	nop
 800b610:	e01b      	b.n	800b64a <tcp_input+0x756>
              goto aborted;
 800b612:	bf00      	nop
 800b614:	e019      	b.n	800b64a <tcp_input+0x756>
 800b616:	bf00      	nop
 800b618:	2000c508 	.word	0x2000c508
 800b61c:	2000c518 	.word	0x2000c518
 800b620:	2000c538 	.word	0x2000c538
 800b624:	2000c535 	.word	0x2000c535
 800b628:	2000c530 	.word	0x2000c530
 800b62c:	2000c534 	.word	0x2000c534
 800b630:	2000c532 	.word	0x2000c532
 800b634:	2000c53c 	.word	0x2000c53c
 800b638:	2000c4fc 	.word	0x2000c4fc
 800b63c:	080163c4 	.word	0x080163c4
 800b640:	08016578 	.word	0x08016578
 800b644:	08016410 	.word	0x08016410
          goto aborted;
 800b648:	bf00      	nop
    tcp_input_pcb = NULL;
 800b64a:	4b27      	ldr	r3, [pc, #156]	; (800b6e8 <tcp_input+0x7f4>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b650:	4b26      	ldr	r3, [pc, #152]	; (800b6ec <tcp_input+0x7f8>)
 800b652:	2200      	movs	r2, #0
 800b654:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b656:	4b26      	ldr	r3, [pc, #152]	; (800b6f0 <tcp_input+0x7fc>)
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d03f      	beq.n	800b6de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b65e:	4b24      	ldr	r3, [pc, #144]	; (800b6f0 <tcp_input+0x7fc>)
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f7fd fe02 	bl	800926c <pbuf_free>
      inseg.p = NULL;
 800b668:	4b21      	ldr	r3, [pc, #132]	; (800b6f0 <tcp_input+0x7fc>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b66e:	e036      	b.n	800b6de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b670:	4b20      	ldr	r3, [pc, #128]	; (800b6f4 <tcp_input+0x800>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	899b      	ldrh	r3, [r3, #12]
 800b676:	b29b      	uxth	r3, r3
 800b678:	4618      	mov	r0, r3
 800b67a:	f7fc f9f9 	bl	8007a70 <lwip_htons>
 800b67e:	4603      	mov	r3, r0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	f003 0304 	and.w	r3, r3, #4
 800b686:	2b00      	cmp	r3, #0
 800b688:	d118      	bne.n	800b6bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b68a:	4b1b      	ldr	r3, [pc, #108]	; (800b6f8 <tcp_input+0x804>)
 800b68c:	6819      	ldr	r1, [r3, #0]
 800b68e:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <tcp_input+0x808>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	4b1a      	ldr	r3, [pc, #104]	; (800b700 <tcp_input+0x80c>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b69a:	4b16      	ldr	r3, [pc, #88]	; (800b6f4 <tcp_input+0x800>)
 800b69c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b69e:	885b      	ldrh	r3, [r3, #2]
 800b6a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b6a2:	4a14      	ldr	r2, [pc, #80]	; (800b6f4 <tcp_input+0x800>)
 800b6a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b6a6:	8812      	ldrh	r2, [r2, #0]
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	9202      	str	r2, [sp, #8]
 800b6ac:	9301      	str	r3, [sp, #4]
 800b6ae:	4b15      	ldr	r3, [pc, #84]	; (800b704 <tcp_input+0x810>)
 800b6b0:	9300      	str	r3, [sp, #0]
 800b6b2:	4b15      	ldr	r3, [pc, #84]	; (800b708 <tcp_input+0x814>)
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	f003 f81c 	bl	800e6f4 <tcp_rst>
    pbuf_free(p);
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f7fd fdd5 	bl	800926c <pbuf_free>
  return;
 800b6c2:	e00c      	b.n	800b6de <tcp_input+0x7ea>
    goto dropped;
 800b6c4:	bf00      	nop
 800b6c6:	e006      	b.n	800b6d6 <tcp_input+0x7e2>
    goto dropped;
 800b6c8:	bf00      	nop
 800b6ca:	e004      	b.n	800b6d6 <tcp_input+0x7e2>
    goto dropped;
 800b6cc:	bf00      	nop
 800b6ce:	e002      	b.n	800b6d6 <tcp_input+0x7e2>
      goto dropped;
 800b6d0:	bf00      	nop
 800b6d2:	e000      	b.n	800b6d6 <tcp_input+0x7e2>
      goto dropped;
 800b6d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7fd fdc8 	bl	800926c <pbuf_free>
 800b6dc:	e000      	b.n	800b6e0 <tcp_input+0x7ec>
  return;
 800b6de:	bf00      	nop
}
 800b6e0:	3724      	adds	r7, #36	; 0x24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd90      	pop	{r4, r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	2000c53c 	.word	0x2000c53c
 800b6ec:	2000c538 	.word	0x2000c538
 800b6f0:	2000c508 	.word	0x2000c508
 800b6f4:	2000c518 	.word	0x2000c518
 800b6f8:	2000c52c 	.word	0x2000c52c
 800b6fc:	2000c532 	.word	0x2000c532
 800b700:	2000c528 	.word	0x2000c528
 800b704:	20008d8c 	.word	0x20008d8c
 800b708:	20008d90 	.word	0x20008d90

0800b70c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <tcp_input_delayed_close+0x1c>
 800b71a:	4b17      	ldr	r3, [pc, #92]	; (800b778 <tcp_input_delayed_close+0x6c>)
 800b71c:	f240 225a 	movw	r2, #602	; 0x25a
 800b720:	4916      	ldr	r1, [pc, #88]	; (800b77c <tcp_input_delayed_close+0x70>)
 800b722:	4817      	ldr	r0, [pc, #92]	; (800b780 <tcp_input_delayed_close+0x74>)
 800b724:	f008 fdec 	bl	8014300 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b728:	4b16      	ldr	r3, [pc, #88]	; (800b784 <tcp_input_delayed_close+0x78>)
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f003 0310 	and.w	r3, r3, #16
 800b730:	2b00      	cmp	r3, #0
 800b732:	d01c      	beq.n	800b76e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	8b5b      	ldrh	r3, [r3, #26]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d10d      	bne.n	800b75c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b746:	2b00      	cmp	r3, #0
 800b748:	d008      	beq.n	800b75c <tcp_input_delayed_close+0x50>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	6912      	ldr	r2, [r2, #16]
 800b754:	f06f 010e 	mvn.w	r1, #14
 800b758:	4610      	mov	r0, r2
 800b75a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b75c:	6879      	ldr	r1, [r7, #4]
 800b75e:	480a      	ldr	r0, [pc, #40]	; (800b788 <tcp_input_delayed_close+0x7c>)
 800b760:	f7ff fa50 	bl	800ac04 <tcp_pcb_remove>
    tcp_free(pcb);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7fe f83d 	bl	80097e4 <tcp_free>
    return 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	e000      	b.n	800b770 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3708      	adds	r7, #8
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	080163c4 	.word	0x080163c4
 800b77c:	08016594 	.word	0x08016594
 800b780:	08016410 	.word	0x08016410
 800b784:	2000c535 	.word	0x2000c535
 800b788:	2000c4fc 	.word	0x2000c4fc

0800b78c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b78c:	b590      	push	{r4, r7, lr}
 800b78e:	b08b      	sub	sp, #44	; 0x2c
 800b790:	af04      	add	r7, sp, #16
 800b792:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b794:	4b6f      	ldr	r3, [pc, #444]	; (800b954 <tcp_listen_input+0x1c8>)
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	f003 0304 	and.w	r3, r3, #4
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f040 80d2 	bne.w	800b946 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d106      	bne.n	800b7b6 <tcp_listen_input+0x2a>
 800b7a8:	4b6b      	ldr	r3, [pc, #428]	; (800b958 <tcp_listen_input+0x1cc>)
 800b7aa:	f240 2281 	movw	r2, #641	; 0x281
 800b7ae:	496b      	ldr	r1, [pc, #428]	; (800b95c <tcp_listen_input+0x1d0>)
 800b7b0:	486b      	ldr	r0, [pc, #428]	; (800b960 <tcp_listen_input+0x1d4>)
 800b7b2:	f008 fda5 	bl	8014300 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b7b6:	4b67      	ldr	r3, [pc, #412]	; (800b954 <tcp_listen_input+0x1c8>)
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	f003 0310 	and.w	r3, r3, #16
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d019      	beq.n	800b7f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7c2:	4b68      	ldr	r3, [pc, #416]	; (800b964 <tcp_listen_input+0x1d8>)
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	4b68      	ldr	r3, [pc, #416]	; (800b968 <tcp_listen_input+0x1dc>)
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b67      	ldr	r3, [pc, #412]	; (800b96c <tcp_listen_input+0x1e0>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7d2:	4b67      	ldr	r3, [pc, #412]	; (800b970 <tcp_listen_input+0x1e4>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7d6:	885b      	ldrh	r3, [r3, #2]
 800b7d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7da:	4a65      	ldr	r2, [pc, #404]	; (800b970 <tcp_listen_input+0x1e4>)
 800b7dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7de:	8812      	ldrh	r2, [r2, #0]
 800b7e0:	b292      	uxth	r2, r2
 800b7e2:	9202      	str	r2, [sp, #8]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	4b63      	ldr	r3, [pc, #396]	; (800b974 <tcp_listen_input+0x1e8>)
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4b63      	ldr	r3, [pc, #396]	; (800b978 <tcp_listen_input+0x1ec>)
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f002 ff80 	bl	800e6f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b7f4:	e0a9      	b.n	800b94a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b7f6:	4b57      	ldr	r3, [pc, #348]	; (800b954 <tcp_listen_input+0x1c8>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	f000 80a3 	beq.w	800b94a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7d5b      	ldrb	r3, [r3, #21]
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff f927 	bl	800aa5c <tcp_alloc>
 800b80e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d111      	bne.n	800b83a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00a      	beq.n	800b834 <tcp_listen_input+0xa8>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6910      	ldr	r0, [r2, #16]
 800b826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b82a:	2100      	movs	r1, #0
 800b82c:	4798      	blx	r3
 800b82e:	4603      	mov	r3, r0
 800b830:	73bb      	strb	r3, [r7, #14]
      return;
 800b832:	e08b      	b.n	800b94c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b834:	23f0      	movs	r3, #240	; 0xf0
 800b836:	73bb      	strb	r3, [r7, #14]
      return;
 800b838:	e088      	b.n	800b94c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b83a:	4b50      	ldr	r3, [pc, #320]	; (800b97c <tcp_listen_input+0x1f0>)
 800b83c:	695a      	ldr	r2, [r3, #20]
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b842:	4b4e      	ldr	r3, [pc, #312]	; (800b97c <tcp_listen_input+0x1f0>)
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8ada      	ldrh	r2, [r3, #22]
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b852:	4b47      	ldr	r3, [pc, #284]	; (800b970 <tcp_listen_input+0x1e4>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	b29a      	uxth	r2, r3
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2203      	movs	r2, #3
 800b862:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b864:	4b41      	ldr	r3, [pc, #260]	; (800b96c <tcp_listen_input+0x1e0>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b876:	6978      	ldr	r0, [r7, #20]
 800b878:	f7ff fa58 	bl	800ad2c <tcp_next_iss>
 800b87c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b896:	4b35      	ldr	r3, [pc, #212]	; (800b96c <tcp_listen_input+0x1e0>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	1e5a      	subs	r2, r3, #1
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	691a      	ldr	r2, [r3, #16]
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7a5b      	ldrb	r3, [r3, #9]
 800b8b2:	f003 030c 	and.w	r3, r3, #12
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	7a1a      	ldrb	r2, [r3, #8]
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b8c4:	4b2e      	ldr	r3, [pc, #184]	; (800b980 <tcp_listen_input+0x1f4>)
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	60da      	str	r2, [r3, #12]
 800b8cc:	4a2c      	ldr	r2, [pc, #176]	; (800b980 <tcp_listen_input+0x1f4>)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	6013      	str	r3, [r2, #0]
 800b8d2:	f003 f8d1 	bl	800ea78 <tcp_timer_needed>
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	; (800b984 <tcp_listen_input+0x1f8>)
 800b8d8:	2201      	movs	r2, #1
 800b8da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b8dc:	6978      	ldr	r0, [r7, #20]
 800b8de:	f001 fd8f 	bl	800d400 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b8e2:	4b23      	ldr	r3, [pc, #140]	; (800b970 <tcp_listen_input+0x1e4>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	89db      	ldrh	r3, [r3, #14]
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	3304      	adds	r3, #4
 800b904:	4618      	mov	r0, r3
 800b906:	f006 fe5d 	bl	80125c4 <ip4_route>
 800b90a:	4601      	mov	r1, r0
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	3304      	adds	r3, #4
 800b910:	461a      	mov	r2, r3
 800b912:	4620      	mov	r0, r4
 800b914:	f7ff fa30 	bl	800ad78 <tcp_eff_send_mss_netif>
 800b918:	4603      	mov	r3, r0
 800b91a:	461a      	mov	r2, r3
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b920:	2112      	movs	r1, #18
 800b922:	6978      	ldr	r0, [r7, #20]
 800b924:	f002 f844 	bl	800d9b0 <tcp_enqueue_flags>
 800b928:	4603      	mov	r3, r0
 800b92a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b92c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d004      	beq.n	800b93e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b934:	2100      	movs	r1, #0
 800b936:	6978      	ldr	r0, [r7, #20]
 800b938:	f7fe f97e 	bl	8009c38 <tcp_abandon>
      return;
 800b93c:	e006      	b.n	800b94c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f002 f924 	bl	800db8c <tcp_output>
  return;
 800b944:	e001      	b.n	800b94a <tcp_listen_input+0x1be>
    return;
 800b946:	bf00      	nop
 800b948:	e000      	b.n	800b94c <tcp_listen_input+0x1c0>
  return;
 800b94a:	bf00      	nop
}
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd90      	pop	{r4, r7, pc}
 800b952:	bf00      	nop
 800b954:	2000c534 	.word	0x2000c534
 800b958:	080163c4 	.word	0x080163c4
 800b95c:	080165bc 	.word	0x080165bc
 800b960:	08016410 	.word	0x08016410
 800b964:	2000c52c 	.word	0x2000c52c
 800b968:	2000c532 	.word	0x2000c532
 800b96c:	2000c528 	.word	0x2000c528
 800b970:	2000c518 	.word	0x2000c518
 800b974:	20008d8c 	.word	0x20008d8c
 800b978:	20008d90 	.word	0x20008d90
 800b97c:	20008d7c 	.word	0x20008d7c
 800b980:	2000c4fc 	.word	0x2000c4fc
 800b984:	2000c504 	.word	0x2000c504

0800b988 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b086      	sub	sp, #24
 800b98c:	af04      	add	r7, sp, #16
 800b98e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b990:	4b2f      	ldr	r3, [pc, #188]	; (800ba50 <tcp_timewait_input+0xc8>)
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d153      	bne.n	800ba44 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d106      	bne.n	800b9b0 <tcp_timewait_input+0x28>
 800b9a2:	4b2c      	ldr	r3, [pc, #176]	; (800ba54 <tcp_timewait_input+0xcc>)
 800b9a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b9a8:	492b      	ldr	r1, [pc, #172]	; (800ba58 <tcp_timewait_input+0xd0>)
 800b9aa:	482c      	ldr	r0, [pc, #176]	; (800ba5c <tcp_timewait_input+0xd4>)
 800b9ac:	f008 fca8 	bl	8014300 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b9b0:	4b27      	ldr	r3, [pc, #156]	; (800ba50 <tcp_timewait_input+0xc8>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	f003 0302 	and.w	r3, r3, #2
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d02a      	beq.n	800ba12 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b9bc:	4b28      	ldr	r3, [pc, #160]	; (800ba60 <tcp_timewait_input+0xd8>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	db2d      	blt.n	800ba26 <tcp_timewait_input+0x9e>
 800b9ca:	4b25      	ldr	r3, [pc, #148]	; (800ba60 <tcp_timewait_input+0xd8>)
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b9d6:	440b      	add	r3, r1
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	dc23      	bgt.n	800ba26 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9de:	4b21      	ldr	r3, [pc, #132]	; (800ba64 <tcp_timewait_input+0xdc>)
 800b9e0:	6819      	ldr	r1, [r3, #0]
 800b9e2:	4b21      	ldr	r3, [pc, #132]	; (800ba68 <tcp_timewait_input+0xe0>)
 800b9e4:	881b      	ldrh	r3, [r3, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	4b1d      	ldr	r3, [pc, #116]	; (800ba60 <tcp_timewait_input+0xd8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9ee:	4b1f      	ldr	r3, [pc, #124]	; (800ba6c <tcp_timewait_input+0xe4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9f2:	885b      	ldrh	r3, [r3, #2]
 800b9f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9f6:	4a1d      	ldr	r2, [pc, #116]	; (800ba6c <tcp_timewait_input+0xe4>)
 800b9f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9fa:	8812      	ldrh	r2, [r2, #0]
 800b9fc:	b292      	uxth	r2, r2
 800b9fe:	9202      	str	r2, [sp, #8]
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	4b1b      	ldr	r3, [pc, #108]	; (800ba70 <tcp_timewait_input+0xe8>)
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	4b1b      	ldr	r3, [pc, #108]	; (800ba74 <tcp_timewait_input+0xec>)
 800ba08:	4602      	mov	r2, r0
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f002 fe72 	bl	800e6f4 <tcp_rst>
      return;
 800ba10:	e01b      	b.n	800ba4a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800ba12:	4b0f      	ldr	r3, [pc, #60]	; (800ba50 <tcp_timewait_input+0xc8>)
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ba1e:	4b16      	ldr	r3, [pc, #88]	; (800ba78 <tcp_timewait_input+0xf0>)
 800ba20:	681a      	ldr	r2, [r3, #0]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ba26:	4b10      	ldr	r3, [pc, #64]	; (800ba68 <tcp_timewait_input+0xe0>)
 800ba28:	881b      	ldrh	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00c      	beq.n	800ba48 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8b5b      	ldrh	r3, [r3, #26]
 800ba32:	f043 0302 	orr.w	r3, r3, #2
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f002 f8a5 	bl	800db8c <tcp_output>
  }
  return;
 800ba42:	e001      	b.n	800ba48 <tcp_timewait_input+0xc0>
    return;
 800ba44:	bf00      	nop
 800ba46:	e000      	b.n	800ba4a <tcp_timewait_input+0xc2>
  return;
 800ba48:	bf00      	nop
}
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	2000c534 	.word	0x2000c534
 800ba54:	080163c4 	.word	0x080163c4
 800ba58:	080165dc 	.word	0x080165dc
 800ba5c:	08016410 	.word	0x08016410
 800ba60:	2000c528 	.word	0x2000c528
 800ba64:	2000c52c 	.word	0x2000c52c
 800ba68:	2000c532 	.word	0x2000c532
 800ba6c:	2000c518 	.word	0x2000c518
 800ba70:	20008d8c 	.word	0x20008d8c
 800ba74:	20008d90 	.word	0x20008d90
 800ba78:	2000c4f0 	.word	0x2000c4f0

0800ba7c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ba7c:	b590      	push	{r4, r7, lr}
 800ba7e:	b08d      	sub	sp, #52	; 0x34
 800ba80:	af04      	add	r7, sp, #16
 800ba82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ba84:	2300      	movs	r3, #0
 800ba86:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d106      	bne.n	800baa0 <tcp_process+0x24>
 800ba92:	4b9d      	ldr	r3, [pc, #628]	; (800bd08 <tcp_process+0x28c>)
 800ba94:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ba98:	499c      	ldr	r1, [pc, #624]	; (800bd0c <tcp_process+0x290>)
 800ba9a:	489d      	ldr	r0, [pc, #628]	; (800bd10 <tcp_process+0x294>)
 800ba9c:	f008 fc30 	bl	8014300 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800baa0:	4b9c      	ldr	r3, [pc, #624]	; (800bd14 <tcp_process+0x298>)
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d04e      	beq.n	800bb4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	7d1b      	ldrb	r3, [r3, #20]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d108      	bne.n	800bac6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bab8:	4b97      	ldr	r3, [pc, #604]	; (800bd18 <tcp_process+0x29c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	429a      	cmp	r2, r3
 800babe:	d123      	bne.n	800bb08 <tcp_process+0x8c>
        acceptable = 1;
 800bac0:	2301      	movs	r3, #1
 800bac2:	76fb      	strb	r3, [r7, #27]
 800bac4:	e020      	b.n	800bb08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baca:	4b94      	ldr	r3, [pc, #592]	; (800bd1c <tcp_process+0x2a0>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	429a      	cmp	r2, r3
 800bad0:	d102      	bne.n	800bad8 <tcp_process+0x5c>
        acceptable = 1;
 800bad2:	2301      	movs	r3, #1
 800bad4:	76fb      	strb	r3, [r7, #27]
 800bad6:	e017      	b.n	800bb08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bad8:	4b90      	ldr	r3, [pc, #576]	; (800bd1c <tcp_process+0x2a0>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	db10      	blt.n	800bb08 <tcp_process+0x8c>
 800bae6:	4b8d      	ldr	r3, [pc, #564]	; (800bd1c <tcp_process+0x2a0>)
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baee:	6879      	ldr	r1, [r7, #4]
 800baf0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800baf2:	440b      	add	r3, r1
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	dc06      	bgt.n	800bb08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	8b5b      	ldrh	r3, [r3, #26]
 800bafe:	f043 0302 	orr.w	r3, r3, #2
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bb08:	7efb      	ldrb	r3, [r7, #27]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d01b      	beq.n	800bb46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	7d1b      	ldrb	r3, [r3, #20]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d106      	bne.n	800bb24 <tcp_process+0xa8>
 800bb16:	4b7c      	ldr	r3, [pc, #496]	; (800bd08 <tcp_process+0x28c>)
 800bb18:	f44f 724e 	mov.w	r2, #824	; 0x338
 800bb1c:	4980      	ldr	r1, [pc, #512]	; (800bd20 <tcp_process+0x2a4>)
 800bb1e:	487c      	ldr	r0, [pc, #496]	; (800bd10 <tcp_process+0x294>)
 800bb20:	f008 fbee 	bl	8014300 <iprintf>
      recv_flags |= TF_RESET;
 800bb24:	4b7f      	ldr	r3, [pc, #508]	; (800bd24 <tcp_process+0x2a8>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f043 0308 	orr.w	r3, r3, #8
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	4b7d      	ldr	r3, [pc, #500]	; (800bd24 <tcp_process+0x2a8>)
 800bb30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	8b5b      	ldrh	r3, [r3, #26]
 800bb36:	f023 0301 	bic.w	r3, r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bb40:	f06f 030d 	mvn.w	r3, #13
 800bb44:	e37a      	b.n	800c23c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	e378      	b.n	800c23c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bb4a:	4b72      	ldr	r3, [pc, #456]	; (800bd14 <tcp_process+0x298>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f003 0302 	and.w	r3, r3, #2
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d010      	beq.n	800bb78 <tcp_process+0xfc>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7d1b      	ldrb	r3, [r3, #20]
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d00c      	beq.n	800bb78 <tcp_process+0xfc>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	7d1b      	ldrb	r3, [r3, #20]
 800bb62:	2b03      	cmp	r3, #3
 800bb64:	d008      	beq.n	800bb78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	8b5b      	ldrh	r3, [r3, #26]
 800bb6a:	f043 0302 	orr.w	r3, r3, #2
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bb74:	2300      	movs	r3, #0
 800bb76:	e361      	b.n	800c23c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	8b5b      	ldrh	r3, [r3, #26]
 800bb7c:	f003 0310 	and.w	r3, r3, #16
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d103      	bne.n	800bb8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bb84:	4b68      	ldr	r3, [pc, #416]	; (800bd28 <tcp_process+0x2ac>)
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fc2f 	bl	800d400 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7d1b      	ldrb	r3, [r3, #20]
 800bba6:	3b02      	subs	r3, #2
 800bba8:	2b07      	cmp	r3, #7
 800bbaa:	f200 8337 	bhi.w	800c21c <tcp_process+0x7a0>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <tcp_process+0x138>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800be05 	.word	0x0800be05
 800bbbc:	0800bf7d 	.word	0x0800bf7d
 800bbc0:	0800bfa7 	.word	0x0800bfa7
 800bbc4:	0800c0cb 	.word	0x0800c0cb
 800bbc8:	0800bf7d 	.word	0x0800bf7d
 800bbcc:	0800c157 	.word	0x0800c157
 800bbd0:	0800c1e7 	.word	0x0800c1e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bbd4:	4b4f      	ldr	r3, [pc, #316]	; (800bd14 <tcp_process+0x298>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 0310 	and.w	r3, r3, #16
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 80e4 	beq.w	800bdaa <tcp_process+0x32e>
 800bbe2:	4b4c      	ldr	r3, [pc, #304]	; (800bd14 <tcp_process+0x298>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 0302 	and.w	r3, r3, #2
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f000 80dd 	beq.w	800bdaa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf4:	1c5a      	adds	r2, r3, #1
 800bbf6:	4b48      	ldr	r3, [pc, #288]	; (800bd18 <tcp_process+0x29c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	f040 80d5 	bne.w	800bdaa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bc00:	4b46      	ldr	r3, [pc, #280]	; (800bd1c <tcp_process+0x2a0>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800bc12:	4b41      	ldr	r3, [pc, #260]	; (800bd18 <tcp_process+0x29c>)
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bc1a:	4b44      	ldr	r3, [pc, #272]	; (800bd2c <tcp_process+0x2b0>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	89db      	ldrh	r3, [r3, #14]
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bc34:	4b39      	ldr	r3, [pc, #228]	; (800bd1c <tcp_process+0x2a0>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	1e5a      	subs	r2, r3, #1
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2204      	movs	r2, #4
 800bc42:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f006 fcb9 	bl	80125c4 <ip4_route>
 800bc52:	4601      	mov	r1, r0
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	461a      	mov	r2, r3
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f7ff f88c 	bl	800ad78 <tcp_eff_send_mss_netif>
 800bc60:	4603      	mov	r3, r0
 800bc62:	461a      	mov	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc6c:	009a      	lsls	r2, r3, #2
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	f241 111c 	movw	r1, #4380	; 0x111c
 800bc78:	428b      	cmp	r3, r1
 800bc7a:	bf38      	it	cc
 800bc7c:	460b      	movcc	r3, r1
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d204      	bcs.n	800bc8c <tcp_process+0x210>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	e00d      	b.n	800bca8 <tcp_process+0x22c>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	f241 121c 	movw	r2, #4380	; 0x111c
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d904      	bls.n	800bca4 <tcp_process+0x228>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc9e:	005b      	lsls	r3, r3, #1
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	e001      	b.n	800bca8 <tcp_process+0x22c>
 800bca4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d106      	bne.n	800bcc6 <tcp_process+0x24a>
 800bcb8:	4b13      	ldr	r3, [pc, #76]	; (800bd08 <tcp_process+0x28c>)
 800bcba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800bcbe:	491c      	ldr	r1, [pc, #112]	; (800bd30 <tcp_process+0x2b4>)
 800bcc0:	4813      	ldr	r0, [pc, #76]	; (800bd10 <tcp_process+0x294>)
 800bcc2:	f008 fb1d 	bl	8014300 <iprintf>
        --pcb->snd_queuelen;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bccc:	3b01      	subs	r3, #1
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcda:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d12a      	bne.n	800bd38 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bce6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d106      	bne.n	800bcfc <tcp_process+0x280>
 800bcee:	4b06      	ldr	r3, [pc, #24]	; (800bd08 <tcp_process+0x28c>)
 800bcf0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800bcf4:	490f      	ldr	r1, [pc, #60]	; (800bd34 <tcp_process+0x2b8>)
 800bcf6:	4806      	ldr	r0, [pc, #24]	; (800bd10 <tcp_process+0x294>)
 800bcf8:	f008 fb02 	bl	8014300 <iprintf>
          pcb->unsent = rseg->next;
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd04:	e01c      	b.n	800bd40 <tcp_process+0x2c4>
 800bd06:	bf00      	nop
 800bd08:	080163c4 	.word	0x080163c4
 800bd0c:	080165fc 	.word	0x080165fc
 800bd10:	08016410 	.word	0x08016410
 800bd14:	2000c534 	.word	0x2000c534
 800bd18:	2000c52c 	.word	0x2000c52c
 800bd1c:	2000c528 	.word	0x2000c528
 800bd20:	08016618 	.word	0x08016618
 800bd24:	2000c535 	.word	0x2000c535
 800bd28:	2000c4f0 	.word	0x2000c4f0
 800bd2c:	2000c518 	.word	0x2000c518
 800bd30:	08016638 	.word	0x08016638
 800bd34:	08016650 	.word	0x08016650
        } else {
          pcb->unacked = rseg->next;
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800bd40:	69f8      	ldr	r0, [r7, #28]
 800bd42:	f7fe fd22 	bl	800a78a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d104      	bne.n	800bd58 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd54:	861a      	strh	r2, [r3, #48]	; 0x30
 800bd56:	e006      	b.n	800bd66 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d00a      	beq.n	800bd86 <tcp_process+0x30a>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	6910      	ldr	r0, [r2, #16]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	4798      	blx	r3
 800bd80:	4603      	mov	r3, r0
 800bd82:	76bb      	strb	r3, [r7, #26]
 800bd84:	e001      	b.n	800bd8a <tcp_process+0x30e>
 800bd86:	2300      	movs	r3, #0
 800bd88:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bd8a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bd8e:	f113 0f0d 	cmn.w	r3, #13
 800bd92:	d102      	bne.n	800bd9a <tcp_process+0x31e>
          return ERR_ABRT;
 800bd94:	f06f 030c 	mvn.w	r3, #12
 800bd98:	e250      	b.n	800c23c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8b5b      	ldrh	r3, [r3, #26]
 800bd9e:	f043 0302 	orr.w	r3, r3, #2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bda8:	e23a      	b.n	800c220 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bdaa:	4b98      	ldr	r3, [pc, #608]	; (800c00c <tcp_process+0x590>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	f003 0310 	and.w	r3, r3, #16
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 8234 	beq.w	800c220 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdb8:	4b95      	ldr	r3, [pc, #596]	; (800c010 <tcp_process+0x594>)
 800bdba:	6819      	ldr	r1, [r3, #0]
 800bdbc:	4b95      	ldr	r3, [pc, #596]	; (800c014 <tcp_process+0x598>)
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b95      	ldr	r3, [pc, #596]	; (800c018 <tcp_process+0x59c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdc8:	4b94      	ldr	r3, [pc, #592]	; (800c01c <tcp_process+0x5a0>)
 800bdca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdcc:	885b      	ldrh	r3, [r3, #2]
 800bdce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bdd0:	4a92      	ldr	r2, [pc, #584]	; (800c01c <tcp_process+0x5a0>)
 800bdd2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bdd4:	8812      	ldrh	r2, [r2, #0]
 800bdd6:	b292      	uxth	r2, r2
 800bdd8:	9202      	str	r2, [sp, #8]
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	4b90      	ldr	r3, [pc, #576]	; (800c020 <tcp_process+0x5a4>)
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	4b90      	ldr	r3, [pc, #576]	; (800c024 <tcp_process+0x5a8>)
 800bde2:	4602      	mov	r2, r0
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f002 fc85 	bl	800e6f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdf0:	2b05      	cmp	r3, #5
 800bdf2:	f200 8215 	bhi.w	800c220 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f002 fa51 	bl	800e2a4 <tcp_rexmit_rto>
      break;
 800be02:	e20d      	b.n	800c220 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800be04:	4b81      	ldr	r3, [pc, #516]	; (800c00c <tcp_process+0x590>)
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	f003 0310 	and.w	r3, r3, #16
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	f000 80a1 	beq.w	800bf54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800be12:	4b7f      	ldr	r3, [pc, #508]	; (800c010 <tcp_process+0x594>)
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	3b01      	subs	r3, #1
 800be1e:	2b00      	cmp	r3, #0
 800be20:	db7e      	blt.n	800bf20 <tcp_process+0x4a4>
 800be22:	4b7b      	ldr	r3, [pc, #492]	; (800c010 <tcp_process+0x594>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dc77      	bgt.n	800bf20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2204      	movs	r2, #4
 800be34:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d102      	bne.n	800be44 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800be3e:	23fa      	movs	r3, #250	; 0xfa
 800be40:	76bb      	strb	r3, [r7, #26]
 800be42:	e01d      	b.n	800be80 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d106      	bne.n	800be5c <tcp_process+0x3e0>
 800be4e:	4b76      	ldr	r3, [pc, #472]	; (800c028 <tcp_process+0x5ac>)
 800be50:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800be54:	4975      	ldr	r1, [pc, #468]	; (800c02c <tcp_process+0x5b0>)
 800be56:	4876      	ldr	r0, [pc, #472]	; (800c030 <tcp_process+0x5b4>)
 800be58:	f008 fa52 	bl	8014300 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be60:	699b      	ldr	r3, [r3, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00a      	beq.n	800be7c <tcp_process+0x400>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	6910      	ldr	r0, [r2, #16]
 800be70:	2200      	movs	r2, #0
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4798      	blx	r3
 800be76:	4603      	mov	r3, r0
 800be78:	76bb      	strb	r3, [r7, #26]
 800be7a:	e001      	b.n	800be80 <tcp_process+0x404>
 800be7c:	23f0      	movs	r3, #240	; 0xf0
 800be7e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800be80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00a      	beq.n	800be9e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800be88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800be8c:	f113 0f0d 	cmn.w	r3, #13
 800be90:	d002      	beq.n	800be98 <tcp_process+0x41c>
              tcp_abort(pcb);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f7fd ff8e 	bl	8009db4 <tcp_abort>
            }
            return ERR_ABRT;
 800be98:	f06f 030c 	mvn.w	r3, #12
 800be9c:	e1ce      	b.n	800c23c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fae0 	bl	800c464 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bea4:	4b63      	ldr	r3, [pc, #396]	; (800c034 <tcp_process+0x5b8>)
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d005      	beq.n	800beb8 <tcp_process+0x43c>
            recv_acked--;
 800beac:	4b61      	ldr	r3, [pc, #388]	; (800c034 <tcp_process+0x5b8>)
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	3b01      	subs	r3, #1
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	4b5f      	ldr	r3, [pc, #380]	; (800c034 <tcp_process+0x5b8>)
 800beb6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bebc:	009a      	lsls	r2, r3, #2
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bec2:	005b      	lsls	r3, r3, #1
 800bec4:	f241 111c 	movw	r1, #4380	; 0x111c
 800bec8:	428b      	cmp	r3, r1
 800beca:	bf38      	it	cc
 800becc:	460b      	movcc	r3, r1
 800bece:	429a      	cmp	r2, r3
 800bed0:	d204      	bcs.n	800bedc <tcp_process+0x460>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	b29b      	uxth	r3, r3
 800beda:	e00d      	b.n	800bef8 <tcp_process+0x47c>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	f241 121c 	movw	r2, #4380	; 0x111c
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d904      	bls.n	800bef4 <tcp_process+0x478>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	e001      	b.n	800bef8 <tcp_process+0x47c>
 800bef4:	f241 131c 	movw	r3, #4380	; 0x111c
 800bef8:	687a      	ldr	r2, [r7, #4]
 800befa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800befe:	4b4e      	ldr	r3, [pc, #312]	; (800c038 <tcp_process+0x5bc>)
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	f003 0320 	and.w	r3, r3, #32
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d037      	beq.n	800bf7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	8b5b      	ldrh	r3, [r3, #26]
 800bf0e:	f043 0302 	orr.w	r3, r3, #2
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2207      	movs	r2, #7
 800bf1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800bf1e:	e02c      	b.n	800bf7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf20:	4b3b      	ldr	r3, [pc, #236]	; (800c010 <tcp_process+0x594>)
 800bf22:	6819      	ldr	r1, [r3, #0]
 800bf24:	4b3b      	ldr	r3, [pc, #236]	; (800c014 <tcp_process+0x598>)
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	4b3b      	ldr	r3, [pc, #236]	; (800c018 <tcp_process+0x59c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf30:	4b3a      	ldr	r3, [pc, #232]	; (800c01c <tcp_process+0x5a0>)
 800bf32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf34:	885b      	ldrh	r3, [r3, #2]
 800bf36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf38:	4a38      	ldr	r2, [pc, #224]	; (800c01c <tcp_process+0x5a0>)
 800bf3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf3c:	8812      	ldrh	r2, [r2, #0]
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	9202      	str	r2, [sp, #8]
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	4b36      	ldr	r3, [pc, #216]	; (800c020 <tcp_process+0x5a4>)
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4b36      	ldr	r3, [pc, #216]	; (800c024 <tcp_process+0x5a8>)
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f002 fbd1 	bl	800e6f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800bf52:	e167      	b.n	800c224 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800bf54:	4b2d      	ldr	r3, [pc, #180]	; (800c00c <tcp_process+0x590>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f000 8161 	beq.w	800c224 <tcp_process+0x7a8>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf66:	1e5a      	subs	r2, r3, #1
 800bf68:	4b2b      	ldr	r3, [pc, #172]	; (800c018 <tcp_process+0x59c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	f040 8159 	bne.w	800c224 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f002 f9b8 	bl	800e2e8 <tcp_rexmit>
      break;
 800bf78:	e154      	b.n	800c224 <tcp_process+0x7a8>
 800bf7a:	e153      	b.n	800c224 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fa71 	bl	800c464 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800bf82:	4b2d      	ldr	r3, [pc, #180]	; (800c038 <tcp_process+0x5bc>)
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	f003 0320 	and.w	r3, r3, #32
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 814c 	beq.w	800c228 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	8b5b      	ldrh	r3, [r3, #26]
 800bf94:	f043 0302 	orr.w	r3, r3, #2
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2207      	movs	r2, #7
 800bfa2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bfa4:	e140      	b.n	800c228 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fa5c 	bl	800c464 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bfac:	4b22      	ldr	r3, [pc, #136]	; (800c038 <tcp_process+0x5bc>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d071      	beq.n	800c09c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bfb8:	4b14      	ldr	r3, [pc, #80]	; (800c00c <tcp_process+0x590>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	f003 0310 	and.w	r3, r3, #16
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d060      	beq.n	800c086 <tcp_process+0x60a>
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfc8:	4b11      	ldr	r3, [pc, #68]	; (800c010 <tcp_process+0x594>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d15a      	bne.n	800c086 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d156      	bne.n	800c086 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	8b5b      	ldrh	r3, [r3, #26]
 800bfdc:	f043 0302 	orr.w	r3, r3, #2
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7fe fdbc 	bl	800ab64 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800bfec:	4b13      	ldr	r3, [pc, #76]	; (800c03c <tcp_process+0x5c0>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d105      	bne.n	800c002 <tcp_process+0x586>
 800bff6:	4b11      	ldr	r3, [pc, #68]	; (800c03c <tcp_process+0x5c0>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	4a0f      	ldr	r2, [pc, #60]	; (800c03c <tcp_process+0x5c0>)
 800bffe:	6013      	str	r3, [r2, #0]
 800c000:	e02e      	b.n	800c060 <tcp_process+0x5e4>
 800c002:	4b0e      	ldr	r3, [pc, #56]	; (800c03c <tcp_process+0x5c0>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	617b      	str	r3, [r7, #20]
 800c008:	e027      	b.n	800c05a <tcp_process+0x5de>
 800c00a:	bf00      	nop
 800c00c:	2000c534 	.word	0x2000c534
 800c010:	2000c52c 	.word	0x2000c52c
 800c014:	2000c532 	.word	0x2000c532
 800c018:	2000c528 	.word	0x2000c528
 800c01c:	2000c518 	.word	0x2000c518
 800c020:	20008d8c 	.word	0x20008d8c
 800c024:	20008d90 	.word	0x20008d90
 800c028:	080163c4 	.word	0x080163c4
 800c02c:	08016664 	.word	0x08016664
 800c030:	08016410 	.word	0x08016410
 800c034:	2000c530 	.word	0x2000c530
 800c038:	2000c535 	.word	0x2000c535
 800c03c:	2000c4fc 	.word	0x2000c4fc
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	429a      	cmp	r2, r3
 800c048:	d104      	bne.n	800c054 <tcp_process+0x5d8>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	68da      	ldr	r2, [r3, #12]
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e005      	b.n	800c060 <tcp_process+0x5e4>
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1ef      	bne.n	800c040 <tcp_process+0x5c4>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	60da      	str	r2, [r3, #12]
 800c066:	4b77      	ldr	r3, [pc, #476]	; (800c244 <tcp_process+0x7c8>)
 800c068:	2201      	movs	r2, #1
 800c06a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	220a      	movs	r2, #10
 800c070:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c072:	4b75      	ldr	r3, [pc, #468]	; (800c248 <tcp_process+0x7cc>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	60da      	str	r2, [r3, #12]
 800c07a:	4a73      	ldr	r2, [pc, #460]	; (800c248 <tcp_process+0x7cc>)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	f002 fcfa 	bl	800ea78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c084:	e0d2      	b.n	800c22c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	8b5b      	ldrh	r3, [r3, #26]
 800c08a:	f043 0302 	orr.w	r3, r3, #2
 800c08e:	b29a      	uxth	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2208      	movs	r2, #8
 800c098:	751a      	strb	r2, [r3, #20]
      break;
 800c09a:	e0c7      	b.n	800c22c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c09c:	4b6b      	ldr	r3, [pc, #428]	; (800c24c <tcp_process+0x7d0>)
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	f003 0310 	and.w	r3, r3, #16
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80c1 	beq.w	800c22c <tcp_process+0x7b0>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0ae:	4b68      	ldr	r3, [pc, #416]	; (800c250 <tcp_process+0x7d4>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f040 80ba 	bne.w	800c22c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f040 80b5 	bne.w	800c22c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2206      	movs	r2, #6
 800c0c6:	751a      	strb	r2, [r3, #20]
      break;
 800c0c8:	e0b0      	b.n	800c22c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f9ca 	bl	800c464 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0d0:	4b60      	ldr	r3, [pc, #384]	; (800c254 <tcp_process+0x7d8>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f003 0320 	and.w	r3, r3, #32
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	f000 80a9 	beq.w	800c230 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8b5b      	ldrh	r3, [r3, #26]
 800c0e2:	f043 0302 	orr.w	r3, r3, #2
 800c0e6:	b29a      	uxth	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f7fe fd39 	bl	800ab64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c0f2:	4b59      	ldr	r3, [pc, #356]	; (800c258 <tcp_process+0x7dc>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d105      	bne.n	800c108 <tcp_process+0x68c>
 800c0fc:	4b56      	ldr	r3, [pc, #344]	; (800c258 <tcp_process+0x7dc>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	4a55      	ldr	r2, [pc, #340]	; (800c258 <tcp_process+0x7dc>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	e013      	b.n	800c130 <tcp_process+0x6b4>
 800c108:	4b53      	ldr	r3, [pc, #332]	; (800c258 <tcp_process+0x7dc>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	613b      	str	r3, [r7, #16]
 800c10e:	e00c      	b.n	800c12a <tcp_process+0x6ae>
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	429a      	cmp	r2, r3
 800c118:	d104      	bne.n	800c124 <tcp_process+0x6a8>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	68da      	ldr	r2, [r3, #12]
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	60da      	str	r2, [r3, #12]
 800c122:	e005      	b.n	800c130 <tcp_process+0x6b4>
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	68db      	ldr	r3, [r3, #12]
 800c128:	613b      	str	r3, [r7, #16]
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1ef      	bne.n	800c110 <tcp_process+0x694>
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	60da      	str	r2, [r3, #12]
 800c136:	4b43      	ldr	r3, [pc, #268]	; (800c244 <tcp_process+0x7c8>)
 800c138:	2201      	movs	r2, #1
 800c13a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	220a      	movs	r2, #10
 800c140:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c142:	4b41      	ldr	r3, [pc, #260]	; (800c248 <tcp_process+0x7cc>)
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	60da      	str	r2, [r3, #12]
 800c14a:	4a3f      	ldr	r2, [pc, #252]	; (800c248 <tcp_process+0x7cc>)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	f002 fc92 	bl	800ea78 <tcp_timer_needed>
      }
      break;
 800c154:	e06c      	b.n	800c230 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f984 	bl	800c464 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c15c:	4b3b      	ldr	r3, [pc, #236]	; (800c24c <tcp_process+0x7d0>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	f003 0310 	and.w	r3, r3, #16
 800c164:	2b00      	cmp	r3, #0
 800c166:	d065      	beq.n	800c234 <tcp_process+0x7b8>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c16c:	4b38      	ldr	r3, [pc, #224]	; (800c250 <tcp_process+0x7d4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	429a      	cmp	r2, r3
 800c172:	d15f      	bne.n	800c234 <tcp_process+0x7b8>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d15b      	bne.n	800c234 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7fe fcf1 	bl	800ab64 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c182:	4b35      	ldr	r3, [pc, #212]	; (800c258 <tcp_process+0x7dc>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d105      	bne.n	800c198 <tcp_process+0x71c>
 800c18c:	4b32      	ldr	r3, [pc, #200]	; (800c258 <tcp_process+0x7dc>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	4a31      	ldr	r2, [pc, #196]	; (800c258 <tcp_process+0x7dc>)
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	e013      	b.n	800c1c0 <tcp_process+0x744>
 800c198:	4b2f      	ldr	r3, [pc, #188]	; (800c258 <tcp_process+0x7dc>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	e00c      	b.n	800c1ba <tcp_process+0x73e>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d104      	bne.n	800c1b4 <tcp_process+0x738>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	68da      	ldr	r2, [r3, #12]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	60da      	str	r2, [r3, #12]
 800c1b2:	e005      	b.n	800c1c0 <tcp_process+0x744>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1ef      	bne.n	800c1a0 <tcp_process+0x724>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	60da      	str	r2, [r3, #12]
 800c1c6:	4b1f      	ldr	r3, [pc, #124]	; (800c244 <tcp_process+0x7c8>)
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	220a      	movs	r2, #10
 800c1d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c1d2:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <tcp_process+0x7cc>)
 800c1d4:	681a      	ldr	r2, [r3, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	60da      	str	r2, [r3, #12]
 800c1da:	4a1b      	ldr	r2, [pc, #108]	; (800c248 <tcp_process+0x7cc>)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6013      	str	r3, [r2, #0]
 800c1e0:	f002 fc4a 	bl	800ea78 <tcp_timer_needed>
      }
      break;
 800c1e4:	e026      	b.n	800c234 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f93c 	bl	800c464 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c1ec:	4b17      	ldr	r3, [pc, #92]	; (800c24c <tcp_process+0x7d0>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 0310 	and.w	r3, r3, #16
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01f      	beq.n	800c238 <tcp_process+0x7bc>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1fc:	4b14      	ldr	r3, [pc, #80]	; (800c250 <tcp_process+0x7d4>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d119      	bne.n	800c238 <tcp_process+0x7bc>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d115      	bne.n	800c238 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c20c:	4b11      	ldr	r3, [pc, #68]	; (800c254 <tcp_process+0x7d8>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f043 0310 	orr.w	r3, r3, #16
 800c214:	b2da      	uxtb	r2, r3
 800c216:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <tcp_process+0x7d8>)
 800c218:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c21a:	e00d      	b.n	800c238 <tcp_process+0x7bc>
    default:
      break;
 800c21c:	bf00      	nop
 800c21e:	e00c      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c220:	bf00      	nop
 800c222:	e00a      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c224:	bf00      	nop
 800c226:	e008      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c228:	bf00      	nop
 800c22a:	e006      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c22c:	bf00      	nop
 800c22e:	e004      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c230:	bf00      	nop
 800c232:	e002      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c234:	bf00      	nop
 800c236:	e000      	b.n	800c23a <tcp_process+0x7be>
      break;
 800c238:	bf00      	nop
  }
  return ERR_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3724      	adds	r7, #36	; 0x24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd90      	pop	{r4, r7, pc}
 800c244:	2000c504 	.word	0x2000c504
 800c248:	2000c500 	.word	0x2000c500
 800c24c:	2000c534 	.word	0x2000c534
 800c250:	2000c52c 	.word	0x2000c52c
 800c254:	2000c535 	.word	0x2000c535
 800c258:	2000c4fc 	.word	0x2000c4fc

0800c25c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c25c:	b590      	push	{r4, r7, lr}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <tcp_oos_insert_segment+0x1e>
 800c26c:	4b3b      	ldr	r3, [pc, #236]	; (800c35c <tcp_oos_insert_segment+0x100>)
 800c26e:	f240 421f 	movw	r2, #1055	; 0x41f
 800c272:	493b      	ldr	r1, [pc, #236]	; (800c360 <tcp_oos_insert_segment+0x104>)
 800c274:	483b      	ldr	r0, [pc, #236]	; (800c364 <tcp_oos_insert_segment+0x108>)
 800c276:	f008 f843 	bl	8014300 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68db      	ldr	r3, [r3, #12]
 800c27e:	899b      	ldrh	r3, [r3, #12]
 800c280:	b29b      	uxth	r3, r3
 800c282:	4618      	mov	r0, r3
 800c284:	f7fb fbf4 	bl	8007a70 <lwip_htons>
 800c288:	4603      	mov	r3, r0
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	f003 0301 	and.w	r3, r3, #1
 800c290:	2b00      	cmp	r3, #0
 800c292:	d028      	beq.n	800c2e6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c294:	6838      	ldr	r0, [r7, #0]
 800c296:	f7fe fa63 	bl	800a760 <tcp_segs_free>
    next = NULL;
 800c29a:	2300      	movs	r3, #0
 800c29c:	603b      	str	r3, [r7, #0]
 800c29e:	e056      	b.n	800c34e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	899b      	ldrh	r3, [r3, #12]
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f7fb fbe1 	bl	8007a70 <lwip_htons>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f003 0301 	and.w	r3, r3, #1
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d00d      	beq.n	800c2d6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	68db      	ldr	r3, [r3, #12]
 800c2be:	899b      	ldrh	r3, [r3, #12]
 800c2c0:	b29c      	uxth	r4, r3
 800c2c2:	2001      	movs	r0, #1
 800c2c4:	f7fb fbd4 	bl	8007a70 <lwip_htons>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	4322      	orrs	r2, r4
 800c2d2:	b292      	uxth	r2, r2
 800c2d4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7fe fa52 	bl	800a78a <tcp_seg_free>
    while (next &&
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	891b      	ldrh	r3, [r3, #8]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	4b1d      	ldr	r3, [pc, #116]	; (800c368 <tcp_oos_insert_segment+0x10c>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	441a      	add	r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	68db      	ldr	r3, [r3, #12]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	6839      	ldr	r1, [r7, #0]
 800c300:	8909      	ldrh	r1, [r1, #8]
 800c302:	440b      	add	r3, r1
 800c304:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c306:	2b00      	cmp	r3, #0
 800c308:	daca      	bge.n	800c2a0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d01e      	beq.n	800c34e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	891b      	ldrh	r3, [r3, #8]
 800c314:	461a      	mov	r2, r3
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <tcp_oos_insert_segment+0x10c>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	441a      	add	r2, r3
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c324:	2b00      	cmp	r3, #0
 800c326:	dd12      	ble.n	800c34e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	b29a      	uxth	r2, r3
 800c330:	4b0d      	ldr	r3, [pc, #52]	; (800c368 <tcp_oos_insert_segment+0x10c>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	b29b      	uxth	r3, r3
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	b29a      	uxth	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685a      	ldr	r2, [r3, #4]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	891b      	ldrh	r3, [r3, #8]
 800c346:	4619      	mov	r1, r3
 800c348:	4610      	mov	r0, r2
 800c34a:	f7fc fe09 	bl	8008f60 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	683a      	ldr	r2, [r7, #0]
 800c352:	601a      	str	r2, [r3, #0]
}
 800c354:	bf00      	nop
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd90      	pop	{r4, r7, pc}
 800c35c:	080163c4 	.word	0x080163c4
 800c360:	08016684 	.word	0x08016684
 800c364:	08016410 	.word	0x08016410
 800c368:	2000c528 	.word	0x2000c528

0800c36c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c36c:	b5b0      	push	{r4, r5, r7, lr}
 800c36e:	b086      	sub	sp, #24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
 800c378:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c37a:	e03e      	b.n	800c3fa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7fc fffc 	bl	8009388 <pbuf_clen>
 800c390:	4603      	mov	r3, r0
 800c392:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c39a:	8a7a      	ldrh	r2, [r7, #18]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d906      	bls.n	800c3ae <tcp_free_acked_segments+0x42>
 800c3a0:	4b2a      	ldr	r3, [pc, #168]	; (800c44c <tcp_free_acked_segments+0xe0>)
 800c3a2:	f240 4257 	movw	r2, #1111	; 0x457
 800c3a6:	492a      	ldr	r1, [pc, #168]	; (800c450 <tcp_free_acked_segments+0xe4>)
 800c3a8:	482a      	ldr	r0, [pc, #168]	; (800c454 <tcp_free_acked_segments+0xe8>)
 800c3aa:	f007 ffa9 	bl	8014300 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800c3b4:	8a7b      	ldrh	r3, [r7, #18]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	b29a      	uxth	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	891a      	ldrh	r2, [r3, #8]
 800c3c4:	4b24      	ldr	r3, [pc, #144]	; (800c458 <tcp_free_acked_segments+0xec>)
 800c3c6:	881b      	ldrh	r3, [r3, #0]
 800c3c8:	4413      	add	r3, r2
 800c3ca:	b29a      	uxth	r2, r3
 800c3cc:	4b22      	ldr	r3, [pc, #136]	; (800c458 <tcp_free_acked_segments+0xec>)
 800c3ce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c3d0:	6978      	ldr	r0, [r7, #20]
 800c3d2:	f7fe f9da 	bl	800a78a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00c      	beq.n	800c3fa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d109      	bne.n	800c3fa <tcp_free_acked_segments+0x8e>
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d106      	bne.n	800c3fa <tcp_free_acked_segments+0x8e>
 800c3ec:	4b17      	ldr	r3, [pc, #92]	; (800c44c <tcp_free_acked_segments+0xe0>)
 800c3ee:	f240 4261 	movw	r2, #1121	; 0x461
 800c3f2:	491a      	ldr	r1, [pc, #104]	; (800c45c <tcp_free_acked_segments+0xf0>)
 800c3f4:	4817      	ldr	r0, [pc, #92]	; (800c454 <tcp_free_acked_segments+0xe8>)
 800c3f6:	f007 ff83 	bl	8014300 <iprintf>
  while (seg_list != NULL &&
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d020      	beq.n	800c442 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	4618      	mov	r0, r3
 800c408:	f7fb fb47 	bl	8007a9a <lwip_htonl>
 800c40c:	4604      	mov	r4, r0
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	891b      	ldrh	r3, [r3, #8]
 800c412:	461d      	mov	r5, r3
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	899b      	ldrh	r3, [r3, #12]
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7fb fb27 	bl	8007a70 <lwip_htons>
 800c422:	4603      	mov	r3, r0
 800c424:	b2db      	uxtb	r3, r3
 800c426:	f003 0303 	and.w	r3, r3, #3
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <tcp_free_acked_segments+0xc6>
 800c42e:	2301      	movs	r3, #1
 800c430:	e000      	b.n	800c434 <tcp_free_acked_segments+0xc8>
 800c432:	2300      	movs	r3, #0
 800c434:	442b      	add	r3, r5
 800c436:	18e2      	adds	r2, r4, r3
 800c438:	4b09      	ldr	r3, [pc, #36]	; (800c460 <tcp_free_acked_segments+0xf4>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c43e:	2b00      	cmp	r3, #0
 800c440:	dd9c      	ble.n	800c37c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c442:	68bb      	ldr	r3, [r7, #8]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bdb0      	pop	{r4, r5, r7, pc}
 800c44c:	080163c4 	.word	0x080163c4
 800c450:	080166ac 	.word	0x080166ac
 800c454:	08016410 	.word	0x08016410
 800c458:	2000c530 	.word	0x2000c530
 800c45c:	080166d4 	.word	0x080166d4
 800c460:	2000c52c 	.word	0x2000c52c

0800c464 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c464:	b5b0      	push	{r4, r5, r7, lr}
 800c466:	b094      	sub	sp, #80	; 0x50
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d106      	bne.n	800c484 <tcp_receive+0x20>
 800c476:	4b91      	ldr	r3, [pc, #580]	; (800c6bc <tcp_receive+0x258>)
 800c478:	f240 427b 	movw	r2, #1147	; 0x47b
 800c47c:	4990      	ldr	r1, [pc, #576]	; (800c6c0 <tcp_receive+0x25c>)
 800c47e:	4891      	ldr	r0, [pc, #580]	; (800c6c4 <tcp_receive+0x260>)
 800c480:	f007 ff3e 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7d1b      	ldrb	r3, [r3, #20]
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d806      	bhi.n	800c49a <tcp_receive+0x36>
 800c48c:	4b8b      	ldr	r3, [pc, #556]	; (800c6bc <tcp_receive+0x258>)
 800c48e:	f240 427c 	movw	r2, #1148	; 0x47c
 800c492:	498d      	ldr	r1, [pc, #564]	; (800c6c8 <tcp_receive+0x264>)
 800c494:	488b      	ldr	r0, [pc, #556]	; (800c6c4 <tcp_receive+0x260>)
 800c496:	f007 ff33 	bl	8014300 <iprintf>

  if (flags & TCP_ACK) {
 800c49a:	4b8c      	ldr	r3, [pc, #560]	; (800c6cc <tcp_receive+0x268>)
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	f003 0310 	and.w	r3, r3, #16
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 8264 	beq.w	800c970 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4b4:	4413      	add	r3, r2
 800c4b6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4bc:	4b84      	ldr	r3, [pc, #528]	; (800c6d0 <tcp_receive+0x26c>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	db1b      	blt.n	800c4fe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c4ca:	4b81      	ldr	r3, [pc, #516]	; (800c6d0 <tcp_receive+0x26c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d106      	bne.n	800c4e0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c4d6:	4b7f      	ldr	r3, [pc, #508]	; (800c6d4 <tcp_receive+0x270>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	db0e      	blt.n	800c4fe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c4e4:	4b7b      	ldr	r3, [pc, #492]	; (800c6d4 <tcp_receive+0x270>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d125      	bne.n	800c538 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c4ec:	4b7a      	ldr	r3, [pc, #488]	; (800c6d8 <tcp_receive+0x274>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	89db      	ldrh	r3, [r3, #14]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d91c      	bls.n	800c538 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c4fe:	4b76      	ldr	r3, [pc, #472]	; (800c6d8 <tcp_receive+0x274>)
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	89db      	ldrh	r3, [r3, #14]
 800c504:	b29a      	uxth	r2, r3
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c518:	429a      	cmp	r2, r3
 800c51a:	d205      	bcs.n	800c528 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800c528:	4b69      	ldr	r3, [pc, #420]	; (800c6d0 <tcp_receive+0x26c>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800c530:	4b68      	ldr	r3, [pc, #416]	; (800c6d4 <tcp_receive+0x270>)
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c538:	4b66      	ldr	r3, [pc, #408]	; (800c6d4 <tcp_receive+0x270>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	dc58      	bgt.n	800c5f8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c546:	4b65      	ldr	r3, [pc, #404]	; (800c6dc <tcp_receive+0x278>)
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d14b      	bne.n	800c5e6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800c558:	4413      	add	r3, r2
 800c55a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d142      	bne.n	800c5e6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c566:	2b00      	cmp	r3, #0
 800c568:	db3d      	blt.n	800c5e6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c56e:	4b59      	ldr	r3, [pc, #356]	; (800c6d4 <tcp_receive+0x270>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d137      	bne.n	800c5e6 <tcp_receive+0x182>
              found_dupack = 1;
 800c576:	2301      	movs	r3, #1
 800c578:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c580:	2bff      	cmp	r3, #255	; 0xff
 800c582:	d007      	beq.n	800c594 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c58a:	3301      	adds	r3, #1
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c59a:	2b03      	cmp	r3, #3
 800c59c:	d91b      	bls.n	800c5d6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5a8:	4413      	add	r3, r2
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d30a      	bcc.n	800c5cc <tcp_receive+0x168>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c5c0:	4413      	add	r3, r2
 800c5c2:	b29a      	uxth	r2, r3
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c5ca:	e004      	b.n	800c5d6 <tcp_receive+0x172>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c5d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d902      	bls.n	800c5e6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f001 feed 	bl	800e3c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c5e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	f040 8161 	bne.w	800c8b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5f6:	e15b      	b.n	800c8b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c5f8:	4b36      	ldr	r3, [pc, #216]	; (800c6d4 <tcp_receive+0x270>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	3b01      	subs	r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	f2c0 814e 	blt.w	800c8a6 <tcp_receive+0x442>
 800c60a:	4b32      	ldr	r3, [pc, #200]	; (800c6d4 <tcp_receive+0x270>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	f300 8146 	bgt.w	800c8a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	8b5b      	ldrh	r3, [r3, #26]
 800c61e:	f003 0304 	and.w	r3, r3, #4
 800c622:	2b00      	cmp	r3, #0
 800c624:	d010      	beq.n	800c648 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	8b5b      	ldrh	r3, [r3, #26]
 800c62a:	f023 0304 	bic.w	r3, r3, #4
 800c62e:	b29a      	uxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c656:	10db      	asrs	r3, r3, #3
 800c658:	b21b      	sxth	r3, r3
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c662:	b29b      	uxth	r3, r3
 800c664:	4413      	add	r3, r2
 800c666:	b29b      	uxth	r3, r3
 800c668:	b21a      	sxth	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c670:	4b18      	ldr	r3, [pc, #96]	; (800c6d4 <tcp_receive+0x270>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	b29a      	uxth	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c688:	4b12      	ldr	r3, [pc, #72]	; (800c6d4 <tcp_receive+0x270>)
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	7d1b      	ldrb	r3, [r3, #20]
 800c694:	2b03      	cmp	r3, #3
 800c696:	f240 8097 	bls.w	800c7c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d245      	bcs.n	800c736 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	8b5b      	ldrh	r3, [r3, #26]
 800c6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d014      	beq.n	800c6e0 <tcp_receive+0x27c>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e013      	b.n	800c6e2 <tcp_receive+0x27e>
 800c6ba:	bf00      	nop
 800c6bc:	080163c4 	.word	0x080163c4
 800c6c0:	080166f4 	.word	0x080166f4
 800c6c4:	08016410 	.word	0x08016410
 800c6c8:	08016710 	.word	0x08016710
 800c6cc:	2000c534 	.word	0x2000c534
 800c6d0:	2000c528 	.word	0x2000c528
 800c6d4:	2000c52c 	.word	0x2000c52c
 800c6d8:	2000c518 	.word	0x2000c518
 800c6dc:	2000c532 	.word	0x2000c532
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c6e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c6ea:	b29a      	uxth	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6f0:	fb12 f303 	smulbb	r3, r2, r3
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	bf28      	it	cs
 800c6fc:	4613      	movcs	r3, r2
 800c6fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c708:	4413      	add	r3, r2
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c712:	429a      	cmp	r2, r3
 800c714:	d309      	bcc.n	800c72a <tcp_receive+0x2c6>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c71c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c71e:	4413      	add	r3, r2
 800c720:	b29a      	uxth	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c728:	e04e      	b.n	800c7c8 <tcp_receive+0x364>
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c730:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c734:	e048      	b.n	800c7c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c73c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c73e:	4413      	add	r3, r2
 800c740:	b29a      	uxth	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c748:	429a      	cmp	r2, r3
 800c74a:	d309      	bcc.n	800c760 <tcp_receive+0x2fc>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c752:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c754:	4413      	add	r3, r2
 800c756:	b29a      	uxth	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c75e:	e004      	b.n	800c76a <tcp_receive+0x306>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c766:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c776:	429a      	cmp	r2, r3
 800c778:	d326      	bcc.n	800c7c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	b29a      	uxth	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c79a:	4413      	add	r3, r2
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d30a      	bcc.n	800c7be <tcp_receive+0x35a>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7b2:	4413      	add	r3, r2
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c7bc:	e004      	b.n	800c7c8 <tcp_receive+0x364>
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c7c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7d0:	4a98      	ldr	r2, [pc, #608]	; (800ca34 <tcp_receive+0x5d0>)
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f7ff fdca 	bl	800c36c <tcp_free_acked_segments>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e6:	4a94      	ldr	r2, [pc, #592]	; (800ca38 <tcp_receive+0x5d4>)
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7ff fdbf 	bl	800c36c <tcp_free_acked_segments>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d104      	bne.n	800c806 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c802:	861a      	strh	r2, [r3, #48]	; 0x30
 800c804:	e002      	b.n	800c80c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2200      	movs	r2, #0
 800c80a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d103      	bne.n	800c822 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c828:	4b84      	ldr	r3, [pc, #528]	; (800ca3c <tcp_receive+0x5d8>)
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	4413      	add	r3, r2
 800c82e:	b29a      	uxth	r2, r3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	8b5b      	ldrh	r3, [r3, #26]
 800c83a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d035      	beq.n	800c8ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c846:	2b00      	cmp	r3, #0
 800c848:	d118      	bne.n	800c87c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00c      	beq.n	800c86c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c85a:	68db      	ldr	r3, [r3, #12]
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fb f91b 	bl	8007a9a <lwip_htonl>
 800c864:	4603      	mov	r3, r0
 800c866:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dc20      	bgt.n	800c8ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	8b5b      	ldrh	r3, [r3, #26]
 800c870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c874:	b29a      	uxth	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c87a:	e018      	b.n	800c8ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	685b      	ldr	r3, [r3, #4]
 800c888:	4618      	mov	r0, r3
 800c88a:	f7fb f906 	bl	8007a9a <lwip_htonl>
 800c88e:	4603      	mov	r3, r0
 800c890:	1ae3      	subs	r3, r4, r3
 800c892:	2b00      	cmp	r3, #0
 800c894:	dc0b      	bgt.n	800c8ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	8b5b      	ldrh	r3, [r3, #26]
 800c89a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c8a4:	e003      	b.n	800c8ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f001 ff76 	bl	800e798 <tcp_send_empty_ack>
 800c8ac:	e000      	b.n	800c8b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c8ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d05b      	beq.n	800c970 <tcp_receive+0x50c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8bc:	4b60      	ldr	r3, [pc, #384]	; (800ca40 <tcp_receive+0x5dc>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da54      	bge.n	800c970 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c8c6:	4b5f      	ldr	r3, [pc, #380]	; (800ca44 <tcp_receive+0x5e0>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c8da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8e4:	10db      	asrs	r3, r3, #3
 800c8e6:	b21b      	sxth	r3, r3
 800c8e8:	b29b      	uxth	r3, r3
 800c8ea:	1ad3      	subs	r3, r2, r3
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c8fe:	4413      	add	r3, r2
 800c900:	b29b      	uxth	r3, r3
 800c902:	b21a      	sxth	r2, r3
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c908:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	da05      	bge.n	800c91c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c914:	425b      	negs	r3, r3
 800c916:	b29b      	uxth	r3, r3
 800c918:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c91c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c926:	109b      	asrs	r3, r3, #2
 800c928:	b21b      	sxth	r3, r3
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	b29b      	uxth	r3, r3
 800c930:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c940:	4413      	add	r3, r2
 800c942:	b29b      	uxth	r3, r3
 800c944:	b21a      	sxth	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c950:	10db      	asrs	r3, r3, #3
 800c952:	b21b      	sxth	r3, r3
 800c954:	b29a      	uxth	r2, r3
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	4413      	add	r3, r2
 800c960:	b29b      	uxth	r3, r3
 800c962:	b21a      	sxth	r2, r3
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2200      	movs	r2, #0
 800c96e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c970:	4b35      	ldr	r3, [pc, #212]	; (800ca48 <tcp_receive+0x5e4>)
 800c972:	881b      	ldrh	r3, [r3, #0]
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 84e2 	beq.w	800d33e <tcp_receive+0xeda>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	7d1b      	ldrb	r3, [r3, #20]
 800c97e:	2b06      	cmp	r3, #6
 800c980:	f200 84dd 	bhi.w	800d33e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c988:	4b30      	ldr	r3, [pc, #192]	; (800ca4c <tcp_receive+0x5e8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	3b01      	subs	r3, #1
 800c990:	2b00      	cmp	r3, #0
 800c992:	f2c0 808f 	blt.w	800cab4 <tcp_receive+0x650>
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c99a:	4b2b      	ldr	r3, [pc, #172]	; (800ca48 <tcp_receive+0x5e4>)
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4b2a      	ldr	r3, [pc, #168]	; (800ca4c <tcp_receive+0x5e8>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	440b      	add	r3, r1
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	f300 8082 	bgt.w	800cab4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c9b0:	4b27      	ldr	r3, [pc, #156]	; (800ca50 <tcp_receive+0x5ec>)
 800c9b2:	685b      	ldr	r3, [r3, #4]
 800c9b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ba:	4b24      	ldr	r3, [pc, #144]	; (800ca4c <tcp_receive+0x5e8>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c9c2:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <tcp_receive+0x5ec>)
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d106      	bne.n	800c9d8 <tcp_receive+0x574>
 800c9ca:	4b22      	ldr	r3, [pc, #136]	; (800ca54 <tcp_receive+0x5f0>)
 800c9cc:	f240 5294 	movw	r2, #1428	; 0x594
 800c9d0:	4921      	ldr	r1, [pc, #132]	; (800ca58 <tcp_receive+0x5f4>)
 800c9d2:	4822      	ldr	r0, [pc, #136]	; (800ca5c <tcp_receive+0x5f8>)
 800c9d4:	f007 fc94 	bl	8014300 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d906      	bls.n	800c9f0 <tcp_receive+0x58c>
 800c9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ca54 <tcp_receive+0x5f0>)
 800c9e4:	f240 5295 	movw	r2, #1429	; 0x595
 800c9e8:	491d      	ldr	r1, [pc, #116]	; (800ca60 <tcp_receive+0x5fc>)
 800c9ea:	481c      	ldr	r0, [pc, #112]	; (800ca5c <tcp_receive+0x5f8>)
 800c9ec:	f007 fc88 	bl	8014300 <iprintf>
      off = (u16_t)off32;
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c9f6:	4b16      	ldr	r3, [pc, #88]	; (800ca50 <tcp_receive+0x5ec>)
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	891b      	ldrh	r3, [r3, #8]
 800c9fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d906      	bls.n	800ca12 <tcp_receive+0x5ae>
 800ca04:	4b13      	ldr	r3, [pc, #76]	; (800ca54 <tcp_receive+0x5f0>)
 800ca06:	f240 5297 	movw	r2, #1431	; 0x597
 800ca0a:	4916      	ldr	r1, [pc, #88]	; (800ca64 <tcp_receive+0x600>)
 800ca0c:	4813      	ldr	r0, [pc, #76]	; (800ca5c <tcp_receive+0x5f8>)
 800ca0e:	f007 fc77 	bl	8014300 <iprintf>
      inseg.len -= off;
 800ca12:	4b0f      	ldr	r3, [pc, #60]	; (800ca50 <tcp_receive+0x5ec>)
 800ca14:	891a      	ldrh	r2, [r3, #8]
 800ca16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	4b0c      	ldr	r3, [pc, #48]	; (800ca50 <tcp_receive+0x5ec>)
 800ca20:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ca22:	4b0b      	ldr	r3, [pc, #44]	; (800ca50 <tcp_receive+0x5ec>)
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	891a      	ldrh	r2, [r3, #8]
 800ca28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ca30:	e02a      	b.n	800ca88 <tcp_receive+0x624>
 800ca32:	bf00      	nop
 800ca34:	0801672c 	.word	0x0801672c
 800ca38:	08016734 	.word	0x08016734
 800ca3c:	2000c530 	.word	0x2000c530
 800ca40:	2000c52c 	.word	0x2000c52c
 800ca44:	2000c4f0 	.word	0x2000c4f0
 800ca48:	2000c532 	.word	0x2000c532
 800ca4c:	2000c528 	.word	0x2000c528
 800ca50:	2000c508 	.word	0x2000c508
 800ca54:	080163c4 	.word	0x080163c4
 800ca58:	0801673c 	.word	0x0801673c
 800ca5c:	08016410 	.word	0x08016410
 800ca60:	0801674c 	.word	0x0801674c
 800ca64:	0801675c 	.word	0x0801675c
        off -= p->len;
 800ca68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca6a:	895b      	ldrh	r3, [r3, #10]
 800ca6c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ca76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca78:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ca7a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ca7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca7e:	2200      	movs	r2, #0
 800ca80:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ca82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ca88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca8a:	895b      	ldrh	r3, [r3, #10]
 800ca8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d8e9      	bhi.n	800ca68 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ca94:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ca9c:	f7fc fb60 	bl	8009160 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caa4:	4a91      	ldr	r2, [pc, #580]	; (800ccec <tcp_receive+0x888>)
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	4b91      	ldr	r3, [pc, #580]	; (800ccf0 <tcp_receive+0x88c>)
 800caaa:	68db      	ldr	r3, [r3, #12]
 800caac:	4a8f      	ldr	r2, [pc, #572]	; (800ccec <tcp_receive+0x888>)
 800caae:	6812      	ldr	r2, [r2, #0]
 800cab0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cab2:	e00d      	b.n	800cad0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cab4:	4b8d      	ldr	r3, [pc, #564]	; (800ccec <tcp_receive+0x888>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	1ad3      	subs	r3, r2, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	da06      	bge.n	800cad0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	8b5b      	ldrh	r3, [r3, #26]
 800cac6:	f043 0302 	orr.w	r3, r3, #2
 800caca:	b29a      	uxth	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cad0:	4b86      	ldr	r3, [pc, #536]	; (800ccec <tcp_receive+0x888>)
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad8:	1ad3      	subs	r3, r2, r3
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f2c0 842a 	blt.w	800d334 <tcp_receive+0xed0>
 800cae0:	4b82      	ldr	r3, [pc, #520]	; (800ccec <tcp_receive+0x888>)
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800caec:	440b      	add	r3, r1
 800caee:	1ad3      	subs	r3, r2, r3
 800caf0:	3301      	adds	r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	f300 841e 	bgt.w	800d334 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cafc:	4b7b      	ldr	r3, [pc, #492]	; (800ccec <tcp_receive+0x888>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	f040 829a 	bne.w	800d03a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cb06:	4b7a      	ldr	r3, [pc, #488]	; (800ccf0 <tcp_receive+0x88c>)
 800cb08:	891c      	ldrh	r4, [r3, #8]
 800cb0a:	4b79      	ldr	r3, [pc, #484]	; (800ccf0 <tcp_receive+0x88c>)
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	899b      	ldrh	r3, [r3, #12]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	4618      	mov	r0, r3
 800cb14:	f7fa ffac 	bl	8007a70 <lwip_htons>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d001      	beq.n	800cb28 <tcp_receive+0x6c4>
 800cb24:	2301      	movs	r3, #1
 800cb26:	e000      	b.n	800cb2a <tcp_receive+0x6c6>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4423      	add	r3, r4
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	4b71      	ldr	r3, [pc, #452]	; (800ccf4 <tcp_receive+0x890>)
 800cb30:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb36:	4b6f      	ldr	r3, [pc, #444]	; (800ccf4 <tcp_receive+0x890>)
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d275      	bcs.n	800cc2a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cb3e:	4b6c      	ldr	r3, [pc, #432]	; (800ccf0 <tcp_receive+0x88c>)
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	899b      	ldrh	r3, [r3, #12]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fa ff92 	bl	8007a70 <lwip_htons>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	f003 0301 	and.w	r3, r3, #1
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d01f      	beq.n	800cb98 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cb58:	4b65      	ldr	r3, [pc, #404]	; (800ccf0 <tcp_receive+0x88c>)
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	899b      	ldrh	r3, [r3, #12]
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	b21b      	sxth	r3, r3
 800cb62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cb66:	b21c      	sxth	r4, r3
 800cb68:	4b61      	ldr	r3, [pc, #388]	; (800ccf0 <tcp_receive+0x88c>)
 800cb6a:	68db      	ldr	r3, [r3, #12]
 800cb6c:	899b      	ldrh	r3, [r3, #12]
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fa ff7d 	bl	8007a70 <lwip_htons>
 800cb76:	4603      	mov	r3, r0
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fa ff74 	bl	8007a70 <lwip_htons>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	b21b      	sxth	r3, r3
 800cb8c:	4323      	orrs	r3, r4
 800cb8e:	b21a      	sxth	r2, r3
 800cb90:	4b57      	ldr	r3, [pc, #348]	; (800ccf0 <tcp_receive+0x88c>)
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	b292      	uxth	r2, r2
 800cb96:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cb9c:	4b54      	ldr	r3, [pc, #336]	; (800ccf0 <tcp_receive+0x88c>)
 800cb9e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cba0:	4b53      	ldr	r3, [pc, #332]	; (800ccf0 <tcp_receive+0x88c>)
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	899b      	ldrh	r3, [r3, #12]
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fa ff61 	bl	8007a70 <lwip_htons>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f003 0302 	and.w	r3, r3, #2
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d005      	beq.n	800cbc6 <tcp_receive+0x762>
            inseg.len -= 1;
 800cbba:	4b4d      	ldr	r3, [pc, #308]	; (800ccf0 <tcp_receive+0x88c>)
 800cbbc:	891b      	ldrh	r3, [r3, #8]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	4b4b      	ldr	r3, [pc, #300]	; (800ccf0 <tcp_receive+0x88c>)
 800cbc4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cbc6:	4b4a      	ldr	r3, [pc, #296]	; (800ccf0 <tcp_receive+0x88c>)
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	4a49      	ldr	r2, [pc, #292]	; (800ccf0 <tcp_receive+0x88c>)
 800cbcc:	8912      	ldrh	r2, [r2, #8]
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f7fc f9c5 	bl	8008f60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cbd6:	4b46      	ldr	r3, [pc, #280]	; (800ccf0 <tcp_receive+0x88c>)
 800cbd8:	891c      	ldrh	r4, [r3, #8]
 800cbda:	4b45      	ldr	r3, [pc, #276]	; (800ccf0 <tcp_receive+0x88c>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	899b      	ldrh	r3, [r3, #12]
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fa ff44 	bl	8007a70 <lwip_htons>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	b2db      	uxtb	r3, r3
 800cbec:	f003 0303 	and.w	r3, r3, #3
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <tcp_receive+0x794>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e000      	b.n	800cbfa <tcp_receive+0x796>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	4423      	add	r3, r4
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	4b3d      	ldr	r3, [pc, #244]	; (800ccf4 <tcp_receive+0x890>)
 800cc00:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc02:	4b3c      	ldr	r3, [pc, #240]	; (800ccf4 <tcp_receive+0x890>)
 800cc04:	881b      	ldrh	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	4b38      	ldr	r3, [pc, #224]	; (800ccec <tcp_receive+0x888>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	441a      	add	r2, r3
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc12:	6879      	ldr	r1, [r7, #4]
 800cc14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc16:	440b      	add	r3, r1
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d006      	beq.n	800cc2a <tcp_receive+0x7c6>
 800cc1c:	4b36      	ldr	r3, [pc, #216]	; (800ccf8 <tcp_receive+0x894>)
 800cc1e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800cc22:	4936      	ldr	r1, [pc, #216]	; (800ccfc <tcp_receive+0x898>)
 800cc24:	4836      	ldr	r0, [pc, #216]	; (800cd00 <tcp_receive+0x89c>)
 800cc26:	f007 fb6b 	bl	8014300 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f000 80e7 	beq.w	800ce02 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc34:	4b2e      	ldr	r3, [pc, #184]	; (800ccf0 <tcp_receive+0x88c>)
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	899b      	ldrh	r3, [r3, #12]
 800cc3a:	b29b      	uxth	r3, r3
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7fa ff17 	bl	8007a70 <lwip_htons>
 800cc42:	4603      	mov	r3, r0
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	f003 0301 	and.w	r3, r3, #1
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d010      	beq.n	800cc70 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cc4e:	e00a      	b.n	800cc66 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc54:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800cc60:	68f8      	ldr	r0, [r7, #12]
 800cc62:	f7fd fd92 	bl	800a78a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d1f0      	bne.n	800cc50 <tcp_receive+0x7ec>
 800cc6e:	e0c8      	b.n	800ce02 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc74:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cc76:	e052      	b.n	800cd1e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	899b      	ldrh	r3, [r3, #12]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7fa fef5 	bl	8007a70 <lwip_htons>
 800cc86:	4603      	mov	r3, r0
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0301 	and.w	r3, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d03d      	beq.n	800cd0e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cc92:	4b17      	ldr	r3, [pc, #92]	; (800ccf0 <tcp_receive+0x88c>)
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	899b      	ldrh	r3, [r3, #12]
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fa fee8 	bl	8007a70 <lwip_htons>
 800cca0:	4603      	mov	r3, r0
 800cca2:	b2db      	uxtb	r3, r3
 800cca4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d130      	bne.n	800cd0e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ccac:	4b10      	ldr	r3, [pc, #64]	; (800ccf0 <tcp_receive+0x88c>)
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	899b      	ldrh	r3, [r3, #12]
 800ccb2:	b29c      	uxth	r4, r3
 800ccb4:	2001      	movs	r0, #1
 800ccb6:	f7fa fedb 	bl	8007a70 <lwip_htons>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <tcp_receive+0x88c>)
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	4322      	orrs	r2, r4
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ccc8:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <tcp_receive+0x88c>)
 800ccca:	891c      	ldrh	r4, [r3, #8]
 800cccc:	4b08      	ldr	r3, [pc, #32]	; (800ccf0 <tcp_receive+0x88c>)
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	899b      	ldrh	r3, [r3, #12]
 800ccd2:	b29b      	uxth	r3, r3
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fa fecb 	bl	8007a70 <lwip_htons>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	b2db      	uxtb	r3, r3
 800ccde:	f003 0303 	and.w	r3, r3, #3
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00e      	beq.n	800cd04 <tcp_receive+0x8a0>
 800cce6:	2301      	movs	r3, #1
 800cce8:	e00d      	b.n	800cd06 <tcp_receive+0x8a2>
 800ccea:	bf00      	nop
 800ccec:	2000c528 	.word	0x2000c528
 800ccf0:	2000c508 	.word	0x2000c508
 800ccf4:	2000c532 	.word	0x2000c532
 800ccf8:	080163c4 	.word	0x080163c4
 800ccfc:	0801676c 	.word	0x0801676c
 800cd00:	08016410 	.word	0x08016410
 800cd04:	2300      	movs	r3, #0
 800cd06:	4423      	add	r3, r4
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	4b98      	ldr	r3, [pc, #608]	; (800cf6c <tcp_receive+0xb08>)
 800cd0c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	613b      	str	r3, [r7, #16]
              next = next->next;
 800cd12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800cd18:	6938      	ldr	r0, [r7, #16]
 800cd1a:	f7fd fd36 	bl	800a78a <tcp_seg_free>
            while (next &&
 800cd1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00e      	beq.n	800cd42 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800cd24:	4b91      	ldr	r3, [pc, #580]	; (800cf6c <tcp_receive+0xb08>)
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	461a      	mov	r2, r3
 800cd2a:	4b91      	ldr	r3, [pc, #580]	; (800cf70 <tcp_receive+0xb0c>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	441a      	add	r2, r3
 800cd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cd38:	8909      	ldrh	r1, [r1, #8]
 800cd3a:	440b      	add	r3, r1
 800cd3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	da9a      	bge.n	800cc78 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800cd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d059      	beq.n	800cdfc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800cd48:	4b88      	ldr	r3, [pc, #544]	; (800cf6c <tcp_receive+0xb08>)
 800cd4a:	881b      	ldrh	r3, [r3, #0]
 800cd4c:	461a      	mov	r2, r3
 800cd4e:	4b88      	ldr	r3, [pc, #544]	; (800cf70 <tcp_receive+0xb0c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	441a      	add	r2, r3
 800cd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dd4d      	ble.n	800cdfc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	4b81      	ldr	r3, [pc, #516]	; (800cf70 <tcp_receive+0xb0c>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	4b80      	ldr	r3, [pc, #512]	; (800cf74 <tcp_receive+0xb10>)
 800cd74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800cd76:	4b7f      	ldr	r3, [pc, #508]	; (800cf74 <tcp_receive+0xb10>)
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	899b      	ldrh	r3, [r3, #12]
 800cd7c:	b29b      	uxth	r3, r3
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f7fa fe76 	bl	8007a70 <lwip_htons>
 800cd84:	4603      	mov	r3, r0
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <tcp_receive+0x938>
                inseg.len -= 1;
 800cd90:	4b78      	ldr	r3, [pc, #480]	; (800cf74 <tcp_receive+0xb10>)
 800cd92:	891b      	ldrh	r3, [r3, #8]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	b29a      	uxth	r2, r3
 800cd98:	4b76      	ldr	r3, [pc, #472]	; (800cf74 <tcp_receive+0xb10>)
 800cd9a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800cd9c:	4b75      	ldr	r3, [pc, #468]	; (800cf74 <tcp_receive+0xb10>)
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	4a74      	ldr	r2, [pc, #464]	; (800cf74 <tcp_receive+0xb10>)
 800cda2:	8912      	ldrh	r2, [r2, #8]
 800cda4:	4611      	mov	r1, r2
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fc f8da 	bl	8008f60 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cdac:	4b71      	ldr	r3, [pc, #452]	; (800cf74 <tcp_receive+0xb10>)
 800cdae:	891c      	ldrh	r4, [r3, #8]
 800cdb0:	4b70      	ldr	r3, [pc, #448]	; (800cf74 <tcp_receive+0xb10>)
 800cdb2:	68db      	ldr	r3, [r3, #12]
 800cdb4:	899b      	ldrh	r3, [r3, #12]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fa fe59 	bl	8007a70 <lwip_htons>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	f003 0303 	and.w	r3, r3, #3
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <tcp_receive+0x96a>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <tcp_receive+0x96c>
 800cdce:	2300      	movs	r3, #0
 800cdd0:	4423      	add	r3, r4
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	4b65      	ldr	r3, [pc, #404]	; (800cf6c <tcp_receive+0xb08>)
 800cdd6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cdd8:	4b64      	ldr	r3, [pc, #400]	; (800cf6c <tcp_receive+0xb08>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b64      	ldr	r3, [pc, #400]	; (800cf70 <tcp_receive+0xb0c>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	441a      	add	r2, r3
 800cde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d006      	beq.n	800cdfc <tcp_receive+0x998>
 800cdee:	4b62      	ldr	r3, [pc, #392]	; (800cf78 <tcp_receive+0xb14>)
 800cdf0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800cdf4:	4961      	ldr	r1, [pc, #388]	; (800cf7c <tcp_receive+0xb18>)
 800cdf6:	4862      	ldr	r0, [pc, #392]	; (800cf80 <tcp_receive+0xb1c>)
 800cdf8:	f007 fa82 	bl	8014300 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce00:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ce02:	4b5a      	ldr	r3, [pc, #360]	; (800cf6c <tcp_receive+0xb08>)
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	461a      	mov	r2, r3
 800ce08:	4b59      	ldr	r3, [pc, #356]	; (800cf70 <tcp_receive+0xb0c>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	441a      	add	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce16:	4b55      	ldr	r3, [pc, #340]	; (800cf6c <tcp_receive+0xb08>)
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d206      	bcs.n	800ce2c <tcp_receive+0x9c8>
 800ce1e:	4b56      	ldr	r3, [pc, #344]	; (800cf78 <tcp_receive+0xb14>)
 800ce20:	f240 6207 	movw	r2, #1543	; 0x607
 800ce24:	4957      	ldr	r1, [pc, #348]	; (800cf84 <tcp_receive+0xb20>)
 800ce26:	4856      	ldr	r0, [pc, #344]	; (800cf80 <tcp_receive+0xb1c>)
 800ce28:	f007 fa6a 	bl	8014300 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ce30:	4b4e      	ldr	r3, [pc, #312]	; (800cf6c <tcp_receive+0xb08>)
 800ce32:	881b      	ldrh	r3, [r3, #0]
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7fc ffc5 	bl	8009dcc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ce42:	4b4c      	ldr	r3, [pc, #304]	; (800cf74 <tcp_receive+0xb10>)
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	891b      	ldrh	r3, [r3, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d006      	beq.n	800ce5a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ce4c:	4b49      	ldr	r3, [pc, #292]	; (800cf74 <tcp_receive+0xb10>)
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	4a4d      	ldr	r2, [pc, #308]	; (800cf88 <tcp_receive+0xb24>)
 800ce52:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ce54:	4b47      	ldr	r3, [pc, #284]	; (800cf74 <tcp_receive+0xb10>)
 800ce56:	2200      	movs	r2, #0
 800ce58:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ce5a:	4b46      	ldr	r3, [pc, #280]	; (800cf74 <tcp_receive+0xb10>)
 800ce5c:	68db      	ldr	r3, [r3, #12]
 800ce5e:	899b      	ldrh	r3, [r3, #12]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	4618      	mov	r0, r3
 800ce64:	f7fa fe04 	bl	8007a70 <lwip_htons>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	f003 0301 	and.w	r3, r3, #1
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80b8 	beq.w	800cfe6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ce76:	4b45      	ldr	r3, [pc, #276]	; (800cf8c <tcp_receive+0xb28>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	f043 0320 	orr.w	r3, r3, #32
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	4b42      	ldr	r3, [pc, #264]	; (800cf8c <tcp_receive+0xb28>)
 800ce82:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ce84:	e0af      	b.n	800cfe6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce8a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	4a36      	ldr	r2, [pc, #216]	; (800cf70 <tcp_receive+0xb0c>)
 800ce96:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	891b      	ldrh	r3, [r3, #8]
 800ce9c:	461c      	mov	r4, r3
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	899b      	ldrh	r3, [r3, #12]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fa fde2 	bl	8007a70 <lwip_htons>
 800ceac:	4603      	mov	r3, r0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d001      	beq.n	800cebc <tcp_receive+0xa58>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e000      	b.n	800cebe <tcp_receive+0xa5a>
 800cebc:	2300      	movs	r3, #0
 800cebe:	191a      	adds	r2, r3, r4
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cec4:	441a      	add	r2, r3
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cece:	461c      	mov	r4, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	891b      	ldrh	r3, [r3, #8]
 800ced4:	461d      	mov	r5, r3
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	899b      	ldrh	r3, [r3, #12]
 800cedc:	b29b      	uxth	r3, r3
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fa fdc6 	bl	8007a70 <lwip_htons>
 800cee4:	4603      	mov	r3, r0
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	f003 0303 	and.w	r3, r3, #3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d001      	beq.n	800cef4 <tcp_receive+0xa90>
 800cef0:	2301      	movs	r3, #1
 800cef2:	e000      	b.n	800cef6 <tcp_receive+0xa92>
 800cef4:	2300      	movs	r3, #0
 800cef6:	442b      	add	r3, r5
 800cef8:	429c      	cmp	r4, r3
 800cefa:	d206      	bcs.n	800cf0a <tcp_receive+0xaa6>
 800cefc:	4b1e      	ldr	r3, [pc, #120]	; (800cf78 <tcp_receive+0xb14>)
 800cefe:	f240 622b 	movw	r2, #1579	; 0x62b
 800cf02:	4923      	ldr	r1, [pc, #140]	; (800cf90 <tcp_receive+0xb2c>)
 800cf04:	481e      	ldr	r0, [pc, #120]	; (800cf80 <tcp_receive+0xb1c>)
 800cf06:	f007 f9fb 	bl	8014300 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	891b      	ldrh	r3, [r3, #8]
 800cf0e:	461c      	mov	r4, r3
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	899b      	ldrh	r3, [r3, #12]
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7fa fda9 	bl	8007a70 <lwip_htons>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	f003 0303 	and.w	r3, r3, #3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d001      	beq.n	800cf2e <tcp_receive+0xaca>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e000      	b.n	800cf30 <tcp_receive+0xacc>
 800cf2e:	2300      	movs	r3, #0
 800cf30:	1919      	adds	r1, r3, r4
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf36:	b28b      	uxth	r3, r1
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7fc ff43 	bl	8009dcc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	891b      	ldrh	r3, [r3, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d028      	beq.n	800cfa2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800cf50:	4b0d      	ldr	r3, [pc, #52]	; (800cf88 <tcp_receive+0xb24>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d01d      	beq.n	800cf94 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800cf58:	4b0b      	ldr	r3, [pc, #44]	; (800cf88 <tcp_receive+0xb24>)
 800cf5a:	681a      	ldr	r2, [r3, #0]
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	4619      	mov	r1, r3
 800cf62:	4610      	mov	r0, r2
 800cf64:	f7fc fa50 	bl	8009408 <pbuf_cat>
 800cf68:	e018      	b.n	800cf9c <tcp_receive+0xb38>
 800cf6a:	bf00      	nop
 800cf6c:	2000c532 	.word	0x2000c532
 800cf70:	2000c528 	.word	0x2000c528
 800cf74:	2000c508 	.word	0x2000c508
 800cf78:	080163c4 	.word	0x080163c4
 800cf7c:	080167a4 	.word	0x080167a4
 800cf80:	08016410 	.word	0x08016410
 800cf84:	080167e0 	.word	0x080167e0
 800cf88:	2000c538 	.word	0x2000c538
 800cf8c:	2000c535 	.word	0x2000c535
 800cf90:	08016800 	.word	0x08016800
            } else {
              recv_data = cseg->p;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4a70      	ldr	r2, [pc, #448]	; (800d15c <tcp_receive+0xcf8>)
 800cf9a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	68db      	ldr	r3, [r3, #12]
 800cfa6:	899b      	ldrh	r3, [r3, #12]
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7fa fd60 	bl	8007a70 <lwip_htons>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	f003 0301 	and.w	r3, r3, #1
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00d      	beq.n	800cfd8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800cfbc:	4b68      	ldr	r3, [pc, #416]	; (800d160 <tcp_receive+0xcfc>)
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	f043 0320 	orr.w	r3, r3, #32
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	4b66      	ldr	r3, [pc, #408]	; (800d160 <tcp_receive+0xcfc>)
 800cfc8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	7d1b      	ldrb	r3, [r3, #20]
 800cfce:	2b04      	cmp	r3, #4
 800cfd0:	d102      	bne.n	800cfd8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2207      	movs	r2, #7
 800cfd6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800cfe0:	68b8      	ldr	r0, [r7, #8]
 800cfe2:	f7fd fbd2 	bl	800a78a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d008      	beq.n	800d000 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	685a      	ldr	r2, [r3, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800cffa:	429a      	cmp	r2, r3
 800cffc:	f43f af43 	beq.w	800ce86 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	8b5b      	ldrh	r3, [r3, #26]
 800d004:	f003 0301 	and.w	r3, r3, #1
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00e      	beq.n	800d02a <tcp_receive+0xbc6>
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8b5b      	ldrh	r3, [r3, #26]
 800d010:	f023 0301 	bic.w	r3, r3, #1
 800d014:	b29a      	uxth	r2, r3
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	835a      	strh	r2, [r3, #26]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	8b5b      	ldrh	r3, [r3, #26]
 800d01e:	f043 0302 	orr.w	r3, r3, #2
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d028:	e188      	b.n	800d33c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	8b5b      	ldrh	r3, [r3, #26]
 800d02e:	f043 0301 	orr.w	r3, r3, #1
 800d032:	b29a      	uxth	r2, r3
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d038:	e180      	b.n	800d33c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d106      	bne.n	800d050 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d042:	4848      	ldr	r0, [pc, #288]	; (800d164 <tcp_receive+0xd00>)
 800d044:	f7fd fbba 	bl	800a7bc <tcp_seg_copy>
 800d048:	4602      	mov	r2, r0
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	675a      	str	r2, [r3, #116]	; 0x74
 800d04e:	e16d      	b.n	800d32c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d058:	63bb      	str	r3, [r7, #56]	; 0x38
 800d05a:	e157      	b.n	800d30c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	685a      	ldr	r2, [r3, #4]
 800d062:	4b41      	ldr	r3, [pc, #260]	; (800d168 <tcp_receive+0xd04>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	429a      	cmp	r2, r3
 800d068:	d11d      	bne.n	800d0a6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d06a:	4b3e      	ldr	r3, [pc, #248]	; (800d164 <tcp_receive+0xd00>)
 800d06c:	891a      	ldrh	r2, [r3, #8]
 800d06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d070:	891b      	ldrh	r3, [r3, #8]
 800d072:	429a      	cmp	r2, r3
 800d074:	f240 814f 	bls.w	800d316 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d078:	483a      	ldr	r0, [pc, #232]	; (800d164 <tcp_receive+0xd00>)
 800d07a:	f7fd fb9f 	bl	800a7bc <tcp_seg_copy>
 800d07e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f000 8149 	beq.w	800d31a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800d088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <tcp_receive+0xc32>
                    prev->next = cseg;
 800d08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	601a      	str	r2, [r3, #0]
 800d094:	e002      	b.n	800d09c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d09c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d09e:	6978      	ldr	r0, [r7, #20]
 800d0a0:	f7ff f8dc 	bl	800c25c <tcp_oos_insert_segment>
                }
                break;
 800d0a4:	e139      	b.n	800d31a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d0a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d117      	bne.n	800d0dc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d0ac:	4b2e      	ldr	r3, [pc, #184]	; (800d168 <tcp_receive+0xd04>)
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	68db      	ldr	r3, [r3, #12]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	1ad3      	subs	r3, r2, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	da57      	bge.n	800d16c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d0bc:	4829      	ldr	r0, [pc, #164]	; (800d164 <tcp_receive+0xd00>)
 800d0be:	f7fd fb7d 	bl	800a7bc <tcp_seg_copy>
 800d0c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	f000 8129 	beq.w	800d31e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	69ba      	ldr	r2, [r7, #24]
 800d0d0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d0d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d0d4:	69b8      	ldr	r0, [r7, #24]
 800d0d6:	f7ff f8c1 	bl	800c25c <tcp_oos_insert_segment>
                  }
                  break;
 800d0da:	e120      	b.n	800d31e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d0dc:	4b22      	ldr	r3, [pc, #136]	; (800d168 <tcp_receive+0xd04>)
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0e2:	68db      	ldr	r3, [r3, #12]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	3b01      	subs	r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	db3e      	blt.n	800d16c <tcp_receive+0xd08>
 800d0ee:	4b1e      	ldr	r3, [pc, #120]	; (800d168 <tcp_receive+0xd04>)
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	1ad3      	subs	r3, r2, r3
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	dc35      	bgt.n	800d16c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d100:	4818      	ldr	r0, [pc, #96]	; (800d164 <tcp_receive+0xd00>)
 800d102:	f7fd fb5b 	bl	800a7bc <tcp_seg_copy>
 800d106:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 8109 	beq.w	800d322 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d112:	68db      	ldr	r3, [r3, #12]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d118:	8912      	ldrh	r2, [r2, #8]
 800d11a:	441a      	add	r2, r3
 800d11c:	4b12      	ldr	r3, [pc, #72]	; (800d168 <tcp_receive+0xd04>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	dd12      	ble.n	800d14c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d126:	4b10      	ldr	r3, [pc, #64]	; (800d168 <tcp_receive+0xd04>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	b29b      	uxth	r3, r3
 800d134:	1ad3      	subs	r3, r2, r3
 800d136:	b29a      	uxth	r2, r3
 800d138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	685a      	ldr	r2, [r3, #4]
 800d140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d142:	891b      	ldrh	r3, [r3, #8]
 800d144:	4619      	mov	r1, r3
 800d146:	4610      	mov	r0, r2
 800d148:	f7fb ff0a 	bl	8008f60 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14e:	69fa      	ldr	r2, [r7, #28]
 800d150:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d152:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d154:	69f8      	ldr	r0, [r7, #28]
 800d156:	f7ff f881 	bl	800c25c <tcp_oos_insert_segment>
                  }
                  break;
 800d15a:	e0e2      	b.n	800d322 <tcp_receive+0xebe>
 800d15c:	2000c538 	.word	0x2000c538
 800d160:	2000c535 	.word	0x2000c535
 800d164:	2000c508 	.word	0x2000c508
 800d168:	2000c528 	.word	0x2000c528
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	f040 80c6 	bne.w	800d306 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d17a:	4b80      	ldr	r3, [pc, #512]	; (800d37c <tcp_receive+0xf18>)
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d180:	68db      	ldr	r3, [r3, #12]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d186:	2b00      	cmp	r3, #0
 800d188:	f340 80bd 	ble.w	800d306 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	899b      	ldrh	r3, [r3, #12]
 800d192:	b29b      	uxth	r3, r3
 800d194:	4618      	mov	r0, r3
 800d196:	f7fa fc6b 	bl	8007a70 <lwip_htons>
 800d19a:	4603      	mov	r3, r0
 800d19c:	b2db      	uxtb	r3, r3
 800d19e:	f003 0301 	and.w	r3, r3, #1
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f040 80bf 	bne.w	800d326 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d1a8:	4875      	ldr	r0, [pc, #468]	; (800d380 <tcp_receive+0xf1c>)
 800d1aa:	f7fd fb07 	bl	800a7bc <tcp_seg_copy>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d1b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	f000 80b6 	beq.w	800d32a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1c6:	8912      	ldrh	r2, [r2, #8]
 800d1c8:	441a      	add	r2, r3
 800d1ca:	4b6c      	ldr	r3, [pc, #432]	; (800d37c <tcp_receive+0xf18>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dd12      	ble.n	800d1fa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d1d4:	4b69      	ldr	r3, [pc, #420]	; (800d37c <tcp_receive+0xf18>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ec:	685a      	ldr	r2, [r3, #4]
 800d1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f0:	891b      	ldrh	r3, [r3, #8]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	f7fb feb3 	bl	8008f60 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d1fa:	4b62      	ldr	r3, [pc, #392]	; (800d384 <tcp_receive+0xf20>)
 800d1fc:	881b      	ldrh	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	4b5e      	ldr	r3, [pc, #376]	; (800d37c <tcp_receive+0xf18>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	441a      	add	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20a:	6879      	ldr	r1, [r7, #4]
 800d20c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d20e:	440b      	add	r3, r1
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	f340 8089 	ble.w	800d32a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	899b      	ldrh	r3, [r3, #12]
 800d220:	b29b      	uxth	r3, r3
 800d222:	4618      	mov	r0, r3
 800d224:	f7fa fc24 	bl	8007a70 <lwip_htons>
 800d228:	4603      	mov	r3, r0
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	d022      	beq.n	800d27a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68db      	ldr	r3, [r3, #12]
 800d23a:	899b      	ldrh	r3, [r3, #12]
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	b21b      	sxth	r3, r3
 800d240:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d244:	b21c      	sxth	r4, r3
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	899b      	ldrh	r3, [r3, #12]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4618      	mov	r0, r3
 800d252:	f7fa fc0d 	bl	8007a70 <lwip_htons>
 800d256:	4603      	mov	r3, r0
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d260:	b29b      	uxth	r3, r3
 800d262:	4618      	mov	r0, r3
 800d264:	f7fa fc04 	bl	8007a70 <lwip_htons>
 800d268:	4603      	mov	r3, r0
 800d26a:	b21b      	sxth	r3, r3
 800d26c:	4323      	orrs	r3, r4
 800d26e:	b21a      	sxth	r2, r3
 800d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	b292      	uxth	r2, r2
 800d278:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d284:	4413      	add	r3, r2
 800d286:	b299      	uxth	r1, r3
 800d288:	4b3c      	ldr	r3, [pc, #240]	; (800d37c <tcp_receive+0xf18>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	1a8a      	subs	r2, r1, r2
 800d294:	b292      	uxth	r2, r2
 800d296:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	685a      	ldr	r2, [r3, #4]
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	891b      	ldrh	r3, [r3, #8]
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	4610      	mov	r0, r2
 800d2a8:	f7fb fe5a 	bl	8008f60 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	891c      	ldrh	r4, [r3, #8]
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	899b      	ldrh	r3, [r3, #12]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fa fbd7 	bl	8007a70 <lwip_htons>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	f003 0303 	and.w	r3, r3, #3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d001      	beq.n	800d2d2 <tcp_receive+0xe6e>
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e000      	b.n	800d2d4 <tcp_receive+0xe70>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	4423      	add	r3, r4
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	4b2a      	ldr	r3, [pc, #168]	; (800d384 <tcp_receive+0xf20>)
 800d2da:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d2dc:	4b29      	ldr	r3, [pc, #164]	; (800d384 <tcp_receive+0xf20>)
 800d2de:	881b      	ldrh	r3, [r3, #0]
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	4b26      	ldr	r3, [pc, #152]	; (800d37c <tcp_receive+0xf18>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	441a      	add	r2, r3
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	6879      	ldr	r1, [r7, #4]
 800d2ee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d2f0:	440b      	add	r3, r1
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d019      	beq.n	800d32a <tcp_receive+0xec6>
 800d2f6:	4b24      	ldr	r3, [pc, #144]	; (800d388 <tcp_receive+0xf24>)
 800d2f8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800d2fc:	4923      	ldr	r1, [pc, #140]	; (800d38c <tcp_receive+0xf28>)
 800d2fe:	4824      	ldr	r0, [pc, #144]	; (800d390 <tcp_receive+0xf2c>)
 800d300:	f006 fffe 	bl	8014300 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d304:	e011      	b.n	800d32a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f47f aea4 	bne.w	800d05c <tcp_receive+0xbf8>
 800d314:	e00a      	b.n	800d32c <tcp_receive+0xec8>
                break;
 800d316:	bf00      	nop
 800d318:	e008      	b.n	800d32c <tcp_receive+0xec8>
                break;
 800d31a:	bf00      	nop
 800d31c:	e006      	b.n	800d32c <tcp_receive+0xec8>
                  break;
 800d31e:	bf00      	nop
 800d320:	e004      	b.n	800d32c <tcp_receive+0xec8>
                  break;
 800d322:	bf00      	nop
 800d324:	e002      	b.n	800d32c <tcp_receive+0xec8>
                  break;
 800d326:	bf00      	nop
 800d328:	e000      	b.n	800d32c <tcp_receive+0xec8>
                break;
 800d32a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f001 fa33 	bl	800e798 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d332:	e003      	b.n	800d33c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f001 fa2f 	bl	800e798 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d33a:	e01a      	b.n	800d372 <tcp_receive+0xf0e>
 800d33c:	e019      	b.n	800d372 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d33e:	4b0f      	ldr	r3, [pc, #60]	; (800d37c <tcp_receive+0xf18>)
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d346:	1ad3      	subs	r3, r2, r3
 800d348:	2b00      	cmp	r3, #0
 800d34a:	db0a      	blt.n	800d362 <tcp_receive+0xefe>
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <tcp_receive+0xf18>)
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d354:	6879      	ldr	r1, [r7, #4]
 800d356:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d358:	440b      	add	r3, r1
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	3301      	adds	r3, #1
 800d35e:	2b00      	cmp	r3, #0
 800d360:	dd07      	ble.n	800d372 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	8b5b      	ldrh	r3, [r3, #26]
 800d366:	f043 0302 	orr.w	r3, r3, #2
 800d36a:	b29a      	uxth	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d370:	e7ff      	b.n	800d372 <tcp_receive+0xf0e>
 800d372:	bf00      	nop
 800d374:	3750      	adds	r7, #80	; 0x50
 800d376:	46bd      	mov	sp, r7
 800d378:	bdb0      	pop	{r4, r5, r7, pc}
 800d37a:	bf00      	nop
 800d37c:	2000c528 	.word	0x2000c528
 800d380:	2000c508 	.word	0x2000c508
 800d384:	2000c532 	.word	0x2000c532
 800d388:	080163c4 	.word	0x080163c4
 800d38c:	0801676c 	.word	0x0801676c
 800d390:	08016410 	.word	0x08016410

0800d394 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d394:	b480      	push	{r7}
 800d396:	b083      	sub	sp, #12
 800d398:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d39a:	4b15      	ldr	r3, [pc, #84]	; (800d3f0 <tcp_get_next_optbyte+0x5c>)
 800d39c:	881b      	ldrh	r3, [r3, #0]
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	b291      	uxth	r1, r2
 800d3a2:	4a13      	ldr	r2, [pc, #76]	; (800d3f0 <tcp_get_next_optbyte+0x5c>)
 800d3a4:	8011      	strh	r1, [r2, #0]
 800d3a6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d3a8:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <tcp_get_next_optbyte+0x60>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <tcp_get_next_optbyte+0x26>
 800d3b0:	4b11      	ldr	r3, [pc, #68]	; (800d3f8 <tcp_get_next_optbyte+0x64>)
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	88fa      	ldrh	r2, [r7, #6]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d208      	bcs.n	800d3cc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d3ba:	4b10      	ldr	r3, [pc, #64]	; (800d3fc <tcp_get_next_optbyte+0x68>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3314      	adds	r3, #20
 800d3c0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d3c2:	88fb      	ldrh	r3, [r7, #6]
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	e00b      	b.n	800d3e4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d3cc:	88fb      	ldrh	r3, [r7, #6]
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <tcp_get_next_optbyte+0x64>)
 800d3d2:	881b      	ldrh	r3, [r3, #0]
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d3da:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <tcp_get_next_optbyte+0x60>)
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	797b      	ldrb	r3, [r7, #5]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	370c      	adds	r7, #12
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ee:	4770      	bx	lr
 800d3f0:	2000c524 	.word	0x2000c524
 800d3f4:	2000c520 	.word	0x2000c520
 800d3f8:	2000c51e 	.word	0x2000c51e
 800d3fc:	2000c518 	.word	0x2000c518

0800d400 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <tcp_parseopt+0x1c>
 800d40e:	4b32      	ldr	r3, [pc, #200]	; (800d4d8 <tcp_parseopt+0xd8>)
 800d410:	f240 727d 	movw	r2, #1917	; 0x77d
 800d414:	4931      	ldr	r1, [pc, #196]	; (800d4dc <tcp_parseopt+0xdc>)
 800d416:	4832      	ldr	r0, [pc, #200]	; (800d4e0 <tcp_parseopt+0xe0>)
 800d418:	f006 ff72 	bl	8014300 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d41c:	4b31      	ldr	r3, [pc, #196]	; (800d4e4 <tcp_parseopt+0xe4>)
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d055      	beq.n	800d4d0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d424:	4b30      	ldr	r3, [pc, #192]	; (800d4e8 <tcp_parseopt+0xe8>)
 800d426:	2200      	movs	r2, #0
 800d428:	801a      	strh	r2, [r3, #0]
 800d42a:	e045      	b.n	800d4b8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800d42c:	f7ff ffb2 	bl	800d394 <tcp_get_next_optbyte>
 800d430:	4603      	mov	r3, r0
 800d432:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d434:	7bfb      	ldrb	r3, [r7, #15]
 800d436:	2b02      	cmp	r3, #2
 800d438:	d006      	beq.n	800d448 <tcp_parseopt+0x48>
 800d43a:	2b02      	cmp	r3, #2
 800d43c:	dc2b      	bgt.n	800d496 <tcp_parseopt+0x96>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d041      	beq.n	800d4c6 <tcp_parseopt+0xc6>
 800d442:	2b01      	cmp	r3, #1
 800d444:	d127      	bne.n	800d496 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800d446:	e037      	b.n	800d4b8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d448:	f7ff ffa4 	bl	800d394 <tcp_get_next_optbyte>
 800d44c:	4603      	mov	r3, r0
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d13b      	bne.n	800d4ca <tcp_parseopt+0xca>
 800d452:	4b25      	ldr	r3, [pc, #148]	; (800d4e8 <tcp_parseopt+0xe8>)
 800d454:	881b      	ldrh	r3, [r3, #0]
 800d456:	3301      	adds	r3, #1
 800d458:	4a22      	ldr	r2, [pc, #136]	; (800d4e4 <tcp_parseopt+0xe4>)
 800d45a:	8812      	ldrh	r2, [r2, #0]
 800d45c:	4293      	cmp	r3, r2
 800d45e:	da34      	bge.n	800d4ca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d460:	f7ff ff98 	bl	800d394 <tcp_get_next_optbyte>
 800d464:	4603      	mov	r3, r0
 800d466:	b29b      	uxth	r3, r3
 800d468:	021b      	lsls	r3, r3, #8
 800d46a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d46c:	f7ff ff92 	bl	800d394 <tcp_get_next_optbyte>
 800d470:	4603      	mov	r3, r0
 800d472:	b29a      	uxth	r2, r3
 800d474:	89bb      	ldrh	r3, [r7, #12]
 800d476:	4313      	orrs	r3, r2
 800d478:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d47a:	89bb      	ldrh	r3, [r7, #12]
 800d47c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d480:	d804      	bhi.n	800d48c <tcp_parseopt+0x8c>
 800d482:	89bb      	ldrh	r3, [r7, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d001      	beq.n	800d48c <tcp_parseopt+0x8c>
 800d488:	89ba      	ldrh	r2, [r7, #12]
 800d48a:	e001      	b.n	800d490 <tcp_parseopt+0x90>
 800d48c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800d494:	e010      	b.n	800d4b8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d496:	f7ff ff7d 	bl	800d394 <tcp_get_next_optbyte>
 800d49a:	4603      	mov	r3, r0
 800d49c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d49e:	7afb      	ldrb	r3, [r7, #11]
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d914      	bls.n	800d4ce <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d4a4:	7afb      	ldrb	r3, [r7, #11]
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <tcp_parseopt+0xe8>)
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	3b02      	subs	r3, #2
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <tcp_parseopt+0xe8>)
 800d4b6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d4b8:	4b0b      	ldr	r3, [pc, #44]	; (800d4e8 <tcp_parseopt+0xe8>)
 800d4ba:	881a      	ldrh	r2, [r3, #0]
 800d4bc:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <tcp_parseopt+0xe4>)
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d3b3      	bcc.n	800d42c <tcp_parseopt+0x2c>
 800d4c4:	e004      	b.n	800d4d0 <tcp_parseopt+0xd0>
          return;
 800d4c6:	bf00      	nop
 800d4c8:	e002      	b.n	800d4d0 <tcp_parseopt+0xd0>
            return;
 800d4ca:	bf00      	nop
 800d4cc:	e000      	b.n	800d4d0 <tcp_parseopt+0xd0>
            return;
 800d4ce:	bf00      	nop
      }
    }
  }
}
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	080163c4 	.word	0x080163c4
 800d4dc:	08016828 	.word	0x08016828
 800d4e0:	08016410 	.word	0x08016410
 800d4e4:	2000c51c 	.word	0x2000c51c
 800d4e8:	2000c524 	.word	0x2000c524

0800d4ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d4f0:	4b05      	ldr	r3, [pc, #20]	; (800d508 <tcp_trigger_input_pcb_close+0x1c>)
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	f043 0310 	orr.w	r3, r3, #16
 800d4f8:	b2da      	uxtb	r2, r3
 800d4fa:	4b03      	ldr	r3, [pc, #12]	; (800d508 <tcp_trigger_input_pcb_close+0x1c>)
 800d4fc:	701a      	strb	r2, [r3, #0]
}
 800d4fe:	bf00      	nop
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr
 800d508:	2000c535 	.word	0x2000c535

0800d50c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d00a      	beq.n	800d534 <tcp_route+0x28>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	7a1b      	ldrb	r3, [r3, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d006      	beq.n	800d534 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	7a1b      	ldrb	r3, [r3, #8]
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fb fb10 	bl	8008b50 <netif_get_by_index>
 800d530:	4603      	mov	r3, r0
 800d532:	e003      	b.n	800d53c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f005 f845 	bl	80125c4 <ip4_route>
 800d53a:	4603      	mov	r3, r0
  }
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d544:	b590      	push	{r4, r7, lr}
 800d546:	b087      	sub	sp, #28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4613      	mov	r3, r2
 800d552:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d105      	bne.n	800d566 <tcp_create_segment+0x22>
 800d55a:	4b44      	ldr	r3, [pc, #272]	; (800d66c <tcp_create_segment+0x128>)
 800d55c:	22a3      	movs	r2, #163	; 0xa3
 800d55e:	4944      	ldr	r1, [pc, #272]	; (800d670 <tcp_create_segment+0x12c>)
 800d560:	4844      	ldr	r0, [pc, #272]	; (800d674 <tcp_create_segment+0x130>)
 800d562:	f006 fecd 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d105      	bne.n	800d578 <tcp_create_segment+0x34>
 800d56c:	4b3f      	ldr	r3, [pc, #252]	; (800d66c <tcp_create_segment+0x128>)
 800d56e:	22a4      	movs	r2, #164	; 0xa4
 800d570:	4941      	ldr	r1, [pc, #260]	; (800d678 <tcp_create_segment+0x134>)
 800d572:	4840      	ldr	r0, [pc, #256]	; (800d674 <tcp_create_segment+0x130>)
 800d574:	f006 fec4 	bl	8014300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f003 0304 	and.w	r3, r3, #4
 800d584:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d586:	2003      	movs	r0, #3
 800d588:	f7fa ff4a 	bl	8008420 <memp_malloc>
 800d58c:	6138      	str	r0, [r7, #16]
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d104      	bne.n	800d59e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d594:	68b8      	ldr	r0, [r7, #8]
 800d596:	f7fb fe69 	bl	800926c <pbuf_free>
    return NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	e061      	b.n	800d662 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d5a4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d5ac:	693b      	ldr	r3, [r7, #16]
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	891a      	ldrh	r2, [r3, #8]
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d205      	bcs.n	800d5ca <tcp_create_segment+0x86>
 800d5be:	4b2b      	ldr	r3, [pc, #172]	; (800d66c <tcp_create_segment+0x128>)
 800d5c0:	22b0      	movs	r2, #176	; 0xb0
 800d5c2:	492e      	ldr	r1, [pc, #184]	; (800d67c <tcp_create_segment+0x138>)
 800d5c4:	482b      	ldr	r0, [pc, #172]	; (800d674 <tcp_create_segment+0x130>)
 800d5c6:	f006 fe9b 	bl	8014300 <iprintf>
  seg->len = p->tot_len - optlen;
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	891a      	ldrh	r2, [r3, #8]
 800d5ce:	7dfb      	ldrb	r3, [r7, #23]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	1ad3      	subs	r3, r2, r3
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d5da:	2114      	movs	r1, #20
 800d5dc:	68b8      	ldr	r0, [r7, #8]
 800d5de:	f7fb fdaf 	bl	8009140 <pbuf_add_header>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d004      	beq.n	800d5f2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d5e8:	6938      	ldr	r0, [r7, #16]
 800d5ea:	f7fd f8ce 	bl	800a78a <tcp_seg_free>
    return NULL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	e037      	b.n	800d662 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	685b      	ldr	r3, [r3, #4]
 800d5f6:	685a      	ldr	r2, [r3, #4]
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	8ada      	ldrh	r2, [r3, #22]
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	68dc      	ldr	r4, [r3, #12]
 800d604:	4610      	mov	r0, r2
 800d606:	f7fa fa33 	bl	8007a70 <lwip_htons>
 800d60a:	4603      	mov	r3, r0
 800d60c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8b1a      	ldrh	r2, [r3, #24]
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	68dc      	ldr	r4, [r3, #12]
 800d616:	4610      	mov	r0, r2
 800d618:	f7fa fa2a 	bl	8007a70 <lwip_htons>
 800d61c:	4603      	mov	r3, r0
 800d61e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	68dc      	ldr	r4, [r3, #12]
 800d624:	6838      	ldr	r0, [r7, #0]
 800d626:	f7fa fa38 	bl	8007a9a <lwip_htonl>
 800d62a:	4603      	mov	r3, r0
 800d62c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
 800d630:	089b      	lsrs	r3, r3, #2
 800d632:	b2db      	uxtb	r3, r3
 800d634:	b29b      	uxth	r3, r3
 800d636:	3305      	adds	r3, #5
 800d638:	b29b      	uxth	r3, r3
 800d63a:	031b      	lsls	r3, r3, #12
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	b29b      	uxth	r3, r3
 800d642:	4313      	orrs	r3, r2
 800d644:	b29a      	uxth	r2, r3
 800d646:	693b      	ldr	r3, [r7, #16]
 800d648:	68dc      	ldr	r4, [r3, #12]
 800d64a:	4610      	mov	r0, r2
 800d64c:	f7fa fa10 	bl	8007a70 <lwip_htons>
 800d650:	4603      	mov	r3, r0
 800d652:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	2200      	movs	r2, #0
 800d65a:	749a      	strb	r2, [r3, #18]
 800d65c:	2200      	movs	r2, #0
 800d65e:	74da      	strb	r2, [r3, #19]
  return seg;
 800d660:	693b      	ldr	r3, [r7, #16]
}
 800d662:	4618      	mov	r0, r3
 800d664:	371c      	adds	r7, #28
 800d666:	46bd      	mov	sp, r7
 800d668:	bd90      	pop	{r4, r7, pc}
 800d66a:	bf00      	nop
 800d66c:	08016844 	.word	0x08016844
 800d670:	08016878 	.word	0x08016878
 800d674:	08016898 	.word	0x08016898
 800d678:	080168c0 	.word	0x080168c0
 800d67c:	080168e4 	.word	0x080168e4

0800d680 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d680:	b590      	push	{r4, r7, lr}
 800d682:	b08b      	sub	sp, #44	; 0x2c
 800d684:	af02      	add	r7, sp, #8
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	460b      	mov	r3, r1
 800d68a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d68c:	2300      	movs	r3, #0
 800d68e:	61fb      	str	r3, [r7, #28]
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d694:	2300      	movs	r3, #0
 800d696:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <tcp_split_unsent_seg+0x2c>
 800d69e:	4b95      	ldr	r3, [pc, #596]	; (800d8f4 <tcp_split_unsent_seg+0x274>)
 800d6a0:	f240 324b 	movw	r2, #843	; 0x34b
 800d6a4:	4994      	ldr	r1, [pc, #592]	; (800d8f8 <tcp_split_unsent_seg+0x278>)
 800d6a6:	4895      	ldr	r0, [pc, #596]	; (800d8fc <tcp_split_unsent_seg+0x27c>)
 800d6a8:	f006 fe2a 	bl	8014300 <iprintf>

  useg = pcb->unsent;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d102      	bne.n	800d6be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d6bc:	e116      	b.n	800d8ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d6be:	887b      	ldrh	r3, [r7, #2]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d109      	bne.n	800d6d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d6c4:	4b8b      	ldr	r3, [pc, #556]	; (800d8f4 <tcp_split_unsent_seg+0x274>)
 800d6c6:	f240 3253 	movw	r2, #851	; 0x353
 800d6ca:	498d      	ldr	r1, [pc, #564]	; (800d900 <tcp_split_unsent_seg+0x280>)
 800d6cc:	488b      	ldr	r0, [pc, #556]	; (800d8fc <tcp_split_unsent_seg+0x27c>)
 800d6ce:	f006 fe17 	bl	8014300 <iprintf>
    return ERR_VAL;
 800d6d2:	f06f 0305 	mvn.w	r3, #5
 800d6d6:	e109      	b.n	800d8ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	891b      	ldrh	r3, [r3, #8]
 800d6dc:	887a      	ldrh	r2, [r7, #2]
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d301      	bcc.n	800d6e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	e102      	b.n	800d8ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6ea:	887a      	ldrh	r2, [r7, #2]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d906      	bls.n	800d6fe <tcp_split_unsent_seg+0x7e>
 800d6f0:	4b80      	ldr	r3, [pc, #512]	; (800d8f4 <tcp_split_unsent_seg+0x274>)
 800d6f2:	f240 325b 	movw	r2, #859	; 0x35b
 800d6f6:	4983      	ldr	r1, [pc, #524]	; (800d904 <tcp_split_unsent_seg+0x284>)
 800d6f8:	4880      	ldr	r0, [pc, #512]	; (800d8fc <tcp_split_unsent_seg+0x27c>)
 800d6fa:	f006 fe01 	bl	8014300 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	891b      	ldrh	r3, [r3, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <tcp_split_unsent_seg+0x94>
 800d706:	4b7b      	ldr	r3, [pc, #492]	; (800d8f4 <tcp_split_unsent_seg+0x274>)
 800d708:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d70c:	497e      	ldr	r1, [pc, #504]	; (800d908 <tcp_split_unsent_seg+0x288>)
 800d70e:	487b      	ldr	r0, [pc, #492]	; (800d8fc <tcp_split_unsent_seg+0x27c>)
 800d710:	f006 fdf6 	bl	8014300 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	7a9b      	ldrb	r3, [r3, #10]
 800d718:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d71a:	7bfb      	ldrb	r3, [r7, #15]
 800d71c:	009b      	lsls	r3, r3, #2
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	f003 0304 	and.w	r3, r3, #4
 800d724:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	891a      	ldrh	r2, [r3, #8]
 800d72a:	887b      	ldrh	r3, [r7, #2]
 800d72c:	1ad3      	subs	r3, r2, r3
 800d72e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d730:	7bbb      	ldrb	r3, [r7, #14]
 800d732:	b29a      	uxth	r2, r3
 800d734:	89bb      	ldrh	r3, [r7, #12]
 800d736:	4413      	add	r3, r2
 800d738:	b29b      	uxth	r3, r3
 800d73a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d73e:	4619      	mov	r1, r3
 800d740:	2036      	movs	r0, #54	; 0x36
 800d742:	f7fb faaf 	bl	8008ca4 <pbuf_alloc>
 800d746:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f000 80b7 	beq.w	800d8be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	891a      	ldrh	r2, [r3, #8]
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	891b      	ldrh	r3, [r3, #8]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	b29a      	uxth	r2, r3
 800d75e:	887b      	ldrh	r3, [r7, #2]
 800d760:	4413      	add	r3, r2
 800d762:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	6858      	ldr	r0, [r3, #4]
 800d768:	693b      	ldr	r3, [r7, #16]
 800d76a:	685a      	ldr	r2, [r3, #4]
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	18d1      	adds	r1, r2, r3
 800d770:	897b      	ldrh	r3, [r7, #10]
 800d772:	89ba      	ldrh	r2, [r7, #12]
 800d774:	f7fb ff80 	bl	8009678 <pbuf_copy_partial>
 800d778:	4603      	mov	r3, r0
 800d77a:	461a      	mov	r2, r3
 800d77c:	89bb      	ldrh	r3, [r7, #12]
 800d77e:	4293      	cmp	r3, r2
 800d780:	f040 809f 	bne.w	800d8c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d784:	697b      	ldr	r3, [r7, #20]
 800d786:	68db      	ldr	r3, [r3, #12]
 800d788:	899b      	ldrh	r3, [r3, #12]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fa f96f 	bl	8007a70 <lwip_htons>
 800d792:	4603      	mov	r3, r0
 800d794:	b2db      	uxtb	r3, r3
 800d796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d79a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d79c:	2300      	movs	r3, #0
 800d79e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d7a0:	7efb      	ldrb	r3, [r7, #27]
 800d7a2:	f003 0308 	and.w	r3, r3, #8
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d007      	beq.n	800d7ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d7aa:	7efb      	ldrb	r3, [r7, #27]
 800d7ac:	f023 0308 	bic.w	r3, r3, #8
 800d7b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d7b2:	7ebb      	ldrb	r3, [r7, #26]
 800d7b4:	f043 0308 	orr.w	r3, r3, #8
 800d7b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d7ba:	7efb      	ldrb	r3, [r7, #27]
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d007      	beq.n	800d7d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d7c4:	7efb      	ldrb	r3, [r7, #27]
 800d7c6:	f023 0301 	bic.w	r3, r3, #1
 800d7ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d7cc:	7ebb      	ldrb	r3, [r7, #26]
 800d7ce:	f043 0301 	orr.w	r3, r3, #1
 800d7d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	68db      	ldr	r3, [r3, #12]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fa f95d 	bl	8007a9a <lwip_htonl>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	887b      	ldrh	r3, [r7, #2]
 800d7e4:	18d1      	adds	r1, r2, r3
 800d7e6:	7eba      	ldrb	r2, [r7, #26]
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	6939      	ldr	r1, [r7, #16]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f7ff fea7 	bl	800d544 <tcp_create_segment>
 800d7f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d063      	beq.n	800d8c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	685b      	ldr	r3, [r3, #4]
 800d802:	4618      	mov	r0, r3
 800d804:	f7fb fdc0 	bl	8009388 <pbuf_clen>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d812:	1a9b      	subs	r3, r3, r2
 800d814:	b29a      	uxth	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	6858      	ldr	r0, [r3, #4]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	685b      	ldr	r3, [r3, #4]
 800d824:	891a      	ldrh	r2, [r3, #8]
 800d826:	89bb      	ldrh	r3, [r7, #12]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	4619      	mov	r1, r3
 800d82e:	f7fb fb97 	bl	8008f60 <pbuf_realloc>
  useg->len -= remainder;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	891a      	ldrh	r2, [r3, #8]
 800d836:	89bb      	ldrh	r3, [r7, #12]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	899b      	ldrh	r3, [r3, #12]
 800d846:	b29c      	uxth	r4, r3
 800d848:	7efb      	ldrb	r3, [r7, #27]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4618      	mov	r0, r3
 800d84e:	f7fa f90f 	bl	8007a70 <lwip_htons>
 800d852:	4603      	mov	r3, r0
 800d854:	461a      	mov	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	4322      	orrs	r2, r4
 800d85c:	b292      	uxth	r2, r2
 800d85e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	685b      	ldr	r3, [r3, #4]
 800d864:	4618      	mov	r0, r3
 800d866:	f7fb fd8f 	bl	8009388 <pbuf_clen>
 800d86a:	4603      	mov	r3, r0
 800d86c:	461a      	mov	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d874:	4413      	add	r3, r2
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	685b      	ldr	r3, [r3, #4]
 800d882:	4618      	mov	r0, r3
 800d884:	f7fb fd80 	bl	8009388 <pbuf_clen>
 800d888:	4603      	mov	r3, r0
 800d88a:	461a      	mov	r2, r3
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d892:	4413      	add	r3, r2
 800d894:	b29a      	uxth	r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	69fb      	ldr	r3, [r7, #28]
 800d8a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	69fa      	ldr	r2, [r7, #28]
 800d8a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d103      	bne.n	800d8ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e016      	b.n	800d8ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d8be:	bf00      	nop
 800d8c0:	e002      	b.n	800d8c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d8c2:	bf00      	nop
 800d8c4:	e000      	b.n	800d8c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d8c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d006      	beq.n	800d8dc <tcp_split_unsent_seg+0x25c>
 800d8ce:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <tcp_split_unsent_seg+0x274>)
 800d8d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d8d4:	490d      	ldr	r1, [pc, #52]	; (800d90c <tcp_split_unsent_seg+0x28c>)
 800d8d6:	4809      	ldr	r0, [pc, #36]	; (800d8fc <tcp_split_unsent_seg+0x27c>)
 800d8d8:	f006 fd12 	bl	8014300 <iprintf>
  if (p != NULL) {
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d8e2:	6938      	ldr	r0, [r7, #16]
 800d8e4:	f7fb fcc2 	bl	800926c <pbuf_free>
  }

  return ERR_MEM;
 800d8e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3724      	adds	r7, #36	; 0x24
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd90      	pop	{r4, r7, pc}
 800d8f4:	08016844 	.word	0x08016844
 800d8f8:	08016bd8 	.word	0x08016bd8
 800d8fc:	08016898 	.word	0x08016898
 800d900:	08016bfc 	.word	0x08016bfc
 800d904:	08016c20 	.word	0x08016c20
 800d908:	08016c30 	.word	0x08016c30
 800d90c:	08016c40 	.word	0x08016c40

0800d910 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d910:	b590      	push	{r4, r7, lr}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <tcp_send_fin+0x1c>
 800d91e:	4b21      	ldr	r3, [pc, #132]	; (800d9a4 <tcp_send_fin+0x94>)
 800d920:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d924:	4920      	ldr	r1, [pc, #128]	; (800d9a8 <tcp_send_fin+0x98>)
 800d926:	4821      	ldr	r0, [pc, #132]	; (800d9ac <tcp_send_fin+0x9c>)
 800d928:	f006 fcea 	bl	8014300 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d930:	2b00      	cmp	r3, #0
 800d932:	d02e      	beq.n	800d992 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	e002      	b.n	800d942 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d1f8      	bne.n	800d93c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	68db      	ldr	r3, [r3, #12]
 800d94e:	899b      	ldrh	r3, [r3, #12]
 800d950:	b29b      	uxth	r3, r3
 800d952:	4618      	mov	r0, r3
 800d954:	f7fa f88c 	bl	8007a70 <lwip_htons>
 800d958:	4603      	mov	r3, r0
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	f003 0307 	and.w	r3, r3, #7
 800d960:	2b00      	cmp	r3, #0
 800d962:	d116      	bne.n	800d992 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	68db      	ldr	r3, [r3, #12]
 800d968:	899b      	ldrh	r3, [r3, #12]
 800d96a:	b29c      	uxth	r4, r3
 800d96c:	2001      	movs	r0, #1
 800d96e:	f7fa f87f 	bl	8007a70 <lwip_htons>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	4322      	orrs	r2, r4
 800d97c:	b292      	uxth	r2, r2
 800d97e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	8b5b      	ldrh	r3, [r3, #26]
 800d984:	f043 0320 	orr.w	r3, r3, #32
 800d988:	b29a      	uxth	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	e004      	b.n	800d99c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d992:	2101      	movs	r1, #1
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	f000 f80b 	bl	800d9b0 <tcp_enqueue_flags>
 800d99a:	4603      	mov	r3, r0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd90      	pop	{r4, r7, pc}
 800d9a4:	08016844 	.word	0x08016844
 800d9a8:	08016c4c 	.word	0x08016c4c
 800d9ac:	08016898 	.word	0x08016898

0800d9b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08a      	sub	sp, #40	; 0x28
 800d9b4:	af02      	add	r7, sp, #8
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d9c4:	78fb      	ldrb	r3, [r7, #3]
 800d9c6:	f003 0303 	and.w	r3, r3, #3
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d106      	bne.n	800d9dc <tcp_enqueue_flags+0x2c>
 800d9ce:	4b67      	ldr	r3, [pc, #412]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800d9d0:	f240 4211 	movw	r2, #1041	; 0x411
 800d9d4:	4966      	ldr	r1, [pc, #408]	; (800db70 <tcp_enqueue_flags+0x1c0>)
 800d9d6:	4867      	ldr	r0, [pc, #412]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800d9d8:	f006 fc92 	bl	8014300 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d106      	bne.n	800d9f0 <tcp_enqueue_flags+0x40>
 800d9e2:	4b62      	ldr	r3, [pc, #392]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800d9e4:	f240 4213 	movw	r2, #1043	; 0x413
 800d9e8:	4963      	ldr	r1, [pc, #396]	; (800db78 <tcp_enqueue_flags+0x1c8>)
 800d9ea:	4862      	ldr	r0, [pc, #392]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800d9ec:	f006 fc88 	bl	8014300 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d9f0:	78fb      	ldrb	r3, [r7, #3]
 800d9f2:	f003 0302 	and.w	r3, r3, #2
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d001      	beq.n	800d9fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d9fe:	7ffb      	ldrb	r3, [r7, #31]
 800da00:	009b      	lsls	r3, r3, #2
 800da02:	b2db      	uxtb	r3, r3
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800da0a:	7dfb      	ldrb	r3, [r7, #23]
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da12:	4619      	mov	r1, r3
 800da14:	2036      	movs	r0, #54	; 0x36
 800da16:	f7fb f945 	bl	8008ca4 <pbuf_alloc>
 800da1a:	6138      	str	r0, [r7, #16]
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d109      	bne.n	800da36 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	8b5b      	ldrh	r3, [r3, #26]
 800da26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da2a:	b29a      	uxth	r2, r3
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800da30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da34:	e095      	b.n	800db62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	895a      	ldrh	r2, [r3, #10]
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	429a      	cmp	r2, r3
 800da40:	d206      	bcs.n	800da50 <tcp_enqueue_flags+0xa0>
 800da42:	4b4a      	ldr	r3, [pc, #296]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800da44:	f240 4239 	movw	r2, #1081	; 0x439
 800da48:	494c      	ldr	r1, [pc, #304]	; (800db7c <tcp_enqueue_flags+0x1cc>)
 800da4a:	484a      	ldr	r0, [pc, #296]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800da4c:	f006 fc58 	bl	8014300 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800da54:	78fa      	ldrb	r2, [r7, #3]
 800da56:	7ffb      	ldrb	r3, [r7, #31]
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	460b      	mov	r3, r1
 800da5c:	6939      	ldr	r1, [r7, #16]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff fd70 	bl	800d544 <tcp_create_segment>
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d109      	bne.n	800da80 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	8b5b      	ldrh	r3, [r3, #26]
 800da70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da74:	b29a      	uxth	r2, r3
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800da7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da7e:	e070      	b.n	800db62 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	f003 0303 	and.w	r3, r3, #3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d006      	beq.n	800da9a <tcp_enqueue_flags+0xea>
 800da8c:	4b37      	ldr	r3, [pc, #220]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800da8e:	f240 4242 	movw	r2, #1090	; 0x442
 800da92:	493b      	ldr	r1, [pc, #236]	; (800db80 <tcp_enqueue_flags+0x1d0>)
 800da94:	4837      	ldr	r0, [pc, #220]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800da96:	f006 fc33 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	891b      	ldrh	r3, [r3, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <tcp_enqueue_flags+0x100>
 800daa2:	4b32      	ldr	r3, [pc, #200]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800daa4:	f240 4243 	movw	r2, #1091	; 0x443
 800daa8:	4936      	ldr	r1, [pc, #216]	; (800db84 <tcp_enqueue_flags+0x1d4>)
 800daaa:	4832      	ldr	r0, [pc, #200]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800daac:	f006 fc28 	bl	8014300 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	66da      	str	r2, [r3, #108]	; 0x6c
 800dabe:	e00d      	b.n	800dadc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dac4:	61bb      	str	r3, [r7, #24]
 800dac6:	e002      	b.n	800dace <tcp_enqueue_flags+0x11e>
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	61bb      	str	r3, [r7, #24]
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d1f8      	bne.n	800dac8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dae4:	78fb      	ldrb	r3, [r7, #3]
 800dae6:	f003 0302 	and.w	r3, r3, #2
 800daea:	2b00      	cmp	r3, #0
 800daec:	d104      	bne.n	800daf8 <tcp_enqueue_flags+0x148>
 800daee:	78fb      	ldrb	r3, [r7, #3]
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d004      	beq.n	800db02 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dafc:	1c5a      	adds	r2, r3, #1
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800db02:	78fb      	ldrb	r3, [r7, #3]
 800db04:	f003 0301 	and.w	r3, r3, #1
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d006      	beq.n	800db1a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	8b5b      	ldrh	r3, [r3, #26]
 800db10:	f043 0320 	orr.w	r3, r3, #32
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fb fc32 	bl	8009388 <pbuf_clen>
 800db24:	4603      	mov	r3, r0
 800db26:	461a      	mov	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db2e:	4413      	add	r3, r2
 800db30:	b29a      	uxth	r2, r3
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d00e      	beq.n	800db60 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <tcp_enqueue_flags+0x1b0>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d106      	bne.n	800db60 <tcp_enqueue_flags+0x1b0>
 800db52:	4b06      	ldr	r3, [pc, #24]	; (800db6c <tcp_enqueue_flags+0x1bc>)
 800db54:	f240 4265 	movw	r2, #1125	; 0x465
 800db58:	490b      	ldr	r1, [pc, #44]	; (800db88 <tcp_enqueue_flags+0x1d8>)
 800db5a:	4806      	ldr	r0, [pc, #24]	; (800db74 <tcp_enqueue_flags+0x1c4>)
 800db5c:	f006 fbd0 	bl	8014300 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3720      	adds	r7, #32
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	08016844 	.word	0x08016844
 800db70:	08016c68 	.word	0x08016c68
 800db74:	08016898 	.word	0x08016898
 800db78:	08016cc0 	.word	0x08016cc0
 800db7c:	08016ce0 	.word	0x08016ce0
 800db80:	08016d1c 	.word	0x08016d1c
 800db84:	08016d34 	.word	0x08016d34
 800db88:	08016d60 	.word	0x08016d60

0800db8c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800db8c:	b5b0      	push	{r4, r5, r7, lr}
 800db8e:	b08a      	sub	sp, #40	; 0x28
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d106      	bne.n	800dba8 <tcp_output+0x1c>
 800db9a:	4b8a      	ldr	r3, [pc, #552]	; (800ddc4 <tcp_output+0x238>)
 800db9c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800dba0:	4989      	ldr	r1, [pc, #548]	; (800ddc8 <tcp_output+0x23c>)
 800dba2:	488a      	ldr	r0, [pc, #552]	; (800ddcc <tcp_output+0x240>)
 800dba4:	f006 fbac 	bl	8014300 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	7d1b      	ldrb	r3, [r3, #20]
 800dbac:	2b01      	cmp	r3, #1
 800dbae:	d106      	bne.n	800dbbe <tcp_output+0x32>
 800dbb0:	4b84      	ldr	r3, [pc, #528]	; (800ddc4 <tcp_output+0x238>)
 800dbb2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800dbb6:	4986      	ldr	r1, [pc, #536]	; (800ddd0 <tcp_output+0x244>)
 800dbb8:	4884      	ldr	r0, [pc, #528]	; (800ddcc <tcp_output+0x240>)
 800dbba:	f006 fba1 	bl	8014300 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dbbe:	4b85      	ldr	r3, [pc, #532]	; (800ddd4 <tcp_output+0x248>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d101      	bne.n	800dbcc <tcp_output+0x40>
    return ERR_OK;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	e1ce      	b.n	800df6a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dbd8:	4293      	cmp	r3, r2
 800dbda:	bf28      	it	cs
 800dbdc:	4613      	movcs	r3, r2
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10b      	bne.n	800dc06 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	8b5b      	ldrh	r3, [r3, #26]
 800dbf2:	f003 0302 	and.w	r3, r3, #2
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	f000 81aa 	beq.w	800df50 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f000 fdcb 	bl	800e798 <tcp_send_empty_ack>
 800dc02:	4603      	mov	r3, r0
 800dc04:	e1b1      	b.n	800df6a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800dc06:	6879      	ldr	r1, [r7, #4]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	3304      	adds	r3, #4
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f7ff fc7c 	bl	800d50c <tcp_route>
 800dc14:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d102      	bne.n	800dc22 <tcp_output+0x96>
    return ERR_RTE;
 800dc1c:	f06f 0303 	mvn.w	r3, #3
 800dc20:	e1a3      	b.n	800df6a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d003      	beq.n	800dc30 <tcp_output+0xa4>
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d111      	bne.n	800dc54 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d002      	beq.n	800dc3c <tcp_output+0xb0>
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	e000      	b.n	800dc3e <tcp_output+0xb2>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <tcp_output+0xc0>
      return ERR_RTE;
 800dc46:	f06f 0303 	mvn.w	r3, #3
 800dc4a:	e18e      	b.n	800df6a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	681a      	ldr	r2, [r3, #0]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7f9 ff1d 	bl	8007a9a <lwip_htonl>
 800dc60:	4602      	mov	r2, r0
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc66:	1ad3      	subs	r3, r2, r3
 800dc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6a:	8912      	ldrh	r2, [r2, #8]
 800dc6c:	4413      	add	r3, r2
 800dc6e:	69ba      	ldr	r2, [r7, #24]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d227      	bcs.n	800dcc4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d114      	bne.n	800dcac <tcp_output+0x120>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d110      	bne.n	800dcac <tcp_output+0x120>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d10b      	bne.n	800dcac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	8b5b      	ldrh	r3, [r3, #26]
 800dcb0:	f003 0302 	and.w	r3, r3, #2
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 814d 	beq.w	800df54 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 fd6c 	bl	800e798 <tcp_send_empty_ack>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	e152      	b.n	800df6a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcd0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800dcd2:	6a3b      	ldr	r3, [r7, #32]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	f000 811c 	beq.w	800df12 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800dcda:	e002      	b.n	800dce2 <tcp_output+0x156>
 800dcdc:	6a3b      	ldr	r3, [r7, #32]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	623b      	str	r3, [r7, #32]
 800dce2:	6a3b      	ldr	r3, [r7, #32]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1f8      	bne.n	800dcdc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800dcea:	e112      	b.n	800df12 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	899b      	ldrh	r3, [r3, #12]
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7f9 febb 	bl	8007a70 <lwip_htons>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	f003 0304 	and.w	r3, r3, #4
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d006      	beq.n	800dd14 <tcp_output+0x188>
 800dd06:	4b2f      	ldr	r3, [pc, #188]	; (800ddc4 <tcp_output+0x238>)
 800dd08:	f240 5236 	movw	r2, #1334	; 0x536
 800dd0c:	4932      	ldr	r1, [pc, #200]	; (800ddd8 <tcp_output+0x24c>)
 800dd0e:	482f      	ldr	r0, [pc, #188]	; (800ddcc <tcp_output+0x240>)
 800dd10:	f006 faf6 	bl	8014300 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01f      	beq.n	800dd5c <tcp_output+0x1d0>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	8b5b      	ldrh	r3, [r3, #26]
 800dd20:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d119      	bne.n	800dd5c <tcp_output+0x1d0>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <tcp_output+0x1bc>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d110      	bne.n	800dd5c <tcp_output+0x1d0>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd3e:	891a      	ldrh	r2, [r3, #8]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d209      	bcs.n	800dd5c <tcp_output+0x1d0>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d004      	beq.n	800dd5c <tcp_output+0x1d0>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd58:	2b08      	cmp	r3, #8
 800dd5a:	d901      	bls.n	800dd60 <tcp_output+0x1d4>
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	e000      	b.n	800dd62 <tcp_output+0x1d6>
 800dd60:	2300      	movs	r3, #0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	8b5b      	ldrh	r3, [r3, #26]
 800dd6a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	f000 80e4 	beq.w	800df3c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d00d      	beq.n	800dd98 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd7e:	68db      	ldr	r3, [r3, #12]
 800dd80:	899b      	ldrh	r3, [r3, #12]
 800dd82:	b29c      	uxth	r4, r3
 800dd84:	2010      	movs	r0, #16
 800dd86:	f7f9 fe73 	bl	8007a70 <lwip_htons>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	4322      	orrs	r2, r4
 800dd94:	b292      	uxth	r2, r2
 800dd96:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	6879      	ldr	r1, [r7, #4]
 800dd9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd9e:	f000 f909 	bl	800dfb4 <tcp_output_segment>
 800dda2:	4603      	mov	r3, r0
 800dda4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dda6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d016      	beq.n	800dddc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8b5b      	ldrh	r3, [r3, #26]
 800ddb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	835a      	strh	r2, [r3, #26]
      return err;
 800ddbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddc0:	e0d3      	b.n	800df6a <tcp_output+0x3de>
 800ddc2:	bf00      	nop
 800ddc4:	08016844 	.word	0x08016844
 800ddc8:	08016d88 	.word	0x08016d88
 800ddcc:	08016898 	.word	0x08016898
 800ddd0:	08016da0 	.word	0x08016da0
 800ddd4:	2000c53c 	.word	0x2000c53c
 800ddd8:	08016dc8 	.word	0x08016dc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7d1b      	ldrb	r3, [r3, #20]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d006      	beq.n	800ddfa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	8b5b      	ldrh	r3, [r3, #26]
 800ddf0:	f023 0303 	bic.w	r3, r3, #3
 800ddf4:	b29a      	uxth	r2, r3
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfc:	68db      	ldr	r3, [r3, #12]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	4618      	mov	r0, r3
 800de02:	f7f9 fe4a 	bl	8007a9a <lwip_htonl>
 800de06:	4604      	mov	r4, r0
 800de08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de0a:	891b      	ldrh	r3, [r3, #8]
 800de0c:	461d      	mov	r5, r3
 800de0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de10:	68db      	ldr	r3, [r3, #12]
 800de12:	899b      	ldrh	r3, [r3, #12]
 800de14:	b29b      	uxth	r3, r3
 800de16:	4618      	mov	r0, r3
 800de18:	f7f9 fe2a 	bl	8007a70 <lwip_htons>
 800de1c:	4603      	mov	r3, r0
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	f003 0303 	and.w	r3, r3, #3
 800de24:	2b00      	cmp	r3, #0
 800de26:	d001      	beq.n	800de2c <tcp_output+0x2a0>
 800de28:	2301      	movs	r3, #1
 800de2a:	e000      	b.n	800de2e <tcp_output+0x2a2>
 800de2c:	2300      	movs	r3, #0
 800de2e:	442b      	add	r3, r5
 800de30:	4423      	add	r3, r4
 800de32:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	da02      	bge.n	800de46 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	891b      	ldrh	r3, [r3, #8]
 800de4a:	461c      	mov	r4, r3
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	899b      	ldrh	r3, [r3, #12]
 800de52:	b29b      	uxth	r3, r3
 800de54:	4618      	mov	r0, r3
 800de56:	f7f9 fe0b 	bl	8007a70 <lwip_htons>
 800de5a:	4603      	mov	r3, r0
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f003 0303 	and.w	r3, r3, #3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d001      	beq.n	800de6a <tcp_output+0x2de>
 800de66:	2301      	movs	r3, #1
 800de68:	e000      	b.n	800de6c <tcp_output+0x2e0>
 800de6a:	2300      	movs	r3, #0
 800de6c:	4423      	add	r3, r4
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d049      	beq.n	800df06 <tcp_output+0x37a>
      seg->next = NULL;
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d105      	bne.n	800de8c <tcp_output+0x300>
        pcb->unacked = seg;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de84:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de88:	623b      	str	r3, [r7, #32]
 800de8a:	e03f      	b.n	800df0c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800de8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	4618      	mov	r0, r3
 800de94:	f7f9 fe01 	bl	8007a9a <lwip_htonl>
 800de98:	4604      	mov	r4, r0
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	68db      	ldr	r3, [r3, #12]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7f9 fdfa 	bl	8007a9a <lwip_htonl>
 800dea6:	4603      	mov	r3, r0
 800dea8:	1ae3      	subs	r3, r4, r3
 800deaa:	2b00      	cmp	r3, #0
 800deac:	da24      	bge.n	800def8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	3370      	adds	r3, #112	; 0x70
 800deb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800deb4:	e002      	b.n	800debc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800deb6:	69fb      	ldr	r3, [r7, #28]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d011      	beq.n	800dee8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	4618      	mov	r0, r3
 800dece:	f7f9 fde4 	bl	8007a9a <lwip_htonl>
 800ded2:	4604      	mov	r4, r0
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	4618      	mov	r0, r3
 800dedc:	f7f9 fddd 	bl	8007a9a <lwip_htonl>
 800dee0:	4603      	mov	r3, r0
 800dee2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	dbe6      	blt.n	800deb6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	681a      	ldr	r2, [r3, #0]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	e009      	b.n	800df0c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800defc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800defe:	6a3b      	ldr	r3, [r7, #32]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	623b      	str	r3, [r7, #32]
 800df04:	e002      	b.n	800df0c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800df06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df08:	f7fc fc3f 	bl	800a78a <tcp_seg_free>
    }
    seg = pcb->unsent;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df10:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800df12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df14:	2b00      	cmp	r3, #0
 800df16:	d012      	beq.n	800df3e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	685b      	ldr	r3, [r3, #4]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f9 fdbb 	bl	8007a9a <lwip_htonl>
 800df24:	4602      	mov	r2, r0
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df2a:	1ad3      	subs	r3, r2, r3
 800df2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df2e:	8912      	ldrh	r2, [r2, #8]
 800df30:	4413      	add	r3, r2
  while (seg != NULL &&
 800df32:	69ba      	ldr	r2, [r7, #24]
 800df34:	429a      	cmp	r2, r3
 800df36:	f4bf aed9 	bcs.w	800dcec <tcp_output+0x160>
 800df3a:	e000      	b.n	800df3e <tcp_output+0x3b2>
      break;
 800df3c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d108      	bne.n	800df58 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800df4e:	e004      	b.n	800df5a <tcp_output+0x3ce>
    goto output_done;
 800df50:	bf00      	nop
 800df52:	e002      	b.n	800df5a <tcp_output+0x3ce>
    goto output_done;
 800df54:	bf00      	nop
 800df56:	e000      	b.n	800df5a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800df58:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	8b5b      	ldrh	r3, [r3, #26]
 800df5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df62:	b29a      	uxth	r2, r3
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3728      	adds	r7, #40	; 0x28
 800df6e:	46bd      	mov	sp, r7
 800df70:	bdb0      	pop	{r4, r5, r7, pc}
 800df72:	bf00      	nop

0800df74 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d106      	bne.n	800df90 <tcp_output_segment_busy+0x1c>
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <tcp_output_segment_busy+0x34>)
 800df84:	f240 529a 	movw	r2, #1434	; 0x59a
 800df88:	4908      	ldr	r1, [pc, #32]	; (800dfac <tcp_output_segment_busy+0x38>)
 800df8a:	4809      	ldr	r0, [pc, #36]	; (800dfb0 <tcp_output_segment_busy+0x3c>)
 800df8c:	f006 f9b8 	bl	8014300 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	7b9b      	ldrb	r3, [r3, #14]
 800df96:	2b01      	cmp	r3, #1
 800df98:	d001      	beq.n	800df9e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800df9a:	2301      	movs	r3, #1
 800df9c:	e000      	b.n	800dfa0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800df9e:	2300      	movs	r3, #0
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	08016844 	.word	0x08016844
 800dfac:	08016de0 	.word	0x08016de0
 800dfb0:	08016898 	.word	0x08016898

0800dfb4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800dfb4:	b5b0      	push	{r4, r5, r7, lr}
 800dfb6:	b08c      	sub	sp, #48	; 0x30
 800dfb8:	af04      	add	r7, sp, #16
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d106      	bne.n	800dfd4 <tcp_output_segment+0x20>
 800dfc6:	4b64      	ldr	r3, [pc, #400]	; (800e158 <tcp_output_segment+0x1a4>)
 800dfc8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800dfcc:	4963      	ldr	r1, [pc, #396]	; (800e15c <tcp_output_segment+0x1a8>)
 800dfce:	4864      	ldr	r0, [pc, #400]	; (800e160 <tcp_output_segment+0x1ac>)
 800dfd0:	f006 f996 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d106      	bne.n	800dfe8 <tcp_output_segment+0x34>
 800dfda:	4b5f      	ldr	r3, [pc, #380]	; (800e158 <tcp_output_segment+0x1a4>)
 800dfdc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dfe0:	4960      	ldr	r1, [pc, #384]	; (800e164 <tcp_output_segment+0x1b0>)
 800dfe2:	485f      	ldr	r0, [pc, #380]	; (800e160 <tcp_output_segment+0x1ac>)
 800dfe4:	f006 f98c 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d106      	bne.n	800dffc <tcp_output_segment+0x48>
 800dfee:	4b5a      	ldr	r3, [pc, #360]	; (800e158 <tcp_output_segment+0x1a4>)
 800dff0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800dff4:	495c      	ldr	r1, [pc, #368]	; (800e168 <tcp_output_segment+0x1b4>)
 800dff6:	485a      	ldr	r0, [pc, #360]	; (800e160 <tcp_output_segment+0x1ac>)
 800dff8:	f006 f982 	bl	8014300 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	f7ff ffb9 	bl	800df74 <tcp_output_segment_busy>
 800e002:	4603      	mov	r3, r0
 800e004:	2b00      	cmp	r3, #0
 800e006:	d001      	beq.n	800e00c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e008:	2300      	movs	r3, #0
 800e00a:	e0a1      	b.n	800e150 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e00c:	68bb      	ldr	r3, [r7, #8]
 800e00e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	68dc      	ldr	r4, [r3, #12]
 800e014:	4610      	mov	r0, r2
 800e016:	f7f9 fd40 	bl	8007a9a <lwip_htonl>
 800e01a:	4603      	mov	r3, r0
 800e01c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	68dc      	ldr	r4, [r3, #12]
 800e026:	4610      	mov	r0, r2
 800e028:	f7f9 fd22 	bl	8007a70 <lwip_htons>
 800e02c:	4603      	mov	r3, r0
 800e02e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e034:	68ba      	ldr	r2, [r7, #8]
 800e036:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e038:	441a      	add	r2, r3
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	3314      	adds	r3, #20
 800e044:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	7a9b      	ldrb	r3, [r3, #10]
 800e04a:	f003 0301 	and.w	r3, r3, #1
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d015      	beq.n	800e07e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3304      	adds	r3, #4
 800e056:	461a      	mov	r2, r3
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e05e:	f7fc fe8b 	bl	800ad78 <tcp_eff_send_mss_netif>
 800e062:	4603      	mov	r3, r0
 800e064:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e066:	8b7b      	ldrh	r3, [r7, #26]
 800e068:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7f9 fd14 	bl	8007a9a <lwip_htonl>
 800e072:	4602      	mov	r2, r0
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e078:	69fb      	ldr	r3, [r7, #28]
 800e07a:	3304      	adds	r3, #4
 800e07c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e084:	2b00      	cmp	r3, #0
 800e086:	da02      	bge.n	800e08e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2200      	movs	r2, #0
 800e08c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10c      	bne.n	800e0b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e096:	4b35      	ldr	r3, [pc, #212]	; (800e16c <tcp_output_segment+0x1b8>)
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	68db      	ldr	r3, [r3, #12]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7f9 fcf8 	bl	8007a9a <lwip_htonl>
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	68da      	ldr	r2, [r3, #12]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	685b      	ldr	r3, [r3, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	8959      	ldrh	r1, [r3, #10]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	8b3a      	ldrh	r2, [r7, #24]
 800e0ca:	1a8a      	subs	r2, r1, r2
 800e0cc:	b292      	uxth	r2, r2
 800e0ce:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	8919      	ldrh	r1, [r3, #8]
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	8b3a      	ldrh	r2, [r7, #24]
 800e0dc:	1a8a      	subs	r2, r1, r2
 800e0de:	b292      	uxth	r2, r2
 800e0e0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	68d2      	ldr	r2, [r2, #12]
 800e0ea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	741a      	strb	r2, [r3, #16]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	68da      	ldr	r2, [r3, #12]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	7a9b      	ldrb	r3, [r3, #10]
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d001      	beq.n	800e10c <tcp_output_segment+0x158>
 800e108:	2318      	movs	r3, #24
 800e10a:	e000      	b.n	800e10e <tcp_output_segment+0x15a>
 800e10c:	2314      	movs	r3, #20
 800e10e:	4413      	add	r3, r2
 800e110:	69fa      	ldr	r2, [r7, #28]
 800e112:	429a      	cmp	r2, r3
 800e114:	d006      	beq.n	800e124 <tcp_output_segment+0x170>
 800e116:	4b10      	ldr	r3, [pc, #64]	; (800e158 <tcp_output_segment+0x1a4>)
 800e118:	f240 621c 	movw	r2, #1564	; 0x61c
 800e11c:	4914      	ldr	r1, [pc, #80]	; (800e170 <tcp_output_segment+0x1bc>)
 800e11e:	4810      	ldr	r0, [pc, #64]	; (800e160 <tcp_output_segment+0x1ac>)
 800e120:	f006 f8ee 	bl	8014300 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	6858      	ldr	r0, [r3, #4]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	1d1c      	adds	r4, r3, #4
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	7add      	ldrb	r5, [r3, #11]
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	7a9b      	ldrb	r3, [r3, #10]
 800e136:	687a      	ldr	r2, [r7, #4]
 800e138:	9202      	str	r2, [sp, #8]
 800e13a:	2206      	movs	r2, #6
 800e13c:	9201      	str	r2, [sp, #4]
 800e13e:	9300      	str	r3, [sp, #0]
 800e140:	462b      	mov	r3, r5
 800e142:	4622      	mov	r2, r4
 800e144:	f004 fc1a 	bl	801297c <ip4_output_if>
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e14c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e150:	4618      	mov	r0, r3
 800e152:	3720      	adds	r7, #32
 800e154:	46bd      	mov	sp, r7
 800e156:	bdb0      	pop	{r4, r5, r7, pc}
 800e158:	08016844 	.word	0x08016844
 800e15c:	08016e08 	.word	0x08016e08
 800e160:	08016898 	.word	0x08016898
 800e164:	08016e28 	.word	0x08016e28
 800e168:	08016e48 	.word	0x08016e48
 800e16c:	2000c4f0 	.word	0x2000c4f0
 800e170:	08016e6c 	.word	0x08016e6c

0800e174 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e174:	b5b0      	push	{r4, r5, r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d106      	bne.n	800e190 <tcp_rexmit_rto_prepare+0x1c>
 800e182:	4b31      	ldr	r3, [pc, #196]	; (800e248 <tcp_rexmit_rto_prepare+0xd4>)
 800e184:	f240 6263 	movw	r2, #1635	; 0x663
 800e188:	4930      	ldr	r1, [pc, #192]	; (800e24c <tcp_rexmit_rto_prepare+0xd8>)
 800e18a:	4831      	ldr	r0, [pc, #196]	; (800e250 <tcp_rexmit_rto_prepare+0xdc>)
 800e18c:	f006 f8b8 	bl	8014300 <iprintf>

  if (pcb->unacked == NULL) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e194:	2b00      	cmp	r3, #0
 800e196:	d102      	bne.n	800e19e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e198:	f06f 0305 	mvn.w	r3, #5
 800e19c:	e050      	b.n	800e240 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a2:	60fb      	str	r3, [r7, #12]
 800e1a4:	e00b      	b.n	800e1be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f7ff fee4 	bl	800df74 <tcp_output_segment_busy>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e1b2:	f06f 0305 	mvn.w	r3, #5
 800e1b6:	e043      	b.n	800e240 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	60fb      	str	r3, [r7, #12]
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1ef      	bne.n	800e1a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7ff fed4 	bl	800df74 <tcp_output_segment_busy>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d002      	beq.n	800e1d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e1d2:	f06f 0305 	mvn.w	r3, #5
 800e1d6:	e033      	b.n	800e240 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	8b5b      	ldrh	r3, [r3, #26]
 800e1f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	4618      	mov	r0, r3
 800e204:	f7f9 fc49 	bl	8007a9a <lwip_htonl>
 800e208:	4604      	mov	r4, r0
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	891b      	ldrh	r3, [r3, #8]
 800e20e:	461d      	mov	r5, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	899b      	ldrh	r3, [r3, #12]
 800e216:	b29b      	uxth	r3, r3
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f9 fc29 	bl	8007a70 <lwip_htons>
 800e21e:	4603      	mov	r3, r0
 800e220:	b2db      	uxtb	r3, r3
 800e222:	f003 0303 	and.w	r3, r3, #3
 800e226:	2b00      	cmp	r3, #0
 800e228:	d001      	beq.n	800e22e <tcp_rexmit_rto_prepare+0xba>
 800e22a:	2301      	movs	r3, #1
 800e22c:	e000      	b.n	800e230 <tcp_rexmit_rto_prepare+0xbc>
 800e22e:	2300      	movs	r3, #0
 800e230:	442b      	add	r3, r5
 800e232:	18e2      	adds	r2, r4, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bdb0      	pop	{r4, r5, r7, pc}
 800e248:	08016844 	.word	0x08016844
 800e24c:	08016e80 	.word	0x08016e80
 800e250:	08016898 	.word	0x08016898

0800e254 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b082      	sub	sp, #8
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <tcp_rexmit_rto_commit+0x1c>
 800e262:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <tcp_rexmit_rto_commit+0x44>)
 800e264:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e268:	490c      	ldr	r1, [pc, #48]	; (800e29c <tcp_rexmit_rto_commit+0x48>)
 800e26a:	480d      	ldr	r0, [pc, #52]	; (800e2a0 <tcp_rexmit_rto_commit+0x4c>)
 800e26c:	f006 f848 	bl	8014300 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e276:	2bff      	cmp	r3, #255	; 0xff
 800e278:	d007      	beq.n	800e28a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e280:	3301      	adds	r3, #1
 800e282:	b2da      	uxtb	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7ff fc7e 	bl	800db8c <tcp_output>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	08016844 	.word	0x08016844
 800e29c:	08016ea4 	.word	0x08016ea4
 800e2a0:	08016898 	.word	0x08016898

0800e2a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d106      	bne.n	800e2c0 <tcp_rexmit_rto+0x1c>
 800e2b2:	4b0a      	ldr	r3, [pc, #40]	; (800e2dc <tcp_rexmit_rto+0x38>)
 800e2b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800e2b8:	4909      	ldr	r1, [pc, #36]	; (800e2e0 <tcp_rexmit_rto+0x3c>)
 800e2ba:	480a      	ldr	r0, [pc, #40]	; (800e2e4 <tcp_rexmit_rto+0x40>)
 800e2bc:	f006 f820 	bl	8014300 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff ff57 	bl	800e174 <tcp_rexmit_rto_prepare>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d102      	bne.n	800e2d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff ffc1 	bl	800e254 <tcp_rexmit_rto_commit>
  }
}
 800e2d2:	bf00      	nop
 800e2d4:	3708      	adds	r7, #8
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	08016844 	.word	0x08016844
 800e2e0:	08016ec8 	.word	0x08016ec8
 800e2e4:	08016898 	.word	0x08016898

0800e2e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d106      	bne.n	800e304 <tcp_rexmit+0x1c>
 800e2f6:	4b2f      	ldr	r3, [pc, #188]	; (800e3b4 <tcp_rexmit+0xcc>)
 800e2f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800e2fc:	492e      	ldr	r1, [pc, #184]	; (800e3b8 <tcp_rexmit+0xd0>)
 800e2fe:	482f      	ldr	r0, [pc, #188]	; (800e3bc <tcp_rexmit+0xd4>)
 800e300:	f005 fffe 	bl	8014300 <iprintf>

  if (pcb->unacked == NULL) {
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d102      	bne.n	800e312 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e30c:	f06f 0305 	mvn.w	r3, #5
 800e310:	e04c      	b.n	800e3ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e316:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e318:	68b8      	ldr	r0, [r7, #8]
 800e31a:	f7ff fe2b 	bl	800df74 <tcp_output_segment_busy>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b00      	cmp	r3, #0
 800e322:	d002      	beq.n	800e32a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e324:	f06f 0305 	mvn.w	r3, #5
 800e328:	e040      	b.n	800e3ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	336c      	adds	r3, #108	; 0x6c
 800e336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e338:	e002      	b.n	800e340 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d011      	beq.n	800e36c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	68db      	ldr	r3, [r3, #12]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	f7f9 fba2 	bl	8007a9a <lwip_htonl>
 800e356:	4604      	mov	r4, r0
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7f9 fb9b 	bl	8007a9a <lwip_htonl>
 800e364:	4603      	mov	r3, r0
 800e366:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e368:	2b00      	cmp	r3, #0
 800e36a:	dbe6      	blt.n	800e33a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d103      	bne.n	800e38a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2200      	movs	r2, #0
 800e386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e390:	2bff      	cmp	r3, #255	; 0xff
 800e392:	d007      	beq.n	800e3a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e39a:	3301      	adds	r3, #1
 800e39c:	b2da      	uxtb	r2, r3
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e3aa:	2300      	movs	r3, #0
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3714      	adds	r7, #20
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd90      	pop	{r4, r7, pc}
 800e3b4:	08016844 	.word	0x08016844
 800e3b8:	08016ee4 	.word	0x08016ee4
 800e3bc:	08016898 	.word	0x08016898

0800e3c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d106      	bne.n	800e3dc <tcp_rexmit_fast+0x1c>
 800e3ce:	4b2a      	ldr	r3, [pc, #168]	; (800e478 <tcp_rexmit_fast+0xb8>)
 800e3d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800e3d4:	4929      	ldr	r1, [pc, #164]	; (800e47c <tcp_rexmit_fast+0xbc>)
 800e3d6:	482a      	ldr	r0, [pc, #168]	; (800e480 <tcp_rexmit_fast+0xc0>)
 800e3d8:	f005 ff92 	bl	8014300 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d044      	beq.n	800e46e <tcp_rexmit_fast+0xae>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	8b5b      	ldrh	r3, [r3, #26]
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d13e      	bne.n	800e46e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7ff ff79 	bl	800e2e8 <tcp_rexmit>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d138      	bne.n	800e46e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e408:	4293      	cmp	r3, r2
 800e40a:	bf28      	it	cs
 800e40c:	4613      	movcs	r3, r2
 800e40e:	b29b      	uxth	r3, r3
 800e410:	0fda      	lsrs	r2, r3, #31
 800e412:	4413      	add	r3, r2
 800e414:	105b      	asrs	r3, r3, #1
 800e416:	b29a      	uxth	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e424:	461a      	mov	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e42a:	005b      	lsls	r3, r3, #1
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d206      	bcs.n	800e43e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	b29a      	uxth	r2, r3
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e448:	4619      	mov	r1, r3
 800e44a:	0049      	lsls	r1, r1, #1
 800e44c:	440b      	add	r3, r1
 800e44e:	b29b      	uxth	r3, r3
 800e450:	4413      	add	r3, r2
 800e452:	b29a      	uxth	r2, r3
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	8b5b      	ldrh	r3, [r3, #26]
 800e45e:	f043 0304 	orr.w	r3, r3, #4
 800e462:	b29a      	uxth	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800e46e:	bf00      	nop
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}
 800e476:	bf00      	nop
 800e478:	08016844 	.word	0x08016844
 800e47c:	08016efc 	.word	0x08016efc
 800e480:	08016898 	.word	0x08016898

0800e484 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	607b      	str	r3, [r7, #4]
 800e48e:	460b      	mov	r3, r1
 800e490:	817b      	strh	r3, [r7, #10]
 800e492:	4613      	mov	r3, r2
 800e494:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e496:	897a      	ldrh	r2, [r7, #10]
 800e498:	893b      	ldrh	r3, [r7, #8]
 800e49a:	4413      	add	r3, r2
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	3314      	adds	r3, #20
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	2022      	movs	r0, #34	; 0x22
 800e4aa:	f7fa fbfb 	bl	8008ca4 <pbuf_alloc>
 800e4ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d04d      	beq.n	800e552 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e4b6:	897b      	ldrh	r3, [r7, #10]
 800e4b8:	3313      	adds	r3, #19
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	8952      	ldrh	r2, [r2, #10]
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	db06      	blt.n	800e4d0 <tcp_output_alloc_header_common+0x4c>
 800e4c2:	4b26      	ldr	r3, [pc, #152]	; (800e55c <tcp_output_alloc_header_common+0xd8>)
 800e4c4:	f240 7223 	movw	r2, #1827	; 0x723
 800e4c8:	4925      	ldr	r1, [pc, #148]	; (800e560 <tcp_output_alloc_header_common+0xdc>)
 800e4ca:	4826      	ldr	r0, [pc, #152]	; (800e564 <tcp_output_alloc_header_common+0xe0>)
 800e4cc:	f005 ff18 	bl	8014300 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e4d6:	8c3b      	ldrh	r3, [r7, #32]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7f9 fac9 	bl	8007a70 <lwip_htons>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e4e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f9 fac1 	bl	8007a70 <lwip_htons>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	461a      	mov	r2, r3
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f7f9 facc 	bl	8007a9a <lwip_htonl>
 800e502:	4602      	mov	r2, r0
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	089b      	lsrs	r3, r3, #2
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	3305      	adds	r3, #5
 800e510:	b29b      	uxth	r3, r3
 800e512:	031b      	lsls	r3, r3, #12
 800e514:	b29a      	uxth	r2, r3
 800e516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	4313      	orrs	r3, r2
 800e51e:	b29b      	uxth	r3, r3
 800e520:	4618      	mov	r0, r3
 800e522:	f7f9 faa5 	bl	8007a70 <lwip_htons>
 800e526:	4603      	mov	r3, r0
 800e528:	461a      	mov	r2, r3
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e52e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e530:	4618      	mov	r0, r3
 800e532:	f7f9 fa9d 	bl	8007a70 <lwip_htons>
 800e536:	4603      	mov	r3, r0
 800e538:	461a      	mov	r2, r3
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2200      	movs	r2, #0
 800e542:	741a      	strb	r2, [r3, #16]
 800e544:	2200      	movs	r2, #0
 800e546:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2200      	movs	r2, #0
 800e54c:	749a      	strb	r2, [r3, #18]
 800e54e:	2200      	movs	r2, #0
 800e550:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e552:	697b      	ldr	r3, [r7, #20]
}
 800e554:	4618      	mov	r0, r3
 800e556:	3718      	adds	r7, #24
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	08016844 	.word	0x08016844
 800e560:	08016f1c 	.word	0x08016f1c
 800e564:	08016898 	.word	0x08016898

0800e568 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e568:	b5b0      	push	{r4, r5, r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af04      	add	r7, sp, #16
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	607b      	str	r3, [r7, #4]
 800e572:	460b      	mov	r3, r1
 800e574:	817b      	strh	r3, [r7, #10]
 800e576:	4613      	mov	r3, r2
 800e578:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d106      	bne.n	800e58e <tcp_output_alloc_header+0x26>
 800e580:	4b15      	ldr	r3, [pc, #84]	; (800e5d8 <tcp_output_alloc_header+0x70>)
 800e582:	f240 7242 	movw	r2, #1858	; 0x742
 800e586:	4915      	ldr	r1, [pc, #84]	; (800e5dc <tcp_output_alloc_header+0x74>)
 800e588:	4815      	ldr	r0, [pc, #84]	; (800e5e0 <tcp_output_alloc_header+0x78>)
 800e58a:	f005 feb9 	bl	8014300 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	8adb      	ldrh	r3, [r3, #22]
 800e596:	68fa      	ldr	r2, [r7, #12]
 800e598:	8b12      	ldrh	r2, [r2, #24]
 800e59a:	68f9      	ldr	r1, [r7, #12]
 800e59c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e59e:	893d      	ldrh	r5, [r7, #8]
 800e5a0:	897c      	ldrh	r4, [r7, #10]
 800e5a2:	9103      	str	r1, [sp, #12]
 800e5a4:	2110      	movs	r1, #16
 800e5a6:	9102      	str	r1, [sp, #8]
 800e5a8:	9201      	str	r2, [sp, #4]
 800e5aa:	9300      	str	r3, [sp, #0]
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	462a      	mov	r2, r5
 800e5b0:	4621      	mov	r1, r4
 800e5b2:	f7ff ff67 	bl	800e484 <tcp_output_alloc_header_common>
 800e5b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e5b8:	697b      	ldr	r3, [r7, #20]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d006      	beq.n	800e5cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e5c6:	441a      	add	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e5cc:	697b      	ldr	r3, [r7, #20]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3718      	adds	r7, #24
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	08016844 	.word	0x08016844
 800e5dc:	08016f4c 	.word	0x08016f4c
 800e5e0:	08016898 	.word	0x08016898

0800e5e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b088      	sub	sp, #32
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	4611      	mov	r1, r2
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	71fb      	strb	r3, [r7, #7]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d106      	bne.n	800e612 <tcp_output_fill_options+0x2e>
 800e604:	4b12      	ldr	r3, [pc, #72]	; (800e650 <tcp_output_fill_options+0x6c>)
 800e606:	f240 7256 	movw	r2, #1878	; 0x756
 800e60a:	4912      	ldr	r1, [pc, #72]	; (800e654 <tcp_output_fill_options+0x70>)
 800e60c:	4812      	ldr	r0, [pc, #72]	; (800e658 <tcp_output_fill_options+0x74>)
 800e60e:	f005 fe77 	bl	8014300 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	3314      	adds	r3, #20
 800e61c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e61e:	8bfb      	ldrh	r3, [r7, #30]
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	461a      	mov	r2, r3
 800e624:	79fb      	ldrb	r3, [r7, #7]
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	f003 0304 	and.w	r3, r3, #4
 800e62c:	4413      	add	r3, r2
 800e62e:	3314      	adds	r3, #20
 800e630:	69ba      	ldr	r2, [r7, #24]
 800e632:	4413      	add	r3, r2
 800e634:	697a      	ldr	r2, [r7, #20]
 800e636:	429a      	cmp	r2, r3
 800e638:	d006      	beq.n	800e648 <tcp_output_fill_options+0x64>
 800e63a:	4b05      	ldr	r3, [pc, #20]	; (800e650 <tcp_output_fill_options+0x6c>)
 800e63c:	f240 7275 	movw	r2, #1909	; 0x775
 800e640:	4906      	ldr	r1, [pc, #24]	; (800e65c <tcp_output_fill_options+0x78>)
 800e642:	4805      	ldr	r0, [pc, #20]	; (800e658 <tcp_output_fill_options+0x74>)
 800e644:	f005 fe5c 	bl	8014300 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e648:	bf00      	nop
 800e64a:	3720      	adds	r7, #32
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	08016844 	.word	0x08016844
 800e654:	08016f74 	.word	0x08016f74
 800e658:	08016898 	.word	0x08016898
 800e65c:	08016e6c 	.word	0x08016e6c

0800e660 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b08a      	sub	sp, #40	; 0x28
 800e664:	af04      	add	r7, sp, #16
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
 800e66c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d106      	bne.n	800e682 <tcp_output_control_segment+0x22>
 800e674:	4b1c      	ldr	r3, [pc, #112]	; (800e6e8 <tcp_output_control_segment+0x88>)
 800e676:	f240 7287 	movw	r2, #1927	; 0x787
 800e67a:	491c      	ldr	r1, [pc, #112]	; (800e6ec <tcp_output_control_segment+0x8c>)
 800e67c:	481c      	ldr	r0, [pc, #112]	; (800e6f0 <tcp_output_control_segment+0x90>)
 800e67e:	f005 fe3f 	bl	8014300 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e682:	683a      	ldr	r2, [r7, #0]
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7fe ff40 	bl	800d50c <tcp_route>
 800e68c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d102      	bne.n	800e69a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e694:	23fc      	movs	r3, #252	; 0xfc
 800e696:	75fb      	strb	r3, [r7, #23]
 800e698:	e01c      	b.n	800e6d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d006      	beq.n	800e6ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	7adb      	ldrb	r3, [r3, #11]
 800e6a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	7a9b      	ldrb	r3, [r3, #10]
 800e6aa:	757b      	strb	r3, [r7, #21]
 800e6ac:	e003      	b.n	800e6b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e6ae:	23ff      	movs	r3, #255	; 0xff
 800e6b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e6b6:	7dba      	ldrb	r2, [r7, #22]
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	9302      	str	r3, [sp, #8]
 800e6bc:	2306      	movs	r3, #6
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	7d7b      	ldrb	r3, [r7, #21]
 800e6c2:	9300      	str	r3, [sp, #0]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	6879      	ldr	r1, [r7, #4]
 800e6ca:	68b8      	ldr	r0, [r7, #8]
 800e6cc:	f004 f956 	bl	801297c <ip4_output_if>
 800e6d0:	4603      	mov	r3, r0
 800e6d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e6d4:	68b8      	ldr	r0, [r7, #8]
 800e6d6:	f7fa fdc9 	bl	800926c <pbuf_free>
  return err;
 800e6da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3718      	adds	r7, #24
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	08016844 	.word	0x08016844
 800e6ec:	08016f9c 	.word	0x08016f9c
 800e6f0:	08016898 	.word	0x08016898

0800e6f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e6f4:	b590      	push	{r4, r7, lr}
 800e6f6:	b08b      	sub	sp, #44	; 0x2c
 800e6f8:	af04      	add	r7, sp, #16
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	607a      	str	r2, [r7, #4]
 800e700:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d106      	bne.n	800e716 <tcp_rst+0x22>
 800e708:	4b1f      	ldr	r3, [pc, #124]	; (800e788 <tcp_rst+0x94>)
 800e70a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e70e:	491f      	ldr	r1, [pc, #124]	; (800e78c <tcp_rst+0x98>)
 800e710:	481f      	ldr	r0, [pc, #124]	; (800e790 <tcp_rst+0x9c>)
 800e712:	f005 fdf5 	bl	8014300 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d106      	bne.n	800e72a <tcp_rst+0x36>
 800e71c:	4b1a      	ldr	r3, [pc, #104]	; (800e788 <tcp_rst+0x94>)
 800e71e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e722:	491c      	ldr	r1, [pc, #112]	; (800e794 <tcp_rst+0xa0>)
 800e724:	481a      	ldr	r0, [pc, #104]	; (800e790 <tcp_rst+0x9c>)
 800e726:	f005 fdeb 	bl	8014300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e72a:	2300      	movs	r3, #0
 800e72c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e72e:	f246 0308 	movw	r3, #24584	; 0x6008
 800e732:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e734:	7dfb      	ldrb	r3, [r7, #23]
 800e736:	b29c      	uxth	r4, r3
 800e738:	68b8      	ldr	r0, [r7, #8]
 800e73a:	f7f9 f9ae 	bl	8007a9a <lwip_htonl>
 800e73e:	4602      	mov	r2, r0
 800e740:	8abb      	ldrh	r3, [r7, #20]
 800e742:	9303      	str	r3, [sp, #12]
 800e744:	2314      	movs	r3, #20
 800e746:	9302      	str	r3, [sp, #8]
 800e748:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e74a:	9301      	str	r3, [sp, #4]
 800e74c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	4613      	mov	r3, r2
 800e752:	2200      	movs	r2, #0
 800e754:	4621      	mov	r1, r4
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fe94 	bl	800e484 <tcp_output_alloc_header_common>
 800e75c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00c      	beq.n	800e77e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e764:	7dfb      	ldrb	r3, [r7, #23]
 800e766:	2200      	movs	r2, #0
 800e768:	6939      	ldr	r1, [r7, #16]
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7ff ff3a 	bl	800e5e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	6939      	ldr	r1, [r7, #16]
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff ff72 	bl	800e660 <tcp_output_control_segment>
 800e77c:	e000      	b.n	800e780 <tcp_rst+0x8c>
    return;
 800e77e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e780:	371c      	adds	r7, #28
 800e782:	46bd      	mov	sp, r7
 800e784:	bd90      	pop	{r4, r7, pc}
 800e786:	bf00      	nop
 800e788:	08016844 	.word	0x08016844
 800e78c:	08016fc8 	.word	0x08016fc8
 800e790:	08016898 	.word	0x08016898
 800e794:	08016fe4 	.word	0x08016fe4

0800e798 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e798:	b590      	push	{r4, r7, lr}
 800e79a:	b087      	sub	sp, #28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d106      	bne.n	800e7bc <tcp_send_empty_ack+0x24>
 800e7ae:	4b28      	ldr	r3, [pc, #160]	; (800e850 <tcp_send_empty_ack+0xb8>)
 800e7b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e7b4:	4927      	ldr	r1, [pc, #156]	; (800e854 <tcp_send_empty_ack+0xbc>)
 800e7b6:	4828      	ldr	r0, [pc, #160]	; (800e858 <tcp_send_empty_ack+0xc0>)
 800e7b8:	f005 fda2 	bl	8014300 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e7bc:	7dfb      	ldrb	r3, [r7, #23]
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	f003 0304 	and.w	r3, r3, #4
 800e7c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e7c8:	7d7b      	ldrb	r3, [r7, #21]
 800e7ca:	b29c      	uxth	r4, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7f9 f962 	bl	8007a9a <lwip_htonl>
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4621      	mov	r1, r4
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7ff fec3 	bl	800e568 <tcp_output_alloc_header>
 800e7e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d109      	bne.n	800e7fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	8b5b      	ldrh	r3, [r3, #26]
 800e7ee:	f043 0303 	orr.w	r3, r3, #3
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e7f8:	f06f 0301 	mvn.w	r3, #1
 800e7fc:	e023      	b.n	800e846 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e7fe:	7dbb      	ldrb	r3, [r7, #22]
 800e800:	7dfa      	ldrb	r2, [r7, #23]
 800e802:	6939      	ldr	r1, [r7, #16]
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f7ff feed 	bl	800e5e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3304      	adds	r3, #4
 800e810:	6939      	ldr	r1, [r7, #16]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f7ff ff24 	bl	800e660 <tcp_output_control_segment>
 800e818:	4603      	mov	r3, r0
 800e81a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d007      	beq.n	800e834 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	8b5b      	ldrh	r3, [r3, #26]
 800e828:	f043 0303 	orr.w	r3, r3, #3
 800e82c:	b29a      	uxth	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	835a      	strh	r2, [r3, #26]
 800e832:	e006      	b.n	800e842 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	8b5b      	ldrh	r3, [r3, #26]
 800e838:	f023 0303 	bic.w	r3, r3, #3
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e846:	4618      	mov	r0, r3
 800e848:	371c      	adds	r7, #28
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd90      	pop	{r4, r7, pc}
 800e84e:	bf00      	nop
 800e850:	08016844 	.word	0x08016844
 800e854:	08017000 	.word	0x08017000
 800e858:	08016898 	.word	0x08016898

0800e85c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e85c:	b590      	push	{r4, r7, lr}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e864:	2300      	movs	r3, #0
 800e866:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d106      	bne.n	800e87c <tcp_keepalive+0x20>
 800e86e:	4b18      	ldr	r3, [pc, #96]	; (800e8d0 <tcp_keepalive+0x74>)
 800e870:	f640 0224 	movw	r2, #2084	; 0x824
 800e874:	4917      	ldr	r1, [pc, #92]	; (800e8d4 <tcp_keepalive+0x78>)
 800e876:	4818      	ldr	r0, [pc, #96]	; (800e8d8 <tcp_keepalive+0x7c>)
 800e878:	f005 fd42 	bl	8014300 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e87c:	7dfb      	ldrb	r3, [r7, #23]
 800e87e:	b29c      	uxth	r4, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e884:	3b01      	subs	r3, #1
 800e886:	4618      	mov	r0, r3
 800e888:	f7f9 f907 	bl	8007a9a <lwip_htonl>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2200      	movs	r2, #0
 800e890:	4621      	mov	r1, r4
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f7ff fe68 	bl	800e568 <tcp_output_alloc_header>
 800e898:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d102      	bne.n	800e8a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8a4:	e010      	b.n	800e8c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	6939      	ldr	r1, [r7, #16]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f7ff fe99 	bl	800e5e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3304      	adds	r3, #4
 800e8b8:	6939      	ldr	r1, [r7, #16]
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7ff fed0 	bl	800e660 <tcp_output_control_segment>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	371c      	adds	r7, #28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd90      	pop	{r4, r7, pc}
 800e8d0:	08016844 	.word	0x08016844
 800e8d4:	08017020 	.word	0x08017020
 800e8d8:	08016898 	.word	0x08016898

0800e8dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e8dc:	b590      	push	{r4, r7, lr}
 800e8de:	b08b      	sub	sp, #44	; 0x2c
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d106      	bne.n	800e8fe <tcp_zero_window_probe+0x22>
 800e8f0:	4b4c      	ldr	r3, [pc, #304]	; (800ea24 <tcp_zero_window_probe+0x148>)
 800e8f2:	f640 024f 	movw	r2, #2127	; 0x84f
 800e8f6:	494c      	ldr	r1, [pc, #304]	; (800ea28 <tcp_zero_window_probe+0x14c>)
 800e8f8:	484c      	ldr	r0, [pc, #304]	; (800ea2c <tcp_zero_window_probe+0x150>)
 800e8fa:	f005 fd01 	bl	8014300 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e902:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e90a:	2300      	movs	r3, #0
 800e90c:	e086      	b.n	800ea1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e914:	2bff      	cmp	r3, #255	; 0xff
 800e916:	d007      	beq.n	800e928 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e91e:	3301      	adds	r3, #1
 800e920:	b2da      	uxtb	r2, r3
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	899b      	ldrh	r3, [r3, #12]
 800e92e:	b29b      	uxth	r3, r3
 800e930:	4618      	mov	r0, r3
 800e932:	f7f9 f89d 	bl	8007a70 <lwip_htons>
 800e936:	4603      	mov	r3, r0
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	f003 0301 	and.w	r3, r3, #1
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d005      	beq.n	800e94e <tcp_zero_window_probe+0x72>
 800e942:	6a3b      	ldr	r3, [r7, #32]
 800e944:	891b      	ldrh	r3, [r3, #8]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d101      	bne.n	800e94e <tcp_zero_window_probe+0x72>
 800e94a:	2301      	movs	r3, #1
 800e94c:	e000      	b.n	800e950 <tcp_zero_window_probe+0x74>
 800e94e:	2300      	movs	r3, #0
 800e950:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e952:	7ffb      	ldrb	r3, [r7, #31]
 800e954:	2b00      	cmp	r3, #0
 800e956:	bf0c      	ite	eq
 800e958:	2301      	moveq	r3, #1
 800e95a:	2300      	movne	r3, #0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e964:	b299      	uxth	r1, r3
 800e966:	6a3b      	ldr	r3, [r7, #32]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	8bba      	ldrh	r2, [r7, #28]
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f7ff fdfa 	bl	800e568 <tcp_output_alloc_header>
 800e974:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d102      	bne.n	800e982 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e97c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e980:	e04c      	b.n	800ea1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e988:	7ffb      	ldrb	r3, [r7, #31]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d011      	beq.n	800e9b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	899b      	ldrh	r3, [r3, #12]
 800e992:	b29b      	uxth	r3, r3
 800e994:	b21b      	sxth	r3, r3
 800e996:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e99a:	b21c      	sxth	r4, r3
 800e99c:	2011      	movs	r0, #17
 800e99e:	f7f9 f867 	bl	8007a70 <lwip_htons>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	b21b      	sxth	r3, r3
 800e9a6:	4323      	orrs	r3, r4
 800e9a8:	b21b      	sxth	r3, r3
 800e9aa:	b29a      	uxth	r2, r3
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	819a      	strh	r2, [r3, #12]
 800e9b0:	e010      	b.n	800e9d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	3314      	adds	r3, #20
 800e9b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	6858      	ldr	r0, [r3, #4]
 800e9be:	6a3b      	ldr	r3, [r7, #32]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	891a      	ldrh	r2, [r3, #8]
 800e9c4:	6a3b      	ldr	r3, [r7, #32]
 800e9c6:	891b      	ldrh	r3, [r3, #8]
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	6939      	ldr	r1, [r7, #16]
 800e9d0:	f7fa fe52 	bl	8009678 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e9d4:	6a3b      	ldr	r3, [r7, #32]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7f9 f85d 	bl	8007a9a <lwip_htonl>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	1ad3      	subs	r3, r2, r3
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	da02      	bge.n	800e9f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	69b9      	ldr	r1, [r7, #24]
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	f7ff fdef 	bl	800e5e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	69b9      	ldr	r1, [r7, #24]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7ff fe26 	bl	800e660 <tcp_output_control_segment>
 800ea14:	4603      	mov	r3, r0
 800ea16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ea18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	372c      	adds	r7, #44	; 0x2c
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd90      	pop	{r4, r7, pc}
 800ea24:	08016844 	.word	0x08016844
 800ea28:	0801703c 	.word	0x0801703c
 800ea2c:	08016898 	.word	0x08016898

0800ea30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b082      	sub	sp, #8
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ea38:	f7fa ff0c 	bl	8009854 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	; (800ea68 <tcpip_tcp_timer+0x38>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d103      	bne.n	800ea4c <tcpip_tcp_timer+0x1c>
 800ea44:	4b09      	ldr	r3, [pc, #36]	; (800ea6c <tcpip_tcp_timer+0x3c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d005      	beq.n	800ea58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4908      	ldr	r1, [pc, #32]	; (800ea70 <tcpip_tcp_timer+0x40>)
 800ea50:	20fa      	movs	r0, #250	; 0xfa
 800ea52:	f000 f8f3 	bl	800ec3c <sys_timeout>
 800ea56:	e003      	b.n	800ea60 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ea58:	4b06      	ldr	r3, [pc, #24]	; (800ea74 <tcpip_tcp_timer+0x44>)
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	601a      	str	r2, [r3, #0]
  }
}
 800ea5e:	bf00      	nop
 800ea60:	bf00      	nop
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	2000c4fc 	.word	0x2000c4fc
 800ea6c:	2000c500 	.word	0x2000c500
 800ea70:	0800ea31 	.word	0x0800ea31
 800ea74:	2000c548 	.word	0x2000c548

0800ea78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ea7c:	4b0a      	ldr	r3, [pc, #40]	; (800eaa8 <tcp_timer_needed+0x30>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d10f      	bne.n	800eaa4 <tcp_timer_needed+0x2c>
 800ea84:	4b09      	ldr	r3, [pc, #36]	; (800eaac <tcp_timer_needed+0x34>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d103      	bne.n	800ea94 <tcp_timer_needed+0x1c>
 800ea8c:	4b08      	ldr	r3, [pc, #32]	; (800eab0 <tcp_timer_needed+0x38>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d007      	beq.n	800eaa4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ea94:	4b04      	ldr	r3, [pc, #16]	; (800eaa8 <tcp_timer_needed+0x30>)
 800ea96:	2201      	movs	r2, #1
 800ea98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	4905      	ldr	r1, [pc, #20]	; (800eab4 <tcp_timer_needed+0x3c>)
 800ea9e:	20fa      	movs	r0, #250	; 0xfa
 800eaa0:	f000 f8cc 	bl	800ec3c <sys_timeout>
  }
}
 800eaa4:	bf00      	nop
 800eaa6:	bd80      	pop	{r7, pc}
 800eaa8:	2000c548 	.word	0x2000c548
 800eaac:	2000c4fc 	.word	0x2000c4fc
 800eab0:	2000c500 	.word	0x2000c500
 800eab4:	0800ea31 	.word	0x0800ea31

0800eab8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800eac4:	200a      	movs	r0, #10
 800eac6:	f7f9 fcab 	bl	8008420 <memp_malloc>
 800eaca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d109      	bne.n	800eae6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d151      	bne.n	800eb7c <sys_timeout_abs+0xc4>
 800ead8:	4b2a      	ldr	r3, [pc, #168]	; (800eb84 <sys_timeout_abs+0xcc>)
 800eada:	22be      	movs	r2, #190	; 0xbe
 800eadc:	492a      	ldr	r1, [pc, #168]	; (800eb88 <sys_timeout_abs+0xd0>)
 800eade:	482b      	ldr	r0, [pc, #172]	; (800eb8c <sys_timeout_abs+0xd4>)
 800eae0:	f005 fc0e 	bl	8014300 <iprintf>
    return;
 800eae4:	e04a      	b.n	800eb7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	68ba      	ldr	r2, [r7, #8]
 800eaf0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	68fa      	ldr	r2, [r7, #12]
 800eafc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800eafe:	4b24      	ldr	r3, [pc, #144]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d103      	bne.n	800eb0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800eb06:	4a22      	ldr	r2, [pc, #136]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	6013      	str	r3, [r2, #0]
    return;
 800eb0c:	e037      	b.n	800eb7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800eb0e:	693b      	ldr	r3, [r7, #16]
 800eb10:	685a      	ldr	r2, [r3, #4]
 800eb12:	4b1f      	ldr	r3, [pc, #124]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	0fdb      	lsrs	r3, r3, #31
 800eb1c:	f003 0301 	and.w	r3, r3, #1
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d007      	beq.n	800eb36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800eb26:	4b1a      	ldr	r3, [pc, #104]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800eb2e:	4a18      	ldr	r2, [pc, #96]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	6013      	str	r3, [r2, #0]
 800eb34:	e023      	b.n	800eb7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800eb36:	4b16      	ldr	r3, [pc, #88]	; (800eb90 <sys_timeout_abs+0xd8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	617b      	str	r3, [r7, #20]
 800eb3c:	e01a      	b.n	800eb74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00b      	beq.n	800eb5e <sys_timeout_abs+0xa6>
 800eb46:	693b      	ldr	r3, [r7, #16]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	0fdb      	lsrs	r3, r3, #31
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d007      	beq.n	800eb6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	693a      	ldr	r2, [r7, #16]
 800eb6a:	601a      	str	r2, [r3, #0]
        break;
 800eb6c:	e007      	b.n	800eb7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	617b      	str	r3, [r7, #20]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e1      	bne.n	800eb3e <sys_timeout_abs+0x86>
 800eb7a:	e000      	b.n	800eb7e <sys_timeout_abs+0xc6>
    return;
 800eb7c:	bf00      	nop
      }
    }
  }
}
 800eb7e:	3718      	adds	r7, #24
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}
 800eb84:	08017060 	.word	0x08017060
 800eb88:	08017094 	.word	0x08017094
 800eb8c:	080170d4 	.word	0x080170d4
 800eb90:	2000c540 	.word	0x2000c540

0800eb94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b086      	sub	sp, #24
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	4798      	blx	r3

  now = sys_now();
 800eba6:	f7f5 fc87 	bl	80044b8 <sys_now>
 800ebaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	; (800ebf0 <lwip_cyclic_timer+0x5c>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ebb8:	68fa      	ldr	r2, [r7, #12]
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	0fdb      	lsrs	r3, r3, #31
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d009      	beq.n	800ebde <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	681a      	ldr	r2, [r3, #0]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	4907      	ldr	r1, [pc, #28]	; (800ebf4 <lwip_cyclic_timer+0x60>)
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff ff6e 	bl	800eab8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ebdc:	e004      	b.n	800ebe8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	4904      	ldr	r1, [pc, #16]	; (800ebf4 <lwip_cyclic_timer+0x60>)
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f7ff ff68 	bl	800eab8 <sys_timeout_abs>
}
 800ebe8:	bf00      	nop
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	2000c544 	.word	0x2000c544
 800ebf4:	0800eb95 	.word	0x0800eb95

0800ebf8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ebfe:	2301      	movs	r3, #1
 800ec00:	607b      	str	r3, [r7, #4]
 800ec02:	e00e      	b.n	800ec22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ec04:	4a0b      	ldr	r2, [pc, #44]	; (800ec34 <sys_timeouts_init+0x3c>)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	00db      	lsls	r3, r3, #3
 800ec10:	4a08      	ldr	r2, [pc, #32]	; (800ec34 <sys_timeouts_init+0x3c>)
 800ec12:	4413      	add	r3, r2
 800ec14:	461a      	mov	r2, r3
 800ec16:	4908      	ldr	r1, [pc, #32]	; (800ec38 <sys_timeouts_init+0x40>)
 800ec18:	f000 f810 	bl	800ec3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	3301      	adds	r3, #1
 800ec20:	607b      	str	r3, [r7, #4]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b04      	cmp	r3, #4
 800ec26:	d9ed      	bls.n	800ec04 <sys_timeouts_init+0xc>
  }
}
 800ec28:	bf00      	nop
 800ec2a:	bf00      	nop
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	0801802c 	.word	0x0801802c
 800ec38:	0800eb95 	.word	0x0800eb95

0800ec3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ec4e:	d306      	bcc.n	800ec5e <sys_timeout+0x22>
 800ec50:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <sys_timeout+0x40>)
 800ec52:	f240 1229 	movw	r2, #297	; 0x129
 800ec56:	490a      	ldr	r1, [pc, #40]	; (800ec80 <sys_timeout+0x44>)
 800ec58:	480a      	ldr	r0, [pc, #40]	; (800ec84 <sys_timeout+0x48>)
 800ec5a:	f005 fb51 	bl	8014300 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ec5e:	f7f5 fc2b 	bl	80044b8 <sys_now>
 800ec62:	4602      	mov	r2, r0
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	4413      	add	r3, r2
 800ec68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	68b9      	ldr	r1, [r7, #8]
 800ec6e:	6978      	ldr	r0, [r7, #20]
 800ec70:	f7ff ff22 	bl	800eab8 <sys_timeout_abs>
#endif
}
 800ec74:	bf00      	nop
 800ec76:	3718      	adds	r7, #24
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	08017060 	.word	0x08017060
 800ec80:	080170fc 	.word	0x080170fc
 800ec84:	080170d4 	.word	0x080170d4

0800ec88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ec8e:	f7f5 fc13 	bl	80044b8 <sys_now>
 800ec92:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ec94:	4b17      	ldr	r3, [pc, #92]	; (800ecf4 <sys_check_timeouts+0x6c>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d022      	beq.n	800ece6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	68fa      	ldr	r2, [r7, #12]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	0fdb      	lsrs	r3, r3, #31
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d11a      	bne.n	800ecea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a0e      	ldr	r2, [pc, #56]	; (800ecf4 <sys_check_timeouts+0x6c>)
 800ecba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	4a0a      	ldr	r2, [pc, #40]	; (800ecf8 <sys_check_timeouts+0x70>)
 800ecce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ecd0:	68b9      	ldr	r1, [r7, #8]
 800ecd2:	200a      	movs	r0, #10
 800ecd4:	f7f9 fc1a 	bl	800850c <memp_free>
    if (handler != NULL) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d0da      	beq.n	800ec94 <sys_check_timeouts+0xc>
      handler(arg);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6838      	ldr	r0, [r7, #0]
 800ece2:	4798      	blx	r3
  do {
 800ece4:	e7d6      	b.n	800ec94 <sys_check_timeouts+0xc>
      return;
 800ece6:	bf00      	nop
 800ece8:	e000      	b.n	800ecec <sys_check_timeouts+0x64>
      return;
 800ecea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	2000c540 	.word	0x2000c540
 800ecf8:	2000c544 	.word	0x2000c544

0800ecfc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800ed02:	4b16      	ldr	r3, [pc, #88]	; (800ed5c <sys_timeouts_sleeptime+0x60>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d102      	bne.n	800ed10 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800ed0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed0e:	e020      	b.n	800ed52 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800ed10:	f7f5 fbd2 	bl	80044b8 <sys_now>
 800ed14:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800ed16:	4b11      	ldr	r3, [pc, #68]	; (800ed5c <sys_timeouts_sleeptime+0x60>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	1ad3      	subs	r3, r2, r3
 800ed20:	0fdb      	lsrs	r3, r3, #31
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <sys_timeouts_sleeptime+0x34>
    return 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	e010      	b.n	800ed52 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800ed30:	4b0a      	ldr	r3, [pc, #40]	; (800ed5c <sys_timeouts_sleeptime+0x60>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	685a      	ldr	r2, [r3, #4]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	da06      	bge.n	800ed50 <sys_timeouts_sleeptime+0x54>
 800ed42:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <sys_timeouts_sleeptime+0x64>)
 800ed44:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ed48:	4906      	ldr	r1, [pc, #24]	; (800ed64 <sys_timeouts_sleeptime+0x68>)
 800ed4a:	4807      	ldr	r0, [pc, #28]	; (800ed68 <sys_timeouts_sleeptime+0x6c>)
 800ed4c:	f005 fad8 	bl	8014300 <iprintf>
    return ret;
 800ed50:	683b      	ldr	r3, [r7, #0]
  }
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	2000c540 	.word	0x2000c540
 800ed60:	08017060 	.word	0x08017060
 800ed64:	08017134 	.word	0x08017134
 800ed68:	080170d4 	.word	0x080170d4

0800ed6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ed70:	f005 f9b4 	bl	80140dc <rand>
 800ed74:	4603      	mov	r3, r0
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	4b01      	ldr	r3, [pc, #4]	; (800ed8c <udp_init+0x20>)
 800ed86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ed88:	bf00      	nop
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	2000002c 	.word	0x2000002c

0800ed90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b083      	sub	sp, #12
 800ed94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ed96:	2300      	movs	r3, #0
 800ed98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ed9a:	4b17      	ldr	r3, [pc, #92]	; (800edf8 <udp_new_port+0x68>)
 800ed9c:	881b      	ldrh	r3, [r3, #0]
 800ed9e:	1c5a      	adds	r2, r3, #1
 800eda0:	b291      	uxth	r1, r2
 800eda2:	4a15      	ldr	r2, [pc, #84]	; (800edf8 <udp_new_port+0x68>)
 800eda4:	8011      	strh	r1, [r2, #0]
 800eda6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edaa:	4293      	cmp	r3, r2
 800edac:	d103      	bne.n	800edb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800edae:	4b12      	ldr	r3, [pc, #72]	; (800edf8 <udp_new_port+0x68>)
 800edb0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800edb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800edb6:	4b11      	ldr	r3, [pc, #68]	; (800edfc <udp_new_port+0x6c>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	603b      	str	r3, [r7, #0]
 800edbc:	e011      	b.n	800ede2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	8a5a      	ldrh	r2, [r3, #18]
 800edc2:	4b0d      	ldr	r3, [pc, #52]	; (800edf8 <udp_new_port+0x68>)
 800edc4:	881b      	ldrh	r3, [r3, #0]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	d108      	bne.n	800eddc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800edca:	88fb      	ldrh	r3, [r7, #6]
 800edcc:	3301      	adds	r3, #1
 800edce:	80fb      	strh	r3, [r7, #6]
 800edd0:	88fb      	ldrh	r3, [r7, #6]
 800edd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800edd6:	d3e0      	bcc.n	800ed9a <udp_new_port+0xa>
        return 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	e007      	b.n	800edec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eddc:	683b      	ldr	r3, [r7, #0]
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	603b      	str	r3, [r7, #0]
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1ea      	bne.n	800edbe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ede8:	4b03      	ldr	r3, [pc, #12]	; (800edf8 <udp_new_port+0x68>)
 800edea:	881b      	ldrh	r3, [r3, #0]
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr
 800edf8:	2000002c 	.word	0x2000002c
 800edfc:	2000c54c 	.word	0x2000c54c

0800ee00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	60f8      	str	r0, [r7, #12]
 800ee08:	60b9      	str	r1, [r7, #8]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d105      	bne.n	800ee20 <udp_input_local_match+0x20>
 800ee14:	4b27      	ldr	r3, [pc, #156]	; (800eeb4 <udp_input_local_match+0xb4>)
 800ee16:	2287      	movs	r2, #135	; 0x87
 800ee18:	4927      	ldr	r1, [pc, #156]	; (800eeb8 <udp_input_local_match+0xb8>)
 800ee1a:	4828      	ldr	r0, [pc, #160]	; (800eebc <udp_input_local_match+0xbc>)
 800ee1c:	f005 fa70 	bl	8014300 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d105      	bne.n	800ee32 <udp_input_local_match+0x32>
 800ee26:	4b23      	ldr	r3, [pc, #140]	; (800eeb4 <udp_input_local_match+0xb4>)
 800ee28:	2288      	movs	r2, #136	; 0x88
 800ee2a:	4925      	ldr	r1, [pc, #148]	; (800eec0 <udp_input_local_match+0xc0>)
 800ee2c:	4823      	ldr	r0, [pc, #140]	; (800eebc <udp_input_local_match+0xbc>)
 800ee2e:	f005 fa67 	bl	8014300 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	7a1b      	ldrb	r3, [r3, #8]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00b      	beq.n	800ee52 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	7a1a      	ldrb	r2, [r3, #8]
 800ee3e:	4b21      	ldr	r3, [pc, #132]	; (800eec4 <udp_input_local_match+0xc4>)
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ee46:	3301      	adds	r3, #1
 800ee48:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d001      	beq.n	800ee52 <udp_input_local_match+0x52>
    return 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	e02b      	b.n	800eeaa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ee52:	79fb      	ldrb	r3, [r7, #7]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d018      	beq.n	800ee8a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d013      	beq.n	800ee86 <udp_input_local_match+0x86>
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d00f      	beq.n	800ee86 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee66:	4b17      	ldr	r3, [pc, #92]	; (800eec4 <udp_input_local_match+0xc4>)
 800ee68:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee6e:	d00a      	beq.n	800ee86 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	4b13      	ldr	r3, [pc, #76]	; (800eec4 <udp_input_local_match+0xc4>)
 800ee76:	695b      	ldr	r3, [r3, #20]
 800ee78:	405a      	eors	r2, r3
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	3308      	adds	r3, #8
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d110      	bne.n	800eea8 <udp_input_local_match+0xa8>
          return 1;
 800ee86:	2301      	movs	r3, #1
 800ee88:	e00f      	b.n	800eeaa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d009      	beq.n	800eea4 <udp_input_local_match+0xa4>
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <udp_input_local_match+0xa4>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	4b09      	ldr	r3, [pc, #36]	; (800eec4 <udp_input_local_match+0xc4>)
 800ee9e:	695b      	ldr	r3, [r3, #20]
 800eea0:	429a      	cmp	r2, r3
 800eea2:	d101      	bne.n	800eea8 <udp_input_local_match+0xa8>
        return 1;
 800eea4:	2301      	movs	r3, #1
 800eea6:	e000      	b.n	800eeaa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800eea8:	2300      	movs	r3, #0
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3710      	adds	r7, #16
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	08017148 	.word	0x08017148
 800eeb8:	08017178 	.word	0x08017178
 800eebc:	0801719c 	.word	0x0801719c
 800eec0:	080171c4 	.word	0x080171c4
 800eec4:	20008d7c 	.word	0x20008d7c

0800eec8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800eec8:	b590      	push	{r4, r7, lr}
 800eeca:	b08d      	sub	sp, #52	; 0x34
 800eecc:	af02      	add	r7, sp, #8
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800eed2:	2300      	movs	r3, #0
 800eed4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d105      	bne.n	800eee8 <udp_input+0x20>
 800eedc:	4b7c      	ldr	r3, [pc, #496]	; (800f0d0 <udp_input+0x208>)
 800eede:	22cf      	movs	r2, #207	; 0xcf
 800eee0:	497c      	ldr	r1, [pc, #496]	; (800f0d4 <udp_input+0x20c>)
 800eee2:	487d      	ldr	r0, [pc, #500]	; (800f0d8 <udp_input+0x210>)
 800eee4:	f005 fa0c 	bl	8014300 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d105      	bne.n	800eefa <udp_input+0x32>
 800eeee:	4b78      	ldr	r3, [pc, #480]	; (800f0d0 <udp_input+0x208>)
 800eef0:	22d0      	movs	r2, #208	; 0xd0
 800eef2:	497a      	ldr	r1, [pc, #488]	; (800f0dc <udp_input+0x214>)
 800eef4:	4878      	ldr	r0, [pc, #480]	; (800f0d8 <udp_input+0x210>)
 800eef6:	f005 fa03 	bl	8014300 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	895b      	ldrh	r3, [r3, #10]
 800eefe:	2b07      	cmp	r3, #7
 800ef00:	d803      	bhi.n	800ef0a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f7fa f9b2 	bl	800926c <pbuf_free>
    goto end;
 800ef08:	e0de      	b.n	800f0c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	685b      	ldr	r3, [r3, #4]
 800ef0e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ef10:	4b73      	ldr	r3, [pc, #460]	; (800f0e0 <udp_input+0x218>)
 800ef12:	695b      	ldr	r3, [r3, #20]
 800ef14:	4a72      	ldr	r2, [pc, #456]	; (800f0e0 <udp_input+0x218>)
 800ef16:	6812      	ldr	r2, [r2, #0]
 800ef18:	4611      	mov	r1, r2
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f003 fe06 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 800ef20:	4603      	mov	r3, r0
 800ef22:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7f8 fda0 	bl	8007a70 <lwip_htons>
 800ef30:	4603      	mov	r3, r0
 800ef32:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ef34:	697b      	ldr	r3, [r7, #20]
 800ef36:	885b      	ldrh	r3, [r3, #2]
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f7f8 fd98 	bl	8007a70 <lwip_htons>
 800ef40:	4603      	mov	r3, r0
 800ef42:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ef44:	2300      	movs	r3, #0
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef50:	4b64      	ldr	r3, [pc, #400]	; (800f0e4 <udp_input+0x21c>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	627b      	str	r3, [r7, #36]	; 0x24
 800ef56:	e054      	b.n	800f002 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ef58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef5a:	8a5b      	ldrh	r3, [r3, #18]
 800ef5c:	89fa      	ldrh	r2, [r7, #14]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d14a      	bne.n	800eff8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ef62:	7cfb      	ldrb	r3, [r7, #19]
 800ef64:	461a      	mov	r2, r3
 800ef66:	6839      	ldr	r1, [r7, #0]
 800ef68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef6a:	f7ff ff49 	bl	800ee00 <udp_input_local_match>
 800ef6e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d041      	beq.n	800eff8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ef74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef76:	7c1b      	ldrb	r3, [r3, #16]
 800ef78:	f003 0304 	and.w	r3, r3, #4
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d11d      	bne.n	800efbc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d102      	bne.n	800ef8c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ef86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef88:	61fb      	str	r3, [r7, #28]
 800ef8a:	e017      	b.n	800efbc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ef8c:	7cfb      	ldrb	r3, [r7, #19]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d014      	beq.n	800efbc <udp_input+0xf4>
 800ef92:	4b53      	ldr	r3, [pc, #332]	; (800f0e0 <udp_input+0x218>)
 800ef94:	695b      	ldr	r3, [r3, #20]
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef9a:	d10f      	bne.n	800efbc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ef9c:	69fb      	ldr	r3, [r7, #28]
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	3304      	adds	r3, #4
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	429a      	cmp	r2, r3
 800efa8:	d008      	beq.n	800efbc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	3304      	adds	r3, #4
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d101      	bne.n	800efbc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800efb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800efbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efbe:	8a9b      	ldrh	r3, [r3, #20]
 800efc0:	8a3a      	ldrh	r2, [r7, #16]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d118      	bne.n	800eff8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800efce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd0:	685a      	ldr	r2, [r3, #4]
 800efd2:	4b43      	ldr	r3, [pc, #268]	; (800f0e0 <udp_input+0x218>)
 800efd4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d10e      	bne.n	800eff8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800efda:	6a3b      	ldr	r3, [r7, #32]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d014      	beq.n	800f00a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	68da      	ldr	r2, [r3, #12]
 800efe4:	6a3b      	ldr	r3, [r7, #32]
 800efe6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800efe8:	4b3e      	ldr	r3, [pc, #248]	; (800f0e4 <udp_input+0x21c>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800eff0:	4a3c      	ldr	r2, [pc, #240]	; (800f0e4 <udp_input+0x21c>)
 800eff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800eff6:	e008      	b.n	800f00a <udp_input+0x142>
      }
    }

    prev = pcb;
 800eff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800effc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	627b      	str	r3, [r7, #36]	; 0x24
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	2b00      	cmp	r3, #0
 800f006:	d1a7      	bne.n	800ef58 <udp_input+0x90>
 800f008:	e000      	b.n	800f00c <udp_input+0x144>
        break;
 800f00a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d101      	bne.n	800f016 <udp_input+0x14e>
    pcb = uncon_pcb;
 800f012:	69fb      	ldr	r3, [r7, #28]
 800f014:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <udp_input+0x15a>
    for_us = 1;
 800f01c:	2301      	movs	r3, #1
 800f01e:	76fb      	strb	r3, [r7, #27]
 800f020:	e00a      	b.n	800f038 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	3304      	adds	r3, #4
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	4b2d      	ldr	r3, [pc, #180]	; (800f0e0 <udp_input+0x218>)
 800f02a:	695b      	ldr	r3, [r3, #20]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	bf0c      	ite	eq
 800f030:	2301      	moveq	r3, #1
 800f032:	2300      	movne	r3, #0
 800f034:	b2db      	uxtb	r3, r3
 800f036:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f038:	7efb      	ldrb	r3, [r7, #27]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d041      	beq.n	800f0c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f03e:	2108      	movs	r1, #8
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f7fa f88d 	bl	8009160 <pbuf_remove_header>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f04c:	4b20      	ldr	r3, [pc, #128]	; (800f0d0 <udp_input+0x208>)
 800f04e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800f052:	4925      	ldr	r1, [pc, #148]	; (800f0e8 <udp_input+0x220>)
 800f054:	4820      	ldr	r0, [pc, #128]	; (800f0d8 <udp_input+0x210>)
 800f056:	f005 f953 	bl	8014300 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f7fa f906 	bl	800926c <pbuf_free>
      goto end;
 800f060:	e032      	b.n	800f0c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	2b00      	cmp	r3, #0
 800f066:	d012      	beq.n	800f08e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00a      	beq.n	800f086 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	699c      	ldr	r4, [r3, #24]
 800f074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f076:	69d8      	ldr	r0, [r3, #28]
 800f078:	8a3b      	ldrh	r3, [r7, #16]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	4b1b      	ldr	r3, [pc, #108]	; (800f0ec <udp_input+0x224>)
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f082:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f084:	e021      	b.n	800f0ca <udp_input+0x202>
        pbuf_free(p);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f7fa f8f0 	bl	800926c <pbuf_free>
        goto end;
 800f08c:	e01c      	b.n	800f0c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f08e:	7cfb      	ldrb	r3, [r7, #19]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d112      	bne.n	800f0ba <udp_input+0x1f2>
 800f094:	4b12      	ldr	r3, [pc, #72]	; (800f0e0 <udp_input+0x218>)
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f09c:	2be0      	cmp	r3, #224	; 0xe0
 800f09e:	d00c      	beq.n	800f0ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f0a0:	4b0f      	ldr	r3, [pc, #60]	; (800f0e0 <udp_input+0x218>)
 800f0a2:	899b      	ldrh	r3, [r3, #12]
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fa f8ca 	bl	8009246 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f0b2:	2103      	movs	r1, #3
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f003 f9fb 	bl	80124b0 <icmp_dest_unreach>
      pbuf_free(p);
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7fa f8d6 	bl	800926c <pbuf_free>
  return;
 800f0c0:	e003      	b.n	800f0ca <udp_input+0x202>
    pbuf_free(p);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f7fa f8d2 	bl	800926c <pbuf_free>
  return;
 800f0c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f0ca:	372c      	adds	r7, #44	; 0x2c
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd90      	pop	{r4, r7, pc}
 800f0d0:	08017148 	.word	0x08017148
 800f0d4:	080171ec 	.word	0x080171ec
 800f0d8:	0801719c 	.word	0x0801719c
 800f0dc:	08017204 	.word	0x08017204
 800f0e0:	20008d7c 	.word	0x20008d7c
 800f0e4:	2000c54c 	.word	0x2000c54c
 800f0e8:	08017220 	.word	0x08017220
 800f0ec:	20008d8c 	.word	0x20008d8c

0800f0f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b088      	sub	sp, #32
 800f0f4:	af02      	add	r7, sp, #8
 800f0f6:	60f8      	str	r0, [r7, #12]
 800f0f8:	60b9      	str	r1, [r7, #8]
 800f0fa:	607a      	str	r2, [r7, #4]
 800f0fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <udp_sendto_if+0x28>
 800f104:	4b2e      	ldr	r3, [pc, #184]	; (800f1c0 <udp_sendto_if+0xd0>)
 800f106:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f10a:	492e      	ldr	r1, [pc, #184]	; (800f1c4 <udp_sendto_if+0xd4>)
 800f10c:	482e      	ldr	r0, [pc, #184]	; (800f1c8 <udp_sendto_if+0xd8>)
 800f10e:	f005 f8f7 	bl	8014300 <iprintf>
 800f112:	f06f 030f 	mvn.w	r3, #15
 800f116:	e04f      	b.n	800f1b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d109      	bne.n	800f132 <udp_sendto_if+0x42>
 800f11e:	4b28      	ldr	r3, [pc, #160]	; (800f1c0 <udp_sendto_if+0xd0>)
 800f120:	f240 2281 	movw	r2, #641	; 0x281
 800f124:	4929      	ldr	r1, [pc, #164]	; (800f1cc <udp_sendto_if+0xdc>)
 800f126:	4828      	ldr	r0, [pc, #160]	; (800f1c8 <udp_sendto_if+0xd8>)
 800f128:	f005 f8ea 	bl	8014300 <iprintf>
 800f12c:	f06f 030f 	mvn.w	r3, #15
 800f130:	e042      	b.n	800f1b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d109      	bne.n	800f14c <udp_sendto_if+0x5c>
 800f138:	4b21      	ldr	r3, [pc, #132]	; (800f1c0 <udp_sendto_if+0xd0>)
 800f13a:	f240 2282 	movw	r2, #642	; 0x282
 800f13e:	4924      	ldr	r1, [pc, #144]	; (800f1d0 <udp_sendto_if+0xe0>)
 800f140:	4821      	ldr	r0, [pc, #132]	; (800f1c8 <udp_sendto_if+0xd8>)
 800f142:	f005 f8dd 	bl	8014300 <iprintf>
 800f146:	f06f 030f 	mvn.w	r3, #15
 800f14a:	e035      	b.n	800f1b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f14c:	6a3b      	ldr	r3, [r7, #32]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d109      	bne.n	800f166 <udp_sendto_if+0x76>
 800f152:	4b1b      	ldr	r3, [pc, #108]	; (800f1c0 <udp_sendto_if+0xd0>)
 800f154:	f240 2283 	movw	r2, #643	; 0x283
 800f158:	491e      	ldr	r1, [pc, #120]	; (800f1d4 <udp_sendto_if+0xe4>)
 800f15a:	481b      	ldr	r0, [pc, #108]	; (800f1c8 <udp_sendto_if+0xd8>)
 800f15c:	f005 f8d0 	bl	8014300 <iprintf>
 800f160:	f06f 030f 	mvn.w	r3, #15
 800f164:	e028      	b.n	800f1b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d009      	beq.n	800f180 <udp_sendto_if+0x90>
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d005      	beq.n	800f180 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f17c:	2be0      	cmp	r3, #224	; 0xe0
 800f17e:	d103      	bne.n	800f188 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	3304      	adds	r3, #4
 800f184:	617b      	str	r3, [r7, #20]
 800f186:	e00b      	b.n	800f1a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	6a3b      	ldr	r3, [r7, #32]
 800f18e:	3304      	adds	r3, #4
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	429a      	cmp	r2, r3
 800f194:	d002      	beq.n	800f19c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f196:	f06f 0303 	mvn.w	r3, #3
 800f19a:	e00d      	b.n	800f1b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f1a0:	887a      	ldrh	r2, [r7, #2]
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	9301      	str	r3, [sp, #4]
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	9300      	str	r3, [sp, #0]
 800f1aa:	4613      	mov	r3, r2
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	68b9      	ldr	r1, [r7, #8]
 800f1b0:	68f8      	ldr	r0, [r7, #12]
 800f1b2:	f000 f811 	bl	800f1d8 <udp_sendto_if_src>
 800f1b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	08017148 	.word	0x08017148
 800f1c4:	080172bc 	.word	0x080172bc
 800f1c8:	0801719c 	.word	0x0801719c
 800f1cc:	080172d8 	.word	0x080172d8
 800f1d0:	080172f4 	.word	0x080172f4
 800f1d4:	08017314 	.word	0x08017314

0800f1d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08c      	sub	sp, #48	; 0x30
 800f1dc:	af04      	add	r7, sp, #16
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	60b9      	str	r1, [r7, #8]
 800f1e2:	607a      	str	r2, [r7, #4]
 800f1e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d109      	bne.n	800f200 <udp_sendto_if_src+0x28>
 800f1ec:	4b65      	ldr	r3, [pc, #404]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f1ee:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f1f2:	4965      	ldr	r1, [pc, #404]	; (800f388 <udp_sendto_if_src+0x1b0>)
 800f1f4:	4865      	ldr	r0, [pc, #404]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f1f6:	f005 f883 	bl	8014300 <iprintf>
 800f1fa:	f06f 030f 	mvn.w	r3, #15
 800f1fe:	e0bc      	b.n	800f37a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d109      	bne.n	800f21a <udp_sendto_if_src+0x42>
 800f206:	4b5f      	ldr	r3, [pc, #380]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f208:	f240 22d2 	movw	r2, #722	; 0x2d2
 800f20c:	4960      	ldr	r1, [pc, #384]	; (800f390 <udp_sendto_if_src+0x1b8>)
 800f20e:	485f      	ldr	r0, [pc, #380]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f210:	f005 f876 	bl	8014300 <iprintf>
 800f214:	f06f 030f 	mvn.w	r3, #15
 800f218:	e0af      	b.n	800f37a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d109      	bne.n	800f234 <udp_sendto_if_src+0x5c>
 800f220:	4b58      	ldr	r3, [pc, #352]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f222:	f240 22d3 	movw	r2, #723	; 0x2d3
 800f226:	495b      	ldr	r1, [pc, #364]	; (800f394 <udp_sendto_if_src+0x1bc>)
 800f228:	4858      	ldr	r0, [pc, #352]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f22a:	f005 f869 	bl	8014300 <iprintf>
 800f22e:	f06f 030f 	mvn.w	r3, #15
 800f232:	e0a2      	b.n	800f37a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	2b00      	cmp	r3, #0
 800f238:	d109      	bne.n	800f24e <udp_sendto_if_src+0x76>
 800f23a:	4b52      	ldr	r3, [pc, #328]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f23c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800f240:	4955      	ldr	r1, [pc, #340]	; (800f398 <udp_sendto_if_src+0x1c0>)
 800f242:	4852      	ldr	r0, [pc, #328]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f244:	f005 f85c 	bl	8014300 <iprintf>
 800f248:	f06f 030f 	mvn.w	r3, #15
 800f24c:	e095      	b.n	800f37a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	2b00      	cmp	r3, #0
 800f252:	d109      	bne.n	800f268 <udp_sendto_if_src+0x90>
 800f254:	4b4b      	ldr	r3, [pc, #300]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f256:	f240 22d5 	movw	r2, #725	; 0x2d5
 800f25a:	4950      	ldr	r1, [pc, #320]	; (800f39c <udp_sendto_if_src+0x1c4>)
 800f25c:	484b      	ldr	r0, [pc, #300]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f25e:	f005 f84f 	bl	8014300 <iprintf>
 800f262:	f06f 030f 	mvn.w	r3, #15
 800f266:	e088      	b.n	800f37a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	8a5b      	ldrh	r3, [r3, #18]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d10f      	bne.n	800f290 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f270:	68f9      	ldr	r1, [r7, #12]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	8a5b      	ldrh	r3, [r3, #18]
 800f276:	461a      	mov	r2, r3
 800f278:	68f8      	ldr	r0, [r7, #12]
 800f27a:	f000 f893 	bl	800f3a4 <udp_bind>
 800f27e:	4603      	mov	r3, r0
 800f280:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f282:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f28a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f28e:	e074      	b.n	800f37a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	891b      	ldrh	r3, [r3, #8]
 800f294:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800f298:	4293      	cmp	r3, r2
 800f29a:	d902      	bls.n	800f2a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2a0:	e06b      	b.n	800f37a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f2a2:	2108      	movs	r1, #8
 800f2a4:	68b8      	ldr	r0, [r7, #8]
 800f2a6:	f7f9 ff4b 	bl	8009140 <pbuf_add_header>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d015      	beq.n	800f2dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f2b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f2b4:	2108      	movs	r1, #8
 800f2b6:	2022      	movs	r0, #34	; 0x22
 800f2b8:	f7f9 fcf4 	bl	8008ca4 <pbuf_alloc>
 800f2bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f2c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f2c8:	e057      	b.n	800f37a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	891b      	ldrh	r3, [r3, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f2d2:	68b9      	ldr	r1, [r7, #8]
 800f2d4:	69f8      	ldr	r0, [r7, #28]
 800f2d6:	f7fa f8ed 	bl	80094b4 <pbuf_chain>
 800f2da:	e001      	b.n	800f2e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	895b      	ldrh	r3, [r3, #10]
 800f2e4:	2b07      	cmp	r3, #7
 800f2e6:	d806      	bhi.n	800f2f6 <udp_sendto_if_src+0x11e>
 800f2e8:	4b26      	ldr	r3, [pc, #152]	; (800f384 <udp_sendto_if_src+0x1ac>)
 800f2ea:	f240 320d 	movw	r2, #781	; 0x30d
 800f2ee:	492c      	ldr	r1, [pc, #176]	; (800f3a0 <udp_sendto_if_src+0x1c8>)
 800f2f0:	4826      	ldr	r0, [pc, #152]	; (800f38c <udp_sendto_if_src+0x1b4>)
 800f2f2:	f005 f805 	bl	8014300 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	8a5b      	ldrh	r3, [r3, #18]
 800f300:	4618      	mov	r0, r3
 800f302:	f7f8 fbb5 	bl	8007a70 <lwip_htons>
 800f306:	4603      	mov	r3, r0
 800f308:	461a      	mov	r2, r3
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f30e:	887b      	ldrh	r3, [r7, #2]
 800f310:	4618      	mov	r0, r3
 800f312:	f7f8 fbad 	bl	8007a70 <lwip_htons>
 800f316:	4603      	mov	r3, r0
 800f318:	461a      	mov	r2, r3
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2200      	movs	r2, #0
 800f322:	719a      	strb	r2, [r3, #6]
 800f324:	2200      	movs	r2, #0
 800f326:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	891b      	ldrh	r3, [r3, #8]
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7f8 fb9f 	bl	8007a70 <lwip_htons>
 800f332:	4603      	mov	r3, r0
 800f334:	461a      	mov	r2, r3
 800f336:	697b      	ldr	r3, [r7, #20]
 800f338:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f33a:	2311      	movs	r3, #17
 800f33c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	7adb      	ldrb	r3, [r3, #11]
 800f342:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	7a9b      	ldrb	r3, [r3, #10]
 800f348:	7cb9      	ldrb	r1, [r7, #18]
 800f34a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f34c:	9202      	str	r2, [sp, #8]
 800f34e:	7cfa      	ldrb	r2, [r7, #19]
 800f350:	9201      	str	r2, [sp, #4]
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	460b      	mov	r3, r1
 800f356:	687a      	ldr	r2, [r7, #4]
 800f358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f35a:	69f8      	ldr	r0, [r7, #28]
 800f35c:	f003 fb38 	bl	80129d0 <ip4_output_if_src>
 800f360:	4603      	mov	r3, r0
 800f362:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f364:	69fa      	ldr	r2, [r7, #28]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d004      	beq.n	800f376 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800f36c:	69f8      	ldr	r0, [r7, #28]
 800f36e:	f7f9 ff7d 	bl	800926c <pbuf_free>
    q = NULL;
 800f372:	2300      	movs	r3, #0
 800f374:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f376:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3720      	adds	r7, #32
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	08017148 	.word	0x08017148
 800f388:	08017334 	.word	0x08017334
 800f38c:	0801719c 	.word	0x0801719c
 800f390:	08017354 	.word	0x08017354
 800f394:	08017374 	.word	0x08017374
 800f398:	08017398 	.word	0x08017398
 800f39c:	080173bc 	.word	0x080173bc
 800f3a0:	080173e0 	.word	0x080173e0

0800f3a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f3a4:	b580      	push	{r7, lr}
 800f3a6:	b086      	sub	sp, #24
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	60f8      	str	r0, [r7, #12]
 800f3ac:	60b9      	str	r1, [r7, #8]
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f3b8:	4b39      	ldr	r3, [pc, #228]	; (800f4a0 <udp_bind+0xfc>)
 800f3ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d109      	bne.n	800f3d6 <udp_bind+0x32>
 800f3c2:	4b38      	ldr	r3, [pc, #224]	; (800f4a4 <udp_bind+0x100>)
 800f3c4:	f240 32b7 	movw	r2, #951	; 0x3b7
 800f3c8:	4937      	ldr	r1, [pc, #220]	; (800f4a8 <udp_bind+0x104>)
 800f3ca:	4838      	ldr	r0, [pc, #224]	; (800f4ac <udp_bind+0x108>)
 800f3cc:	f004 ff98 	bl	8014300 <iprintf>
 800f3d0:	f06f 030f 	mvn.w	r3, #15
 800f3d4:	e060      	b.n	800f498 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f3da:	4b35      	ldr	r3, [pc, #212]	; (800f4b0 <udp_bind+0x10c>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	617b      	str	r3, [r7, #20]
 800f3e0:	e009      	b.n	800f3f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d102      	bne.n	800f3f0 <udp_bind+0x4c>
      rebind = 1;
 800f3ea:	2301      	movs	r3, #1
 800f3ec:	74fb      	strb	r3, [r7, #19]
      break;
 800f3ee:	e005      	b.n	800f3fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	617b      	str	r3, [r7, #20]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1f2      	bne.n	800f3e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f3fc:	88fb      	ldrh	r3, [r7, #6]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <udp_bind+0x72>
    port = udp_new_port();
 800f402:	f7ff fcc5 	bl	800ed90 <udp_new_port>
 800f406:	4603      	mov	r3, r0
 800f408:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d12c      	bne.n	800f46a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f410:	f06f 0307 	mvn.w	r3, #7
 800f414:	e040      	b.n	800f498 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f416:	4b26      	ldr	r3, [pc, #152]	; (800f4b0 <udp_bind+0x10c>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	617b      	str	r3, [r7, #20]
 800f41c:	e022      	b.n	800f464 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f41e:	68fa      	ldr	r2, [r7, #12]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	429a      	cmp	r2, r3
 800f424:	d01b      	beq.n	800f45e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	8a5b      	ldrh	r3, [r3, #18]
 800f42a:	88fa      	ldrh	r2, [r7, #6]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d116      	bne.n	800f45e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f438:	429a      	cmp	r2, r3
 800f43a:	d00d      	beq.n	800f458 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d00a      	beq.n	800f458 <udp_bind+0xb4>
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d006      	beq.n	800f458 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f44a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d003      	beq.n	800f458 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f450:	697b      	ldr	r3, [r7, #20]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f458:	f06f 0307 	mvn.w	r3, #7
 800f45c:	e01c      	b.n	800f498 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	617b      	str	r3, [r7, #20]
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1d9      	bne.n	800f41e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d002      	beq.n	800f476 <udp_bind+0xd2>
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	e000      	b.n	800f478 <udp_bind+0xd4>
 800f476:	2300      	movs	r3, #0
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	88fa      	ldrh	r2, [r7, #6]
 800f480:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f482:	7cfb      	ldrb	r3, [r7, #19]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d106      	bne.n	800f496 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f488:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <udp_bind+0x10c>)
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f490:	4a07      	ldr	r2, [pc, #28]	; (800f4b0 <udp_bind+0x10c>)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3718      	adds	r7, #24
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	08018054 	.word	0x08018054
 800f4a4:	08017148 	.word	0x08017148
 800f4a8:	08017410 	.word	0x08017410
 800f4ac:	0801719c 	.word	0x0801719c
 800f4b0:	2000c54c 	.word	0x2000c54c

0800f4b4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b086      	sub	sp, #24
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d109      	bne.n	800f4dc <udp_connect+0x28>
 800f4c8:	4b2c      	ldr	r3, [pc, #176]	; (800f57c <udp_connect+0xc8>)
 800f4ca:	f240 4235 	movw	r2, #1077	; 0x435
 800f4ce:	492c      	ldr	r1, [pc, #176]	; (800f580 <udp_connect+0xcc>)
 800f4d0:	482c      	ldr	r0, [pc, #176]	; (800f584 <udp_connect+0xd0>)
 800f4d2:	f004 ff15 	bl	8014300 <iprintf>
 800f4d6:	f06f 030f 	mvn.w	r3, #15
 800f4da:	e04b      	b.n	800f574 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d109      	bne.n	800f4f6 <udp_connect+0x42>
 800f4e2:	4b26      	ldr	r3, [pc, #152]	; (800f57c <udp_connect+0xc8>)
 800f4e4:	f240 4236 	movw	r2, #1078	; 0x436
 800f4e8:	4927      	ldr	r1, [pc, #156]	; (800f588 <udp_connect+0xd4>)
 800f4ea:	4826      	ldr	r0, [pc, #152]	; (800f584 <udp_connect+0xd0>)
 800f4ec:	f004 ff08 	bl	8014300 <iprintf>
 800f4f0:	f06f 030f 	mvn.w	r3, #15
 800f4f4:	e03e      	b.n	800f574 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	8a5b      	ldrh	r3, [r3, #18]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d10f      	bne.n	800f51e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f4fe:	68f9      	ldr	r1, [r7, #12]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	8a5b      	ldrh	r3, [r3, #18]
 800f504:	461a      	mov	r2, r3
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff ff4c 	bl	800f3a4 <udp_bind>
 800f50c:	4603      	mov	r3, r0
 800f50e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d002      	beq.n	800f51e <udp_connect+0x6a>
      return err;
 800f518:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f51c:	e02a      	b.n	800f574 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <udp_connect+0x76>
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	e000      	b.n	800f52c <udp_connect+0x78>
 800f52a:	2300      	movs	r3, #0
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	88fa      	ldrh	r2, [r7, #6]
 800f534:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	7c1b      	ldrb	r3, [r3, #16]
 800f53a:	f043 0304 	orr.w	r3, r3, #4
 800f53e:	b2da      	uxtb	r2, r3
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f544:	4b11      	ldr	r3, [pc, #68]	; (800f58c <udp_connect+0xd8>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	617b      	str	r3, [r7, #20]
 800f54a:	e008      	b.n	800f55e <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	429a      	cmp	r2, r3
 800f552:	d101      	bne.n	800f558 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	e00d      	b.n	800f574 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	617b      	str	r3, [r7, #20]
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1f3      	bne.n	800f54c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f564:	4b09      	ldr	r3, [pc, #36]	; (800f58c <udp_connect+0xd8>)
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f56c:	4a07      	ldr	r2, [pc, #28]	; (800f58c <udp_connect+0xd8>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3718      	adds	r7, #24
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	08017148 	.word	0x08017148
 800f580:	08017428 	.word	0x08017428
 800f584:	0801719c 	.word	0x0801719c
 800f588:	08017444 	.word	0x08017444
 800f58c:	2000c54c 	.word	0x2000c54c

0800f590 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d107      	bne.n	800f5b2 <udp_recv+0x22>
 800f5a2:	4b08      	ldr	r3, [pc, #32]	; (800f5c4 <udp_recv+0x34>)
 800f5a4:	f240 428a 	movw	r2, #1162	; 0x48a
 800f5a8:	4907      	ldr	r1, [pc, #28]	; (800f5c8 <udp_recv+0x38>)
 800f5aa:	4808      	ldr	r0, [pc, #32]	; (800f5cc <udp_recv+0x3c>)
 800f5ac:	f004 fea8 	bl	8014300 <iprintf>
 800f5b0:	e005      	b.n	800f5be <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	61da      	str	r2, [r3, #28]
}
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	08017148 	.word	0x08017148
 800f5c8:	0801747c 	.word	0x0801747c
 800f5cc:	0801719c 	.word	0x0801719c

0800f5d0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d107      	bne.n	800f5ee <udp_remove+0x1e>
 800f5de:	4b19      	ldr	r3, [pc, #100]	; (800f644 <udp_remove+0x74>)
 800f5e0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f5e4:	4918      	ldr	r1, [pc, #96]	; (800f648 <udp_remove+0x78>)
 800f5e6:	4819      	ldr	r0, [pc, #100]	; (800f64c <udp_remove+0x7c>)
 800f5e8:	f004 fe8a 	bl	8014300 <iprintf>
 800f5ec:	e026      	b.n	800f63c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f5ee:	4b18      	ldr	r3, [pc, #96]	; (800f650 <udp_remove+0x80>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d105      	bne.n	800f604 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f5f8:	4b15      	ldr	r3, [pc, #84]	; (800f650 <udp_remove+0x80>)
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	4a14      	ldr	r2, [pc, #80]	; (800f650 <udp_remove+0x80>)
 800f600:	6013      	str	r3, [r2, #0]
 800f602:	e017      	b.n	800f634 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f604:	4b12      	ldr	r3, [pc, #72]	; (800f650 <udp_remove+0x80>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	60fb      	str	r3, [r7, #12]
 800f60a:	e010      	b.n	800f62e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	68db      	ldr	r3, [r3, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d009      	beq.n	800f628 <udp_remove+0x58>
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d104      	bne.n	800f628 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	68da      	ldr	r2, [r3, #12]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	60da      	str	r2, [r3, #12]
        break;
 800f626:	e005      	b.n	800f634 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	60fb      	str	r3, [r7, #12]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1eb      	bne.n	800f60c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	2000      	movs	r0, #0
 800f638:	f7f8 ff68 	bl	800850c <memp_free>
}
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	08017148 	.word	0x08017148
 800f648:	08017494 	.word	0x08017494
 800f64c:	0801719c 	.word	0x0801719c
 800f650:	2000c54c 	.word	0x2000c54c

0800f654 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f65a:	2000      	movs	r0, #0
 800f65c:	f7f8 fee0 	bl	8008420 <memp_malloc>
 800f660:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d007      	beq.n	800f678 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f668:	2220      	movs	r2, #32
 800f66a:	2100      	movs	r1, #0
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f004 feac 	bl	80143ca <memset>
    pcb->ttl = UDP_TTL;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	22ff      	movs	r2, #255	; 0xff
 800f676:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f678:	687b      	ldr	r3, [r7, #4]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3708      	adds	r7, #8
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
	...

0800f684 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d01e      	beq.n	800f6d2 <udp_netif_ip_addr_changed+0x4e>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d01a      	beq.n	800f6d2 <udp_netif_ip_addr_changed+0x4e>
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d017      	beq.n	800f6d2 <udp_netif_ip_addr_changed+0x4e>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d013      	beq.n	800f6d2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6aa:	4b0d      	ldr	r3, [pc, #52]	; (800f6e0 <udp_netif_ip_addr_changed+0x5c>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	e00c      	b.n	800f6cc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d103      	bne.n	800f6c6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1ef      	bne.n	800f6b2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f6d2:	bf00      	nop
 800f6d4:	3714      	adds	r7, #20
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	2000c54c 	.word	0x2000c54c

0800f6e4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f6e8:	4b20      	ldr	r3, [pc, #128]	; (800f76c <dhcp_inc_pcb_refcount+0x88>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d133      	bne.n	800f758 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f6f0:	4b1f      	ldr	r3, [pc, #124]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d005      	beq.n	800f704 <dhcp_inc_pcb_refcount+0x20>
 800f6f8:	4b1e      	ldr	r3, [pc, #120]	; (800f774 <dhcp_inc_pcb_refcount+0x90>)
 800f6fa:	22e5      	movs	r2, #229	; 0xe5
 800f6fc:	491e      	ldr	r1, [pc, #120]	; (800f778 <dhcp_inc_pcb_refcount+0x94>)
 800f6fe:	481f      	ldr	r0, [pc, #124]	; (800f77c <dhcp_inc_pcb_refcount+0x98>)
 800f700:	f004 fdfe 	bl	8014300 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f704:	f7ff ffa6 	bl	800f654 <udp_new>
 800f708:	4603      	mov	r3, r0
 800f70a:	4a19      	ldr	r2, [pc, #100]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f70c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800f70e:	4b18      	ldr	r3, [pc, #96]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d102      	bne.n	800f71c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f71a:	e024      	b.n	800f766 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f71c:	4b14      	ldr	r3, [pc, #80]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	7a5a      	ldrb	r2, [r3, #9]
 800f722:	4b13      	ldr	r3, [pc, #76]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f042 0220 	orr.w	r2, r2, #32
 800f72a:	b2d2      	uxtb	r2, r2
 800f72c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f72e:	4b10      	ldr	r3, [pc, #64]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2244      	movs	r2, #68	; 0x44
 800f734:	4912      	ldr	r1, [pc, #72]	; (800f780 <dhcp_inc_pcb_refcount+0x9c>)
 800f736:	4618      	mov	r0, r3
 800f738:	f7ff fe34 	bl	800f3a4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f73c:	4b0c      	ldr	r3, [pc, #48]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2243      	movs	r2, #67	; 0x43
 800f742:	490f      	ldr	r1, [pc, #60]	; (800f780 <dhcp_inc_pcb_refcount+0x9c>)
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff feb5 	bl	800f4b4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f74a:	4b09      	ldr	r3, [pc, #36]	; (800f770 <dhcp_inc_pcb_refcount+0x8c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2200      	movs	r2, #0
 800f750:	490c      	ldr	r1, [pc, #48]	; (800f784 <dhcp_inc_pcb_refcount+0xa0>)
 800f752:	4618      	mov	r0, r3
 800f754:	f7ff ff1c 	bl	800f590 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f758:	4b04      	ldr	r3, [pc, #16]	; (800f76c <dhcp_inc_pcb_refcount+0x88>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	3301      	adds	r3, #1
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	4b02      	ldr	r3, [pc, #8]	; (800f76c <dhcp_inc_pcb_refcount+0x88>)
 800f762:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f764:	2300      	movs	r3, #0
}
 800f766:	4618      	mov	r0, r3
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	2000c57c 	.word	0x2000c57c
 800f770:	2000c578 	.word	0x2000c578
 800f774:	080174ac 	.word	0x080174ac
 800f778:	080174e4 	.word	0x080174e4
 800f77c:	0801750c 	.word	0x0801750c
 800f780:	08018054 	.word	0x08018054
 800f784:	08011019 	.word	0x08011019

0800f788 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f78c:	4b0e      	ldr	r3, [pc, #56]	; (800f7c8 <dhcp_dec_pcb_refcount+0x40>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d105      	bne.n	800f7a0 <dhcp_dec_pcb_refcount+0x18>
 800f794:	4b0d      	ldr	r3, [pc, #52]	; (800f7cc <dhcp_dec_pcb_refcount+0x44>)
 800f796:	22ff      	movs	r2, #255	; 0xff
 800f798:	490d      	ldr	r1, [pc, #52]	; (800f7d0 <dhcp_dec_pcb_refcount+0x48>)
 800f79a:	480e      	ldr	r0, [pc, #56]	; (800f7d4 <dhcp_dec_pcb_refcount+0x4c>)
 800f79c:	f004 fdb0 	bl	8014300 <iprintf>
  dhcp_pcb_refcount--;
 800f7a0:	4b09      	ldr	r3, [pc, #36]	; (800f7c8 <dhcp_dec_pcb_refcount+0x40>)
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	4b07      	ldr	r3, [pc, #28]	; (800f7c8 <dhcp_dec_pcb_refcount+0x40>)
 800f7aa:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f7ac:	4b06      	ldr	r3, [pc, #24]	; (800f7c8 <dhcp_dec_pcb_refcount+0x40>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d107      	bne.n	800f7c4 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f7b4:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <dhcp_dec_pcb_refcount+0x50>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7ff ff09 	bl	800f5d0 <udp_remove>
    dhcp_pcb = NULL;
 800f7be:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <dhcp_dec_pcb_refcount+0x50>)
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]
  }
}
 800f7c4:	bf00      	nop
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	2000c57c 	.word	0x2000c57c
 800f7cc:	080174ac 	.word	0x080174ac
 800f7d0:	08017534 	.word	0x08017534
 800f7d4:	0801750c 	.word	0x0801750c
 800f7d8:	2000c578 	.word	0x2000c578

0800f7dc <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f7ea:	210c      	movs	r1, #12
 800f7ec:	68f8      	ldr	r0, [r7, #12]
 800f7ee:	f001 f855 	bl	801089c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f7f2:	4b06      	ldr	r3, [pc, #24]	; (800f80c <dhcp_handle_nak+0x30>)
 800f7f4:	4a05      	ldr	r2, [pc, #20]	; (800f80c <dhcp_handle_nak+0x30>)
 800f7f6:	4905      	ldr	r1, [pc, #20]	; (800f80c <dhcp_handle_nak+0x30>)
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7f9 f829 	bl	8008850 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 fc48 	bl	8010094 <dhcp_discover>
}
 800f804:	bf00      	nop
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	08018054 	.word	0x08018054

0800f810 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b084      	sub	sp, #16
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f81e:	2108      	movs	r1, #8
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f001 f83b 	bl	801089c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	331c      	adds	r3, #28
 800f82a:	2200      	movs	r2, #0
 800f82c:	4619      	mov	r1, r3
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f002 fb3c 	bl	8011eac <etharp_query>
 800f834:	4603      	mov	r3, r0
 800f836:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	799b      	ldrb	r3, [r3, #6]
 800f83c:	2bff      	cmp	r3, #255	; 0xff
 800f83e:	d005      	beq.n	800f84c <dhcp_check+0x3c>
    dhcp->tries++;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	799b      	ldrb	r3, [r3, #6]
 800f844:	3301      	adds	r3, #1
 800f846:	b2da      	uxtb	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f84c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f850:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f852:	893b      	ldrh	r3, [r7, #8]
 800f854:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f858:	4a06      	ldr	r2, [pc, #24]	; (800f874 <dhcp_check+0x64>)
 800f85a:	fb82 1203 	smull	r1, r2, r2, r3
 800f85e:	1152      	asrs	r2, r2, #5
 800f860:	17db      	asrs	r3, r3, #31
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	b29a      	uxth	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f86a:	bf00      	nop
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	10624dd3 	.word	0x10624dd3

0800f878 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b084      	sub	sp, #16
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f886:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <dhcp_handle_offer+0x44>)
 800f88a:	789b      	ldrb	r3, [r3, #2]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d011      	beq.n	800f8b4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2200      	movs	r2, #0
 800f894:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f896:	4b0a      	ldr	r3, [pc, #40]	; (800f8c0 <dhcp_handle_offer+0x48>)
 800f898:	689b      	ldr	r3, [r3, #8]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7f8 f8fd 	bl	8007a9a <lwip_htonl>
 800f8a0:	4602      	mov	r2, r0
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	691a      	ldr	r2, [r3, #16]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f808 	bl	800f8c4 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f8b4:	bf00      	nop
 800f8b6:	3710      	adds	r7, #16
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	2000c570 	.word	0x2000c570
 800f8c0:	2000c550 	.word	0x2000c550

0800f8c4 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f8c4:	b5b0      	push	{r4, r5, r7, lr}
 800f8c6:	b08a      	sub	sp, #40	; 0x28
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d109      	bne.n	800f8e6 <dhcp_select+0x22>
 800f8d2:	4b71      	ldr	r3, [pc, #452]	; (800fa98 <dhcp_select+0x1d4>)
 800f8d4:	f240 1277 	movw	r2, #375	; 0x177
 800f8d8:	4970      	ldr	r1, [pc, #448]	; (800fa9c <dhcp_select+0x1d8>)
 800f8da:	4871      	ldr	r0, [pc, #452]	; (800faa0 <dhcp_select+0x1dc>)
 800f8dc:	f004 fd10 	bl	8014300 <iprintf>
 800f8e0:	f06f 030f 	mvn.w	r3, #15
 800f8e4:	e0d3      	b.n	800fa8e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ea:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f8ec:	69bb      	ldr	r3, [r7, #24]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d109      	bne.n	800f906 <dhcp_select+0x42>
 800f8f2:	4b69      	ldr	r3, [pc, #420]	; (800fa98 <dhcp_select+0x1d4>)
 800f8f4:	f240 1279 	movw	r2, #377	; 0x179
 800f8f8:	496a      	ldr	r1, [pc, #424]	; (800faa4 <dhcp_select+0x1e0>)
 800f8fa:	4869      	ldr	r0, [pc, #420]	; (800faa0 <dhcp_select+0x1dc>)
 800f8fc:	f004 fd00 	bl	8014300 <iprintf>
 800f900:	f06f 0305 	mvn.w	r3, #5
 800f904:	e0c3      	b.n	800fa8e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f906:	2101      	movs	r1, #1
 800f908:	69b8      	ldr	r0, [r7, #24]
 800f90a:	f000 ffc7 	bl	801089c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f90e:	f107 030c 	add.w	r3, r7, #12
 800f912:	2203      	movs	r2, #3
 800f914:	69b9      	ldr	r1, [r7, #24]
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f001 fc4c 	bl	80111b4 <dhcp_create_msg>
 800f91c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 8085 	beq.w	800fa30 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f92c:	89b8      	ldrh	r0, [r7, #12]
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f934:	2302      	movs	r3, #2
 800f936:	2239      	movs	r2, #57	; 0x39
 800f938:	f000 ffca 	bl	80108d0 <dhcp_option>
 800f93c:	4603      	mov	r3, r0
 800f93e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f940:	89b8      	ldrh	r0, [r7, #12]
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f94c:	461a      	mov	r2, r3
 800f94e:	f001 f819 	bl	8010984 <dhcp_option_short>
 800f952:	4603      	mov	r3, r0
 800f954:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f956:	89b8      	ldrh	r0, [r7, #12]
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f95e:	2304      	movs	r3, #4
 800f960:	2232      	movs	r2, #50	; 0x32
 800f962:	f000 ffb5 	bl	80108d0 <dhcp_option>
 800f966:	4603      	mov	r3, r0
 800f968:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f96a:	89bc      	ldrh	r4, [r7, #12]
 800f96c:	693b      	ldr	r3, [r7, #16]
 800f96e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	69db      	ldr	r3, [r3, #28]
 800f976:	4618      	mov	r0, r3
 800f978:	f7f8 f88f 	bl	8007a9a <lwip_htonl>
 800f97c:	4603      	mov	r3, r0
 800f97e:	461a      	mov	r2, r3
 800f980:	4629      	mov	r1, r5
 800f982:	4620      	mov	r0, r4
 800f984:	f001 f830 	bl	80109e8 <dhcp_option_long>
 800f988:	4603      	mov	r3, r0
 800f98a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f98c:	89b8      	ldrh	r0, [r7, #12]
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f994:	2304      	movs	r3, #4
 800f996:	2236      	movs	r2, #54	; 0x36
 800f998:	f000 ff9a 	bl	80108d0 <dhcp_option>
 800f99c:	4603      	mov	r3, r0
 800f99e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f9a0:	89bc      	ldrh	r4, [r7, #12]
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f9a8:	69bb      	ldr	r3, [r7, #24]
 800f9aa:	699b      	ldr	r3, [r3, #24]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7f8 f874 	bl	8007a9a <lwip_htonl>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	4629      	mov	r1, r5
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	f001 f815 	bl	80109e8 <dhcp_option_long>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f9c2:	89b8      	ldrh	r0, [r7, #12]
 800f9c4:	693b      	ldr	r3, [r7, #16]
 800f9c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9ca:	2303      	movs	r3, #3
 800f9cc:	2237      	movs	r2, #55	; 0x37
 800f9ce:	f000 ff7f 	bl	80108d0 <dhcp_option>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	77bb      	strb	r3, [r7, #30]
 800f9da:	e00e      	b.n	800f9fa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f9dc:	89b8      	ldrh	r0, [r7, #12]
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f9e4:	7fbb      	ldrb	r3, [r7, #30]
 800f9e6:	4a30      	ldr	r2, [pc, #192]	; (800faa8 <dhcp_select+0x1e4>)
 800f9e8:	5cd3      	ldrb	r3, [r2, r3]
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	f000 ffa4 	bl	8010938 <dhcp_option_byte>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f9f4:	7fbb      	ldrb	r3, [r7, #30]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	77bb      	strb	r3, [r7, #30]
 800f9fa:	7fbb      	ldrb	r3, [r7, #30]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d9ed      	bls.n	800f9dc <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fa00:	89b8      	ldrh	r0, [r7, #12]
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	33f0      	adds	r3, #240	; 0xf0
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	4619      	mov	r1, r3
 800fa0a:	f001 fca9 	bl	8011360 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fa0e:	4b27      	ldr	r3, [pc, #156]	; (800faac <dhcp_select+0x1e8>)
 800fa10:	6818      	ldr	r0, [r3, #0]
 800fa12:	4b27      	ldr	r3, [pc, #156]	; (800fab0 <dhcp_select+0x1ec>)
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	2343      	movs	r3, #67	; 0x43
 800fa1c:	4a25      	ldr	r2, [pc, #148]	; (800fab4 <dhcp_select+0x1f0>)
 800fa1e:	6979      	ldr	r1, [r7, #20]
 800fa20:	f7ff fbda 	bl	800f1d8 <udp_sendto_if_src>
 800fa24:	4603      	mov	r3, r0
 800fa26:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fa28:	6978      	ldr	r0, [r7, #20]
 800fa2a:	f7f9 fc1f 	bl	800926c <pbuf_free>
 800fa2e:	e001      	b.n	800fa34 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fa30:	23ff      	movs	r3, #255	; 0xff
 800fa32:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	799b      	ldrb	r3, [r3, #6]
 800fa38:	2bff      	cmp	r3, #255	; 0xff
 800fa3a:	d005      	beq.n	800fa48 <dhcp_select+0x184>
    dhcp->tries++;
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	799b      	ldrb	r3, [r3, #6]
 800fa40:	3301      	adds	r3, #1
 800fa42:	b2da      	uxtb	r2, r3
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	799b      	ldrb	r3, [r3, #6]
 800fa4c:	2b05      	cmp	r3, #5
 800fa4e:	d80d      	bhi.n	800fa6c <dhcp_select+0x1a8>
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	799b      	ldrb	r3, [r3, #6]
 800fa54:	461a      	mov	r2, r3
 800fa56:	2301      	movs	r3, #1
 800fa58:	4093      	lsls	r3, r2
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	461a      	mov	r2, r3
 800fa5e:	0152      	lsls	r2, r2, #5
 800fa60:	1ad2      	subs	r2, r2, r3
 800fa62:	0092      	lsls	r2, r2, #2
 800fa64:	4413      	add	r3, r2
 800fa66:	00db      	lsls	r3, r3, #3
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	e001      	b.n	800fa70 <dhcp_select+0x1ac>
 800fa6c:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fa70:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fa72:	89fb      	ldrh	r3, [r7, #14]
 800fa74:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fa78:	4a0f      	ldr	r2, [pc, #60]	; (800fab8 <dhcp_select+0x1f4>)
 800fa7a:	fb82 1203 	smull	r1, r2, r2, r3
 800fa7e:	1152      	asrs	r2, r2, #5
 800fa80:	17db      	asrs	r3, r3, #31
 800fa82:	1ad3      	subs	r3, r2, r3
 800fa84:	b29a      	uxth	r2, r3
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fa8a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3720      	adds	r7, #32
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bdb0      	pop	{r4, r5, r7, pc}
 800fa96:	bf00      	nop
 800fa98:	080174ac 	.word	0x080174ac
 800fa9c:	08017558 	.word	0x08017558
 800faa0:	0801750c 	.word	0x0801750c
 800faa4:	08017574 	.word	0x08017574
 800faa8:	20000030 	.word	0x20000030
 800faac:	2000c578 	.word	0x2000c578
 800fab0:	08018054 	.word	0x08018054
 800fab4:	08018058 	.word	0x08018058
 800fab8:	10624dd3 	.word	0x10624dd3

0800fabc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fac2:	4b27      	ldr	r3, [pc, #156]	; (800fb60 <dhcp_coarse_tmr+0xa4>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	607b      	str	r3, [r7, #4]
 800fac8:	e042      	b.n	800fb50 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800face:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d039      	beq.n	800fb4a <dhcp_coarse_tmr+0x8e>
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	795b      	ldrb	r3, [r3, #5]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d035      	beq.n	800fb4a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	8a9b      	ldrh	r3, [r3, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d012      	beq.n	800fb0c <dhcp_coarse_tmr+0x50>
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	8a5b      	ldrh	r3, [r3, #18]
 800faea:	3301      	adds	r3, #1
 800faec:	b29a      	uxth	r2, r3
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	825a      	strh	r2, [r3, #18]
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	8a5a      	ldrh	r2, [r3, #18]
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	8a9b      	ldrh	r3, [r3, #20]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d106      	bne.n	800fb0c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f000 fe32 	bl	8010768 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f969 	bl	800fddc <dhcp_start>
 800fb0a:	e01e      	b.n	800fb4a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	8a1b      	ldrh	r3, [r3, #16]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00b      	beq.n	800fb2c <dhcp_coarse_tmr+0x70>
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	8a1b      	ldrh	r3, [r3, #16]
 800fb18:	1e5a      	subs	r2, r3, #1
 800fb1a:	b291      	uxth	r1, r2
 800fb1c:	683a      	ldr	r2, [r7, #0]
 800fb1e:	8211      	strh	r1, [r2, #16]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d103      	bne.n	800fb2c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f8c6 	bl	800fcb6 <dhcp_t2_timeout>
 800fb2a:	e00e      	b.n	800fb4a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	89db      	ldrh	r3, [r3, #14]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00a      	beq.n	800fb4a <dhcp_coarse_tmr+0x8e>
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	89db      	ldrh	r3, [r3, #14]
 800fb38:	1e5a      	subs	r2, r3, #1
 800fb3a:	b291      	uxth	r1, r2
 800fb3c:	683a      	ldr	r2, [r7, #0]
 800fb3e:	81d1      	strh	r1, [r2, #14]
 800fb40:	2b01      	cmp	r3, #1
 800fb42:	d102      	bne.n	800fb4a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 f888 	bl	800fc5a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	607b      	str	r3, [r7, #4]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1b9      	bne.n	800faca <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800fb56:	bf00      	nop
 800fb58:	bf00      	nop
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	2000c4e4 	.word	0x2000c4e4

0800fb64 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800fb6a:	4b16      	ldr	r3, [pc, #88]	; (800fbc4 <dhcp_fine_tmr+0x60>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	607b      	str	r3, [r7, #4]
 800fb70:	e020      	b.n	800fbb4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb76:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d017      	beq.n	800fbae <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	891b      	ldrh	r3, [r3, #8]
 800fb82:	2b01      	cmp	r3, #1
 800fb84:	d906      	bls.n	800fb94 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	891b      	ldrh	r3, [r3, #8]
 800fb8a:	3b01      	subs	r3, #1
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	811a      	strh	r2, [r3, #8]
 800fb92:	e00c      	b.n	800fbae <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	891b      	ldrh	r3, [r3, #8]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d108      	bne.n	800fbae <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	891b      	ldrh	r3, [r3, #8]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fba8:	6878      	ldr	r0, [r7, #4]
 800fbaa:	f000 f80d 	bl	800fbc8 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	607b      	str	r3, [r7, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1db      	bne.n	800fb72 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800fbba:	bf00      	nop
 800fbbc:	bf00      	nop
 800fbbe:	3708      	adds	r7, #8
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	2000c4e4 	.word	0x2000c4e4

0800fbc8 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b084      	sub	sp, #16
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	795b      	ldrb	r3, [r3, #5]
 800fbda:	2b0c      	cmp	r3, #12
 800fbdc:	d003      	beq.n	800fbe6 <dhcp_timeout+0x1e>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	795b      	ldrb	r3, [r3, #5]
 800fbe2:	2b06      	cmp	r3, #6
 800fbe4:	d103      	bne.n	800fbee <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f000 fa54 	bl	8010094 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800fbec:	e031      	b.n	800fc52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	795b      	ldrb	r3, [r3, #5]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d10e      	bne.n	800fc14 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	799b      	ldrb	r3, [r3, #6]
 800fbfa:	2b05      	cmp	r3, #5
 800fbfc:	d803      	bhi.n	800fc06 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f7ff fe60 	bl	800f8c4 <dhcp_select>
}
 800fc04:	e025      	b.n	800fc52 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f000 fdae 	bl	8010768 <dhcp_release_and_stop>
      dhcp_start(netif);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f000 f8e5 	bl	800fddc <dhcp_start>
}
 800fc12:	e01e      	b.n	800fc52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	795b      	ldrb	r3, [r3, #5]
 800fc18:	2b08      	cmp	r3, #8
 800fc1a:	d10b      	bne.n	800fc34 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	799b      	ldrb	r3, [r3, #6]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d803      	bhi.n	800fc2c <dhcp_timeout+0x64>
      dhcp_check(netif);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7ff fdf3 	bl	800f810 <dhcp_check>
}
 800fc2a:	e012      	b.n	800fc52 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f000 fad3 	bl	80101d8 <dhcp_bind>
}
 800fc32:	e00e      	b.n	800fc52 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	795b      	ldrb	r3, [r3, #5]
 800fc38:	2b03      	cmp	r3, #3
 800fc3a:	d10a      	bne.n	800fc52 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	799b      	ldrb	r3, [r3, #6]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	d803      	bhi.n	800fc4c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f000 fcd9 	bl	80105fc <dhcp_reboot>
}
 800fc4a:	e002      	b.n	800fc52 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f000 fa21 	bl	8010094 <dhcp_discover>
}
 800fc52:	bf00      	nop
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	795b      	ldrb	r3, [r3, #5]
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d007      	beq.n	800fc80 <dhcp_t1_timeout+0x26>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	795b      	ldrb	r3, [r3, #5]
 800fc74:	2b0a      	cmp	r3, #10
 800fc76:	d003      	beq.n	800fc80 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fc7c:	2b05      	cmp	r3, #5
 800fc7e:	d116      	bne.n	800fcae <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fb83 	bl	801038c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	899b      	ldrh	r3, [r3, #12]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	8a5b      	ldrh	r3, [r3, #18]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	dd0b      	ble.n	800fcae <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	899b      	ldrh	r3, [r3, #12]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	8a5b      	ldrh	r3, [r3, #18]
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	0fda      	lsrs	r2, r3, #31
 800fca4:	4413      	add	r3, r2
 800fca6:	105b      	asrs	r3, r3, #1
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800fcae:	bf00      	nop
 800fcb0:	3710      	adds	r7, #16
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b084      	sub	sp, #16
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	795b      	ldrb	r3, [r3, #5]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d00b      	beq.n	800fce4 <dhcp_t2_timeout+0x2e>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	795b      	ldrb	r3, [r3, #5]
 800fcd0:	2b0a      	cmp	r3, #10
 800fcd2:	d007      	beq.n	800fce4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800fcd8:	2b05      	cmp	r3, #5
 800fcda:	d003      	beq.n	800fce4 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	795b      	ldrb	r3, [r3, #5]
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	d116      	bne.n	800fd12 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fbed 	bl	80104c4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	8a9b      	ldrh	r3, [r3, #20]
 800fcee:	461a      	mov	r2, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	8a5b      	ldrh	r3, [r3, #18]
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	dd0b      	ble.n	800fd12 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	8a9b      	ldrh	r3, [r3, #20]
 800fcfe:	461a      	mov	r2, r3
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	8a5b      	ldrh	r3, [r3, #18]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	0fda      	lsrs	r2, r3, #31
 800fd08:	4413      	add	r3, r2
 800fd0a:	105b      	asrs	r3, r3, #1
 800fd0c:	b29a      	uxth	r2, r3
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800fd12:	bf00      	nop
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
	...

0800fd1c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b084      	sub	sp, #16
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2200      	movs	r2, #0
 800fd36:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800fd38:	4b26      	ldr	r3, [pc, #152]	; (800fdd4 <dhcp_handle_ack+0xb8>)
 800fd3a:	78db      	ldrb	r3, [r3, #3]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d003      	beq.n	800fd48 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800fd40:	4b25      	ldr	r3, [pc, #148]	; (800fdd8 <dhcp_handle_ack+0xbc>)
 800fd42:	68da      	ldr	r2, [r3, #12]
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800fd48:	4b22      	ldr	r3, [pc, #136]	; (800fdd4 <dhcp_handle_ack+0xb8>)
 800fd4a:	791b      	ldrb	r3, [r3, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d004      	beq.n	800fd5a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800fd50:	4b21      	ldr	r3, [pc, #132]	; (800fdd8 <dhcp_handle_ack+0xbc>)
 800fd52:	691a      	ldr	r2, [r3, #16]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	62da      	str	r2, [r3, #44]	; 0x2c
 800fd58:	e004      	b.n	800fd64 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5e:	085a      	lsrs	r2, r3, #1
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800fd64:	4b1b      	ldr	r3, [pc, #108]	; (800fdd4 <dhcp_handle_ack+0xb8>)
 800fd66:	795b      	ldrb	r3, [r3, #5]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d004      	beq.n	800fd76 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800fd6c:	4b1a      	ldr	r3, [pc, #104]	; (800fdd8 <dhcp_handle_ack+0xbc>)
 800fd6e:	695a      	ldr	r2, [r3, #20]
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	631a      	str	r2, [r3, #48]	; 0x30
 800fd74:	e007      	b.n	800fd86 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	00db      	lsls	r3, r3, #3
 800fd7e:	1a9b      	subs	r3, r3, r2
 800fd80:	08da      	lsrs	r2, r3, #3
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	691a      	ldr	r2, [r3, #16]
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800fd8e:	4b11      	ldr	r3, [pc, #68]	; (800fdd4 <dhcp_handle_ack+0xb8>)
 800fd90:	799b      	ldrb	r3, [r3, #6]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00b      	beq.n	800fdae <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800fd96:	4b10      	ldr	r3, [pc, #64]	; (800fdd8 <dhcp_handle_ack+0xbc>)
 800fd98:	699b      	ldr	r3, [r3, #24]
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	f7f7 fe7d 	bl	8007a9a <lwip_htonl>
 800fda0:	4602      	mov	r2, r0
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2201      	movs	r2, #1
 800fdaa:	71da      	strb	r2, [r3, #7]
 800fdac:	e002      	b.n	800fdb4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800fdb4:	4b07      	ldr	r3, [pc, #28]	; (800fdd4 <dhcp_handle_ack+0xb8>)
 800fdb6:	79db      	ldrb	r3, [r3, #7]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d007      	beq.n	800fdcc <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <dhcp_handle_ack+0xbc>)
 800fdbe:	69db      	ldr	r3, [r3, #28]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7f7 fe6a 	bl	8007a9a <lwip_htonl>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800fdcc:	bf00      	nop
 800fdce:	3710      	adds	r7, #16
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	2000c570 	.word	0x2000c570
 800fdd8:	2000c550 	.word	0x2000c550

0800fddc <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d109      	bne.n	800fdfe <dhcp_start+0x22>
 800fdea:	4b37      	ldr	r3, [pc, #220]	; (800fec8 <dhcp_start+0xec>)
 800fdec:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fdf0:	4936      	ldr	r1, [pc, #216]	; (800fecc <dhcp_start+0xf0>)
 800fdf2:	4837      	ldr	r0, [pc, #220]	; (800fed0 <dhcp_start+0xf4>)
 800fdf4:	f004 fa84 	bl	8014300 <iprintf>
 800fdf8:	f06f 030f 	mvn.w	r3, #15
 800fdfc:	e060      	b.n	800fec0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe04:	f003 0301 	and.w	r3, r3, #1
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d109      	bne.n	800fe20 <dhcp_start+0x44>
 800fe0c:	4b2e      	ldr	r3, [pc, #184]	; (800fec8 <dhcp_start+0xec>)
 800fe0e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800fe12:	4930      	ldr	r1, [pc, #192]	; (800fed4 <dhcp_start+0xf8>)
 800fe14:	482e      	ldr	r0, [pc, #184]	; (800fed0 <dhcp_start+0xf4>)
 800fe16:	f004 fa73 	bl	8014300 <iprintf>
 800fe1a:	f06f 030f 	mvn.w	r3, #15
 800fe1e:	e04f      	b.n	800fec0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe24:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe2a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800fe2e:	d202      	bcs.n	800fe36 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800fe30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe34:	e044      	b.n	800fec0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d10d      	bne.n	800fe58 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800fe3c:	2034      	movs	r0, #52	; 0x34
 800fe3e:	f7f8 f94b 	bl	80080d8 <mem_malloc>
 800fe42:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d102      	bne.n	800fe50 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800fe4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe4e:	e037      	b.n	800fec0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	625a      	str	r2, [r3, #36]	; 0x24
 800fe56:	e005      	b.n	800fe64 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	791b      	ldrb	r3, [r3, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800fe60:	f7ff fc92 	bl	800f788 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800fe64:	2234      	movs	r2, #52	; 0x34
 800fe66:	2100      	movs	r1, #0
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f004 faae 	bl	80143ca <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800fe6e:	f7ff fc39 	bl	800f6e4 <dhcp_inc_pcb_refcount>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <dhcp_start+0xa2>
    return ERR_MEM;
 800fe78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe7c:	e020      	b.n	800fec0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2201      	movs	r2, #1
 800fe82:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fe8a:	f003 0304 	and.w	r3, r3, #4
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d105      	bne.n	800fe9e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800fe92:	2102      	movs	r1, #2
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f000 fd01 	bl	801089c <dhcp_set_state>
    return ERR_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	e010      	b.n	800fec0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f000 f8f8 	bl	8010094 <dhcp_discover>
 800fea4:	4603      	mov	r3, r0
 800fea6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800fea8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d005      	beq.n	800febc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f000 fc59 	bl	8010768 <dhcp_release_and_stop>
    return ERR_MEM;
 800feb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800feba:	e001      	b.n	800fec0 <dhcp_start+0xe4>
  }
  return result;
 800febc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	080174ac 	.word	0x080174ac
 800fecc:	08017590 	.word	0x08017590
 800fed0:	0801750c 	.word	0x0801750c
 800fed4:	080175d4 	.word	0x080175d4

0800fed8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d025      	beq.n	800ff38 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	795b      	ldrb	r3, [r3, #5]
 800fef0:	2b0a      	cmp	r3, #10
 800fef2:	d008      	beq.n	800ff06 <dhcp_network_changed+0x2e>
 800fef4:	2b0a      	cmp	r3, #10
 800fef6:	dc0d      	bgt.n	800ff14 <dhcp_network_changed+0x3c>
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d01f      	beq.n	800ff3c <dhcp_network_changed+0x64>
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	db09      	blt.n	800ff14 <dhcp_network_changed+0x3c>
 800ff00:	3b03      	subs	r3, #3
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	d806      	bhi.n	800ff14 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fb75 	bl	80105fc <dhcp_reboot>
      break;
 800ff12:	e014      	b.n	800ff3e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	795b      	ldrb	r3, [r3, #5]
 800ff18:	2b0c      	cmp	r3, #12
 800ff1a:	d906      	bls.n	800ff2a <dhcp_network_changed+0x52>
 800ff1c:	4b09      	ldr	r3, [pc, #36]	; (800ff44 <dhcp_network_changed+0x6c>)
 800ff1e:	f240 326d 	movw	r2, #877	; 0x36d
 800ff22:	4909      	ldr	r1, [pc, #36]	; (800ff48 <dhcp_network_changed+0x70>)
 800ff24:	4809      	ldr	r0, [pc, #36]	; (800ff4c <dhcp_network_changed+0x74>)
 800ff26:	f004 f9eb 	bl	8014300 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f000 f8af 	bl	8010094 <dhcp_discover>
      break;
 800ff36:	e002      	b.n	800ff3e <dhcp_network_changed+0x66>
    return;
 800ff38:	bf00      	nop
 800ff3a:	e000      	b.n	800ff3e <dhcp_network_changed+0x66>
      break;
 800ff3c:	bf00      	nop
  }
}
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	080174ac 	.word	0x080174ac
 800ff48:	080175f8 	.word	0x080175f8
 800ff4c:	0801750c 	.word	0x0801750c

0800ff50 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d107      	bne.n	800ff70 <dhcp_arp_reply+0x20>
 800ff60:	4b0e      	ldr	r3, [pc, #56]	; (800ff9c <dhcp_arp_reply+0x4c>)
 800ff62:	f240 328b 	movw	r2, #907	; 0x38b
 800ff66:	490e      	ldr	r1, [pc, #56]	; (800ffa0 <dhcp_arp_reply+0x50>)
 800ff68:	480e      	ldr	r0, [pc, #56]	; (800ffa4 <dhcp_arp_reply+0x54>)
 800ff6a:	f004 f9c9 	bl	8014300 <iprintf>
 800ff6e:	e012      	b.n	800ff96 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff74:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d00c      	beq.n	800ff96 <dhcp_arp_reply+0x46>
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	795b      	ldrb	r3, [r3, #5]
 800ff80:	2b08      	cmp	r3, #8
 800ff82:	d108      	bne.n	800ff96 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	69db      	ldr	r3, [r3, #28]
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d102      	bne.n	800ff96 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f000 f809 	bl	800ffa8 <dhcp_decline>
    }
  }
}
 800ff96:	3710      	adds	r7, #16
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	080174ac 	.word	0x080174ac
 800ffa0:	08017590 	.word	0x08017590
 800ffa4:	0801750c 	.word	0x0801750c

0800ffa8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800ffa8:	b5b0      	push	{r4, r5, r7, lr}
 800ffaa:	b08a      	sub	sp, #40	; 0x28
 800ffac:	af02      	add	r7, sp, #8
 800ffae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ffb6:	210c      	movs	r1, #12
 800ffb8:	69b8      	ldr	r0, [r7, #24]
 800ffba:	f000 fc6f 	bl	801089c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800ffbe:	f107 030c 	add.w	r3, r7, #12
 800ffc2:	2204      	movs	r2, #4
 800ffc4:	69b9      	ldr	r1, [r7, #24]
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f001 f8f4 	bl	80111b4 <dhcp_create_msg>
 800ffcc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d035      	beq.n	8010040 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800ffda:	89b8      	ldrh	r0, [r7, #12]
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffe2:	2304      	movs	r3, #4
 800ffe4:	2232      	movs	r2, #50	; 0x32
 800ffe6:	f000 fc73 	bl	80108d0 <dhcp_option>
 800ffea:	4603      	mov	r3, r0
 800ffec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800ffee:	89bc      	ldrh	r4, [r7, #12]
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fff6:	69bb      	ldr	r3, [r7, #24]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7f7 fd4d 	bl	8007a9a <lwip_htonl>
 8010000:	4603      	mov	r3, r0
 8010002:	461a      	mov	r2, r3
 8010004:	4629      	mov	r1, r5
 8010006:	4620      	mov	r0, r4
 8010008:	f000 fcee 	bl	80109e8 <dhcp_option_long>
 801000c:	4603      	mov	r3, r0
 801000e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010010:	89b8      	ldrh	r0, [r7, #12]
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	33f0      	adds	r3, #240	; 0xf0
 8010016:	697a      	ldr	r2, [r7, #20]
 8010018:	4619      	mov	r1, r3
 801001a:	f001 f9a1 	bl	8011360 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801001e:	4b19      	ldr	r3, [pc, #100]	; (8010084 <dhcp_decline+0xdc>)
 8010020:	6818      	ldr	r0, [r3, #0]
 8010022:	4b19      	ldr	r3, [pc, #100]	; (8010088 <dhcp_decline+0xe0>)
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	2343      	movs	r3, #67	; 0x43
 801002c:	4a17      	ldr	r2, [pc, #92]	; (801008c <dhcp_decline+0xe4>)
 801002e:	6979      	ldr	r1, [r7, #20]
 8010030:	f7ff f8d2 	bl	800f1d8 <udp_sendto_if_src>
 8010034:	4603      	mov	r3, r0
 8010036:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010038:	6978      	ldr	r0, [r7, #20]
 801003a:	f7f9 f917 	bl	800926c <pbuf_free>
 801003e:	e001      	b.n	8010044 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010040:	23ff      	movs	r3, #255	; 0xff
 8010042:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	799b      	ldrb	r3, [r3, #6]
 8010048:	2bff      	cmp	r3, #255	; 0xff
 801004a:	d005      	beq.n	8010058 <dhcp_decline+0xb0>
    dhcp->tries++;
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	799b      	ldrb	r3, [r3, #6]
 8010050:	3301      	adds	r3, #1
 8010052:	b2da      	uxtb	r2, r3
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8010058:	f242 7310 	movw	r3, #10000	; 0x2710
 801005c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801005e:	89fb      	ldrh	r3, [r7, #14]
 8010060:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010064:	4a0a      	ldr	r2, [pc, #40]	; (8010090 <dhcp_decline+0xe8>)
 8010066:	fb82 1203 	smull	r1, r2, r2, r3
 801006a:	1152      	asrs	r2, r2, #5
 801006c:	17db      	asrs	r3, r3, #31
 801006e:	1ad3      	subs	r3, r2, r3
 8010070:	b29a      	uxth	r2, r3
 8010072:	69bb      	ldr	r3, [r7, #24]
 8010074:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010076:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bdb0      	pop	{r4, r5, r7, pc}
 8010082:	bf00      	nop
 8010084:	2000c578 	.word	0x2000c578
 8010088:	08018054 	.word	0x08018054
 801008c:	08018058 	.word	0x08018058
 8010090:	10624dd3 	.word	0x10624dd3

08010094 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b08a      	sub	sp, #40	; 0x28
 8010098:	af02      	add	r7, sp, #8
 801009a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	2200      	movs	r2, #0
 80100aa:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80100ac:	2106      	movs	r1, #6
 80100ae:	69b8      	ldr	r0, [r7, #24]
 80100b0:	f000 fbf4 	bl	801089c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80100b4:	f107 0308 	add.w	r3, r7, #8
 80100b8:	2201      	movs	r2, #1
 80100ba:	69b9      	ldr	r1, [r7, #24]
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f001 f879 	bl	80111b4 <dhcp_create_msg>
 80100c2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d04b      	beq.n	8010162 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80100d0:	8938      	ldrh	r0, [r7, #8]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80100d8:	2302      	movs	r3, #2
 80100da:	2239      	movs	r2, #57	; 0x39
 80100dc:	f000 fbf8 	bl	80108d0 <dhcp_option>
 80100e0:	4603      	mov	r3, r0
 80100e2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80100e4:	8938      	ldrh	r0, [r7, #8]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100f0:	461a      	mov	r2, r3
 80100f2:	f000 fc47 	bl	8010984 <dhcp_option_short>
 80100f6:	4603      	mov	r3, r0
 80100f8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80100fa:	8938      	ldrh	r0, [r7, #8]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010102:	2303      	movs	r3, #3
 8010104:	2237      	movs	r2, #55	; 0x37
 8010106:	f000 fbe3 	bl	80108d0 <dhcp_option>
 801010a:	4603      	mov	r3, r0
 801010c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801010e:	2300      	movs	r3, #0
 8010110:	77fb      	strb	r3, [r7, #31]
 8010112:	e00e      	b.n	8010132 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010114:	8938      	ldrh	r0, [r7, #8]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801011c:	7ffb      	ldrb	r3, [r7, #31]
 801011e:	4a29      	ldr	r2, [pc, #164]	; (80101c4 <dhcp_discover+0x130>)
 8010120:	5cd3      	ldrb	r3, [r2, r3]
 8010122:	461a      	mov	r2, r3
 8010124:	f000 fc08 	bl	8010938 <dhcp_option_byte>
 8010128:	4603      	mov	r3, r0
 801012a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801012c:	7ffb      	ldrb	r3, [r7, #31]
 801012e:	3301      	adds	r3, #1
 8010130:	77fb      	strb	r3, [r7, #31]
 8010132:	7ffb      	ldrb	r3, [r7, #31]
 8010134:	2b02      	cmp	r3, #2
 8010136:	d9ed      	bls.n	8010114 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010138:	8938      	ldrh	r0, [r7, #8]
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	33f0      	adds	r3, #240	; 0xf0
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	4619      	mov	r1, r3
 8010142:	f001 f90d 	bl	8011360 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010146:	4b20      	ldr	r3, [pc, #128]	; (80101c8 <dhcp_discover+0x134>)
 8010148:	6818      	ldr	r0, [r3, #0]
 801014a:	4b20      	ldr	r3, [pc, #128]	; (80101cc <dhcp_discover+0x138>)
 801014c:	9301      	str	r3, [sp, #4]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	9300      	str	r3, [sp, #0]
 8010152:	2343      	movs	r3, #67	; 0x43
 8010154:	4a1e      	ldr	r2, [pc, #120]	; (80101d0 <dhcp_discover+0x13c>)
 8010156:	6939      	ldr	r1, [r7, #16]
 8010158:	f7ff f83e 	bl	800f1d8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801015c:	6938      	ldr	r0, [r7, #16]
 801015e:	f7f9 f885 	bl	800926c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010162:	69bb      	ldr	r3, [r7, #24]
 8010164:	799b      	ldrb	r3, [r3, #6]
 8010166:	2bff      	cmp	r3, #255	; 0xff
 8010168:	d005      	beq.n	8010176 <dhcp_discover+0xe2>
    dhcp->tries++;
 801016a:	69bb      	ldr	r3, [r7, #24]
 801016c:	799b      	ldrb	r3, [r3, #6]
 801016e:	3301      	adds	r3, #1
 8010170:	b2da      	uxtb	r2, r3
 8010172:	69bb      	ldr	r3, [r7, #24]
 8010174:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	799b      	ldrb	r3, [r3, #6]
 801017a:	2b05      	cmp	r3, #5
 801017c:	d80d      	bhi.n	801019a <dhcp_discover+0x106>
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	799b      	ldrb	r3, [r3, #6]
 8010182:	461a      	mov	r2, r3
 8010184:	2301      	movs	r3, #1
 8010186:	4093      	lsls	r3, r2
 8010188:	b29b      	uxth	r3, r3
 801018a:	461a      	mov	r2, r3
 801018c:	0152      	lsls	r2, r2, #5
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	0092      	lsls	r2, r2, #2
 8010192:	4413      	add	r3, r2
 8010194:	00db      	lsls	r3, r3, #3
 8010196:	b29b      	uxth	r3, r3
 8010198:	e001      	b.n	801019e <dhcp_discover+0x10a>
 801019a:	f64e 2360 	movw	r3, #60000	; 0xea60
 801019e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80101a0:	897b      	ldrh	r3, [r7, #10]
 80101a2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80101a6:	4a0b      	ldr	r2, [pc, #44]	; (80101d4 <dhcp_discover+0x140>)
 80101a8:	fb82 1203 	smull	r1, r2, r2, r3
 80101ac:	1152      	asrs	r2, r2, #5
 80101ae:	17db      	asrs	r3, r3, #31
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	b29a      	uxth	r2, r3
 80101b4:	69bb      	ldr	r3, [r7, #24]
 80101b6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80101b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3720      	adds	r7, #32
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}
 80101c4:	20000030 	.word	0x20000030
 80101c8:	2000c578 	.word	0x2000c578
 80101cc:	08018054 	.word	0x08018054
 80101d0:	08018058 	.word	0x08018058
 80101d4:	10624dd3 	.word	0x10624dd3

080101d8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b088      	sub	sp, #32
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d107      	bne.n	80101f6 <dhcp_bind+0x1e>
 80101e6:	4b64      	ldr	r3, [pc, #400]	; (8010378 <dhcp_bind+0x1a0>)
 80101e8:	f240 4215 	movw	r2, #1045	; 0x415
 80101ec:	4963      	ldr	r1, [pc, #396]	; (801037c <dhcp_bind+0x1a4>)
 80101ee:	4864      	ldr	r0, [pc, #400]	; (8010380 <dhcp_bind+0x1a8>)
 80101f0:	f004 f886 	bl	8014300 <iprintf>
 80101f4:	e0bc      	b.n	8010370 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101fa:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80101fc:	69bb      	ldr	r3, [r7, #24]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d107      	bne.n	8010212 <dhcp_bind+0x3a>
 8010202:	4b5d      	ldr	r3, [pc, #372]	; (8010378 <dhcp_bind+0x1a0>)
 8010204:	f240 4217 	movw	r2, #1047	; 0x417
 8010208:	495e      	ldr	r1, [pc, #376]	; (8010384 <dhcp_bind+0x1ac>)
 801020a:	485d      	ldr	r0, [pc, #372]	; (8010380 <dhcp_bind+0x1a8>)
 801020c:	f004 f878 	bl	8014300 <iprintf>
 8010210:	e0ae      	b.n	8010370 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2200      	movs	r2, #0
 8010216:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010220:	d019      	beq.n	8010256 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010226:	331e      	adds	r3, #30
 8010228:	4a57      	ldr	r2, [pc, #348]	; (8010388 <dhcp_bind+0x1b0>)
 801022a:	fba2 2303 	umull	r2, r3, r2, r3
 801022e:	095b      	lsrs	r3, r3, #5
 8010230:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010232:	69fb      	ldr	r3, [r7, #28]
 8010234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010238:	d302      	bcc.n	8010240 <dhcp_bind+0x68>
      timeout = 0xffff;
 801023a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801023e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	b29a      	uxth	r2, r3
 8010244:	69bb      	ldr	r3, [r7, #24]
 8010246:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	8a9b      	ldrh	r3, [r3, #20]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d102      	bne.n	8010256 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	2201      	movs	r2, #1
 8010254:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801025e:	d01d      	beq.n	801029c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010264:	331e      	adds	r3, #30
 8010266:	4a48      	ldr	r2, [pc, #288]	; (8010388 <dhcp_bind+0x1b0>)
 8010268:	fba2 2303 	umull	r2, r3, r2, r3
 801026c:	095b      	lsrs	r3, r3, #5
 801026e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010276:	d302      	bcc.n	801027e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801027c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	b29a      	uxth	r2, r3
 8010282:	69bb      	ldr	r3, [r7, #24]
 8010284:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8010286:	69bb      	ldr	r3, [r7, #24]
 8010288:	895b      	ldrh	r3, [r3, #10]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d102      	bne.n	8010294 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	2201      	movs	r2, #1
 8010292:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010294:	69bb      	ldr	r3, [r7, #24]
 8010296:	895a      	ldrh	r2, [r3, #10]
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102a4:	d01d      	beq.n	80102e2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102aa:	331e      	adds	r3, #30
 80102ac:	4a36      	ldr	r2, [pc, #216]	; (8010388 <dhcp_bind+0x1b0>)
 80102ae:	fba2 2303 	umull	r2, r3, r2, r3
 80102b2:	095b      	lsrs	r3, r3, #5
 80102b4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102bc:	d302      	bcc.n	80102c4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80102be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80102c2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	899b      	ldrh	r3, [r3, #12]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d102      	bne.n	80102da <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	2201      	movs	r2, #1
 80102d8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	899a      	ldrh	r2, [r3, #12]
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	895a      	ldrh	r2, [r3, #10]
 80102e6:	69bb      	ldr	r3, [r7, #24]
 80102e8:	899b      	ldrh	r3, [r3, #12]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d306      	bcc.n	80102fc <dhcp_bind+0x124>
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	899b      	ldrh	r3, [r3, #12]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	2200      	movs	r2, #0
 80102fa:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	79db      	ldrb	r3, [r3, #7]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d003      	beq.n	801030c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010304:	69bb      	ldr	r3, [r7, #24]
 8010306:	6a1b      	ldr	r3, [r3, #32]
 8010308:	613b      	str	r3, [r7, #16]
 801030a:	e014      	b.n	8010336 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801030c:	69bb      	ldr	r3, [r7, #24]
 801030e:	331c      	adds	r3, #28
 8010310:	781b      	ldrb	r3, [r3, #0]
 8010312:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8010314:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010318:	2b00      	cmp	r3, #0
 801031a:	db02      	blt.n	8010322 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801031c:	23ff      	movs	r3, #255	; 0xff
 801031e:	613b      	str	r3, [r7, #16]
 8010320:	e009      	b.n	8010336 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8010322:	7dfb      	ldrb	r3, [r7, #23]
 8010324:	2bbf      	cmp	r3, #191	; 0xbf
 8010326:	d903      	bls.n	8010330 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010328:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801032c:	613b      	str	r3, [r7, #16]
 801032e:	e002      	b.n	8010336 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010334:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801033a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d108      	bne.n	8010354 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	69da      	ldr	r2, [r3, #28]
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	4013      	ands	r3, r2
 801034a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010352:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8010354:	210a      	movs	r1, #10
 8010356:	69b8      	ldr	r0, [r7, #24]
 8010358:	f000 faa0 	bl	801089c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	f103 011c 	add.w	r1, r3, #28
 8010362:	f107 030c 	add.w	r3, r7, #12
 8010366:	f107 0210 	add.w	r2, r7, #16
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7f8 fa70 	bl	8008850 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	080174ac 	.word	0x080174ac
 801037c:	0801760c 	.word	0x0801760c
 8010380:	0801750c 	.word	0x0801750c
 8010384:	08017628 	.word	0x08017628
 8010388:	88888889 	.word	0x88888889

0801038c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b08a      	sub	sp, #40	; 0x28
 8010390:	af02      	add	r7, sp, #8
 8010392:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010398:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801039a:	2105      	movs	r1, #5
 801039c:	69b8      	ldr	r0, [r7, #24]
 801039e:	f000 fa7d 	bl	801089c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	2203      	movs	r2, #3
 80103a8:	69b9      	ldr	r1, [r7, #24]
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f000 ff02 	bl	80111b4 <dhcp_create_msg>
 80103b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d04e      	beq.n	8010456 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80103be:	89b8      	ldrh	r0, [r7, #12]
 80103c0:	693b      	ldr	r3, [r7, #16]
 80103c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103c6:	2302      	movs	r3, #2
 80103c8:	2239      	movs	r2, #57	; 0x39
 80103ca:	f000 fa81 	bl	80108d0 <dhcp_option>
 80103ce:	4603      	mov	r3, r0
 80103d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80103d2:	89b8      	ldrh	r0, [r7, #12]
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103de:	461a      	mov	r2, r3
 80103e0:	f000 fad0 	bl	8010984 <dhcp_option_short>
 80103e4:	4603      	mov	r3, r0
 80103e6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80103e8:	89b8      	ldrh	r0, [r7, #12]
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80103f0:	2303      	movs	r3, #3
 80103f2:	2237      	movs	r2, #55	; 0x37
 80103f4:	f000 fa6c 	bl	80108d0 <dhcp_option>
 80103f8:	4603      	mov	r3, r0
 80103fa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80103fc:	2300      	movs	r3, #0
 80103fe:	77bb      	strb	r3, [r7, #30]
 8010400:	e00e      	b.n	8010420 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010402:	89b8      	ldrh	r0, [r7, #12]
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801040a:	7fbb      	ldrb	r3, [r7, #30]
 801040c:	4a2a      	ldr	r2, [pc, #168]	; (80104b8 <dhcp_renew+0x12c>)
 801040e:	5cd3      	ldrb	r3, [r2, r3]
 8010410:	461a      	mov	r2, r3
 8010412:	f000 fa91 	bl	8010938 <dhcp_option_byte>
 8010416:	4603      	mov	r3, r0
 8010418:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801041a:	7fbb      	ldrb	r3, [r7, #30]
 801041c:	3301      	adds	r3, #1
 801041e:	77bb      	strb	r3, [r7, #30]
 8010420:	7fbb      	ldrb	r3, [r7, #30]
 8010422:	2b02      	cmp	r3, #2
 8010424:	d9ed      	bls.n	8010402 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010426:	89b8      	ldrh	r0, [r7, #12]
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	33f0      	adds	r3, #240	; 0xf0
 801042c:	697a      	ldr	r2, [r7, #20]
 801042e:	4619      	mov	r1, r3
 8010430:	f000 ff96 	bl	8011360 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010434:	4b21      	ldr	r3, [pc, #132]	; (80104bc <dhcp_renew+0x130>)
 8010436:	6818      	ldr	r0, [r3, #0]
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	f103 0218 	add.w	r2, r3, #24
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	2343      	movs	r3, #67	; 0x43
 8010444:	6979      	ldr	r1, [r7, #20]
 8010446:	f7fe fe53 	bl	800f0f0 <udp_sendto_if>
 801044a:	4603      	mov	r3, r0
 801044c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801044e:	6978      	ldr	r0, [r7, #20]
 8010450:	f7f8 ff0c 	bl	800926c <pbuf_free>
 8010454:	e001      	b.n	801045a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010456:	23ff      	movs	r3, #255	; 0xff
 8010458:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	799b      	ldrb	r3, [r3, #6]
 801045e:	2bff      	cmp	r3, #255	; 0xff
 8010460:	d005      	beq.n	801046e <dhcp_renew+0xe2>
    dhcp->tries++;
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	799b      	ldrb	r3, [r3, #6]
 8010466:	3301      	adds	r3, #1
 8010468:	b2da      	uxtb	r2, r3
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	799b      	ldrb	r3, [r3, #6]
 8010472:	2b09      	cmp	r3, #9
 8010474:	d80a      	bhi.n	801048c <dhcp_renew+0x100>
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	799b      	ldrb	r3, [r3, #6]
 801047a:	b29b      	uxth	r3, r3
 801047c:	461a      	mov	r2, r3
 801047e:	0152      	lsls	r2, r2, #5
 8010480:	1ad2      	subs	r2, r2, r3
 8010482:	0092      	lsls	r2, r2, #2
 8010484:	4413      	add	r3, r2
 8010486:	011b      	lsls	r3, r3, #4
 8010488:	b29b      	uxth	r3, r3
 801048a:	e001      	b.n	8010490 <dhcp_renew+0x104>
 801048c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8010490:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010492:	89fb      	ldrh	r3, [r7, #14]
 8010494:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010498:	4a09      	ldr	r2, [pc, #36]	; (80104c0 <dhcp_renew+0x134>)
 801049a:	fb82 1203 	smull	r1, r2, r2, r3
 801049e:	1152      	asrs	r2, r2, #5
 80104a0:	17db      	asrs	r3, r3, #31
 80104a2:	1ad3      	subs	r3, r2, r3
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80104aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3720      	adds	r7, #32
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop
 80104b8:	20000030 	.word	0x20000030
 80104bc:	2000c578 	.word	0x2000c578
 80104c0:	10624dd3 	.word	0x10624dd3

080104c4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b08a      	sub	sp, #40	; 0x28
 80104c8:	af02      	add	r7, sp, #8
 80104ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80104d2:	2104      	movs	r1, #4
 80104d4:	69b8      	ldr	r0, [r7, #24]
 80104d6:	f000 f9e1 	bl	801089c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80104da:	f107 030c 	add.w	r3, r7, #12
 80104de:	2203      	movs	r2, #3
 80104e0:	69b9      	ldr	r1, [r7, #24]
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 fe66 	bl	80111b4 <dhcp_create_msg>
 80104e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d04c      	beq.n	801058a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80104f6:	89b8      	ldrh	r0, [r7, #12]
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80104fe:	2302      	movs	r3, #2
 8010500:	2239      	movs	r2, #57	; 0x39
 8010502:	f000 f9e5 	bl	80108d0 <dhcp_option>
 8010506:	4603      	mov	r3, r0
 8010508:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801050a:	89b8      	ldrh	r0, [r7, #12]
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010516:	461a      	mov	r2, r3
 8010518:	f000 fa34 	bl	8010984 <dhcp_option_short>
 801051c:	4603      	mov	r3, r0
 801051e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010520:	89b8      	ldrh	r0, [r7, #12]
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010528:	2303      	movs	r3, #3
 801052a:	2237      	movs	r2, #55	; 0x37
 801052c:	f000 f9d0 	bl	80108d0 <dhcp_option>
 8010530:	4603      	mov	r3, r0
 8010532:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010534:	2300      	movs	r3, #0
 8010536:	77bb      	strb	r3, [r7, #30]
 8010538:	e00e      	b.n	8010558 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801053a:	89b8      	ldrh	r0, [r7, #12]
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010542:	7fbb      	ldrb	r3, [r7, #30]
 8010544:	4a29      	ldr	r2, [pc, #164]	; (80105ec <dhcp_rebind+0x128>)
 8010546:	5cd3      	ldrb	r3, [r2, r3]
 8010548:	461a      	mov	r2, r3
 801054a:	f000 f9f5 	bl	8010938 <dhcp_option_byte>
 801054e:	4603      	mov	r3, r0
 8010550:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010552:	7fbb      	ldrb	r3, [r7, #30]
 8010554:	3301      	adds	r3, #1
 8010556:	77bb      	strb	r3, [r7, #30]
 8010558:	7fbb      	ldrb	r3, [r7, #30]
 801055a:	2b02      	cmp	r3, #2
 801055c:	d9ed      	bls.n	801053a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801055e:	89b8      	ldrh	r0, [r7, #12]
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	33f0      	adds	r3, #240	; 0xf0
 8010564:	697a      	ldr	r2, [r7, #20]
 8010566:	4619      	mov	r1, r3
 8010568:	f000 fefa 	bl	8011360 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801056c:	4b20      	ldr	r3, [pc, #128]	; (80105f0 <dhcp_rebind+0x12c>)
 801056e:	6818      	ldr	r0, [r3, #0]
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	2343      	movs	r3, #67	; 0x43
 8010576:	4a1f      	ldr	r2, [pc, #124]	; (80105f4 <dhcp_rebind+0x130>)
 8010578:	6979      	ldr	r1, [r7, #20]
 801057a:	f7fe fdb9 	bl	800f0f0 <udp_sendto_if>
 801057e:	4603      	mov	r3, r0
 8010580:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010582:	6978      	ldr	r0, [r7, #20]
 8010584:	f7f8 fe72 	bl	800926c <pbuf_free>
 8010588:	e001      	b.n	801058e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801058a:	23ff      	movs	r3, #255	; 0xff
 801058c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	799b      	ldrb	r3, [r3, #6]
 8010592:	2bff      	cmp	r3, #255	; 0xff
 8010594:	d005      	beq.n	80105a2 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	799b      	ldrb	r3, [r3, #6]
 801059a:	3301      	adds	r3, #1
 801059c:	b2da      	uxtb	r2, r3
 801059e:	69bb      	ldr	r3, [r7, #24]
 80105a0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80105a2:	69bb      	ldr	r3, [r7, #24]
 80105a4:	799b      	ldrb	r3, [r3, #6]
 80105a6:	2b09      	cmp	r3, #9
 80105a8:	d80a      	bhi.n	80105c0 <dhcp_rebind+0xfc>
 80105aa:	69bb      	ldr	r3, [r7, #24]
 80105ac:	799b      	ldrb	r3, [r3, #6]
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	461a      	mov	r2, r3
 80105b2:	0152      	lsls	r2, r2, #5
 80105b4:	1ad2      	subs	r2, r2, r3
 80105b6:	0092      	lsls	r2, r2, #2
 80105b8:	4413      	add	r3, r2
 80105ba:	00db      	lsls	r3, r3, #3
 80105bc:	b29b      	uxth	r3, r3
 80105be:	e001      	b.n	80105c4 <dhcp_rebind+0x100>
 80105c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80105c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80105c6:	89fb      	ldrh	r3, [r7, #14]
 80105c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80105cc:	4a0a      	ldr	r2, [pc, #40]	; (80105f8 <dhcp_rebind+0x134>)
 80105ce:	fb82 1203 	smull	r1, r2, r2, r3
 80105d2:	1152      	asrs	r2, r2, #5
 80105d4:	17db      	asrs	r3, r3, #31
 80105d6:	1ad3      	subs	r3, r2, r3
 80105d8:	b29a      	uxth	r2, r3
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80105de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3720      	adds	r7, #32
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}
 80105ea:	bf00      	nop
 80105ec:	20000030 	.word	0x20000030
 80105f0:	2000c578 	.word	0x2000c578
 80105f4:	08018058 	.word	0x08018058
 80105f8:	10624dd3 	.word	0x10624dd3

080105fc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80105fc:	b5b0      	push	{r4, r5, r7, lr}
 80105fe:	b08a      	sub	sp, #40	; 0x28
 8010600:	af02      	add	r7, sp, #8
 8010602:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010608:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801060a:	2103      	movs	r1, #3
 801060c:	69b8      	ldr	r0, [r7, #24]
 801060e:	f000 f945 	bl	801089c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010612:	f107 030c 	add.w	r3, r7, #12
 8010616:	2203      	movs	r2, #3
 8010618:	69b9      	ldr	r1, [r7, #24]
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f000 fdca 	bl	80111b4 <dhcp_create_msg>
 8010620:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d066      	beq.n	80106f6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801062e:	89b8      	ldrh	r0, [r7, #12]
 8010630:	693b      	ldr	r3, [r7, #16]
 8010632:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010636:	2302      	movs	r3, #2
 8010638:	2239      	movs	r2, #57	; 0x39
 801063a:	f000 f949 	bl	80108d0 <dhcp_option>
 801063e:	4603      	mov	r3, r0
 8010640:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010642:	89b8      	ldrh	r0, [r7, #12]
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	33f0      	adds	r3, #240	; 0xf0
 8010648:	f44f 7210 	mov.w	r2, #576	; 0x240
 801064c:	4619      	mov	r1, r3
 801064e:	f000 f999 	bl	8010984 <dhcp_option_short>
 8010652:	4603      	mov	r3, r0
 8010654:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010656:	89b8      	ldrh	r0, [r7, #12]
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801065e:	2304      	movs	r3, #4
 8010660:	2232      	movs	r2, #50	; 0x32
 8010662:	f000 f935 	bl	80108d0 <dhcp_option>
 8010666:	4603      	mov	r3, r0
 8010668:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801066a:	89bc      	ldrh	r4, [r7, #12]
 801066c:	693b      	ldr	r3, [r7, #16]
 801066e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	69db      	ldr	r3, [r3, #28]
 8010676:	4618      	mov	r0, r3
 8010678:	f7f7 fa0f 	bl	8007a9a <lwip_htonl>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	4629      	mov	r1, r5
 8010682:	4620      	mov	r0, r4
 8010684:	f000 f9b0 	bl	80109e8 <dhcp_option_long>
 8010688:	4603      	mov	r3, r0
 801068a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801068c:	89b8      	ldrh	r0, [r7, #12]
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010694:	2303      	movs	r3, #3
 8010696:	2237      	movs	r2, #55	; 0x37
 8010698:	f000 f91a 	bl	80108d0 <dhcp_option>
 801069c:	4603      	mov	r3, r0
 801069e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106a0:	2300      	movs	r3, #0
 80106a2:	77bb      	strb	r3, [r7, #30]
 80106a4:	e00e      	b.n	80106c4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80106a6:	89b8      	ldrh	r0, [r7, #12]
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80106ae:	7fbb      	ldrb	r3, [r7, #30]
 80106b0:	4a29      	ldr	r2, [pc, #164]	; (8010758 <dhcp_reboot+0x15c>)
 80106b2:	5cd3      	ldrb	r3, [r2, r3]
 80106b4:	461a      	mov	r2, r3
 80106b6:	f000 f93f 	bl	8010938 <dhcp_option_byte>
 80106ba:	4603      	mov	r3, r0
 80106bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80106be:	7fbb      	ldrb	r3, [r7, #30]
 80106c0:	3301      	adds	r3, #1
 80106c2:	77bb      	strb	r3, [r7, #30]
 80106c4:	7fbb      	ldrb	r3, [r7, #30]
 80106c6:	2b02      	cmp	r3, #2
 80106c8:	d9ed      	bls.n	80106a6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80106ca:	89b8      	ldrh	r0, [r7, #12]
 80106cc:	693b      	ldr	r3, [r7, #16]
 80106ce:	33f0      	adds	r3, #240	; 0xf0
 80106d0:	697a      	ldr	r2, [r7, #20]
 80106d2:	4619      	mov	r1, r3
 80106d4:	f000 fe44 	bl	8011360 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80106d8:	4b20      	ldr	r3, [pc, #128]	; (801075c <dhcp_reboot+0x160>)
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	9300      	str	r3, [sp, #0]
 80106e0:	2343      	movs	r3, #67	; 0x43
 80106e2:	4a1f      	ldr	r2, [pc, #124]	; (8010760 <dhcp_reboot+0x164>)
 80106e4:	6979      	ldr	r1, [r7, #20]
 80106e6:	f7fe fd03 	bl	800f0f0 <udp_sendto_if>
 80106ea:	4603      	mov	r3, r0
 80106ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80106ee:	6978      	ldr	r0, [r7, #20]
 80106f0:	f7f8 fdbc 	bl	800926c <pbuf_free>
 80106f4:	e001      	b.n	80106fa <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80106f6:	23ff      	movs	r3, #255	; 0xff
 80106f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80106fa:	69bb      	ldr	r3, [r7, #24]
 80106fc:	799b      	ldrb	r3, [r3, #6]
 80106fe:	2bff      	cmp	r3, #255	; 0xff
 8010700:	d005      	beq.n	801070e <dhcp_reboot+0x112>
    dhcp->tries++;
 8010702:	69bb      	ldr	r3, [r7, #24]
 8010704:	799b      	ldrb	r3, [r3, #6]
 8010706:	3301      	adds	r3, #1
 8010708:	b2da      	uxtb	r2, r3
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801070e:	69bb      	ldr	r3, [r7, #24]
 8010710:	799b      	ldrb	r3, [r3, #6]
 8010712:	2b09      	cmp	r3, #9
 8010714:	d80a      	bhi.n	801072c <dhcp_reboot+0x130>
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	799b      	ldrb	r3, [r3, #6]
 801071a:	b29b      	uxth	r3, r3
 801071c:	461a      	mov	r2, r3
 801071e:	0152      	lsls	r2, r2, #5
 8010720:	1ad2      	subs	r2, r2, r3
 8010722:	0092      	lsls	r2, r2, #2
 8010724:	4413      	add	r3, r2
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	b29b      	uxth	r3, r3
 801072a:	e001      	b.n	8010730 <dhcp_reboot+0x134>
 801072c:	f242 7310 	movw	r3, #10000	; 0x2710
 8010730:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010732:	89fb      	ldrh	r3, [r7, #14]
 8010734:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010738:	4a0a      	ldr	r2, [pc, #40]	; (8010764 <dhcp_reboot+0x168>)
 801073a:	fb82 1203 	smull	r1, r2, r2, r3
 801073e:	1152      	asrs	r2, r2, #5
 8010740:	17db      	asrs	r3, r3, #31
 8010742:	1ad3      	subs	r3, r2, r3
 8010744:	b29a      	uxth	r2, r3
 8010746:	69bb      	ldr	r3, [r7, #24]
 8010748:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801074a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3720      	adds	r7, #32
 8010752:	46bd      	mov	sp, r7
 8010754:	bdb0      	pop	{r4, r5, r7, pc}
 8010756:	bf00      	nop
 8010758:	20000030 	.word	0x20000030
 801075c:	2000c578 	.word	0x2000c578
 8010760:	08018058 	.word	0x08018058
 8010764:	10624dd3 	.word	0x10624dd3

08010768 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010768:	b5b0      	push	{r4, r5, r7, lr}
 801076a:	b08a      	sub	sp, #40	; 0x28
 801076c:	af02      	add	r7, sp, #8
 801076e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010774:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	2b00      	cmp	r3, #0
 801077a:	f000 8084 	beq.w	8010886 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	795b      	ldrb	r3, [r3, #5]
 8010782:	2b00      	cmp	r3, #0
 8010784:	f000 8081 	beq.w	801088a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010788:	69fb      	ldr	r3, [r7, #28]
 801078a:	699b      	ldr	r3, [r3, #24]
 801078c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801078e:	69fb      	ldr	r3, [r7, #28]
 8010790:	2200      	movs	r2, #0
 8010792:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	2200      	movs	r2, #0
 8010798:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	2200      	movs	r2, #0
 801079e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	2200      	movs	r2, #0
 80107a4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	2200      	movs	r2, #0
 80107aa:	631a      	str	r2, [r3, #48]	; 0x30
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107b0:	69fb      	ldr	r3, [r7, #28]
 80107b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80107b4:	69fb      	ldr	r3, [r7, #28]
 80107b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	2200      	movs	r2, #0
 80107c0:	829a      	strh	r2, [r3, #20]
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	8a9a      	ldrh	r2, [r3, #20]
 80107c6:	69fb      	ldr	r3, [r7, #28]
 80107c8:	825a      	strh	r2, [r3, #18]
 80107ca:	69fb      	ldr	r3, [r7, #28]
 80107cc:	8a5a      	ldrh	r2, [r3, #18]
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	821a      	strh	r2, [r3, #16]
 80107d2:	69fb      	ldr	r3, [r7, #28]
 80107d4:	8a1a      	ldrh	r2, [r3, #16]
 80107d6:	69fb      	ldr	r3, [r7, #28]
 80107d8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f000 fdee 	bl	80113bc <dhcp_supplied_address>
 80107e0:	4603      	mov	r3, r0
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d03b      	beq.n	801085e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80107e6:	f107 030e 	add.w	r3, r7, #14
 80107ea:	2207      	movs	r2, #7
 80107ec:	69f9      	ldr	r1, [r7, #28]
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f000 fce0 	bl	80111b4 <dhcp_create_msg>
 80107f4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d030      	beq.n	801085e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80107fc:	69bb      	ldr	r3, [r7, #24]
 80107fe:	685b      	ldr	r3, [r3, #4]
 8010800:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010802:	89f8      	ldrh	r0, [r7, #14]
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801080a:	2304      	movs	r3, #4
 801080c:	2236      	movs	r2, #54	; 0x36
 801080e:	f000 f85f 	bl	80108d0 <dhcp_option>
 8010812:	4603      	mov	r3, r0
 8010814:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010816:	89fc      	ldrh	r4, [r7, #14]
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	4618      	mov	r0, r3
 8010822:	f7f7 f93a 	bl	8007a9a <lwip_htonl>
 8010826:	4603      	mov	r3, r0
 8010828:	461a      	mov	r2, r3
 801082a:	4629      	mov	r1, r5
 801082c:	4620      	mov	r0, r4
 801082e:	f000 f8db 	bl	80109e8 <dhcp_option_long>
 8010832:	4603      	mov	r3, r0
 8010834:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010836:	89f8      	ldrh	r0, [r7, #14]
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	33f0      	adds	r3, #240	; 0xf0
 801083c:	69ba      	ldr	r2, [r7, #24]
 801083e:	4619      	mov	r1, r3
 8010840:	f000 fd8e 	bl	8011360 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010844:	4b13      	ldr	r3, [pc, #76]	; (8010894 <dhcp_release_and_stop+0x12c>)
 8010846:	6818      	ldr	r0, [r3, #0]
 8010848:	f107 0210 	add.w	r2, r7, #16
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	2343      	movs	r3, #67	; 0x43
 8010852:	69b9      	ldr	r1, [r7, #24]
 8010854:	f7fe fc4c 	bl	800f0f0 <udp_sendto_if>
      pbuf_free(p_out);
 8010858:	69b8      	ldr	r0, [r7, #24]
 801085a:	f7f8 fd07 	bl	800926c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801085e:	4b0e      	ldr	r3, [pc, #56]	; (8010898 <dhcp_release_and_stop+0x130>)
 8010860:	4a0d      	ldr	r2, [pc, #52]	; (8010898 <dhcp_release_and_stop+0x130>)
 8010862:	490d      	ldr	r1, [pc, #52]	; (8010898 <dhcp_release_and_stop+0x130>)
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f7f7 fff3 	bl	8008850 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801086a:	2100      	movs	r1, #0
 801086c:	69f8      	ldr	r0, [r7, #28]
 801086e:	f000 f815 	bl	801089c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	791b      	ldrb	r3, [r3, #4]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d008      	beq.n	801088c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801087a:	f7fe ff85 	bl	800f788 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801087e:	69fb      	ldr	r3, [r7, #28]
 8010880:	2200      	movs	r2, #0
 8010882:	711a      	strb	r2, [r3, #4]
 8010884:	e002      	b.n	801088c <dhcp_release_and_stop+0x124>
    return;
 8010886:	bf00      	nop
 8010888:	e000      	b.n	801088c <dhcp_release_and_stop+0x124>
    return;
 801088a:	bf00      	nop
  }
}
 801088c:	3720      	adds	r7, #32
 801088e:	46bd      	mov	sp, r7
 8010890:	bdb0      	pop	{r4, r5, r7, pc}
 8010892:	bf00      	nop
 8010894:	2000c578 	.word	0x2000c578
 8010898:	08018054 	.word	0x08018054

0801089c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	460b      	mov	r3, r1
 80108a6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	795b      	ldrb	r3, [r3, #5]
 80108ac:	78fa      	ldrb	r2, [r7, #3]
 80108ae:	429a      	cmp	r2, r3
 80108b0:	d008      	beq.n	80108c4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	78fa      	ldrb	r2, [r7, #3]
 80108b6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2200      	movs	r2, #0
 80108bc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2200      	movs	r2, #0
 80108c2:	811a      	strh	r2, [r3, #8]
  }
}
 80108c4:	bf00      	nop
 80108c6:	370c      	adds	r7, #12
 80108c8:	46bd      	mov	sp, r7
 80108ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ce:	4770      	bx	lr

080108d0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6039      	str	r1, [r7, #0]
 80108d8:	4611      	mov	r1, r2
 80108da:	461a      	mov	r2, r3
 80108dc:	4603      	mov	r3, r0
 80108de:	80fb      	strh	r3, [r7, #6]
 80108e0:	460b      	mov	r3, r1
 80108e2:	717b      	strb	r3, [r7, #5]
 80108e4:	4613      	mov	r3, r2
 80108e6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80108e8:	88fa      	ldrh	r2, [r7, #6]
 80108ea:	793b      	ldrb	r3, [r7, #4]
 80108ec:	4413      	add	r3, r2
 80108ee:	3302      	adds	r3, #2
 80108f0:	2b44      	cmp	r3, #68	; 0x44
 80108f2:	d906      	bls.n	8010902 <dhcp_option+0x32>
 80108f4:	4b0d      	ldr	r3, [pc, #52]	; (801092c <dhcp_option+0x5c>)
 80108f6:	f240 529a 	movw	r2, #1434	; 0x59a
 80108fa:	490d      	ldr	r1, [pc, #52]	; (8010930 <dhcp_option+0x60>)
 80108fc:	480d      	ldr	r0, [pc, #52]	; (8010934 <dhcp_option+0x64>)
 80108fe:	f003 fcff 	bl	8014300 <iprintf>
  options[options_out_len++] = option_type;
 8010902:	88fb      	ldrh	r3, [r7, #6]
 8010904:	1c5a      	adds	r2, r3, #1
 8010906:	80fa      	strh	r2, [r7, #6]
 8010908:	461a      	mov	r2, r3
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	4413      	add	r3, r2
 801090e:	797a      	ldrb	r2, [r7, #5]
 8010910:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010912:	88fb      	ldrh	r3, [r7, #6]
 8010914:	1c5a      	adds	r2, r3, #1
 8010916:	80fa      	strh	r2, [r7, #6]
 8010918:	461a      	mov	r2, r3
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	4413      	add	r3, r2
 801091e:	793a      	ldrb	r2, [r7, #4]
 8010920:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010922:	88fb      	ldrh	r3, [r7, #6]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3708      	adds	r7, #8
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}
 801092c:	080174ac 	.word	0x080174ac
 8010930:	08017640 	.word	0x08017640
 8010934:	0801750c 	.word	0x0801750c

08010938 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	4603      	mov	r3, r0
 8010940:	6039      	str	r1, [r7, #0]
 8010942:	80fb      	strh	r3, [r7, #6]
 8010944:	4613      	mov	r3, r2
 8010946:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010948:	88fb      	ldrh	r3, [r7, #6]
 801094a:	2b43      	cmp	r3, #67	; 0x43
 801094c:	d906      	bls.n	801095c <dhcp_option_byte+0x24>
 801094e:	4b0a      	ldr	r3, [pc, #40]	; (8010978 <dhcp_option_byte+0x40>)
 8010950:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8010954:	4909      	ldr	r1, [pc, #36]	; (801097c <dhcp_option_byte+0x44>)
 8010956:	480a      	ldr	r0, [pc, #40]	; (8010980 <dhcp_option_byte+0x48>)
 8010958:	f003 fcd2 	bl	8014300 <iprintf>
  options[options_out_len++] = value;
 801095c:	88fb      	ldrh	r3, [r7, #6]
 801095e:	1c5a      	adds	r2, r3, #1
 8010960:	80fa      	strh	r2, [r7, #6]
 8010962:	461a      	mov	r2, r3
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	4413      	add	r3, r2
 8010968:	797a      	ldrb	r2, [r7, #5]
 801096a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801096c:	88fb      	ldrh	r3, [r7, #6]
}
 801096e:	4618      	mov	r0, r3
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	080174ac 	.word	0x080174ac
 801097c:	08017684 	.word	0x08017684
 8010980:	0801750c 	.word	0x0801750c

08010984 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b082      	sub	sp, #8
 8010988:	af00      	add	r7, sp, #0
 801098a:	4603      	mov	r3, r0
 801098c:	6039      	str	r1, [r7, #0]
 801098e:	80fb      	strh	r3, [r7, #6]
 8010990:	4613      	mov	r3, r2
 8010992:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010994:	88fb      	ldrh	r3, [r7, #6]
 8010996:	3302      	adds	r3, #2
 8010998:	2b44      	cmp	r3, #68	; 0x44
 801099a:	d906      	bls.n	80109aa <dhcp_option_short+0x26>
 801099c:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <dhcp_option_short+0x58>)
 801099e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80109a2:	490f      	ldr	r1, [pc, #60]	; (80109e0 <dhcp_option_short+0x5c>)
 80109a4:	480f      	ldr	r0, [pc, #60]	; (80109e4 <dhcp_option_short+0x60>)
 80109a6:	f003 fcab 	bl	8014300 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80109aa:	88bb      	ldrh	r3, [r7, #4]
 80109ac:	0a1b      	lsrs	r3, r3, #8
 80109ae:	b29a      	uxth	r2, r3
 80109b0:	88fb      	ldrh	r3, [r7, #6]
 80109b2:	1c59      	adds	r1, r3, #1
 80109b4:	80f9      	strh	r1, [r7, #6]
 80109b6:	4619      	mov	r1, r3
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	440b      	add	r3, r1
 80109bc:	b2d2      	uxtb	r2, r2
 80109be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80109c0:	88fb      	ldrh	r3, [r7, #6]
 80109c2:	1c5a      	adds	r2, r3, #1
 80109c4:	80fa      	strh	r2, [r7, #6]
 80109c6:	461a      	mov	r2, r3
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	4413      	add	r3, r2
 80109cc:	88ba      	ldrh	r2, [r7, #4]
 80109ce:	b2d2      	uxtb	r2, r2
 80109d0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80109d2:	88fb      	ldrh	r3, [r7, #6]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	080174ac 	.word	0x080174ac
 80109e0:	080176bc 	.word	0x080176bc
 80109e4:	0801750c 	.word	0x0801750c

080109e8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	4603      	mov	r3, r0
 80109f0:	60b9      	str	r1, [r7, #8]
 80109f2:	607a      	str	r2, [r7, #4]
 80109f4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80109f6:	89fb      	ldrh	r3, [r7, #14]
 80109f8:	3304      	adds	r3, #4
 80109fa:	2b44      	cmp	r3, #68	; 0x44
 80109fc:	d906      	bls.n	8010a0c <dhcp_option_long+0x24>
 80109fe:	4b19      	ldr	r3, [pc, #100]	; (8010a64 <dhcp_option_long+0x7c>)
 8010a00:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8010a04:	4918      	ldr	r1, [pc, #96]	; (8010a68 <dhcp_option_long+0x80>)
 8010a06:	4819      	ldr	r0, [pc, #100]	; (8010a6c <dhcp_option_long+0x84>)
 8010a08:	f003 fc7a 	bl	8014300 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	0e1a      	lsrs	r2, r3, #24
 8010a10:	89fb      	ldrh	r3, [r7, #14]
 8010a12:	1c59      	adds	r1, r3, #1
 8010a14:	81f9      	strh	r1, [r7, #14]
 8010a16:	4619      	mov	r1, r3
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	440b      	add	r3, r1
 8010a1c:	b2d2      	uxtb	r2, r2
 8010a1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	0c1a      	lsrs	r2, r3, #16
 8010a24:	89fb      	ldrh	r3, [r7, #14]
 8010a26:	1c59      	adds	r1, r3, #1
 8010a28:	81f9      	strh	r1, [r7, #14]
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	440b      	add	r3, r1
 8010a30:	b2d2      	uxtb	r2, r2
 8010a32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	0a1a      	lsrs	r2, r3, #8
 8010a38:	89fb      	ldrh	r3, [r7, #14]
 8010a3a:	1c59      	adds	r1, r3, #1
 8010a3c:	81f9      	strh	r1, [r7, #14]
 8010a3e:	4619      	mov	r1, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	440b      	add	r3, r1
 8010a44:	b2d2      	uxtb	r2, r2
 8010a46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010a48:	89fb      	ldrh	r3, [r7, #14]
 8010a4a:	1c5a      	adds	r2, r3, #1
 8010a4c:	81fa      	strh	r2, [r7, #14]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	68bb      	ldr	r3, [r7, #8]
 8010a52:	4413      	add	r3, r2
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	b2d2      	uxtb	r2, r2
 8010a58:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010a5a:	89fb      	ldrh	r3, [r7, #14]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3710      	adds	r7, #16
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	080174ac 	.word	0x080174ac
 8010a68:	080176f8 	.word	0x080176f8
 8010a6c:	0801750c 	.word	0x0801750c

08010a70 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b090      	sub	sp, #64	; 0x40
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010a7a:	2300      	movs	r3, #0
 8010a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010a82:	2208      	movs	r2, #8
 8010a84:	2100      	movs	r1, #0
 8010a86:	48b5      	ldr	r0, [pc, #724]	; (8010d5c <dhcp_parse_reply+0x2ec>)
 8010a88:	f003 fc9f 	bl	80143ca <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	895b      	ldrh	r3, [r3, #10]
 8010a90:	2b2b      	cmp	r3, #43	; 0x2b
 8010a92:	d802      	bhi.n	8010a9a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010a94:	f06f 0301 	mvn.w	r3, #1
 8010a98:	e2a7      	b.n	8010fea <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010aa0:	23f0      	movs	r3, #240	; 0xf0
 8010aa2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	891b      	ldrh	r3, [r3, #8]
 8010aa8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010aae:	e00c      	b.n	8010aca <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	895b      	ldrh	r3, [r3, #10]
 8010ab4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010ab6:	1ad3      	subs	r3, r2, r3
 8010ab8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010abc:	895b      	ldrh	r3, [r3, #10]
 8010abe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010ac0:	1ad3      	subs	r3, r2, r3
 8010ac2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d004      	beq.n	8010ada <dhcp_parse_reply+0x6a>
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	895b      	ldrh	r3, [r3, #10]
 8010ad4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d2ea      	bcs.n	8010ab0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d102      	bne.n	8010ae6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010ae0:	f06f 0301 	mvn.w	r3, #1
 8010ae4:	e281      	b.n	8010fea <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8010ae6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010ae8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8010aea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010aec:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010af4:	e239      	b.n	8010f6a <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8010af6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010afa:	4413      	add	r3, r2
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010b00:	2300      	movs	r3, #0
 8010b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8010b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b0a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010b0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b0e:	3302      	adds	r3, #2
 8010b10:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010b12:	8bfa      	ldrh	r2, [r7, #30]
 8010b14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d202      	bcs.n	8010b20 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010b1a:	f06f 0301 	mvn.w	r3, #1
 8010b1e:	e264      	b.n	8010fea <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010b20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b22:	3301      	adds	r3, #1
 8010b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b26:	8952      	ldrh	r2, [r2, #10]
 8010b28:	4293      	cmp	r3, r2
 8010b2a:	da07      	bge.n	8010b3c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010b2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010b2e:	3301      	adds	r3, #1
 8010b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b32:	4413      	add	r3, r2
 8010b34:	781b      	ldrb	r3, [r3, #0]
 8010b36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b3a:	e00b      	b.n	8010b54 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d004      	beq.n	8010b4e <dhcp_parse_reply+0xde>
 8010b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	685b      	ldr	r3, [r3, #4]
 8010b4a:	781b      	ldrb	r3, [r3, #0]
 8010b4c:	e000      	b.n	8010b50 <dhcp_parse_reply+0xe0>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8010b5c:	7dfb      	ldrb	r3, [r7, #23]
 8010b5e:	2b3b      	cmp	r3, #59	; 0x3b
 8010b60:	f200 812c 	bhi.w	8010dbc <dhcp_parse_reply+0x34c>
 8010b64:	a201      	add	r2, pc, #4	; (adr r2, 8010b6c <dhcp_parse_reply+0xfc>)
 8010b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b6a:	bf00      	nop
 8010b6c:	08010c5d 	.word	0x08010c5d
 8010b70:	08010c6d 	.word	0x08010c6d
 8010b74:	08010dbd 	.word	0x08010dbd
 8010b78:	08010c8f 	.word	0x08010c8f
 8010b7c:	08010dbd 	.word	0x08010dbd
 8010b80:	08010dbd 	.word	0x08010dbd
 8010b84:	08010dbd 	.word	0x08010dbd
 8010b88:	08010dbd 	.word	0x08010dbd
 8010b8c:	08010dbd 	.word	0x08010dbd
 8010b90:	08010dbd 	.word	0x08010dbd
 8010b94:	08010dbd 	.word	0x08010dbd
 8010b98:	08010dbd 	.word	0x08010dbd
 8010b9c:	08010dbd 	.word	0x08010dbd
 8010ba0:	08010dbd 	.word	0x08010dbd
 8010ba4:	08010dbd 	.word	0x08010dbd
 8010ba8:	08010dbd 	.word	0x08010dbd
 8010bac:	08010dbd 	.word	0x08010dbd
 8010bb0:	08010dbd 	.word	0x08010dbd
 8010bb4:	08010dbd 	.word	0x08010dbd
 8010bb8:	08010dbd 	.word	0x08010dbd
 8010bbc:	08010dbd 	.word	0x08010dbd
 8010bc0:	08010dbd 	.word	0x08010dbd
 8010bc4:	08010dbd 	.word	0x08010dbd
 8010bc8:	08010dbd 	.word	0x08010dbd
 8010bcc:	08010dbd 	.word	0x08010dbd
 8010bd0:	08010dbd 	.word	0x08010dbd
 8010bd4:	08010dbd 	.word	0x08010dbd
 8010bd8:	08010dbd 	.word	0x08010dbd
 8010bdc:	08010dbd 	.word	0x08010dbd
 8010be0:	08010dbd 	.word	0x08010dbd
 8010be4:	08010dbd 	.word	0x08010dbd
 8010be8:	08010dbd 	.word	0x08010dbd
 8010bec:	08010dbd 	.word	0x08010dbd
 8010bf0:	08010dbd 	.word	0x08010dbd
 8010bf4:	08010dbd 	.word	0x08010dbd
 8010bf8:	08010dbd 	.word	0x08010dbd
 8010bfc:	08010dbd 	.word	0x08010dbd
 8010c00:	08010dbd 	.word	0x08010dbd
 8010c04:	08010dbd 	.word	0x08010dbd
 8010c08:	08010dbd 	.word	0x08010dbd
 8010c0c:	08010dbd 	.word	0x08010dbd
 8010c10:	08010dbd 	.word	0x08010dbd
 8010c14:	08010dbd 	.word	0x08010dbd
 8010c18:	08010dbd 	.word	0x08010dbd
 8010c1c:	08010dbd 	.word	0x08010dbd
 8010c20:	08010dbd 	.word	0x08010dbd
 8010c24:	08010dbd 	.word	0x08010dbd
 8010c28:	08010dbd 	.word	0x08010dbd
 8010c2c:	08010dbd 	.word	0x08010dbd
 8010c30:	08010dbd 	.word	0x08010dbd
 8010c34:	08010dbd 	.word	0x08010dbd
 8010c38:	08010cbb 	.word	0x08010cbb
 8010c3c:	08010cdd 	.word	0x08010cdd
 8010c40:	08010d19 	.word	0x08010d19
 8010c44:	08010d3b 	.word	0x08010d3b
 8010c48:	08010dbd 	.word	0x08010dbd
 8010c4c:	08010dbd 	.word	0x08010dbd
 8010c50:	08010dbd 	.word	0x08010dbd
 8010c54:	08010d79 	.word	0x08010d79
 8010c58:	08010d9b 	.word	0x08010d9b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8010c6a:	e0ab      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c70:	2b04      	cmp	r3, #4
 8010c72:	d009      	beq.n	8010c88 <dhcp_parse_reply+0x218>
 8010c74:	4b3a      	ldr	r3, [pc, #232]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010c76:	f240 622e 	movw	r2, #1582	; 0x62e
 8010c7a:	493a      	ldr	r1, [pc, #232]	; (8010d64 <dhcp_parse_reply+0x2f4>)
 8010c7c:	483a      	ldr	r0, [pc, #232]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010c7e:	f003 fb3f 	bl	8014300 <iprintf>
 8010c82:	f06f 0305 	mvn.w	r3, #5
 8010c86:	e1b0      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010c88:	2306      	movs	r3, #6
 8010c8a:	623b      	str	r3, [r7, #32]
        break;
 8010c8c:	e09a      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8010c8e:	2304      	movs	r3, #4
 8010c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010c94:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d209      	bcs.n	8010cb4 <dhcp_parse_reply+0x244>
 8010ca0:	4b2f      	ldr	r3, [pc, #188]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010ca2:	f240 6233 	movw	r2, #1587	; 0x633
 8010ca6:	4931      	ldr	r1, [pc, #196]	; (8010d6c <dhcp_parse_reply+0x2fc>)
 8010ca8:	482f      	ldr	r0, [pc, #188]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010caa:	f003 fb29 	bl	8014300 <iprintf>
 8010cae:	f06f 0305 	mvn.w	r3, #5
 8010cb2:	e19a      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010cb4:	2307      	movs	r3, #7
 8010cb6:	623b      	str	r3, [r7, #32]
        break;
 8010cb8:	e084      	b.n	8010dc4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010cba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	d009      	beq.n	8010cd6 <dhcp_parse_reply+0x266>
 8010cc2:	4b27      	ldr	r3, [pc, #156]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010cc4:	f240 6241 	movw	r2, #1601	; 0x641
 8010cc8:	4926      	ldr	r1, [pc, #152]	; (8010d64 <dhcp_parse_reply+0x2f4>)
 8010cca:	4827      	ldr	r0, [pc, #156]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010ccc:	f003 fb18 	bl	8014300 <iprintf>
 8010cd0:	f06f 0305 	mvn.w	r3, #5
 8010cd4:	e189      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010cd6:	2303      	movs	r3, #3
 8010cd8:	623b      	str	r3, [r7, #32]
        break;
 8010cda:	e073      	b.n	8010dc4 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ce0:	2b01      	cmp	r3, #1
 8010ce2:	d009      	beq.n	8010cf8 <dhcp_parse_reply+0x288>
 8010ce4:	4b1e      	ldr	r3, [pc, #120]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010ce6:	f240 624f 	movw	r2, #1615	; 0x64f
 8010cea:	4921      	ldr	r1, [pc, #132]	; (8010d70 <dhcp_parse_reply+0x300>)
 8010cec:	481e      	ldr	r0, [pc, #120]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010cee:	f003 fb07 	bl	8014300 <iprintf>
 8010cf2:	f06f 0305 	mvn.w	r3, #5
 8010cf6:	e178      	b.n	8010fea <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010cf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010cfa:	2bf0      	cmp	r3, #240	; 0xf0
 8010cfc:	d009      	beq.n	8010d12 <dhcp_parse_reply+0x2a2>
 8010cfe:	4b18      	ldr	r3, [pc, #96]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010d00:	f240 6251 	movw	r2, #1617	; 0x651
 8010d04:	491b      	ldr	r1, [pc, #108]	; (8010d74 <dhcp_parse_reply+0x304>)
 8010d06:	4818      	ldr	r0, [pc, #96]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010d08:	f003 fafa 	bl	8014300 <iprintf>
 8010d0c:	f06f 0305 	mvn.w	r3, #5
 8010d10:	e16b      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8010d12:	2300      	movs	r3, #0
 8010d14:	623b      	str	r3, [r7, #32]
        break;
 8010d16:	e055      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8010d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d1c:	2b01      	cmp	r3, #1
 8010d1e:	d009      	beq.n	8010d34 <dhcp_parse_reply+0x2c4>
 8010d20:	4b0f      	ldr	r3, [pc, #60]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010d22:	f240 6255 	movw	r2, #1621	; 0x655
 8010d26:	4912      	ldr	r1, [pc, #72]	; (8010d70 <dhcp_parse_reply+0x300>)
 8010d28:	480f      	ldr	r0, [pc, #60]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010d2a:	f003 fae9 	bl	8014300 <iprintf>
 8010d2e:	f06f 0305 	mvn.w	r3, #5
 8010d32:	e15a      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8010d34:	2301      	movs	r3, #1
 8010d36:	623b      	str	r3, [r7, #32]
        break;
 8010d38:	e044      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d3e:	2b04      	cmp	r3, #4
 8010d40:	d009      	beq.n	8010d56 <dhcp_parse_reply+0x2e6>
 8010d42:	4b07      	ldr	r3, [pc, #28]	; (8010d60 <dhcp_parse_reply+0x2f0>)
 8010d44:	f240 6259 	movw	r2, #1625	; 0x659
 8010d48:	4906      	ldr	r1, [pc, #24]	; (8010d64 <dhcp_parse_reply+0x2f4>)
 8010d4a:	4807      	ldr	r0, [pc, #28]	; (8010d68 <dhcp_parse_reply+0x2f8>)
 8010d4c:	f003 fad8 	bl	8014300 <iprintf>
 8010d50:	f06f 0305 	mvn.w	r3, #5
 8010d54:	e149      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8010d56:	2302      	movs	r3, #2
 8010d58:	623b      	str	r3, [r7, #32]
        break;
 8010d5a:	e033      	b.n	8010dc4 <dhcp_parse_reply+0x354>
 8010d5c:	2000c570 	.word	0x2000c570
 8010d60:	080174ac 	.word	0x080174ac
 8010d64:	08017734 	.word	0x08017734
 8010d68:	0801750c 	.word	0x0801750c
 8010d6c:	08017740 	.word	0x08017740
 8010d70:	08017754 	.word	0x08017754
 8010d74:	08017760 	.word	0x08017760
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d7c:	2b04      	cmp	r3, #4
 8010d7e:	d009      	beq.n	8010d94 <dhcp_parse_reply+0x324>
 8010d80:	4b9c      	ldr	r3, [pc, #624]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010d82:	f240 625d 	movw	r2, #1629	; 0x65d
 8010d86:	499c      	ldr	r1, [pc, #624]	; (8010ff8 <dhcp_parse_reply+0x588>)
 8010d88:	489c      	ldr	r0, [pc, #624]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010d8a:	f003 fab9 	bl	8014300 <iprintf>
 8010d8e:	f06f 0305 	mvn.w	r3, #5
 8010d92:	e12a      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010d94:	2304      	movs	r3, #4
 8010d96:	623b      	str	r3, [r7, #32]
        break;
 8010d98:	e014      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d9e:	2b04      	cmp	r3, #4
 8010da0:	d009      	beq.n	8010db6 <dhcp_parse_reply+0x346>
 8010da2:	4b94      	ldr	r3, [pc, #592]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010da4:	f240 6261 	movw	r2, #1633	; 0x661
 8010da8:	4993      	ldr	r1, [pc, #588]	; (8010ff8 <dhcp_parse_reply+0x588>)
 8010daa:	4894      	ldr	r0, [pc, #592]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010dac:	f003 faa8 	bl	8014300 <iprintf>
 8010db0:	f06f 0305 	mvn.w	r3, #5
 8010db4:	e119      	b.n	8010fea <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010db6:	2305      	movs	r3, #5
 8010db8:	623b      	str	r3, [r7, #32]
        break;
 8010dba:	e003      	b.n	8010dc4 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010dc2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010dc4:	7dfb      	ldrb	r3, [r7, #23]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <dhcp_parse_reply+0x362>
      offset++;
 8010dca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dcc:	3301      	adds	r3, #1
 8010dce:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010dd0:	e0a1      	b.n	8010f16 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010dd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dd8:	4413      	add	r3, r2
 8010dda:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8010dde:	4293      	cmp	r3, r2
 8010de0:	dd02      	ble.n	8010de8 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8010de2:	f06f 0301 	mvn.w	r3, #1
 8010de6:	e100      	b.n	8010fea <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8010de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010dec:	b29a      	uxth	r2, r3
 8010dee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010df0:	4413      	add	r3, r2
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	3302      	adds	r3, #2
 8010df6:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8010df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f000 808a 	beq.w	8010f16 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8010e06:	6a3b      	ldr	r3, [r7, #32]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	db02      	blt.n	8010e12 <dhcp_parse_reply+0x3a2>
 8010e0c:	6a3b      	ldr	r3, [r7, #32]
 8010e0e:	2b07      	cmp	r3, #7
 8010e10:	dd06      	ble.n	8010e20 <dhcp_parse_reply+0x3b0>
 8010e12:	4b78      	ldr	r3, [pc, #480]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010e14:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010e18:	4979      	ldr	r1, [pc, #484]	; (8011000 <dhcp_parse_reply+0x590>)
 8010e1a:	4878      	ldr	r0, [pc, #480]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010e1c:	f003 fa70 	bl	8014300 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8010e20:	4a78      	ldr	r2, [pc, #480]	; (8011004 <dhcp_parse_reply+0x594>)
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	4413      	add	r3, r2
 8010e26:	781b      	ldrb	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d174      	bne.n	8010f16 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8010e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e30:	2b04      	cmp	r3, #4
 8010e32:	bf28      	it	cs
 8010e34:	2304      	movcs	r3, #4
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8010e3a:	8bfb      	ldrh	r3, [r7, #30]
 8010e3c:	8aba      	ldrh	r2, [r7, #20]
 8010e3e:	f107 0108 	add.w	r1, r7, #8
 8010e42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e44:	f7f8 fc18 	bl	8009678 <pbuf_copy_partial>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	8abb      	ldrh	r3, [r7, #20]
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d002      	beq.n	8010e58 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8010e52:	f06f 0301 	mvn.w	r3, #1
 8010e56:	e0c8      	b.n	8010fea <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8010e58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e5c:	2b04      	cmp	r3, #4
 8010e5e:	d933      	bls.n	8010ec8 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010e60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e64:	f003 0303 	and.w	r3, r3, #3
 8010e68:	b2db      	uxtb	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d009      	beq.n	8010e82 <dhcp_parse_reply+0x412>
 8010e6e:	4b61      	ldr	r3, [pc, #388]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010e70:	f240 6281 	movw	r2, #1665	; 0x681
 8010e74:	4964      	ldr	r1, [pc, #400]	; (8011008 <dhcp_parse_reply+0x598>)
 8010e76:	4861      	ldr	r0, [pc, #388]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010e78:	f003 fa42 	bl	8014300 <iprintf>
 8010e7c:	f06f 0305 	mvn.w	r3, #5
 8010e80:	e0b3      	b.n	8010fea <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8010e82:	4a60      	ldr	r2, [pc, #384]	; (8011004 <dhcp_parse_reply+0x594>)
 8010e84:	6a3b      	ldr	r3, [r7, #32]
 8010e86:	4413      	add	r3, r2
 8010e88:	2201      	movs	r2, #1
 8010e8a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f7f6 fe03 	bl	8007a9a <lwip_htonl>
 8010e94:	4602      	mov	r2, r0
 8010e96:	495d      	ldr	r1, [pc, #372]	; (801100c <dhcp_parse_reply+0x59c>)
 8010e98:	6a3b      	ldr	r3, [r7, #32]
 8010e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010e9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ea2:	3b04      	subs	r3, #4
 8010ea4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8010ea8:	8bfb      	ldrh	r3, [r7, #30]
 8010eaa:	3304      	adds	r3, #4
 8010eac:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010eae:	8a7a      	ldrh	r2, [r7, #18]
 8010eb0:	8bfb      	ldrh	r3, [r7, #30]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d202      	bcs.n	8010ebc <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8010eb6:	f06f 0301 	mvn.w	r3, #1
 8010eba:	e096      	b.n	8010fea <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8010ebc:	8a7b      	ldrh	r3, [r7, #18]
 8010ebe:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	3301      	adds	r3, #1
 8010ec4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010ec6:	e79e      	b.n	8010e06 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8010ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ecc:	2b04      	cmp	r3, #4
 8010ece:	d106      	bne.n	8010ede <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f7f6 fde1 	bl	8007a9a <lwip_htonl>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	60bb      	str	r3, [r7, #8]
 8010edc:	e011      	b.n	8010f02 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010ede:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ee2:	2b01      	cmp	r3, #1
 8010ee4:	d009      	beq.n	8010efa <dhcp_parse_reply+0x48a>
 8010ee6:	4b43      	ldr	r3, [pc, #268]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010ee8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8010eec:	4948      	ldr	r1, [pc, #288]	; (8011010 <dhcp_parse_reply+0x5a0>)
 8010eee:	4843      	ldr	r0, [pc, #268]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010ef0:	f003 fa06 	bl	8014300 <iprintf>
 8010ef4:	f06f 0305 	mvn.w	r3, #5
 8010ef8:	e077      	b.n	8010fea <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8010efa:	f107 0308 	add.w	r3, r7, #8
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8010f02:	4a40      	ldr	r2, [pc, #256]	; (8011004 <dhcp_parse_reply+0x594>)
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	4413      	add	r3, r2
 8010f08:	2201      	movs	r2, #1
 8010f0a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8010f0c:	68ba      	ldr	r2, [r7, #8]
 8010f0e:	493f      	ldr	r1, [pc, #252]	; (801100c <dhcp_parse_reply+0x59c>)
 8010f10:	6a3b      	ldr	r3, [r7, #32]
 8010f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	895b      	ldrh	r3, [r3, #10]
 8010f1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d324      	bcc.n	8010f6a <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	895b      	ldrh	r3, [r3, #10]
 8010f24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f26:	1ad3      	subs	r3, r2, r3
 8010f28:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8010f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2c:	895b      	ldrh	r3, [r3, #10]
 8010f2e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8010f30:	1ad3      	subs	r3, r2, r3
 8010f32:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8010f34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f36:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d213      	bcs.n	8010f64 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d109      	bne.n	8010f5c <dhcp_parse_reply+0x4ec>
 8010f48:	4b2a      	ldr	r3, [pc, #168]	; (8010ff4 <dhcp_parse_reply+0x584>)
 8010f4a:	f240 629d 	movw	r2, #1693	; 0x69d
 8010f4e:	4931      	ldr	r1, [pc, #196]	; (8011014 <dhcp_parse_reply+0x5a4>)
 8010f50:	482a      	ldr	r0, [pc, #168]	; (8010ffc <dhcp_parse_reply+0x58c>)
 8010f52:	f003 f9d5 	bl	8014300 <iprintf>
 8010f56:	f06f 0305 	mvn.w	r3, #5
 8010f5a:	e046      	b.n	8010fea <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8010f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5e:	685b      	ldr	r3, [r3, #4]
 8010f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f62:	e002      	b.n	8010f6a <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010f64:	f06f 0301 	mvn.w	r3, #1
 8010f68:	e03f      	b.n	8010fea <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00a      	beq.n	8010f86 <dhcp_parse_reply+0x516>
 8010f70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f72:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d206      	bcs.n	8010f86 <dhcp_parse_reply+0x516>
 8010f78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010f7c:	4413      	add	r3, r2
 8010f7e:	781b      	ldrb	r3, [r3, #0]
 8010f80:	2bff      	cmp	r3, #255	; 0xff
 8010f82:	f47f adb8 	bne.w	8010af6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8010f86:	4b1f      	ldr	r3, [pc, #124]	; (8011004 <dhcp_parse_reply+0x594>)
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d018      	beq.n	8010fc0 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010f8e:	4b1f      	ldr	r3, [pc, #124]	; (801100c <dhcp_parse_reply+0x59c>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010f94:	4b1b      	ldr	r3, [pc, #108]	; (8011004 <dhcp_parse_reply+0x594>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	d102      	bne.n	8010fa6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa4:	e00c      	b.n	8010fc0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b02      	cmp	r3, #2
 8010faa:	d102      	bne.n	8010fb2 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8010fac:	2301      	movs	r3, #1
 8010fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fb0:	e006      	b.n	8010fc0 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2b03      	cmp	r3, #3
 8010fb6:	d103      	bne.n	8010fc0 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d006      	beq.n	8010fd4 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8010fca:	236c      	movs	r3, #108	; 0x6c
 8010fcc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010fce:	23ec      	movs	r3, #236	; 0xec
 8010fd0:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010fd2:	e56a      	b.n	8010aaa <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d006      	beq.n	8010fe8 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010fde:	232c      	movs	r3, #44	; 0x2c
 8010fe0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010fe2:	236c      	movs	r3, #108	; 0x6c
 8010fe4:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8010fe6:	e560      	b.n	8010aaa <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8010fe8:	2300      	movs	r3, #0
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3740      	adds	r7, #64	; 0x40
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	080174ac 	.word	0x080174ac
 8010ff8:	08017734 	.word	0x08017734
 8010ffc:	0801750c 	.word	0x0801750c
 8011000:	08017778 	.word	0x08017778
 8011004:	2000c570 	.word	0x2000c570
 8011008:	0801778c 	.word	0x0801778c
 801100c:	2000c550 	.word	0x2000c550
 8011010:	080177a4 	.word	0x080177a4
 8011014:	080177b8 	.word	0x080177b8

08011018 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b08a      	sub	sp, #40	; 0x28
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	607a      	str	r2, [r7, #4]
 8011024:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8011026:	4b60      	ldr	r3, [pc, #384]	; (80111a8 <dhcp_recv+0x190>)
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011030:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011038:	69fb      	ldr	r3, [r7, #28]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f000 809d 	beq.w	801117a <dhcp_recv+0x162>
 8011040:	69fb      	ldr	r3, [r7, #28]
 8011042:	791b      	ldrb	r3, [r3, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 8098 	beq.w	801117a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	895b      	ldrh	r3, [r3, #10]
 801104e:	2b2b      	cmp	r3, #43	; 0x2b
 8011050:	f240 8095 	bls.w	801117e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	2b02      	cmp	r3, #2
 801105a:	f040 8092 	bne.w	8011182 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801105e:	2300      	movs	r3, #0
 8011060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011064:	e012      	b.n	801108c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8011066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801106a:	6a3a      	ldr	r2, [r7, #32]
 801106c:	4413      	add	r3, r2
 801106e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8011072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011076:	69b9      	ldr	r1, [r7, #24]
 8011078:	440b      	add	r3, r1
 801107a:	7f1b      	ldrb	r3, [r3, #28]
 801107c:	429a      	cmp	r2, r3
 801107e:	f040 8082 	bne.w	8011186 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011086:	3301      	adds	r3, #1
 8011088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011092:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011096:	429a      	cmp	r2, r3
 8011098:	d203      	bcs.n	80110a2 <dhcp_recv+0x8a>
 801109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801109e:	2b05      	cmp	r3, #5
 80110a0:	d9e1      	bls.n	8011066 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80110a2:	69bb      	ldr	r3, [r7, #24]
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7f6 fcf7 	bl	8007a9a <lwip_htonl>
 80110ac:	4602      	mov	r2, r0
 80110ae:	69fb      	ldr	r3, [r7, #28]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d169      	bne.n	801118a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80110b6:	69f9      	ldr	r1, [r7, #28]
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff fcd9 	bl	8010a70 <dhcp_parse_reply>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d164      	bne.n	801118e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80110c4:	4b39      	ldr	r3, [pc, #228]	; (80111ac <dhcp_recv+0x194>)
 80110c6:	785b      	ldrb	r3, [r3, #1]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d062      	beq.n	8011192 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80110d2:	4b37      	ldr	r3, [pc, #220]	; (80111b0 <dhcp_recv+0x198>)
 80110d4:	685b      	ldr	r3, [r3, #4]
 80110d6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80110d8:	7cfb      	ldrb	r3, [r7, #19]
 80110da:	2b05      	cmp	r3, #5
 80110dc:	d12a      	bne.n	8011134 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80110de:	69fb      	ldr	r3, [r7, #28]
 80110e0:	795b      	ldrb	r3, [r3, #5]
 80110e2:	2b01      	cmp	r3, #1
 80110e4:	d112      	bne.n	801110c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80110e6:	6979      	ldr	r1, [r7, #20]
 80110e8:	6a38      	ldr	r0, [r7, #32]
 80110ea:	f7fe fe17 	bl	800fd1c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80110ee:	6a3b      	ldr	r3, [r7, #32]
 80110f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110f4:	f003 0308 	and.w	r3, r3, #8
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d003      	beq.n	8011104 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80110fc:	6a38      	ldr	r0, [r7, #32]
 80110fe:	f7fe fb87 	bl	800f810 <dhcp_check>
 8011102:	e049      	b.n	8011198 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8011104:	6a38      	ldr	r0, [r7, #32]
 8011106:	f7ff f867 	bl	80101d8 <dhcp_bind>
 801110a:	e045      	b.n	8011198 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	795b      	ldrb	r3, [r3, #5]
 8011110:	2b03      	cmp	r3, #3
 8011112:	d007      	beq.n	8011124 <dhcp_recv+0x10c>
 8011114:	69fb      	ldr	r3, [r7, #28]
 8011116:	795b      	ldrb	r3, [r3, #5]
 8011118:	2b04      	cmp	r3, #4
 801111a:	d003      	beq.n	8011124 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801111c:	69fb      	ldr	r3, [r7, #28]
 801111e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011120:	2b05      	cmp	r3, #5
 8011122:	d139      	bne.n	8011198 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8011124:	6979      	ldr	r1, [r7, #20]
 8011126:	6a38      	ldr	r0, [r7, #32]
 8011128:	f7fe fdf8 	bl	800fd1c <dhcp_handle_ack>
      dhcp_bind(netif);
 801112c:	6a38      	ldr	r0, [r7, #32]
 801112e:	f7ff f853 	bl	80101d8 <dhcp_bind>
 8011132:	e031      	b.n	8011198 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011134:	7cfb      	ldrb	r3, [r7, #19]
 8011136:	2b06      	cmp	r3, #6
 8011138:	d113      	bne.n	8011162 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801113e:	2b03      	cmp	r3, #3
 8011140:	d00b      	beq.n	801115a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	795b      	ldrb	r3, [r3, #5]
 8011146:	2b01      	cmp	r3, #1
 8011148:	d007      	beq.n	801115a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801114a:	69fb      	ldr	r3, [r7, #28]
 801114c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801114e:	2b04      	cmp	r3, #4
 8011150:	d003      	beq.n	801115a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	795b      	ldrb	r3, [r3, #5]
 8011156:	2b05      	cmp	r3, #5
 8011158:	d103      	bne.n	8011162 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801115a:	6a38      	ldr	r0, [r7, #32]
 801115c:	f7fe fb3e 	bl	800f7dc <dhcp_handle_nak>
 8011160:	e01a      	b.n	8011198 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011162:	7cfb      	ldrb	r3, [r7, #19]
 8011164:	2b02      	cmp	r3, #2
 8011166:	d116      	bne.n	8011196 <dhcp_recv+0x17e>
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	795b      	ldrb	r3, [r3, #5]
 801116c:	2b06      	cmp	r3, #6
 801116e:	d112      	bne.n	8011196 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011170:	6979      	ldr	r1, [r7, #20]
 8011172:	6a38      	ldr	r0, [r7, #32]
 8011174:	f7fe fb80 	bl	800f878 <dhcp_handle_offer>
 8011178:	e00e      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801117a:	bf00      	nop
 801117c:	e00c      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801117e:	bf00      	nop
 8011180:	e00a      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011182:	bf00      	nop
 8011184:	e008      	b.n	8011198 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8011186:	bf00      	nop
 8011188:	e006      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801118a:	bf00      	nop
 801118c:	e004      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801118e:	bf00      	nop
 8011190:	e002      	b.n	8011198 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011192:	bf00      	nop
 8011194:	e000      	b.n	8011198 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8011196:	bf00      	nop
  pbuf_free(p);
 8011198:	6878      	ldr	r0, [r7, #4]
 801119a:	f7f8 f867 	bl	800926c <pbuf_free>
}
 801119e:	bf00      	nop
 80111a0:	3728      	adds	r7, #40	; 0x28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20008d7c 	.word	0x20008d7c
 80111ac:	2000c570 	.word	0x2000c570
 80111b0:	2000c550 	.word	0x2000c550

080111b4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b088      	sub	sp, #32
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	60b9      	str	r1, [r7, #8]
 80111be:	603b      	str	r3, [r7, #0]
 80111c0:	4613      	mov	r3, r2
 80111c2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d108      	bne.n	80111dc <dhcp_create_msg+0x28>
 80111ca:	4b5f      	ldr	r3, [pc, #380]	; (8011348 <dhcp_create_msg+0x194>)
 80111cc:	f240 7269 	movw	r2, #1897	; 0x769
 80111d0:	495e      	ldr	r1, [pc, #376]	; (801134c <dhcp_create_msg+0x198>)
 80111d2:	485f      	ldr	r0, [pc, #380]	; (8011350 <dhcp_create_msg+0x19c>)
 80111d4:	f003 f894 	bl	8014300 <iprintf>
 80111d8:	2300      	movs	r3, #0
 80111da:	e0b1      	b.n	8011340 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d108      	bne.n	80111f4 <dhcp_create_msg+0x40>
 80111e2:	4b59      	ldr	r3, [pc, #356]	; (8011348 <dhcp_create_msg+0x194>)
 80111e4:	f240 726a 	movw	r2, #1898	; 0x76a
 80111e8:	495a      	ldr	r1, [pc, #360]	; (8011354 <dhcp_create_msg+0x1a0>)
 80111ea:	4859      	ldr	r0, [pc, #356]	; (8011350 <dhcp_create_msg+0x19c>)
 80111ec:	f003 f888 	bl	8014300 <iprintf>
 80111f0:	2300      	movs	r3, #0
 80111f2:	e0a5      	b.n	8011340 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80111f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80111f8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80111fc:	2036      	movs	r0, #54	; 0x36
 80111fe:	f7f7 fd51 	bl	8008ca4 <pbuf_alloc>
 8011202:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8011204:	69bb      	ldr	r3, [r7, #24]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d101      	bne.n	801120e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801120a:	2300      	movs	r3, #0
 801120c:	e098      	b.n	8011340 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	895b      	ldrh	r3, [r3, #10]
 8011212:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8011216:	d206      	bcs.n	8011226 <dhcp_create_msg+0x72>
 8011218:	4b4b      	ldr	r3, [pc, #300]	; (8011348 <dhcp_create_msg+0x194>)
 801121a:	f240 7271 	movw	r2, #1905	; 0x771
 801121e:	494e      	ldr	r1, [pc, #312]	; (8011358 <dhcp_create_msg+0x1a4>)
 8011220:	484b      	ldr	r0, [pc, #300]	; (8011350 <dhcp_create_msg+0x19c>)
 8011222:	f003 f86d 	bl	8014300 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011226:	79fb      	ldrb	r3, [r7, #7]
 8011228:	2b03      	cmp	r3, #3
 801122a:	d103      	bne.n	8011234 <dhcp_create_msg+0x80>
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	795b      	ldrb	r3, [r3, #5]
 8011230:	2b03      	cmp	r3, #3
 8011232:	d10d      	bne.n	8011250 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	799b      	ldrb	r3, [r3, #6]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d105      	bne.n	8011248 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801123c:	f002 ff4e 	bl	80140dc <rand>
 8011240:	4603      	mov	r3, r0
 8011242:	461a      	mov	r2, r3
 8011244:	4b45      	ldr	r3, [pc, #276]	; (801135c <dhcp_create_msg+0x1a8>)
 8011246:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011248:	4b44      	ldr	r3, [pc, #272]	; (801135c <dhcp_create_msg+0x1a8>)
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011250:	69bb      	ldr	r3, [r7, #24]
 8011252:	685b      	ldr	r3, [r3, #4]
 8011254:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8011256:	f44f 729a 	mov.w	r2, #308	; 0x134
 801125a:	2100      	movs	r1, #0
 801125c:	6978      	ldr	r0, [r7, #20]
 801125e:	f003 f8b4 	bl	80143ca <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	2201      	movs	r2, #1
 8011266:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011268:	697b      	ldr	r3, [r7, #20]
 801126a:	2201      	movs	r2, #1
 801126c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	4618      	mov	r0, r3
 801127e:	f7f6 fc0c 	bl	8007a9a <lwip_htonl>
 8011282:	4602      	mov	r2, r0
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011288:	79fb      	ldrb	r3, [r7, #7]
 801128a:	2b08      	cmp	r3, #8
 801128c:	d010      	beq.n	80112b0 <dhcp_create_msg+0xfc>
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	2b04      	cmp	r3, #4
 8011292:	d00d      	beq.n	80112b0 <dhcp_create_msg+0xfc>
 8011294:	79fb      	ldrb	r3, [r7, #7]
 8011296:	2b07      	cmp	r3, #7
 8011298:	d00a      	beq.n	80112b0 <dhcp_create_msg+0xfc>
 801129a:	79fb      	ldrb	r3, [r7, #7]
 801129c:	2b03      	cmp	r3, #3
 801129e:	d10c      	bne.n	80112ba <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80112a4:	2b05      	cmp	r3, #5
 80112a6:	d003      	beq.n	80112b0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	795b      	ldrb	r3, [r3, #5]
 80112ac:	2b04      	cmp	r3, #4
 80112ae:	d104      	bne.n	80112ba <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	3304      	adds	r3, #4
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80112ba:	2300      	movs	r3, #0
 80112bc:	83fb      	strh	r3, [r7, #30]
 80112be:	e00c      	b.n	80112da <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80112c0:	8bfa      	ldrh	r2, [r7, #30]
 80112c2:	8bfb      	ldrh	r3, [r7, #30]
 80112c4:	68f9      	ldr	r1, [r7, #12]
 80112c6:	440a      	add	r2, r1
 80112c8:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80112cc:	697a      	ldr	r2, [r7, #20]
 80112ce:	4413      	add	r3, r2
 80112d0:	460a      	mov	r2, r1
 80112d2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80112d4:	8bfb      	ldrh	r3, [r7, #30]
 80112d6:	3301      	adds	r3, #1
 80112d8:	83fb      	strh	r3, [r7, #30]
 80112da:	8bfb      	ldrh	r3, [r7, #30]
 80112dc:	2b05      	cmp	r3, #5
 80112de:	d9ef      	bls.n	80112c0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80112e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80112ec:	2200      	movs	r2, #0
 80112ee:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80112f2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80112f6:	2200      	movs	r2, #0
 80112f8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80112fc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011300:	2200      	movs	r2, #0
 8011302:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011306:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011310:	2301      	movs	r3, #1
 8011312:	2235      	movs	r2, #53	; 0x35
 8011314:	2000      	movs	r0, #0
 8011316:	f7ff fadb 	bl	80108d0 <dhcp_option>
 801131a:	4603      	mov	r3, r0
 801131c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011324:	79fa      	ldrb	r2, [r7, #7]
 8011326:	8a7b      	ldrh	r3, [r7, #18]
 8011328:	4618      	mov	r0, r3
 801132a:	f7ff fb05 	bl	8010938 <dhcp_option_byte>
 801132e:	4603      	mov	r3, r0
 8011330:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	8a7a      	ldrh	r2, [r7, #18]
 801133c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801133e:	69bb      	ldr	r3, [r7, #24]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3720      	adds	r7, #32
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	080174ac 	.word	0x080174ac
 801134c:	080177cc 	.word	0x080177cc
 8011350:	0801750c 	.word	0x0801750c
 8011354:	080177ec 	.word	0x080177ec
 8011358:	0801780c 	.word	0x0801780c
 801135c:	2000c580 	.word	0x2000c580

08011360 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	4603      	mov	r3, r0
 8011368:	60b9      	str	r1, [r7, #8]
 801136a:	607a      	str	r2, [r7, #4]
 801136c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801136e:	89fb      	ldrh	r3, [r7, #14]
 8011370:	1c5a      	adds	r2, r3, #1
 8011372:	81fa      	strh	r2, [r7, #14]
 8011374:	461a      	mov	r2, r3
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	4413      	add	r3, r2
 801137a:	22ff      	movs	r2, #255	; 0xff
 801137c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801137e:	e007      	b.n	8011390 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011380:	89fb      	ldrh	r3, [r7, #14]
 8011382:	1c5a      	adds	r2, r3, #1
 8011384:	81fa      	strh	r2, [r7, #14]
 8011386:	461a      	mov	r2, r3
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	4413      	add	r3, r2
 801138c:	2200      	movs	r2, #0
 801138e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011390:	89fb      	ldrh	r3, [r7, #14]
 8011392:	2b43      	cmp	r3, #67	; 0x43
 8011394:	d904      	bls.n	80113a0 <dhcp_option_trailer+0x40>
 8011396:	89fb      	ldrh	r3, [r7, #14]
 8011398:	f003 0303 	and.w	r3, r3, #3
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <dhcp_option_trailer+0x46>
 80113a0:	89fb      	ldrh	r3, [r7, #14]
 80113a2:	2b43      	cmp	r3, #67	; 0x43
 80113a4:	d9ec      	bls.n	8011380 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80113a6:	89fb      	ldrh	r3, [r7, #14]
 80113a8:	33f0      	adds	r3, #240	; 0xf0
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7f7 fdd6 	bl	8008f60 <pbuf_realloc>
}
 80113b4:	bf00      	nop
 80113b6:	3710      	adds	r7, #16
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80113bc:	b480      	push	{r7}
 80113be:	b085      	sub	sp, #20
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d017      	beq.n	80113fa <dhcp_supplied_address+0x3e>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d013      	beq.n	80113fa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113d6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	795b      	ldrb	r3, [r3, #5]
 80113dc:	2b0a      	cmp	r3, #10
 80113de:	d007      	beq.n	80113f0 <dhcp_supplied_address+0x34>
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	795b      	ldrb	r3, [r3, #5]
 80113e4:	2b05      	cmp	r3, #5
 80113e6:	d003      	beq.n	80113f0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80113ec:	2b04      	cmp	r3, #4
 80113ee:	d101      	bne.n	80113f4 <dhcp_supplied_address+0x38>
 80113f0:	2301      	movs	r3, #1
 80113f2:	e000      	b.n	80113f6 <dhcp_supplied_address+0x3a>
 80113f4:	2300      	movs	r3, #0
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	e000      	b.n	80113fc <dhcp_supplied_address+0x40>
  }
  return 0;
 80113fa:	2300      	movs	r3, #0
}
 80113fc:	4618      	mov	r0, r3
 80113fe:	3714      	adds	r7, #20
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b082      	sub	sp, #8
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011410:	4915      	ldr	r1, [pc, #84]	; (8011468 <etharp_free_entry+0x60>)
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	4613      	mov	r3, r2
 8011416:	005b      	lsls	r3, r3, #1
 8011418:	4413      	add	r3, r2
 801141a:	00db      	lsls	r3, r3, #3
 801141c:	440b      	add	r3, r1
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d013      	beq.n	801144c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011424:	4910      	ldr	r1, [pc, #64]	; (8011468 <etharp_free_entry+0x60>)
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	4613      	mov	r3, r2
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	4413      	add	r3, r2
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	440b      	add	r3, r1
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4618      	mov	r0, r3
 8011436:	f7f7 ff19 	bl	800926c <pbuf_free>
    arp_table[i].q = NULL;
 801143a:	490b      	ldr	r1, [pc, #44]	; (8011468 <etharp_free_entry+0x60>)
 801143c:	687a      	ldr	r2, [r7, #4]
 801143e:	4613      	mov	r3, r2
 8011440:	005b      	lsls	r3, r3, #1
 8011442:	4413      	add	r3, r2
 8011444:	00db      	lsls	r3, r3, #3
 8011446:	440b      	add	r3, r1
 8011448:	2200      	movs	r2, #0
 801144a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801144c:	4906      	ldr	r1, [pc, #24]	; (8011468 <etharp_free_entry+0x60>)
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	4613      	mov	r3, r2
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	4413      	add	r3, r2
 8011456:	00db      	lsls	r3, r3, #3
 8011458:	440b      	add	r3, r1
 801145a:	3314      	adds	r3, #20
 801145c:	2200      	movs	r2, #0
 801145e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011460:	bf00      	nop
 8011462:	3708      	adds	r7, #8
 8011464:	46bd      	mov	sp, r7
 8011466:	bd80      	pop	{r7, pc}
 8011468:	2000c584 	.word	0x2000c584

0801146c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b082      	sub	sp, #8
 8011470:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011472:	2300      	movs	r3, #0
 8011474:	607b      	str	r3, [r7, #4]
 8011476:	e096      	b.n	80115a6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011478:	494f      	ldr	r1, [pc, #316]	; (80115b8 <etharp_tmr+0x14c>)
 801147a:	687a      	ldr	r2, [r7, #4]
 801147c:	4613      	mov	r3, r2
 801147e:	005b      	lsls	r3, r3, #1
 8011480:	4413      	add	r3, r2
 8011482:	00db      	lsls	r3, r3, #3
 8011484:	440b      	add	r3, r1
 8011486:	3314      	adds	r3, #20
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801148c:	78fb      	ldrb	r3, [r7, #3]
 801148e:	2b00      	cmp	r3, #0
 8011490:	f000 8086 	beq.w	80115a0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011494:	4948      	ldr	r1, [pc, #288]	; (80115b8 <etharp_tmr+0x14c>)
 8011496:	687a      	ldr	r2, [r7, #4]
 8011498:	4613      	mov	r3, r2
 801149a:	005b      	lsls	r3, r3, #1
 801149c:	4413      	add	r3, r2
 801149e:	00db      	lsls	r3, r3, #3
 80114a0:	440b      	add	r3, r1
 80114a2:	3312      	adds	r3, #18
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	3301      	adds	r3, #1
 80114a8:	b298      	uxth	r0, r3
 80114aa:	4943      	ldr	r1, [pc, #268]	; (80115b8 <etharp_tmr+0x14c>)
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	4613      	mov	r3, r2
 80114b0:	005b      	lsls	r3, r3, #1
 80114b2:	4413      	add	r3, r2
 80114b4:	00db      	lsls	r3, r3, #3
 80114b6:	440b      	add	r3, r1
 80114b8:	3312      	adds	r3, #18
 80114ba:	4602      	mov	r2, r0
 80114bc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80114be:	493e      	ldr	r1, [pc, #248]	; (80115b8 <etharp_tmr+0x14c>)
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	4613      	mov	r3, r2
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	4413      	add	r3, r2
 80114c8:	00db      	lsls	r3, r3, #3
 80114ca:	440b      	add	r3, r1
 80114cc:	3312      	adds	r3, #18
 80114ce:	881b      	ldrh	r3, [r3, #0]
 80114d0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80114d4:	d215      	bcs.n	8011502 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80114d6:	4938      	ldr	r1, [pc, #224]	; (80115b8 <etharp_tmr+0x14c>)
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	4613      	mov	r3, r2
 80114dc:	005b      	lsls	r3, r3, #1
 80114de:	4413      	add	r3, r2
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	440b      	add	r3, r1
 80114e4:	3314      	adds	r3, #20
 80114e6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80114e8:	2b01      	cmp	r3, #1
 80114ea:	d10e      	bne.n	801150a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80114ec:	4932      	ldr	r1, [pc, #200]	; (80115b8 <etharp_tmr+0x14c>)
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	4613      	mov	r3, r2
 80114f2:	005b      	lsls	r3, r3, #1
 80114f4:	4413      	add	r3, r2
 80114f6:	00db      	lsls	r3, r3, #3
 80114f8:	440b      	add	r3, r1
 80114fa:	3312      	adds	r3, #18
 80114fc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80114fe:	2b04      	cmp	r3, #4
 8011500:	d903      	bls.n	801150a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7ff ff80 	bl	8011408 <etharp_free_entry>
 8011508:	e04a      	b.n	80115a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801150a:	492b      	ldr	r1, [pc, #172]	; (80115b8 <etharp_tmr+0x14c>)
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	4613      	mov	r3, r2
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4413      	add	r3, r2
 8011514:	00db      	lsls	r3, r3, #3
 8011516:	440b      	add	r3, r1
 8011518:	3314      	adds	r3, #20
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	2b03      	cmp	r3, #3
 801151e:	d10a      	bne.n	8011536 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011520:	4925      	ldr	r1, [pc, #148]	; (80115b8 <etharp_tmr+0x14c>)
 8011522:	687a      	ldr	r2, [r7, #4]
 8011524:	4613      	mov	r3, r2
 8011526:	005b      	lsls	r3, r3, #1
 8011528:	4413      	add	r3, r2
 801152a:	00db      	lsls	r3, r3, #3
 801152c:	440b      	add	r3, r1
 801152e:	3314      	adds	r3, #20
 8011530:	2204      	movs	r2, #4
 8011532:	701a      	strb	r2, [r3, #0]
 8011534:	e034      	b.n	80115a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011536:	4920      	ldr	r1, [pc, #128]	; (80115b8 <etharp_tmr+0x14c>)
 8011538:	687a      	ldr	r2, [r7, #4]
 801153a:	4613      	mov	r3, r2
 801153c:	005b      	lsls	r3, r3, #1
 801153e:	4413      	add	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	440b      	add	r3, r1
 8011544:	3314      	adds	r3, #20
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	2b04      	cmp	r3, #4
 801154a:	d10a      	bne.n	8011562 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801154c:	491a      	ldr	r1, [pc, #104]	; (80115b8 <etharp_tmr+0x14c>)
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	4613      	mov	r3, r2
 8011552:	005b      	lsls	r3, r3, #1
 8011554:	4413      	add	r3, r2
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	440b      	add	r3, r1
 801155a:	3314      	adds	r3, #20
 801155c:	2202      	movs	r2, #2
 801155e:	701a      	strb	r2, [r3, #0]
 8011560:	e01e      	b.n	80115a0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011562:	4915      	ldr	r1, [pc, #84]	; (80115b8 <etharp_tmr+0x14c>)
 8011564:	687a      	ldr	r2, [r7, #4]
 8011566:	4613      	mov	r3, r2
 8011568:	005b      	lsls	r3, r3, #1
 801156a:	4413      	add	r3, r2
 801156c:	00db      	lsls	r3, r3, #3
 801156e:	440b      	add	r3, r1
 8011570:	3314      	adds	r3, #20
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	2b01      	cmp	r3, #1
 8011576:	d113      	bne.n	80115a0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011578:	490f      	ldr	r1, [pc, #60]	; (80115b8 <etharp_tmr+0x14c>)
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	4613      	mov	r3, r2
 801157e:	005b      	lsls	r3, r3, #1
 8011580:	4413      	add	r3, r2
 8011582:	00db      	lsls	r3, r3, #3
 8011584:	440b      	add	r3, r1
 8011586:	3308      	adds	r3, #8
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	687a      	ldr	r2, [r7, #4]
 801158c:	4613      	mov	r3, r2
 801158e:	005b      	lsls	r3, r3, #1
 8011590:	4413      	add	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	4a08      	ldr	r2, [pc, #32]	; (80115b8 <etharp_tmr+0x14c>)
 8011596:	4413      	add	r3, r2
 8011598:	3304      	adds	r3, #4
 801159a:	4619      	mov	r1, r3
 801159c:	f000 fe72 	bl	8012284 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	3301      	adds	r3, #1
 80115a4:	607b      	str	r3, [r7, #4]
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2b09      	cmp	r3, #9
 80115aa:	f77f af65 	ble.w	8011478 <etharp_tmr+0xc>
      }
    }
  }
}
 80115ae:	bf00      	nop
 80115b0:	bf00      	nop
 80115b2:	3708      	adds	r7, #8
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	2000c584 	.word	0x2000c584

080115bc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b08a      	sub	sp, #40	; 0x28
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	60f8      	str	r0, [r7, #12]
 80115c4:	460b      	mov	r3, r1
 80115c6:	607a      	str	r2, [r7, #4]
 80115c8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80115ca:	230a      	movs	r3, #10
 80115cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80115ce:	230a      	movs	r3, #10
 80115d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80115d2:	230a      	movs	r3, #10
 80115d4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80115d6:	2300      	movs	r3, #0
 80115d8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80115da:	230a      	movs	r3, #10
 80115dc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80115de:	2300      	movs	r3, #0
 80115e0:	83bb      	strh	r3, [r7, #28]
 80115e2:	2300      	movs	r3, #0
 80115e4:	837b      	strh	r3, [r7, #26]
 80115e6:	2300      	movs	r3, #0
 80115e8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80115ea:	2300      	movs	r3, #0
 80115ec:	843b      	strh	r3, [r7, #32]
 80115ee:	e0ae      	b.n	801174e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80115f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80115f4:	49a6      	ldr	r1, [pc, #664]	; (8011890 <etharp_find_entry+0x2d4>)
 80115f6:	4613      	mov	r3, r2
 80115f8:	005b      	lsls	r3, r3, #1
 80115fa:	4413      	add	r3, r2
 80115fc:	00db      	lsls	r3, r3, #3
 80115fe:	440b      	add	r3, r1
 8011600:	3314      	adds	r3, #20
 8011602:	781b      	ldrb	r3, [r3, #0]
 8011604:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011606:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801160a:	2b0a      	cmp	r3, #10
 801160c:	d105      	bne.n	801161a <etharp_find_entry+0x5e>
 801160e:	7dfb      	ldrb	r3, [r7, #23]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d102      	bne.n	801161a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011614:	8c3b      	ldrh	r3, [r7, #32]
 8011616:	847b      	strh	r3, [r7, #34]	; 0x22
 8011618:	e095      	b.n	8011746 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801161a:	7dfb      	ldrb	r3, [r7, #23]
 801161c:	2b00      	cmp	r3, #0
 801161e:	f000 8092 	beq.w	8011746 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011622:	7dfb      	ldrb	r3, [r7, #23]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d009      	beq.n	801163c <etharp_find_entry+0x80>
 8011628:	7dfb      	ldrb	r3, [r7, #23]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d806      	bhi.n	801163c <etharp_find_entry+0x80>
 801162e:	4b99      	ldr	r3, [pc, #612]	; (8011894 <etharp_find_entry+0x2d8>)
 8011630:	f240 1223 	movw	r2, #291	; 0x123
 8011634:	4998      	ldr	r1, [pc, #608]	; (8011898 <etharp_find_entry+0x2dc>)
 8011636:	4899      	ldr	r0, [pc, #612]	; (801189c <etharp_find_entry+0x2e0>)
 8011638:	f002 fe62 	bl	8014300 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d020      	beq.n	8011684 <etharp_find_entry+0xc8>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	6819      	ldr	r1, [r3, #0]
 8011646:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801164a:	4891      	ldr	r0, [pc, #580]	; (8011890 <etharp_find_entry+0x2d4>)
 801164c:	4613      	mov	r3, r2
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	4413      	add	r3, r2
 8011652:	00db      	lsls	r3, r3, #3
 8011654:	4403      	add	r3, r0
 8011656:	3304      	adds	r3, #4
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	4299      	cmp	r1, r3
 801165c:	d112      	bne.n	8011684 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d00c      	beq.n	801167e <etharp_find_entry+0xc2>
 8011664:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011668:	4989      	ldr	r1, [pc, #548]	; (8011890 <etharp_find_entry+0x2d4>)
 801166a:	4613      	mov	r3, r2
 801166c:	005b      	lsls	r3, r3, #1
 801166e:	4413      	add	r3, r2
 8011670:	00db      	lsls	r3, r3, #3
 8011672:	440b      	add	r3, r1
 8011674:	3308      	adds	r3, #8
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	429a      	cmp	r2, r3
 801167c:	d102      	bne.n	8011684 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801167e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011682:	e100      	b.n	8011886 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011684:	7dfb      	ldrb	r3, [r7, #23]
 8011686:	2b01      	cmp	r3, #1
 8011688:	d140      	bne.n	801170c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801168a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801168e:	4980      	ldr	r1, [pc, #512]	; (8011890 <etharp_find_entry+0x2d4>)
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	00db      	lsls	r3, r3, #3
 8011698:	440b      	add	r3, r1
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01a      	beq.n	80116d6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80116a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116a4:	497a      	ldr	r1, [pc, #488]	; (8011890 <etharp_find_entry+0x2d4>)
 80116a6:	4613      	mov	r3, r2
 80116a8:	005b      	lsls	r3, r3, #1
 80116aa:	4413      	add	r3, r2
 80116ac:	00db      	lsls	r3, r3, #3
 80116ae:	440b      	add	r3, r1
 80116b0:	3312      	adds	r3, #18
 80116b2:	881b      	ldrh	r3, [r3, #0]
 80116b4:	8bba      	ldrh	r2, [r7, #28]
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d845      	bhi.n	8011746 <etharp_find_entry+0x18a>
            old_queue = i;
 80116ba:	8c3b      	ldrh	r3, [r7, #32]
 80116bc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80116be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116c2:	4973      	ldr	r1, [pc, #460]	; (8011890 <etharp_find_entry+0x2d4>)
 80116c4:	4613      	mov	r3, r2
 80116c6:	005b      	lsls	r3, r3, #1
 80116c8:	4413      	add	r3, r2
 80116ca:	00db      	lsls	r3, r3, #3
 80116cc:	440b      	add	r3, r1
 80116ce:	3312      	adds	r3, #18
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	83bb      	strh	r3, [r7, #28]
 80116d4:	e037      	b.n	8011746 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80116d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116da:	496d      	ldr	r1, [pc, #436]	; (8011890 <etharp_find_entry+0x2d4>)
 80116dc:	4613      	mov	r3, r2
 80116de:	005b      	lsls	r3, r3, #1
 80116e0:	4413      	add	r3, r2
 80116e2:	00db      	lsls	r3, r3, #3
 80116e4:	440b      	add	r3, r1
 80116e6:	3312      	adds	r3, #18
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	8b7a      	ldrh	r2, [r7, #26]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d82a      	bhi.n	8011746 <etharp_find_entry+0x18a>
            old_pending = i;
 80116f0:	8c3b      	ldrh	r3, [r7, #32]
 80116f2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80116f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80116f8:	4965      	ldr	r1, [pc, #404]	; (8011890 <etharp_find_entry+0x2d4>)
 80116fa:	4613      	mov	r3, r2
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	4413      	add	r3, r2
 8011700:	00db      	lsls	r3, r3, #3
 8011702:	440b      	add	r3, r1
 8011704:	3312      	adds	r3, #18
 8011706:	881b      	ldrh	r3, [r3, #0]
 8011708:	837b      	strh	r3, [r7, #26]
 801170a:	e01c      	b.n	8011746 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	2b01      	cmp	r3, #1
 8011710:	d919      	bls.n	8011746 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011712:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011716:	495e      	ldr	r1, [pc, #376]	; (8011890 <etharp_find_entry+0x2d4>)
 8011718:	4613      	mov	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	3312      	adds	r3, #18
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	8b3a      	ldrh	r2, [r7, #24]
 8011728:	429a      	cmp	r2, r3
 801172a:	d80c      	bhi.n	8011746 <etharp_find_entry+0x18a>
            old_stable = i;
 801172c:	8c3b      	ldrh	r3, [r7, #32]
 801172e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011734:	4956      	ldr	r1, [pc, #344]	; (8011890 <etharp_find_entry+0x2d4>)
 8011736:	4613      	mov	r3, r2
 8011738:	005b      	lsls	r3, r3, #1
 801173a:	4413      	add	r3, r2
 801173c:	00db      	lsls	r3, r3, #3
 801173e:	440b      	add	r3, r1
 8011740:	3312      	adds	r3, #18
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011746:	8c3b      	ldrh	r3, [r7, #32]
 8011748:	3301      	adds	r3, #1
 801174a:	b29b      	uxth	r3, r3
 801174c:	843b      	strh	r3, [r7, #32]
 801174e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011752:	2b09      	cmp	r3, #9
 8011754:	f77f af4c 	ble.w	80115f0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011758:	7afb      	ldrb	r3, [r7, #11]
 801175a:	f003 0302 	and.w	r3, r3, #2
 801175e:	2b00      	cmp	r3, #0
 8011760:	d108      	bne.n	8011774 <etharp_find_entry+0x1b8>
 8011762:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011766:	2b0a      	cmp	r3, #10
 8011768:	d107      	bne.n	801177a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801176a:	7afb      	ldrb	r3, [r7, #11]
 801176c:	f003 0301 	and.w	r3, r3, #1
 8011770:	2b00      	cmp	r3, #0
 8011772:	d102      	bne.n	801177a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011778:	e085      	b.n	8011886 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801177a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801177e:	2b09      	cmp	r3, #9
 8011780:	dc02      	bgt.n	8011788 <etharp_find_entry+0x1cc>
    i = empty;
 8011782:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011784:	843b      	strh	r3, [r7, #32]
 8011786:	e039      	b.n	80117fc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011788:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801178c:	2b09      	cmp	r3, #9
 801178e:	dc14      	bgt.n	80117ba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011790:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011792:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011798:	493d      	ldr	r1, [pc, #244]	; (8011890 <etharp_find_entry+0x2d4>)
 801179a:	4613      	mov	r3, r2
 801179c:	005b      	lsls	r3, r3, #1
 801179e:	4413      	add	r3, r2
 80117a0:	00db      	lsls	r3, r3, #3
 80117a2:	440b      	add	r3, r1
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d018      	beq.n	80117dc <etharp_find_entry+0x220>
 80117aa:	4b3a      	ldr	r3, [pc, #232]	; (8011894 <etharp_find_entry+0x2d8>)
 80117ac:	f240 126d 	movw	r2, #365	; 0x16d
 80117b0:	493b      	ldr	r1, [pc, #236]	; (80118a0 <etharp_find_entry+0x2e4>)
 80117b2:	483a      	ldr	r0, [pc, #232]	; (801189c <etharp_find_entry+0x2e0>)
 80117b4:	f002 fda4 	bl	8014300 <iprintf>
 80117b8:	e010      	b.n	80117dc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80117ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80117be:	2b09      	cmp	r3, #9
 80117c0:	dc02      	bgt.n	80117c8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80117c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80117c4:	843b      	strh	r3, [r7, #32]
 80117c6:	e009      	b.n	80117dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80117c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80117cc:	2b09      	cmp	r3, #9
 80117ce:	dc02      	bgt.n	80117d6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80117d0:	8bfb      	ldrh	r3, [r7, #30]
 80117d2:	843b      	strh	r3, [r7, #32]
 80117d4:	e002      	b.n	80117dc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80117d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117da:	e054      	b.n	8011886 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80117dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80117e0:	2b09      	cmp	r3, #9
 80117e2:	dd06      	ble.n	80117f2 <etharp_find_entry+0x236>
 80117e4:	4b2b      	ldr	r3, [pc, #172]	; (8011894 <etharp_find_entry+0x2d8>)
 80117e6:	f240 127f 	movw	r2, #383	; 0x17f
 80117ea:	492e      	ldr	r1, [pc, #184]	; (80118a4 <etharp_find_entry+0x2e8>)
 80117ec:	482b      	ldr	r0, [pc, #172]	; (801189c <etharp_find_entry+0x2e0>)
 80117ee:	f002 fd87 	bl	8014300 <iprintf>
    etharp_free_entry(i);
 80117f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7ff fe06 	bl	8011408 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80117fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011800:	2b09      	cmp	r3, #9
 8011802:	dd06      	ble.n	8011812 <etharp_find_entry+0x256>
 8011804:	4b23      	ldr	r3, [pc, #140]	; (8011894 <etharp_find_entry+0x2d8>)
 8011806:	f240 1283 	movw	r2, #387	; 0x183
 801180a:	4926      	ldr	r1, [pc, #152]	; (80118a4 <etharp_find_entry+0x2e8>)
 801180c:	4823      	ldr	r0, [pc, #140]	; (801189c <etharp_find_entry+0x2e0>)
 801180e:	f002 fd77 	bl	8014300 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011816:	491e      	ldr	r1, [pc, #120]	; (8011890 <etharp_find_entry+0x2d4>)
 8011818:	4613      	mov	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	4413      	add	r3, r2
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	440b      	add	r3, r1
 8011822:	3314      	adds	r3, #20
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d006      	beq.n	8011838 <etharp_find_entry+0x27c>
 801182a:	4b1a      	ldr	r3, [pc, #104]	; (8011894 <etharp_find_entry+0x2d8>)
 801182c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011830:	491d      	ldr	r1, [pc, #116]	; (80118a8 <etharp_find_entry+0x2ec>)
 8011832:	481a      	ldr	r0, [pc, #104]	; (801189c <etharp_find_entry+0x2e0>)
 8011834:	f002 fd64 	bl	8014300 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00b      	beq.n	8011856 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801183e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	6819      	ldr	r1, [r3, #0]
 8011846:	4812      	ldr	r0, [pc, #72]	; (8011890 <etharp_find_entry+0x2d4>)
 8011848:	4613      	mov	r3, r2
 801184a:	005b      	lsls	r3, r3, #1
 801184c:	4413      	add	r3, r2
 801184e:	00db      	lsls	r3, r3, #3
 8011850:	4403      	add	r3, r0
 8011852:	3304      	adds	r3, #4
 8011854:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011856:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801185a:	490d      	ldr	r1, [pc, #52]	; (8011890 <etharp_find_entry+0x2d4>)
 801185c:	4613      	mov	r3, r2
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	4413      	add	r3, r2
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	440b      	add	r3, r1
 8011866:	3312      	adds	r3, #18
 8011868:	2200      	movs	r2, #0
 801186a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801186c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011870:	4907      	ldr	r1, [pc, #28]	; (8011890 <etharp_find_entry+0x2d4>)
 8011872:	4613      	mov	r3, r2
 8011874:	005b      	lsls	r3, r3, #1
 8011876:	4413      	add	r3, r2
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	440b      	add	r3, r1
 801187c:	3308      	adds	r3, #8
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3728      	adds	r7, #40	; 0x28
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	2000c584 	.word	0x2000c584
 8011894:	0801784c 	.word	0x0801784c
 8011898:	08017884 	.word	0x08017884
 801189c:	080178c4 	.word	0x080178c4
 80118a0:	080178ec 	.word	0x080178ec
 80118a4:	08017904 	.word	0x08017904
 80118a8:	08017918 	.word	0x08017918

080118ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b088      	sub	sp, #32
 80118b0:	af02      	add	r7, sp, #8
 80118b2:	60f8      	str	r0, [r7, #12]
 80118b4:	60b9      	str	r1, [r7, #8]
 80118b6:	607a      	str	r2, [r7, #4]
 80118b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80118c0:	2b06      	cmp	r3, #6
 80118c2:	d006      	beq.n	80118d2 <etharp_update_arp_entry+0x26>
 80118c4:	4b48      	ldr	r3, [pc, #288]	; (80119e8 <etharp_update_arp_entry+0x13c>)
 80118c6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80118ca:	4948      	ldr	r1, [pc, #288]	; (80119ec <etharp_update_arp_entry+0x140>)
 80118cc:	4848      	ldr	r0, [pc, #288]	; (80119f0 <etharp_update_arp_entry+0x144>)
 80118ce:	f002 fd17 	bl	8014300 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d012      	beq.n	80118fe <etharp_update_arp_entry+0x52>
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00e      	beq.n	80118fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80118e0:	68bb      	ldr	r3, [r7, #8]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	68f9      	ldr	r1, [r7, #12]
 80118e6:	4618      	mov	r0, r3
 80118e8:	f001 f920 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 80118ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d105      	bne.n	80118fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80118fa:	2be0      	cmp	r3, #224	; 0xe0
 80118fc:	d102      	bne.n	8011904 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80118fe:	f06f 030f 	mvn.w	r3, #15
 8011902:	e06c      	b.n	80119de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011904:	78fb      	ldrb	r3, [r7, #3]
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	4619      	mov	r1, r3
 801190a:	68b8      	ldr	r0, [r7, #8]
 801190c:	f7ff fe56 	bl	80115bc <etharp_find_entry>
 8011910:	4603      	mov	r3, r0
 8011912:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011918:	2b00      	cmp	r3, #0
 801191a:	da02      	bge.n	8011922 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801191c:	8afb      	ldrh	r3, [r7, #22]
 801191e:	b25b      	sxtb	r3, r3
 8011920:	e05d      	b.n	80119de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011922:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011926:	4933      	ldr	r1, [pc, #204]	; (80119f4 <etharp_update_arp_entry+0x148>)
 8011928:	4613      	mov	r3, r2
 801192a:	005b      	lsls	r3, r3, #1
 801192c:	4413      	add	r3, r2
 801192e:	00db      	lsls	r3, r3, #3
 8011930:	440b      	add	r3, r1
 8011932:	3314      	adds	r3, #20
 8011934:	2202      	movs	r2, #2
 8011936:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011938:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801193c:	492d      	ldr	r1, [pc, #180]	; (80119f4 <etharp_update_arp_entry+0x148>)
 801193e:	4613      	mov	r3, r2
 8011940:	005b      	lsls	r3, r3, #1
 8011942:	4413      	add	r3, r2
 8011944:	00db      	lsls	r3, r3, #3
 8011946:	440b      	add	r3, r1
 8011948:	3308      	adds	r3, #8
 801194a:	68fa      	ldr	r2, [r7, #12]
 801194c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801194e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011952:	4613      	mov	r3, r2
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	4413      	add	r3, r2
 8011958:	00db      	lsls	r3, r3, #3
 801195a:	3308      	adds	r3, #8
 801195c:	4a25      	ldr	r2, [pc, #148]	; (80119f4 <etharp_update_arp_entry+0x148>)
 801195e:	4413      	add	r3, r2
 8011960:	3304      	adds	r3, #4
 8011962:	2206      	movs	r2, #6
 8011964:	6879      	ldr	r1, [r7, #4]
 8011966:	4618      	mov	r0, r3
 8011968:	f002 fe0b 	bl	8014582 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801196c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011970:	4920      	ldr	r1, [pc, #128]	; (80119f4 <etharp_update_arp_entry+0x148>)
 8011972:	4613      	mov	r3, r2
 8011974:	005b      	lsls	r3, r3, #1
 8011976:	4413      	add	r3, r2
 8011978:	00db      	lsls	r3, r3, #3
 801197a:	440b      	add	r3, r1
 801197c:	3312      	adds	r3, #18
 801197e:	2200      	movs	r2, #0
 8011980:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011982:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011986:	491b      	ldr	r1, [pc, #108]	; (80119f4 <etharp_update_arp_entry+0x148>)
 8011988:	4613      	mov	r3, r2
 801198a:	005b      	lsls	r3, r3, #1
 801198c:	4413      	add	r3, r2
 801198e:	00db      	lsls	r3, r3, #3
 8011990:	440b      	add	r3, r1
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d021      	beq.n	80119dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011998:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801199c:	4915      	ldr	r1, [pc, #84]	; (80119f4 <etharp_update_arp_entry+0x148>)
 801199e:	4613      	mov	r3, r2
 80119a0:	005b      	lsls	r3, r3, #1
 80119a2:	4413      	add	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	440b      	add	r3, r1
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80119ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80119b0:	4910      	ldr	r1, [pc, #64]	; (80119f4 <etharp_update_arp_entry+0x148>)
 80119b2:	4613      	mov	r3, r2
 80119b4:	005b      	lsls	r3, r3, #1
 80119b6:	4413      	add	r3, r2
 80119b8:	00db      	lsls	r3, r3, #3
 80119ba:	440b      	add	r3, r1
 80119bc:	2200      	movs	r2, #0
 80119be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80119c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119ca:	9300      	str	r3, [sp, #0]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6939      	ldr	r1, [r7, #16]
 80119d0:	68f8      	ldr	r0, [r7, #12]
 80119d2:	f001 ffb9 	bl	8013948 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80119d6:	6938      	ldr	r0, [r7, #16]
 80119d8:	f7f7 fc48 	bl	800926c <pbuf_free>
  }
  return ERR_OK;
 80119dc:	2300      	movs	r3, #0
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3718      	adds	r7, #24
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	0801784c 	.word	0x0801784c
 80119ec:	08017944 	.word	0x08017944
 80119f0:	080178c4 	.word	0x080178c4
 80119f4:	2000c584 	.word	0x2000c584

080119f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a00:	2300      	movs	r3, #0
 8011a02:	60fb      	str	r3, [r7, #12]
 8011a04:	e01e      	b.n	8011a44 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011a06:	4913      	ldr	r1, [pc, #76]	; (8011a54 <etharp_cleanup_netif+0x5c>)
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	4613      	mov	r3, r2
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	4413      	add	r3, r2
 8011a10:	00db      	lsls	r3, r3, #3
 8011a12:	440b      	add	r3, r1
 8011a14:	3314      	adds	r3, #20
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011a1a:	7afb      	ldrb	r3, [r7, #11]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00e      	beq.n	8011a3e <etharp_cleanup_netif+0x46>
 8011a20:	490c      	ldr	r1, [pc, #48]	; (8011a54 <etharp_cleanup_netif+0x5c>)
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	4613      	mov	r3, r2
 8011a26:	005b      	lsls	r3, r3, #1
 8011a28:	4413      	add	r3, r2
 8011a2a:	00db      	lsls	r3, r3, #3
 8011a2c:	440b      	add	r3, r1
 8011a2e:	3308      	adds	r3, #8
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d102      	bne.n	8011a3e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f7ff fce5 	bl	8011408 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	3301      	adds	r3, #1
 8011a42:	60fb      	str	r3, [r7, #12]
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2b09      	cmp	r3, #9
 8011a48:	dddd      	ble.n	8011a06 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011a4a:	bf00      	nop
 8011a4c:	bf00      	nop
 8011a4e:	3710      	adds	r7, #16
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	2000c584 	.word	0x2000c584

08011a58 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011a58:	b5b0      	push	{r4, r5, r7, lr}
 8011a5a:	b08a      	sub	sp, #40	; 0x28
 8011a5c:	af04      	add	r7, sp, #16
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d107      	bne.n	8011a78 <etharp_input+0x20>
 8011a68:	4b3f      	ldr	r3, [pc, #252]	; (8011b68 <etharp_input+0x110>)
 8011a6a:	f240 228a 	movw	r2, #650	; 0x28a
 8011a6e:	493f      	ldr	r1, [pc, #252]	; (8011b6c <etharp_input+0x114>)
 8011a70:	483f      	ldr	r0, [pc, #252]	; (8011b70 <etharp_input+0x118>)
 8011a72:	f002 fc45 	bl	8014300 <iprintf>
 8011a76:	e074      	b.n	8011b62 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a88:	d10c      	bne.n	8011aa4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011a8e:	2b06      	cmp	r3, #6
 8011a90:	d108      	bne.n	8011aa4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011a96:	2b04      	cmp	r3, #4
 8011a98:	d104      	bne.n	8011aa4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	885b      	ldrh	r3, [r3, #2]
 8011a9e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011aa0:	2b08      	cmp	r3, #8
 8011aa2:	d003      	beq.n	8011aac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7f7 fbe1 	bl	800926c <pbuf_free>
    return;
 8011aaa:	e05a      	b.n	8011b62 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	330e      	adds	r3, #14
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	3318      	adds	r3, #24
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	3304      	adds	r3, #4
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d102      	bne.n	8011acc <etharp_input+0x74>
    for_us = 0;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	75fb      	strb	r3, [r7, #23]
 8011aca:	e009      	b.n	8011ae0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011acc:	68ba      	ldr	r2, [r7, #8]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	bf0c      	ite	eq
 8011ad8:	2301      	moveq	r3, #1
 8011ada:	2300      	movne	r3, #0
 8011adc:	b2db      	uxtb	r3, r3
 8011ade:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	f103 0208 	add.w	r2, r3, #8
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <etharp_input+0x98>
 8011aec:	2301      	movs	r3, #1
 8011aee:	e000      	b.n	8011af2 <etharp_input+0x9a>
 8011af0:	2302      	movs	r3, #2
 8011af2:	f107 010c 	add.w	r1, r7, #12
 8011af6:	6838      	ldr	r0, [r7, #0]
 8011af8:	f7ff fed8 	bl	80118ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	88db      	ldrh	r3, [r3, #6]
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b06:	d003      	beq.n	8011b10 <etharp_input+0xb8>
 8011b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b0c:	d01e      	beq.n	8011b4c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011b0e:	e025      	b.n	8011b5c <etharp_input+0x104>
      if (for_us) {
 8011b10:	7dfb      	ldrb	r3, [r7, #23]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d021      	beq.n	8011b5a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011b2c:	693a      	ldr	r2, [r7, #16]
 8011b2e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011b30:	2102      	movs	r1, #2
 8011b32:	9103      	str	r1, [sp, #12]
 8011b34:	f107 010c 	add.w	r1, r7, #12
 8011b38:	9102      	str	r1, [sp, #8]
 8011b3a:	9201      	str	r2, [sp, #4]
 8011b3c:	9300      	str	r3, [sp, #0]
 8011b3e:	462b      	mov	r3, r5
 8011b40:	4622      	mov	r2, r4
 8011b42:	4601      	mov	r1, r0
 8011b44:	6838      	ldr	r0, [r7, #0]
 8011b46:	f000 faef 	bl	8012128 <etharp_raw>
      break;
 8011b4a:	e006      	b.n	8011b5a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011b4c:	f107 030c 	add.w	r3, r7, #12
 8011b50:	4619      	mov	r1, r3
 8011b52:	6838      	ldr	r0, [r7, #0]
 8011b54:	f7fe f9fc 	bl	800ff50 <dhcp_arp_reply>
      break;
 8011b58:	e000      	b.n	8011b5c <etharp_input+0x104>
      break;
 8011b5a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7f7 fb85 	bl	800926c <pbuf_free>
}
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bdb0      	pop	{r4, r5, r7, pc}
 8011b68:	0801784c 	.word	0x0801784c
 8011b6c:	0801799c 	.word	0x0801799c
 8011b70:	080178c4 	.word	0x080178c4

08011b74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af02      	add	r7, sp, #8
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	4613      	mov	r3, r2
 8011b80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011b82:	79fa      	ldrb	r2, [r7, #7]
 8011b84:	4944      	ldr	r1, [pc, #272]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011b86:	4613      	mov	r3, r2
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	4413      	add	r3, r2
 8011b8c:	00db      	lsls	r3, r3, #3
 8011b8e:	440b      	add	r3, r1
 8011b90:	3314      	adds	r3, #20
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d806      	bhi.n	8011ba6 <etharp_output_to_arp_index+0x32>
 8011b98:	4b40      	ldr	r3, [pc, #256]	; (8011c9c <etharp_output_to_arp_index+0x128>)
 8011b9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011b9e:	4940      	ldr	r1, [pc, #256]	; (8011ca0 <etharp_output_to_arp_index+0x12c>)
 8011ba0:	4840      	ldr	r0, [pc, #256]	; (8011ca4 <etharp_output_to_arp_index+0x130>)
 8011ba2:	f002 fbad 	bl	8014300 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011ba6:	79fa      	ldrb	r2, [r7, #7]
 8011ba8:	493b      	ldr	r1, [pc, #236]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011baa:	4613      	mov	r3, r2
 8011bac:	005b      	lsls	r3, r3, #1
 8011bae:	4413      	add	r3, r2
 8011bb0:	00db      	lsls	r3, r3, #3
 8011bb2:	440b      	add	r3, r1
 8011bb4:	3314      	adds	r3, #20
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	d153      	bne.n	8011c64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011bbc:	79fa      	ldrb	r2, [r7, #7]
 8011bbe:	4936      	ldr	r1, [pc, #216]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011bc0:	4613      	mov	r3, r2
 8011bc2:	005b      	lsls	r3, r3, #1
 8011bc4:	4413      	add	r3, r2
 8011bc6:	00db      	lsls	r3, r3, #3
 8011bc8:	440b      	add	r3, r1
 8011bca:	3312      	adds	r3, #18
 8011bcc:	881b      	ldrh	r3, [r3, #0]
 8011bce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011bd2:	d919      	bls.n	8011c08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011bd4:	79fa      	ldrb	r2, [r7, #7]
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	4413      	add	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	4a2e      	ldr	r2, [pc, #184]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011be0:	4413      	add	r3, r2
 8011be2:	3304      	adds	r3, #4
 8011be4:	4619      	mov	r1, r3
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f000 fb4c 	bl	8012284 <etharp_request>
 8011bec:	4603      	mov	r3, r0
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d138      	bne.n	8011c64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011bf2:	79fa      	ldrb	r2, [r7, #7]
 8011bf4:	4928      	ldr	r1, [pc, #160]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011bf6:	4613      	mov	r3, r2
 8011bf8:	005b      	lsls	r3, r3, #1
 8011bfa:	4413      	add	r3, r2
 8011bfc:	00db      	lsls	r3, r3, #3
 8011bfe:	440b      	add	r3, r1
 8011c00:	3314      	adds	r3, #20
 8011c02:	2203      	movs	r2, #3
 8011c04:	701a      	strb	r2, [r3, #0]
 8011c06:	e02d      	b.n	8011c64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011c08:	79fa      	ldrb	r2, [r7, #7]
 8011c0a:	4923      	ldr	r1, [pc, #140]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	005b      	lsls	r3, r3, #1
 8011c10:	4413      	add	r3, r2
 8011c12:	00db      	lsls	r3, r3, #3
 8011c14:	440b      	add	r3, r1
 8011c16:	3312      	adds	r3, #18
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011c1e:	d321      	bcc.n	8011c64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011c20:	79fa      	ldrb	r2, [r7, #7]
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	4a1b      	ldr	r2, [pc, #108]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011c2c:	4413      	add	r3, r2
 8011c2e:	1d19      	adds	r1, r3, #4
 8011c30:	79fa      	ldrb	r2, [r7, #7]
 8011c32:	4613      	mov	r3, r2
 8011c34:	005b      	lsls	r3, r3, #1
 8011c36:	4413      	add	r3, r2
 8011c38:	00db      	lsls	r3, r3, #3
 8011c3a:	3308      	adds	r3, #8
 8011c3c:	4a16      	ldr	r2, [pc, #88]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011c3e:	4413      	add	r3, r2
 8011c40:	3304      	adds	r3, #4
 8011c42:	461a      	mov	r2, r3
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f000 fafb 	bl	8012240 <etharp_request_dst>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d109      	bne.n	8011c64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011c50:	79fa      	ldrb	r2, [r7, #7]
 8011c52:	4911      	ldr	r1, [pc, #68]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011c54:	4613      	mov	r3, r2
 8011c56:	005b      	lsls	r3, r3, #1
 8011c58:	4413      	add	r3, r2
 8011c5a:	00db      	lsls	r3, r3, #3
 8011c5c:	440b      	add	r3, r1
 8011c5e:	3314      	adds	r3, #20
 8011c60:	2203      	movs	r2, #3
 8011c62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011c6a:	79fa      	ldrb	r2, [r7, #7]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	005b      	lsls	r3, r3, #1
 8011c70:	4413      	add	r3, r2
 8011c72:	00db      	lsls	r3, r3, #3
 8011c74:	3308      	adds	r3, #8
 8011c76:	4a08      	ldr	r2, [pc, #32]	; (8011c98 <etharp_output_to_arp_index+0x124>)
 8011c78:	4413      	add	r3, r2
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011c80:	9200      	str	r2, [sp, #0]
 8011c82:	460a      	mov	r2, r1
 8011c84:	68b9      	ldr	r1, [r7, #8]
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	f001 fe5e 	bl	8013948 <ethernet_output>
 8011c8c:	4603      	mov	r3, r0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3710      	adds	r7, #16
 8011c92:	46bd      	mov	sp, r7
 8011c94:	bd80      	pop	{r7, pc}
 8011c96:	bf00      	nop
 8011c98:	2000c584 	.word	0x2000c584
 8011c9c:	0801784c 	.word	0x0801784c
 8011ca0:	080179bc 	.word	0x080179bc
 8011ca4:	080178c4 	.word	0x080178c4

08011ca8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b08a      	sub	sp, #40	; 0x28
 8011cac:	af02      	add	r7, sp, #8
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d106      	bne.n	8011ccc <etharp_output+0x24>
 8011cbe:	4b73      	ldr	r3, [pc, #460]	; (8011e8c <etharp_output+0x1e4>)
 8011cc0:	f240 321e 	movw	r2, #798	; 0x31e
 8011cc4:	4972      	ldr	r1, [pc, #456]	; (8011e90 <etharp_output+0x1e8>)
 8011cc6:	4873      	ldr	r0, [pc, #460]	; (8011e94 <etharp_output+0x1ec>)
 8011cc8:	f002 fb1a 	bl	8014300 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d106      	bne.n	8011ce0 <etharp_output+0x38>
 8011cd2:	4b6e      	ldr	r3, [pc, #440]	; (8011e8c <etharp_output+0x1e4>)
 8011cd4:	f240 321f 	movw	r2, #799	; 0x31f
 8011cd8:	496f      	ldr	r1, [pc, #444]	; (8011e98 <etharp_output+0x1f0>)
 8011cda:	486e      	ldr	r0, [pc, #440]	; (8011e94 <etharp_output+0x1ec>)
 8011cdc:	f002 fb10 	bl	8014300 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d106      	bne.n	8011cf4 <etharp_output+0x4c>
 8011ce6:	4b69      	ldr	r3, [pc, #420]	; (8011e8c <etharp_output+0x1e4>)
 8011ce8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011cec:	496b      	ldr	r1, [pc, #428]	; (8011e9c <etharp_output+0x1f4>)
 8011cee:	4869      	ldr	r0, [pc, #420]	; (8011e94 <etharp_output+0x1ec>)
 8011cf0:	f002 fb06 	bl	8014300 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68f9      	ldr	r1, [r7, #12]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	f000 ff16 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 8011d00:	4603      	mov	r3, r0
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d002      	beq.n	8011d0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011d06:	4b66      	ldr	r3, [pc, #408]	; (8011ea0 <etharp_output+0x1f8>)
 8011d08:	61fb      	str	r3, [r7, #28]
 8011d0a:	e0af      	b.n	8011e6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d14:	2be0      	cmp	r3, #224	; 0xe0
 8011d16:	d118      	bne.n	8011d4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011d18:	2301      	movs	r3, #1
 8011d1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011d20:	235e      	movs	r3, #94	; 0x5e
 8011d22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	3301      	adds	r3, #1
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d2e:	b2db      	uxtb	r3, r3
 8011d30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	3302      	adds	r3, #2
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	3303      	adds	r3, #3
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011d42:	f107 0310 	add.w	r3, r7, #16
 8011d46:	61fb      	str	r3, [r7, #28]
 8011d48:	e090      	b.n	8011e6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681a      	ldr	r2, [r3, #0]
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	3304      	adds	r3, #4
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	405a      	eors	r2, r3
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	3308      	adds	r3, #8
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	4013      	ands	r3, r2
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d012      	beq.n	8011d88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011d68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d00b      	beq.n	8011d88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	330c      	adds	r3, #12
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d003      	beq.n	8011d82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	330c      	adds	r3, #12
 8011d7e:	61bb      	str	r3, [r7, #24]
 8011d80:	e002      	b.n	8011d88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011d82:	f06f 0303 	mvn.w	r3, #3
 8011d86:	e07d      	b.n	8011e84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011d88:	4b46      	ldr	r3, [pc, #280]	; (8011ea4 <etharp_output+0x1fc>)
 8011d8a:	781b      	ldrb	r3, [r3, #0]
 8011d8c:	4619      	mov	r1, r3
 8011d8e:	4a46      	ldr	r2, [pc, #280]	; (8011ea8 <etharp_output+0x200>)
 8011d90:	460b      	mov	r3, r1
 8011d92:	005b      	lsls	r3, r3, #1
 8011d94:	440b      	add	r3, r1
 8011d96:	00db      	lsls	r3, r3, #3
 8011d98:	4413      	add	r3, r2
 8011d9a:	3314      	adds	r3, #20
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d925      	bls.n	8011dee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011da2:	4b40      	ldr	r3, [pc, #256]	; (8011ea4 <etharp_output+0x1fc>)
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	4619      	mov	r1, r3
 8011da8:	4a3f      	ldr	r2, [pc, #252]	; (8011ea8 <etharp_output+0x200>)
 8011daa:	460b      	mov	r3, r1
 8011dac:	005b      	lsls	r3, r3, #1
 8011dae:	440b      	add	r3, r1
 8011db0:	00db      	lsls	r3, r3, #3
 8011db2:	4413      	add	r3, r2
 8011db4:	3308      	adds	r3, #8
 8011db6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	429a      	cmp	r2, r3
 8011dbc:	d117      	bne.n	8011dee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011dbe:	69bb      	ldr	r3, [r7, #24]
 8011dc0:	681a      	ldr	r2, [r3, #0]
 8011dc2:	4b38      	ldr	r3, [pc, #224]	; (8011ea4 <etharp_output+0x1fc>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	4937      	ldr	r1, [pc, #220]	; (8011ea8 <etharp_output+0x200>)
 8011dca:	4603      	mov	r3, r0
 8011dcc:	005b      	lsls	r3, r3, #1
 8011dce:	4403      	add	r3, r0
 8011dd0:	00db      	lsls	r3, r3, #3
 8011dd2:	440b      	add	r3, r1
 8011dd4:	3304      	adds	r3, #4
 8011dd6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d108      	bne.n	8011dee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011ddc:	4b31      	ldr	r3, [pc, #196]	; (8011ea4 <etharp_output+0x1fc>)
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	461a      	mov	r2, r3
 8011de2:	68b9      	ldr	r1, [r7, #8]
 8011de4:	68f8      	ldr	r0, [r7, #12]
 8011de6:	f7ff fec5 	bl	8011b74 <etharp_output_to_arp_index>
 8011dea:	4603      	mov	r3, r0
 8011dec:	e04a      	b.n	8011e84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011dee:	2300      	movs	r3, #0
 8011df0:	75fb      	strb	r3, [r7, #23]
 8011df2:	e031      	b.n	8011e58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011df4:	7dfa      	ldrb	r2, [r7, #23]
 8011df6:	492c      	ldr	r1, [pc, #176]	; (8011ea8 <etharp_output+0x200>)
 8011df8:	4613      	mov	r3, r2
 8011dfa:	005b      	lsls	r3, r3, #1
 8011dfc:	4413      	add	r3, r2
 8011dfe:	00db      	lsls	r3, r3, #3
 8011e00:	440b      	add	r3, r1
 8011e02:	3314      	adds	r3, #20
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b01      	cmp	r3, #1
 8011e08:	d923      	bls.n	8011e52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011e0a:	7dfa      	ldrb	r2, [r7, #23]
 8011e0c:	4926      	ldr	r1, [pc, #152]	; (8011ea8 <etharp_output+0x200>)
 8011e0e:	4613      	mov	r3, r2
 8011e10:	005b      	lsls	r3, r3, #1
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	440b      	add	r3, r1
 8011e18:	3308      	adds	r3, #8
 8011e1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d117      	bne.n	8011e52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011e22:	69bb      	ldr	r3, [r7, #24]
 8011e24:	6819      	ldr	r1, [r3, #0]
 8011e26:	7dfa      	ldrb	r2, [r7, #23]
 8011e28:	481f      	ldr	r0, [pc, #124]	; (8011ea8 <etharp_output+0x200>)
 8011e2a:	4613      	mov	r3, r2
 8011e2c:	005b      	lsls	r3, r3, #1
 8011e2e:	4413      	add	r3, r2
 8011e30:	00db      	lsls	r3, r3, #3
 8011e32:	4403      	add	r3, r0
 8011e34:	3304      	adds	r3, #4
 8011e36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011e38:	4299      	cmp	r1, r3
 8011e3a:	d10a      	bne.n	8011e52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011e3c:	4a19      	ldr	r2, [pc, #100]	; (8011ea4 <etharp_output+0x1fc>)
 8011e3e:	7dfb      	ldrb	r3, [r7, #23]
 8011e40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011e42:	7dfb      	ldrb	r3, [r7, #23]
 8011e44:	461a      	mov	r2, r3
 8011e46:	68b9      	ldr	r1, [r7, #8]
 8011e48:	68f8      	ldr	r0, [r7, #12]
 8011e4a:	f7ff fe93 	bl	8011b74 <etharp_output_to_arp_index>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	e018      	b.n	8011e84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011e52:	7dfb      	ldrb	r3, [r7, #23]
 8011e54:	3301      	adds	r3, #1
 8011e56:	75fb      	strb	r3, [r7, #23]
 8011e58:	7dfb      	ldrb	r3, [r7, #23]
 8011e5a:	2b09      	cmp	r3, #9
 8011e5c:	d9ca      	bls.n	8011df4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011e5e:	68ba      	ldr	r2, [r7, #8]
 8011e60:	69b9      	ldr	r1, [r7, #24]
 8011e62:	68f8      	ldr	r0, [r7, #12]
 8011e64:	f000 f822 	bl	8011eac <etharp_query>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	e00b      	b.n	8011e84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011e72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e76:	9300      	str	r3, [sp, #0]
 8011e78:	69fb      	ldr	r3, [r7, #28]
 8011e7a:	68b9      	ldr	r1, [r7, #8]
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f001 fd63 	bl	8013948 <ethernet_output>
 8011e82:	4603      	mov	r3, r0
}
 8011e84:	4618      	mov	r0, r3
 8011e86:	3720      	adds	r7, #32
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}
 8011e8c:	0801784c 	.word	0x0801784c
 8011e90:	0801799c 	.word	0x0801799c
 8011e94:	080178c4 	.word	0x080178c4
 8011e98:	080179ec 	.word	0x080179ec
 8011e9c:	0801798c 	.word	0x0801798c
 8011ea0:	0801805c 	.word	0x0801805c
 8011ea4:	2000c674 	.word	0x2000c674
 8011ea8:	2000c584 	.word	0x2000c584

08011eac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011eac:	b580      	push	{r7, lr}
 8011eae:	b08c      	sub	sp, #48	; 0x30
 8011eb0:	af02      	add	r7, sp, #8
 8011eb2:	60f8      	str	r0, [r7, #12]
 8011eb4:	60b9      	str	r1, [r7, #8]
 8011eb6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	332a      	adds	r3, #42	; 0x2a
 8011ebc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8011ebe:	23ff      	movs	r3, #255	; 0xff
 8011ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ec8:	68bb      	ldr	r3, [r7, #8]
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	68f9      	ldr	r1, [r7, #12]
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f000 fe2c 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d10c      	bne.n	8011ef4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ee2:	2be0      	cmp	r3, #224	; 0xe0
 8011ee4:	d006      	beq.n	8011ef4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d003      	beq.n	8011ef4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d102      	bne.n	8011efa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011ef4:	f06f 030f 	mvn.w	r3, #15
 8011ef8:	e101      	b.n	80120fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011efa:	68fa      	ldr	r2, [r7, #12]
 8011efc:	2101      	movs	r1, #1
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f7ff fb5c 	bl	80115bc <etharp_find_entry>
 8011f04:	4603      	mov	r3, r0
 8011f06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8011f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da02      	bge.n	8011f16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8011f10:	8a7b      	ldrh	r3, [r7, #18]
 8011f12:	b25b      	sxtb	r3, r3
 8011f14:	e0f3      	b.n	80120fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8011f16:	8a7b      	ldrh	r3, [r7, #18]
 8011f18:	2b7e      	cmp	r3, #126	; 0x7e
 8011f1a:	d906      	bls.n	8011f2a <etharp_query+0x7e>
 8011f1c:	4b7a      	ldr	r3, [pc, #488]	; (8012108 <etharp_query+0x25c>)
 8011f1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8011f22:	497a      	ldr	r1, [pc, #488]	; (801210c <etharp_query+0x260>)
 8011f24:	487a      	ldr	r0, [pc, #488]	; (8012110 <etharp_query+0x264>)
 8011f26:	f002 f9eb 	bl	8014300 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8011f2a:	8a7b      	ldrh	r3, [r7, #18]
 8011f2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011f2e:	7c7a      	ldrb	r2, [r7, #17]
 8011f30:	4978      	ldr	r1, [pc, #480]	; (8012114 <etharp_query+0x268>)
 8011f32:	4613      	mov	r3, r2
 8011f34:	005b      	lsls	r3, r3, #1
 8011f36:	4413      	add	r3, r2
 8011f38:	00db      	lsls	r3, r3, #3
 8011f3a:	440b      	add	r3, r1
 8011f3c:	3314      	adds	r3, #20
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d115      	bne.n	8011f70 <etharp_query+0xc4>
    is_new_entry = 1;
 8011f44:	2301      	movs	r3, #1
 8011f46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011f48:	7c7a      	ldrb	r2, [r7, #17]
 8011f4a:	4972      	ldr	r1, [pc, #456]	; (8012114 <etharp_query+0x268>)
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	005b      	lsls	r3, r3, #1
 8011f50:	4413      	add	r3, r2
 8011f52:	00db      	lsls	r3, r3, #3
 8011f54:	440b      	add	r3, r1
 8011f56:	3314      	adds	r3, #20
 8011f58:	2201      	movs	r2, #1
 8011f5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011f5c:	7c7a      	ldrb	r2, [r7, #17]
 8011f5e:	496d      	ldr	r1, [pc, #436]	; (8012114 <etharp_query+0x268>)
 8011f60:	4613      	mov	r3, r2
 8011f62:	005b      	lsls	r3, r3, #1
 8011f64:	4413      	add	r3, r2
 8011f66:	00db      	lsls	r3, r3, #3
 8011f68:	440b      	add	r3, r1
 8011f6a:	3308      	adds	r3, #8
 8011f6c:	68fa      	ldr	r2, [r7, #12]
 8011f6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011f70:	7c7a      	ldrb	r2, [r7, #17]
 8011f72:	4968      	ldr	r1, [pc, #416]	; (8012114 <etharp_query+0x268>)
 8011f74:	4613      	mov	r3, r2
 8011f76:	005b      	lsls	r3, r3, #1
 8011f78:	4413      	add	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	440b      	add	r3, r1
 8011f7e:	3314      	adds	r3, #20
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	2b01      	cmp	r3, #1
 8011f84:	d011      	beq.n	8011faa <etharp_query+0xfe>
 8011f86:	7c7a      	ldrb	r2, [r7, #17]
 8011f88:	4962      	ldr	r1, [pc, #392]	; (8012114 <etharp_query+0x268>)
 8011f8a:	4613      	mov	r3, r2
 8011f8c:	005b      	lsls	r3, r3, #1
 8011f8e:	4413      	add	r3, r2
 8011f90:	00db      	lsls	r3, r3, #3
 8011f92:	440b      	add	r3, r1
 8011f94:	3314      	adds	r3, #20
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d806      	bhi.n	8011faa <etharp_query+0xfe>
 8011f9c:	4b5a      	ldr	r3, [pc, #360]	; (8012108 <etharp_query+0x25c>)
 8011f9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011fa2:	495d      	ldr	r1, [pc, #372]	; (8012118 <etharp_query+0x26c>)
 8011fa4:	485a      	ldr	r0, [pc, #360]	; (8012110 <etharp_query+0x264>)
 8011fa6:	f002 f9ab 	bl	8014300 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011faa:	6a3b      	ldr	r3, [r7, #32]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <etharp_query+0x10a>
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d10c      	bne.n	8011fd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011fb6:	68b9      	ldr	r1, [r7, #8]
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f000 f963 	bl	8012284 <etharp_request>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d102      	bne.n	8011fd0 <etharp_query+0x124>
      return result;
 8011fca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011fce:	e096      	b.n	80120fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d106      	bne.n	8011fe4 <etharp_query+0x138>
 8011fd6:	4b4c      	ldr	r3, [pc, #304]	; (8012108 <etharp_query+0x25c>)
 8011fd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011fdc:	494f      	ldr	r1, [pc, #316]	; (801211c <etharp_query+0x270>)
 8011fde:	484c      	ldr	r0, [pc, #304]	; (8012110 <etharp_query+0x264>)
 8011fe0:	f002 f98e 	bl	8014300 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011fe4:	7c7a      	ldrb	r2, [r7, #17]
 8011fe6:	494b      	ldr	r1, [pc, #300]	; (8012114 <etharp_query+0x268>)
 8011fe8:	4613      	mov	r3, r2
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	4413      	add	r3, r2
 8011fee:	00db      	lsls	r3, r3, #3
 8011ff0:	440b      	add	r3, r1
 8011ff2:	3314      	adds	r3, #20
 8011ff4:	781b      	ldrb	r3, [r3, #0]
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d917      	bls.n	801202a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011ffa:	4a49      	ldr	r2, [pc, #292]	; (8012120 <etharp_query+0x274>)
 8011ffc:	7c7b      	ldrb	r3, [r7, #17]
 8011ffe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012000:	7c7a      	ldrb	r2, [r7, #17]
 8012002:	4613      	mov	r3, r2
 8012004:	005b      	lsls	r3, r3, #1
 8012006:	4413      	add	r3, r2
 8012008:	00db      	lsls	r3, r3, #3
 801200a:	3308      	adds	r3, #8
 801200c:	4a41      	ldr	r2, [pc, #260]	; (8012114 <etharp_query+0x268>)
 801200e:	4413      	add	r3, r2
 8012010:	3304      	adds	r3, #4
 8012012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012016:	9200      	str	r2, [sp, #0]
 8012018:	697a      	ldr	r2, [r7, #20]
 801201a:	6879      	ldr	r1, [r7, #4]
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f001 fc93 	bl	8013948 <ethernet_output>
 8012022:	4603      	mov	r3, r0
 8012024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012028:	e067      	b.n	80120fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801202a:	7c7a      	ldrb	r2, [r7, #17]
 801202c:	4939      	ldr	r1, [pc, #228]	; (8012114 <etharp_query+0x268>)
 801202e:	4613      	mov	r3, r2
 8012030:	005b      	lsls	r3, r3, #1
 8012032:	4413      	add	r3, r2
 8012034:	00db      	lsls	r3, r3, #3
 8012036:	440b      	add	r3, r1
 8012038:	3314      	adds	r3, #20
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d15c      	bne.n	80120fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012048:	e01c      	b.n	8012084 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801204a:	69fb      	ldr	r3, [r7, #28]
 801204c:	895a      	ldrh	r2, [r3, #10]
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	891b      	ldrh	r3, [r3, #8]
 8012052:	429a      	cmp	r2, r3
 8012054:	d10a      	bne.n	801206c <etharp_query+0x1c0>
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d006      	beq.n	801206c <etharp_query+0x1c0>
 801205e:	4b2a      	ldr	r3, [pc, #168]	; (8012108 <etharp_query+0x25c>)
 8012060:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012064:	492f      	ldr	r1, [pc, #188]	; (8012124 <etharp_query+0x278>)
 8012066:	482a      	ldr	r0, [pc, #168]	; (8012110 <etharp_query+0x264>)
 8012068:	f002 f94a 	bl	8014300 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	7b1b      	ldrb	r3, [r3, #12]
 8012070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <etharp_query+0x1d2>
        copy_needed = 1;
 8012078:	2301      	movs	r3, #1
 801207a:	61bb      	str	r3, [r7, #24]
        break;
 801207c:	e005      	b.n	801208a <etharp_query+0x1de>
      }
      p = p->next;
 801207e:	69fb      	ldr	r3, [r7, #28]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d1df      	bne.n	801204a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d007      	beq.n	80120a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012090:	687a      	ldr	r2, [r7, #4]
 8012092:	f44f 7120 	mov.w	r1, #640	; 0x280
 8012096:	200e      	movs	r0, #14
 8012098:	f7f7 fb60 	bl	800975c <pbuf_clone>
 801209c:	61f8      	str	r0, [r7, #28]
 801209e:	e004      	b.n	80120aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80120a4:	69f8      	ldr	r0, [r7, #28]
 80120a6:	f7f7 f987 	bl	80093b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80120aa:	69fb      	ldr	r3, [r7, #28]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d021      	beq.n	80120f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80120b0:	7c7a      	ldrb	r2, [r7, #17]
 80120b2:	4918      	ldr	r1, [pc, #96]	; (8012114 <etharp_query+0x268>)
 80120b4:	4613      	mov	r3, r2
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	4413      	add	r3, r2
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	440b      	add	r3, r1
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d00a      	beq.n	80120da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80120c4:	7c7a      	ldrb	r2, [r7, #17]
 80120c6:	4913      	ldr	r1, [pc, #76]	; (8012114 <etharp_query+0x268>)
 80120c8:	4613      	mov	r3, r2
 80120ca:	005b      	lsls	r3, r3, #1
 80120cc:	4413      	add	r3, r2
 80120ce:	00db      	lsls	r3, r3, #3
 80120d0:	440b      	add	r3, r1
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7f7 f8c9 	bl	800926c <pbuf_free>
      }
      arp_table[i].q = p;
 80120da:	7c7a      	ldrb	r2, [r7, #17]
 80120dc:	490d      	ldr	r1, [pc, #52]	; (8012114 <etharp_query+0x268>)
 80120de:	4613      	mov	r3, r2
 80120e0:	005b      	lsls	r3, r3, #1
 80120e2:	4413      	add	r3, r2
 80120e4:	00db      	lsls	r3, r3, #3
 80120e6:	440b      	add	r3, r1
 80120e8:	69fa      	ldr	r2, [r7, #28]
 80120ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80120ec:	2300      	movs	r3, #0
 80120ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80120f2:	e002      	b.n	80120fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80120f4:	23ff      	movs	r3, #255	; 0xff
 80120f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80120fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3728      	adds	r7, #40	; 0x28
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	0801784c 	.word	0x0801784c
 801210c:	080179f8 	.word	0x080179f8
 8012110:	080178c4 	.word	0x080178c4
 8012114:	2000c584 	.word	0x2000c584
 8012118:	08017a08 	.word	0x08017a08
 801211c:	080179ec 	.word	0x080179ec
 8012120:	2000c674 	.word	0x2000c674
 8012124:	08017a30 	.word	0x08017a30

08012128 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b08a      	sub	sp, #40	; 0x28
 801212c:	af02      	add	r7, sp, #8
 801212e:	60f8      	str	r0, [r7, #12]
 8012130:	60b9      	str	r1, [r7, #8]
 8012132:	607a      	str	r2, [r7, #4]
 8012134:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012136:	2300      	movs	r3, #0
 8012138:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d106      	bne.n	801214e <etharp_raw+0x26>
 8012140:	4b3a      	ldr	r3, [pc, #232]	; (801222c <etharp_raw+0x104>)
 8012142:	f240 4257 	movw	r2, #1111	; 0x457
 8012146:	493a      	ldr	r1, [pc, #232]	; (8012230 <etharp_raw+0x108>)
 8012148:	483a      	ldr	r0, [pc, #232]	; (8012234 <etharp_raw+0x10c>)
 801214a:	f002 f8d9 	bl	8014300 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801214e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012152:	211c      	movs	r1, #28
 8012154:	200e      	movs	r0, #14
 8012156:	f7f6 fda5 	bl	8008ca4 <pbuf_alloc>
 801215a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801215c:	69bb      	ldr	r3, [r7, #24]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012166:	e05d      	b.n	8012224 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012168:	69bb      	ldr	r3, [r7, #24]
 801216a:	895b      	ldrh	r3, [r3, #10]
 801216c:	2b1b      	cmp	r3, #27
 801216e:	d806      	bhi.n	801217e <etharp_raw+0x56>
 8012170:	4b2e      	ldr	r3, [pc, #184]	; (801222c <etharp_raw+0x104>)
 8012172:	f240 4262 	movw	r2, #1122	; 0x462
 8012176:	4930      	ldr	r1, [pc, #192]	; (8012238 <etharp_raw+0x110>)
 8012178:	482e      	ldr	r0, [pc, #184]	; (8012234 <etharp_raw+0x10c>)
 801217a:	f002 f8c1 	bl	8014300 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012184:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012186:	4618      	mov	r0, r3
 8012188:	f7f5 fc72 	bl	8007a70 <lwip_htons>
 801218c:	4603      	mov	r3, r0
 801218e:	461a      	mov	r2, r3
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801219a:	2b06      	cmp	r3, #6
 801219c:	d006      	beq.n	80121ac <etharp_raw+0x84>
 801219e:	4b23      	ldr	r3, [pc, #140]	; (801222c <etharp_raw+0x104>)
 80121a0:	f240 4269 	movw	r2, #1129	; 0x469
 80121a4:	4925      	ldr	r1, [pc, #148]	; (801223c <etharp_raw+0x114>)
 80121a6:	4823      	ldr	r0, [pc, #140]	; (8012234 <etharp_raw+0x10c>)
 80121a8:	f002 f8aa 	bl	8014300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	3308      	adds	r3, #8
 80121b0:	2206      	movs	r2, #6
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	4618      	mov	r0, r3
 80121b6:	f002 f9e4 	bl	8014582 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	3312      	adds	r3, #18
 80121be:	2206      	movs	r2, #6
 80121c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121c2:	4618      	mov	r0, r3
 80121c4:	f002 f9dd 	bl	8014582 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80121c8:	697b      	ldr	r3, [r7, #20]
 80121ca:	330e      	adds	r3, #14
 80121cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80121ce:	6812      	ldr	r2, [r2, #0]
 80121d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	3318      	adds	r3, #24
 80121d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121d8:	6812      	ldr	r2, [r2, #0]
 80121da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80121dc:	697b      	ldr	r3, [r7, #20]
 80121de:	2200      	movs	r2, #0
 80121e0:	701a      	strb	r2, [r3, #0]
 80121e2:	2200      	movs	r2, #0
 80121e4:	f042 0201 	orr.w	r2, r2, #1
 80121e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	2200      	movs	r2, #0
 80121ee:	f042 0208 	orr.w	r2, r2, #8
 80121f2:	709a      	strb	r2, [r3, #2]
 80121f4:	2200      	movs	r2, #0
 80121f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	2206      	movs	r2, #6
 80121fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2204      	movs	r2, #4
 8012202:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012204:	f640 0306 	movw	r3, #2054	; 0x806
 8012208:	9300      	str	r3, [sp, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	68ba      	ldr	r2, [r7, #8]
 801220e:	69b9      	ldr	r1, [r7, #24]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f001 fb99 	bl	8013948 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012216:	69b8      	ldr	r0, [r7, #24]
 8012218:	f7f7 f828 	bl	800926c <pbuf_free>
  p = NULL;
 801221c:	2300      	movs	r3, #0
 801221e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012220:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012224:	4618      	mov	r0, r3
 8012226:	3720      	adds	r7, #32
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	0801784c 	.word	0x0801784c
 8012230:	0801799c 	.word	0x0801799c
 8012234:	080178c4 	.word	0x080178c4
 8012238:	08017a4c 	.word	0x08017a4c
 801223c:	08017a80 	.word	0x08017a80

08012240 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b088      	sub	sp, #32
 8012244:	af04      	add	r7, sp, #16
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801225c:	2201      	movs	r2, #1
 801225e:	9203      	str	r2, [sp, #12]
 8012260:	68ba      	ldr	r2, [r7, #8]
 8012262:	9202      	str	r2, [sp, #8]
 8012264:	4a06      	ldr	r2, [pc, #24]	; (8012280 <etharp_request_dst+0x40>)
 8012266:	9201      	str	r2, [sp, #4]
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	4603      	mov	r3, r0
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	68f8      	ldr	r0, [r7, #12]
 8012270:	f7ff ff5a 	bl	8012128 <etharp_raw>
 8012274:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012276:	4618      	mov	r0, r3
 8012278:	3710      	adds	r7, #16
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	08018064 	.word	0x08018064

08012284 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b082      	sub	sp, #8
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801228e:	4a05      	ldr	r2, [pc, #20]	; (80122a4 <etharp_request+0x20>)
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f7ff ffd4 	bl	8012240 <etharp_request_dst>
 8012298:	4603      	mov	r3, r0
}
 801229a:	4618      	mov	r0, r3
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	0801805c 	.word	0x0801805c

080122a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b08e      	sub	sp, #56	; 0x38
 80122ac:	af04      	add	r7, sp, #16
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80122b2:	4b79      	ldr	r3, [pc, #484]	; (8012498 <icmp_input+0x1f0>)
 80122b4:	689b      	ldr	r3, [r3, #8]
 80122b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80122b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	f003 030f 	and.w	r3, r3, #15
 80122c0:	b2db      	uxtb	r3, r3
 80122c2:	009b      	lsls	r3, r3, #2
 80122c4:	b2db      	uxtb	r3, r3
 80122c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80122c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122ca:	2b13      	cmp	r3, #19
 80122cc:	f240 80cd 	bls.w	801246a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	895b      	ldrh	r3, [r3, #10]
 80122d4:	2b03      	cmp	r3, #3
 80122d6:	f240 80ca 	bls.w	801246e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80122e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	f000 80b7 	beq.w	801245c <icmp_input+0x1b4>
 80122ee:	2b08      	cmp	r3, #8
 80122f0:	f040 80b7 	bne.w	8012462 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80122f4:	4b69      	ldr	r3, [pc, #420]	; (801249c <icmp_input+0x1f4>)
 80122f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80122f8:	4b67      	ldr	r3, [pc, #412]	; (8012498 <icmp_input+0x1f0>)
 80122fa:	695b      	ldr	r3, [r3, #20]
 80122fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012300:	2be0      	cmp	r3, #224	; 0xe0
 8012302:	f000 80bb 	beq.w	801247c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012306:	4b64      	ldr	r3, [pc, #400]	; (8012498 <icmp_input+0x1f0>)
 8012308:	695b      	ldr	r3, [r3, #20]
 801230a:	4a63      	ldr	r2, [pc, #396]	; (8012498 <icmp_input+0x1f0>)
 801230c:	6812      	ldr	r2, [r2, #0]
 801230e:	4611      	mov	r1, r2
 8012310:	4618      	mov	r0, r3
 8012312:	f000 fc0b 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	f040 80b1 	bne.w	8012480 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	891b      	ldrh	r3, [r3, #8]
 8012322:	2b07      	cmp	r3, #7
 8012324:	f240 80a5 	bls.w	8012472 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012328:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801232a:	330e      	adds	r3, #14
 801232c:	4619      	mov	r1, r3
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f7f6 ff06 	bl	8009140 <pbuf_add_header>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d04b      	beq.n	80123d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	891a      	ldrh	r2, [r3, #8]
 801233e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012340:	4413      	add	r3, r2
 8012342:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	891b      	ldrh	r3, [r3, #8]
 8012348:	8b7a      	ldrh	r2, [r7, #26]
 801234a:	429a      	cmp	r2, r3
 801234c:	f0c0 809a 	bcc.w	8012484 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012350:	8b7b      	ldrh	r3, [r7, #26]
 8012352:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012356:	4619      	mov	r1, r3
 8012358:	200e      	movs	r0, #14
 801235a:	f7f6 fca3 	bl	8008ca4 <pbuf_alloc>
 801235e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	2b00      	cmp	r3, #0
 8012364:	f000 8090 	beq.w	8012488 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	895b      	ldrh	r3, [r3, #10]
 801236c:	461a      	mov	r2, r3
 801236e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012370:	3308      	adds	r3, #8
 8012372:	429a      	cmp	r2, r3
 8012374:	d203      	bcs.n	801237e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012376:	6978      	ldr	r0, [r7, #20]
 8012378:	f7f6 ff78 	bl	800926c <pbuf_free>
          goto icmperr;
 801237c:	e085      	b.n	801248a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012386:	4618      	mov	r0, r3
 8012388:	f002 f8fb 	bl	8014582 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801238c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801238e:	4619      	mov	r1, r3
 8012390:	6978      	ldr	r0, [r7, #20]
 8012392:	f7f6 fee5 	bl	8009160 <pbuf_remove_header>
 8012396:	4603      	mov	r3, r0
 8012398:	2b00      	cmp	r3, #0
 801239a:	d009      	beq.n	80123b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801239c:	4b40      	ldr	r3, [pc, #256]	; (80124a0 <icmp_input+0x1f8>)
 801239e:	22b6      	movs	r2, #182	; 0xb6
 80123a0:	4940      	ldr	r1, [pc, #256]	; (80124a4 <icmp_input+0x1fc>)
 80123a2:	4841      	ldr	r0, [pc, #260]	; (80124a8 <icmp_input+0x200>)
 80123a4:	f001 ffac 	bl	8014300 <iprintf>
          pbuf_free(r);
 80123a8:	6978      	ldr	r0, [r7, #20]
 80123aa:	f7f6 ff5f 	bl	800926c <pbuf_free>
          goto icmperr;
 80123ae:	e06c      	b.n	801248a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80123b0:	6879      	ldr	r1, [r7, #4]
 80123b2:	6978      	ldr	r0, [r7, #20]
 80123b4:	f7f7 f88e 	bl	80094d4 <pbuf_copy>
 80123b8:	4603      	mov	r3, r0
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d003      	beq.n	80123c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80123be:	6978      	ldr	r0, [r7, #20]
 80123c0:	f7f6 ff54 	bl	800926c <pbuf_free>
          goto icmperr;
 80123c4:	e061      	b.n	801248a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7f6 ff50 	bl	800926c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	607b      	str	r3, [r7, #4]
 80123d0:	e00f      	b.n	80123f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80123d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123d4:	330e      	adds	r3, #14
 80123d6:	4619      	mov	r1, r3
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7f6 fec1 	bl	8009160 <pbuf_remove_header>
 80123de:	4603      	mov	r3, r0
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d006      	beq.n	80123f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80123e4:	4b2e      	ldr	r3, [pc, #184]	; (80124a0 <icmp_input+0x1f8>)
 80123e6:	22c7      	movs	r2, #199	; 0xc7
 80123e8:	4930      	ldr	r1, [pc, #192]	; (80124ac <icmp_input+0x204>)
 80123ea:	482f      	ldr	r0, [pc, #188]	; (80124a8 <icmp_input+0x200>)
 80123ec:	f001 ff88 	bl	8014300 <iprintf>
          goto icmperr;
 80123f0:	e04b      	b.n	801248a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	685b      	ldr	r3, [r3, #4]
 80123f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80123f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80123fa:	4619      	mov	r1, r3
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f7f6 fe9f 	bl	8009140 <pbuf_add_header>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d12b      	bne.n	8012460 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	681a      	ldr	r2, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012416:	4b20      	ldr	r3, [pc, #128]	; (8012498 <icmp_input+0x1f0>)
 8012418:	691a      	ldr	r2, [r3, #16]
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801241e:	693b      	ldr	r3, [r7, #16]
 8012420:	2200      	movs	r2, #0
 8012422:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	2200      	movs	r2, #0
 8012428:	709a      	strb	r2, [r3, #2]
 801242a:	2200      	movs	r2, #0
 801242c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	22ff      	movs	r2, #255	; 0xff
 8012432:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2200      	movs	r2, #0
 8012438:	729a      	strb	r2, [r3, #10]
 801243a:	2200      	movs	r2, #0
 801243c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	9302      	str	r3, [sp, #8]
 8012442:	2301      	movs	r3, #1
 8012444:	9301      	str	r3, [sp, #4]
 8012446:	2300      	movs	r3, #0
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	23ff      	movs	r3, #255	; 0xff
 801244c:	2200      	movs	r2, #0
 801244e:	69f9      	ldr	r1, [r7, #28]
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 fa93 	bl	801297c <ip4_output_if>
 8012456:	4603      	mov	r3, r0
 8012458:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801245a:	e001      	b.n	8012460 <icmp_input+0x1b8>
      break;
 801245c:	bf00      	nop
 801245e:	e000      	b.n	8012462 <icmp_input+0x1ba>
      break;
 8012460:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7f6 ff02 	bl	800926c <pbuf_free>
  return;
 8012468:	e013      	b.n	8012492 <icmp_input+0x1ea>
    goto lenerr;
 801246a:	bf00      	nop
 801246c:	e002      	b.n	8012474 <icmp_input+0x1cc>
    goto lenerr;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <icmp_input+0x1cc>
        goto lenerr;
 8012472:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7f6 fef9 	bl	800926c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801247a:	e00a      	b.n	8012492 <icmp_input+0x1ea>
        goto icmperr;
 801247c:	bf00      	nop
 801247e:	e004      	b.n	801248a <icmp_input+0x1e2>
        goto icmperr;
 8012480:	bf00      	nop
 8012482:	e002      	b.n	801248a <icmp_input+0x1e2>
          goto icmperr;
 8012484:	bf00      	nop
 8012486:	e000      	b.n	801248a <icmp_input+0x1e2>
          goto icmperr;
 8012488:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7f6 feee 	bl	800926c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012490:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012492:	3728      	adds	r7, #40	; 0x28
 8012494:	46bd      	mov	sp, r7
 8012496:	bd80      	pop	{r7, pc}
 8012498:	20008d7c 	.word	0x20008d7c
 801249c:	20008d90 	.word	0x20008d90
 80124a0:	08017ac4 	.word	0x08017ac4
 80124a4:	08017afc 	.word	0x08017afc
 80124a8:	08017b34 	.word	0x08017b34
 80124ac:	08017b5c 	.word	0x08017b5c

080124b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	460b      	mov	r3, r1
 80124ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80124bc:	78fb      	ldrb	r3, [r7, #3]
 80124be:	461a      	mov	r2, r3
 80124c0:	2103      	movs	r1, #3
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f814 	bl	80124f0 <icmp_send_response>
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b082      	sub	sp, #8
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	6078      	str	r0, [r7, #4]
 80124d8:	460b      	mov	r3, r1
 80124da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80124dc:	78fb      	ldrb	r3, [r7, #3]
 80124de:	461a      	mov	r2, r3
 80124e0:	210b      	movs	r1, #11
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f000 f804 	bl	80124f0 <icmp_send_response>
}
 80124e8:	bf00      	nop
 80124ea:	3708      	adds	r7, #8
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b08c      	sub	sp, #48	; 0x30
 80124f4:	af04      	add	r7, sp, #16
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	460b      	mov	r3, r1
 80124fa:	70fb      	strb	r3, [r7, #3]
 80124fc:	4613      	mov	r3, r2
 80124fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012500:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012504:	2124      	movs	r1, #36	; 0x24
 8012506:	2022      	movs	r0, #34	; 0x22
 8012508:	f7f6 fbcc 	bl	8008ca4 <pbuf_alloc>
 801250c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801250e:	69fb      	ldr	r3, [r7, #28]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d04c      	beq.n	80125ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012514:	69fb      	ldr	r3, [r7, #28]
 8012516:	895b      	ldrh	r3, [r3, #10]
 8012518:	2b23      	cmp	r3, #35	; 0x23
 801251a:	d806      	bhi.n	801252a <icmp_send_response+0x3a>
 801251c:	4b26      	ldr	r3, [pc, #152]	; (80125b8 <icmp_send_response+0xc8>)
 801251e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012522:	4926      	ldr	r1, [pc, #152]	; (80125bc <icmp_send_response+0xcc>)
 8012524:	4826      	ldr	r0, [pc, #152]	; (80125c0 <icmp_send_response+0xd0>)
 8012526:	f001 feeb 	bl	8014300 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012530:	69fb      	ldr	r3, [r7, #28]
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	78fa      	ldrb	r2, [r7, #3]
 801253a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	78ba      	ldrb	r2, [r7, #2]
 8012540:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	2200      	movs	r2, #0
 8012546:	711a      	strb	r2, [r3, #4]
 8012548:	2200      	movs	r2, #0
 801254a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	2200      	movs	r2, #0
 8012550:	719a      	strb	r2, [r3, #6]
 8012552:	2200      	movs	r2, #0
 8012554:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012556:	69fb      	ldr	r3, [r7, #28]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	f103 0008 	add.w	r0, r3, #8
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	685b      	ldr	r3, [r3, #4]
 8012562:	221c      	movs	r2, #28
 8012564:	4619      	mov	r1, r3
 8012566:	f002 f80c 	bl	8014582 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	68db      	ldr	r3, [r3, #12]
 801256e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012570:	f107 030c 	add.w	r3, r7, #12
 8012574:	4618      	mov	r0, r3
 8012576:	f000 f825 	bl	80125c4 <ip4_route>
 801257a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d011      	beq.n	80125a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	2200      	movs	r2, #0
 8012586:	709a      	strb	r2, [r3, #2]
 8012588:	2200      	movs	r2, #0
 801258a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801258c:	f107 020c 	add.w	r2, r7, #12
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	9302      	str	r3, [sp, #8]
 8012594:	2301      	movs	r3, #1
 8012596:	9301      	str	r3, [sp, #4]
 8012598:	2300      	movs	r3, #0
 801259a:	9300      	str	r3, [sp, #0]
 801259c:	23ff      	movs	r3, #255	; 0xff
 801259e:	2100      	movs	r1, #0
 80125a0:	69f8      	ldr	r0, [r7, #28]
 80125a2:	f000 f9eb 	bl	801297c <ip4_output_if>
  }
  pbuf_free(q);
 80125a6:	69f8      	ldr	r0, [r7, #28]
 80125a8:	f7f6 fe60 	bl	800926c <pbuf_free>
 80125ac:	e000      	b.n	80125b0 <icmp_send_response+0xc0>
    return;
 80125ae:	bf00      	nop
}
 80125b0:	3720      	adds	r7, #32
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}
 80125b6:	bf00      	nop
 80125b8:	08017ac4 	.word	0x08017ac4
 80125bc:	08017b90 	.word	0x08017b90
 80125c0:	08017b34 	.word	0x08017b34

080125c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80125cc:	4b33      	ldr	r3, [pc, #204]	; (801269c <ip4_route+0xd8>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	60fb      	str	r3, [r7, #12]
 80125d2:	e036      	b.n	8012642 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80125da:	f003 0301 	and.w	r3, r3, #1
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d02b      	beq.n	801263c <ip4_route+0x78>
 80125e4:	68fb      	ldr	r3, [r7, #12]
 80125e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80125ea:	089b      	lsrs	r3, r3, #2
 80125ec:	f003 0301 	and.w	r3, r3, #1
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d022      	beq.n	801263c <ip4_route+0x78>
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d01d      	beq.n	801263c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681a      	ldr	r2, [r3, #0]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	3304      	adds	r3, #4
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	405a      	eors	r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	3308      	adds	r3, #8
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	4013      	ands	r3, r2
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	e038      	b.n	801268e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012622:	f003 0302 	and.w	r3, r3, #2
 8012626:	2b00      	cmp	r3, #0
 8012628:	d108      	bne.n	801263c <ip4_route+0x78>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	330c      	adds	r3, #12
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	429a      	cmp	r2, r3
 8012636:	d101      	bne.n	801263c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	e028      	b.n	801268e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	60fb      	str	r3, [r7, #12]
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d1c5      	bne.n	80125d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012648:	4b15      	ldr	r3, [pc, #84]	; (80126a0 <ip4_route+0xdc>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d01a      	beq.n	8012686 <ip4_route+0xc2>
 8012650:	4b13      	ldr	r3, [pc, #76]	; (80126a0 <ip4_route+0xdc>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012658:	f003 0301 	and.w	r3, r3, #1
 801265c:	2b00      	cmp	r3, #0
 801265e:	d012      	beq.n	8012686 <ip4_route+0xc2>
 8012660:	4b0f      	ldr	r3, [pc, #60]	; (80126a0 <ip4_route+0xdc>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012668:	f003 0304 	and.w	r3, r3, #4
 801266c:	2b00      	cmp	r3, #0
 801266e:	d00a      	beq.n	8012686 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012670:	4b0b      	ldr	r3, [pc, #44]	; (80126a0 <ip4_route+0xdc>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	3304      	adds	r3, #4
 8012676:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012678:	2b00      	cmp	r3, #0
 801267a:	d004      	beq.n	8012686 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	b2db      	uxtb	r3, r3
 8012682:	2b7f      	cmp	r3, #127	; 0x7f
 8012684:	d101      	bne.n	801268a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012686:	2300      	movs	r3, #0
 8012688:	e001      	b.n	801268e <ip4_route+0xca>
  }

  return netif_default;
 801268a:	4b05      	ldr	r3, [pc, #20]	; (80126a0 <ip4_route+0xdc>)
 801268c:	681b      	ldr	r3, [r3, #0]
}
 801268e:	4618      	mov	r0, r3
 8012690:	3714      	adds	r7, #20
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	2000c4e4 	.word	0x2000c4e4
 80126a0:	2000c4e8 	.word	0x2000c4e8

080126a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b082      	sub	sp, #8
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	b2db      	uxtb	r3, r3
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d016      	beq.n	80126ea <ip4_input_accept+0x46>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	3304      	adds	r3, #4
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d011      	beq.n	80126ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80126c6:	4b0b      	ldr	r3, [pc, #44]	; (80126f4 <ip4_input_accept+0x50>)
 80126c8:	695a      	ldr	r2, [r3, #20]
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	3304      	adds	r3, #4
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d008      	beq.n	80126e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80126d4:	4b07      	ldr	r3, [pc, #28]	; (80126f4 <ip4_input_accept+0x50>)
 80126d6:	695b      	ldr	r3, [r3, #20]
 80126d8:	6879      	ldr	r1, [r7, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f000 fa26 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 80126e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80126e6:	2301      	movs	r3, #1
 80126e8:	e000      	b.n	80126ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80126ea:	2300      	movs	r3, #0
}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3708      	adds	r7, #8
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	20008d7c 	.word	0x20008d7c

080126f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b088      	sub	sp, #32
 80126fc:	af00      	add	r7, sp, #0
 80126fe:	6078      	str	r0, [r7, #4]
 8012700:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012702:	2301      	movs	r3, #1
 8012704:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801270c:	69fb      	ldr	r3, [r7, #28]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	091b      	lsrs	r3, r3, #4
 8012712:	b2db      	uxtb	r3, r3
 8012714:	2b04      	cmp	r3, #4
 8012716:	d004      	beq.n	8012722 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f7f6 fda7 	bl	800926c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801271e:	2300      	movs	r3, #0
 8012720:	e123      	b.n	801296a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	781b      	ldrb	r3, [r3, #0]
 8012726:	f003 030f 	and.w	r3, r3, #15
 801272a:	b2db      	uxtb	r3, r3
 801272c:	009b      	lsls	r3, r3, #2
 801272e:	b2db      	uxtb	r3, r3
 8012730:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012732:	69fb      	ldr	r3, [r7, #28]
 8012734:	885b      	ldrh	r3, [r3, #2]
 8012736:	b29b      	uxth	r3, r3
 8012738:	4618      	mov	r0, r3
 801273a:	f7f5 f999 	bl	8007a70 <lwip_htons>
 801273e:	4603      	mov	r3, r0
 8012740:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	891b      	ldrh	r3, [r3, #8]
 8012746:	8a3a      	ldrh	r2, [r7, #16]
 8012748:	429a      	cmp	r2, r3
 801274a:	d204      	bcs.n	8012756 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801274c:	8a3b      	ldrh	r3, [r7, #16]
 801274e:	4619      	mov	r1, r3
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7f6 fc05 	bl	8008f60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	895b      	ldrh	r3, [r3, #10]
 801275a:	8a7a      	ldrh	r2, [r7, #18]
 801275c:	429a      	cmp	r2, r3
 801275e:	d807      	bhi.n	8012770 <ip4_input+0x78>
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	891b      	ldrh	r3, [r3, #8]
 8012764:	8a3a      	ldrh	r2, [r7, #16]
 8012766:	429a      	cmp	r2, r3
 8012768:	d802      	bhi.n	8012770 <ip4_input+0x78>
 801276a:	8a7b      	ldrh	r3, [r7, #18]
 801276c:	2b13      	cmp	r3, #19
 801276e:	d804      	bhi.n	801277a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7f6 fd7b 	bl	800926c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012776:	2300      	movs	r3, #0
 8012778:	e0f7      	b.n	801296a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801277a:	69fb      	ldr	r3, [r7, #28]
 801277c:	691b      	ldr	r3, [r3, #16]
 801277e:	4a7d      	ldr	r2, [pc, #500]	; (8012974 <ip4_input+0x27c>)
 8012780:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	68db      	ldr	r3, [r3, #12]
 8012786:	4a7b      	ldr	r2, [pc, #492]	; (8012974 <ip4_input+0x27c>)
 8012788:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801278a:	4b7a      	ldr	r3, [pc, #488]	; (8012974 <ip4_input+0x27c>)
 801278c:	695b      	ldr	r3, [r3, #20]
 801278e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012792:	2be0      	cmp	r3, #224	; 0xe0
 8012794:	d112      	bne.n	80127bc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801279c:	f003 0301 	and.w	r3, r3, #1
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d007      	beq.n	80127b6 <ip4_input+0xbe>
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	3304      	adds	r3, #4
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d002      	beq.n	80127b6 <ip4_input+0xbe>
      netif = inp;
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	61bb      	str	r3, [r7, #24]
 80127b4:	e02a      	b.n	801280c <ip4_input+0x114>
    } else {
      netif = NULL;
 80127b6:	2300      	movs	r3, #0
 80127b8:	61bb      	str	r3, [r7, #24]
 80127ba:	e027      	b.n	801280c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80127bc:	6838      	ldr	r0, [r7, #0]
 80127be:	f7ff ff71 	bl	80126a4 <ip4_input_accept>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d002      	beq.n	80127ce <ip4_input+0xd6>
      netif = inp;
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	61bb      	str	r3, [r7, #24]
 80127cc:	e01e      	b.n	801280c <ip4_input+0x114>
    } else {
      netif = NULL;
 80127ce:	2300      	movs	r3, #0
 80127d0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80127d2:	4b68      	ldr	r3, [pc, #416]	; (8012974 <ip4_input+0x27c>)
 80127d4:	695b      	ldr	r3, [r3, #20]
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	2b7f      	cmp	r3, #127	; 0x7f
 80127da:	d017      	beq.n	801280c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80127dc:	4b66      	ldr	r3, [pc, #408]	; (8012978 <ip4_input+0x280>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	61bb      	str	r3, [r7, #24]
 80127e2:	e00e      	b.n	8012802 <ip4_input+0x10a>
          if (netif == inp) {
 80127e4:	69ba      	ldr	r2, [r7, #24]
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d006      	beq.n	80127fa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80127ec:	69b8      	ldr	r0, [r7, #24]
 80127ee:	f7ff ff59 	bl	80126a4 <ip4_input_accept>
 80127f2:	4603      	mov	r3, r0
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d108      	bne.n	801280a <ip4_input+0x112>
 80127f8:	e000      	b.n	80127fc <ip4_input+0x104>
            continue;
 80127fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	61bb      	str	r3, [r7, #24]
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d1ed      	bne.n	80127e4 <ip4_input+0xec>
 8012808:	e000      	b.n	801280c <ip4_input+0x114>
            break;
 801280a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d111      	bne.n	8012836 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	7a5b      	ldrb	r3, [r3, #9]
 8012816:	2b11      	cmp	r3, #17
 8012818:	d10d      	bne.n	8012836 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801281a:	8a7b      	ldrh	r3, [r7, #18]
 801281c:	69fa      	ldr	r2, [r7, #28]
 801281e:	4413      	add	r3, r2
 8012820:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	885b      	ldrh	r3, [r3, #2]
 8012826:	b29b      	uxth	r3, r3
 8012828:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801282c:	d103      	bne.n	8012836 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012832:	2300      	movs	r3, #0
 8012834:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d017      	beq.n	801286c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801283c:	4b4d      	ldr	r3, [pc, #308]	; (8012974 <ip4_input+0x27c>)
 801283e:	691b      	ldr	r3, [r3, #16]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d013      	beq.n	801286c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012844:	4b4b      	ldr	r3, [pc, #300]	; (8012974 <ip4_input+0x27c>)
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	6839      	ldr	r1, [r7, #0]
 801284a:	4618      	mov	r0, r3
 801284c:	f000 f96e 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d105      	bne.n	8012862 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012856:	4b47      	ldr	r3, [pc, #284]	; (8012974 <ip4_input+0x27c>)
 8012858:	691b      	ldr	r3, [r3, #16]
 801285a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801285e:	2be0      	cmp	r3, #224	; 0xe0
 8012860:	d104      	bne.n	801286c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7f6 fd02 	bl	800926c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012868:	2300      	movs	r3, #0
 801286a:	e07e      	b.n	801296a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801286c:	69bb      	ldr	r3, [r7, #24]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d104      	bne.n	801287c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012872:	6878      	ldr	r0, [r7, #4]
 8012874:	f7f6 fcfa 	bl	800926c <pbuf_free>
    return ERR_OK;
 8012878:	2300      	movs	r3, #0
 801287a:	e076      	b.n	801296a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	88db      	ldrh	r3, [r3, #6]
 8012880:	b29b      	uxth	r3, r3
 8012882:	461a      	mov	r2, r3
 8012884:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012888:	4013      	ands	r3, r2
 801288a:	2b00      	cmp	r3, #0
 801288c:	d00b      	beq.n	80128a6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801288e:	6878      	ldr	r0, [r7, #4]
 8012890:	f000 fc92 	bl	80131b8 <ip4_reass>
 8012894:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <ip4_input+0x1a8>
      return ERR_OK;
 801289c:	2300      	movs	r3, #0
 801289e:	e064      	b.n	801296a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80128a6:	4a33      	ldr	r2, [pc, #204]	; (8012974 <ip4_input+0x27c>)
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80128ac:	4a31      	ldr	r2, [pc, #196]	; (8012974 <ip4_input+0x27c>)
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80128b2:	4a30      	ldr	r2, [pc, #192]	; (8012974 <ip4_input+0x27c>)
 80128b4:	69fb      	ldr	r3, [r7, #28]
 80128b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80128b8:	69fb      	ldr	r3, [r7, #28]
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	f003 030f 	and.w	r3, r3, #15
 80128c0:	b2db      	uxtb	r3, r3
 80128c2:	009b      	lsls	r3, r3, #2
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	b29a      	uxth	r2, r3
 80128c8:	4b2a      	ldr	r3, [pc, #168]	; (8012974 <ip4_input+0x27c>)
 80128ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80128cc:	8a7b      	ldrh	r3, [r7, #18]
 80128ce:	4619      	mov	r1, r3
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7f6 fc45 	bl	8009160 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80128d6:	69fb      	ldr	r3, [r7, #28]
 80128d8:	7a5b      	ldrb	r3, [r3, #9]
 80128da:	2b11      	cmp	r3, #17
 80128dc:	d006      	beq.n	80128ec <ip4_input+0x1f4>
 80128de:	2b11      	cmp	r3, #17
 80128e0:	dc13      	bgt.n	801290a <ip4_input+0x212>
 80128e2:	2b01      	cmp	r3, #1
 80128e4:	d00c      	beq.n	8012900 <ip4_input+0x208>
 80128e6:	2b06      	cmp	r3, #6
 80128e8:	d005      	beq.n	80128f6 <ip4_input+0x1fe>
 80128ea:	e00e      	b.n	801290a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80128ec:	6839      	ldr	r1, [r7, #0]
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7fc faea 	bl	800eec8 <udp_input>
        break;
 80128f4:	e026      	b.n	8012944 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f7f8 fafb 	bl	800aef4 <tcp_input>
        break;
 80128fe:	e021      	b.n	8012944 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012900:	6839      	ldr	r1, [r7, #0]
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f7ff fcd0 	bl	80122a8 <icmp_input>
        break;
 8012908:	e01c      	b.n	8012944 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801290a:	4b1a      	ldr	r3, [pc, #104]	; (8012974 <ip4_input+0x27c>)
 801290c:	695b      	ldr	r3, [r3, #20]
 801290e:	69b9      	ldr	r1, [r7, #24]
 8012910:	4618      	mov	r0, r3
 8012912:	f000 f90b 	bl	8012b2c <ip4_addr_isbroadcast_u32>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d10f      	bne.n	801293c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801291c:	4b15      	ldr	r3, [pc, #84]	; (8012974 <ip4_input+0x27c>)
 801291e:	695b      	ldr	r3, [r3, #20]
 8012920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012924:	2be0      	cmp	r3, #224	; 0xe0
 8012926:	d009      	beq.n	801293c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012928:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801292c:	4619      	mov	r1, r3
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7f6 fc89 	bl	8009246 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012934:	2102      	movs	r1, #2
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff fdba 	bl	80124b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801293c:	6878      	ldr	r0, [r7, #4]
 801293e:	f7f6 fc95 	bl	800926c <pbuf_free>
        break;
 8012942:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012944:	4b0b      	ldr	r3, [pc, #44]	; (8012974 <ip4_input+0x27c>)
 8012946:	2200      	movs	r2, #0
 8012948:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801294a:	4b0a      	ldr	r3, [pc, #40]	; (8012974 <ip4_input+0x27c>)
 801294c:	2200      	movs	r2, #0
 801294e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012950:	4b08      	ldr	r3, [pc, #32]	; (8012974 <ip4_input+0x27c>)
 8012952:	2200      	movs	r2, #0
 8012954:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012956:	4b07      	ldr	r3, [pc, #28]	; (8012974 <ip4_input+0x27c>)
 8012958:	2200      	movs	r2, #0
 801295a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801295c:	4b05      	ldr	r3, [pc, #20]	; (8012974 <ip4_input+0x27c>)
 801295e:	2200      	movs	r2, #0
 8012960:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012962:	4b04      	ldr	r3, [pc, #16]	; (8012974 <ip4_input+0x27c>)
 8012964:	2200      	movs	r2, #0
 8012966:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012968:	2300      	movs	r3, #0
}
 801296a:	4618      	mov	r0, r3
 801296c:	3720      	adds	r7, #32
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}
 8012972:	bf00      	nop
 8012974:	20008d7c 	.word	0x20008d7c
 8012978:	2000c4e4 	.word	0x2000c4e4

0801297c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08a      	sub	sp, #40	; 0x28
 8012980:	af04      	add	r7, sp, #16
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
 8012988:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d009      	beq.n	80129a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012994:	68bb      	ldr	r3, [r7, #8]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d003      	beq.n	80129a2 <ip4_output_if+0x26>
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d102      	bne.n	80129a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80129a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a4:	3304      	adds	r3, #4
 80129a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80129a8:	78fa      	ldrb	r2, [r7, #3]
 80129aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ac:	9302      	str	r3, [sp, #8]
 80129ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80129b2:	9301      	str	r3, [sp, #4]
 80129b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	4613      	mov	r3, r2
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	6979      	ldr	r1, [r7, #20]
 80129c0:	68f8      	ldr	r0, [r7, #12]
 80129c2:	f000 f805 	bl	80129d0 <ip4_output_if_src>
 80129c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3718      	adds	r7, #24
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b088      	sub	sp, #32
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	607a      	str	r2, [r7, #4]
 80129dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	7b9b      	ldrb	r3, [r3, #14]
 80129e2:	2b01      	cmp	r3, #1
 80129e4:	d006      	beq.n	80129f4 <ip4_output_if_src+0x24>
 80129e6:	4b4b      	ldr	r3, [pc, #300]	; (8012b14 <ip4_output_if_src+0x144>)
 80129e8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80129ec:	494a      	ldr	r1, [pc, #296]	; (8012b18 <ip4_output_if_src+0x148>)
 80129ee:	484b      	ldr	r0, [pc, #300]	; (8012b1c <ip4_output_if_src+0x14c>)
 80129f0:	f001 fc86 	bl	8014300 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d060      	beq.n	8012abc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80129fa:	2314      	movs	r3, #20
 80129fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80129fe:	2114      	movs	r1, #20
 8012a00:	68f8      	ldr	r0, [r7, #12]
 8012a02:	f7f6 fb9d 	bl	8009140 <pbuf_add_header>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012a0c:	f06f 0301 	mvn.w	r3, #1
 8012a10:	e07c      	b.n	8012b0c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	895b      	ldrh	r3, [r3, #10]
 8012a1c:	2b13      	cmp	r3, #19
 8012a1e:	d806      	bhi.n	8012a2e <ip4_output_if_src+0x5e>
 8012a20:	4b3c      	ldr	r3, [pc, #240]	; (8012b14 <ip4_output_if_src+0x144>)
 8012a22:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012a26:	493e      	ldr	r1, [pc, #248]	; (8012b20 <ip4_output_if_src+0x150>)
 8012a28:	483c      	ldr	r0, [pc, #240]	; (8012b1c <ip4_output_if_src+0x14c>)
 8012a2a:	f001 fc69 	bl	8014300 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	78fa      	ldrb	r2, [r7, #3]
 8012a32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012a3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681a      	ldr	r2, [r3, #0]
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012a44:	8b7b      	ldrh	r3, [r7, #26]
 8012a46:	089b      	lsrs	r3, r3, #2
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a50:	b2da      	uxtb	r2, r3
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012a56:	69fb      	ldr	r3, [r7, #28]
 8012a58:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012a5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	891b      	ldrh	r3, [r3, #8]
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f5 f804 	bl	8007a70 <lwip_htons>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	69fb      	ldr	r3, [r7, #28]
 8012a6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	2200      	movs	r2, #0
 8012a74:	719a      	strb	r2, [r3, #6]
 8012a76:	2200      	movs	r2, #0
 8012a78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012a7a:	4b2a      	ldr	r3, [pc, #168]	; (8012b24 <ip4_output_if_src+0x154>)
 8012a7c:	881b      	ldrh	r3, [r3, #0]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7f4 fff6 	bl	8007a70 <lwip_htons>
 8012a84:	4603      	mov	r3, r0
 8012a86:	461a      	mov	r2, r3
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012a8c:	4b25      	ldr	r3, [pc, #148]	; (8012b24 <ip4_output_if_src+0x154>)
 8012a8e:	881b      	ldrh	r3, [r3, #0]
 8012a90:	3301      	adds	r3, #1
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	4b23      	ldr	r3, [pc, #140]	; (8012b24 <ip4_output_if_src+0x154>)
 8012a96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d104      	bne.n	8012aa8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012a9e:	4b22      	ldr	r3, [pc, #136]	; (8012b28 <ip4_output_if_src+0x158>)
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	60da      	str	r2, [r3, #12]
 8012aa6:	e003      	b.n	8012ab0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	681a      	ldr	r2, [r3, #0]
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	729a      	strb	r2, [r3, #10]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	72da      	strb	r2, [r3, #11]
 8012aba:	e00f      	b.n	8012adc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	895b      	ldrh	r3, [r3, #10]
 8012ac0:	2b13      	cmp	r3, #19
 8012ac2:	d802      	bhi.n	8012aca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012ac4:	f06f 0301 	mvn.w	r3, #1
 8012ac8:	e020      	b.n	8012b0c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	685b      	ldr	r3, [r3, #4]
 8012ace:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	691b      	ldr	r3, [r3, #16]
 8012ad4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012ad6:	f107 0314 	add.w	r3, r7, #20
 8012ada:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d00c      	beq.n	8012afe <ip4_output_if_src+0x12e>
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	891a      	ldrh	r2, [r3, #8]
 8012ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d906      	bls.n	8012afe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f000 fd53 	bl	80135a0 <ip4_frag>
 8012afa:	4603      	mov	r3, r0
 8012afc:	e006      	b.n	8012b0c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b00:	695b      	ldr	r3, [r3, #20]
 8012b02:	687a      	ldr	r2, [r7, #4]
 8012b04:	68f9      	ldr	r1, [r7, #12]
 8012b06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b08:	4798      	blx	r3
 8012b0a:	4603      	mov	r3, r0
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3720      	adds	r7, #32
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	08017bbc 	.word	0x08017bbc
 8012b18:	08017bf0 	.word	0x08017bf0
 8012b1c:	08017bfc 	.word	0x08017bfc
 8012b20:	08017c24 	.word	0x08017c24
 8012b24:	2000c676 	.word	0x2000c676
 8012b28:	08018054 	.word	0x08018054

08012b2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012b2c:	b480      	push	{r7}
 8012b2e:	b085      	sub	sp, #20
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b40:	d002      	beq.n	8012b48 <ip4_addr_isbroadcast_u32+0x1c>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d101      	bne.n	8012b4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	e02a      	b.n	8012ba2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012b52:	f003 0302 	and.w	r3, r3, #2
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d101      	bne.n	8012b5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	e021      	b.n	8012ba2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	3304      	adds	r3, #4
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	429a      	cmp	r2, r3
 8012b68:	d101      	bne.n	8012b6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	e019      	b.n	8012ba2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012b6e:	68fa      	ldr	r2, [r7, #12]
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	3304      	adds	r3, #4
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	405a      	eors	r2, r3
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	3308      	adds	r3, #8
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	4013      	ands	r3, r2
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d10d      	bne.n	8012ba0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	3308      	adds	r3, #8
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	43da      	mvns	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	3308      	adds	r3, #8
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d101      	bne.n	8012ba0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012b9c:	2301      	movs	r3, #1
 8012b9e:	e000      	b.n	8012ba2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012ba0:	2300      	movs	r3, #0
  }
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3714      	adds	r7, #20
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
	...

08012bb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012bba:	4b12      	ldr	r3, [pc, #72]	; (8012c04 <ip_reass_tmr+0x54>)
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012bc0:	e018      	b.n	8012bf4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	7fdb      	ldrb	r3, [r3, #31]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00b      	beq.n	8012be2 <ip_reass_tmr+0x32>
      r->timer--;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	7fdb      	ldrb	r3, [r3, #31]
 8012bce:	3b01      	subs	r3, #1
 8012bd0:	b2da      	uxtb	r2, r3
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	60fb      	str	r3, [r7, #12]
 8012be0:	e008      	b.n	8012bf4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012bec:	68b9      	ldr	r1, [r7, #8]
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 f80a 	bl	8012c08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d1e3      	bne.n	8012bc2 <ip_reass_tmr+0x12>
    }
  }
}
 8012bfa:	bf00      	nop
 8012bfc:	bf00      	nop
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}
 8012c04:	2000c678 	.word	0x2000c678

08012c08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b088      	sub	sp, #32
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012c12:	2300      	movs	r3, #0
 8012c14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	d105      	bne.n	8012c2a <ip_reass_free_complete_datagram+0x22>
 8012c1e:	4b45      	ldr	r3, [pc, #276]	; (8012d34 <ip_reass_free_complete_datagram+0x12c>)
 8012c20:	22ab      	movs	r2, #171	; 0xab
 8012c22:	4945      	ldr	r1, [pc, #276]	; (8012d38 <ip_reass_free_complete_datagram+0x130>)
 8012c24:	4845      	ldr	r0, [pc, #276]	; (8012d3c <ip_reass_free_complete_datagram+0x134>)
 8012c26:	f001 fb6b 	bl	8014300 <iprintf>
  if (prev != NULL) {
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00a      	beq.n	8012c46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d005      	beq.n	8012c46 <ip_reass_free_complete_datagram+0x3e>
 8012c3a:	4b3e      	ldr	r3, [pc, #248]	; (8012d34 <ip_reass_free_complete_datagram+0x12c>)
 8012c3c:	22ad      	movs	r2, #173	; 0xad
 8012c3e:	4940      	ldr	r1, [pc, #256]	; (8012d40 <ip_reass_free_complete_datagram+0x138>)
 8012c40:	483e      	ldr	r0, [pc, #248]	; (8012d3c <ip_reass_free_complete_datagram+0x134>)
 8012c42:	f001 fb5d 	bl	8014300 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	685b      	ldr	r3, [r3, #4]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	889b      	ldrh	r3, [r3, #4]
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d12a      	bne.n	8012cae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012c5e:	697b      	ldr	r3, [r7, #20]
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	6858      	ldr	r0, [r3, #4]
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	3308      	adds	r3, #8
 8012c6e:	2214      	movs	r2, #20
 8012c70:	4619      	mov	r1, r3
 8012c72:	f001 fc86 	bl	8014582 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012c76:	2101      	movs	r1, #1
 8012c78:	69b8      	ldr	r0, [r7, #24]
 8012c7a:	f7ff fc29 	bl	80124d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012c7e:	69b8      	ldr	r0, [r7, #24]
 8012c80:	f7f6 fb82 	bl	8009388 <pbuf_clen>
 8012c84:	4603      	mov	r3, r0
 8012c86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012c88:	8bfa      	ldrh	r2, [r7, #30]
 8012c8a:	8a7b      	ldrh	r3, [r7, #18]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c92:	db05      	blt.n	8012ca0 <ip_reass_free_complete_datagram+0x98>
 8012c94:	4b27      	ldr	r3, [pc, #156]	; (8012d34 <ip_reass_free_complete_datagram+0x12c>)
 8012c96:	22bc      	movs	r2, #188	; 0xbc
 8012c98:	492a      	ldr	r1, [pc, #168]	; (8012d44 <ip_reass_free_complete_datagram+0x13c>)
 8012c9a:	4828      	ldr	r0, [pc, #160]	; (8012d3c <ip_reass_free_complete_datagram+0x134>)
 8012c9c:	f001 fb30 	bl	8014300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012ca0:	8bfa      	ldrh	r2, [r7, #30]
 8012ca2:	8a7b      	ldrh	r3, [r7, #18]
 8012ca4:	4413      	add	r3, r2
 8012ca6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012ca8:	69b8      	ldr	r0, [r7, #24]
 8012caa:	f7f6 fadf 	bl	800926c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012cb4:	e01f      	b.n	8012cf6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	685b      	ldr	r3, [r3, #4]
 8012cba:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012cc6:	68f8      	ldr	r0, [r7, #12]
 8012cc8:	f7f6 fb5e 	bl	8009388 <pbuf_clen>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012cd0:	8bfa      	ldrh	r2, [r7, #30]
 8012cd2:	8a7b      	ldrh	r3, [r7, #18]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cda:	db05      	blt.n	8012ce8 <ip_reass_free_complete_datagram+0xe0>
 8012cdc:	4b15      	ldr	r3, [pc, #84]	; (8012d34 <ip_reass_free_complete_datagram+0x12c>)
 8012cde:	22cc      	movs	r2, #204	; 0xcc
 8012ce0:	4918      	ldr	r1, [pc, #96]	; (8012d44 <ip_reass_free_complete_datagram+0x13c>)
 8012ce2:	4816      	ldr	r0, [pc, #88]	; (8012d3c <ip_reass_free_complete_datagram+0x134>)
 8012ce4:	f001 fb0c 	bl	8014300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012ce8:	8bfa      	ldrh	r2, [r7, #30]
 8012cea:	8a7b      	ldrh	r3, [r7, #18]
 8012cec:	4413      	add	r3, r2
 8012cee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012cf0:	68f8      	ldr	r0, [r7, #12]
 8012cf2:	f7f6 fabb 	bl	800926c <pbuf_free>
  while (p != NULL) {
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d1dc      	bne.n	8012cb6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012cfc:	6839      	ldr	r1, [r7, #0]
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f8c2 	bl	8012e88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012d04:	4b10      	ldr	r3, [pc, #64]	; (8012d48 <ip_reass_free_complete_datagram+0x140>)
 8012d06:	881b      	ldrh	r3, [r3, #0]
 8012d08:	8bfa      	ldrh	r2, [r7, #30]
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	d905      	bls.n	8012d1a <ip_reass_free_complete_datagram+0x112>
 8012d0e:	4b09      	ldr	r3, [pc, #36]	; (8012d34 <ip_reass_free_complete_datagram+0x12c>)
 8012d10:	22d2      	movs	r2, #210	; 0xd2
 8012d12:	490e      	ldr	r1, [pc, #56]	; (8012d4c <ip_reass_free_complete_datagram+0x144>)
 8012d14:	4809      	ldr	r0, [pc, #36]	; (8012d3c <ip_reass_free_complete_datagram+0x134>)
 8012d16:	f001 faf3 	bl	8014300 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012d1a:	4b0b      	ldr	r3, [pc, #44]	; (8012d48 <ip_reass_free_complete_datagram+0x140>)
 8012d1c:	881a      	ldrh	r2, [r3, #0]
 8012d1e:	8bfb      	ldrh	r3, [r7, #30]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	b29a      	uxth	r2, r3
 8012d24:	4b08      	ldr	r3, [pc, #32]	; (8012d48 <ip_reass_free_complete_datagram+0x140>)
 8012d26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012d28:	8bfb      	ldrh	r3, [r7, #30]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3720      	adds	r7, #32
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	08017c54 	.word	0x08017c54
 8012d38:	08017c90 	.word	0x08017c90
 8012d3c:	08017c9c 	.word	0x08017c9c
 8012d40:	08017cc4 	.word	0x08017cc4
 8012d44:	08017cd8 	.word	0x08017cd8
 8012d48:	2000c67c 	.word	0x2000c67c
 8012d4c:	08017cf8 	.word	0x08017cf8

08012d50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b08a      	sub	sp, #40	; 0x28
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012d5e:	2300      	movs	r3, #0
 8012d60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012d62:	2300      	movs	r3, #0
 8012d64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012d66:	2300      	movs	r3, #0
 8012d68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012d6e:	4b28      	ldr	r3, [pc, #160]	; (8012e10 <ip_reass_remove_oldest_datagram+0xc0>)
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012d74:	e030      	b.n	8012dd8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d78:	695a      	ldr	r2, [r3, #20]
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d10c      	bne.n	8012d9c <ip_reass_remove_oldest_datagram+0x4c>
 8012d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d84:	699a      	ldr	r2, [r3, #24]
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	691b      	ldr	r3, [r3, #16]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d106      	bne.n	8012d9c <ip_reass_remove_oldest_datagram+0x4c>
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	899a      	ldrh	r2, [r3, #12]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	889b      	ldrh	r3, [r3, #4]
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d014      	beq.n	8012dc6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012d9c:	693b      	ldr	r3, [r7, #16]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012da2:	6a3b      	ldr	r3, [r7, #32]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d104      	bne.n	8012db2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	61bb      	str	r3, [r7, #24]
 8012db0:	e009      	b.n	8012dc6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db4:	7fda      	ldrb	r2, [r3, #31]
 8012db6:	6a3b      	ldr	r3, [r7, #32]
 8012db8:	7fdb      	ldrb	r3, [r3, #31]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d803      	bhi.n	8012dc6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d1cb      	bne.n	8012d76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012dde:	6a3b      	ldr	r3, [r7, #32]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d008      	beq.n	8012df6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012de4:	69b9      	ldr	r1, [r7, #24]
 8012de6:	6a38      	ldr	r0, [r7, #32]
 8012de8:	f7ff ff0e 	bl	8012c08 <ip_reass_free_complete_datagram>
 8012dec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012dee:	697a      	ldr	r2, [r7, #20]
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	4413      	add	r3, r2
 8012df4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	da02      	bge.n	8012e04 <ip_reass_remove_oldest_datagram+0xb4>
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	dcac      	bgt.n	8012d5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012e04:	697b      	ldr	r3, [r7, #20]
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3728      	adds	r7, #40	; 0x28
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}
 8012e0e:	bf00      	nop
 8012e10:	2000c678 	.word	0x2000c678

08012e14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e1e:	2004      	movs	r0, #4
 8012e20:	f7f5 fafe 	bl	8008420 <memp_malloc>
 8012e24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d110      	bne.n	8012e4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012e2c:	6839      	ldr	r1, [r7, #0]
 8012e2e:	6878      	ldr	r0, [r7, #4]
 8012e30:	f7ff ff8e 	bl	8012d50 <ip_reass_remove_oldest_datagram>
 8012e34:	4602      	mov	r2, r0
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	dc03      	bgt.n	8012e44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012e3c:	2004      	movs	r0, #4
 8012e3e:	f7f5 faef 	bl	8008420 <memp_malloc>
 8012e42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d101      	bne.n	8012e4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	e016      	b.n	8012e7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012e4e:	2220      	movs	r2, #32
 8012e50:	2100      	movs	r1, #0
 8012e52:	68f8      	ldr	r0, [r7, #12]
 8012e54:	f001 fab9 	bl	80143ca <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	220f      	movs	r2, #15
 8012e5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012e5e:	4b09      	ldr	r3, [pc, #36]	; (8012e84 <ip_reass_enqueue_new_datagram+0x70>)
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012e66:	4a07      	ldr	r2, [pc, #28]	; (8012e84 <ip_reass_enqueue_new_datagram+0x70>)
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	3308      	adds	r3, #8
 8012e70:	2214      	movs	r2, #20
 8012e72:	6879      	ldr	r1, [r7, #4]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f001 fb84 	bl	8014582 <memcpy>
  return ipr;
 8012e7a:	68fb      	ldr	r3, [r7, #12]
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	2000c678 	.word	0x2000c678

08012e88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012e92:	4b10      	ldr	r3, [pc, #64]	; (8012ed4 <ip_reass_dequeue_datagram+0x4c>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	429a      	cmp	r2, r3
 8012e9a:	d104      	bne.n	8012ea6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	4a0c      	ldr	r2, [pc, #48]	; (8012ed4 <ip_reass_dequeue_datagram+0x4c>)
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	e00d      	b.n	8012ec2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d106      	bne.n	8012eba <ip_reass_dequeue_datagram+0x32>
 8012eac:	4b0a      	ldr	r3, [pc, #40]	; (8012ed8 <ip_reass_dequeue_datagram+0x50>)
 8012eae:	f240 1245 	movw	r2, #325	; 0x145
 8012eb2:	490a      	ldr	r1, [pc, #40]	; (8012edc <ip_reass_dequeue_datagram+0x54>)
 8012eb4:	480a      	ldr	r0, [pc, #40]	; (8012ee0 <ip_reass_dequeue_datagram+0x58>)
 8012eb6:	f001 fa23 	bl	8014300 <iprintf>
    prev->next = ipr->next;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681a      	ldr	r2, [r3, #0]
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012ec2:	6879      	ldr	r1, [r7, #4]
 8012ec4:	2004      	movs	r0, #4
 8012ec6:	f7f5 fb21 	bl	800850c <memp_free>
}
 8012eca:	bf00      	nop
 8012ecc:	3708      	adds	r7, #8
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}
 8012ed2:	bf00      	nop
 8012ed4:	2000c678 	.word	0x2000c678
 8012ed8:	08017c54 	.word	0x08017c54
 8012edc:	08017d1c 	.word	0x08017d1c
 8012ee0:	08017c9c 	.word	0x08017c9c

08012ee4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b08c      	sub	sp, #48	; 0x30
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	685b      	ldr	r3, [r3, #4]
 8012efc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012efe:	69fb      	ldr	r3, [r7, #28]
 8012f00:	885b      	ldrh	r3, [r3, #2]
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7f4 fdb3 	bl	8007a70 <lwip_htons>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	781b      	ldrb	r3, [r3, #0]
 8012f12:	f003 030f 	and.w	r3, r3, #15
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8012f1c:	7e7b      	ldrb	r3, [r7, #25]
 8012f1e:	b29b      	uxth	r3, r3
 8012f20:	8b7a      	ldrh	r2, [r7, #26]
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d202      	bcs.n	8012f2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f2a:	e135      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8012f2c:	7e7b      	ldrb	r3, [r7, #25]
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	8b7a      	ldrh	r2, [r7, #26]
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8012f36:	69fb      	ldr	r3, [r7, #28]
 8012f38:	88db      	ldrh	r3, [r3, #6]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f4 fd97 	bl	8007a70 <lwip_htons>
 8012f42:	4603      	mov	r3, r0
 8012f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	00db      	lsls	r3, r3, #3
 8012f4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8012f4e:	68bb      	ldr	r3, [r7, #8]
 8012f50:	685b      	ldr	r3, [r3, #4]
 8012f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	2200      	movs	r2, #0
 8012f58:	701a      	strb	r2, [r3, #0]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	705a      	strb	r2, [r3, #1]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	709a      	strb	r2, [r3, #2]
 8012f62:	2200      	movs	r2, #0
 8012f64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	8afa      	ldrh	r2, [r7, #22]
 8012f6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012f6c:	8afa      	ldrh	r2, [r7, #22]
 8012f6e:	8b7b      	ldrh	r3, [r7, #26]
 8012f70:	4413      	add	r3, r2
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	88db      	ldrh	r3, [r3, #6]
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	8afa      	ldrh	r2, [r7, #22]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d902      	bls.n	8012f8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012f88:	e106      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8012f90:	e068      	b.n	8013064 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9a:	889b      	ldrh	r3, [r3, #4]
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	889b      	ldrh	r3, [r3, #4]
 8012fa2:	b29b      	uxth	r3, r3
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d235      	bcs.n	8013014 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d020      	beq.n	8012ff6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fb6:	889b      	ldrh	r3, [r3, #4]
 8012fb8:	b29a      	uxth	r2, r3
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	88db      	ldrh	r3, [r3, #6]
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d307      	bcc.n	8012fd4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc6:	88db      	ldrh	r3, [r3, #6]
 8012fc8:	b29a      	uxth	r2, r3
 8012fca:	693b      	ldr	r3, [r7, #16]
 8012fcc:	889b      	ldrh	r3, [r3, #4]
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d902      	bls.n	8012fda <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012fd8:	e0de      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fdc:	68ba      	ldr	r2, [r7, #8]
 8012fde:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe2:	88db      	ldrh	r3, [r3, #6]
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe8:	889b      	ldrh	r3, [r3, #4]
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d03d      	beq.n	801306c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012ff4:	e03a      	b.n	801306c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff8:	88db      	ldrh	r3, [r3, #6]
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	889b      	ldrh	r3, [r3, #4]
 8013000:	b29b      	uxth	r3, r3
 8013002:	429a      	cmp	r2, r3
 8013004:	d902      	bls.n	801300c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801300a:	e0c5      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	68ba      	ldr	r2, [r7, #8]
 8013010:	605a      	str	r2, [r3, #4]
      break;
 8013012:	e02b      	b.n	801306c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013016:	889b      	ldrh	r3, [r3, #4]
 8013018:	b29a      	uxth	r2, r3
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	889b      	ldrh	r3, [r3, #4]
 801301e:	b29b      	uxth	r3, r3
 8013020:	429a      	cmp	r2, r3
 8013022:	d102      	bne.n	801302a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013028:	e0b6      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302c:	889b      	ldrh	r3, [r3, #4]
 801302e:	b29a      	uxth	r2, r3
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	88db      	ldrh	r3, [r3, #6]
 8013034:	b29b      	uxth	r3, r3
 8013036:	429a      	cmp	r2, r3
 8013038:	d202      	bcs.n	8013040 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801303a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801303e:	e0ab      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013042:	2b00      	cmp	r3, #0
 8013044:	d009      	beq.n	801305a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013048:	88db      	ldrh	r3, [r3, #6]
 801304a:	b29a      	uxth	r2, r3
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	889b      	ldrh	r3, [r3, #4]
 8013050:	b29b      	uxth	r3, r3
 8013052:	429a      	cmp	r2, r3
 8013054:	d001      	beq.n	801305a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013056:	2300      	movs	r3, #0
 8013058:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013066:	2b00      	cmp	r3, #0
 8013068:	d193      	bne.n	8012f92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801306a:	e000      	b.n	801306e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801306c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013070:	2b00      	cmp	r3, #0
 8013072:	d12d      	bne.n	80130d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013076:	2b00      	cmp	r3, #0
 8013078:	d01c      	beq.n	80130b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307c:	88db      	ldrh	r3, [r3, #6]
 801307e:	b29a      	uxth	r2, r3
 8013080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013082:	889b      	ldrh	r3, [r3, #4]
 8013084:	b29b      	uxth	r3, r3
 8013086:	429a      	cmp	r2, r3
 8013088:	d906      	bls.n	8013098 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801308a:	4b45      	ldr	r3, [pc, #276]	; (80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801308c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013090:	4944      	ldr	r1, [pc, #272]	; (80131a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013092:	4845      	ldr	r0, [pc, #276]	; (80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013094:	f001 f934 	bl	8014300 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309a:	68ba      	ldr	r2, [r7, #8]
 801309c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a0:	88db      	ldrh	r3, [r3, #6]
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a6:	889b      	ldrh	r3, [r3, #4]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d010      	beq.n	80130d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80130ae:	2300      	movs	r3, #0
 80130b0:	623b      	str	r3, [r7, #32]
 80130b2:	e00d      	b.n	80130d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d006      	beq.n	80130ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80130bc:	4b38      	ldr	r3, [pc, #224]	; (80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80130be:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80130c2:	493a      	ldr	r1, [pc, #232]	; (80131ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80130c4:	4838      	ldr	r0, [pc, #224]	; (80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80130c6:	f001 f91b 	bl	8014300 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	68ba      	ldr	r2, [r7, #8]
 80130ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d105      	bne.n	80130e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	7f9b      	ldrb	r3, [r3, #30]
 80130da:	f003 0301 	and.w	r3, r3, #1
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d059      	beq.n	8013196 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80130e2:	6a3b      	ldr	r3, [r7, #32]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d04f      	beq.n	8013188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	685b      	ldr	r3, [r3, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d006      	beq.n	80130fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	685b      	ldr	r3, [r3, #4]
 80130f4:	685b      	ldr	r3, [r3, #4]
 80130f6:	889b      	ldrh	r3, [r3, #4]
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d002      	beq.n	8013104 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	623b      	str	r3, [r7, #32]
 8013102:	e041      	b.n	8013188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013106:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801310e:	e012      	b.n	8013136 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	685b      	ldr	r3, [r3, #4]
 8013114:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013118:	88db      	ldrh	r3, [r3, #6]
 801311a:	b29a      	uxth	r2, r3
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	889b      	ldrh	r3, [r3, #4]
 8013120:	b29b      	uxth	r3, r3
 8013122:	429a      	cmp	r2, r3
 8013124:	d002      	beq.n	801312c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013126:	2300      	movs	r3, #0
 8013128:	623b      	str	r3, [r7, #32]
            break;
 801312a:	e007      	b.n	801313c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801312c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801312e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1e9      	bne.n	8013110 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801313c:	6a3b      	ldr	r3, [r7, #32]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d022      	beq.n	8013188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	685b      	ldr	r3, [r3, #4]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d106      	bne.n	8013158 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801314a:	4b15      	ldr	r3, [pc, #84]	; (80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801314c:	f240 12df 	movw	r2, #479	; 0x1df
 8013150:	4917      	ldr	r1, [pc, #92]	; (80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013152:	4815      	ldr	r0, [pc, #84]	; (80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013154:	f001 f8d4 	bl	8014300 <iprintf>
          LWIP_ASSERT("sanity check",
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	685b      	ldr	r3, [r3, #4]
 801315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013160:	429a      	cmp	r2, r3
 8013162:	d106      	bne.n	8013172 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013164:	4b0e      	ldr	r3, [pc, #56]	; (80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013166:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801316a:	4911      	ldr	r1, [pc, #68]	; (80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801316c:	480e      	ldr	r0, [pc, #56]	; (80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801316e:	f001 f8c7 	bl	8014300 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d006      	beq.n	8013188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801317a:	4b09      	ldr	r3, [pc, #36]	; (80131a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801317c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013180:	490c      	ldr	r1, [pc, #48]	; (80131b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013182:	4809      	ldr	r0, [pc, #36]	; (80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013184:	f001 f8bc 	bl	8014300 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013188:	6a3b      	ldr	r3, [r7, #32]
 801318a:	2b00      	cmp	r3, #0
 801318c:	bf14      	ite	ne
 801318e:	2301      	movne	r3, #1
 8013190:	2300      	moveq	r3, #0
 8013192:	b2db      	uxtb	r3, r3
 8013194:	e000      	b.n	8013198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013196:	2300      	movs	r3, #0
}
 8013198:	4618      	mov	r0, r3
 801319a:	3730      	adds	r7, #48	; 0x30
 801319c:	46bd      	mov	sp, r7
 801319e:	bd80      	pop	{r7, pc}
 80131a0:	08017c54 	.word	0x08017c54
 80131a4:	08017d38 	.word	0x08017d38
 80131a8:	08017c9c 	.word	0x08017c9c
 80131ac:	08017d58 	.word	0x08017d58
 80131b0:	08017d90 	.word	0x08017d90
 80131b4:	08017da0 	.word	0x08017da0

080131b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b08e      	sub	sp, #56	; 0x38
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	685b      	ldr	r3, [r3, #4]
 80131c4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80131c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	f003 030f 	and.w	r3, r3, #15
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	2b14      	cmp	r3, #20
 80131d6:	f040 8171 	bne.w	80134bc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80131da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131dc:	88db      	ldrh	r3, [r3, #6]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7f4 fc45 	bl	8007a70 <lwip_htons>
 80131e6:	4603      	mov	r3, r0
 80131e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	00db      	lsls	r3, r3, #3
 80131f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80131f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f4:	885b      	ldrh	r3, [r3, #2]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7f4 fc39 	bl	8007a70 <lwip_htons>
 80131fe:	4603      	mov	r3, r0
 8013200:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	f003 030f 	and.w	r3, r3, #15
 801320a:	b2db      	uxtb	r3, r3
 801320c:	009b      	lsls	r3, r3, #2
 801320e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8013212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013216:	b29b      	uxth	r3, r3
 8013218:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801321a:	429a      	cmp	r2, r3
 801321c:	f0c0 8150 	bcc.w	80134c0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013220:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013224:	b29b      	uxth	r3, r3
 8013226:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013228:	1ad3      	subs	r3, r2, r3
 801322a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7f6 f8ab 	bl	8009388 <pbuf_clen>
 8013232:	4603      	mov	r3, r0
 8013234:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013236:	4b8c      	ldr	r3, [pc, #560]	; (8013468 <ip4_reass+0x2b0>)
 8013238:	881b      	ldrh	r3, [r3, #0]
 801323a:	461a      	mov	r2, r3
 801323c:	8c3b      	ldrh	r3, [r7, #32]
 801323e:	4413      	add	r3, r2
 8013240:	2b0a      	cmp	r3, #10
 8013242:	dd10      	ble.n	8013266 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013244:	8c3b      	ldrh	r3, [r7, #32]
 8013246:	4619      	mov	r1, r3
 8013248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801324a:	f7ff fd81 	bl	8012d50 <ip_reass_remove_oldest_datagram>
 801324e:	4603      	mov	r3, r0
 8013250:	2b00      	cmp	r3, #0
 8013252:	f000 8137 	beq.w	80134c4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013256:	4b84      	ldr	r3, [pc, #528]	; (8013468 <ip4_reass+0x2b0>)
 8013258:	881b      	ldrh	r3, [r3, #0]
 801325a:	461a      	mov	r2, r3
 801325c:	8c3b      	ldrh	r3, [r7, #32]
 801325e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013260:	2b0a      	cmp	r3, #10
 8013262:	f300 812f 	bgt.w	80134c4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013266:	4b81      	ldr	r3, [pc, #516]	; (801346c <ip4_reass+0x2b4>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	633b      	str	r3, [r7, #48]	; 0x30
 801326c:	e015      	b.n	801329a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013270:	695a      	ldr	r2, [r3, #20]
 8013272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013274:	68db      	ldr	r3, [r3, #12]
 8013276:	429a      	cmp	r2, r3
 8013278:	d10c      	bne.n	8013294 <ip4_reass+0xdc>
 801327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801327c:	699a      	ldr	r2, [r3, #24]
 801327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013280:	691b      	ldr	r3, [r3, #16]
 8013282:	429a      	cmp	r2, r3
 8013284:	d106      	bne.n	8013294 <ip4_reass+0xdc>
 8013286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013288:	899a      	ldrh	r2, [r3, #12]
 801328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328c:	889b      	ldrh	r3, [r3, #4]
 801328e:	b29b      	uxth	r3, r3
 8013290:	429a      	cmp	r2, r3
 8013292:	d006      	beq.n	80132a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	633b      	str	r3, [r7, #48]	; 0x30
 801329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801329c:	2b00      	cmp	r3, #0
 801329e:	d1e6      	bne.n	801326e <ip4_reass+0xb6>
 80132a0:	e000      	b.n	80132a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80132a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80132a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d109      	bne.n	80132be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80132aa:	8c3b      	ldrh	r3, [r7, #32]
 80132ac:	4619      	mov	r1, r3
 80132ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80132b0:	f7ff fdb0 	bl	8012e14 <ip_reass_enqueue_new_datagram>
 80132b4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80132b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d11c      	bne.n	80132f6 <ip4_reass+0x13e>
      goto nullreturn;
 80132bc:	e105      	b.n	80134ca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80132be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c0:	88db      	ldrh	r3, [r3, #6]
 80132c2:	b29b      	uxth	r3, r3
 80132c4:	4618      	mov	r0, r3
 80132c6:	f7f4 fbd3 	bl	8007a70 <lwip_htons>
 80132ca:	4603      	mov	r3, r0
 80132cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d110      	bne.n	80132f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80132d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132d6:	89db      	ldrh	r3, [r3, #14]
 80132d8:	4618      	mov	r0, r3
 80132da:	f7f4 fbc9 	bl	8007a70 <lwip_htons>
 80132de:	4603      	mov	r3, r0
 80132e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d006      	beq.n	80132f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80132e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132ea:	3308      	adds	r3, #8
 80132ec:	2214      	movs	r2, #20
 80132ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80132f0:	4618      	mov	r0, r3
 80132f2:	f001 f946 	bl	8014582 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80132f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f8:	88db      	ldrh	r3, [r3, #6]
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	f003 0320 	and.w	r3, r3, #32
 8013300:	2b00      	cmp	r3, #0
 8013302:	bf0c      	ite	eq
 8013304:	2301      	moveq	r3, #1
 8013306:	2300      	movne	r3, #0
 8013308:	b2db      	uxtb	r3, r3
 801330a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d00e      	beq.n	8013330 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013312:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013316:	4413      	add	r3, r2
 8013318:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801331a:	8b7a      	ldrh	r2, [r7, #26]
 801331c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801331e:	429a      	cmp	r2, r3
 8013320:	f0c0 80a0 	bcc.w	8013464 <ip4_reass+0x2ac>
 8013324:	8b7b      	ldrh	r3, [r7, #26]
 8013326:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801332a:	4293      	cmp	r3, r2
 801332c:	f200 809a 	bhi.w	8013464 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013330:	69fa      	ldr	r2, [r7, #28]
 8013332:	6879      	ldr	r1, [r7, #4]
 8013334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013336:	f7ff fdd5 	bl	8012ee4 <ip_reass_chain_frag_into_datagram_and_validate>
 801333a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013342:	f000 809b 	beq.w	801347c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013346:	4b48      	ldr	r3, [pc, #288]	; (8013468 <ip4_reass+0x2b0>)
 8013348:	881a      	ldrh	r2, [r3, #0]
 801334a:	8c3b      	ldrh	r3, [r7, #32]
 801334c:	4413      	add	r3, r2
 801334e:	b29a      	uxth	r2, r3
 8013350:	4b45      	ldr	r3, [pc, #276]	; (8013468 <ip4_reass+0x2b0>)
 8013352:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013354:	69fb      	ldr	r3, [r7, #28]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d00d      	beq.n	8013376 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801335a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801335c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801335e:	4413      	add	r3, r2
 8013360:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013364:	8a7a      	ldrh	r2, [r7, #18]
 8013366:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801336a:	7f9b      	ldrb	r3, [r3, #30]
 801336c:	f043 0301 	orr.w	r3, r3, #1
 8013370:	b2da      	uxtb	r2, r3
 8013372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013374:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d171      	bne.n	8013460 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801337e:	8b9b      	ldrh	r3, [r3, #28]
 8013380:	3314      	adds	r3, #20
 8013382:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	685b      	ldr	r3, [r3, #4]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013390:	685b      	ldr	r3, [r3, #4]
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013398:	3308      	adds	r3, #8
 801339a:	2214      	movs	r2, #20
 801339c:	4619      	mov	r1, r3
 801339e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133a0:	f001 f8ef 	bl	8014582 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80133a4:	8a3b      	ldrh	r3, [r7, #16]
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7f4 fb62 	bl	8007a70 <lwip_htons>
 80133ac:	4603      	mov	r3, r0
 80133ae:	461a      	mov	r2, r3
 80133b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80133b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b6:	2200      	movs	r2, #0
 80133b8:	719a      	strb	r2, [r3, #6]
 80133ba:	2200      	movs	r2, #0
 80133bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80133be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c0:	2200      	movs	r2, #0
 80133c2:	729a      	strb	r2, [r3, #10]
 80133c4:	2200      	movs	r2, #0
 80133c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80133c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80133ce:	e00d      	b.n	80133ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80133d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80133d6:	2114      	movs	r1, #20
 80133d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80133da:	f7f5 fec1 	bl	8009160 <pbuf_remove_header>
      pbuf_cat(p, r);
 80133de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7f6 f811 	bl	8009408 <pbuf_cat>
      r = iprh->next_pbuf;
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80133ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d1ee      	bne.n	80133d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80133f2:	4b1e      	ldr	r3, [pc, #120]	; (801346c <ip4_reass+0x2b4>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d102      	bne.n	8013402 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80133fc:	2300      	movs	r3, #0
 80133fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013400:	e010      	b.n	8013424 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013402:	4b1a      	ldr	r3, [pc, #104]	; (801346c <ip4_reass+0x2b4>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013408:	e007      	b.n	801341a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013410:	429a      	cmp	r2, r3
 8013412:	d006      	beq.n	8013422 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	62fb      	str	r3, [r7, #44]	; 0x2c
 801341a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801341c:	2b00      	cmp	r3, #0
 801341e:	d1f4      	bne.n	801340a <ip4_reass+0x252>
 8013420:	e000      	b.n	8013424 <ip4_reass+0x26c>
          break;
 8013422:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013428:	f7ff fd2e 	bl	8012e88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f7f5 ffab 	bl	8009388 <pbuf_clen>
 8013432:	4603      	mov	r3, r0
 8013434:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013436:	4b0c      	ldr	r3, [pc, #48]	; (8013468 <ip4_reass+0x2b0>)
 8013438:	881b      	ldrh	r3, [r3, #0]
 801343a:	8c3a      	ldrh	r2, [r7, #32]
 801343c:	429a      	cmp	r2, r3
 801343e:	d906      	bls.n	801344e <ip4_reass+0x296>
 8013440:	4b0b      	ldr	r3, [pc, #44]	; (8013470 <ip4_reass+0x2b8>)
 8013442:	f240 229b 	movw	r2, #667	; 0x29b
 8013446:	490b      	ldr	r1, [pc, #44]	; (8013474 <ip4_reass+0x2bc>)
 8013448:	480b      	ldr	r0, [pc, #44]	; (8013478 <ip4_reass+0x2c0>)
 801344a:	f000 ff59 	bl	8014300 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801344e:	4b06      	ldr	r3, [pc, #24]	; (8013468 <ip4_reass+0x2b0>)
 8013450:	881a      	ldrh	r2, [r3, #0]
 8013452:	8c3b      	ldrh	r3, [r7, #32]
 8013454:	1ad3      	subs	r3, r2, r3
 8013456:	b29a      	uxth	r2, r3
 8013458:	4b03      	ldr	r3, [pc, #12]	; (8013468 <ip4_reass+0x2b0>)
 801345a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	e038      	b.n	80134d2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013460:	2300      	movs	r3, #0
 8013462:	e036      	b.n	80134d2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013464:	bf00      	nop
 8013466:	e00a      	b.n	801347e <ip4_reass+0x2c6>
 8013468:	2000c67c 	.word	0x2000c67c
 801346c:	2000c678 	.word	0x2000c678
 8013470:	08017c54 	.word	0x08017c54
 8013474:	08017dc4 	.word	0x08017dc4
 8013478:	08017c9c 	.word	0x08017c9c
    goto nullreturn_ipr;
 801347c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <ip4_reass+0x2da>
 8013484:	4b15      	ldr	r3, [pc, #84]	; (80134dc <ip4_reass+0x324>)
 8013486:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801348a:	4915      	ldr	r1, [pc, #84]	; (80134e0 <ip4_reass+0x328>)
 801348c:	4815      	ldr	r0, [pc, #84]	; (80134e4 <ip4_reass+0x32c>)
 801348e:	f000 ff37 	bl	8014300 <iprintf>
  if (ipr->p == NULL) {
 8013492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d116      	bne.n	80134c8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801349a:	4b13      	ldr	r3, [pc, #76]	; (80134e8 <ip4_reass+0x330>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d006      	beq.n	80134b2 <ip4_reass+0x2fa>
 80134a4:	4b0d      	ldr	r3, [pc, #52]	; (80134dc <ip4_reass+0x324>)
 80134a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80134aa:	4910      	ldr	r1, [pc, #64]	; (80134ec <ip4_reass+0x334>)
 80134ac:	480d      	ldr	r0, [pc, #52]	; (80134e4 <ip4_reass+0x32c>)
 80134ae:	f000 ff27 	bl	8014300 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80134b2:	2100      	movs	r1, #0
 80134b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b6:	f7ff fce7 	bl	8012e88 <ip_reass_dequeue_datagram>
 80134ba:	e006      	b.n	80134ca <ip4_reass+0x312>
    goto nullreturn;
 80134bc:	bf00      	nop
 80134be:	e004      	b.n	80134ca <ip4_reass+0x312>
    goto nullreturn;
 80134c0:	bf00      	nop
 80134c2:	e002      	b.n	80134ca <ip4_reass+0x312>
      goto nullreturn;
 80134c4:	bf00      	nop
 80134c6:	e000      	b.n	80134ca <ip4_reass+0x312>
  }

nullreturn:
 80134c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80134ca:	6878      	ldr	r0, [r7, #4]
 80134cc:	f7f5 fece 	bl	800926c <pbuf_free>
  return NULL;
 80134d0:	2300      	movs	r3, #0
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3738      	adds	r7, #56	; 0x38
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	08017c54 	.word	0x08017c54
 80134e0:	08017de0 	.word	0x08017de0
 80134e4:	08017c9c 	.word	0x08017c9c
 80134e8:	2000c678 	.word	0x2000c678
 80134ec:	08017dec 	.word	0x08017dec

080134f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80134f4:	2005      	movs	r0, #5
 80134f6:	f7f4 ff93 	bl	8008420 <memp_malloc>
 80134fa:	4603      	mov	r3, r0
}
 80134fc:	4618      	mov	r0, r3
 80134fe:	bd80      	pop	{r7, pc}

08013500 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b082      	sub	sp, #8
 8013504:	af00      	add	r7, sp, #0
 8013506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d106      	bne.n	801351c <ip_frag_free_pbuf_custom_ref+0x1c>
 801350e:	4b07      	ldr	r3, [pc, #28]	; (801352c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013510:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013514:	4906      	ldr	r1, [pc, #24]	; (8013530 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013516:	4807      	ldr	r0, [pc, #28]	; (8013534 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013518:	f000 fef2 	bl	8014300 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801351c:	6879      	ldr	r1, [r7, #4]
 801351e:	2005      	movs	r0, #5
 8013520:	f7f4 fff4 	bl	800850c <memp_free>
}
 8013524:	bf00      	nop
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}
 801352c:	08017c54 	.word	0x08017c54
 8013530:	08017e0c 	.word	0x08017e0c
 8013534:	08017c9c 	.word	0x08017c9c

08013538 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013538:	b580      	push	{r7, lr}
 801353a:	b084      	sub	sp, #16
 801353c:	af00      	add	r7, sp, #0
 801353e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d106      	bne.n	8013558 <ipfrag_free_pbuf_custom+0x20>
 801354a:	4b11      	ldr	r3, [pc, #68]	; (8013590 <ipfrag_free_pbuf_custom+0x58>)
 801354c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013550:	4910      	ldr	r1, [pc, #64]	; (8013594 <ipfrag_free_pbuf_custom+0x5c>)
 8013552:	4811      	ldr	r0, [pc, #68]	; (8013598 <ipfrag_free_pbuf_custom+0x60>)
 8013554:	f000 fed4 	bl	8014300 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013558:	68fa      	ldr	r2, [r7, #12]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	429a      	cmp	r2, r3
 801355e:	d006      	beq.n	801356e <ipfrag_free_pbuf_custom+0x36>
 8013560:	4b0b      	ldr	r3, [pc, #44]	; (8013590 <ipfrag_free_pbuf_custom+0x58>)
 8013562:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013566:	490d      	ldr	r1, [pc, #52]	; (801359c <ipfrag_free_pbuf_custom+0x64>)
 8013568:	480b      	ldr	r0, [pc, #44]	; (8013598 <ipfrag_free_pbuf_custom+0x60>)
 801356a:	f000 fec9 	bl	8014300 <iprintf>
  if (pcr->original != NULL) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	695b      	ldr	r3, [r3, #20]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d004      	beq.n	8013580 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	695b      	ldr	r3, [r3, #20]
 801357a:	4618      	mov	r0, r3
 801357c:	f7f5 fe76 	bl	800926c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013580:	68f8      	ldr	r0, [r7, #12]
 8013582:	f7ff ffbd 	bl	8013500 <ip_frag_free_pbuf_custom_ref>
}
 8013586:	bf00      	nop
 8013588:	3710      	adds	r7, #16
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	08017c54 	.word	0x08017c54
 8013594:	08017e18 	.word	0x08017e18
 8013598:	08017c9c 	.word	0x08017c9c
 801359c:	08017e24 	.word	0x08017e24

080135a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b094      	sub	sp, #80	; 0x50
 80135a4:	af02      	add	r7, sp, #8
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80135ac:	2300      	movs	r3, #0
 80135ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135b6:	3b14      	subs	r3, #20
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	da00      	bge.n	80135be <ip4_frag+0x1e>
 80135bc:	3307      	adds	r3, #7
 80135be:	10db      	asrs	r3, r3, #3
 80135c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80135c2:	2314      	movs	r3, #20
 80135c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80135cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	f003 030f 	and.w	r3, r3, #15
 80135d8:	b2db      	uxtb	r3, r3
 80135da:	009b      	lsls	r3, r3, #2
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	2b14      	cmp	r3, #20
 80135e0:	d002      	beq.n	80135e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80135e2:	f06f 0305 	mvn.w	r3, #5
 80135e6:	e110      	b.n	801380a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	895b      	ldrh	r3, [r3, #10]
 80135ec:	2b13      	cmp	r3, #19
 80135ee:	d809      	bhi.n	8013604 <ip4_frag+0x64>
 80135f0:	4b88      	ldr	r3, [pc, #544]	; (8013814 <ip4_frag+0x274>)
 80135f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80135f6:	4988      	ldr	r1, [pc, #544]	; (8013818 <ip4_frag+0x278>)
 80135f8:	4888      	ldr	r0, [pc, #544]	; (801381c <ip4_frag+0x27c>)
 80135fa:	f000 fe81 	bl	8014300 <iprintf>
 80135fe:	f06f 0305 	mvn.w	r3, #5
 8013602:	e102      	b.n	801380a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013606:	88db      	ldrh	r3, [r3, #6]
 8013608:	b29b      	uxth	r3, r3
 801360a:	4618      	mov	r0, r3
 801360c:	f7f4 fa30 	bl	8007a70 <lwip_htons>
 8013610:	4603      	mov	r3, r0
 8013612:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013614:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801361a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801361e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013624:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	891b      	ldrh	r3, [r3, #8]
 801362a:	3b14      	subs	r3, #20
 801362c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013630:	e0e1      	b.n	80137f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013632:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	b29b      	uxth	r3, r3
 8013638:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801363c:	4293      	cmp	r3, r2
 801363e:	bf28      	it	cs
 8013640:	4613      	movcs	r3, r2
 8013642:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013644:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013648:	2114      	movs	r1, #20
 801364a:	200e      	movs	r0, #14
 801364c:	f7f5 fb2a 	bl	8008ca4 <pbuf_alloc>
 8013650:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013654:	2b00      	cmp	r3, #0
 8013656:	f000 80d5 	beq.w	8013804 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365c:	895b      	ldrh	r3, [r3, #10]
 801365e:	2b13      	cmp	r3, #19
 8013660:	d806      	bhi.n	8013670 <ip4_frag+0xd0>
 8013662:	4b6c      	ldr	r3, [pc, #432]	; (8013814 <ip4_frag+0x274>)
 8013664:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013668:	496d      	ldr	r1, [pc, #436]	; (8013820 <ip4_frag+0x280>)
 801366a:	486c      	ldr	r0, [pc, #432]	; (801381c <ip4_frag+0x27c>)
 801366c:	f000 fe48 	bl	8014300 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013672:	685b      	ldr	r3, [r3, #4]
 8013674:	2214      	movs	r2, #20
 8013676:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013678:	4618      	mov	r0, r3
 801367a:	f000 ff82 	bl	8014582 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013680:	685b      	ldr	r3, [r3, #4]
 8013682:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013684:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013686:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801368a:	e064      	b.n	8013756 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	895a      	ldrh	r2, [r3, #10]
 8013690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013692:	1ad3      	subs	r3, r2, r3
 8013694:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	895b      	ldrh	r3, [r3, #10]
 801369a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801369c:	429a      	cmp	r2, r3
 801369e:	d906      	bls.n	80136ae <ip4_frag+0x10e>
 80136a0:	4b5c      	ldr	r3, [pc, #368]	; (8013814 <ip4_frag+0x274>)
 80136a2:	f240 322d 	movw	r2, #813	; 0x32d
 80136a6:	495f      	ldr	r1, [pc, #380]	; (8013824 <ip4_frag+0x284>)
 80136a8:	485c      	ldr	r0, [pc, #368]	; (801381c <ip4_frag+0x27c>)
 80136aa:	f000 fe29 	bl	8014300 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80136ae:	8bfa      	ldrh	r2, [r7, #30]
 80136b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80136b4:	4293      	cmp	r3, r2
 80136b6:	bf28      	it	cs
 80136b8:	4613      	movcs	r3, r2
 80136ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80136be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d105      	bne.n	80136d2 <ip4_frag+0x132>
        poff = 0;
 80136c6:	2300      	movs	r3, #0
 80136c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	60fb      	str	r3, [r7, #12]
        continue;
 80136d0:	e041      	b.n	8013756 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80136d2:	f7ff ff0d 	bl	80134f0 <ip_frag_alloc_pbuf_custom_ref>
 80136d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d103      	bne.n	80136e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80136de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80136e0:	f7f5 fdc4 	bl	800926c <pbuf_free>
        goto memerr;
 80136e4:	e08f      	b.n	8013806 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80136e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80136ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136ee:	4413      	add	r3, r2
 80136f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80136f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80136f8:	9201      	str	r2, [sp, #4]
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	4603      	mov	r3, r0
 80136fe:	2241      	movs	r2, #65	; 0x41
 8013700:	2000      	movs	r0, #0
 8013702:	f7f5 fbf9 	bl	8008ef8 <pbuf_alloced_custom>
 8013706:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801370e:	69b8      	ldr	r0, [r7, #24]
 8013710:	f7ff fef6 	bl	8013500 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013716:	f7f5 fda9 	bl	800926c <pbuf_free>
        goto memerr;
 801371a:	e074      	b.n	8013806 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f7f5 fe4b 	bl	80093b8 <pbuf_ref>
      pcr->original = p;
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	68fa      	ldr	r2, [r7, #12]
 8013726:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	4a3f      	ldr	r2, [pc, #252]	; (8013828 <ip4_frag+0x288>)
 801372c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801372e:	6979      	ldr	r1, [r7, #20]
 8013730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013732:	f7f5 fe69 	bl	8009408 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013736:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801373a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013744:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013748:	2b00      	cmp	r3, #0
 801374a:	d004      	beq.n	8013756 <ip4_frag+0x1b6>
        poff = 0;
 801374c:	2300      	movs	r3, #0
 801374e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013756:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801375a:	2b00      	cmp	r3, #0
 801375c:	d196      	bne.n	801368c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801375e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013760:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013764:	4413      	add	r3, r2
 8013766:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801376c:	f1a3 0213 	sub.w	r2, r3, #19
 8013770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013774:	429a      	cmp	r2, r3
 8013776:	bfcc      	ite	gt
 8013778:	2301      	movgt	r3, #1
 801377a:	2300      	movle	r3, #0
 801377c:	b2db      	uxtb	r3, r3
 801377e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013788:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801378a:	6a3b      	ldr	r3, [r7, #32]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d002      	beq.n	8013796 <ip4_frag+0x1f6>
 8013790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013792:	2b00      	cmp	r3, #0
 8013794:	d003      	beq.n	801379e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013796:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013798:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801379c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801379e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7f4 f965 	bl	8007a70 <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	461a      	mov	r2, r3
 80137aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80137ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137b0:	3314      	adds	r3, #20
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f4 f95b 	bl	8007a70 <lwip_htons>
 80137ba:	4603      	mov	r3, r0
 80137bc:	461a      	mov	r2, r3
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80137c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c4:	2200      	movs	r2, #0
 80137c6:	729a      	strb	r2, [r3, #10]
 80137c8:	2200      	movs	r2, #0
 80137ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	695b      	ldr	r3, [r3, #20]
 80137d0:	687a      	ldr	r2, [r7, #4]
 80137d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137d4:	68b8      	ldr	r0, [r7, #8]
 80137d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80137d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80137da:	f7f5 fd47 	bl	800926c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80137de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80137ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80137ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137f0:	4413      	add	r3, r2
 80137f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80137f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	f47f af19 	bne.w	8013632 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013800:	2300      	movs	r3, #0
 8013802:	e002      	b.n	801380a <ip4_frag+0x26a>
      goto memerr;
 8013804:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801380a:	4618      	mov	r0, r3
 801380c:	3748      	adds	r7, #72	; 0x48
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	08017c54 	.word	0x08017c54
 8013818:	08017e30 	.word	0x08017e30
 801381c:	08017c9c 	.word	0x08017c9c
 8013820:	08017e4c 	.word	0x08017e4c
 8013824:	08017e6c 	.word	0x08017e6c
 8013828:	08013539 	.word	0x08013539

0801382c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b086      	sub	sp, #24
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
 8013834:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013836:	230e      	movs	r3, #14
 8013838:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	895b      	ldrh	r3, [r3, #10]
 801383e:	2b0e      	cmp	r3, #14
 8013840:	d96e      	bls.n	8013920 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	7bdb      	ldrb	r3, [r3, #15]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d106      	bne.n	8013858 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013850:	3301      	adds	r3, #1
 8013852:	b2da      	uxtb	r2, r3
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	7b1a      	ldrb	r2, [r3, #12]
 8013862:	7b5b      	ldrb	r3, [r3, #13]
 8013864:	021b      	lsls	r3, r3, #8
 8013866:	4313      	orrs	r3, r2
 8013868:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	781b      	ldrb	r3, [r3, #0]
 801386e:	f003 0301 	and.w	r3, r3, #1
 8013872:	2b00      	cmp	r3, #0
 8013874:	d023      	beq.n	80138be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013876:	693b      	ldr	r3, [r7, #16]
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	2b01      	cmp	r3, #1
 801387c:	d10f      	bne.n	801389e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801387e:	693b      	ldr	r3, [r7, #16]
 8013880:	785b      	ldrb	r3, [r3, #1]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d11b      	bne.n	80138be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801388a:	2b5e      	cmp	r3, #94	; 0x5e
 801388c:	d117      	bne.n	80138be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	7b5b      	ldrb	r3, [r3, #13]
 8013892:	f043 0310 	orr.w	r3, r3, #16
 8013896:	b2da      	uxtb	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	735a      	strb	r2, [r3, #13]
 801389c:	e00f      	b.n	80138be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	2206      	movs	r2, #6
 80138a2:	4928      	ldr	r1, [pc, #160]	; (8013944 <ethernet_input+0x118>)
 80138a4:	4618      	mov	r0, r3
 80138a6:	f000 fd80 	bl	80143aa <memcmp>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d106      	bne.n	80138be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	7b5b      	ldrb	r3, [r3, #13]
 80138b4:	f043 0308 	orr.w	r3, r3, #8
 80138b8:	b2da      	uxtb	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80138be:	89fb      	ldrh	r3, [r7, #14]
 80138c0:	2b08      	cmp	r3, #8
 80138c2:	d003      	beq.n	80138cc <ethernet_input+0xa0>
 80138c4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80138c8:	d014      	beq.n	80138f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80138ca:	e032      	b.n	8013932 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138d2:	f003 0308 	and.w	r3, r3, #8
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d024      	beq.n	8013924 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80138da:	8afb      	ldrh	r3, [r7, #22]
 80138dc:	4619      	mov	r1, r3
 80138de:	6878      	ldr	r0, [r7, #4]
 80138e0:	f7f5 fc3e 	bl	8009160 <pbuf_remove_header>
 80138e4:	4603      	mov	r3, r0
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d11e      	bne.n	8013928 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80138ea:	6839      	ldr	r1, [r7, #0]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f7fe ff03 	bl	80126f8 <ip4_input>
      break;
 80138f2:	e013      	b.n	801391c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138fa:	f003 0308 	and.w	r3, r3, #8
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d014      	beq.n	801392c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013902:	8afb      	ldrh	r3, [r7, #22]
 8013904:	4619      	mov	r1, r3
 8013906:	6878      	ldr	r0, [r7, #4]
 8013908:	f7f5 fc2a 	bl	8009160 <pbuf_remove_header>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10e      	bne.n	8013930 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013912:	6839      	ldr	r1, [r7, #0]
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f7fe f89f 	bl	8011a58 <etharp_input>
      break;
 801391a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801391c:	2300      	movs	r3, #0
 801391e:	e00c      	b.n	801393a <ethernet_input+0x10e>
    goto free_and_return;
 8013920:	bf00      	nop
 8013922:	e006      	b.n	8013932 <ethernet_input+0x106>
        goto free_and_return;
 8013924:	bf00      	nop
 8013926:	e004      	b.n	8013932 <ethernet_input+0x106>
        goto free_and_return;
 8013928:	bf00      	nop
 801392a:	e002      	b.n	8013932 <ethernet_input+0x106>
        goto free_and_return;
 801392c:	bf00      	nop
 801392e:	e000      	b.n	8013932 <ethernet_input+0x106>
        goto free_and_return;
 8013930:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f7f5 fc9a 	bl	800926c <pbuf_free>
  return ERR_OK;
 8013938:	2300      	movs	r3, #0
}
 801393a:	4618      	mov	r0, r3
 801393c:	3718      	adds	r7, #24
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	0801805c 	.word	0x0801805c

08013948 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013948:	b580      	push	{r7, lr}
 801394a:	b086      	sub	sp, #24
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	607a      	str	r2, [r7, #4]
 8013954:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013956:	8c3b      	ldrh	r3, [r7, #32]
 8013958:	4618      	mov	r0, r3
 801395a:	f7f4 f889 	bl	8007a70 <lwip_htons>
 801395e:	4603      	mov	r3, r0
 8013960:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013962:	210e      	movs	r1, #14
 8013964:	68b8      	ldr	r0, [r7, #8]
 8013966:	f7f5 fbeb 	bl	8009140 <pbuf_add_header>
 801396a:	4603      	mov	r3, r0
 801396c:	2b00      	cmp	r3, #0
 801396e:	d125      	bne.n	80139bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	8afa      	ldrh	r2, [r7, #22]
 801397a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	2206      	movs	r2, #6
 8013980:	6839      	ldr	r1, [r7, #0]
 8013982:	4618      	mov	r0, r3
 8013984:	f000 fdfd 	bl	8014582 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	3306      	adds	r3, #6
 801398c:	2206      	movs	r2, #6
 801398e:	6879      	ldr	r1, [r7, #4]
 8013990:	4618      	mov	r0, r3
 8013992:	f000 fdf6 	bl	8014582 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801399c:	2b06      	cmp	r3, #6
 801399e:	d006      	beq.n	80139ae <ethernet_output+0x66>
 80139a0:	4b0a      	ldr	r3, [pc, #40]	; (80139cc <ethernet_output+0x84>)
 80139a2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80139a6:	490a      	ldr	r1, [pc, #40]	; (80139d0 <ethernet_output+0x88>)
 80139a8:	480a      	ldr	r0, [pc, #40]	; (80139d4 <ethernet_output+0x8c>)
 80139aa:	f000 fca9 	bl	8014300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	699b      	ldr	r3, [r3, #24]
 80139b2:	68b9      	ldr	r1, [r7, #8]
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	4798      	blx	r3
 80139b8:	4603      	mov	r3, r0
 80139ba:	e002      	b.n	80139c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80139bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80139be:	f06f 0301 	mvn.w	r3, #1
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3718      	adds	r7, #24
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd80      	pop	{r7, pc}
 80139ca:	bf00      	nop
 80139cc:	08017e7c 	.word	0x08017e7c
 80139d0:	08017eb4 	.word	0x08017eb4
 80139d4:	08017ee8 	.word	0x08017ee8

080139d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	b086      	sub	sp, #24
 80139dc:	af00      	add	r7, sp, #0
 80139de:	6078      	str	r0, [r7, #4]
 80139e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	60bb      	str	r3, [r7, #8]
 80139e6:	2304      	movs	r3, #4
 80139e8:	60fb      	str	r3, [r7, #12]
 80139ea:	2300      	movs	r3, #0
 80139ec:	613b      	str	r3, [r7, #16]
 80139ee:	2300      	movs	r3, #0
 80139f0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80139f2:	f107 0308 	add.w	r3, r7, #8
 80139f6:	2100      	movs	r1, #0
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7f1 f95d 	bl	8004cb8 <osMessageCreate>
 80139fe:	4602      	mov	r2, r0
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d102      	bne.n	8013a12 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a10:	e000      	b.n	8013a14 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013a12:	2300      	movs	r3, #0
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3718      	adds	r7, #24
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	6839      	ldr	r1, [r7, #0]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f1 f96a 	bl	8004d08 <osMessagePut>
 8013a34:	4603      	mov	r3, r0
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d102      	bne.n	8013a40 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	73fb      	strb	r3, [r7, #15]
 8013a3e:	e001      	b.n	8013a44 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013a40:	23ff      	movs	r3, #255	; 0xff
 8013a42:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3710      	adds	r7, #16
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b08c      	sub	sp, #48	; 0x30
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	61f8      	str	r0, [r7, #28]
 8013a58:	61b9      	str	r1, [r7, #24]
 8013a5a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8013a5c:	f7f0 ff6a 	bl	8004934 <osKernelSysTick>
 8013a60:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d017      	beq.n	8013a98 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	6819      	ldr	r1, [r3, #0]
 8013a6c:	f107 0320 	add.w	r3, r7, #32
 8013a70:	697a      	ldr	r2, [r7, #20]
 8013a72:	4618      	mov	r0, r3
 8013a74:	f7f1 f988 	bl	8004d88 <osMessageGet>

    if(event.status == osEventMessage)
 8013a78:	6a3b      	ldr	r3, [r7, #32]
 8013a7a:	2b10      	cmp	r3, #16
 8013a7c:	d109      	bne.n	8013a92 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a80:	461a      	mov	r2, r3
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8013a86:	f7f0 ff55 	bl	8004934 <osKernelSysTick>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8e:	1ad3      	subs	r3, r2, r3
 8013a90:	e019      	b.n	8013ac6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013a96:	e016      	b.n	8013ac6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8013a98:	69fb      	ldr	r3, [r7, #28]
 8013a9a:	6819      	ldr	r1, [r3, #0]
 8013a9c:	463b      	mov	r3, r7
 8013a9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	f7f1 f970 	bl	8004d88 <osMessageGet>
 8013aa8:	f107 0320 	add.w	r3, r7, #32
 8013aac:	463a      	mov	r2, r7
 8013aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	69bb      	ldr	r3, [r7, #24]
 8013aba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013abc:	f7f0 ff3a 	bl	8004934 <osKernelSysTick>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3730      	adds	r7, #48	; 0x30
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}

08013ace <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013ace:	b480      	push	{r7}
 8013ad0:	b083      	sub	sp, #12
 8013ad2:	af00      	add	r7, sp, #0
 8013ad4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d101      	bne.n	8013ae2 <sys_mbox_valid+0x14>
    return 0;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e000      	b.n	8013ae4 <sys_mbox_valid+0x16>
  else
    return 1;
 8013ae2:	2301      	movs	r3, #1
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	370c      	adds	r7, #12
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aee:	4770      	bx	lr

08013af0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013af4:	4803      	ldr	r0, [pc, #12]	; (8013b04 <sys_init+0x14>)
 8013af6:	f7f0 ff8d 	bl	8004a14 <osMutexCreate>
 8013afa:	4603      	mov	r3, r0
 8013afc:	4a02      	ldr	r2, [pc, #8]	; (8013b08 <sys_init+0x18>)
 8013afe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013b00:	bf00      	nop
 8013b02:	bd80      	pop	{r7, pc}
 8013b04:	0801806c 	.word	0x0801806c
 8013b08:	2000c680 	.word	0x2000c680

08013b0c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013b14:	2300      	movs	r3, #0
 8013b16:	60bb      	str	r3, [r7, #8]
 8013b18:	2300      	movs	r3, #0
 8013b1a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013b1c:	f107 0308 	add.w	r3, r7, #8
 8013b20:	4618      	mov	r0, r3
 8013b22:	f7f0 ff77 	bl	8004a14 <osMutexCreate>
 8013b26:	4602      	mov	r2, r0
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d102      	bne.n	8013b3a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013b34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b38:	e000      	b.n	8013b3c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3710      	adds	r7, #16
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b082      	sub	sp, #8
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013b54:	4618      	mov	r0, r3
 8013b56:	f7f0 ff75 	bl	8004a44 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8013b5a:	bf00      	nop
 8013b5c:	3708      	adds	r7, #8
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}

08013b62 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013b62:	b580      	push	{r7, lr}
 8013b64:	b082      	sub	sp, #8
 8013b66:	af00      	add	r7, sp, #0
 8013b68:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	681b      	ldr	r3, [r3, #0]
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f7f0 ffb6 	bl	8004ae0 <osMutexRelease>
}
 8013b74:	bf00      	nop
 8013b76:	3708      	adds	r7, #8
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	bd80      	pop	{r7, pc}

08013b7c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b08c      	sub	sp, #48	; 0x30
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
 8013b88:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8013b8a:	f107 0314 	add.w	r3, r7, #20
 8013b8e:	2200      	movs	r2, #0
 8013b90:	601a      	str	r2, [r3, #0]
 8013b92:	605a      	str	r2, [r3, #4]
 8013b94:	609a      	str	r2, [r3, #8]
 8013b96:	60da      	str	r2, [r3, #12]
 8013b98:	611a      	str	r2, [r3, #16]
 8013b9a:	615a      	str	r2, [r3, #20]
 8013b9c:	619a      	str	r2, [r3, #24]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	617b      	str	r3, [r7, #20]
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	61bb      	str	r3, [r7, #24]
 8013ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba8:	b21b      	sxth	r3, r3
 8013baa:	83bb      	strh	r3, [r7, #28]
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013bb0:	f107 0314 	add.w	r3, r7, #20
 8013bb4:	6879      	ldr	r1, [r7, #4]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7f0 fecc 	bl	8004954 <osThreadCreate>
 8013bbc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3730      	adds	r7, #48	; 0x30
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
	...

08013bc8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013bcc:	4b04      	ldr	r3, [pc, #16]	; (8013be0 <sys_arch_protect+0x18>)
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	f7f0 ff35 	bl	8004a44 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8013bda:	2301      	movs	r3, #1
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	2000c680 	.word	0x2000c680

08013be4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013bec:	4b04      	ldr	r3, [pc, #16]	; (8013c00 <sys_arch_unprotect+0x1c>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7f0 ff75 	bl	8004ae0 <osMutexRelease>
}
 8013bf6:	bf00      	nop
 8013bf8:	3708      	adds	r7, #8
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	2000c680 	.word	0x2000c680

08013c04 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8013c0e:	f107 020f 	add.w	r2, r7, #15
 8013c12:	1df9      	adds	r1, r7, #7
 8013c14:	2364      	movs	r3, #100	; 0x64
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	2301      	movs	r3, #1
 8013c1a:	4804      	ldr	r0, [pc, #16]	; (8013c2c <W25qxx_Spi+0x28>)
 8013c1c:	f7ef fc17 	bl	800344e <HAL_SPI_TransmitReceive>


	return ret;
 8013c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
 8013c2a:	bf00      	nop
 8013c2c:	20000350 	.word	0x20000350

08013c30 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b084      	sub	sp, #16
 8013c34:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8013c36:	2300      	movs	r3, #0
 8013c38:	60fb      	str	r3, [r7, #12]
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	60bb      	str	r3, [r7, #8]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	607b      	str	r3, [r7, #4]
 8013c42:	2300      	movs	r3, #0
 8013c44:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8013c46:	2200      	movs	r2, #0
 8013c48:	2108      	movs	r1, #8
 8013c4a:	4813      	ldr	r0, [pc, #76]	; (8013c98 <W25qxx_ReadID+0x68>)
 8013c4c:	f7ee fee6 	bl	8002a1c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8013c50:	209f      	movs	r0, #159	; 0x9f
 8013c52:	f7ff ffd7 	bl	8013c04 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013c56:	20a5      	movs	r0, #165	; 0xa5
 8013c58:	f7ff ffd4 	bl	8013c04 <W25qxx_Spi>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013c60:	20a5      	movs	r0, #165	; 0xa5
 8013c62:	f7ff ffcf 	bl	8013c04 <W25qxx_Spi>
 8013c66:	4603      	mov	r3, r0
 8013c68:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013c6a:	20a5      	movs	r0, #165	; 0xa5
 8013c6c:	f7ff ffca 	bl	8013c04 <W25qxx_Spi>
 8013c70:	4603      	mov	r3, r0
 8013c72:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8013c74:	2201      	movs	r2, #1
 8013c76:	2108      	movs	r1, #8
 8013c78:	4807      	ldr	r0, [pc, #28]	; (8013c98 <W25qxx_ReadID+0x68>)
 8013c7a:	f7ee fecf 	bl	8002a1c <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	041a      	lsls	r2, r3, #16
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	021b      	lsls	r3, r3, #8
 8013c86:	4313      	orrs	r3, r2
 8013c88:	683a      	ldr	r2, [r7, #0]
 8013c8a:	4313      	orrs	r3, r2
 8013c8c:	60fb      	str	r3, [r7, #12]
	return Temp;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
}
 8013c90:	4618      	mov	r0, r3
 8013c92:	3710      	adds	r7, #16
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}
 8013c98:	40021000 	.word	0x40021000

08013c9c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8013c9c:	b590      	push	{r4, r7, lr}
 8013c9e:	b083      	sub	sp, #12
 8013ca0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	2108      	movs	r1, #8
 8013ca6:	4816      	ldr	r0, [pc, #88]	; (8013d00 <W25qxx_ReadUniqID+0x64>)
 8013ca8:	f7ee feb8 	bl	8002a1c <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8013cac:	204b      	movs	r0, #75	; 0x4b
 8013cae:	f7ff ffa9 	bl	8013c04 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	71fb      	strb	r3, [r7, #7]
 8013cb6:	e005      	b.n	8013cc4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013cb8:	20a5      	movs	r0, #165	; 0xa5
 8013cba:	f7ff ffa3 	bl	8013c04 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8013cbe:	79fb      	ldrb	r3, [r7, #7]
 8013cc0:	3301      	adds	r3, #1
 8013cc2:	71fb      	strb	r3, [r7, #7]
 8013cc4:	79fb      	ldrb	r3, [r7, #7]
 8013cc6:	2b03      	cmp	r3, #3
 8013cc8:	d9f6      	bls.n	8013cb8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8013cca:	2300      	movs	r3, #0
 8013ccc:	71bb      	strb	r3, [r7, #6]
 8013cce:	e00b      	b.n	8013ce8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013cd0:	79bc      	ldrb	r4, [r7, #6]
 8013cd2:	20a5      	movs	r0, #165	; 0xa5
 8013cd4:	f7ff ff96 	bl	8013c04 <W25qxx_Spi>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	461a      	mov	r2, r3
 8013cdc:	4b09      	ldr	r3, [pc, #36]	; (8013d04 <W25qxx_ReadUniqID+0x68>)
 8013cde:	4423      	add	r3, r4
 8013ce0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8013ce2:	79bb      	ldrb	r3, [r7, #6]
 8013ce4:	3301      	adds	r3, #1
 8013ce6:	71bb      	strb	r3, [r7, #6]
 8013ce8:	79bb      	ldrb	r3, [r7, #6]
 8013cea:	2b07      	cmp	r3, #7
 8013cec:	d9f0      	bls.n	8013cd0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8013cee:	2201      	movs	r2, #1
 8013cf0:	2108      	movs	r1, #8
 8013cf2:	4803      	ldr	r0, [pc, #12]	; (8013d00 <W25qxx_ReadUniqID+0x64>)
 8013cf4:	f7ee fe92 	bl	8002a1c <HAL_GPIO_WritePin>
}
 8013cf8:	bf00      	nop
 8013cfa:	370c      	adds	r7, #12
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd90      	pop	{r4, r7, pc}
 8013d00:	40021000 	.word	0x40021000
 8013d04:	2000c684 	.word	0x2000c684

08013d08 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	4603      	mov	r3, r0
 8013d10:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8013d16:	2200      	movs	r2, #0
 8013d18:	2108      	movs	r1, #8
 8013d1a:	481c      	ldr	r0, [pc, #112]	; (8013d8c <W25qxx_ReadStatusRegister+0x84>)
 8013d1c:	f7ee fe7e 	bl	8002a1c <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8013d20:	79fb      	ldrb	r3, [r7, #7]
 8013d22:	2b01      	cmp	r3, #1
 8013d24:	d10c      	bne.n	8013d40 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8013d26:	2005      	movs	r0, #5
 8013d28:	f7ff ff6c 	bl	8013c04 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013d2c:	20a5      	movs	r0, #165	; 0xa5
 8013d2e:	f7ff ff69 	bl	8013c04 <W25qxx_Spi>
 8013d32:	4603      	mov	r3, r0
 8013d34:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8013d36:	4a16      	ldr	r2, [pc, #88]	; (8013d90 <W25qxx_ReadStatusRegister+0x88>)
 8013d38:	7bfb      	ldrb	r3, [r7, #15]
 8013d3a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8013d3e:	e01b      	b.n	8013d78 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8013d40:	79fb      	ldrb	r3, [r7, #7]
 8013d42:	2b02      	cmp	r3, #2
 8013d44:	d10c      	bne.n	8013d60 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8013d46:	2035      	movs	r0, #53	; 0x35
 8013d48:	f7ff ff5c 	bl	8013c04 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013d4c:	20a5      	movs	r0, #165	; 0xa5
 8013d4e:	f7ff ff59 	bl	8013c04 <W25qxx_Spi>
 8013d52:	4603      	mov	r3, r0
 8013d54:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8013d56:	4a0e      	ldr	r2, [pc, #56]	; (8013d90 <W25qxx_ReadStatusRegister+0x88>)
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8013d5e:	e00b      	b.n	8013d78 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8013d60:	2015      	movs	r0, #21
 8013d62:	f7ff ff4f 	bl	8013c04 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8013d66:	20a5      	movs	r0, #165	; 0xa5
 8013d68:	f7ff ff4c 	bl	8013c04 <W25qxx_Spi>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8013d70:	4a07      	ldr	r2, [pc, #28]	; (8013d90 <W25qxx_ReadStatusRegister+0x88>)
 8013d72:	7bfb      	ldrb	r3, [r7, #15]
 8013d74:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8013d78:	2201      	movs	r2, #1
 8013d7a:	2108      	movs	r1, #8
 8013d7c:	4803      	ldr	r0, [pc, #12]	; (8013d8c <W25qxx_ReadStatusRegister+0x84>)
 8013d7e:	f7ee fe4d 	bl	8002a1c <HAL_GPIO_WritePin>
	return status;
 8013d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	40021000 	.word	0x40021000
 8013d90:	2000c684 	.word	0x2000c684

08013d94 <W25qxx_Init>:
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8013d9a:	4b65      	ldr	r3, [pc, #404]	; (8013f30 <W25qxx_Init+0x19c>)
 8013d9c:	2201      	movs	r2, #1
 8013d9e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8013da2:	e002      	b.n	8013daa <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8013da4:	2001      	movs	r0, #1
 8013da6:	f7ed f93b 	bl	8001020 <HAL_Delay>
	while (HAL_GetTick() < 100)
 8013daa:	f7ed f92d 	bl	8001008 <HAL_GetTick>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b63      	cmp	r3, #99	; 0x63
 8013db2:	d9f7      	bls.n	8013da4 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8013db4:	2201      	movs	r2, #1
 8013db6:	2108      	movs	r1, #8
 8013db8:	485e      	ldr	r0, [pc, #376]	; (8013f34 <W25qxx_Init+0x1a0>)
 8013dba:	f7ee fe2f 	bl	8002a1c <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8013dbe:	2064      	movs	r0, #100	; 0x64
 8013dc0:	f7ed f92e 	bl	8001020 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8013dc4:	f7ff ff34 	bl	8013c30 <W25qxx_ReadID>
 8013dc8:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	b2db      	uxtb	r3, r3
 8013dce:	3b11      	subs	r3, #17
 8013dd0:	2b0f      	cmp	r3, #15
 8013dd2:	d86c      	bhi.n	8013eae <W25qxx_Init+0x11a>
 8013dd4:	a201      	add	r2, pc, #4	; (adr r2, 8013ddc <W25qxx_Init+0x48>)
 8013dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dda:	bf00      	nop
 8013ddc:	08013ea1 	.word	0x08013ea1
 8013de0:	08013e93 	.word	0x08013e93
 8013de4:	08013e85 	.word	0x08013e85
 8013de8:	08013e77 	.word	0x08013e77
 8013dec:	08013e69 	.word	0x08013e69
 8013df0:	08013e5b 	.word	0x08013e5b
 8013df4:	08013e4d 	.word	0x08013e4d
 8013df8:	08013e3d 	.word	0x08013e3d
 8013dfc:	08013e2d 	.word	0x08013e2d
 8013e00:	08013eaf 	.word	0x08013eaf
 8013e04:	08013eaf 	.word	0x08013eaf
 8013e08:	08013eaf 	.word	0x08013eaf
 8013e0c:	08013eaf 	.word	0x08013eaf
 8013e10:	08013eaf 	.word	0x08013eaf
 8013e14:	08013eaf 	.word	0x08013eaf
 8013e18:	08013e1d 	.word	0x08013e1d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8013e1c:	4b44      	ldr	r3, [pc, #272]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e1e:	220a      	movs	r2, #10
 8013e20:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8013e22:	4b43      	ldr	r3, [pc, #268]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e28:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8013e2a:	e046      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8013e2c:	4b40      	ldr	r3, [pc, #256]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e2e:	2209      	movs	r2, #9
 8013e30:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8013e32:	4b3f      	ldr	r3, [pc, #252]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e38:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8013e3a:	e03e      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8013e3c:	4b3c      	ldr	r3, [pc, #240]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e3e:	2208      	movs	r2, #8
 8013e40:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8013e42:	4b3b      	ldr	r3, [pc, #236]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013e48:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8013e4a:	e036      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8013e4c:	4b38      	ldr	r3, [pc, #224]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e4e:	2207      	movs	r2, #7
 8013e50:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8013e52:	4b37      	ldr	r3, [pc, #220]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e54:	2280      	movs	r2, #128	; 0x80
 8013e56:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8013e58:	e02f      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8013e5a:	4b35      	ldr	r3, [pc, #212]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e5c:	2206      	movs	r2, #6
 8013e5e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8013e60:	4b33      	ldr	r3, [pc, #204]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e62:	2240      	movs	r2, #64	; 0x40
 8013e64:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8013e66:	e028      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8013e68:	4b31      	ldr	r3, [pc, #196]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e6a:	2205      	movs	r2, #5
 8013e6c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8013e6e:	4b30      	ldr	r3, [pc, #192]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e70:	2220      	movs	r2, #32
 8013e72:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8013e74:	e021      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8013e76:	4b2e      	ldr	r3, [pc, #184]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e78:	2204      	movs	r2, #4
 8013e7a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8013e7c:	4b2c      	ldr	r3, [pc, #176]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e7e:	2210      	movs	r2, #16
 8013e80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8013e82:	e01a      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8013e84:	4b2a      	ldr	r3, [pc, #168]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e86:	2203      	movs	r2, #3
 8013e88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8013e8a:	4b29      	ldr	r3, [pc, #164]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e8c:	2208      	movs	r2, #8
 8013e8e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8013e90:	e013      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8013e92:	4b27      	ldr	r3, [pc, #156]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e94:	2202      	movs	r2, #2
 8013e96:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8013e98:	4b25      	ldr	r3, [pc, #148]	; (8013f30 <W25qxx_Init+0x19c>)
 8013e9a:	2204      	movs	r2, #4
 8013e9c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8013e9e:	e00c      	b.n	8013eba <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8013ea0:	4b23      	ldr	r3, [pc, #140]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ea2:	2201      	movs	r2, #1
 8013ea4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8013ea6:	4b22      	ldr	r3, [pc, #136]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8013eac:	e005      	b.n	8013eba <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8013eae:	4b20      	ldr	r3, [pc, #128]	; (8013f30 <W25qxx_Init+0x19c>)
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e036      	b.n	8013f28 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8013eba:	4b1d      	ldr	r3, [pc, #116]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013ec0:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8013ec2:	4b1b      	ldr	r3, [pc, #108]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ec4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013ec8:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8013eca:	4b19      	ldr	r3, [pc, #100]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ecc:	69db      	ldr	r3, [r3, #28]
 8013ece:	011b      	lsls	r3, r3, #4
 8013ed0:	4a17      	ldr	r2, [pc, #92]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ed2:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8013ed4:	4b16      	ldr	r3, [pc, #88]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ed6:	695b      	ldr	r3, [r3, #20]
 8013ed8:	4a15      	ldr	r2, [pc, #84]	; (8013f30 <W25qxx_Init+0x19c>)
 8013eda:	6912      	ldr	r2, [r2, #16]
 8013edc:	fb02 f303 	mul.w	r3, r2, r3
 8013ee0:	4a13      	ldr	r2, [pc, #76]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ee2:	8952      	ldrh	r2, [r2, #10]
 8013ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ee8:	4a11      	ldr	r2, [pc, #68]	; (8013f30 <W25qxx_Init+0x19c>)
 8013eea:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8013eec:	4b10      	ldr	r3, [pc, #64]	; (8013f30 <W25qxx_Init+0x19c>)
 8013eee:	691b      	ldr	r3, [r3, #16]
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	4a0f      	ldr	r2, [pc, #60]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ef4:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8013ef6:	4b0e      	ldr	r3, [pc, #56]	; (8013f30 <W25qxx_Init+0x19c>)
 8013ef8:	695b      	ldr	r3, [r3, #20]
 8013efa:	4a0d      	ldr	r2, [pc, #52]	; (8013f30 <W25qxx_Init+0x19c>)
 8013efc:	6912      	ldr	r2, [r2, #16]
 8013efe:	fb02 f303 	mul.w	r3, r2, r3
 8013f02:	0a9b      	lsrs	r3, r3, #10
 8013f04:	4a0a      	ldr	r2, [pc, #40]	; (8013f30 <W25qxx_Init+0x19c>)
 8013f06:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8013f08:	f7ff fec8 	bl	8013c9c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8013f0c:	2001      	movs	r0, #1
 8013f0e:	f7ff fefb 	bl	8013d08 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8013f12:	2002      	movs	r0, #2
 8013f14:	f7ff fef8 	bl	8013d08 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8013f18:	2003      	movs	r0, #3
 8013f1a:	f7ff fef5 	bl	8013d08 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8013f1e:	4b04      	ldr	r3, [pc, #16]	; (8013f30 <W25qxx_Init+0x19c>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8013f26:	2301      	movs	r3, #1
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3708      	adds	r7, #8
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}
 8013f30:	2000c684 	.word	0x2000c684
 8013f34:	40021000 	.word	0x40021000

08013f38 <__assert_func>:
 8013f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f3a:	4614      	mov	r4, r2
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	4b09      	ldr	r3, [pc, #36]	; (8013f64 <__assert_func+0x2c>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4605      	mov	r5, r0
 8013f44:	68d8      	ldr	r0, [r3, #12]
 8013f46:	b14c      	cbz	r4, 8013f5c <__assert_func+0x24>
 8013f48:	4b07      	ldr	r3, [pc, #28]	; (8013f68 <__assert_func+0x30>)
 8013f4a:	9100      	str	r1, [sp, #0]
 8013f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f50:	4906      	ldr	r1, [pc, #24]	; (8013f6c <__assert_func+0x34>)
 8013f52:	462b      	mov	r3, r5
 8013f54:	f000 f9a4 	bl	80142a0 <fiprintf>
 8013f58:	f000 fb21 	bl	801459e <abort>
 8013f5c:	4b04      	ldr	r3, [pc, #16]	; (8013f70 <__assert_func+0x38>)
 8013f5e:	461c      	mov	r4, r3
 8013f60:	e7f3      	b.n	8013f4a <__assert_func+0x12>
 8013f62:	bf00      	nop
 8013f64:	2000008c 	.word	0x2000008c
 8013f68:	08018074 	.word	0x08018074
 8013f6c:	08018081 	.word	0x08018081
 8013f70:	080180af 	.word	0x080180af

08013f74 <malloc>:
 8013f74:	4b02      	ldr	r3, [pc, #8]	; (8013f80 <malloc+0xc>)
 8013f76:	4601      	mov	r1, r0
 8013f78:	6818      	ldr	r0, [r3, #0]
 8013f7a:	f000 b823 	b.w	8013fc4 <_malloc_r>
 8013f7e:	bf00      	nop
 8013f80:	2000008c 	.word	0x2000008c

08013f84 <sbrk_aligned>:
 8013f84:	b570      	push	{r4, r5, r6, lr}
 8013f86:	4e0e      	ldr	r6, [pc, #56]	; (8013fc0 <sbrk_aligned+0x3c>)
 8013f88:	460c      	mov	r4, r1
 8013f8a:	6831      	ldr	r1, [r6, #0]
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	b911      	cbnz	r1, 8013f96 <sbrk_aligned+0x12>
 8013f90:	f000 faae 	bl	80144f0 <_sbrk_r>
 8013f94:	6030      	str	r0, [r6, #0]
 8013f96:	4621      	mov	r1, r4
 8013f98:	4628      	mov	r0, r5
 8013f9a:	f000 faa9 	bl	80144f0 <_sbrk_r>
 8013f9e:	1c43      	adds	r3, r0, #1
 8013fa0:	d00a      	beq.n	8013fb8 <sbrk_aligned+0x34>
 8013fa2:	1cc4      	adds	r4, r0, #3
 8013fa4:	f024 0403 	bic.w	r4, r4, #3
 8013fa8:	42a0      	cmp	r0, r4
 8013faa:	d007      	beq.n	8013fbc <sbrk_aligned+0x38>
 8013fac:	1a21      	subs	r1, r4, r0
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f000 fa9e 	bl	80144f0 <_sbrk_r>
 8013fb4:	3001      	adds	r0, #1
 8013fb6:	d101      	bne.n	8013fbc <sbrk_aligned+0x38>
 8013fb8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	bd70      	pop	{r4, r5, r6, pc}
 8013fc0:	2000c6b0 	.word	0x2000c6b0

08013fc4 <_malloc_r>:
 8013fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fc8:	1ccd      	adds	r5, r1, #3
 8013fca:	f025 0503 	bic.w	r5, r5, #3
 8013fce:	3508      	adds	r5, #8
 8013fd0:	2d0c      	cmp	r5, #12
 8013fd2:	bf38      	it	cc
 8013fd4:	250c      	movcc	r5, #12
 8013fd6:	2d00      	cmp	r5, #0
 8013fd8:	4607      	mov	r7, r0
 8013fda:	db01      	blt.n	8013fe0 <_malloc_r+0x1c>
 8013fdc:	42a9      	cmp	r1, r5
 8013fde:	d905      	bls.n	8013fec <_malloc_r+0x28>
 8013fe0:	230c      	movs	r3, #12
 8013fe2:	603b      	str	r3, [r7, #0]
 8013fe4:	2600      	movs	r6, #0
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80140c0 <_malloc_r+0xfc>
 8013ff0:	f000 f868 	bl	80140c4 <__malloc_lock>
 8013ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8013ff8:	461c      	mov	r4, r3
 8013ffa:	bb5c      	cbnz	r4, 8014054 <_malloc_r+0x90>
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	4638      	mov	r0, r7
 8014000:	f7ff ffc0 	bl	8013f84 <sbrk_aligned>
 8014004:	1c43      	adds	r3, r0, #1
 8014006:	4604      	mov	r4, r0
 8014008:	d155      	bne.n	80140b6 <_malloc_r+0xf2>
 801400a:	f8d8 4000 	ldr.w	r4, [r8]
 801400e:	4626      	mov	r6, r4
 8014010:	2e00      	cmp	r6, #0
 8014012:	d145      	bne.n	80140a0 <_malloc_r+0xdc>
 8014014:	2c00      	cmp	r4, #0
 8014016:	d048      	beq.n	80140aa <_malloc_r+0xe6>
 8014018:	6823      	ldr	r3, [r4, #0]
 801401a:	4631      	mov	r1, r6
 801401c:	4638      	mov	r0, r7
 801401e:	eb04 0903 	add.w	r9, r4, r3
 8014022:	f000 fa65 	bl	80144f0 <_sbrk_r>
 8014026:	4581      	cmp	r9, r0
 8014028:	d13f      	bne.n	80140aa <_malloc_r+0xe6>
 801402a:	6821      	ldr	r1, [r4, #0]
 801402c:	1a6d      	subs	r5, r5, r1
 801402e:	4629      	mov	r1, r5
 8014030:	4638      	mov	r0, r7
 8014032:	f7ff ffa7 	bl	8013f84 <sbrk_aligned>
 8014036:	3001      	adds	r0, #1
 8014038:	d037      	beq.n	80140aa <_malloc_r+0xe6>
 801403a:	6823      	ldr	r3, [r4, #0]
 801403c:	442b      	add	r3, r5
 801403e:	6023      	str	r3, [r4, #0]
 8014040:	f8d8 3000 	ldr.w	r3, [r8]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d038      	beq.n	80140ba <_malloc_r+0xf6>
 8014048:	685a      	ldr	r2, [r3, #4]
 801404a:	42a2      	cmp	r2, r4
 801404c:	d12b      	bne.n	80140a6 <_malloc_r+0xe2>
 801404e:	2200      	movs	r2, #0
 8014050:	605a      	str	r2, [r3, #4]
 8014052:	e00f      	b.n	8014074 <_malloc_r+0xb0>
 8014054:	6822      	ldr	r2, [r4, #0]
 8014056:	1b52      	subs	r2, r2, r5
 8014058:	d41f      	bmi.n	801409a <_malloc_r+0xd6>
 801405a:	2a0b      	cmp	r2, #11
 801405c:	d917      	bls.n	801408e <_malloc_r+0xca>
 801405e:	1961      	adds	r1, r4, r5
 8014060:	42a3      	cmp	r3, r4
 8014062:	6025      	str	r5, [r4, #0]
 8014064:	bf18      	it	ne
 8014066:	6059      	strne	r1, [r3, #4]
 8014068:	6863      	ldr	r3, [r4, #4]
 801406a:	bf08      	it	eq
 801406c:	f8c8 1000 	streq.w	r1, [r8]
 8014070:	5162      	str	r2, [r4, r5]
 8014072:	604b      	str	r3, [r1, #4]
 8014074:	4638      	mov	r0, r7
 8014076:	f104 060b 	add.w	r6, r4, #11
 801407a:	f000 f829 	bl	80140d0 <__malloc_unlock>
 801407e:	f026 0607 	bic.w	r6, r6, #7
 8014082:	1d23      	adds	r3, r4, #4
 8014084:	1af2      	subs	r2, r6, r3
 8014086:	d0ae      	beq.n	8013fe6 <_malloc_r+0x22>
 8014088:	1b9b      	subs	r3, r3, r6
 801408a:	50a3      	str	r3, [r4, r2]
 801408c:	e7ab      	b.n	8013fe6 <_malloc_r+0x22>
 801408e:	42a3      	cmp	r3, r4
 8014090:	6862      	ldr	r2, [r4, #4]
 8014092:	d1dd      	bne.n	8014050 <_malloc_r+0x8c>
 8014094:	f8c8 2000 	str.w	r2, [r8]
 8014098:	e7ec      	b.n	8014074 <_malloc_r+0xb0>
 801409a:	4623      	mov	r3, r4
 801409c:	6864      	ldr	r4, [r4, #4]
 801409e:	e7ac      	b.n	8013ffa <_malloc_r+0x36>
 80140a0:	4634      	mov	r4, r6
 80140a2:	6876      	ldr	r6, [r6, #4]
 80140a4:	e7b4      	b.n	8014010 <_malloc_r+0x4c>
 80140a6:	4613      	mov	r3, r2
 80140a8:	e7cc      	b.n	8014044 <_malloc_r+0x80>
 80140aa:	230c      	movs	r3, #12
 80140ac:	603b      	str	r3, [r7, #0]
 80140ae:	4638      	mov	r0, r7
 80140b0:	f000 f80e 	bl	80140d0 <__malloc_unlock>
 80140b4:	e797      	b.n	8013fe6 <_malloc_r+0x22>
 80140b6:	6025      	str	r5, [r4, #0]
 80140b8:	e7dc      	b.n	8014074 <_malloc_r+0xb0>
 80140ba:	605b      	str	r3, [r3, #4]
 80140bc:	deff      	udf	#255	; 0xff
 80140be:	bf00      	nop
 80140c0:	2000c6ac 	.word	0x2000c6ac

080140c4 <__malloc_lock>:
 80140c4:	4801      	ldr	r0, [pc, #4]	; (80140cc <__malloc_lock+0x8>)
 80140c6:	f000 ba5a 	b.w	801457e <__retarget_lock_acquire_recursive>
 80140ca:	bf00      	nop
 80140cc:	2000c7f4 	.word	0x2000c7f4

080140d0 <__malloc_unlock>:
 80140d0:	4801      	ldr	r0, [pc, #4]	; (80140d8 <__malloc_unlock+0x8>)
 80140d2:	f000 ba55 	b.w	8014580 <__retarget_lock_release_recursive>
 80140d6:	bf00      	nop
 80140d8:	2000c7f4 	.word	0x2000c7f4

080140dc <rand>:
 80140dc:	4b16      	ldr	r3, [pc, #88]	; (8014138 <rand+0x5c>)
 80140de:	b510      	push	{r4, lr}
 80140e0:	681c      	ldr	r4, [r3, #0]
 80140e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80140e4:	b9b3      	cbnz	r3, 8014114 <rand+0x38>
 80140e6:	2018      	movs	r0, #24
 80140e8:	f7ff ff44 	bl	8013f74 <malloc>
 80140ec:	4602      	mov	r2, r0
 80140ee:	6320      	str	r0, [r4, #48]	; 0x30
 80140f0:	b920      	cbnz	r0, 80140fc <rand+0x20>
 80140f2:	4b12      	ldr	r3, [pc, #72]	; (801413c <rand+0x60>)
 80140f4:	4812      	ldr	r0, [pc, #72]	; (8014140 <rand+0x64>)
 80140f6:	2152      	movs	r1, #82	; 0x52
 80140f8:	f7ff ff1e 	bl	8013f38 <__assert_func>
 80140fc:	4911      	ldr	r1, [pc, #68]	; (8014144 <rand+0x68>)
 80140fe:	4b12      	ldr	r3, [pc, #72]	; (8014148 <rand+0x6c>)
 8014100:	e9c0 1300 	strd	r1, r3, [r0]
 8014104:	4b11      	ldr	r3, [pc, #68]	; (801414c <rand+0x70>)
 8014106:	6083      	str	r3, [r0, #8]
 8014108:	230b      	movs	r3, #11
 801410a:	8183      	strh	r3, [r0, #12]
 801410c:	2100      	movs	r1, #0
 801410e:	2001      	movs	r0, #1
 8014110:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014114:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014116:	480e      	ldr	r0, [pc, #56]	; (8014150 <rand+0x74>)
 8014118:	690b      	ldr	r3, [r1, #16]
 801411a:	694c      	ldr	r4, [r1, #20]
 801411c:	4a0d      	ldr	r2, [pc, #52]	; (8014154 <rand+0x78>)
 801411e:	4358      	muls	r0, r3
 8014120:	fb02 0004 	mla	r0, r2, r4, r0
 8014124:	fba3 3202 	umull	r3, r2, r3, r2
 8014128:	3301      	adds	r3, #1
 801412a:	eb40 0002 	adc.w	r0, r0, r2
 801412e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014132:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014136:	bd10      	pop	{r4, pc}
 8014138:	2000008c 	.word	0x2000008c
 801413c:	080180b0 	.word	0x080180b0
 8014140:	080180c7 	.word	0x080180c7
 8014144:	abcd330e 	.word	0xabcd330e
 8014148:	e66d1234 	.word	0xe66d1234
 801414c:	0005deec 	.word	0x0005deec
 8014150:	5851f42d 	.word	0x5851f42d
 8014154:	4c957f2d 	.word	0x4c957f2d

08014158 <std>:
 8014158:	2300      	movs	r3, #0
 801415a:	b510      	push	{r4, lr}
 801415c:	4604      	mov	r4, r0
 801415e:	e9c0 3300 	strd	r3, r3, [r0]
 8014162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014166:	6083      	str	r3, [r0, #8]
 8014168:	8181      	strh	r1, [r0, #12]
 801416a:	6643      	str	r3, [r0, #100]	; 0x64
 801416c:	81c2      	strh	r2, [r0, #14]
 801416e:	6183      	str	r3, [r0, #24]
 8014170:	4619      	mov	r1, r3
 8014172:	2208      	movs	r2, #8
 8014174:	305c      	adds	r0, #92	; 0x5c
 8014176:	f000 f928 	bl	80143ca <memset>
 801417a:	4b0d      	ldr	r3, [pc, #52]	; (80141b0 <std+0x58>)
 801417c:	6263      	str	r3, [r4, #36]	; 0x24
 801417e:	4b0d      	ldr	r3, [pc, #52]	; (80141b4 <std+0x5c>)
 8014180:	62a3      	str	r3, [r4, #40]	; 0x28
 8014182:	4b0d      	ldr	r3, [pc, #52]	; (80141b8 <std+0x60>)
 8014184:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014186:	4b0d      	ldr	r3, [pc, #52]	; (80141bc <std+0x64>)
 8014188:	6323      	str	r3, [r4, #48]	; 0x30
 801418a:	4b0d      	ldr	r3, [pc, #52]	; (80141c0 <std+0x68>)
 801418c:	6224      	str	r4, [r4, #32]
 801418e:	429c      	cmp	r4, r3
 8014190:	d006      	beq.n	80141a0 <std+0x48>
 8014192:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014196:	4294      	cmp	r4, r2
 8014198:	d002      	beq.n	80141a0 <std+0x48>
 801419a:	33d0      	adds	r3, #208	; 0xd0
 801419c:	429c      	cmp	r4, r3
 801419e:	d105      	bne.n	80141ac <std+0x54>
 80141a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80141a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141a8:	f000 b9e8 	b.w	801457c <__retarget_lock_init_recursive>
 80141ac:	bd10      	pop	{r4, pc}
 80141ae:	bf00      	nop
 80141b0:	08014325 	.word	0x08014325
 80141b4:	08014347 	.word	0x08014347
 80141b8:	0801437f 	.word	0x0801437f
 80141bc:	080143a3 	.word	0x080143a3
 80141c0:	2000c6b4 	.word	0x2000c6b4

080141c4 <stdio_exit_handler>:
 80141c4:	4a02      	ldr	r2, [pc, #8]	; (80141d0 <stdio_exit_handler+0xc>)
 80141c6:	4903      	ldr	r1, [pc, #12]	; (80141d4 <stdio_exit_handler+0x10>)
 80141c8:	4803      	ldr	r0, [pc, #12]	; (80141d8 <stdio_exit_handler+0x14>)
 80141ca:	f000 b87b 	b.w	80142c4 <_fwalk_sglue>
 80141ce:	bf00      	nop
 80141d0:	20000034 	.word	0x20000034
 80141d4:	08014cf9 	.word	0x08014cf9
 80141d8:	20000040 	.word	0x20000040

080141dc <cleanup_stdio>:
 80141dc:	6841      	ldr	r1, [r0, #4]
 80141de:	4b0c      	ldr	r3, [pc, #48]	; (8014210 <cleanup_stdio+0x34>)
 80141e0:	4299      	cmp	r1, r3
 80141e2:	b510      	push	{r4, lr}
 80141e4:	4604      	mov	r4, r0
 80141e6:	d001      	beq.n	80141ec <cleanup_stdio+0x10>
 80141e8:	f000 fd86 	bl	8014cf8 <_fflush_r>
 80141ec:	68a1      	ldr	r1, [r4, #8]
 80141ee:	4b09      	ldr	r3, [pc, #36]	; (8014214 <cleanup_stdio+0x38>)
 80141f0:	4299      	cmp	r1, r3
 80141f2:	d002      	beq.n	80141fa <cleanup_stdio+0x1e>
 80141f4:	4620      	mov	r0, r4
 80141f6:	f000 fd7f 	bl	8014cf8 <_fflush_r>
 80141fa:	68e1      	ldr	r1, [r4, #12]
 80141fc:	4b06      	ldr	r3, [pc, #24]	; (8014218 <cleanup_stdio+0x3c>)
 80141fe:	4299      	cmp	r1, r3
 8014200:	d004      	beq.n	801420c <cleanup_stdio+0x30>
 8014202:	4620      	mov	r0, r4
 8014204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014208:	f000 bd76 	b.w	8014cf8 <_fflush_r>
 801420c:	bd10      	pop	{r4, pc}
 801420e:	bf00      	nop
 8014210:	2000c6b4 	.word	0x2000c6b4
 8014214:	2000c71c 	.word	0x2000c71c
 8014218:	2000c784 	.word	0x2000c784

0801421c <global_stdio_init.part.0>:
 801421c:	b510      	push	{r4, lr}
 801421e:	4b0b      	ldr	r3, [pc, #44]	; (801424c <global_stdio_init.part.0+0x30>)
 8014220:	4c0b      	ldr	r4, [pc, #44]	; (8014250 <global_stdio_init.part.0+0x34>)
 8014222:	4a0c      	ldr	r2, [pc, #48]	; (8014254 <global_stdio_init.part.0+0x38>)
 8014224:	601a      	str	r2, [r3, #0]
 8014226:	4620      	mov	r0, r4
 8014228:	2200      	movs	r2, #0
 801422a:	2104      	movs	r1, #4
 801422c:	f7ff ff94 	bl	8014158 <std>
 8014230:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014234:	2201      	movs	r2, #1
 8014236:	2109      	movs	r1, #9
 8014238:	f7ff ff8e 	bl	8014158 <std>
 801423c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014240:	2202      	movs	r2, #2
 8014242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014246:	2112      	movs	r1, #18
 8014248:	f7ff bf86 	b.w	8014158 <std>
 801424c:	2000c7ec 	.word	0x2000c7ec
 8014250:	2000c6b4 	.word	0x2000c6b4
 8014254:	080141c5 	.word	0x080141c5

08014258 <__sfp_lock_acquire>:
 8014258:	4801      	ldr	r0, [pc, #4]	; (8014260 <__sfp_lock_acquire+0x8>)
 801425a:	f000 b990 	b.w	801457e <__retarget_lock_acquire_recursive>
 801425e:	bf00      	nop
 8014260:	2000c7f5 	.word	0x2000c7f5

08014264 <__sfp_lock_release>:
 8014264:	4801      	ldr	r0, [pc, #4]	; (801426c <__sfp_lock_release+0x8>)
 8014266:	f000 b98b 	b.w	8014580 <__retarget_lock_release_recursive>
 801426a:	bf00      	nop
 801426c:	2000c7f5 	.word	0x2000c7f5

08014270 <__sinit>:
 8014270:	b510      	push	{r4, lr}
 8014272:	4604      	mov	r4, r0
 8014274:	f7ff fff0 	bl	8014258 <__sfp_lock_acquire>
 8014278:	6a23      	ldr	r3, [r4, #32]
 801427a:	b11b      	cbz	r3, 8014284 <__sinit+0x14>
 801427c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014280:	f7ff bff0 	b.w	8014264 <__sfp_lock_release>
 8014284:	4b04      	ldr	r3, [pc, #16]	; (8014298 <__sinit+0x28>)
 8014286:	6223      	str	r3, [r4, #32]
 8014288:	4b04      	ldr	r3, [pc, #16]	; (801429c <__sinit+0x2c>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d1f5      	bne.n	801427c <__sinit+0xc>
 8014290:	f7ff ffc4 	bl	801421c <global_stdio_init.part.0>
 8014294:	e7f2      	b.n	801427c <__sinit+0xc>
 8014296:	bf00      	nop
 8014298:	080141dd 	.word	0x080141dd
 801429c:	2000c7ec 	.word	0x2000c7ec

080142a0 <fiprintf>:
 80142a0:	b40e      	push	{r1, r2, r3}
 80142a2:	b503      	push	{r0, r1, lr}
 80142a4:	4601      	mov	r1, r0
 80142a6:	ab03      	add	r3, sp, #12
 80142a8:	4805      	ldr	r0, [pc, #20]	; (80142c0 <fiprintf+0x20>)
 80142aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ae:	6800      	ldr	r0, [r0, #0]
 80142b0:	9301      	str	r3, [sp, #4]
 80142b2:	f000 f9f1 	bl	8014698 <_vfiprintf_r>
 80142b6:	b002      	add	sp, #8
 80142b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142bc:	b003      	add	sp, #12
 80142be:	4770      	bx	lr
 80142c0:	2000008c 	.word	0x2000008c

080142c4 <_fwalk_sglue>:
 80142c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142c8:	4607      	mov	r7, r0
 80142ca:	4688      	mov	r8, r1
 80142cc:	4614      	mov	r4, r2
 80142ce:	2600      	movs	r6, #0
 80142d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80142d4:	f1b9 0901 	subs.w	r9, r9, #1
 80142d8:	d505      	bpl.n	80142e6 <_fwalk_sglue+0x22>
 80142da:	6824      	ldr	r4, [r4, #0]
 80142dc:	2c00      	cmp	r4, #0
 80142de:	d1f7      	bne.n	80142d0 <_fwalk_sglue+0xc>
 80142e0:	4630      	mov	r0, r6
 80142e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142e6:	89ab      	ldrh	r3, [r5, #12]
 80142e8:	2b01      	cmp	r3, #1
 80142ea:	d907      	bls.n	80142fc <_fwalk_sglue+0x38>
 80142ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80142f0:	3301      	adds	r3, #1
 80142f2:	d003      	beq.n	80142fc <_fwalk_sglue+0x38>
 80142f4:	4629      	mov	r1, r5
 80142f6:	4638      	mov	r0, r7
 80142f8:	47c0      	blx	r8
 80142fa:	4306      	orrs	r6, r0
 80142fc:	3568      	adds	r5, #104	; 0x68
 80142fe:	e7e9      	b.n	80142d4 <_fwalk_sglue+0x10>

08014300 <iprintf>:
 8014300:	b40f      	push	{r0, r1, r2, r3}
 8014302:	b507      	push	{r0, r1, r2, lr}
 8014304:	4906      	ldr	r1, [pc, #24]	; (8014320 <iprintf+0x20>)
 8014306:	ab04      	add	r3, sp, #16
 8014308:	6808      	ldr	r0, [r1, #0]
 801430a:	f853 2b04 	ldr.w	r2, [r3], #4
 801430e:	6881      	ldr	r1, [r0, #8]
 8014310:	9301      	str	r3, [sp, #4]
 8014312:	f000 f9c1 	bl	8014698 <_vfiprintf_r>
 8014316:	b003      	add	sp, #12
 8014318:	f85d eb04 	ldr.w	lr, [sp], #4
 801431c:	b004      	add	sp, #16
 801431e:	4770      	bx	lr
 8014320:	2000008c 	.word	0x2000008c

08014324 <__sread>:
 8014324:	b510      	push	{r4, lr}
 8014326:	460c      	mov	r4, r1
 8014328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801432c:	f000 f8ce 	bl	80144cc <_read_r>
 8014330:	2800      	cmp	r0, #0
 8014332:	bfab      	itete	ge
 8014334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014336:	89a3      	ldrhlt	r3, [r4, #12]
 8014338:	181b      	addge	r3, r3, r0
 801433a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801433e:	bfac      	ite	ge
 8014340:	6563      	strge	r3, [r4, #84]	; 0x54
 8014342:	81a3      	strhlt	r3, [r4, #12]
 8014344:	bd10      	pop	{r4, pc}

08014346 <__swrite>:
 8014346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801434a:	461f      	mov	r7, r3
 801434c:	898b      	ldrh	r3, [r1, #12]
 801434e:	05db      	lsls	r3, r3, #23
 8014350:	4605      	mov	r5, r0
 8014352:	460c      	mov	r4, r1
 8014354:	4616      	mov	r6, r2
 8014356:	d505      	bpl.n	8014364 <__swrite+0x1e>
 8014358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801435c:	2302      	movs	r3, #2
 801435e:	2200      	movs	r2, #0
 8014360:	f000 f8a2 	bl	80144a8 <_lseek_r>
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801436a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801436e:	81a3      	strh	r3, [r4, #12]
 8014370:	4632      	mov	r2, r6
 8014372:	463b      	mov	r3, r7
 8014374:	4628      	mov	r0, r5
 8014376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801437a:	f000 b8c9 	b.w	8014510 <_write_r>

0801437e <__sseek>:
 801437e:	b510      	push	{r4, lr}
 8014380:	460c      	mov	r4, r1
 8014382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014386:	f000 f88f 	bl	80144a8 <_lseek_r>
 801438a:	1c43      	adds	r3, r0, #1
 801438c:	89a3      	ldrh	r3, [r4, #12]
 801438e:	bf15      	itete	ne
 8014390:	6560      	strne	r0, [r4, #84]	; 0x54
 8014392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801439a:	81a3      	strheq	r3, [r4, #12]
 801439c:	bf18      	it	ne
 801439e:	81a3      	strhne	r3, [r4, #12]
 80143a0:	bd10      	pop	{r4, pc}

080143a2 <__sclose>:
 80143a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a6:	f000 b819 	b.w	80143dc <_close_r>

080143aa <memcmp>:
 80143aa:	b510      	push	{r4, lr}
 80143ac:	3901      	subs	r1, #1
 80143ae:	4402      	add	r2, r0
 80143b0:	4290      	cmp	r0, r2
 80143b2:	d101      	bne.n	80143b8 <memcmp+0xe>
 80143b4:	2000      	movs	r0, #0
 80143b6:	e005      	b.n	80143c4 <memcmp+0x1a>
 80143b8:	7803      	ldrb	r3, [r0, #0]
 80143ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80143be:	42a3      	cmp	r3, r4
 80143c0:	d001      	beq.n	80143c6 <memcmp+0x1c>
 80143c2:	1b18      	subs	r0, r3, r4
 80143c4:	bd10      	pop	{r4, pc}
 80143c6:	3001      	adds	r0, #1
 80143c8:	e7f2      	b.n	80143b0 <memcmp+0x6>

080143ca <memset>:
 80143ca:	4402      	add	r2, r0
 80143cc:	4603      	mov	r3, r0
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d100      	bne.n	80143d4 <memset+0xa>
 80143d2:	4770      	bx	lr
 80143d4:	f803 1b01 	strb.w	r1, [r3], #1
 80143d8:	e7f9      	b.n	80143ce <memset+0x4>
	...

080143dc <_close_r>:
 80143dc:	b538      	push	{r3, r4, r5, lr}
 80143de:	4d06      	ldr	r5, [pc, #24]	; (80143f8 <_close_r+0x1c>)
 80143e0:	2300      	movs	r3, #0
 80143e2:	4604      	mov	r4, r0
 80143e4:	4608      	mov	r0, r1
 80143e6:	602b      	str	r3, [r5, #0]
 80143e8:	f7ec fbcf 	bl	8000b8a <_close>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_close_r+0x1a>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_close_r+0x1a>
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	2000c7f0 	.word	0x2000c7f0

080143fc <_reclaim_reent>:
 80143fc:	4b29      	ldr	r3, [pc, #164]	; (80144a4 <_reclaim_reent+0xa8>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	4283      	cmp	r3, r0
 8014402:	b570      	push	{r4, r5, r6, lr}
 8014404:	4604      	mov	r4, r0
 8014406:	d04b      	beq.n	80144a0 <_reclaim_reent+0xa4>
 8014408:	69c3      	ldr	r3, [r0, #28]
 801440a:	b143      	cbz	r3, 801441e <_reclaim_reent+0x22>
 801440c:	68db      	ldr	r3, [r3, #12]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d144      	bne.n	801449c <_reclaim_reent+0xa0>
 8014412:	69e3      	ldr	r3, [r4, #28]
 8014414:	6819      	ldr	r1, [r3, #0]
 8014416:	b111      	cbz	r1, 801441e <_reclaim_reent+0x22>
 8014418:	4620      	mov	r0, r4
 801441a:	f000 f8c7 	bl	80145ac <_free_r>
 801441e:	6961      	ldr	r1, [r4, #20]
 8014420:	b111      	cbz	r1, 8014428 <_reclaim_reent+0x2c>
 8014422:	4620      	mov	r0, r4
 8014424:	f000 f8c2 	bl	80145ac <_free_r>
 8014428:	69e1      	ldr	r1, [r4, #28]
 801442a:	b111      	cbz	r1, 8014432 <_reclaim_reent+0x36>
 801442c:	4620      	mov	r0, r4
 801442e:	f000 f8bd 	bl	80145ac <_free_r>
 8014432:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014434:	b111      	cbz	r1, 801443c <_reclaim_reent+0x40>
 8014436:	4620      	mov	r0, r4
 8014438:	f000 f8b8 	bl	80145ac <_free_r>
 801443c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801443e:	b111      	cbz	r1, 8014446 <_reclaim_reent+0x4a>
 8014440:	4620      	mov	r0, r4
 8014442:	f000 f8b3 	bl	80145ac <_free_r>
 8014446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014448:	b111      	cbz	r1, 8014450 <_reclaim_reent+0x54>
 801444a:	4620      	mov	r0, r4
 801444c:	f000 f8ae 	bl	80145ac <_free_r>
 8014450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014452:	b111      	cbz	r1, 801445a <_reclaim_reent+0x5e>
 8014454:	4620      	mov	r0, r4
 8014456:	f000 f8a9 	bl	80145ac <_free_r>
 801445a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801445c:	b111      	cbz	r1, 8014464 <_reclaim_reent+0x68>
 801445e:	4620      	mov	r0, r4
 8014460:	f000 f8a4 	bl	80145ac <_free_r>
 8014464:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014466:	b111      	cbz	r1, 801446e <_reclaim_reent+0x72>
 8014468:	4620      	mov	r0, r4
 801446a:	f000 f89f 	bl	80145ac <_free_r>
 801446e:	6a23      	ldr	r3, [r4, #32]
 8014470:	b1b3      	cbz	r3, 80144a0 <_reclaim_reent+0xa4>
 8014472:	4620      	mov	r0, r4
 8014474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014478:	4718      	bx	r3
 801447a:	5949      	ldr	r1, [r1, r5]
 801447c:	b941      	cbnz	r1, 8014490 <_reclaim_reent+0x94>
 801447e:	3504      	adds	r5, #4
 8014480:	69e3      	ldr	r3, [r4, #28]
 8014482:	2d80      	cmp	r5, #128	; 0x80
 8014484:	68d9      	ldr	r1, [r3, #12]
 8014486:	d1f8      	bne.n	801447a <_reclaim_reent+0x7e>
 8014488:	4620      	mov	r0, r4
 801448a:	f000 f88f 	bl	80145ac <_free_r>
 801448e:	e7c0      	b.n	8014412 <_reclaim_reent+0x16>
 8014490:	680e      	ldr	r6, [r1, #0]
 8014492:	4620      	mov	r0, r4
 8014494:	f000 f88a 	bl	80145ac <_free_r>
 8014498:	4631      	mov	r1, r6
 801449a:	e7ef      	b.n	801447c <_reclaim_reent+0x80>
 801449c:	2500      	movs	r5, #0
 801449e:	e7ef      	b.n	8014480 <_reclaim_reent+0x84>
 80144a0:	bd70      	pop	{r4, r5, r6, pc}
 80144a2:	bf00      	nop
 80144a4:	2000008c 	.word	0x2000008c

080144a8 <_lseek_r>:
 80144a8:	b538      	push	{r3, r4, r5, lr}
 80144aa:	4d07      	ldr	r5, [pc, #28]	; (80144c8 <_lseek_r+0x20>)
 80144ac:	4604      	mov	r4, r0
 80144ae:	4608      	mov	r0, r1
 80144b0:	4611      	mov	r1, r2
 80144b2:	2200      	movs	r2, #0
 80144b4:	602a      	str	r2, [r5, #0]
 80144b6:	461a      	mov	r2, r3
 80144b8:	f7ec fb8e 	bl	8000bd8 <_lseek>
 80144bc:	1c43      	adds	r3, r0, #1
 80144be:	d102      	bne.n	80144c6 <_lseek_r+0x1e>
 80144c0:	682b      	ldr	r3, [r5, #0]
 80144c2:	b103      	cbz	r3, 80144c6 <_lseek_r+0x1e>
 80144c4:	6023      	str	r3, [r4, #0]
 80144c6:	bd38      	pop	{r3, r4, r5, pc}
 80144c8:	2000c7f0 	.word	0x2000c7f0

080144cc <_read_r>:
 80144cc:	b538      	push	{r3, r4, r5, lr}
 80144ce:	4d07      	ldr	r5, [pc, #28]	; (80144ec <_read_r+0x20>)
 80144d0:	4604      	mov	r4, r0
 80144d2:	4608      	mov	r0, r1
 80144d4:	4611      	mov	r1, r2
 80144d6:	2200      	movs	r2, #0
 80144d8:	602a      	str	r2, [r5, #0]
 80144da:	461a      	mov	r2, r3
 80144dc:	f7ec fb1c 	bl	8000b18 <_read>
 80144e0:	1c43      	adds	r3, r0, #1
 80144e2:	d102      	bne.n	80144ea <_read_r+0x1e>
 80144e4:	682b      	ldr	r3, [r5, #0]
 80144e6:	b103      	cbz	r3, 80144ea <_read_r+0x1e>
 80144e8:	6023      	str	r3, [r4, #0]
 80144ea:	bd38      	pop	{r3, r4, r5, pc}
 80144ec:	2000c7f0 	.word	0x2000c7f0

080144f0 <_sbrk_r>:
 80144f0:	b538      	push	{r3, r4, r5, lr}
 80144f2:	4d06      	ldr	r5, [pc, #24]	; (801450c <_sbrk_r+0x1c>)
 80144f4:	2300      	movs	r3, #0
 80144f6:	4604      	mov	r4, r0
 80144f8:	4608      	mov	r0, r1
 80144fa:	602b      	str	r3, [r5, #0]
 80144fc:	f7ec fb7a 	bl	8000bf4 <_sbrk>
 8014500:	1c43      	adds	r3, r0, #1
 8014502:	d102      	bne.n	801450a <_sbrk_r+0x1a>
 8014504:	682b      	ldr	r3, [r5, #0]
 8014506:	b103      	cbz	r3, 801450a <_sbrk_r+0x1a>
 8014508:	6023      	str	r3, [r4, #0]
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	2000c7f0 	.word	0x2000c7f0

08014510 <_write_r>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4d07      	ldr	r5, [pc, #28]	; (8014530 <_write_r+0x20>)
 8014514:	4604      	mov	r4, r0
 8014516:	4608      	mov	r0, r1
 8014518:	4611      	mov	r1, r2
 801451a:	2200      	movs	r2, #0
 801451c:	602a      	str	r2, [r5, #0]
 801451e:	461a      	mov	r2, r3
 8014520:	f7ec fb17 	bl	8000b52 <_write>
 8014524:	1c43      	adds	r3, r0, #1
 8014526:	d102      	bne.n	801452e <_write_r+0x1e>
 8014528:	682b      	ldr	r3, [r5, #0]
 801452a:	b103      	cbz	r3, 801452e <_write_r+0x1e>
 801452c:	6023      	str	r3, [r4, #0]
 801452e:	bd38      	pop	{r3, r4, r5, pc}
 8014530:	2000c7f0 	.word	0x2000c7f0

08014534 <__libc_init_array>:
 8014534:	b570      	push	{r4, r5, r6, lr}
 8014536:	4d0d      	ldr	r5, [pc, #52]	; (801456c <__libc_init_array+0x38>)
 8014538:	4c0d      	ldr	r4, [pc, #52]	; (8014570 <__libc_init_array+0x3c>)
 801453a:	1b64      	subs	r4, r4, r5
 801453c:	10a4      	asrs	r4, r4, #2
 801453e:	2600      	movs	r6, #0
 8014540:	42a6      	cmp	r6, r4
 8014542:	d109      	bne.n	8014558 <__libc_init_array+0x24>
 8014544:	4d0b      	ldr	r5, [pc, #44]	; (8014574 <__libc_init_array+0x40>)
 8014546:	4c0c      	ldr	r4, [pc, #48]	; (8014578 <__libc_init_array+0x44>)
 8014548:	f000 fd5c 	bl	8015004 <_init>
 801454c:	1b64      	subs	r4, r4, r5
 801454e:	10a4      	asrs	r4, r4, #2
 8014550:	2600      	movs	r6, #0
 8014552:	42a6      	cmp	r6, r4
 8014554:	d105      	bne.n	8014562 <__libc_init_array+0x2e>
 8014556:	bd70      	pop	{r4, r5, r6, pc}
 8014558:	f855 3b04 	ldr.w	r3, [r5], #4
 801455c:	4798      	blx	r3
 801455e:	3601      	adds	r6, #1
 8014560:	e7ee      	b.n	8014540 <__libc_init_array+0xc>
 8014562:	f855 3b04 	ldr.w	r3, [r5], #4
 8014566:	4798      	blx	r3
 8014568:	3601      	adds	r6, #1
 801456a:	e7f2      	b.n	8014552 <__libc_init_array+0x1e>
 801456c:	0801815c 	.word	0x0801815c
 8014570:	0801815c 	.word	0x0801815c
 8014574:	0801815c 	.word	0x0801815c
 8014578:	08018160 	.word	0x08018160

0801457c <__retarget_lock_init_recursive>:
 801457c:	4770      	bx	lr

0801457e <__retarget_lock_acquire_recursive>:
 801457e:	4770      	bx	lr

08014580 <__retarget_lock_release_recursive>:
 8014580:	4770      	bx	lr

08014582 <memcpy>:
 8014582:	440a      	add	r2, r1
 8014584:	4291      	cmp	r1, r2
 8014586:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801458a:	d100      	bne.n	801458e <memcpy+0xc>
 801458c:	4770      	bx	lr
 801458e:	b510      	push	{r4, lr}
 8014590:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014598:	4291      	cmp	r1, r2
 801459a:	d1f9      	bne.n	8014590 <memcpy+0xe>
 801459c:	bd10      	pop	{r4, pc}

0801459e <abort>:
 801459e:	b508      	push	{r3, lr}
 80145a0:	2006      	movs	r0, #6
 80145a2:	f000 fc8f 	bl	8014ec4 <raise>
 80145a6:	2001      	movs	r0, #1
 80145a8:	f7ec faac 	bl	8000b04 <_exit>

080145ac <_free_r>:
 80145ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145ae:	2900      	cmp	r1, #0
 80145b0:	d044      	beq.n	801463c <_free_r+0x90>
 80145b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145b6:	9001      	str	r0, [sp, #4]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	f1a1 0404 	sub.w	r4, r1, #4
 80145be:	bfb8      	it	lt
 80145c0:	18e4      	addlt	r4, r4, r3
 80145c2:	f7ff fd7f 	bl	80140c4 <__malloc_lock>
 80145c6:	4a1e      	ldr	r2, [pc, #120]	; (8014640 <_free_r+0x94>)
 80145c8:	9801      	ldr	r0, [sp, #4]
 80145ca:	6813      	ldr	r3, [r2, #0]
 80145cc:	b933      	cbnz	r3, 80145dc <_free_r+0x30>
 80145ce:	6063      	str	r3, [r4, #4]
 80145d0:	6014      	str	r4, [r2, #0]
 80145d2:	b003      	add	sp, #12
 80145d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80145d8:	f7ff bd7a 	b.w	80140d0 <__malloc_unlock>
 80145dc:	42a3      	cmp	r3, r4
 80145de:	d908      	bls.n	80145f2 <_free_r+0x46>
 80145e0:	6825      	ldr	r5, [r4, #0]
 80145e2:	1961      	adds	r1, r4, r5
 80145e4:	428b      	cmp	r3, r1
 80145e6:	bf01      	itttt	eq
 80145e8:	6819      	ldreq	r1, [r3, #0]
 80145ea:	685b      	ldreq	r3, [r3, #4]
 80145ec:	1949      	addeq	r1, r1, r5
 80145ee:	6021      	streq	r1, [r4, #0]
 80145f0:	e7ed      	b.n	80145ce <_free_r+0x22>
 80145f2:	461a      	mov	r2, r3
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	b10b      	cbz	r3, 80145fc <_free_r+0x50>
 80145f8:	42a3      	cmp	r3, r4
 80145fa:	d9fa      	bls.n	80145f2 <_free_r+0x46>
 80145fc:	6811      	ldr	r1, [r2, #0]
 80145fe:	1855      	adds	r5, r2, r1
 8014600:	42a5      	cmp	r5, r4
 8014602:	d10b      	bne.n	801461c <_free_r+0x70>
 8014604:	6824      	ldr	r4, [r4, #0]
 8014606:	4421      	add	r1, r4
 8014608:	1854      	adds	r4, r2, r1
 801460a:	42a3      	cmp	r3, r4
 801460c:	6011      	str	r1, [r2, #0]
 801460e:	d1e0      	bne.n	80145d2 <_free_r+0x26>
 8014610:	681c      	ldr	r4, [r3, #0]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	6053      	str	r3, [r2, #4]
 8014616:	440c      	add	r4, r1
 8014618:	6014      	str	r4, [r2, #0]
 801461a:	e7da      	b.n	80145d2 <_free_r+0x26>
 801461c:	d902      	bls.n	8014624 <_free_r+0x78>
 801461e:	230c      	movs	r3, #12
 8014620:	6003      	str	r3, [r0, #0]
 8014622:	e7d6      	b.n	80145d2 <_free_r+0x26>
 8014624:	6825      	ldr	r5, [r4, #0]
 8014626:	1961      	adds	r1, r4, r5
 8014628:	428b      	cmp	r3, r1
 801462a:	bf04      	itt	eq
 801462c:	6819      	ldreq	r1, [r3, #0]
 801462e:	685b      	ldreq	r3, [r3, #4]
 8014630:	6063      	str	r3, [r4, #4]
 8014632:	bf04      	itt	eq
 8014634:	1949      	addeq	r1, r1, r5
 8014636:	6021      	streq	r1, [r4, #0]
 8014638:	6054      	str	r4, [r2, #4]
 801463a:	e7ca      	b.n	80145d2 <_free_r+0x26>
 801463c:	b003      	add	sp, #12
 801463e:	bd30      	pop	{r4, r5, pc}
 8014640:	2000c6ac 	.word	0x2000c6ac

08014644 <__sfputc_r>:
 8014644:	6893      	ldr	r3, [r2, #8]
 8014646:	3b01      	subs	r3, #1
 8014648:	2b00      	cmp	r3, #0
 801464a:	b410      	push	{r4}
 801464c:	6093      	str	r3, [r2, #8]
 801464e:	da08      	bge.n	8014662 <__sfputc_r+0x1e>
 8014650:	6994      	ldr	r4, [r2, #24]
 8014652:	42a3      	cmp	r3, r4
 8014654:	db01      	blt.n	801465a <__sfputc_r+0x16>
 8014656:	290a      	cmp	r1, #10
 8014658:	d103      	bne.n	8014662 <__sfputc_r+0x1e>
 801465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801465e:	f000 bb73 	b.w	8014d48 <__swbuf_r>
 8014662:	6813      	ldr	r3, [r2, #0]
 8014664:	1c58      	adds	r0, r3, #1
 8014666:	6010      	str	r0, [r2, #0]
 8014668:	7019      	strb	r1, [r3, #0]
 801466a:	4608      	mov	r0, r1
 801466c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014670:	4770      	bx	lr

08014672 <__sfputs_r>:
 8014672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014674:	4606      	mov	r6, r0
 8014676:	460f      	mov	r7, r1
 8014678:	4614      	mov	r4, r2
 801467a:	18d5      	adds	r5, r2, r3
 801467c:	42ac      	cmp	r4, r5
 801467e:	d101      	bne.n	8014684 <__sfputs_r+0x12>
 8014680:	2000      	movs	r0, #0
 8014682:	e007      	b.n	8014694 <__sfputs_r+0x22>
 8014684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014688:	463a      	mov	r2, r7
 801468a:	4630      	mov	r0, r6
 801468c:	f7ff ffda 	bl	8014644 <__sfputc_r>
 8014690:	1c43      	adds	r3, r0, #1
 8014692:	d1f3      	bne.n	801467c <__sfputs_r+0xa>
 8014694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014698 <_vfiprintf_r>:
 8014698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801469c:	460d      	mov	r5, r1
 801469e:	b09d      	sub	sp, #116	; 0x74
 80146a0:	4614      	mov	r4, r2
 80146a2:	4698      	mov	r8, r3
 80146a4:	4606      	mov	r6, r0
 80146a6:	b118      	cbz	r0, 80146b0 <_vfiprintf_r+0x18>
 80146a8:	6a03      	ldr	r3, [r0, #32]
 80146aa:	b90b      	cbnz	r3, 80146b0 <_vfiprintf_r+0x18>
 80146ac:	f7ff fde0 	bl	8014270 <__sinit>
 80146b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146b2:	07d9      	lsls	r1, r3, #31
 80146b4:	d405      	bmi.n	80146c2 <_vfiprintf_r+0x2a>
 80146b6:	89ab      	ldrh	r3, [r5, #12]
 80146b8:	059a      	lsls	r2, r3, #22
 80146ba:	d402      	bmi.n	80146c2 <_vfiprintf_r+0x2a>
 80146bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146be:	f7ff ff5e 	bl	801457e <__retarget_lock_acquire_recursive>
 80146c2:	89ab      	ldrh	r3, [r5, #12]
 80146c4:	071b      	lsls	r3, r3, #28
 80146c6:	d501      	bpl.n	80146cc <_vfiprintf_r+0x34>
 80146c8:	692b      	ldr	r3, [r5, #16]
 80146ca:	b99b      	cbnz	r3, 80146f4 <_vfiprintf_r+0x5c>
 80146cc:	4629      	mov	r1, r5
 80146ce:	4630      	mov	r0, r6
 80146d0:	f000 fb78 	bl	8014dc4 <__swsetup_r>
 80146d4:	b170      	cbz	r0, 80146f4 <_vfiprintf_r+0x5c>
 80146d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80146d8:	07dc      	lsls	r4, r3, #31
 80146da:	d504      	bpl.n	80146e6 <_vfiprintf_r+0x4e>
 80146dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80146e0:	b01d      	add	sp, #116	; 0x74
 80146e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e6:	89ab      	ldrh	r3, [r5, #12]
 80146e8:	0598      	lsls	r0, r3, #22
 80146ea:	d4f7      	bmi.n	80146dc <_vfiprintf_r+0x44>
 80146ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80146ee:	f7ff ff47 	bl	8014580 <__retarget_lock_release_recursive>
 80146f2:	e7f3      	b.n	80146dc <_vfiprintf_r+0x44>
 80146f4:	2300      	movs	r3, #0
 80146f6:	9309      	str	r3, [sp, #36]	; 0x24
 80146f8:	2320      	movs	r3, #32
 80146fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014702:	2330      	movs	r3, #48	; 0x30
 8014704:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80148b8 <_vfiprintf_r+0x220>
 8014708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801470c:	f04f 0901 	mov.w	r9, #1
 8014710:	4623      	mov	r3, r4
 8014712:	469a      	mov	sl, r3
 8014714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014718:	b10a      	cbz	r2, 801471e <_vfiprintf_r+0x86>
 801471a:	2a25      	cmp	r2, #37	; 0x25
 801471c:	d1f9      	bne.n	8014712 <_vfiprintf_r+0x7a>
 801471e:	ebba 0b04 	subs.w	fp, sl, r4
 8014722:	d00b      	beq.n	801473c <_vfiprintf_r+0xa4>
 8014724:	465b      	mov	r3, fp
 8014726:	4622      	mov	r2, r4
 8014728:	4629      	mov	r1, r5
 801472a:	4630      	mov	r0, r6
 801472c:	f7ff ffa1 	bl	8014672 <__sfputs_r>
 8014730:	3001      	adds	r0, #1
 8014732:	f000 80a9 	beq.w	8014888 <_vfiprintf_r+0x1f0>
 8014736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014738:	445a      	add	r2, fp
 801473a:	9209      	str	r2, [sp, #36]	; 0x24
 801473c:	f89a 3000 	ldrb.w	r3, [sl]
 8014740:	2b00      	cmp	r3, #0
 8014742:	f000 80a1 	beq.w	8014888 <_vfiprintf_r+0x1f0>
 8014746:	2300      	movs	r3, #0
 8014748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801474c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014750:	f10a 0a01 	add.w	sl, sl, #1
 8014754:	9304      	str	r3, [sp, #16]
 8014756:	9307      	str	r3, [sp, #28]
 8014758:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801475c:	931a      	str	r3, [sp, #104]	; 0x68
 801475e:	4654      	mov	r4, sl
 8014760:	2205      	movs	r2, #5
 8014762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014766:	4854      	ldr	r0, [pc, #336]	; (80148b8 <_vfiprintf_r+0x220>)
 8014768:	f7eb fd32 	bl	80001d0 <memchr>
 801476c:	9a04      	ldr	r2, [sp, #16]
 801476e:	b9d8      	cbnz	r0, 80147a8 <_vfiprintf_r+0x110>
 8014770:	06d1      	lsls	r1, r2, #27
 8014772:	bf44      	itt	mi
 8014774:	2320      	movmi	r3, #32
 8014776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801477a:	0713      	lsls	r3, r2, #28
 801477c:	bf44      	itt	mi
 801477e:	232b      	movmi	r3, #43	; 0x2b
 8014780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014784:	f89a 3000 	ldrb.w	r3, [sl]
 8014788:	2b2a      	cmp	r3, #42	; 0x2a
 801478a:	d015      	beq.n	80147b8 <_vfiprintf_r+0x120>
 801478c:	9a07      	ldr	r2, [sp, #28]
 801478e:	4654      	mov	r4, sl
 8014790:	2000      	movs	r0, #0
 8014792:	f04f 0c0a 	mov.w	ip, #10
 8014796:	4621      	mov	r1, r4
 8014798:	f811 3b01 	ldrb.w	r3, [r1], #1
 801479c:	3b30      	subs	r3, #48	; 0x30
 801479e:	2b09      	cmp	r3, #9
 80147a0:	d94d      	bls.n	801483e <_vfiprintf_r+0x1a6>
 80147a2:	b1b0      	cbz	r0, 80147d2 <_vfiprintf_r+0x13a>
 80147a4:	9207      	str	r2, [sp, #28]
 80147a6:	e014      	b.n	80147d2 <_vfiprintf_r+0x13a>
 80147a8:	eba0 0308 	sub.w	r3, r0, r8
 80147ac:	fa09 f303 	lsl.w	r3, r9, r3
 80147b0:	4313      	orrs	r3, r2
 80147b2:	9304      	str	r3, [sp, #16]
 80147b4:	46a2      	mov	sl, r4
 80147b6:	e7d2      	b.n	801475e <_vfiprintf_r+0xc6>
 80147b8:	9b03      	ldr	r3, [sp, #12]
 80147ba:	1d19      	adds	r1, r3, #4
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	9103      	str	r1, [sp, #12]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	bfbb      	ittet	lt
 80147c4:	425b      	neglt	r3, r3
 80147c6:	f042 0202 	orrlt.w	r2, r2, #2
 80147ca:	9307      	strge	r3, [sp, #28]
 80147cc:	9307      	strlt	r3, [sp, #28]
 80147ce:	bfb8      	it	lt
 80147d0:	9204      	strlt	r2, [sp, #16]
 80147d2:	7823      	ldrb	r3, [r4, #0]
 80147d4:	2b2e      	cmp	r3, #46	; 0x2e
 80147d6:	d10c      	bne.n	80147f2 <_vfiprintf_r+0x15a>
 80147d8:	7863      	ldrb	r3, [r4, #1]
 80147da:	2b2a      	cmp	r3, #42	; 0x2a
 80147dc:	d134      	bne.n	8014848 <_vfiprintf_r+0x1b0>
 80147de:	9b03      	ldr	r3, [sp, #12]
 80147e0:	1d1a      	adds	r2, r3, #4
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	9203      	str	r2, [sp, #12]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	bfb8      	it	lt
 80147ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147ee:	3402      	adds	r4, #2
 80147f0:	9305      	str	r3, [sp, #20]
 80147f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80148c8 <_vfiprintf_r+0x230>
 80147f6:	7821      	ldrb	r1, [r4, #0]
 80147f8:	2203      	movs	r2, #3
 80147fa:	4650      	mov	r0, sl
 80147fc:	f7eb fce8 	bl	80001d0 <memchr>
 8014800:	b138      	cbz	r0, 8014812 <_vfiprintf_r+0x17a>
 8014802:	9b04      	ldr	r3, [sp, #16]
 8014804:	eba0 000a 	sub.w	r0, r0, sl
 8014808:	2240      	movs	r2, #64	; 0x40
 801480a:	4082      	lsls	r2, r0
 801480c:	4313      	orrs	r3, r2
 801480e:	3401      	adds	r4, #1
 8014810:	9304      	str	r3, [sp, #16]
 8014812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014816:	4829      	ldr	r0, [pc, #164]	; (80148bc <_vfiprintf_r+0x224>)
 8014818:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801481c:	2206      	movs	r2, #6
 801481e:	f7eb fcd7 	bl	80001d0 <memchr>
 8014822:	2800      	cmp	r0, #0
 8014824:	d03f      	beq.n	80148a6 <_vfiprintf_r+0x20e>
 8014826:	4b26      	ldr	r3, [pc, #152]	; (80148c0 <_vfiprintf_r+0x228>)
 8014828:	bb1b      	cbnz	r3, 8014872 <_vfiprintf_r+0x1da>
 801482a:	9b03      	ldr	r3, [sp, #12]
 801482c:	3307      	adds	r3, #7
 801482e:	f023 0307 	bic.w	r3, r3, #7
 8014832:	3308      	adds	r3, #8
 8014834:	9303      	str	r3, [sp, #12]
 8014836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014838:	443b      	add	r3, r7
 801483a:	9309      	str	r3, [sp, #36]	; 0x24
 801483c:	e768      	b.n	8014710 <_vfiprintf_r+0x78>
 801483e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014842:	460c      	mov	r4, r1
 8014844:	2001      	movs	r0, #1
 8014846:	e7a6      	b.n	8014796 <_vfiprintf_r+0xfe>
 8014848:	2300      	movs	r3, #0
 801484a:	3401      	adds	r4, #1
 801484c:	9305      	str	r3, [sp, #20]
 801484e:	4619      	mov	r1, r3
 8014850:	f04f 0c0a 	mov.w	ip, #10
 8014854:	4620      	mov	r0, r4
 8014856:	f810 2b01 	ldrb.w	r2, [r0], #1
 801485a:	3a30      	subs	r2, #48	; 0x30
 801485c:	2a09      	cmp	r2, #9
 801485e:	d903      	bls.n	8014868 <_vfiprintf_r+0x1d0>
 8014860:	2b00      	cmp	r3, #0
 8014862:	d0c6      	beq.n	80147f2 <_vfiprintf_r+0x15a>
 8014864:	9105      	str	r1, [sp, #20]
 8014866:	e7c4      	b.n	80147f2 <_vfiprintf_r+0x15a>
 8014868:	fb0c 2101 	mla	r1, ip, r1, r2
 801486c:	4604      	mov	r4, r0
 801486e:	2301      	movs	r3, #1
 8014870:	e7f0      	b.n	8014854 <_vfiprintf_r+0x1bc>
 8014872:	ab03      	add	r3, sp, #12
 8014874:	9300      	str	r3, [sp, #0]
 8014876:	462a      	mov	r2, r5
 8014878:	4b12      	ldr	r3, [pc, #72]	; (80148c4 <_vfiprintf_r+0x22c>)
 801487a:	a904      	add	r1, sp, #16
 801487c:	4630      	mov	r0, r6
 801487e:	f3af 8000 	nop.w
 8014882:	4607      	mov	r7, r0
 8014884:	1c78      	adds	r0, r7, #1
 8014886:	d1d6      	bne.n	8014836 <_vfiprintf_r+0x19e>
 8014888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801488a:	07d9      	lsls	r1, r3, #31
 801488c:	d405      	bmi.n	801489a <_vfiprintf_r+0x202>
 801488e:	89ab      	ldrh	r3, [r5, #12]
 8014890:	059a      	lsls	r2, r3, #22
 8014892:	d402      	bmi.n	801489a <_vfiprintf_r+0x202>
 8014894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014896:	f7ff fe73 	bl	8014580 <__retarget_lock_release_recursive>
 801489a:	89ab      	ldrh	r3, [r5, #12]
 801489c:	065b      	lsls	r3, r3, #25
 801489e:	f53f af1d 	bmi.w	80146dc <_vfiprintf_r+0x44>
 80148a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80148a4:	e71c      	b.n	80146e0 <_vfiprintf_r+0x48>
 80148a6:	ab03      	add	r3, sp, #12
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	462a      	mov	r2, r5
 80148ac:	4b05      	ldr	r3, [pc, #20]	; (80148c4 <_vfiprintf_r+0x22c>)
 80148ae:	a904      	add	r1, sp, #16
 80148b0:	4630      	mov	r0, r6
 80148b2:	f000 f879 	bl	80149a8 <_printf_i>
 80148b6:	e7e4      	b.n	8014882 <_vfiprintf_r+0x1ea>
 80148b8:	0801811f 	.word	0x0801811f
 80148bc:	08018129 	.word	0x08018129
 80148c0:	00000000 	.word	0x00000000
 80148c4:	08014673 	.word	0x08014673
 80148c8:	08018125 	.word	0x08018125

080148cc <_printf_common>:
 80148cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148d0:	4616      	mov	r6, r2
 80148d2:	4699      	mov	r9, r3
 80148d4:	688a      	ldr	r2, [r1, #8]
 80148d6:	690b      	ldr	r3, [r1, #16]
 80148d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80148dc:	4293      	cmp	r3, r2
 80148de:	bfb8      	it	lt
 80148e0:	4613      	movlt	r3, r2
 80148e2:	6033      	str	r3, [r6, #0]
 80148e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80148e8:	4607      	mov	r7, r0
 80148ea:	460c      	mov	r4, r1
 80148ec:	b10a      	cbz	r2, 80148f2 <_printf_common+0x26>
 80148ee:	3301      	adds	r3, #1
 80148f0:	6033      	str	r3, [r6, #0]
 80148f2:	6823      	ldr	r3, [r4, #0]
 80148f4:	0699      	lsls	r1, r3, #26
 80148f6:	bf42      	ittt	mi
 80148f8:	6833      	ldrmi	r3, [r6, #0]
 80148fa:	3302      	addmi	r3, #2
 80148fc:	6033      	strmi	r3, [r6, #0]
 80148fe:	6825      	ldr	r5, [r4, #0]
 8014900:	f015 0506 	ands.w	r5, r5, #6
 8014904:	d106      	bne.n	8014914 <_printf_common+0x48>
 8014906:	f104 0a19 	add.w	sl, r4, #25
 801490a:	68e3      	ldr	r3, [r4, #12]
 801490c:	6832      	ldr	r2, [r6, #0]
 801490e:	1a9b      	subs	r3, r3, r2
 8014910:	42ab      	cmp	r3, r5
 8014912:	dc26      	bgt.n	8014962 <_printf_common+0x96>
 8014914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014918:	1e13      	subs	r3, r2, #0
 801491a:	6822      	ldr	r2, [r4, #0]
 801491c:	bf18      	it	ne
 801491e:	2301      	movne	r3, #1
 8014920:	0692      	lsls	r2, r2, #26
 8014922:	d42b      	bmi.n	801497c <_printf_common+0xb0>
 8014924:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014928:	4649      	mov	r1, r9
 801492a:	4638      	mov	r0, r7
 801492c:	47c0      	blx	r8
 801492e:	3001      	adds	r0, #1
 8014930:	d01e      	beq.n	8014970 <_printf_common+0xa4>
 8014932:	6823      	ldr	r3, [r4, #0]
 8014934:	6922      	ldr	r2, [r4, #16]
 8014936:	f003 0306 	and.w	r3, r3, #6
 801493a:	2b04      	cmp	r3, #4
 801493c:	bf02      	ittt	eq
 801493e:	68e5      	ldreq	r5, [r4, #12]
 8014940:	6833      	ldreq	r3, [r6, #0]
 8014942:	1aed      	subeq	r5, r5, r3
 8014944:	68a3      	ldr	r3, [r4, #8]
 8014946:	bf0c      	ite	eq
 8014948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801494c:	2500      	movne	r5, #0
 801494e:	4293      	cmp	r3, r2
 8014950:	bfc4      	itt	gt
 8014952:	1a9b      	subgt	r3, r3, r2
 8014954:	18ed      	addgt	r5, r5, r3
 8014956:	2600      	movs	r6, #0
 8014958:	341a      	adds	r4, #26
 801495a:	42b5      	cmp	r5, r6
 801495c:	d11a      	bne.n	8014994 <_printf_common+0xc8>
 801495e:	2000      	movs	r0, #0
 8014960:	e008      	b.n	8014974 <_printf_common+0xa8>
 8014962:	2301      	movs	r3, #1
 8014964:	4652      	mov	r2, sl
 8014966:	4649      	mov	r1, r9
 8014968:	4638      	mov	r0, r7
 801496a:	47c0      	blx	r8
 801496c:	3001      	adds	r0, #1
 801496e:	d103      	bne.n	8014978 <_printf_common+0xac>
 8014970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014978:	3501      	adds	r5, #1
 801497a:	e7c6      	b.n	801490a <_printf_common+0x3e>
 801497c:	18e1      	adds	r1, r4, r3
 801497e:	1c5a      	adds	r2, r3, #1
 8014980:	2030      	movs	r0, #48	; 0x30
 8014982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014986:	4422      	add	r2, r4
 8014988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801498c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014990:	3302      	adds	r3, #2
 8014992:	e7c7      	b.n	8014924 <_printf_common+0x58>
 8014994:	2301      	movs	r3, #1
 8014996:	4622      	mov	r2, r4
 8014998:	4649      	mov	r1, r9
 801499a:	4638      	mov	r0, r7
 801499c:	47c0      	blx	r8
 801499e:	3001      	adds	r0, #1
 80149a0:	d0e6      	beq.n	8014970 <_printf_common+0xa4>
 80149a2:	3601      	adds	r6, #1
 80149a4:	e7d9      	b.n	801495a <_printf_common+0x8e>
	...

080149a8 <_printf_i>:
 80149a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149ac:	7e0f      	ldrb	r7, [r1, #24]
 80149ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80149b0:	2f78      	cmp	r7, #120	; 0x78
 80149b2:	4691      	mov	r9, r2
 80149b4:	4680      	mov	r8, r0
 80149b6:	460c      	mov	r4, r1
 80149b8:	469a      	mov	sl, r3
 80149ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80149be:	d807      	bhi.n	80149d0 <_printf_i+0x28>
 80149c0:	2f62      	cmp	r7, #98	; 0x62
 80149c2:	d80a      	bhi.n	80149da <_printf_i+0x32>
 80149c4:	2f00      	cmp	r7, #0
 80149c6:	f000 80d4 	beq.w	8014b72 <_printf_i+0x1ca>
 80149ca:	2f58      	cmp	r7, #88	; 0x58
 80149cc:	f000 80c0 	beq.w	8014b50 <_printf_i+0x1a8>
 80149d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80149d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80149d8:	e03a      	b.n	8014a50 <_printf_i+0xa8>
 80149da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80149de:	2b15      	cmp	r3, #21
 80149e0:	d8f6      	bhi.n	80149d0 <_printf_i+0x28>
 80149e2:	a101      	add	r1, pc, #4	; (adr r1, 80149e8 <_printf_i+0x40>)
 80149e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80149e8:	08014a41 	.word	0x08014a41
 80149ec:	08014a55 	.word	0x08014a55
 80149f0:	080149d1 	.word	0x080149d1
 80149f4:	080149d1 	.word	0x080149d1
 80149f8:	080149d1 	.word	0x080149d1
 80149fc:	080149d1 	.word	0x080149d1
 8014a00:	08014a55 	.word	0x08014a55
 8014a04:	080149d1 	.word	0x080149d1
 8014a08:	080149d1 	.word	0x080149d1
 8014a0c:	080149d1 	.word	0x080149d1
 8014a10:	080149d1 	.word	0x080149d1
 8014a14:	08014b59 	.word	0x08014b59
 8014a18:	08014a81 	.word	0x08014a81
 8014a1c:	08014b13 	.word	0x08014b13
 8014a20:	080149d1 	.word	0x080149d1
 8014a24:	080149d1 	.word	0x080149d1
 8014a28:	08014b7b 	.word	0x08014b7b
 8014a2c:	080149d1 	.word	0x080149d1
 8014a30:	08014a81 	.word	0x08014a81
 8014a34:	080149d1 	.word	0x080149d1
 8014a38:	080149d1 	.word	0x080149d1
 8014a3c:	08014b1b 	.word	0x08014b1b
 8014a40:	682b      	ldr	r3, [r5, #0]
 8014a42:	1d1a      	adds	r2, r3, #4
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	602a      	str	r2, [r5, #0]
 8014a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014a50:	2301      	movs	r3, #1
 8014a52:	e09f      	b.n	8014b94 <_printf_i+0x1ec>
 8014a54:	6820      	ldr	r0, [r4, #0]
 8014a56:	682b      	ldr	r3, [r5, #0]
 8014a58:	0607      	lsls	r7, r0, #24
 8014a5a:	f103 0104 	add.w	r1, r3, #4
 8014a5e:	6029      	str	r1, [r5, #0]
 8014a60:	d501      	bpl.n	8014a66 <_printf_i+0xbe>
 8014a62:	681e      	ldr	r6, [r3, #0]
 8014a64:	e003      	b.n	8014a6e <_printf_i+0xc6>
 8014a66:	0646      	lsls	r6, r0, #25
 8014a68:	d5fb      	bpl.n	8014a62 <_printf_i+0xba>
 8014a6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014a6e:	2e00      	cmp	r6, #0
 8014a70:	da03      	bge.n	8014a7a <_printf_i+0xd2>
 8014a72:	232d      	movs	r3, #45	; 0x2d
 8014a74:	4276      	negs	r6, r6
 8014a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a7a:	485a      	ldr	r0, [pc, #360]	; (8014be4 <_printf_i+0x23c>)
 8014a7c:	230a      	movs	r3, #10
 8014a7e:	e012      	b.n	8014aa6 <_printf_i+0xfe>
 8014a80:	682b      	ldr	r3, [r5, #0]
 8014a82:	6820      	ldr	r0, [r4, #0]
 8014a84:	1d19      	adds	r1, r3, #4
 8014a86:	6029      	str	r1, [r5, #0]
 8014a88:	0605      	lsls	r5, r0, #24
 8014a8a:	d501      	bpl.n	8014a90 <_printf_i+0xe8>
 8014a8c:	681e      	ldr	r6, [r3, #0]
 8014a8e:	e002      	b.n	8014a96 <_printf_i+0xee>
 8014a90:	0641      	lsls	r1, r0, #25
 8014a92:	d5fb      	bpl.n	8014a8c <_printf_i+0xe4>
 8014a94:	881e      	ldrh	r6, [r3, #0]
 8014a96:	4853      	ldr	r0, [pc, #332]	; (8014be4 <_printf_i+0x23c>)
 8014a98:	2f6f      	cmp	r7, #111	; 0x6f
 8014a9a:	bf0c      	ite	eq
 8014a9c:	2308      	moveq	r3, #8
 8014a9e:	230a      	movne	r3, #10
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014aa6:	6865      	ldr	r5, [r4, #4]
 8014aa8:	60a5      	str	r5, [r4, #8]
 8014aaa:	2d00      	cmp	r5, #0
 8014aac:	bfa2      	ittt	ge
 8014aae:	6821      	ldrge	r1, [r4, #0]
 8014ab0:	f021 0104 	bicge.w	r1, r1, #4
 8014ab4:	6021      	strge	r1, [r4, #0]
 8014ab6:	b90e      	cbnz	r6, 8014abc <_printf_i+0x114>
 8014ab8:	2d00      	cmp	r5, #0
 8014aba:	d04b      	beq.n	8014b54 <_printf_i+0x1ac>
 8014abc:	4615      	mov	r5, r2
 8014abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8014ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8014ac6:	5dc7      	ldrb	r7, [r0, r7]
 8014ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014acc:	4637      	mov	r7, r6
 8014ace:	42bb      	cmp	r3, r7
 8014ad0:	460e      	mov	r6, r1
 8014ad2:	d9f4      	bls.n	8014abe <_printf_i+0x116>
 8014ad4:	2b08      	cmp	r3, #8
 8014ad6:	d10b      	bne.n	8014af0 <_printf_i+0x148>
 8014ad8:	6823      	ldr	r3, [r4, #0]
 8014ada:	07de      	lsls	r6, r3, #31
 8014adc:	d508      	bpl.n	8014af0 <_printf_i+0x148>
 8014ade:	6923      	ldr	r3, [r4, #16]
 8014ae0:	6861      	ldr	r1, [r4, #4]
 8014ae2:	4299      	cmp	r1, r3
 8014ae4:	bfde      	ittt	le
 8014ae6:	2330      	movle	r3, #48	; 0x30
 8014ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014aec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014af0:	1b52      	subs	r2, r2, r5
 8014af2:	6122      	str	r2, [r4, #16]
 8014af4:	f8cd a000 	str.w	sl, [sp]
 8014af8:	464b      	mov	r3, r9
 8014afa:	aa03      	add	r2, sp, #12
 8014afc:	4621      	mov	r1, r4
 8014afe:	4640      	mov	r0, r8
 8014b00:	f7ff fee4 	bl	80148cc <_printf_common>
 8014b04:	3001      	adds	r0, #1
 8014b06:	d14a      	bne.n	8014b9e <_printf_i+0x1f6>
 8014b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b0c:	b004      	add	sp, #16
 8014b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b12:	6823      	ldr	r3, [r4, #0]
 8014b14:	f043 0320 	orr.w	r3, r3, #32
 8014b18:	6023      	str	r3, [r4, #0]
 8014b1a:	4833      	ldr	r0, [pc, #204]	; (8014be8 <_printf_i+0x240>)
 8014b1c:	2778      	movs	r7, #120	; 0x78
 8014b1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014b22:	6823      	ldr	r3, [r4, #0]
 8014b24:	6829      	ldr	r1, [r5, #0]
 8014b26:	061f      	lsls	r7, r3, #24
 8014b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8014b2c:	d402      	bmi.n	8014b34 <_printf_i+0x18c>
 8014b2e:	065f      	lsls	r7, r3, #25
 8014b30:	bf48      	it	mi
 8014b32:	b2b6      	uxthmi	r6, r6
 8014b34:	07df      	lsls	r7, r3, #31
 8014b36:	bf48      	it	mi
 8014b38:	f043 0320 	orrmi.w	r3, r3, #32
 8014b3c:	6029      	str	r1, [r5, #0]
 8014b3e:	bf48      	it	mi
 8014b40:	6023      	strmi	r3, [r4, #0]
 8014b42:	b91e      	cbnz	r6, 8014b4c <_printf_i+0x1a4>
 8014b44:	6823      	ldr	r3, [r4, #0]
 8014b46:	f023 0320 	bic.w	r3, r3, #32
 8014b4a:	6023      	str	r3, [r4, #0]
 8014b4c:	2310      	movs	r3, #16
 8014b4e:	e7a7      	b.n	8014aa0 <_printf_i+0xf8>
 8014b50:	4824      	ldr	r0, [pc, #144]	; (8014be4 <_printf_i+0x23c>)
 8014b52:	e7e4      	b.n	8014b1e <_printf_i+0x176>
 8014b54:	4615      	mov	r5, r2
 8014b56:	e7bd      	b.n	8014ad4 <_printf_i+0x12c>
 8014b58:	682b      	ldr	r3, [r5, #0]
 8014b5a:	6826      	ldr	r6, [r4, #0]
 8014b5c:	6961      	ldr	r1, [r4, #20]
 8014b5e:	1d18      	adds	r0, r3, #4
 8014b60:	6028      	str	r0, [r5, #0]
 8014b62:	0635      	lsls	r5, r6, #24
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	d501      	bpl.n	8014b6c <_printf_i+0x1c4>
 8014b68:	6019      	str	r1, [r3, #0]
 8014b6a:	e002      	b.n	8014b72 <_printf_i+0x1ca>
 8014b6c:	0670      	lsls	r0, r6, #25
 8014b6e:	d5fb      	bpl.n	8014b68 <_printf_i+0x1c0>
 8014b70:	8019      	strh	r1, [r3, #0]
 8014b72:	2300      	movs	r3, #0
 8014b74:	6123      	str	r3, [r4, #16]
 8014b76:	4615      	mov	r5, r2
 8014b78:	e7bc      	b.n	8014af4 <_printf_i+0x14c>
 8014b7a:	682b      	ldr	r3, [r5, #0]
 8014b7c:	1d1a      	adds	r2, r3, #4
 8014b7e:	602a      	str	r2, [r5, #0]
 8014b80:	681d      	ldr	r5, [r3, #0]
 8014b82:	6862      	ldr	r2, [r4, #4]
 8014b84:	2100      	movs	r1, #0
 8014b86:	4628      	mov	r0, r5
 8014b88:	f7eb fb22 	bl	80001d0 <memchr>
 8014b8c:	b108      	cbz	r0, 8014b92 <_printf_i+0x1ea>
 8014b8e:	1b40      	subs	r0, r0, r5
 8014b90:	6060      	str	r0, [r4, #4]
 8014b92:	6863      	ldr	r3, [r4, #4]
 8014b94:	6123      	str	r3, [r4, #16]
 8014b96:	2300      	movs	r3, #0
 8014b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b9c:	e7aa      	b.n	8014af4 <_printf_i+0x14c>
 8014b9e:	6923      	ldr	r3, [r4, #16]
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	4649      	mov	r1, r9
 8014ba4:	4640      	mov	r0, r8
 8014ba6:	47d0      	blx	sl
 8014ba8:	3001      	adds	r0, #1
 8014baa:	d0ad      	beq.n	8014b08 <_printf_i+0x160>
 8014bac:	6823      	ldr	r3, [r4, #0]
 8014bae:	079b      	lsls	r3, r3, #30
 8014bb0:	d413      	bmi.n	8014bda <_printf_i+0x232>
 8014bb2:	68e0      	ldr	r0, [r4, #12]
 8014bb4:	9b03      	ldr	r3, [sp, #12]
 8014bb6:	4298      	cmp	r0, r3
 8014bb8:	bfb8      	it	lt
 8014bba:	4618      	movlt	r0, r3
 8014bbc:	e7a6      	b.n	8014b0c <_printf_i+0x164>
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	4632      	mov	r2, r6
 8014bc2:	4649      	mov	r1, r9
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	47d0      	blx	sl
 8014bc8:	3001      	adds	r0, #1
 8014bca:	d09d      	beq.n	8014b08 <_printf_i+0x160>
 8014bcc:	3501      	adds	r5, #1
 8014bce:	68e3      	ldr	r3, [r4, #12]
 8014bd0:	9903      	ldr	r1, [sp, #12]
 8014bd2:	1a5b      	subs	r3, r3, r1
 8014bd4:	42ab      	cmp	r3, r5
 8014bd6:	dcf2      	bgt.n	8014bbe <_printf_i+0x216>
 8014bd8:	e7eb      	b.n	8014bb2 <_printf_i+0x20a>
 8014bda:	2500      	movs	r5, #0
 8014bdc:	f104 0619 	add.w	r6, r4, #25
 8014be0:	e7f5      	b.n	8014bce <_printf_i+0x226>
 8014be2:	bf00      	nop
 8014be4:	08018130 	.word	0x08018130
 8014be8:	08018141 	.word	0x08018141

08014bec <__sflush_r>:
 8014bec:	898a      	ldrh	r2, [r1, #12]
 8014bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bf2:	4605      	mov	r5, r0
 8014bf4:	0710      	lsls	r0, r2, #28
 8014bf6:	460c      	mov	r4, r1
 8014bf8:	d458      	bmi.n	8014cac <__sflush_r+0xc0>
 8014bfa:	684b      	ldr	r3, [r1, #4]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	dc05      	bgt.n	8014c0c <__sflush_r+0x20>
 8014c00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	dc02      	bgt.n	8014c0c <__sflush_r+0x20>
 8014c06:	2000      	movs	r0, #0
 8014c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c0e:	2e00      	cmp	r6, #0
 8014c10:	d0f9      	beq.n	8014c06 <__sflush_r+0x1a>
 8014c12:	2300      	movs	r3, #0
 8014c14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014c18:	682f      	ldr	r7, [r5, #0]
 8014c1a:	6a21      	ldr	r1, [r4, #32]
 8014c1c:	602b      	str	r3, [r5, #0]
 8014c1e:	d032      	beq.n	8014c86 <__sflush_r+0x9a>
 8014c20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014c22:	89a3      	ldrh	r3, [r4, #12]
 8014c24:	075a      	lsls	r2, r3, #29
 8014c26:	d505      	bpl.n	8014c34 <__sflush_r+0x48>
 8014c28:	6863      	ldr	r3, [r4, #4]
 8014c2a:	1ac0      	subs	r0, r0, r3
 8014c2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c2e:	b10b      	cbz	r3, 8014c34 <__sflush_r+0x48>
 8014c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014c32:	1ac0      	subs	r0, r0, r3
 8014c34:	2300      	movs	r3, #0
 8014c36:	4602      	mov	r2, r0
 8014c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014c3a:	6a21      	ldr	r1, [r4, #32]
 8014c3c:	4628      	mov	r0, r5
 8014c3e:	47b0      	blx	r6
 8014c40:	1c43      	adds	r3, r0, #1
 8014c42:	89a3      	ldrh	r3, [r4, #12]
 8014c44:	d106      	bne.n	8014c54 <__sflush_r+0x68>
 8014c46:	6829      	ldr	r1, [r5, #0]
 8014c48:	291d      	cmp	r1, #29
 8014c4a:	d82b      	bhi.n	8014ca4 <__sflush_r+0xb8>
 8014c4c:	4a29      	ldr	r2, [pc, #164]	; (8014cf4 <__sflush_r+0x108>)
 8014c4e:	410a      	asrs	r2, r1
 8014c50:	07d6      	lsls	r6, r2, #31
 8014c52:	d427      	bmi.n	8014ca4 <__sflush_r+0xb8>
 8014c54:	2200      	movs	r2, #0
 8014c56:	6062      	str	r2, [r4, #4]
 8014c58:	04d9      	lsls	r1, r3, #19
 8014c5a:	6922      	ldr	r2, [r4, #16]
 8014c5c:	6022      	str	r2, [r4, #0]
 8014c5e:	d504      	bpl.n	8014c6a <__sflush_r+0x7e>
 8014c60:	1c42      	adds	r2, r0, #1
 8014c62:	d101      	bne.n	8014c68 <__sflush_r+0x7c>
 8014c64:	682b      	ldr	r3, [r5, #0]
 8014c66:	b903      	cbnz	r3, 8014c6a <__sflush_r+0x7e>
 8014c68:	6560      	str	r0, [r4, #84]	; 0x54
 8014c6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c6c:	602f      	str	r7, [r5, #0]
 8014c6e:	2900      	cmp	r1, #0
 8014c70:	d0c9      	beq.n	8014c06 <__sflush_r+0x1a>
 8014c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c76:	4299      	cmp	r1, r3
 8014c78:	d002      	beq.n	8014c80 <__sflush_r+0x94>
 8014c7a:	4628      	mov	r0, r5
 8014c7c:	f7ff fc96 	bl	80145ac <_free_r>
 8014c80:	2000      	movs	r0, #0
 8014c82:	6360      	str	r0, [r4, #52]	; 0x34
 8014c84:	e7c0      	b.n	8014c08 <__sflush_r+0x1c>
 8014c86:	2301      	movs	r3, #1
 8014c88:	4628      	mov	r0, r5
 8014c8a:	47b0      	blx	r6
 8014c8c:	1c41      	adds	r1, r0, #1
 8014c8e:	d1c8      	bne.n	8014c22 <__sflush_r+0x36>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d0c5      	beq.n	8014c22 <__sflush_r+0x36>
 8014c96:	2b1d      	cmp	r3, #29
 8014c98:	d001      	beq.n	8014c9e <__sflush_r+0xb2>
 8014c9a:	2b16      	cmp	r3, #22
 8014c9c:	d101      	bne.n	8014ca2 <__sflush_r+0xb6>
 8014c9e:	602f      	str	r7, [r5, #0]
 8014ca0:	e7b1      	b.n	8014c06 <__sflush_r+0x1a>
 8014ca2:	89a3      	ldrh	r3, [r4, #12]
 8014ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ca8:	81a3      	strh	r3, [r4, #12]
 8014caa:	e7ad      	b.n	8014c08 <__sflush_r+0x1c>
 8014cac:	690f      	ldr	r7, [r1, #16]
 8014cae:	2f00      	cmp	r7, #0
 8014cb0:	d0a9      	beq.n	8014c06 <__sflush_r+0x1a>
 8014cb2:	0793      	lsls	r3, r2, #30
 8014cb4:	680e      	ldr	r6, [r1, #0]
 8014cb6:	bf08      	it	eq
 8014cb8:	694b      	ldreq	r3, [r1, #20]
 8014cba:	600f      	str	r7, [r1, #0]
 8014cbc:	bf18      	it	ne
 8014cbe:	2300      	movne	r3, #0
 8014cc0:	eba6 0807 	sub.w	r8, r6, r7
 8014cc4:	608b      	str	r3, [r1, #8]
 8014cc6:	f1b8 0f00 	cmp.w	r8, #0
 8014cca:	dd9c      	ble.n	8014c06 <__sflush_r+0x1a>
 8014ccc:	6a21      	ldr	r1, [r4, #32]
 8014cce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014cd0:	4643      	mov	r3, r8
 8014cd2:	463a      	mov	r2, r7
 8014cd4:	4628      	mov	r0, r5
 8014cd6:	47b0      	blx	r6
 8014cd8:	2800      	cmp	r0, #0
 8014cda:	dc06      	bgt.n	8014cea <__sflush_r+0xfe>
 8014cdc:	89a3      	ldrh	r3, [r4, #12]
 8014cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ce2:	81a3      	strh	r3, [r4, #12]
 8014ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ce8:	e78e      	b.n	8014c08 <__sflush_r+0x1c>
 8014cea:	4407      	add	r7, r0
 8014cec:	eba8 0800 	sub.w	r8, r8, r0
 8014cf0:	e7e9      	b.n	8014cc6 <__sflush_r+0xda>
 8014cf2:	bf00      	nop
 8014cf4:	dfbffffe 	.word	0xdfbffffe

08014cf8 <_fflush_r>:
 8014cf8:	b538      	push	{r3, r4, r5, lr}
 8014cfa:	690b      	ldr	r3, [r1, #16]
 8014cfc:	4605      	mov	r5, r0
 8014cfe:	460c      	mov	r4, r1
 8014d00:	b913      	cbnz	r3, 8014d08 <_fflush_r+0x10>
 8014d02:	2500      	movs	r5, #0
 8014d04:	4628      	mov	r0, r5
 8014d06:	bd38      	pop	{r3, r4, r5, pc}
 8014d08:	b118      	cbz	r0, 8014d12 <_fflush_r+0x1a>
 8014d0a:	6a03      	ldr	r3, [r0, #32]
 8014d0c:	b90b      	cbnz	r3, 8014d12 <_fflush_r+0x1a>
 8014d0e:	f7ff faaf 	bl	8014270 <__sinit>
 8014d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d0f3      	beq.n	8014d02 <_fflush_r+0xa>
 8014d1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014d1c:	07d0      	lsls	r0, r2, #31
 8014d1e:	d404      	bmi.n	8014d2a <_fflush_r+0x32>
 8014d20:	0599      	lsls	r1, r3, #22
 8014d22:	d402      	bmi.n	8014d2a <_fflush_r+0x32>
 8014d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d26:	f7ff fc2a 	bl	801457e <__retarget_lock_acquire_recursive>
 8014d2a:	4628      	mov	r0, r5
 8014d2c:	4621      	mov	r1, r4
 8014d2e:	f7ff ff5d 	bl	8014bec <__sflush_r>
 8014d32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014d34:	07da      	lsls	r2, r3, #31
 8014d36:	4605      	mov	r5, r0
 8014d38:	d4e4      	bmi.n	8014d04 <_fflush_r+0xc>
 8014d3a:	89a3      	ldrh	r3, [r4, #12]
 8014d3c:	059b      	lsls	r3, r3, #22
 8014d3e:	d4e1      	bmi.n	8014d04 <_fflush_r+0xc>
 8014d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014d42:	f7ff fc1d 	bl	8014580 <__retarget_lock_release_recursive>
 8014d46:	e7dd      	b.n	8014d04 <_fflush_r+0xc>

08014d48 <__swbuf_r>:
 8014d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d4a:	460e      	mov	r6, r1
 8014d4c:	4614      	mov	r4, r2
 8014d4e:	4605      	mov	r5, r0
 8014d50:	b118      	cbz	r0, 8014d5a <__swbuf_r+0x12>
 8014d52:	6a03      	ldr	r3, [r0, #32]
 8014d54:	b90b      	cbnz	r3, 8014d5a <__swbuf_r+0x12>
 8014d56:	f7ff fa8b 	bl	8014270 <__sinit>
 8014d5a:	69a3      	ldr	r3, [r4, #24]
 8014d5c:	60a3      	str	r3, [r4, #8]
 8014d5e:	89a3      	ldrh	r3, [r4, #12]
 8014d60:	071a      	lsls	r2, r3, #28
 8014d62:	d525      	bpl.n	8014db0 <__swbuf_r+0x68>
 8014d64:	6923      	ldr	r3, [r4, #16]
 8014d66:	b31b      	cbz	r3, 8014db0 <__swbuf_r+0x68>
 8014d68:	6823      	ldr	r3, [r4, #0]
 8014d6a:	6922      	ldr	r2, [r4, #16]
 8014d6c:	1a98      	subs	r0, r3, r2
 8014d6e:	6963      	ldr	r3, [r4, #20]
 8014d70:	b2f6      	uxtb	r6, r6
 8014d72:	4283      	cmp	r3, r0
 8014d74:	4637      	mov	r7, r6
 8014d76:	dc04      	bgt.n	8014d82 <__swbuf_r+0x3a>
 8014d78:	4621      	mov	r1, r4
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	f7ff ffbc 	bl	8014cf8 <_fflush_r>
 8014d80:	b9e0      	cbnz	r0, 8014dbc <__swbuf_r+0x74>
 8014d82:	68a3      	ldr	r3, [r4, #8]
 8014d84:	3b01      	subs	r3, #1
 8014d86:	60a3      	str	r3, [r4, #8]
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	1c5a      	adds	r2, r3, #1
 8014d8c:	6022      	str	r2, [r4, #0]
 8014d8e:	701e      	strb	r6, [r3, #0]
 8014d90:	6962      	ldr	r2, [r4, #20]
 8014d92:	1c43      	adds	r3, r0, #1
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d004      	beq.n	8014da2 <__swbuf_r+0x5a>
 8014d98:	89a3      	ldrh	r3, [r4, #12]
 8014d9a:	07db      	lsls	r3, r3, #31
 8014d9c:	d506      	bpl.n	8014dac <__swbuf_r+0x64>
 8014d9e:	2e0a      	cmp	r6, #10
 8014da0:	d104      	bne.n	8014dac <__swbuf_r+0x64>
 8014da2:	4621      	mov	r1, r4
 8014da4:	4628      	mov	r0, r5
 8014da6:	f7ff ffa7 	bl	8014cf8 <_fflush_r>
 8014daa:	b938      	cbnz	r0, 8014dbc <__swbuf_r+0x74>
 8014dac:	4638      	mov	r0, r7
 8014dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014db0:	4621      	mov	r1, r4
 8014db2:	4628      	mov	r0, r5
 8014db4:	f000 f806 	bl	8014dc4 <__swsetup_r>
 8014db8:	2800      	cmp	r0, #0
 8014dba:	d0d5      	beq.n	8014d68 <__swbuf_r+0x20>
 8014dbc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014dc0:	e7f4      	b.n	8014dac <__swbuf_r+0x64>
	...

08014dc4 <__swsetup_r>:
 8014dc4:	b538      	push	{r3, r4, r5, lr}
 8014dc6:	4b2a      	ldr	r3, [pc, #168]	; (8014e70 <__swsetup_r+0xac>)
 8014dc8:	4605      	mov	r5, r0
 8014dca:	6818      	ldr	r0, [r3, #0]
 8014dcc:	460c      	mov	r4, r1
 8014dce:	b118      	cbz	r0, 8014dd8 <__swsetup_r+0x14>
 8014dd0:	6a03      	ldr	r3, [r0, #32]
 8014dd2:	b90b      	cbnz	r3, 8014dd8 <__swsetup_r+0x14>
 8014dd4:	f7ff fa4c 	bl	8014270 <__sinit>
 8014dd8:	89a3      	ldrh	r3, [r4, #12]
 8014dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014dde:	0718      	lsls	r0, r3, #28
 8014de0:	d422      	bmi.n	8014e28 <__swsetup_r+0x64>
 8014de2:	06d9      	lsls	r1, r3, #27
 8014de4:	d407      	bmi.n	8014df6 <__swsetup_r+0x32>
 8014de6:	2309      	movs	r3, #9
 8014de8:	602b      	str	r3, [r5, #0]
 8014dea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014dee:	81a3      	strh	r3, [r4, #12]
 8014df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014df4:	e034      	b.n	8014e60 <__swsetup_r+0x9c>
 8014df6:	0758      	lsls	r0, r3, #29
 8014df8:	d512      	bpl.n	8014e20 <__swsetup_r+0x5c>
 8014dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014dfc:	b141      	cbz	r1, 8014e10 <__swsetup_r+0x4c>
 8014dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e02:	4299      	cmp	r1, r3
 8014e04:	d002      	beq.n	8014e0c <__swsetup_r+0x48>
 8014e06:	4628      	mov	r0, r5
 8014e08:	f7ff fbd0 	bl	80145ac <_free_r>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8014e10:	89a3      	ldrh	r3, [r4, #12]
 8014e12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014e16:	81a3      	strh	r3, [r4, #12]
 8014e18:	2300      	movs	r3, #0
 8014e1a:	6063      	str	r3, [r4, #4]
 8014e1c:	6923      	ldr	r3, [r4, #16]
 8014e1e:	6023      	str	r3, [r4, #0]
 8014e20:	89a3      	ldrh	r3, [r4, #12]
 8014e22:	f043 0308 	orr.w	r3, r3, #8
 8014e26:	81a3      	strh	r3, [r4, #12]
 8014e28:	6923      	ldr	r3, [r4, #16]
 8014e2a:	b94b      	cbnz	r3, 8014e40 <__swsetup_r+0x7c>
 8014e2c:	89a3      	ldrh	r3, [r4, #12]
 8014e2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014e36:	d003      	beq.n	8014e40 <__swsetup_r+0x7c>
 8014e38:	4621      	mov	r1, r4
 8014e3a:	4628      	mov	r0, r5
 8014e3c:	f000 f884 	bl	8014f48 <__smakebuf_r>
 8014e40:	89a0      	ldrh	r0, [r4, #12]
 8014e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014e46:	f010 0301 	ands.w	r3, r0, #1
 8014e4a:	d00a      	beq.n	8014e62 <__swsetup_r+0x9e>
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	60a3      	str	r3, [r4, #8]
 8014e50:	6963      	ldr	r3, [r4, #20]
 8014e52:	425b      	negs	r3, r3
 8014e54:	61a3      	str	r3, [r4, #24]
 8014e56:	6923      	ldr	r3, [r4, #16]
 8014e58:	b943      	cbnz	r3, 8014e6c <__swsetup_r+0xa8>
 8014e5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014e5e:	d1c4      	bne.n	8014dea <__swsetup_r+0x26>
 8014e60:	bd38      	pop	{r3, r4, r5, pc}
 8014e62:	0781      	lsls	r1, r0, #30
 8014e64:	bf58      	it	pl
 8014e66:	6963      	ldrpl	r3, [r4, #20]
 8014e68:	60a3      	str	r3, [r4, #8]
 8014e6a:	e7f4      	b.n	8014e56 <__swsetup_r+0x92>
 8014e6c:	2000      	movs	r0, #0
 8014e6e:	e7f7      	b.n	8014e60 <__swsetup_r+0x9c>
 8014e70:	2000008c 	.word	0x2000008c

08014e74 <_raise_r>:
 8014e74:	291f      	cmp	r1, #31
 8014e76:	b538      	push	{r3, r4, r5, lr}
 8014e78:	4604      	mov	r4, r0
 8014e7a:	460d      	mov	r5, r1
 8014e7c:	d904      	bls.n	8014e88 <_raise_r+0x14>
 8014e7e:	2316      	movs	r3, #22
 8014e80:	6003      	str	r3, [r0, #0]
 8014e82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014e86:	bd38      	pop	{r3, r4, r5, pc}
 8014e88:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014e8a:	b112      	cbz	r2, 8014e92 <_raise_r+0x1e>
 8014e8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014e90:	b94b      	cbnz	r3, 8014ea6 <_raise_r+0x32>
 8014e92:	4620      	mov	r0, r4
 8014e94:	f000 f830 	bl	8014ef8 <_getpid_r>
 8014e98:	462a      	mov	r2, r5
 8014e9a:	4601      	mov	r1, r0
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ea2:	f000 b817 	b.w	8014ed4 <_kill_r>
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d00a      	beq.n	8014ec0 <_raise_r+0x4c>
 8014eaa:	1c59      	adds	r1, r3, #1
 8014eac:	d103      	bne.n	8014eb6 <_raise_r+0x42>
 8014eae:	2316      	movs	r3, #22
 8014eb0:	6003      	str	r3, [r0, #0]
 8014eb2:	2001      	movs	r0, #1
 8014eb4:	e7e7      	b.n	8014e86 <_raise_r+0x12>
 8014eb6:	2400      	movs	r4, #0
 8014eb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ebc:	4628      	mov	r0, r5
 8014ebe:	4798      	blx	r3
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	e7e0      	b.n	8014e86 <_raise_r+0x12>

08014ec4 <raise>:
 8014ec4:	4b02      	ldr	r3, [pc, #8]	; (8014ed0 <raise+0xc>)
 8014ec6:	4601      	mov	r1, r0
 8014ec8:	6818      	ldr	r0, [r3, #0]
 8014eca:	f7ff bfd3 	b.w	8014e74 <_raise_r>
 8014ece:	bf00      	nop
 8014ed0:	2000008c 	.word	0x2000008c

08014ed4 <_kill_r>:
 8014ed4:	b538      	push	{r3, r4, r5, lr}
 8014ed6:	4d07      	ldr	r5, [pc, #28]	; (8014ef4 <_kill_r+0x20>)
 8014ed8:	2300      	movs	r3, #0
 8014eda:	4604      	mov	r4, r0
 8014edc:	4608      	mov	r0, r1
 8014ede:	4611      	mov	r1, r2
 8014ee0:	602b      	str	r3, [r5, #0]
 8014ee2:	f7eb fdfd 	bl	8000ae0 <_kill>
 8014ee6:	1c43      	adds	r3, r0, #1
 8014ee8:	d102      	bne.n	8014ef0 <_kill_r+0x1c>
 8014eea:	682b      	ldr	r3, [r5, #0]
 8014eec:	b103      	cbz	r3, 8014ef0 <_kill_r+0x1c>
 8014eee:	6023      	str	r3, [r4, #0]
 8014ef0:	bd38      	pop	{r3, r4, r5, pc}
 8014ef2:	bf00      	nop
 8014ef4:	2000c7f0 	.word	0x2000c7f0

08014ef8 <_getpid_r>:
 8014ef8:	f7eb bdea 	b.w	8000ad0 <_getpid>

08014efc <__swhatbuf_r>:
 8014efc:	b570      	push	{r4, r5, r6, lr}
 8014efe:	460c      	mov	r4, r1
 8014f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014f04:	2900      	cmp	r1, #0
 8014f06:	b096      	sub	sp, #88	; 0x58
 8014f08:	4615      	mov	r5, r2
 8014f0a:	461e      	mov	r6, r3
 8014f0c:	da0d      	bge.n	8014f2a <__swhatbuf_r+0x2e>
 8014f0e:	89a3      	ldrh	r3, [r4, #12]
 8014f10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014f14:	f04f 0100 	mov.w	r1, #0
 8014f18:	bf0c      	ite	eq
 8014f1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014f1e:	2340      	movne	r3, #64	; 0x40
 8014f20:	2000      	movs	r0, #0
 8014f22:	6031      	str	r1, [r6, #0]
 8014f24:	602b      	str	r3, [r5, #0]
 8014f26:	b016      	add	sp, #88	; 0x58
 8014f28:	bd70      	pop	{r4, r5, r6, pc}
 8014f2a:	466a      	mov	r2, sp
 8014f2c:	f000 f848 	bl	8014fc0 <_fstat_r>
 8014f30:	2800      	cmp	r0, #0
 8014f32:	dbec      	blt.n	8014f0e <__swhatbuf_r+0x12>
 8014f34:	9901      	ldr	r1, [sp, #4]
 8014f36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014f3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014f3e:	4259      	negs	r1, r3
 8014f40:	4159      	adcs	r1, r3
 8014f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f46:	e7eb      	b.n	8014f20 <__swhatbuf_r+0x24>

08014f48 <__smakebuf_r>:
 8014f48:	898b      	ldrh	r3, [r1, #12]
 8014f4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014f4c:	079d      	lsls	r5, r3, #30
 8014f4e:	4606      	mov	r6, r0
 8014f50:	460c      	mov	r4, r1
 8014f52:	d507      	bpl.n	8014f64 <__smakebuf_r+0x1c>
 8014f54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f58:	6023      	str	r3, [r4, #0]
 8014f5a:	6123      	str	r3, [r4, #16]
 8014f5c:	2301      	movs	r3, #1
 8014f5e:	6163      	str	r3, [r4, #20]
 8014f60:	b002      	add	sp, #8
 8014f62:	bd70      	pop	{r4, r5, r6, pc}
 8014f64:	ab01      	add	r3, sp, #4
 8014f66:	466a      	mov	r2, sp
 8014f68:	f7ff ffc8 	bl	8014efc <__swhatbuf_r>
 8014f6c:	9900      	ldr	r1, [sp, #0]
 8014f6e:	4605      	mov	r5, r0
 8014f70:	4630      	mov	r0, r6
 8014f72:	f7ff f827 	bl	8013fc4 <_malloc_r>
 8014f76:	b948      	cbnz	r0, 8014f8c <__smakebuf_r+0x44>
 8014f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f7c:	059a      	lsls	r2, r3, #22
 8014f7e:	d4ef      	bmi.n	8014f60 <__smakebuf_r+0x18>
 8014f80:	f023 0303 	bic.w	r3, r3, #3
 8014f84:	f043 0302 	orr.w	r3, r3, #2
 8014f88:	81a3      	strh	r3, [r4, #12]
 8014f8a:	e7e3      	b.n	8014f54 <__smakebuf_r+0xc>
 8014f8c:	89a3      	ldrh	r3, [r4, #12]
 8014f8e:	6020      	str	r0, [r4, #0]
 8014f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f94:	81a3      	strh	r3, [r4, #12]
 8014f96:	9b00      	ldr	r3, [sp, #0]
 8014f98:	6163      	str	r3, [r4, #20]
 8014f9a:	9b01      	ldr	r3, [sp, #4]
 8014f9c:	6120      	str	r0, [r4, #16]
 8014f9e:	b15b      	cbz	r3, 8014fb8 <__smakebuf_r+0x70>
 8014fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014fa4:	4630      	mov	r0, r6
 8014fa6:	f000 f81d 	bl	8014fe4 <_isatty_r>
 8014faa:	b128      	cbz	r0, 8014fb8 <__smakebuf_r+0x70>
 8014fac:	89a3      	ldrh	r3, [r4, #12]
 8014fae:	f023 0303 	bic.w	r3, r3, #3
 8014fb2:	f043 0301 	orr.w	r3, r3, #1
 8014fb6:	81a3      	strh	r3, [r4, #12]
 8014fb8:	89a3      	ldrh	r3, [r4, #12]
 8014fba:	431d      	orrs	r5, r3
 8014fbc:	81a5      	strh	r5, [r4, #12]
 8014fbe:	e7cf      	b.n	8014f60 <__smakebuf_r+0x18>

08014fc0 <_fstat_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4d07      	ldr	r5, [pc, #28]	; (8014fe0 <_fstat_r+0x20>)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	4608      	mov	r0, r1
 8014fca:	4611      	mov	r1, r2
 8014fcc:	602b      	str	r3, [r5, #0]
 8014fce:	f7eb fde8 	bl	8000ba2 <_fstat>
 8014fd2:	1c43      	adds	r3, r0, #1
 8014fd4:	d102      	bne.n	8014fdc <_fstat_r+0x1c>
 8014fd6:	682b      	ldr	r3, [r5, #0]
 8014fd8:	b103      	cbz	r3, 8014fdc <_fstat_r+0x1c>
 8014fda:	6023      	str	r3, [r4, #0]
 8014fdc:	bd38      	pop	{r3, r4, r5, pc}
 8014fde:	bf00      	nop
 8014fe0:	2000c7f0 	.word	0x2000c7f0

08014fe4 <_isatty_r>:
 8014fe4:	b538      	push	{r3, r4, r5, lr}
 8014fe6:	4d06      	ldr	r5, [pc, #24]	; (8015000 <_isatty_r+0x1c>)
 8014fe8:	2300      	movs	r3, #0
 8014fea:	4604      	mov	r4, r0
 8014fec:	4608      	mov	r0, r1
 8014fee:	602b      	str	r3, [r5, #0]
 8014ff0:	f7eb fde7 	bl	8000bc2 <_isatty>
 8014ff4:	1c43      	adds	r3, r0, #1
 8014ff6:	d102      	bne.n	8014ffe <_isatty_r+0x1a>
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	b103      	cbz	r3, 8014ffe <_isatty_r+0x1a>
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	bd38      	pop	{r3, r4, r5, pc}
 8015000:	2000c7f0 	.word	0x2000c7f0

08015004 <_init>:
 8015004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015006:	bf00      	nop
 8015008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801500a:	bc08      	pop	{r3}
 801500c:	469e      	mov	lr, r3
 801500e:	4770      	bx	lr

08015010 <_fini>:
 8015010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015012:	bf00      	nop
 8015014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015016:	bc08      	pop	{r3}
 8015018:	469e      	mov	lr, r3
 801501a:	4770      	bx	lr
