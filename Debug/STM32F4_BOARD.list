
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000595c  080275a8  080275a8  000375a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802cf04  0802cf04  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  0802cf04  0802cf04  0003cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802cf0c  0802cf0c  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802cf0c  0802cf0c  0003cf0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802cf10  0802cf10  0003cf10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0802cf14  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004026c  2**0
                  CONTENTS
 10 .bss          00016260  2000026c  2000026c  0004026c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200164cc  200164cc  0004026c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00048db0  00000000  00000000  000402df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b31e  00000000  00000000  0008908f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000035d0  00000000  00000000  000943b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002bd8  00000000  00000000  00097980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ad0c  00000000  00000000  0009a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050fd8  00000000  00000000  000d5264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103c56  00000000  00000000  0012623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000f7e0  00000000  00000000  00229e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00239674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802758c 	.word	0x0802758c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0802758c 	.word	0x0802758c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b984 	b.w	8000ee8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f81a 	bl	8000c20 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__popcountsi2>:
 8000bf8:	0843      	lsrs	r3, r0, #1
 8000bfa:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000bfe:	1ac0      	subs	r0, r0, r3
 8000c00:	0883      	lsrs	r3, r0, #2
 8000c02:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000c06:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000c0a:	4418      	add	r0, r3
 8000c0c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000c10:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000c14:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000c18:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000c1c:	0e00      	lsrs	r0, r0, #24
 8000c1e:	4770      	bx	lr

08000c20 <__udivmoddi4>:
 8000c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c24:	9e08      	ldr	r6, [sp, #32]
 8000c26:	460d      	mov	r5, r1
 8000c28:	4604      	mov	r4, r0
 8000c2a:	460f      	mov	r7, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14a      	bne.n	8000cc6 <__udivmoddi4+0xa6>
 8000c30:	428a      	cmp	r2, r1
 8000c32:	4694      	mov	ip, r2
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0xe2>
 8000c36:	fab2 f382 	clz	r3, r2
 8000c3a:	b143      	cbz	r3, 8000c4e <__udivmoddi4+0x2e>
 8000c3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c40:	f1c3 0220 	rsb	r2, r3, #32
 8000c44:	409f      	lsls	r7, r3
 8000c46:	fa20 f202 	lsr.w	r2, r0, r2
 8000c4a:	4317      	orrs	r7, r2
 8000c4c:	409c      	lsls	r4, r3
 8000c4e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c52:	fa1f f58c 	uxth.w	r5, ip
 8000c56:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c5a:	0c22      	lsrs	r2, r4, #16
 8000c5c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c60:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c64:	fb01 f005 	mul.w	r0, r1, r5
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x62>
 8000c6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c70:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c74:	f080 811c 	bcs.w	8000eb0 <__udivmoddi4+0x290>
 8000c78:	4290      	cmp	r0, r2
 8000c7a:	f240 8119 	bls.w	8000eb0 <__udivmoddi4+0x290>
 8000c7e:	3902      	subs	r1, #2
 8000c80:	4462      	add	r2, ip
 8000c82:	1a12      	subs	r2, r2, r0
 8000c84:	b2a4      	uxth	r4, r4
 8000c86:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c8e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c92:	fb00 f505 	mul.w	r5, r0, r5
 8000c96:	42a5      	cmp	r5, r4
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x90>
 8000c9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ca2:	f080 8107 	bcs.w	8000eb4 <__udivmoddi4+0x294>
 8000ca6:	42a5      	cmp	r5, r4
 8000ca8:	f240 8104 	bls.w	8000eb4 <__udivmoddi4+0x294>
 8000cac:	4464      	add	r4, ip
 8000cae:	3802      	subs	r0, #2
 8000cb0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb4:	1b64      	subs	r4, r4, r5
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	b11e      	cbz	r6, 8000cc2 <__udivmoddi4+0xa2>
 8000cba:	40dc      	lsrs	r4, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e9c6 4300 	strd	r4, r3, [r6]
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0xbc>
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	f000 80ed 	beq.w	8000eaa <__udivmoddi4+0x28a>
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	e9c6 0500 	strd	r0, r5, [r6]
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	fab3 f183 	clz	r1, r3
 8000ce0:	2900      	cmp	r1, #0
 8000ce2:	d149      	bne.n	8000d78 <__udivmoddi4+0x158>
 8000ce4:	42ab      	cmp	r3, r5
 8000ce6:	d302      	bcc.n	8000cee <__udivmoddi4+0xce>
 8000ce8:	4282      	cmp	r2, r0
 8000cea:	f200 80f8 	bhi.w	8000ede <__udivmoddi4+0x2be>
 8000cee:	1a84      	subs	r4, r0, r2
 8000cf0:	eb65 0203 	sbc.w	r2, r5, r3
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	4617      	mov	r7, r2
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d0e2      	beq.n	8000cc2 <__udivmoddi4+0xa2>
 8000cfc:	e9c6 4700 	strd	r4, r7, [r6]
 8000d00:	e7df      	b.n	8000cc2 <__udivmoddi4+0xa2>
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xe6>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f382 	clz	r3, r2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x210>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d20:	fb07 2015 	mls	r0, r7, r5, r2
 8000d24:	0c22      	lsrs	r2, r4, #16
 8000d26:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d2a:	fb0e f005 	mul.w	r0, lr, r5
 8000d2e:	4290      	cmp	r0, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x124>
 8000d32:	eb1c 0202 	adds.w	r2, ip, r2
 8000d36:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x122>
 8000d3c:	4290      	cmp	r0, r2
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2b8>
 8000d42:	4645      	mov	r5, r8
 8000d44:	1a12      	subs	r2, r2, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d4c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x14e>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x14c>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2c2>
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d76:	e79f      	b.n	8000cb8 <__udivmoddi4+0x98>
 8000d78:	f1c1 0720 	rsb	r7, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa05 f401 	lsl.w	r4, r5, r1
 8000d8a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d8e:	40fd      	lsrs	r5, r7
 8000d90:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d94:	4323      	orrs	r3, r4
 8000d96:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	fb09 5518 	mls	r5, r9, r8, r5
 8000da2:	0c1c      	lsrs	r4, r3, #16
 8000da4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da8:	fb08 f50e 	mul.w	r5, r8, lr
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	fa00 f001 	lsl.w	r0, r0, r1
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b0>
 8000db8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2b4>
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2b4>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4464      	add	r4, ip
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	b29d      	uxth	r5, r3
 8000dd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ddc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000de4:	45a6      	cmp	lr, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1da>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2ac>
 8000df2:	45a6      	cmp	lr, r4
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2ac>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	4464      	add	r4, ip
 8000dfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dfe:	fba3 9502 	umull	r9, r5, r3, r2
 8000e02:	eba4 040e 	sub.w	r4, r4, lr
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46ae      	mov	lr, r5
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x29c>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x298>
 8000e10:	b156      	cbz	r6, 8000e28 <__udivmoddi4+0x208>
 8000e12:	ebb0 0208 	subs.w	r2, r0, r8
 8000e16:	eb64 040e 	sbc.w	r4, r4, lr
 8000e1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1e:	40ca      	lsrs	r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	4317      	orrs	r7, r2
 8000e24:	e9c6 7400 	strd	r7, r4, [r6]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	f1c3 0120 	rsb	r1, r3, #32
 8000e34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e38:	fa20 f201 	lsr.w	r2, r0, r1
 8000e3c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e40:	409d      	lsls	r5, r3
 8000e42:	432a      	orrs	r2, r5
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1510 	mls	r5, r7, r0, r1
 8000e54:	0c11      	lsrs	r1, r2, #16
 8000e56:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e5a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e5e:	428d      	cmp	r5, r1
 8000e60:	fa04 f403 	lsl.w	r4, r4, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x258>
 8000e66:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b0>
 8000e70:	428d      	cmp	r5, r1
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b0>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4461      	add	r1, ip
 8000e78:	1b49      	subs	r1, r1, r5
 8000e7a:	b292      	uxth	r2, r2
 8000e7c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e80:	fb07 1115 	mls	r1, r7, r5, r1
 8000e84:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e88:	fb05 f10e 	mul.w	r1, r5, lr
 8000e8c:	4291      	cmp	r1, r2
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x282>
 8000e90:	eb1c 0202 	adds.w	r2, ip, r2
 8000e94:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2a8>
 8000e9a:	4291      	cmp	r1, r2
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2a8>
 8000e9e:	3d02      	subs	r5, #2
 8000ea0:	4462      	add	r2, ip
 8000ea2:	1a52      	subs	r2, r2, r1
 8000ea4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0xfc>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	4630      	mov	r0, r6
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xa2>
 8000eb0:	4639      	mov	r1, r7
 8000eb2:	e6e6      	b.n	8000c82 <__udivmoddi4+0x62>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6fb      	b.n	8000cb0 <__udivmoddi4+0x90>
 8000eb8:	4548      	cmp	r0, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f0>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f0>
 8000ec8:	4645      	mov	r5, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x282>
 8000ecc:	462b      	mov	r3, r5
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1da>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x258>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b0>
 8000ed8:	3d02      	subs	r5, #2
 8000eda:	4462      	add	r2, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x124>
 8000ede:	4608      	mov	r0, r1
 8000ee0:	e70a      	b.n	8000cf8 <__udivmoddi4+0xd8>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x14e>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdapterSSD1306_Init>:
void AdapterSSD1306_SetDisplayColor(bool dark_mode);



void AdapterSSD1306_Init()
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000ef2:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000ef4:	f020 ffd8 	bl	8021ea8 <ssd1306_Init>
    AdapterSSD1306_SetDisplayColor(darkMode);
 8000ef8:	4b42      	ldr	r3, [pc, #264]	; (8001004 <AdapterSSD1306_Init+0x118>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 f983 	bl	8001208 <AdapterSSD1306_SetDisplayColor>

    MenuData_t menuItems[NUM_MENU_PAGES] =
 8000f02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f06:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f240 2337 	movw	r3, #567	; 0x237
 8000f10:	461a      	mov	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f022 fe6c 	bl	8023bf0 <memset>
 8000f18:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f1c:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000f20:	4a39      	ldr	r2, [pc, #228]	; (8001008 <AdapterSSD1306_Init+0x11c>)
 8000f22:	461c      	mov	r4, r3
 8000f24:	4615      	mov	r5, r2
 8000f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f2e:	6020      	str	r0, [r4, #0]
 8000f30:	3404      	adds	r4, #4
 8000f32:	7021      	strb	r1, [r4, #0]
 8000f34:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f38:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8000f3c:	4b33      	ldr	r3, [pc, #204]	; (800100c <AdapterSSD1306_Init+0x120>)
 8000f3e:	f105 0415 	add.w	r4, r5, #21
 8000f42:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f44:	6020      	str	r0, [r4, #0]
 8000f46:	6061      	str	r1, [r4, #4]
 8000f48:	60a2      	str	r2, [r4, #8]
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	f105 0323 	add.w	r3, r5, #35	; 0x23
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	f8c3 2003 	str.w	r2, [r3, #3]
 8000f5a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f5e:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <AdapterSSD1306_Init+0x124>)
 8000f64:	f106 042a 	add.w	r4, r6, #42	; 0x2a
 8000f68:	461d      	mov	r5, r3
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	6020      	str	r0, [r4, #0]
 8000f6e:	6061      	str	r1, [r4, #4]
 8000f70:	60a2      	str	r2, [r4, #8]
 8000f72:	60e3      	str	r3, [r4, #12]
 8000f74:	f106 033a 	add.w	r3, r6, #58	; 0x3a
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	711a      	strb	r2, [r3, #4]
 8000f7e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000f82:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8000f86:	4b23      	ldr	r3, [pc, #140]	; (8001014 <AdapterSSD1306_Init+0x128>)
 8000f88:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 8000f8c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000f8e:	6020      	str	r0, [r4, #0]
 8000f90:	6061      	str	r1, [r4, #4]
 8000f92:	60a2      	str	r2, [r4, #8]
 8000f94:	881b      	ldrh	r3, [r3, #0]
 8000f96:	81a3      	strh	r3, [r4, #12]
 8000f98:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	f8c3 2003 	str.w	r2, [r3, #3]
 8000fa4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fa8:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <AdapterSSD1306_Init+0x12c>)
 8000fae:	f103 05d2 	add.w	r5, r3, #210	; 0xd2
 8000fb2:	4614      	mov	r4, r2
 8000fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fb6:	6028      	str	r0, [r5, #0]
 8000fb8:	6069      	str	r1, [r5, #4]
 8000fba:	60aa      	str	r2, [r5, #8]
 8000fbc:	60eb      	str	r3, [r5, #12]
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	6128      	str	r0, [r5, #16]
 8000fc2:	7923      	ldrb	r3, [r4, #4]
 8000fc4:	752b      	strb	r3, [r5, #20]
 8000fc6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fca:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 8000fce:	4b13      	ldr	r3, [pc, #76]	; (800101c <AdapterSSD1306_Init+0x130>)
 8000fd0:	f106 05e7 	add.w	r5, r6, #231	; 0xe7
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd8:	6028      	str	r0, [r5, #0]
 8000fda:	6069      	str	r1, [r5, #4]
 8000fdc:	60aa      	str	r2, [r5, #8]
 8000fde:	60eb      	str	r3, [r5, #12]
 8000fe0:	8823      	ldrh	r3, [r4, #0]
 8000fe2:	822b      	strh	r3, [r5, #16]
 8000fe4:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	709a      	strb	r2, [r3, #2]
        {{"CFG:DC Port:0", "ROT:DC SUP:DC FAB:DC", "MODBUS_DRIVER 1.0"}} // Menu 2
        // Adicione mais menus aqui, se necessário
    };

    // Escreve as informações do menu no display
    AdapterSSD1306_WriteMenu( menuItems);
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f957 	bl	80012a4 <AdapterSSD1306_WriteMenu>

    // Inicializa a tarefa de atualização do display
    AdapterSSD1306_InitUpdateTask();
 8000ff6:	f000 fad9 	bl	80015ac <AdapterSSD1306_InitUpdateTask>
}
 8000ffa:	bf00      	nop
 8000ffc:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	080275a8 	.word	0x080275a8
 800100c:	080275c0 	.word	0x080275c0
 8001010:	080275d8 	.word	0x080275d8
 8001014:	080275f0 	.word	0x080275f0
 8001018:	08027608 	.word	0x08027608
 800101c:	08027620 	.word	0x08027620

08001020 <AdapterSSD1306_LoadMenus>:


void AdapterSSD1306_LoadMenus()
{
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8001026:	af00      	add	r7, sp, #0

	AdapterSSD1306_SetDisplayColor(darkMode);
 8001028:	4b6c      	ldr	r3, [pc, #432]	; (80011dc <AdapterSSD1306_LoadMenus+0x1bc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f8eb 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
  // Definição dos itens do menu
	MenuData_t menuItems[NUM_MENU_PAGES] =
 8001032:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001036:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 800103a:	4618      	mov	r0, r3
 800103c:	f240 2337 	movw	r3, #567	; 0x237
 8001040:	461a      	mov	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	f022 fdd4 	bl	8023bf0 <memset>
 8001048:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800104c:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001050:	4b63      	ldr	r3, [pc, #396]	; (80011e0 <AdapterSSD1306_LoadMenus+0x1c0>)
 8001052:	462c      	mov	r4, r5
 8001054:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001056:	c407      	stmia	r4!, {r0, r1, r2}
 8001058:	7023      	strb	r3, [r4, #0]
 800105a:	f105 030d 	add.w	r3, r5, #13
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001068:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800106c:	4b5d      	ldr	r3, [pc, #372]	; (80011e4 <AdapterSSD1306_LoadMenus+0x1c4>)
 800106e:	f105 0415 	add.w	r4, r5, #21
 8001072:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001074:	6020      	str	r0, [r4, #0]
 8001076:	6061      	str	r1, [r4, #4]
 8001078:	60a2      	str	r2, [r4, #8]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	7323      	strb	r3, [r4, #12]
 800107e:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800108c:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001090:	4b55      	ldr	r3, [pc, #340]	; (80011e8 <AdapterSSD1306_LoadMenus+0x1c8>)
 8001092:	f105 042a 	add.w	r4, r5, #42	; 0x2a
 8001096:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001098:	6020      	str	r0, [r4, #0]
 800109a:	6061      	str	r1, [r4, #4]
 800109c:	60a2      	str	r2, [r4, #8]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	7323      	strb	r3, [r4, #12]
 80010a2:	f105 0337 	add.w	r3, r5, #55	; 0x37
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010b0:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010b4:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <AdapterSSD1306_LoadMenus+0x1cc>)
 80010b6:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 80010ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010bc:	6020      	str	r0, [r4, #0]
 80010be:	6061      	str	r1, [r4, #4]
 80010c0:	60a2      	str	r2, [r4, #8]
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	81a3      	strh	r3, [r4, #12]
 80010c6:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f8c3 2003 	str.w	r2, [r3, #3]
 80010d2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010d6:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010da:	4b45      	ldr	r3, [pc, #276]	; (80011f0 <AdapterSSD1306_LoadMenus+0x1d0>)
 80010dc:	f105 04d2 	add.w	r4, r5, #210	; 0xd2
 80010e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010e2:	6020      	str	r0, [r4, #0]
 80010e4:	6061      	str	r1, [r4, #4]
 80010e6:	60a2      	str	r2, [r4, #8]
 80010e8:	f105 03de 	add.w	r3, r5, #222	; 0xde
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	721a      	strb	r2, [r3, #8]
 80010f4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010f8:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010fc:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <AdapterSSD1306_LoadMenus+0x1d4>)
 80010fe:	f105 04e7 	add.w	r4, r5, #231	; 0xe7
 8001102:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001104:	6020      	str	r0, [r4, #0]
 8001106:	6061      	str	r1, [r4, #4]
 8001108:	60a2      	str	r2, [r4, #8]
 800110a:	f105 03f3 	add.w	r3, r5, #243	; 0xf3
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	721a      	strb	r2, [r3, #8]
 8001116:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800111a:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800111e:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <AdapterSSD1306_LoadMenus+0x1d8>)
 8001120:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
 8001124:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001126:	6020      	str	r0, [r4, #0]
 8001128:	6061      	str	r1, [r4, #4]
 800112a:	60a2      	str	r2, [r4, #8]
 800112c:	881a      	ldrh	r2, [r3, #0]
 800112e:	789b      	ldrb	r3, [r3, #2]
 8001130:	81a2      	strh	r2, [r4, #12]
 8001132:	73a3      	strb	r3, [r4, #14]
 8001134:	f205 1389 	addw	r3, r5, #393	; 0x189
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	809a      	strh	r2, [r3, #4]
 800113e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001142:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <AdapterSSD1306_LoadMenus+0x1dc>)
 8001148:	f205 148f 	addw	r4, r5, #399	; 0x18f
 800114c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800114e:	6020      	str	r0, [r4, #0]
 8001150:	6061      	str	r1, [r4, #4]
 8001152:	60a2      	str	r2, [r4, #8]
 8001154:	881a      	ldrh	r2, [r3, #0]
 8001156:	789b      	ldrb	r3, [r3, #2]
 8001158:	81a2      	strh	r2, [r4, #12]
 800115a:	73a3      	strb	r3, [r4, #14]
 800115c:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	809a      	strh	r2, [r3, #4]
 8001166:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800116a:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <AdapterSSD1306_LoadMenus+0x1e0>)
 8001170:	f505 74d2 	add.w	r4, r5, #420	; 0x1a4
 8001174:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001176:	c407      	stmia	r4!, {r0, r1, r2}
 8001178:	8023      	strh	r3, [r4, #0]
 800117a:	3402      	adds	r4, #2
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	7023      	strb	r3, [r4, #0]
 8001180:	f205 13b3 	addw	r3, r5, #435	; 0x1b3
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	809a      	strh	r2, [r3, #4]
		{{"ROT:Port:22000","SUP:Port:22001", "FAB:Port:22002"}}// Menu 2
		// Adicione mais menus aqui, se necessário
	};

	// Copiar os itens definidos para a estrutura menuDisplay
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8001190:	e018      	b.n	80011c4 <AdapterSSD1306_LoadMenus+0x1a4>
	{
		memcpy(menuDisplay.items[page], menuItems[page].items, sizeof(menuItems[page].items));
 8001192:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001196:	4613      	mov	r3, r2
 8001198:	019b      	lsls	r3, r3, #6
 800119a:	1a9b      	subs	r3, r3, r2
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <AdapterSSD1306_LoadMenus+0x1e4>)
 800119e:	1898      	adds	r0, r3, r2
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	019a      	lsls	r2, r3, #6
 80011ae:	1ad2      	subs	r2, r2, r3
 80011b0:	188b      	adds	r3, r1, r2
 80011b2:	22bd      	movs	r2, #189	; 0xbd
 80011b4:	4619      	mov	r1, r3
 80011b6:	f023 fe78 	bl	8024eaa <memcpy>
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 80011ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80011be:	3301      	adds	r3, #1
 80011c0:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 80011c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	dde2      	ble.n	8001192 <AdapterSSD1306_LoadMenus+0x172>
	}

	// Escreve as informações do menu no display
	AdapterSSD1306_WriteMenu(&menuDisplay);
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <AdapterSSD1306_LoadMenus+0x1e4>)
 80011ce:	f000 f869 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 80011d2:	bf00      	nop
 80011d4:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	08027638 	.word	0x08027638
 80011e4:	08027650 	.word	0x08027650
 80011e8:	08027668 	.word	0x08027668
 80011ec:	08027680 	.word	0x08027680
 80011f0:	08027698 	.word	0x08027698
 80011f4:	080276b0 	.word	0x080276b0
 80011f8:	080276c8 	.word	0x080276c8
 80011fc:	080276e0 	.word	0x080276e0
 8001200:	080276f8 	.word	0x080276f8
 8001204:	20000290 	.word	0x20000290

08001208 <AdapterSSD1306_SetDisplayColor>:




void AdapterSSD1306_SetDisplayColor(bool dark_mode)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    darkMode = dark_mode;
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <AdapterSSD1306_SetDisplayColor+0x34>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	7013      	strb	r3, [r2, #0]
    if (darkMode)
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <AdapterSSD1306_SetDisplayColor+0x34>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <AdapterSSD1306_SetDisplayColor+0x20>
    {
        ssd1306_Fill(Black);
 8001220:	2000      	movs	r0, #0
 8001222:	f020 fea9 	bl	8021f78 <ssd1306_Fill>
 8001226:	e002      	b.n	800122e <AdapterSSD1306_SetDisplayColor+0x26>
    }
    else
    {
        ssd1306_Fill(White);
 8001228:	2001      	movs	r0, #1
 800122a:	f020 fea5 	bl	8021f78 <ssd1306_Fill>
    }
    osDelay(50);
 800122e:	2032      	movs	r0, #50	; 0x32
 8001230:	f008 fb24 	bl	800987c <osDelay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000

08001240 <AdapterSSD1306_Refresh>:

void AdapterSSD1306_Refresh(uint16_t page, uint16_t line)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b0b2      	sub	sp, #200	; 0xc8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]

	MenuData_t menu = { 0 };
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	22bd      	movs	r2, #189	; 0xbd
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f022 fcc9 	bl	8023bf0 <memset>

	snprintf(menu.items[page][line], sizeof(menu.items[page][line]),"                    ");
 800125e:	88f9      	ldrh	r1, [r7, #6]
 8001260:	88ba      	ldrh	r2, [r7, #4]
 8001262:	f107 0008 	add.w	r0, r7, #8
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	00da      	lsls	r2, r3, #3
 800126e:	1ad2      	subs	r2, r2, r3
 8001270:	460b      	mov	r3, r1
 8001272:	019b      	lsls	r3, r3, #6
 8001274:	1a5b      	subs	r3, r3, r1
 8001276:	4413      	add	r3, r2
 8001278:	4403      	add	r3, r0
 800127a:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <AdapterSSD1306_Refresh+0x60>)
 800127c:	2115      	movs	r1, #21
 800127e:	4618      	mov	r0, r3
 8001280:	f022 fb5e 	bl	8023940 <sniprintf>

	portENTER_CRITICAL();
 8001284:	f00b fb1e 	bl	800c8c4 <vPortEnterCritical>
	AdapterSSD1306_WriteMenu(&menu);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4618      	mov	r0, r3
 800128e:	f000 f809 	bl	80012a4 <AdapterSSD1306_WriteMenu>
	portEXIT_CRITICAL();
 8001292:	f00b fb47 	bl	800c924 <vPortExitCritical>
}
 8001296:	bf00      	nop
 8001298:	37c8      	adds	r7, #200	; 0xc8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08027710 	.word	0x08027710

080012a4 <AdapterSSD1306_WriteMenu>:


void AdapterSSD1306_WriteMenu(const MenuData_t *menu_data)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
    // Limpa o display antes de escrever as novas informações
    // clear_display();

    // Escreve cada linha do menu no display
    int start_index = current_page * MENU_ITEMS_PER_PAGE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <AdapterSSD1306_WriteMenu+0x64>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
    int end_index = start_index + MENU_ITEMS_PER_PAGE;
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	3303      	adds	r3, #3
 80012bc:	60fb      	str	r3, [r7, #12]

    for (int i = start_index; i < end_index; i++)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e018      	b.n	80012f6 <AdapterSSD1306_WriteMenu+0x52>
    {
        AdapterSSD1306_WriteLine(menu_data->items[current_page][i - start_index], i - start_index);
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <AdapterSSD1306_WriteMenu+0x64>)
 80012c6:	6819      	ldr	r1, [r3, #0]
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad2      	subs	r2, r2, r3
 80012ce:	4613      	mov	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	4413      	add	r3, r2
 80012d4:	00da      	lsls	r2, r3, #3
 80012d6:	1ad2      	subs	r2, r2, r3
 80012d8:	460b      	mov	r3, r1
 80012da:	019b      	lsls	r3, r3, #6
 80012dc:	1a5b      	subs	r3, r3, r1
 80012de:	4413      	add	r3, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	18d0      	adds	r0, r2, r3
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	f000 f80e 	bl	800130c <AdapterSSD1306_WriteLine>
    for (int i = start_index; i < end_index; i++)
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3301      	adds	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dbe2      	blt.n	80012c4 <AdapterSSD1306_WriteMenu+0x20>
    }
    // Atualiza o display
    //update_display();
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000288 	.word	0x20000288

0800130c <AdapterSSD1306_WriteLine>:

// Função para escrever uma linha do menu no display
void AdapterSSD1306_WriteLine(const char *text, int line_number)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    // Define a posição vertical da linha baseada no número da linha
    int vertical_position = 2 + line_number * 10; // Ajuste conforme necessário
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	3302      	adds	r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
    ssd1306_SetCursor(1, vertical_position);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	4619      	mov	r1, r3
 800132a:	2001      	movs	r0, #1
 800132c:	f020 ff66 	bl	80221fc <ssd1306_SetCursor>

    if (darkMode)
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <AdapterSSD1306_WriteLine+0x54>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <AdapterSSD1306_WriteLine+0x3a>
    {
        ssd1306_WriteString(text, Font_6x8, White);
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <AdapterSSD1306_WriteLine+0x58>)
 800133a:	2301      	movs	r3, #1
 800133c:	ca06      	ldmia	r2, {r1, r2}
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f020 ff36 	bl	80221b0 <ssd1306_WriteString>
 8001344:	e005      	b.n	8001352 <AdapterSSD1306_WriteLine+0x46>
    }
    else
    {
        ssd1306_WriteString(text, Font_6x8, Black);
 8001346:	4a07      	ldr	r2, [pc, #28]	; (8001364 <AdapterSSD1306_WriteLine+0x58>)
 8001348:	2300      	movs	r3, #0
 800134a:	ca06      	ldmia	r2, {r1, r2}
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f020 ff2f 	bl	80221b0 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 8001352:	f020 fe29 	bl	8021fa8 <ssd1306_UpdateScreen>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000
 8001364:	20000038 	.word	0x20000038

08001368 <AdapterSSD1306_NextPage>:

void AdapterSSD1306_NextPage()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    current_page = (current_page + 1) % NUM_MENU_PAGES;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <AdapterSSD1306_NextPage+0x34>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	1c59      	adds	r1, r3, #1
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <AdapterSSD1306_NextPage+0x38>)
 8001374:	fb83 3201 	smull	r3, r2, r3, r1
 8001378:	17cb      	asrs	r3, r1, #31
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	1aca      	subs	r2, r1, r3
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <AdapterSSD1306_NextPage+0x34>)
 8001386:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <AdapterSSD1306_NextPage+0x3c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff3b 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <AdapterSSD1306_NextPage+0x40>)
 8001394:	f7ff ff86 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000288 	.word	0x20000288
 80013a0:	55555556 	.word	0x55555556
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000290 	.word	0x20000290

080013ac <AdapterSSD1306_PreviousPage>:

void AdapterSSD1306_PreviousPage()
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    current_page = (current_page - 1 + NUM_MENU_PAGES) % NUM_MENU_PAGES;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <AdapterSSD1306_PreviousPage+0x34>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	1c99      	adds	r1, r3, #2
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <AdapterSSD1306_PreviousPage+0x38>)
 80013b8:	fb83 3201 	smull	r3, r2, r3, r1
 80013bc:	17cb      	asrs	r3, r1, #31
 80013be:	1ad2      	subs	r2, r2, r3
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	1aca      	subs	r2, r1, r3
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <AdapterSSD1306_PreviousPage+0x34>)
 80013ca:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <AdapterSSD1306_PreviousPage+0x3c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff ff19 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <AdapterSSD1306_PreviousPage+0x40>)
 80013d8:	f7ff ff64 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000288 	.word	0x20000288
 80013e4:	55555556 	.word	0x55555556
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000290 	.word	0x20000290

080013f0 <AdapterSSD1306_DarkMode>:

void AdapterSSD1306_DarkMode(bool enable)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
    AdapterSSD1306_SetDisplayColor(enable);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff03 	bl	8001208 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <AdapterSSD1306_DarkMode+0x20>)
 8001404:	f7ff ff4e 	bl	80012a4 <AdapterSSD1306_WriteMenu>
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000290 	.word	0x20000290

08001414 <AdapterSSD1306_UpdateTask>:


void AdapterSSD1306_UpdateTask(void const *argument)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0b2      	sub	sp, #200	; 0xc8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

	osDelay(2000);
 800141c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001420:	f008 fa2c 	bl	800987c <osDelay>

	AdapterSSD1306_LoadMenus();
 8001424:	f7ff fdfc 	bl	8001020 <AdapterSSD1306_LoadMenus>
    MenuData_t receivedMenu = {0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	22bd      	movs	r2, #189	; 0xbd
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f022 fbdd 	bl	8023bf0 <memset>

    while (1)
    {
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 8001436:	4b11      	ldr	r3, [pc, #68]	; (800147c <AdapterSSD1306_UpdateTask+0x68>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001442:	4618      	mov	r0, r3
 8001444:	f009 f8fa 	bl	800a63c <xQueueReceive>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d112      	bne.n	8001474 <AdapterSSD1306_UpdateTask+0x60>
        {
            if (AdapterSSD1306_RefreshDisplay(&receivedMenu, &menuDisplay))
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	490b      	ldr	r1, [pc, #44]	; (8001480 <AdapterSSD1306_UpdateTask+0x6c>)
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f815 	bl	8001484 <AdapterSSD1306_RefreshDisplay>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <AdapterSSD1306_UpdateTask+0x52>
            {
                AdapterSSD1306_WriteMenu(&menuDisplay);
 8001460:	4807      	ldr	r0, [pc, #28]	; (8001480 <AdapterSSD1306_UpdateTask+0x6c>)
 8001462:	f7ff ff1f 	bl	80012a4 <AdapterSSD1306_WriteMenu>
            }
            memset(&receivedMenu, 0, sizeof(MenuData_t));
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	22bd      	movs	r2, #189	; 0xbd
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f022 fbbe 	bl	8023bf0 <memset>
        }
        osDelay(10);
 8001474:	200a      	movs	r0, #10
 8001476:	f008 fa01 	bl	800987c <osDelay>
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 800147a:	e7dc      	b.n	8001436 <AdapterSSD1306_UpdateTask+0x22>
 800147c:	20001718 	.word	0x20001718
 8001480:	20000290 	.word	0x20000290

08001484 <AdapterSSD1306_RefreshDisplay>:
    }
}

bool AdapterSSD1306_RefreshDisplay(MenuData_t *receivedMenu, MenuData_t *menuDisplay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 800148e:	2300      	movs	r3, #0
 8001490:	75fb      	strb	r3, [r7, #23]
    // Verificar se receivedMenu e menuDisplay são válidos
    if (receivedMenu == NULL || menuDisplay == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <AdapterSSD1306_RefreshDisplay+0x1a>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <AdapterSSD1306_RefreshDisplay+0x1e>
    {
        return ret; // Retorna sem fazer nada se algum deles for nulo
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	e067      	b.n	8001572 <AdapterSSD1306_RefreshDisplay+0xee>
    }

    // Iterar sobre todas as páginas e itens do menu
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	e060      	b.n	800156a <AdapterSSD1306_RefreshDisplay+0xe6>
    {
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e057      	b.n	800155e <AdapterSSD1306_RefreshDisplay+0xda>
        {
            // Verificar se o índice está dentro dos limites do array
            if (i < NUM_MENU_PAGES && j < MENU_ITEMS_PER_PAGE)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	dc51      	bgt.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	dc4e      	bgt.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
            {
                // Verificar se o item atual difere do item recebido
                if (strcmp(menuDisplay->items[i][j], receivedMenu->items[i][j]) != 0)
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	00da      	lsls	r2, r3, #3
 80014c4:	1ad2      	subs	r2, r2, r3
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	460b      	mov	r3, r1
 80014ca:	019b      	lsls	r3, r3, #6
 80014cc:	1a5b      	subs	r3, r3, r1
 80014ce:	4413      	add	r3, r2
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	18d0      	adds	r0, r2, r3
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	00da      	lsls	r2, r3, #3
 80014de:	1ad2      	subs	r2, r2, r3
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	460b      	mov	r3, r1
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	1a5b      	subs	r3, r3, r1
 80014e8:	4413      	add	r3, r2
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7fe fe6e 	bl	80001d0 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d02e      	beq.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
                {
                    // Se houver diferença, copiar o novo item para o menuDisplay
                    if (strcmp(receivedMenu->items[i][j], "") != 0)
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00da      	lsls	r2, r3, #3
 8001504:	1ad2      	subs	r2, r2, r3
 8001506:	6939      	ldr	r1, [r7, #16]
 8001508:	460b      	mov	r3, r1
 800150a:	019b      	lsls	r3, r3, #6
 800150c:	1a5b      	subs	r3, r3, r1
 800150e:	4413      	add	r3, r2
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	4413      	add	r3, r2
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d01e      	beq.n	8001558 <AdapterSSD1306_RefreshDisplay+0xd4>
                    {
                        strcpy(menuDisplay->items[i][j], receivedMenu->items[i][j]);
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00da      	lsls	r2, r3, #3
 8001524:	1ad2      	subs	r2, r2, r3
 8001526:	6939      	ldr	r1, [r7, #16]
 8001528:	460b      	mov	r3, r1
 800152a:	019b      	lsls	r3, r3, #6
 800152c:	1a5b      	subs	r3, r3, r1
 800152e:	4413      	add	r3, r2
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	18d0      	adds	r0, r2, r3
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	00da      	lsls	r2, r3, #3
 800153e:	1ad2      	subs	r2, r2, r3
 8001540:	6939      	ldr	r1, [r7, #16]
 8001542:	460b      	mov	r3, r1
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	1a5b      	subs	r3, r3, r1
 8001548:	4413      	add	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f023 fca3 	bl	8024e9a <strcpy>
                        ret = true;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3301      	adds	r3, #1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2b02      	cmp	r3, #2
 8001562:	dda4      	ble.n	80014ae <AdapterSSD1306_RefreshDisplay+0x2a>
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	3301      	adds	r3, #1
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	2b02      	cmp	r3, #2
 800156e:	dd9b      	ble.n	80014a8 <AdapterSSD1306_RefreshDisplay+0x24>
                    }
                }
            }
        }
    }
    return ret;
 8001570:	7dfb      	ldrb	r3, [r7, #23]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>:

void AdapterSSD1306_SendDataToMenuQueueUpdate(const MenuData_t *menu_data)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
    // Tenta enviar os dados para a fila, aguardando até que haja espaço na fila
    if (xQueueSend(menuQueueHandle, menu_data, portMAX_DELAY) != pdPASS)
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x2c>)
 8001586:	6818      	ldr	r0, [r3, #0]
 8001588:	2300      	movs	r3, #0
 800158a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f008 fe2e 	bl	800a1f0 <xQueueGenericSend>
 8001594:	4603      	mov	r3, r0
 8001596:	2b01      	cmp	r3, #1
 8001598:	d002      	beq.n	80015a0 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x24>
    {
        vTaskDelay(pdMS_TO_TICKS(50));
 800159a:	2032      	movs	r0, #50	; 0x32
 800159c:	f009 fe74 	bl	800b288 <vTaskDelay>
    }
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20001718 	.word	0x20001718

080015ac <AdapterSSD1306_InitUpdateTask>:

void AdapterSSD1306_InitUpdateTask()
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
    /* definition and creation of tcpServerTask */
    osThreadDef(updateDisplayTask, AdapterSSD1306_UpdateTask, osPriorityBelowNormal, 0, UPDATE_DISPLAY_TASK_STACK_SIZE);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <AdapterSSD1306_InitUpdateTask+0x30>)
 80015b4:	1d3c      	adds	r4, r7, #4
 80015b6:	461d      	mov	r5, r3
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80015c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    updateDisplayTaskHandle = osThreadCreate(osThread(updateDisplayTask), NULL);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f008 f90b 	bl	80097e4 <osThreadCreate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <AdapterSSD1306_InitUpdateTask+0x34>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	3720      	adds	r7, #32
 80015d8:	46bd      	mov	sp, r7
 80015da:	bdb0      	pop	{r4, r5, r7, pc}
 80015dc:	0802773c 	.word	0x0802773c
 80015e0:	2000028c 	.word	0x2000028c

080015e4 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");

	  int status = lfs_storage_init(&cfg);
 80015ea:	4829      	ldr	r0, [pc, #164]	; (8001690 <FileSystemInit+0xac>)
 80015ec:	f001 f98a 	bl	8002904 <lfs_storage_init>
 80015f0:	6078      	str	r0, [r7, #4]

	  if (!status)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <FileSystemInit+0x18>
	  {
		  LOG2( "erro: %i", status);
	    return status;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	e045      	b.n	8001688 <FileSystemInit+0xa4>
	  }

	  LOG2("File system start.");

  lfs_get_default_config(&cfg);
 80015fc:	4824      	ldr	r0, [pc, #144]	; (8001690 <FileSystemInit+0xac>)
 80015fe:	f001 f96b 	bl	80028d8 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	e016      	b.n	8001636 <FileSystemInit+0x52>
  {
    openFile[i].number = 0;
 8001608:	4a22      	ldr	r2, [pc, #136]	; (8001694 <FileSystemInit+0xb0>)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	2158      	movs	r1, #88	; 0x58
 800160e:	fb01 f303 	mul.w	r3, r1, r3
 8001612:	4413      	add	r3, r2
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2258      	movs	r2, #88	; 0x58
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <FileSystemInit+0xb0>)
 8001622:	4413      	add	r3, r2
 8001624:	3304      	adds	r3, #4
 8001626:	2254      	movs	r2, #84	; 0x54
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f022 fae0 	bl	8023bf0 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b03      	cmp	r3, #3
 800163a:	dde5      	ble.n	8001608 <FileSystemInit+0x24>
  }


  LOG2("Mount file system  ... ");

  status = lfs_mount(&lfs, &cfg);
 800163c:	4914      	ldr	r1, [pc, #80]	; (8001690 <FileSystemInit+0xac>)
 800163e:	4816      	ldr	r0, [pc, #88]	; (8001698 <FileSystemInit+0xb4>)
 8001640:	f011 fcfe 	bl	8013040 <lfs_mount>
 8001644:	6078      	str	r0, [r7, #4]
  if (status)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <FileSystemInit+0x7a>
  {
	  LOG2("erro: %i", status);
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8001652:	d104      	bne.n	800165e <FileSystemInit+0x7a>
    {
      // Formata o sistema de arquivos
    	LOG2("Format file system ... ");
      status = lfs_format(&lfs, &cfg);
 8001654:	490e      	ldr	r1, [pc, #56]	; (8001690 <FileSystemInit+0xac>)
 8001656:	4810      	ldr	r0, [pc, #64]	; (8001698 <FileSystemInit+0xb4>)
 8001658:	f011 fcdc 	bl	8013014 <lfs_format>
 800165c:	6078      	str	r0, [r7, #4]
    	  LOG2("erro: %d", status);
      }
    }
  }

  if (status == LFS_ERR_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d110      	bne.n	8001686 <FileSystemInit+0xa2>
  {
	  LOG2("OK");
    lfs_mounted = 1;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <FileSystemInit+0xb8>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <FileSystemInit+0xbc>)
 800166c:	480a      	ldr	r0, [pc, #40]	; (8001698 <FileSystemInit+0xb4>)
 800166e:	f011 fe05 	bl	801327c <lfs_mkdir>
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_CONFIG);
 8001672:	490c      	ldr	r1, [pc, #48]	; (80016a4 <FileSystemInit+0xc0>)
 8001674:	4808      	ldr	r0, [pc, #32]	; (8001698 <FileSystemInit+0xb4>)
 8001676:	f011 fe01 	bl	801327c <lfs_mkdir>
    lfs_mkdir(&lfs,  FILESYSTEM_FOLDER_BOOTLOADER);
 800167a:	490b      	ldr	r1, [pc, #44]	; (80016a8 <FileSystemInit+0xc4>)
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <FileSystemInit+0xb4>)
 800167e:	f011 fdfd 	bl	801327c <lfs_mkdir>
    list_dir();
 8001682:	f000 f99b 	bl	80019bc <list_dir>

  }

  return status;
 8001686:	687b      	ldr	r3, [r7, #4]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20011f58 	.word	0x20011f58
 8001694:	20000350 	.word	0x20000350
 8001698:	20011ee0 	.word	0x20011ee0
 800169c:	20011edc 	.word	0x20011edc
 80016a0:	08027758 	.word	0x08027758
 80016a4:	0802775c 	.word	0x0802775c
 80016a8:	08027760 	.word	0x08027760

080016ac <__sflags>:
 * Return the (stdio) flags for a given mode.
 * Based on https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/stdio/flags.c
 * Return 0 on error.
 */
static int __sflags(const char *mode)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  int ret, m, o;
  switch (*mode++)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b77      	cmp	r3, #119	; 0x77
 80016be:	d00a      	beq.n	80016d6 <__sflags+0x2a>
 80016c0:	2b77      	cmp	r3, #119	; 0x77
 80016c2:	dc14      	bgt.n	80016ee <__sflags+0x42>
 80016c4:	2b61      	cmp	r3, #97	; 0x61
 80016c6:	d00c      	beq.n	80016e2 <__sflags+0x36>
 80016c8:	2b72      	cmp	r3, #114	; 0x72
 80016ca:	d110      	bne.n	80016ee <__sflags+0x42>
  {
    case 'r': /* open for reading */
      m = LFS_O_RDONLY;
 80016cc:	2301      	movs	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
      o = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
      break;
 80016d4:	e010      	b.n	80016f8 <__sflags+0x4c>
    case 'w': /* open for writing */
      m = LFS_O_WRONLY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_TRUNC;
 80016da:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80016de:	613b      	str	r3, [r7, #16]
      break;
 80016e0:	e00a      	b.n	80016f8 <__sflags+0x4c>
    case 'a': /* open for appending */
      m = LFS_O_WRONLY;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_APPEND;
 80016e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80016ea:	613b      	str	r3, [r7, #16]
      break;
 80016ec:	e004      	b.n	80016f8 <__sflags+0x4c>
    default: /* illegal mode */
      errno = EINVAL;
 80016ee:	4b0f      	ldr	r3, [pc, #60]	; (800172c <__sflags+0x80>)
 80016f0:	2216      	movs	r2, #22
 80016f2:	601a      	str	r2, [r3, #0]
      return (0);
 80016f4:	2300      	movs	r3, #0
 80016f6:	e013      	b.n	8001720 <__sflags+0x74>
  }
  /* [rwa]\+ or [rwa]b\+ means read and write */
  if (*mode == '+' || (*mode == 'b' && mode[1] == '+'))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b2b      	cmp	r3, #43	; 0x2b
 80016fe:	d008      	beq.n	8001712 <__sflags+0x66>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b62      	cmp	r3, #98	; 0x62
 8001706:	d106      	bne.n	8001716 <__sflags+0x6a>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3301      	adds	r3, #1
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b2b      	cmp	r3, #43	; 0x2b
 8001710:	d101      	bne.n	8001716 <__sflags+0x6a>
  {
    m = LFS_O_RDWR;
 8001712:	2303      	movs	r3, #3
 8001714:	617b      	str	r3, [r7, #20]
  }
  ret = m | o;
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  return (ret);
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	200164c4 	.word	0x200164c4

08001730 <file_open>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  mode  C string contendo o modo de acesso do arquivo
 * @retval file  Ponteiro para o struct de controle do arquivo
 */
FILE_POINTER file_open(const char *path, const char *mode)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  int flags;
  int count = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  if (openFilesCount >= MAX_OPEN_FILES)
 800173e:	4b36      	ldr	r3, [pc, #216]	; (8001818 <file_open+0xe8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b03      	cmp	r3, #3
 8001744:	dd01      	ble.n	800174a <file_open+0x1a>
    return NULL;
 8001746:	2300      	movs	r3, #0
 8001748:	e062      	b.n	8001810 <file_open+0xe0>

  if ((flags = __sflags(mode)) == 0)
 800174a:	6838      	ldr	r0, [r7, #0]
 800174c:	f7ff ffae 	bl	80016ac <__sflags>
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d101      	bne.n	800175c <file_open+0x2c>
    return (NULL);
 8001758:	2300      	movs	r3, #0
 800175a:	e059      	b.n	8001810 <file_open+0xe0>

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8001760:	e00d      	b.n	800177e <file_open+0x4e>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b0d      	cmp	r3, #13
 8001768:	d003      	beq.n	8001772 <file_open+0x42>
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b0a      	cmp	r3, #10
 8001770:	d102      	bne.n	8001778 <file_open+0x48>
      *pchar = 0;
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
    pchar++;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	3301      	adds	r3, #1
 800177c:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1ed      	bne.n	8001762 <file_open+0x32>
  }

  // Create a entry for the file in openFile structure
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	e018      	b.n	80017be <file_open+0x8e>
  {
    if (openFile[count].number == 0)
 800178c:	4a23      	ldr	r2, [pc, #140]	; (800181c <file_open+0xec>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2158      	movs	r1, #88	; 0x58
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	4413      	add	r3, r2
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10c      	bne.n	80017b8 <file_open+0x88>
    {
      openFile[count].number = openFilesCount++;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <file_open+0xe8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	491c      	ldr	r1, [pc, #112]	; (8001818 <file_open+0xe8>)
 80017a6:	600a      	str	r2, [r1, #0]
 80017a8:	491c      	ldr	r1, [pc, #112]	; (800181c <file_open+0xec>)
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	2058      	movs	r0, #88	; 0x58
 80017ae:	fb00 f202 	mul.w	r2, r0, r2
 80017b2:	440a      	add	r2, r1
 80017b4:	6013      	str	r3, [r2, #0]
      break;
 80017b6:	e005      	b.n	80017c4 <file_open+0x94>
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3301      	adds	r3, #1
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	dde3      	ble.n	800178c <file_open+0x5c>
    }
  }

  int status = lfs_file_open(&lfs, &(openFile[count].file), path, flags);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	2258      	movs	r2, #88	; 0x58
 80017c8:	fb02 f303 	mul.w	r3, r2, r3
 80017cc:	4a13      	ldr	r2, [pc, #76]	; (800181c <file_open+0xec>)
 80017ce:	4413      	add	r3, r2
 80017d0:	1d19      	adds	r1, r3, #4
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4812      	ldr	r0, [pc, #72]	; (8001820 <file_open+0xf0>)
 80017d8:	f011 fc60 	bl	801309c <lfs_file_open>
 80017dc:	60b8      	str	r0, [r7, #8]

  if (status != LFS_ERR_OK)
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d00e      	beq.n	8001802 <file_open+0xd2>
  {
    openFile[count].number = 0;
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <file_open+0xec>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2158      	movs	r1, #88	; 0x58
 80017ea:	fb01 f303 	mul.w	r3, r1, r3
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
    openFilesCount--;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <file_open+0xe8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	4a07      	ldr	r2, [pc, #28]	; (8001818 <file_open+0xe8>)
 80017fc:	6013      	str	r3, [r2, #0]
    LOG2("Error lfs_file_open - file %s - ret = %i", path, status);
    return NULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	e006      	b.n	8001810 <file_open+0xe0>
  }

  LOG2("lfs_file_open - file %s - ret = %i", path, status);
  return &openFile[count].file;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2258      	movs	r2, #88	; 0x58
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <file_open+0xec>)
 800180c:	4413      	add	r3, r2
 800180e:	3304      	adds	r3, #4
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	200004b0 	.word	0x200004b0
 800181c:	20000350 	.word	0x20000350
 8001820:	20011ee0 	.word	0x20011ee0

08001824 <file_close>:
 * @brief  Função de fechamento do arquivo
 * @param  file Ponteiro para o struct de controle do arquivo
 * @retval int  Status da operação
 */
int file_close(FILE_POINTER file)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  //***FS_Flush(lfs, file);
  int status = lfs_file_close(&lfs, file);
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	481d      	ldr	r0, [pc, #116]	; (80018a4 <file_close+0x80>)
 8001830:	f011 fc68 	bl	8013104 <lfs_file_close>
 8001834:	60b8      	str	r0, [r7, #8]

  // Delete the entry assigned to file in openFile structure
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e021      	b.n	8001880 <file_close+0x5c>
  {
    if (&(openFile[i].file) == file)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2258      	movs	r2, #88	; 0x58
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <file_close+0x84>)
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	d114      	bne.n	800187a <file_close+0x56>
    {
      openFile[i].number = 0;
 8001850:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <file_close+0x84>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2158      	movs	r1, #88	; 0x58
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
      memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2258      	movs	r2, #88	; 0x58
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	4a0f      	ldr	r2, [pc, #60]	; (80018a8 <file_close+0x84>)
 800186a:	4413      	add	r3, r2
 800186c:	3304      	adds	r3, #4
 800186e:	2254      	movs	r2, #84	; 0x54
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f022 f9bc 	bl	8023bf0 <memset>
      break;
 8001878:	e005      	b.n	8001886 <file_close+0x62>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3301      	adds	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b03      	cmp	r3, #3
 8001884:	ddda      	ble.n	800183c <file_close+0x18>
    }
  }

  if (status != LFS_ERR_OK)
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <file_close+0x6c>
  {
	  LOG2("Erro lfs_file_close - ret = %i", status);
    return status;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	e005      	b.n	800189c <file_close+0x78>
  }

  openFilesCount--;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <file_close+0x88>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <file_close+0x88>)
 8001898:	6013      	str	r3, [r2, #0]
  LOG2("lfs_file_close - ret = %i",
            status);
  return status;
 800189a:	68bb      	ldr	r3, [r7, #8]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20011ee0 	.word	0x20011ee0
 80018a8:	20000350 	.word	0x20000350
 80018ac:	200004b0 	.word	0x200004b0

080018b0 <file_read>:
 * @param  size Quantidade de bytes solicitados para leitura
 * @param  count Quantidade de leituras
 * @retval int  Quantidade de bytes lidos
 */
size_t file_read(void *ptr, size_t size, size_t count, FILE_POINTER file)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = lfs_file_read(&lfs, file, ptr, size * count);
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	fb02 f303 	mul.w	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6839      	ldr	r1, [r7, #0]
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <file_read+0x38>)
 80018cc:	f011 fc46 	bl	801315c <lfs_file_read>
 80018d0:	6178      	str	r0, [r7, #20]
  if (qtdBytes < 0)
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	da01      	bge.n	80018dc <file_read+0x2c>
  {
	  LOG2("Erro lfs_file_read - ret = %li", qtdBytes);
    return 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <file_read+0x2e>
  }
  if (qtdBytes != (size * count))
  {
	  LOG2("Erro lfs_file_read - Quantidade de bytes lidos (%li) diferente do solicitado (%li)", qtdBytes, size);
  }
  return qtdBytes;
 80018dc:	697b      	ldr	r3, [r7, #20]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20011ee0 	.word	0x20011ee0

080018ec <file_write>:
 * @param  path Ponteiro para o buffer que receberá os dados escritos
 * @param  size Quantidade de bytes solicitados para escrita
 * @retval int  Quantidade de bytes escritos
 */
size_t file_write(const void *ptr, lfs_size_t size, size_t count, FILE_POINTER file)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
  if (file->flags & (LFS_O_RDWR | LFS_O_APPEND | LFS_O_WRONLY))     // Verifica o status da flag do arquivo aberto
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	f640 0303 	movw	r3, #2051	; 0x803
 8001906:	4013      	ands	r3, r2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <file_write+0x3e>
  {
    qtdBytes = lfs_file_write(&lfs, file, ptr, size * count);
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	fb02 f303 	mul.w	r3, r2, r3
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	4808      	ldr	r0, [pc, #32]	; (800193c <file_write+0x50>)
 800191a:	f011 fc4f 	bl	80131bc <lfs_file_write>
 800191e:	6178      	str	r0, [r7, #20]
    if (qtdBytes < 0)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b00      	cmp	r3, #0
 8001924:	da01      	bge.n	800192a <file_write+0x3e>
    {
    	LOG2("Erro lfs_file_write - ret = %li", qtdBytes);
      return 0;
 8001926:	2300      	movs	r3, #0
 8001928:	e003      	b.n	8001932 <file_write+0x46>
  else
  {
    // Caso o arquivo não seja compativel com a operação requerida, apenas informa que não foi executado
	  LOG2("Arquivo não alterado, flag do file [ 0x%lx ]", file->flags);
  }
  return (size_t)(qtdBytes / size);
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20011ee0 	.word	0x20011ee0

08001940 <file_exists>:
 * @brief verifica a existencia do path de arquivo ou diretório
 * @param path  Ponteiro para a string contendo o path do arquivo ou diretório
 * @return int  Status da operação
 */
int file_exists(const char *path)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b0c6      	sub	sp, #280	; 0x118
 8001944:	af00      	add	r7, sp, #0
 8001946:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800194a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800194e:	6018      	str	r0, [r3, #0]
  struct lfs_info info;

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 8001950:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001954:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 800195e:	e012      	b.n	8001986 <file_exists+0x46>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8001960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b0d      	cmp	r3, #13
 8001968:	d004      	beq.n	8001974 <file_exists+0x34>
 800196a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b0a      	cmp	r3, #10
 8001972:	d103      	bne.n	800197c <file_exists+0x3c>
      *pchar = 0;
 8001974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
    pchar++;
 800197c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001980:	3301      	adds	r3, #1
 8001982:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 8001986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1e7      	bne.n	8001960 <file_exists+0x20>
  }

  int status = lfs_stat(&lfs, path, &info);
 8001990:	f107 0208 	add.w	r2, r7, #8
 8001994:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001998:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800199c:	6819      	ldr	r1, [r3, #0]
 800199e:	4806      	ldr	r0, [pc, #24]	; (80019b8 <file_exists+0x78>)
 80019a0:	f011 fb64 	bl	801306c <lfs_stat>
 80019a4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  return status;
 80019a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20011ee0 	.word	0x20011ee0

080019bc <list_dir>:



int list_dir()

{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b0d2      	sub	sp, #328	; 0x148
 80019c0:	af00      	add	r7, sp, #0
	lfs_dir_t dir;
	struct lfs_info info;
	const char *path = "/"; // O caminho do diretório raiz ou outro caminho que deseja listar
 80019c2:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <list_dir+0x58>)
 80019c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	// Abra o diretório
	int err = lfs_dir_open(&lfs, &dir, path);
 80019c8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019cc:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80019d0:	4619      	mov	r1, r3
 80019d2:	4811      	ldr	r0, [pc, #68]	; (8001a18 <list_dir+0x5c>)
 80019d4:	f011 fc68 	bl	80132a8 <lfs_dir_open>
 80019d8:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	if (err)
 80019dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d110      	bne.n	8001a06 <list_dir+0x4a>
	else
	{
		LOG("Listando diretórios em: %s \r\n", path);

		// Leia as entradas no diretório
		while (lfs_dir_read(&lfs, &dir, &info) > 0)
 80019e4:	bf00      	nop
 80019e6:	1d3a      	adds	r2, r7, #4
 80019e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019ec:	4619      	mov	r1, r3
 80019ee:	480a      	ldr	r0, [pc, #40]	; (8001a18 <list_dir+0x5c>)
 80019f0:	f011 fca2 	bl	8013338 <lfs_dir_read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	dcf5      	bgt.n	80019e6 <list_dir+0x2a>
			}
		}

		// Feche o diretório
		// Feche o diretório
		lfs_dir_close(&lfs, &dir);
 80019fa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <list_dir+0x5c>)
 8001a02:	f011 fc83 	bl	801330c <lfs_dir_close>
	}

}
 8001a06:	bf00      	nop
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	08027768 	.word	0x08027768
 8001a18:	20011ee0 	.word	0x20011ee0

08001a1c <file_size>:
 * @brief return file size
 * @param file  point to file
 * @return  file size or error (negative value)
 */
int file_size(FILE_POINTER file)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  int status;
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_CUR)) < 0)
 8001a24:	2301      	movs	r3, #1
 8001a26:	2200      	movs	r2, #0
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4811      	ldr	r0, [pc, #68]	; (8001a70 <file_size+0x54>)
 8001a2c:	f011 fbf6 	bl	801321c <lfs_file_seek>
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da01      	bge.n	8001a3c <file_size+0x20>
    return status;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	e014      	b.n	8001a66 <file_size+0x4a>
  int currentPosition = status;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	60bb      	str	r3, [r7, #8]
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_END)) < 0)
 8001a40:	2302      	movs	r3, #2
 8001a42:	2200      	movs	r2, #0
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <file_size+0x54>)
 8001a48:	f011 fbe8 	bl	801321c <lfs_file_seek>
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da01      	bge.n	8001a58 <file_size+0x3c>
    return status;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	e006      	b.n	8001a66 <file_size+0x4a>
  lfs_file_seek(&lfs, file, currentPosition, LFS_SEEK_SET);
 8001a58:	2300      	movs	r3, #0
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4804      	ldr	r0, [pc, #16]	; (8001a70 <file_size+0x54>)
 8001a60:	f011 fbdc 	bl	801321c <lfs_file_seek>
  return status;
 8001a64:	68fb      	ldr	r3, [r7, #12]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20011ee0 	.word	0x20011ee0

08001a74 <CfgFiles_getBuffer>:
 * @fn uint8_t *CfgFiles_getBuffer()
 * @brief function to get a buffer address to be used
 * @return return the buffer pointer to be used
 */
uint8_t *CfgFiles_getBuffer()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	e02b      	b.n	8001ad8 <CfgFiles_getBuffer+0x64>
  {
    if (!Cfg_buffers[count].busy)
 8001a80:	4919      	ldr	r1, [pc, #100]	; (8001ae8 <CfgFiles_getBuffer+0x74>)
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	02db      	lsls	r3, r3, #11
 8001a88:	4413      	add	r3, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	f083 0301 	eor.w	r3, r3, #1
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d01c      	beq.n	8001ad2 <CfgFiles_getBuffer+0x5e>
    {
      Cfg_buffers[count].busy = true;
 8001a98:	4913      	ldr	r1, [pc, #76]	; (8001ae8 <CfgFiles_getBuffer+0x74>)
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	02db      	lsls	r3, r3, #11
 8001aa0:	4413      	add	r3, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	701a      	strb	r2, [r3, #0]
      memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	02db      	lsls	r3, r3, #11
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <CfgFiles_getBuffer+0x74>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f022 f897 	bl	8023bf0 <memset>
      return Cfg_buffers[count].buffer;
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	02db      	lsls	r3, r3, #11
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <CfgFiles_getBuffer+0x74>)
 8001acc:	4413      	add	r3, r2
 8001ace:	3301      	adds	r3, #1
 8001ad0:	e006      	b.n	8001ae0 <CfgFiles_getBuffer+0x6c>
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0d0      	beq.n	8001a80 <CfgFiles_getBuffer+0xc>
    }
  }
  return NULL;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000de4 	.word	0x20000de4

08001aec <CfgFiles_freeBuffer>:
 * @fn void CfgFiles_freeBuffer(uint8_t *)
 * @brief free a specific buffer to be used latter
 * @param buf buffer pointer to be freed
 */
void CfgFiles_freeBuffer(uint8_t *buf)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	e015      	b.n	8001b26 <CfgFiles_freeBuffer+0x3a>
  {
    if (buf == &(Cfg_buffers[count].buffer[0]))
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4613      	mov	r3, r2
 8001afe:	02db      	lsls	r3, r3, #11
 8001b00:	4413      	add	r3, r2
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <CfgFiles_freeBuffer+0x50>)
 8001b04:	4413      	add	r3, r2
 8001b06:	3301      	adds	r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d108      	bne.n	8001b20 <CfgFiles_freeBuffer+0x34>
    {
      Cfg_buffers[count].busy = false;
 8001b0e:	490b      	ldr	r1, [pc, #44]	; (8001b3c <CfgFiles_freeBuffer+0x50>)
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4613      	mov	r3, r2
 8001b14:	02db      	lsls	r3, r3, #11
 8001b16:	4413      	add	r3, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e006      	b.n	8001b2e <CfgFiles_freeBuffer+0x42>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0e6      	beq.n	8001afa <CfgFiles_freeBuffer+0xe>
    }
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000de4 	.word	0x20000de4

08001b40 <CfgFiles_cleanBuffers>:
/**
 * @fn void CfgFiles_cleanBuffers()
 * @brief clean all buffers that are used for read/write on file
 */
void CfgFiles_cleanBuffers()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	e017      	b.n	8001b7c <CfgFiles_cleanBuffers+0x3c>
  {
    Cfg_buffers[count].busy = false;
 8001b4c:	490f      	ldr	r1, [pc, #60]	; (8001b8c <CfgFiles_cleanBuffers+0x4c>)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	02db      	lsls	r3, r3, #11
 8001b54:	4413      	add	r3, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
    memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	02db      	lsls	r3, r3, #11
 8001b62:	4413      	add	r3, r2
 8001b64:	4a09      	ldr	r2, [pc, #36]	; (8001b8c <CfgFiles_cleanBuffers+0x4c>)
 8001b66:	4413      	add	r3, r2
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f022 f83d 	bl	8023bf0 <memset>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0e4      	beq.n	8001b4c <CfgFiles_cleanBuffers+0xc>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000de4 	.word	0x20000de4

08001b90 <CfgFilesGeFilePathByIndex>:
 * @param  fileName Pointer to file name output
 * @retval  True: Success
 * @retval  False: Fail
 */
bool CfgFilesGeFilePathByIndex(uint16_t fileIndex, char *fileName)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	80fb      	strh	r3, [r7, #6]
  if ((fileIndex < TOTAL_CFG_FILES) && (fileName))
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d81c      	bhi.n	8001bdc <CfgFilesGeFilePathByIndex+0x4c>
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d019      	beq.n	8001bdc <CfgFilesGeFilePathByIndex+0x4c>
  {
    strcat (fileName,(char*) &listCfgFiles[fileIndex].dirPath);
 8001ba8:	88fa      	ldrh	r2, [r7, #6]
 8001baa:	4613      	mov	r3, r2
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3328      	adds	r3, #40	; 0x28
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	; (8001be8 <CfgFilesGeFilePathByIndex+0x58>)
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3305      	adds	r3, #5
 8001bba:	4619      	mov	r1, r3
 8001bbc:	6838      	ldr	r0, [r7, #0]
 8001bbe:	f022 f81f 	bl	8023c00 <strcat>
    strcat(fileName, (char*) &listCfgFiles [fileIndex].name);
 8001bc2:	88fa      	ldrh	r2, [r7, #6]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <CfgFilesGeFilePathByIndex+0x58>)
 8001bce:	4413      	add	r3, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6838      	ldr	r0, [r7, #0]
 8001bd4:	f022 f814 	bl	8023c00 <strcat>
    return (true);
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <CfgFilesGeFilePathByIndex+0x4e>
  }
  return (false);
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	200015e8 	.word	0x200015e8

08001bec <SetListCfgFile>:


static void SetListCfgFile(int fileIndex, const char *fileName, const char *dirName, void *fileMessage)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	603b      	str	r3, [r7, #0]
  strcpy(listCfgFiles [fileIndex].name, fileName);
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <SetListCfgFile+0x60>)
 8001c06:	4413      	add	r3, r2
 8001c08:	68b9      	ldr	r1, [r7, #8]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f023 f945 	bl	8024e9a <strcpy>
  strcpy(listCfgFiles [fileIndex].dirPath, dirName);
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	4613      	mov	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3328      	adds	r3, #40	; 0x28
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <SetListCfgFile+0x60>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	3305      	adds	r3, #5
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f023 f938 	bl	8024e9a <strcpy>

  if (fileMessage)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <SetListCfgFile+0x58>
  {
    listCfgFiles [fileIndex].fileContent = fileMessage;
 8001c30:	4906      	ldr	r1, [pc, #24]	; (8001c4c <SetListCfgFile+0x60>)
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3338      	adds	r3, #56	; 0x38
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	601a      	str	r2, [r3, #0]

  }
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	200015e8 	.word	0x200015e8

08001c50 <CfgFilesDecodeFiles>:




static void CfgFilesDecodeFiles(uint16_t fileIndex, void *fileDataBuffer, size_t fileSize, bool isInitialDecode)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	81fb      	strh	r3, [r7, #14]
 8001c60:	4613      	mov	r3, r2
 8001c62:	737b      	strb	r3, [r7, #13]
  void *file = NULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  size_t size = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]

  switch (fileIndex)
 8001c6c:	89fb      	ldrh	r3, [r7, #14]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d824      	bhi.n	8001cbc <CfgFilesDecodeFiles+0x6c>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <CfgFilesDecodeFiles+0x28>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001c89 	.word	0x08001c89
 8001c7c:	08001cbd 	.word	0x08001cbd
 8001c80:	08001cbd 	.word	0x08001cbd
 8001c84:	08001ca3 	.word	0x08001ca3
  {
  case MAP_FILE_IDX:
  {
	size = sizeof(TModbusMap);
 8001c88:	f240 437a 	movw	r3, #1146	; 0x47a
 8001c8c:	613b      	str	r3, [r7, #16]
	file = pvPortMalloc(size);
 8001c8e:	6938      	ldr	r0, [r7, #16]
 8001c90:	f00a ff3a 	bl	800cb08 <pvPortMalloc>
 8001c94:	6178      	str	r0, [r7, #20]
	memcpy(file, fileDataBuffer, size);
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f023 f905 	bl	8024eaa <memcpy>

	break;
 8001ca0:	e00d      	b.n	8001cbe <CfgFilesDecodeFiles+0x6e>
	// Implementação para BOOT_FILE_IDX
	break;

  case LOG_FILE_IDX:

	size = sizeof(Log_config);
 8001ca2:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8001ca6:	613b      	str	r3, [r7, #16]
	file = pvPortMalloc(size);
 8001ca8:	6938      	ldr	r0, [r7, #16]
 8001caa:	f00a ff2d 	bl	800cb08 <pvPortMalloc>
 8001cae:	6178      	str	r0, [r7, #20]
	memcpy(file, fileDataBuffer, size);
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	6978      	ldr	r0, [r7, #20]
 8001cb6:	f023 f8f8 	bl	8024eaa <memcpy>

	break;
 8001cba:	e000      	b.n	8001cbe <CfgFilesDecodeFiles+0x6e>

  default:
	break;
 8001cbc:	bf00      	nop
  }

  if (file)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d042      	beq.n	8001d4a <CfgFilesDecodeFiles+0xfa>
  {
	if (size > 0)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03a      	beq.n	8001d40 <CfgFilesDecodeFiles+0xf0>
	{
	  if (isInitialDecode)
 8001cca:	7b7b      	ldrb	r3, [r7, #13]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <CfgFilesDecodeFiles+0x9e>
	  {
		// Fill file message with decoded data
		memcpy(listCfgFiles[fileIndex].fileContent, file, size);
 8001cd0:	89fa      	ldrh	r2, [r7, #14]
 8001cd2:	4920      	ldr	r1, [pc, #128]	; (8001d54 <CfgFilesDecodeFiles+0x104>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	6979      	ldr	r1, [r7, #20]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f023 f8df 	bl	8024eaa <memcpy>
 8001cec:	e028      	b.n	8001d40 <CfgFilesDecodeFiles+0xf0>
	  }
	  else
	  {
		// Compares current message to the new decoded message
		if (memcmp(listCfgFiles[fileIndex].fileContent, file, size) != 0)
 8001cee:	89fa      	ldrh	r2, [r7, #14]
 8001cf0:	4918      	ldr	r1, [pc, #96]	; (8001d54 <CfgFilesDecodeFiles+0x104>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3338      	adds	r3, #56	; 0x38
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	6979      	ldr	r1, [r7, #20]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f021 ff49 	bl	8023b9c <memcmp>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d017      	beq.n	8001d40 <CfgFilesDecodeFiles+0xf0>
		{
		  // Cfg File has changed; update file message
		  memcpy(listCfgFiles[fileIndex].fileContent, file, size);
 8001d10:	89fa      	ldrh	r2, [r7, #14]
 8001d12:	4910      	ldr	r1, [pc, #64]	; (8001d54 <CfgFilesDecodeFiles+0x104>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	6979      	ldr	r1, [r7, #20]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f023 f8bf 	bl	8024eaa <memcpy>
		  listCfgFiles[fileIndex].changed = true;
 8001d2c:	89fa      	ldrh	r2, [r7, #14]
 8001d2e:	4909      	ldr	r1, [pc, #36]	; (8001d54 <CfgFilesDecodeFiles+0x104>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	1a9b      	subs	r3, r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	3324      	adds	r3, #36	; 0x24
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
		}
	  }
	}

	vPortFree(file);
 8001d40:	6978      	ldr	r0, [r7, #20]
 8001d42:	f00a ffad 	bl	800cca0 <vPortFree>
	file = NULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200015e8 	.word	0x200015e8

08001d58 <CfgFilesEncode>:


static bool CfgFilesEncode(uint16_t fileIndex, void *fileDataBuffer,
	size_t *fileSize, bool setDefaultValues)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	737b      	strb	r3, [r7, #13]

  switch (fileIndex)
 8001d6c:	89fb      	ldrh	r3, [r7, #14]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d84d      	bhi.n	8001e0e <CfgFilesEncode+0xb6>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <CfgFilesEncode+0x20>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d89 	.word	0x08001d89
 8001d7c:	08001e0f 	.word	0x08001e0f
 8001d80:	08001e0f 	.word	0x08001e0f
 8001d84:	08001dc5 	.word	0x08001dc5
  {
  case MAP_FILE_IDX:

	TModbusMap *modbusFile = (TModbusMap*) listCfgFiles[fileIndex].fileContent;
 8001d88:	89fa      	ldrh	r2, [r7, #14]
 8001d8a:	4923      	ldr	r1, [pc, #140]	; (8001e18 <CfgFilesEncode+0xc0>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3338      	adds	r3, #56	; 0x38
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	613b      	str	r3, [r7, #16]

	if (setDefaultValues)
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d004      	beq.n	8001dac <CfgFilesEncode+0x54>
	{
	  CreateDefaultModbusMap(fileDataBuffer, modbusFile);
 8001da2:	6939      	ldr	r1, [r7, #16]
 8001da4:	68b8      	ldr	r0, [r7, #8]
 8001da6:	f01f ffeb 	bl	8021d80 <CreateDefaultModbusMap>
 8001daa:	e005      	b.n	8001db8 <CfgFilesEncode+0x60>

	}
	else
	{

	  memcpy(fileDataBuffer, modbusFile, sizeof(TModbusMap));
 8001dac:	f240 427a 	movw	r2, #1146	; 0x47a
 8001db0:	6939      	ldr	r1, [r7, #16]
 8001db2:	68b8      	ldr	r0, [r7, #8]
 8001db4:	f023 f879 	bl	8024eaa <memcpy>
	}

	*fileSize = sizeof(TModbusMap);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f240 427a 	movw	r2, #1146	; 0x47a
 8001dbe:	601a      	str	r2, [r3, #0]

	return true;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e025      	b.n	8001e10 <CfgFilesEncode+0xb8>

	break;

  case LOG_FILE_IDX:

	Log_config *logConfig = (Log_config*) listCfgFiles[fileIndex].fileContent;
 8001dc4:	89fa      	ldrh	r2, [r7, #14]
 8001dc6:	4914      	ldr	r1, [pc, #80]	; (8001e18 <CfgFilesEncode+0xc0>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	1a9b      	subs	r3, r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3338      	adds	r3, #56	; 0x38
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	617b      	str	r3, [r7, #20]

	if (setDefaultValues)
 8001dd8:	7b7b      	ldrb	r3, [r7, #13]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <CfgFilesEncode+0xa0>
	{
	  memset(logConfig, 0, sizeof(Log_config));
 8001dde:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001de2:	2100      	movs	r1, #0
 8001de4:	6978      	ldr	r0, [r7, #20]
 8001de6:	f021 ff03 	bl	8023bf0 <memset>

	 logConfig->enable = true;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
	 logConfig->logList_count = 0;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2200      	movs	r2, #0
 8001df4:	805a      	strh	r2, [r3, #2]
 8001df6:	e005      	b.n	8001e04 <CfgFilesEncode+0xac>

	}
	else
	{

	  memcpy(fileDataBuffer, logConfig, sizeof(Log_config));
 8001df8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001dfc:	6979      	ldr	r1, [r7, #20]
 8001dfe:	68b8      	ldr	r0, [r7, #8]
 8001e00:	f023 f853 	bl	8024eaa <memcpy>
	}

	*fileSize = sizeof(Log_config);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001e0a:	601a      	str	r2, [r3, #0]
	break;
 8001e0c:	bf00      	nop

  default:

  }

  return false;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200015e8 	.word	0x200015e8

08001e1c <CfgFilesInit>:
 * @fn void CfgFilesInit()
 * @brief  Initializes control struct list for Configuration Files Management
 * @retval None
 */
void CfgFilesInit()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8001e22:	af00      	add	r7, sp, #0

  /*Initialize all buffer to read/write on files*/
  CfgFiles_cleanBuffers();
 8001e24:	f7ff fe8c 	bl	8001b40 <CfgFiles_cleanBuffers>

  //------------------------------------------------------------------------------------
  //                    Fill List of Configuration Files
  //------------------------------------------------------------------------------------
  //             FILE_INDEX     FILE_NAME              DIR_NAME        TYPE_TIPE
  SetListCfgFile(MAP_FILE_IDX,  MODBUS_MAP_FILE_PATH,  MAP_DIR_PATH,   &modbusMapFile);
 8001e28:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <CfgFilesInit+0x1d4>)
 8001e2a:	4a72      	ldr	r2, [pc, #456]	; (8001ff4 <CfgFilesInit+0x1d8>)
 8001e2c:	4972      	ldr	r1, [pc, #456]	; (8001ff8 <CfgFilesInit+0x1dc>)
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fedc 	bl	8001bec <SetListCfgFile>
  SetListCfgFile(COMM_FILE_IDX, COMM_FILE,             CFG_DIR_PATH,   NULL);
 8001e34:	2300      	movs	r3, #0
 8001e36:	4a71      	ldr	r2, [pc, #452]	; (8001ffc <CfgFilesInit+0x1e0>)
 8001e38:	4971      	ldr	r1, [pc, #452]	; (8002000 <CfgFilesInit+0x1e4>)
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fed6 	bl	8001bec <SetListCfgFile>
  SetListCfgFile(BOOT_FILE_IDX, BOOT_FILE,             BOOT_DIR_PATH,  NULL);
 8001e40:	2300      	movs	r3, #0
 8001e42:	4a70      	ldr	r2, [pc, #448]	; (8002004 <CfgFilesInit+0x1e8>)
 8001e44:	4970      	ldr	r1, [pc, #448]	; (8002008 <CfgFilesInit+0x1ec>)
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7ff fed0 	bl	8001bec <SetListCfgFile>
  SetListCfgFile(LOG_FILE_IDX,  LOG_FILE_CONFIG,       MAP_DIR_PATH,   &logConfigFile);
 8001e4c:	4b6f      	ldr	r3, [pc, #444]	; (800200c <CfgFilesInit+0x1f0>)
 8001e4e:	4a69      	ldr	r2, [pc, #420]	; (8001ff4 <CfgFilesInit+0x1d8>)
 8001e50:	496f      	ldr	r1, [pc, #444]	; (8002010 <CfgFilesInit+0x1f4>)
 8001e52:	2003      	movs	r0, #3
 8001e54:	f7ff feca 	bl	8001bec <SetListCfgFile>


  //------------------------------------------------------------------------------------

  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001e5e:	e0bb      	b.n	8001fd8 <CfgFilesInit+0x1bc>
  {
    // Print Remote File Paths
    char fileName[32] = { 0 };
 8001e60:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001e64:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	3304      	adds	r3, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	615a      	str	r2, [r3, #20]
 8001e7c:	619a      	str	r2, [r3, #24]

    if (CfgFilesGeFilePathByIndex(i, fileName))
 8001e7e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	1d3a      	adds	r2, r7, #4
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fe81 	bl	8001b90 <CfgFilesGeFilePathByIndex>
    {
      LOG("index = %d erro to get file path: %s", i, fileName);

    }
    // Open/Create file
    uint8_t fileDataBuffer [1024 * 2 /*LPBDRIVER_OUT_BUFFER_SIZE*/] = { 0 };
 8001e8e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001e92:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f021 fea4 	bl	8023bf0 <memset>
    size_t fileSize = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    FILE_POINTER file = NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828

    /*verify if file exists in file system*/
    if (file_exists((char*)fileName) == LFS_ERR_OK)
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd42 	bl	8001940 <file_exists>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d106      	bne.n	8001ed0 <CfgFilesInit+0xb4>
    {
      file = file_open((char*) fileName, "r"); //read-only
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4953      	ldr	r1, [pc, #332]	; (8002014 <CfgFilesInit+0x1f8>)
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fc32 	bl	8001730 <file_open>
 8001ecc:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828
    }

    /*if have a file*/
    if (file)
 8001ed0:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <CfgFilesInit+0xca>
    {
      fileSize = file_size(file);
 8001ed8:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001edc:	f7ff fd9e 	bl	8001a1c <file_size>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    }

    if (fileSize == 0) // File is empty or is a new file
 8001ee6:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d14b      	bne.n	8001f86 <CfgFilesInit+0x16a>
    {
      //------------------------------------
      if (file != NULL)
 8001eee:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <CfgFilesInit+0xe2>
      {
        file_close(file);
 8001ef6:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001efa:	f7ff fc93 	bl	8001824 <file_close>
      }

      file = file_open((char*) fileName, "w");  // Open file as "write-only"
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	4945      	ldr	r1, [pc, #276]	; (8002018 <CfgFilesInit+0x1fc>)
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fc14 	bl	8001730 <file_open>
 8001f08:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828

      if (!file)
 8001f0c:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05b      	beq.n	8001fcc <CfgFilesInit+0x1b0>
      {
        LOG("New File - Error: file not opened for writing; File Index = %03d; File Name: %s", i, listCfgFiles [i].name);
        continue;
      }

      if (!CfgFilesEncode(i, fileDataBuffer, &fileSize, true))
 8001f14:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	f607 0224 	addw	r2, r7, #2084	; 0x824
 8001f1e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001f22:	2301      	movs	r3, #1
 8001f24:	f7ff ff18 	bl	8001d58 <CfgFilesEncode>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d004      	beq.n	8001f3e <CfgFilesInit+0x122>
      {
        file_close(file); // error to encode data; close file and continue
 8001f34:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001f38:	f7ff fc74 	bl	8001824 <file_close>
        continue;
 8001f3c:	e047      	b.n	8001fce <CfgFilesInit+0x1b2>
      }

      // Write file content
       listCfgFiles[i].size = file_write(fileDataBuffer, 1, fileSize, file);
 8001f3e:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8001f42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f46:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	f7ff fcce 	bl	80018ec <file_write>
 8001f50:	4601      	mov	r1, r0
 8001f52:	4832      	ldr	r0, [pc, #200]	; (800201c <CfgFilesInit+0x200>)
 8001f54:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001f58:	4613      	mov	r3, r2
 8001f5a:	011b      	lsls	r3, r3, #4
 8001f5c:	1a9b      	subs	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4403      	add	r3, r0
 8001f62:	3320      	adds	r3, #32
 8001f64:	6019      	str	r1, [r3, #0]
       {
         LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles[i].size, fileSize);

       }
       // New file, set as "changed"
      listCfgFiles[i].changed = true;
 8001f66:	492d      	ldr	r1, [pc, #180]	; (800201c <CfgFilesInit+0x200>)
 8001f68:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	3324      	adds	r3, #36	; 0x24
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]

      file_close(file);
 8001f7c:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001f80:	f7ff fc50 	bl	8001824 <file_close>
 8001f84:	e023      	b.n	8001fce <CfgFilesInit+0x1b2>
    }
    else
    {
      // Read file content
      listCfgFiles [i].size = file_read(fileDataBuffer, 1, fileSize, file);
 8001f86:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8001f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001f8e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f92:	2101      	movs	r1, #1
 8001f94:	f7ff fc8c 	bl	80018b0 <file_read>
 8001f98:	4601      	mov	r1, r0
 8001f9a:	4820      	ldr	r0, [pc, #128]	; (800201c <CfgFilesInit+0x200>)
 8001f9c:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4403      	add	r3, r0
 8001faa:	3320      	adds	r3, #32
 8001fac:	6019      	str	r1, [r3, #0]
      if (listCfgFiles [i].size != fileSize)
      {
        LOG("Data size read from file differs from the size requested; read = %lu bytes | requested = %d bytes", listCfgFiles [i].size, fileSize);
      }

      CfgFilesDecodeFiles(i, fileDataBuffer, fileSize, true /* sempre true na inicialização */);
 8001fae:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001fb2:	b298      	uxth	r0, r3
 8001fb4:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8001fb8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f7ff fe47 	bl	8001c50 <CfgFilesDecodeFiles>
      file_close(file);
 8001fc2:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001fc6:	f7ff fc2d 	bl	8001824 <file_close>
 8001fca:	e000      	b.n	8001fce <CfgFilesInit+0x1b2>
        continue;
 8001fcc:	bf00      	nop
  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 8001fce:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001fd8:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	f77f af3f 	ble.w	8001e60 <CfgFilesInit+0x44>
    }

  }

}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	200004b4 	.word	0x200004b4
 8001ff4:	08027818 	.word	0x08027818
 8001ff8:	08027820 	.word	0x08027820
 8001ffc:	0802782c 	.word	0x0802782c
 8002000:	08027834 	.word	0x08027834
 8002004:	08027840 	.word	0x08027840
 8002008:	08027848 	.word	0x08027848
 800200c:	20000930 	.word	0x20000930
 8002010:	08027854 	.word	0x08027854
 8002014:	08027864 	.word	0x08027864
 8002018:	08027868 	.word	0x08027868
 800201c:	200015e8 	.word	0x200015e8

08002020 <CfgFiles_UpdateCfgFileByIndex>:

bool CfgFiles_UpdateCfgFileByIndex(uint16_t fileIndex, bool setDefaultValues)

{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b08f      	sub	sp, #60	; 0x3c
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	80fb      	strh	r3, [r7, #6]
 800202c:	4613      	mov	r3, r2
 800202e:	717b      	strb	r3, [r7, #5]
  // Print Remote File Paths
  char fileName [32] = { 0 };
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  if (!CfgFilesGeFilePathByIndex(fileIndex, fileName))
 8002048:	f107 0210 	add.w	r2, r7, #16
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fd9d 	bl	8001b90 <CfgFilesGeFilePathByIndex>
 8002056:	4603      	mov	r3, r0
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <CfgFiles_UpdateCfgFileByIndex+0x46>
  {
    return false;
 8002062:	2300      	movs	r3, #0
 8002064:	e040      	b.n	80020e8 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  LOG("Updating config file; File Index = %d; File Name: %s", fileIndex, fileName);

  // Open/Create file
  uint8_t *fileDataBuffer = CfgFiles_getBuffer();
 8002066:	f7ff fd05 	bl	8001a74 <CfgFiles_getBuffer>
 800206a:	6378      	str	r0, [r7, #52]	; 0x34
  if (!fileDataBuffer)
 800206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <CfgFiles_UpdateCfgFileByIndex+0x56>
  {
    return false;
 8002072:	2300      	movs	r3, #0
 8002074:	e038      	b.n	80020e8 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  size_t fileSize = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  FILE_POINTER file = NULL;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
  file = file_open((char*) fileName, "w"); //write-only
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	491b      	ldr	r1, [pc, #108]	; (80020f0 <CfgFiles_UpdateCfgFileByIndex+0xd0>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fb53 	bl	8001730 <file_open>
 800208a:	6338      	str	r0, [r7, #48]	; 0x30
  fileSize = file_size(file);
 800208c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800208e:	f7ff fcc5 	bl	8001a1c <file_size>
 8002092:	4603      	mov	r3, r0
 8002094:	60fb      	str	r3, [r7, #12]

  if (!CfgFilesEncode(fileIndex, fileDataBuffer, &fileSize, setDefaultValues))
 8002096:	797b      	ldrb	r3, [r7, #5]
 8002098:	f107 020c 	add.w	r2, r7, #12
 800209c:	88f8      	ldrh	r0, [r7, #6]
 800209e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80020a0:	f7ff fe5a 	bl	8001d58 <CfgFilesEncode>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d004      	beq.n	80020ba <CfgFiles_UpdateCfgFileByIndex+0x9a>
  {
    file_close(file); // error to encode data; close file and continue
 80020b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b2:	f7ff fbb7 	bl	8001824 <file_close>
    return false;
 80020b6:	2300      	movs	r3, #0
 80020b8:	e016      	b.n	80020e8 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  // Write file content
  listCfgFiles [fileIndex].size = file_write(fileDataBuffer, 1, fileSize, file);
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	88fc      	ldrh	r4, [r7, #6]
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	2101      	movs	r1, #1
 80020c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020c4:	f7ff fc12 	bl	80018ec <file_write>
 80020c8:	4602      	mov	r2, r0
 80020ca:	490a      	ldr	r1, [pc, #40]	; (80020f4 <CfgFiles_UpdateCfgFileByIndex+0xd4>)
 80020cc:	4623      	mov	r3, r4
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	1b1b      	subs	r3, r3, r4
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	3320      	adds	r3, #32
 80020d8:	601a      	str	r2, [r3, #0]
  {

    LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles [fileIndex].size, fileSize);
  }

  file_close(file);
 80020da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020dc:	f7ff fba2 	bl	8001824 <file_close>
  CfgFiles_freeBuffer(fileDataBuffer);
 80020e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80020e2:	f7ff fd03 	bl	8001aec <CfgFiles_freeBuffer>
  return true;
 80020e6:	2301      	movs	r3, #1

}
 80020e8:	4618      	mov	r0, r3
 80020ea:	373c      	adds	r7, #60	; 0x3c
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd90      	pop	{r4, r7, pc}
 80020f0:	08027868 	.word	0x08027868
 80020f4:	200015e8 	.word	0x200015e8

080020f8 <DateTimeGetString>:




char *DateTimeGetString ()
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b090      	sub	sp, #64	; 0x40
 80020fc:	af00      	add	r7, sp, #0
  struct tm tmTime = {0};
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	2224      	movs	r2, #36	; 0x24
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f021 fd72 	bl	8023bf0 <memset>
  static char array[50];


  /* Get date time from RTC */

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	2200      	movs	r2, #0
 8002112:	4619      	mov	r1, r3
 8002114:	4810      	ldr	r0, [pc, #64]	; (8002158 <DateTimeGetString+0x60>)
 8002116:	f004 ff54 	bl	8006fc2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800211a:	1d3b      	adds	r3, r7, #4
 800211c:	2200      	movs	r2, #0
 800211e:	4619      	mov	r1, r3
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <DateTimeGetString+0x60>)
 8002122:	f004 ffac 	bl	800707e <HAL_RTC_GetDate>

  tmTime.tm_hour = sTime.Hours;
 8002126:	7a3b      	ldrb	r3, [r7, #8]
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
  tmTime.tm_min = sTime.Minutes;
 800212a:	7a7b      	ldrb	r3, [r7, #9]
 800212c:	623b      	str	r3, [r7, #32]
  tmTime.tm_sec = sTime.Seconds;
 800212e:	7abb      	ldrb	r3, [r7, #10]
 8002130:	61fb      	str	r3, [r7, #28]
  tmTime.tm_mday = sDate.Date;
 8002132:	79bb      	ldrb	r3, [r7, #6]
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  tmTime.tm_mon = sDate.Month - 1;
 8002136:	797b      	ldrb	r3, [r7, #5]
 8002138:	3b01      	subs	r3, #1
 800213a:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmTime.tm_year = sDate.Year;
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	633b      	str	r3, [r7, #48]	; 0x30

  // Usando strftime para formatar a data e a hora
     strftime(array, sizeof(array), DATETIME_STRINGFORMAT_DEFAULT, &tmTime);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4a05      	ldr	r2, [pc, #20]	; (800215c <DateTimeGetString+0x64>)
 8002146:	2132      	movs	r1, #50	; 0x32
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <DateTimeGetString+0x68>)
 800214a:	f022 faed 	bl	8024728 <strftime>

    return array;
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <DateTimeGetString+0x68>)

}
 8002150:	4618      	mov	r0, r3
 8002152:	3740      	adds	r7, #64	; 0x40
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20001f48 	.word	0x20001f48
 800215c:	0802786c 	.word	0x0802786c
 8002160:	200016d8 	.word	0x200016d8

08002164 <DateTimeGetTm>:



void DateTimeGetTm(struct tm *tmTime)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  /* Get date time from RTC */

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	4812      	ldr	r0, [pc, #72]	; (80021c0 <DateTimeGetTm+0x5c>)
 8002176:	f004 ff24 	bl	8006fc2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2200      	movs	r2, #0
 8002180:	4619      	mov	r1, r3
 8002182:	480f      	ldr	r0, [pc, #60]	; (80021c0 <DateTimeGetTm+0x5c>)
 8002184:	f004 ff7b 	bl	800707e <HAL_RTC_GetDate>

  tmTime->tm_hour = sTime.Hours;
 8002188:	7b3b      	ldrb	r3, [r7, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
  tmTime->tm_min = sTime.Minutes;
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	461a      	mov	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	605a      	str	r2, [r3, #4]
  tmTime->tm_sec = sTime.Seconds;
 8002198:	7bbb      	ldrb	r3, [r7, #14]
 800219a:	461a      	mov	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	601a      	str	r2, [r3, #0]
  tmTime->tm_mday = sDate.Date;
 80021a0:	7abb      	ldrb	r3, [r7, #10]
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
  tmTime->tm_mon = sDate.Month - 1;
 80021a8:	7a7b      	ldrb	r3, [r7, #9]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
  tmTime->tm_year = sDate.Year;
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	461a      	mov	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	615a      	str	r2, [r3, #20]

}
 80021b8:	bf00      	nop
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20001f48 	.word	0x20001f48

080021c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80021d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <vApplicationGetIdleTaskMemory+0x30>)
 80021da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	2000171c 	.word	0x2000171c
 80021f4:	200017bc 	.word	0x200017bc

080021f8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <vApplicationGetTimerTaskMemory+0x2c>)
 8002208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <vApplicationGetTimerTaskMemory+0x30>)
 800220e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	200019bc 	.word	0x200019bc
 8002228:	20001a5c 	.word	0x20001a5c

0800222c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800222c:	b5b0      	push	{r4, r5, r7, lr}
 800222e:	b09a      	sub	sp, #104	; 0x68
 8002230:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of menuQueue */
  osMessageQDef(menuQueue, 6, MenuData_t);
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <MX_FREERTOS_Init+0xac>)
 8002234:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  menuQueueHandle = osMessageCreate(osMessageQ(menuQueue), NULL);
 800223e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f007 fc92 	bl	8009b6e <osMessageCreate>
 800224a:	4603      	mov	r3, r0
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <MX_FREERTOS_Init+0xb0>)
 800224e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetStatusT */
  osThreadDef(ethernetStatusT, EthernetStatusTask, osPriorityNormal, 0, 1024);
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <MX_FREERTOS_Init+0xb4>)
 8002252:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002256:	461d      	mov	r5, r3
 8002258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800225a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800225c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002260:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetStatusTHandle = osThreadCreate(osThread(ethernetStatusT), NULL);
 8002264:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f007 faba 	bl	80097e4 <osThreadCreate>
 8002270:	4603      	mov	r3, r0
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_FREERTOS_Init+0xb8>)
 8002274:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonsTask */
  osThreadDef(buttonsTask, ButtonsTask, osPriorityBelowNormal, 0, 1024);
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <MX_FREERTOS_Init+0xbc>)
 8002278:	f107 0420 	add.w	r4, r7, #32
 800227c:	461d      	mov	r5, r3
 800227e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002282:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002286:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonsTaskHandle = osThreadCreate(osThread(buttonsTask), NULL);
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	2100      	movs	r1, #0
 8002290:	4618      	mov	r0, r3
 8002292:	f007 faa7 	bl	80097e4 <osThreadCreate>
 8002296:	4603      	mov	r3, r0
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <MX_FREERTOS_Init+0xc0>)
 800229a:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledsTask */
  osThreadDef(ledsTask, LedsTask, osPriorityIdle, 0, 512);
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <MX_FREERTOS_Init+0xc4>)
 800229e:	1d3c      	adds	r4, r7, #4
 80022a0:	461d      	mov	r5, r3
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80022aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledsTaskHandle = osThreadCreate(osThread(ledsTask), (void*) operationMode);
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <MX_FREERTOS_Init+0xc8>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	1d3b      	adds	r3, r7, #4
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f007 fa93 	bl	80097e4 <osThreadCreate>
 80022be:	4603      	mov	r3, r0
 80022c0:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <MX_FREERTOS_Init+0xcc>)
 80022c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  HorusOperationMode(operationMode);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <MX_FREERTOS_Init+0xc8>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fe57 	bl	8002f7c <HorusOperationMode>


  /* USER CODE END RTOS_THREADS */

}
 80022ce:	bf00      	nop
 80022d0:	3768      	adds	r7, #104	; 0x68
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bdb0      	pop	{r4, r5, r7, pc}
 80022d6:	bf00      	nop
 80022d8:	08027880 	.word	0x08027880
 80022dc:	20001718 	.word	0x20001718
 80022e0:	080278a0 	.word	0x080278a0
 80022e4:	2000170c 	.word	0x2000170c
 80022e8:	080278c8 	.word	0x080278c8
 80022ec:	20001710 	.word	0x20001710
 80022f0:	080278f0 	.word	0x080278f0
 80022f4:	20001f20 	.word	0x20001f20
 80022f8:	20001714 	.word	0x20001714

080022fc <EthernetStatusTask>:
  * @param  argument: Not used
  * @retval None
 */
/* USER CODE END Header_EthernetStatusTask */
void EthernetStatusTask(void const * argument)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0c4      	sub	sp, #272	; 0x110
 8002300:	af00      	add	r7, sp, #0
 8002302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002306:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800230a:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 800230c:	f006 fc2a 	bl	8008b64 <MX_LWIP_Init>
  /* USER CODE BEGIN EthernetStatusTask */
	MenuData_t menu_data = {0};
 8002310:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002314:	22bd      	movs	r2, #189	; 0xbd
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f021 fc69 	bl	8023bf0 <memset>
	char ipad[21] = {0};
 800231e:	2300      	movs	r3, #0
 8002320:	63bb      	str	r3, [r7, #56]	; 0x38
 8002322:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
 8002330:	741a      	strb	r2, [r3, #16]
	char mask[21] = {0};
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	741a      	strb	r2, [r3, #16]
	char gway[21] = {0};
 8002346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800234a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	3304      	adds	r3, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	741a      	strb	r2, [r3, #16]


	/* Infinite loop */
	for (;;)
	{
		if (netif_is_up(&gnetif))
 8002360:	4b37      	ldr	r3, [pc, #220]	; (8002440 <EthernetStatusTask+0x144>)
 8002362:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d062      	beq.n	8002436 <EthernetStatusTask+0x13a>
		{
			sprintf(ipad, "IPAD:%s", ip4addr_ntoa(netif_ip4_addr(&gnetif)));
 8002370:	4834      	ldr	r0, [pc, #208]	; (8002444 <EthernetStatusTask+0x148>)
 8002372:	f01e f88b 	bl	802048c <ip4addr_ntoa>
 8002376:	4602      	mov	r2, r0
 8002378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800237c:	4932      	ldr	r1, [pc, #200]	; (8002448 <EthernetStatusTask+0x14c>)
 800237e:	4618      	mov	r0, r3
 8002380:	f021 fb12 	bl	80239a8 <siprintf>
			sprintf(mask, "MASK:%s", ip4addr_ntoa(netif_ip4_netmask(&gnetif)));
 8002384:	4831      	ldr	r0, [pc, #196]	; (800244c <EthernetStatusTask+0x150>)
 8002386:	f01e f881 	bl	802048c <ip4addr_ntoa>
 800238a:	4602      	mov	r2, r0
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	492f      	ldr	r1, [pc, #188]	; (8002450 <EthernetStatusTask+0x154>)
 8002392:	4618      	mov	r0, r3
 8002394:	f021 fb08 	bl	80239a8 <siprintf>
			sprintf(gway, "GWAY:%s", ip4addr_ntoa(netif_ip4_gw(&gnetif)));
 8002398:	482e      	ldr	r0, [pc, #184]	; (8002454 <EthernetStatusTask+0x158>)
 800239a:	f01e f877 	bl	802048c <ip4addr_ntoa>
 800239e:	4602      	mov	r2, r0
 80023a0:	f107 0308 	add.w	r3, r7, #8
 80023a4:	492c      	ldr	r1, [pc, #176]	; (8002458 <EthernetStatusTask+0x15c>)
 80023a6:	4618      	mov	r0, r3
 80023a8:	f021 fafe 	bl	80239a8 <siprintf>

			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 80023ac:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ff0a 	bl	80001d0 <strcmp>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d117      	bne.n	80023f2 <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 80023c2:	f107 0220 	add.w	r2, r7, #32
 80023c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023ca:	3315      	adds	r3, #21
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fd fefe 	bl	80001d0 <strcmp>
 80023d4:	4603      	mov	r3, r0
			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10b      	bne.n	80023f2 <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_2], gway) != 0)
 80023da:	f107 0208 	add.w	r2, r7, #8
 80023de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023e2:	332a      	adds	r3, #42	; 0x2a
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd fef2 	bl	80001d0 <strcmp>
 80023ec:	4603      	mov	r3, r0
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d021      	beq.n	8002436 <EthernetStatusTask+0x13a>
			{
				strcpy(menu_data.items[PAGE_0][LINE_0], ipad);
 80023f2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f022 fd4c 	bl	8024e9a <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_1], mask);
 8002402:	f107 0220 	add.w	r2, r7, #32
 8002406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800240a:	3315      	adds	r3, #21
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f022 fd43 	bl	8024e9a <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_2], gway);
 8002414:	f107 0208 	add.w	r2, r7, #8
 8002418:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800241c:	332a      	adds	r3, #42	; 0x2a
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f022 fd3a 	bl	8024e9a <strcpy>
				AdapterSSD1306_SendDataToMenuQueueUpdate(&menu_data);
 8002426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f8a6 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
				osDelay(100);
 8002430:	2064      	movs	r0, #100	; 0x64
 8002432:	f007 fa23 	bl	800987c <osDelay>
			}
		}

		osDelay(100);
 8002436:	2064      	movs	r0, #100	; 0x64
 8002438:	f007 fa20 	bl	800987c <osDelay>
		if (netif_is_up(&gnetif))
 800243c:	e790      	b.n	8002360 <EthernetStatusTask+0x64>
 800243e:	bf00      	nop
 8002440:	2000205c 	.word	0x2000205c
 8002444:	20002060 	.word	0x20002060
 8002448:	0802790c 	.word	0x0802790c
 800244c:	20002064 	.word	0x20002064
 8002450:	08027914 	.word	0x08027914
 8002454:	20002068 	.word	0x20002068
 8002458:	0802791c 	.word	0x0802791c

0800245c <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void const * argument)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonsTask */
	/* Infinite loop */

	bool activeDarkMode = false;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
	for (;;)
	{
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 8002468:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800246c:	4822      	ldr	r0, [pc, #136]	; (80024f8 <ButtonsTask+0x9c>)
 800246e:	f003 fabf 	bl	80059f0 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d109      	bne.n	800248c <ButtonsTask+0x30>
		{

			AdapterSSD1306_NextPage();
 8002478:	f7fe ff76 	bl	8001368 <AdapterSSD1306_NextPage>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800247c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002480:	481d      	ldr	r0, [pc, #116]	; (80024f8 <ButtonsTask+0x9c>)
 8002482:	f003 fae6 	bl	8005a52 <HAL_GPIO_TogglePin>

			osDelay(250);
 8002486:	20fa      	movs	r0, #250	; 0xfa
 8002488:	f007 f9f8 	bl	800987c <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == RESET)
 800248c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002490:	4819      	ldr	r0, [pc, #100]	; (80024f8 <ButtonsTask+0x9c>)
 8002492:	f003 faad 	bl	80059f0 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <ButtonsTask+0x54>
		{

			AdapterSSD1306_PreviousPage();
 800249c:	f7fe ff86 	bl	80013ac <AdapterSSD1306_PreviousPage>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80024a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024a4:	4814      	ldr	r0, [pc, #80]	; (80024f8 <ButtonsTask+0x9c>)
 80024a6:	f003 fad4 	bl	8005a52 <HAL_GPIO_TogglePin>

			osDelay(250);
 80024aa:	20fa      	movs	r0, #250	; 0xfa
 80024ac:	f007 f9e6 	bl	800987c <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == RESET)
 80024b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b4:	4810      	ldr	r0, [pc, #64]	; (80024f8 <ButtonsTask+0x9c>)
 80024b6:	f003 fa9b 	bl	80059f0 <HAL_GPIO_ReadPin>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d117      	bne.n	80024f0 <ButtonsTask+0x94>
		{

			if (activeDarkMode)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <ButtonsTask+0x78>
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe ff91 	bl	80013f0 <AdapterSSD1306_DarkMode>
				activeDarkMode = false;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e005      	b.n	80024e0 <ButtonsTask+0x84>

			}
			else
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe ff8a 	bl	80013f0 <AdapterSSD1306_DarkMode>
				activeDarkMode = true;
 80024dc:	2301      	movs	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]

			}

		    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 80024e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <ButtonsTask+0x9c>)
 80024e6:	f003 fab4 	bl	8005a52 <HAL_GPIO_TogglePin>
			osDelay(250);
 80024ea:	20fa      	movs	r0, #250	; 0xfa
 80024ec:	f007 f9c6 	bl	800987c <osDelay>
		}

		osDelay(10);
 80024f0:	200a      	movs	r0, #10
 80024f2:	f007 f9c3 	bl	800987c <osDelay>
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 80024f6:	e7b7      	b.n	8002468 <ButtonsTask+0xc>
 80024f8:	40021000 	.word	0x40021000

080024fc <LedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedsTask */
void LedsTask(void const * argument)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedsTask */

  /* Infinite loop */

  TOperationMode operationMode = (TOperationMode) argument;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	73fb      	strb	r3, [r7, #15]

  for (;;)
  {

	switch (operationMode)
 8002508:	7bfb      	ldrb	r3, [r7, #15]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d030      	beq.n	8002570 <LedsTask+0x74>
 800250e:	2b02      	cmp	r3, #2
 8002510:	dc4e      	bgt.n	80025b0 <LedsTask+0xb4>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <LedsTask+0x20>
 8002516:	2b01      	cmp	r3, #1
 8002518:	d00a      	beq.n	8002530 <LedsTask+0x34>
	  osDelay(1000);
	  break;

	default:

	  break;
 800251a:	e049      	b.n	80025b0 <LedsTask+0xb4>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800251c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002520:	4824      	ldr	r0, [pc, #144]	; (80025b4 <LedsTask+0xb8>)
 8002522:	f003 fa96 	bl	8005a52 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8002526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800252a:	f007 f9a7 	bl	800987c <osDelay>
	  break;
 800252e:	e040      	b.n	80025b2 <LedsTask+0xb6>
	  for (int i = 0; i < 2; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	e014      	b.n	8002560 <LedsTask+0x64>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800253c:	481d      	ldr	r0, [pc, #116]	; (80025b4 <LedsTask+0xb8>)
 800253e:	f003 fa6f 	bl	8005a20 <HAL_GPIO_WritePin>
		osDelay(250);
 8002542:	20fa      	movs	r0, #250	; 0xfa
 8002544:	f007 f99a 	bl	800987c <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002548:	2201      	movs	r2, #1
 800254a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800254e:	4819      	ldr	r0, [pc, #100]	; (80025b4 <LedsTask+0xb8>)
 8002550:	f003 fa66 	bl	8005a20 <HAL_GPIO_WritePin>
		osDelay(250);
 8002554:	20fa      	movs	r0, #250	; 0xfa
 8002556:	f007 f991 	bl	800987c <osDelay>
	  for (int i = 0; i < 2; i++)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3301      	adds	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b01      	cmp	r3, #1
 8002564:	dde7      	ble.n	8002536 <LedsTask+0x3a>
	  osDelay(1000);
 8002566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800256a:	f007 f987 	bl	800987c <osDelay>
	  break;
 800256e:	e020      	b.n	80025b2 <LedsTask+0xb6>
	  for (int i = 0; i < 3; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e014      	b.n	80025a0 <LedsTask+0xa4>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800257c:	480d      	ldr	r0, [pc, #52]	; (80025b4 <LedsTask+0xb8>)
 800257e:	f003 fa4f 	bl	8005a20 <HAL_GPIO_WritePin>
		osDelay(250);
 8002582:	20fa      	movs	r0, #250	; 0xfa
 8002584:	f007 f97a 	bl	800987c <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002588:	2201      	movs	r2, #1
 800258a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258e:	4809      	ldr	r0, [pc, #36]	; (80025b4 <LedsTask+0xb8>)
 8002590:	f003 fa46 	bl	8005a20 <HAL_GPIO_WritePin>
		osDelay(250);
 8002594:	20fa      	movs	r0, #250	; 0xfa
 8002596:	f007 f971 	bl	800987c <osDelay>
	  for (int i = 0; i < 3; i++)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	3301      	adds	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	dde7      	ble.n	8002576 <LedsTask+0x7a>
	  osDelay(1000);
 80025a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025aa:	f007 f967 	bl	800987c <osDelay>
	  break;
 80025ae:	e000      	b.n	80025b2 <LedsTask+0xb6>
	  break;
 80025b0:	bf00      	nop
	switch (operationMode)
 80025b2:	e7a9      	b.n	8002508 <LedsTask+0xc>
 80025b4:	40021000 	.word	0x40021000

080025b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025be:	f107 0314 	add.w	r3, r7, #20
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	60da      	str	r2, [r3, #12]
 80025cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	4b41      	ldr	r3, [pc, #260]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a40      	ldr	r2, [pc, #256]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b3e      	ldr	r3, [pc, #248]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a39      	ldr	r2, [pc, #228]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <MX_GPIO_Init+0x120>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <MX_GPIO_Init+0x120>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	4a32      	ldr	r2, [pc, #200]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002614:	6313      	str	r3, [r2, #48]	; 0x30
 8002616:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b2c      	ldr	r3, [pc, #176]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a2b      	ldr	r2, [pc, #172]	; (80026d8 <MX_GPIO_Init+0x120>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b22      	ldr	r3, [pc, #136]	; (80026d8 <MX_GPIO_Init+0x120>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002660:	481e      	ldr	r0, [pc, #120]	; (80026dc <MX_GPIO_Init+0x124>)
 8002662:	f003 f9dd 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	2119      	movs	r1, #25
 800266a:	481d      	ldr	r0, [pc, #116]	; (80026e0 <MX_GPIO_Init+0x128>)
 800266c:	f003 f9d8 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002676:	4819      	ldr	r0, [pc, #100]	; (80026dc <MX_GPIO_Init+0x124>)
 8002678:	f003 f9d2 	bl	8005a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 800267c:	f24e 1308 	movw	r3, #57608	; 0xe108
 8002680:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800268e:	f107 0314 	add.w	r3, r7, #20
 8002692:	4619      	mov	r1, r3
 8002694:	4811      	ldr	r0, [pc, #68]	; (80026dc <MX_GPIO_Init+0x124>)
 8002696:	f003 f80f 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin;
 800269a:	2319      	movs	r3, #25
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026aa:	f107 0314 	add.w	r3, r7, #20
 80026ae:	4619      	mov	r1, r3
 80026b0:	480b      	ldr	r0, [pc, #44]	; (80026e0 <MX_GPIO_Init+0x128>)
 80026b2:	f003 f801 	bl	80056b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BT_SW1_Pin|BT_SW2_Pin|BT_SW3_Pin;
 80026b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4619      	mov	r1, r3
 80026ca:	4804      	ldr	r0, [pc, #16]	; (80026dc <MX_GPIO_Init+0x124>)
 80026cc:	f002 fff4 	bl	80056b8 <HAL_GPIO_Init>

}
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40020000 	.word	0x40020000

080026e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <MX_I2C1_Init+0x50>)
 80026ea:	4a13      	ldr	r2, [pc, #76]	; (8002738 <MX_I2C1_Init+0x54>)
 80026ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f0:	4a12      	ldr	r2, [pc, #72]	; (800273c <MX_I2C1_Init+0x58>)
 80026f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026fa:	4b0e      	ldr	r3, [pc, #56]	; (8002734 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002700:	4b0c      	ldr	r3, [pc, #48]	; (8002734 <MX_I2C1_Init+0x50>)
 8002702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002706:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002708:	4b0a      	ldr	r3, [pc, #40]	; (8002734 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002714:	4b07      	ldr	r3, [pc, #28]	; (8002734 <MX_I2C1_Init+0x50>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <MX_I2C1_Init+0x50>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002720:	4804      	ldr	r0, [pc, #16]	; (8002734 <MX_I2C1_Init+0x50>)
 8002722:	f003 f9b1 	bl	8005a88 <HAL_I2C_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800272c:	f000 fcca 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20001e5c 	.word	0x20001e5c
 8002738:	40005400 	.word	0x40005400
 800273c:	00061a80 	.word	0x00061a80

08002740 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <HAL_I2C_MspInit+0x84>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d12c      	bne.n	80027bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a17      	ldr	r2, [pc, #92]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800277e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002784:	2312      	movs	r3, #18
 8002786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278c:	2303      	movs	r3, #3
 800278e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002790:	2304      	movs	r3, #4
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <HAL_I2C_MspInit+0x8c>)
 800279c:	f002 ff8c 	bl	80056b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 80027aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ae:	6413      	str	r3, [r2, #64]	; 0x40
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_I2C_MspInit+0x88>)
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027bc:	bf00      	nop
 80027be:	3728      	adds	r7, #40	; 0x28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40005400 	.word	0x40005400
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40020400 	.word	0x40020400

080027d0 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027d6:	4a17      	ldr	r2, [pc, #92]	; (8002834 <lfs_w25qflash_config_init+0x64>)
 80027d8:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 80027da:	4b15      	ldr	r3, [pc, #84]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027dc:	4a16      	ldr	r2, [pc, #88]	; (8002838 <lfs_w25qflash_config_init+0x68>)
 80027de:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <lfs_w25qflash_config_init+0x6c>)
 80027e4:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <lfs_w25qflash_config_init+0x70>)
 80027ea:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
littlefs_config.unlock = lfs_unlock;
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <lfs_w25qflash_config_init+0x74>)
 80027ee:	895b      	ldrh	r3, [r3, #10]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027f4:	615a      	str	r2, [r3, #20]
 littlefs_config.prog_size = w25qxx.PageSize;
 80027f6:	4b13      	ldr	r3, [pc, #76]	; (8002844 <lfs_w25qflash_config_init+0x74>)
 80027f8:	895b      	ldrh	r3, [r3, #10]
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 80027fe:	619a      	str	r2, [r3, #24]
 littlefs_config.block_size = w25qxx.SectorSize;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <lfs_w25qflash_config_init+0x74>)
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 8002806:	61d3      	str	r3, [r2, #28]
 littlefs_config.block_count = w25qxx.SectorCount;
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <lfs_w25qflash_config_init+0x74>)
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4a08      	ldr	r2, [pc, #32]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 800280e:	6213      	str	r3, [r2, #32]
 littlefs_config.block_cycles = 100;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 8002812:	2264      	movs	r2, #100	; 0x64
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	629a      	str	r2, [r3, #40]	; 0x28
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 800281e:	4b04      	ldr	r3, [pc, #16]	; (8002830 <lfs_w25qflash_config_init+0x60>)
 8002820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20001eb0 	.word	0x20001eb0
 8002834:	08002849 	.word	0x08002849
 8002838:	08002879 	.word	0x08002879
 800283c:	080028a9 	.word	0x080028a9
 8002840:	080028c3 	.word	0x080028c3
 8002844:	20016334 	.word	0x20016334

08002848 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
 8002854:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6838      	ldr	r0, [r7, #0]
 800285e:	f020 f8c7 	bl	80229f0 <W25qxx_ReadSector>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <lfs_w25qflash_read+0x24>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);

		return LFS_ERR_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	e001      	b.n	8002870 <lfs_w25qflash_read+0x28>

	} else {

	  return LFS_ERR_CORRUPT;
 800286c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	6838      	ldr	r0, [r7, #0]
 800288e:	f01f ffcd 	bl	802282c <W25qxx_WriteSector>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <lfs_w25qflash_prog+0x24>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);

		return LFS_ERR_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	e001      	b.n	80028a0 <lfs_w25qflash_prog+0x28>

	} else {

		return LFS_ERR_CORRUPT;
 800289c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 80028b2:	6838      	ldr	r0, [r7, #0]
 80028b4:	f01f fec6 	bl	8022644 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 80028e0:	f7ff ff76 	bl	80027d0 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a06      	ldr	r2, [pc, #24]	; (8002900 <lfs_get_default_config+0x28>)
 80028e8:	4618      	mov	r0, r3
 80028ea:	4611      	mov	r1, r2
 80028ec:	234c      	movs	r3, #76	; 0x4c
 80028ee:	461a      	mov	r2, r3
 80028f0:	f022 fadb 	bl	8024eaa <memcpy>
    return 0;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20001eb0 	.word	0x20001eb0

08002904 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 800290c:	f01f fdc8 	bl	80224a0 <W25qxx_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	81fb      	strh	r3, [r7, #14]

    return status;
 8002914:	89fb      	ldrh	r3, [r7, #14]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <Log_returnLevelString>:
  }
  return Log_level_disable + 1;
}

char* Log_returnLevelString(Log_level_t level)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  switch (level)
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	2b06      	cmp	r3, #6
 800292e:	d81f      	bhi.n	8002970 <Log_returnLevelString+0x50>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <Log_returnLevelString+0x18>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	08002955 	.word	0x08002955
 800293c:	08002959 	.word	0x08002959
 8002940:	0800295d 	.word	0x0800295d
 8002944:	08002961 	.word	0x08002961
 8002948:	08002965 	.word	0x08002965
 800294c:	08002969 	.word	0x08002969
 8002950:	0800296d 	.word	0x0800296d
  {
  case Log_level_trace:
	return "trace";
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <Log_returnLevelString+0x60>)
 8002956:	e00c      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_debug:
	return "debug";
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <Log_returnLevelString+0x64>)
 800295a:	e00a      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_info:
	return "info";
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <Log_returnLevelString+0x68>)
 800295e:	e008      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_warning:
	return "Warning";
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <Log_returnLevelString+0x6c>)
 8002962:	e006      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_error:
	return "ERROR";
 8002964:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <Log_returnLevelString+0x70>)
 8002966:	e004      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_fatal:
	return "FATAL";
 8002968:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <Log_returnLevelString+0x74>)
 800296a:	e002      	b.n	8002972 <Log_returnLevelString+0x52>

  case Log_level_disable:
	return "disable";
 800296c:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <Log_returnLevelString+0x78>)
 800296e:	e000      	b.n	8002972 <Log_returnLevelString+0x52>

  default:
	return "INVALID";
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <Log_returnLevelString+0x7c>)
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	08027924 	.word	0x08027924
 8002984:	0802792c 	.word	0x0802792c
 8002988:	08027934 	.word	0x08027934
 800298c:	0802795c 	.word	0x0802795c
 8002990:	08027964 	.word	0x08027964
 8002994:	0802796c 	.word	0x0802796c
 8002998:	08027954 	.word	0x08027954
 800299c:	08027974 	.word	0x08027974

080029a0 <Log_insertOnTheList>:

  bool Log_insertOnTheList(Log_t *log)
  {
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	6078      	str	r0, [r7, #4]
	CheckPointer_ifError_return(log, false);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <Log_insertOnTheList+0x12>
 80029ae:	2300      	movs	r3, #0
 80029b0:	e0d4      	b.n	8002b5c <Log_insertOnTheList+0x1bc>
	uint32_t count = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]

	/* look if it is already on the list */
	for (count = 0; count < logConfig->logList_count; count++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	e064      	b.n	8002a86 <Log_insertOnTheList+0xe6>
	{
	  if (memcmp(logConfig->logList[count].name, log->name, sizeof(log->name))
 80029bc:	4b69      	ldr	r3, [pc, #420]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	f103 0008 	add.w	r0, r3, #8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	220b      	movs	r2, #11
 80029d6:	4619      	mov	r1, r3
 80029d8:	f021 f8e0 	bl	8023b9c <memcmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d14e      	bne.n	8002a80 <Log_insertOnTheList+0xe0>
		  == 0)
	  {
		log->pos = logConfig->logList[count].pos;
 80029e2:	4b60      	ldr	r3, [pc, #384]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3304      	adds	r3, #4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
		log->level = logConfig->logList[count].level;
 80029fa:	4b5a      	ldr	r3, [pc, #360]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 80029fc:	6819      	ldr	r1, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4613      	mov	r3, r2
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3313      	adds	r3, #19
 8002a0c:	781a      	ldrb	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	73da      	strb	r2, [r3, #15]
		logConfig->logList[count].levelDefault = log->levelDefault;
 8002a12:	4b54      	ldr	r3, [pc, #336]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7c18      	ldrb	r0, [r3, #16]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3314      	adds	r3, #20
 8002a28:	4602      	mov	r2, r0
 8002a2a:	701a      	strb	r2, [r3, #0]
		logConfig->logList[count].ptrAddress = (uint32_t) log;
 8002a2c:	4b4d      	ldr	r3, [pc, #308]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002a2e:	6818      	ldr	r0, [r3, #0]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4403      	add	r3, r0
 8002a3e:	3318      	adds	r3, #24
 8002a40:	6019      	str	r1, [r3, #0]
		Log_print(log_log, Log_level_trace, "Log %s restored from file",log->name);
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002a44:	7bdb      	ldrb	r3, [r3, #15]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d818      	bhi.n	8002a7c <Log_insertOnTheList+0xdc>
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002a4c:	7bdb      	ldrb	r3, [r3, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d114      	bne.n	8002a7c <Log_insertOnTheList+0xdc>
 8002a52:	4b46      	ldr	r3, [pc, #280]	; (8002b6c <Log_insertOnTheList+0x1cc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4798      	blx	r3
 8002a58:	4604      	mov	r4, r0
 8002a5a:	2000      	movs	r0, #0
 8002a5c:	f7ff ff60 	bl	8002920 <Log_returnLevelString>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2377      	movs	r3, #119	; 0x77
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	4b40      	ldr	r3, [pc, #256]	; (8002b70 <Log_insertOnTheList+0x1d0>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	4a40      	ldr	r2, [pc, #256]	; (8002b74 <Log_insertOnTheList+0x1d4>)
 8002a74:	4621      	mov	r1, r4
 8002a76:	4840      	ldr	r0, [pc, #256]	; (8002b78 <Log_insertOnTheList+0x1d8>)
 8002a78:	f020 fef4 	bl	8023864 <iprintf>
		return true;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e06d      	b.n	8002b5c <Log_insertOnTheList+0x1bc>
	for (count = 0; count < logConfig->logList_count; count++)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3301      	adds	r3, #1
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	4b37      	ldr	r3, [pc, #220]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	885b      	ldrh	r3, [r3, #2]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d393      	bcc.n	80029bc <Log_insertOnTheList+0x1c>
	  }
	}

	log->pos = logConfig->logList_count;
 8002a94:	4b33      	ldr	r3, [pc, #204]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	885b      	ldrh	r3, [r3, #2]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	601a      	str	r2, [r3, #0]
	memcpy(&(logConfig->logList[logConfig->logList_count]), log, sizeof(Log_t));
 8002aa0:	4b30      	ldr	r3, [pc, #192]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b2f      	ldr	r3, [pc, #188]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	885b      	ldrh	r3, [r3, #2]
 8002aaa:	4619      	mov	r1, r3
 8002aac:	460b      	mov	r3, r1
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	440b      	add	r3, r1
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	2218      	movs	r2, #24
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f022 f9f4 	bl	8024eaa <memcpy>
	logConfig->logList_count++;
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <Log_insertOnTheList+0x1c4>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	885a      	ldrh	r2, [r3, #2]
 8002ac8:	3201      	adds	r2, #1
 8002aca:	b292      	uxth	r2, r2
 8002acc:	805a      	strh	r2, [r3, #2]
	if (logFilesWasRead)
 8002ace:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <Log_insertOnTheList+0x1dc>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <Log_insertOnTheList+0x180>
	{
	  if (!Log_SaveFileConfig())
 8002ad6:	f000 f933 	bl	8002d40 <Log_SaveFileConfig>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f083 0301 	eor.w	r3, r3, #1
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01c      	beq.n	8002b20 <Log_insertOnTheList+0x180>
	  {
		Log_print(log_log, Log_level_error, "Failed to save log %s on file",
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002ae8:	7bdb      	ldrb	r3, [r3, #15]
 8002aea:	2b05      	cmp	r3, #5
 8002aec:	d818      	bhi.n	8002b20 <Log_insertOnTheList+0x180>
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002af0:	7bdb      	ldrb	r3, [r3, #15]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d814      	bhi.n	8002b20 <Log_insertOnTheList+0x180>
 8002af6:	4b1d      	ldr	r3, [pc, #116]	; (8002b6c <Log_insertOnTheList+0x1cc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4798      	blx	r3
 8002afc:	4604      	mov	r4, r0
 8002afe:	2004      	movs	r0, #4
 8002b00:	f7ff ff0e 	bl	8002920 <Log_returnLevelString>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	9302      	str	r3, [sp, #8]
 8002b0c:	2383      	movs	r3, #131	; 0x83
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	4b17      	ldr	r3, [pc, #92]	; (8002b70 <Log_insertOnTheList+0x1d0>)
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	4613      	mov	r3, r2
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <Log_insertOnTheList+0x1d4>)
 8002b18:	4621      	mov	r1, r4
 8002b1a:	4819      	ldr	r0, [pc, #100]	; (8002b80 <Log_insertOnTheList+0x1e0>)
 8002b1c:	f020 fea2 	bl	8023864 <iprintf>
			log->name);
	  }
	}

	Log_print(log_log, Log_level_trace, "Log %s was added on the list",
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002b22:	7bdb      	ldrb	r3, [r3, #15]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d818      	bhi.n	8002b5a <Log_insertOnTheList+0x1ba>
 8002b28:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <Log_insertOnTheList+0x1c8>)
 8002b2a:	7bdb      	ldrb	r3, [r3, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d114      	bne.n	8002b5a <Log_insertOnTheList+0x1ba>
 8002b30:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <Log_insertOnTheList+0x1cc>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4798      	blx	r3
 8002b36:	4604      	mov	r4, r0
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f7ff fef1 	bl	8002920 <Log_returnLevelString>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3304      	adds	r3, #4
 8002b44:	9302      	str	r3, [sp, #8]
 8002b46:	2388      	movs	r3, #136	; 0x88
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <Log_insertOnTheList+0x1d0>)
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	4a08      	ldr	r2, [pc, #32]	; (8002b74 <Log_insertOnTheList+0x1d4>)
 8002b52:	4621      	mov	r1, r4
 8002b54:	480b      	ldr	r0, [pc, #44]	; (8002b84 <Log_insertOnTheList+0x1e4>)
 8002b56:	f020 fe85 	bl	8023864 <iprintf>
		log->name);
	return true;
 8002b5a:	2301      	movs	r3, #1
  }
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	20001efc 	.word	0x20001efc
 8002b68:	20001f08 	.word	0x20001f08
 8002b6c:	20001f04 	.word	0x20001f04
 8002b70:	0802bef0 	.word	0x0802bef0
 8002b74:	20001f0c 	.word	0x20001f0c
 8002b78:	0802797c 	.word	0x0802797c
 8002b7c:	20001f00 	.word	0x20001f00
 8002b80:	080279ac 	.word	0x080279ac
 8002b84:	080279e0 	.word	0x080279e0

08002b88 <Log_printAllLogsOnTheList>:

  void Log_printAllLogsOnTheList()
  {
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af02      	add	r7, sp, #8
	uint32_t count = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	607b      	str	r3, [r7, #4]
	if (logConfig->logList_count == 0)
 8002b92:	4b37      	ldr	r3, [pc, #220]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	885b      	ldrh	r3, [r3, #2]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d103      	bne.n	8002ba4 <Log_printAllLogsOnTheList+0x1c>
	{
	  printf("There is no log on the list"Log_newLine);
 8002b9c:	4835      	ldr	r0, [pc, #212]	; (8002c74 <Log_printAllLogsOnTheList+0xec>)
 8002b9e:	f020 fec7 	bl	8023930 <puts>
	  return;
 8002ba2:	e061      	b.n	8002c68 <Log_printAllLogsOnTheList+0xe0>
	}
	printf("There are %d logs registered"Log_newLine""Log_newLine,
		logConfig->logList_count);
 8002ba4:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	885b      	ldrh	r3, [r3, #2]
	printf("There are %d logs registered"Log_newLine""Log_newLine,
 8002baa:	4619      	mov	r1, r3
 8002bac:	4832      	ldr	r0, [pc, #200]	; (8002c78 <Log_printAllLogsOnTheList+0xf0>)
 8002bae:	f020 fe59 	bl	8023864 <iprintf>
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002bb2:	4832      	ldr	r0, [pc, #200]	; (8002c7c <Log_printAllLogsOnTheList+0xf4>)
 8002bb4:	f020 febc 	bl	8023930 <puts>
	printf(" |     Name    |     Level   | DefaultLevel |"Log_newLine);
 8002bb8:	4831      	ldr	r0, [pc, #196]	; (8002c80 <Log_printAllLogsOnTheList+0xf8>)
 8002bba:	f020 feb9 	bl	8023930 <puts>
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002bbe:	482f      	ldr	r0, [pc, #188]	; (8002c7c <Log_printAllLogsOnTheList+0xf4>)
 8002bc0:	f020 feb6 	bl	8023930 <puts>
	for (count = 0; count < logConfig->logList_count; count++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	e044      	b.n	8002c54 <Log_printAllLogsOnTheList+0xcc>
	{
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
		  logConfig->logList[count].name,
 8002bca:	4b29      	ldr	r3, [pc, #164]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002bcc:	6819      	ldr	r1, [r3, #0]
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	f103 0408 	add.w	r4, r3, #8
		  Log_returnLevelString(logConfig->logList[count].level),
 8002bde:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002be0:	6819      	ldr	r1, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	3313      	adds	r3, #19
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fe94 	bl	8002920 <Log_returnLevelString>
 8002bf8:	4605      	mov	r5, r0
		  logConfig->logList[count].level,
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	3313      	adds	r3, #19
 8002c0c:	781b      	ldrb	r3, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002c0e:	461e      	mov	r6, r3
		  Log_returnLevelString(logConfig->logList[count].levelDefault),
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002c12:	6819      	ldr	r1, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3314      	adds	r3, #20
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fe7b 	bl	8002920 <Log_returnLevelString>
		  logConfig->logList[count].levelDefault);
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3314      	adds	r3, #20
 8002c3c:	781b      	ldrb	r3, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	9000      	str	r0, [sp, #0]
 8002c42:	4633      	mov	r3, r6
 8002c44:	462a      	mov	r2, r5
 8002c46:	4621      	mov	r1, r4
 8002c48:	480e      	ldr	r0, [pc, #56]	; (8002c84 <Log_printAllLogsOnTheList+0xfc>)
 8002c4a:	f020 fe0b 	bl	8023864 <iprintf>
	for (count = 0; count < logConfig->logList_count; count++)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3301      	adds	r3, #1
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <Log_printAllLogsOnTheList+0xe8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	885b      	ldrh	r3, [r3, #2]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d3b3      	bcc.n	8002bca <Log_printAllLogsOnTheList+0x42>
	}
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <Log_printAllLogsOnTheList+0xf4>)
 8002c64:	f020 fe64 	bl	8023930 <puts>
  }
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20001efc 	.word	0x20001efc
 8002c74:	08027a10 	.word	0x08027a10
 8002c78:	08027a30 	.word	0x08027a30
 8002c7c:	08027a54 	.word	0x08027a54
 8002c80:	08027a84 	.word	0x08027a84
 8002c84:	08027ab4 	.word	0x08027ab4

08002c88 <Log_init>:
  }



  bool Log_init(Log_t *log, char logName[], Log_level_t level)
  {
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b087      	sub	sp, #28
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	71fb      	strb	r3, [r7, #7]
#if LOG_ENABLE
	CheckPointer_ifError_return(log, false);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <Log_init+0x18>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e041      	b.n	8002d24 <Log_init+0x9c>
	if (!CheckIfItIs_valid_enum(level, Log_level_trace, Log_level_disable))
 8002ca0:	79fb      	ldrb	r3, [r7, #7]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d91b      	bls.n	8002cde <Log_init+0x56>
	{
	  Log_print(log_log, Log_level_error, "Invalid log level value");
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <Log_init+0xa4>)
 8002ca8:	7bdb      	ldrb	r3, [r3, #15]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d815      	bhi.n	8002cda <Log_init+0x52>
 8002cae:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <Log_init+0xa4>)
 8002cb0:	7bdb      	ldrb	r3, [r3, #15]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d811      	bhi.n	8002cda <Log_init+0x52>
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	; (8002d30 <Log_init+0xa8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4798      	blx	r3
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	2004      	movs	r0, #4
 8002cc0:	f7ff fe2e 	bl	8002920 <Log_returnLevelString>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002cca:	9201      	str	r2, [sp, #4]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <Log_init+0xac>)
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <Log_init+0xb0>)
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4819      	ldr	r0, [pc, #100]	; (8002d3c <Log_init+0xb4>)
 8002cd6:	f020 fdc5 	bl	8023864 <iprintf>
	  return false;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e022      	b.n	8002d24 <Log_init+0x9c>
	}

	memset(log->name, 0, sizeof(log->name));
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	220b      	movs	r2, #11
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f020 ff82 	bl	8023bf0 <memset>
	strncpy(log->name, logName, sizeof(log->name) - 1);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f020 ffc2 	bl	8023c7e <strncpy>
	log->level = level;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	79fa      	ldrb	r2, [r7, #7]
 8002cfe:	73da      	strb	r2, [r3, #15]
	log->levelDefault = level;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	741a      	strb	r2, [r3, #16]
	log->ptrAddress = (uint32_t) log;
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	615a      	str	r2, [r3, #20]

	if (!Log_insertOnTheList(log))
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff fe47 	bl	80029a0 <Log_insertOnTheList>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <Log_init+0x9a>
	{
	  return false;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <Log_init+0x9c>
	}
#endif /*LOG_ENABLE*/

	return true;
 8002d22:	2301      	movs	r3, #1
  }
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	20001f08 	.word	0x20001f08
 8002d30:	20001f04 	.word	0x20001f04
 8002d34:	0802bf04 	.word	0x0802bf04
 8002d38:	20001f0c 	.word	0x20001f0c
 8002d3c:	08027b0c 	.word	0x08027b0c

08002d40 <Log_SaveFileConfig>:


  bool Log_SaveFileConfig()
  {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0

	if (!CfgFiles_UpdateCfgFileByIndex(LOG_FILE_IDX, false))
 8002d44:	2100      	movs	r1, #0
 8002d46:	2003      	movs	r0, #3
 8002d48:	f7ff f96a 	bl	8002020 <CfgFiles_UpdateCfgFileByIndex>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <Log_SaveFileConfig+0x1c>
	{
	 // Log_print(log_log, Log_level_error, "Failed to LOG config file");
	  return false;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <Log_SaveFileConfig+0x1e>
	}
	return true;
 8002d5c:	2301      	movs	r3, #1
  }
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <Log_printVersion>:
	}
	return false;
  }

  void Log_printVersion()
  {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af00      	add	r7, sp, #0
	struct tm timeinfo = {0};
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2224      	movs	r2, #36	; 0x24
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f020 ff3d 	bl	8023bf0 <memset>

	DateTimeGetTm(&timeinfo );
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f9f3 	bl	8002164 <DateTimeGetTm>

	printf(Log_newLine"HorusGateway"Log_newLine);
 8002d7e:	480c      	ldr	r0, [pc, #48]	; (8002db0 <Log_printVersion+0x4c>)
 8002d80:	f020 fdd6 	bl	8023930 <puts>
	printf("  Firmware v.%d.%d%d"Log_newLine, FW_MAJOR_VERSION,
 8002d84:	2300      	movs	r3, #0
 8002d86:	2200      	movs	r2, #0
 8002d88:	2101      	movs	r1, #1
 8002d8a:	480a      	ldr	r0, [pc, #40]	; (8002db4 <Log_printVersion+0x50>)
 8002d8c:	f020 fd6a 	bl	8023864 <iprintf>
		FW_MINOR_VERSION, FW_BUILD_VERSION);
	printf("  Build %s %s"Log_newLine, __DATE__, __TIME__);
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <Log_printVersion+0x54>)
 8002d92:	490a      	ldr	r1, [pc, #40]	; (8002dbc <Log_printVersion+0x58>)
 8002d94:	480a      	ldr	r0, [pc, #40]	; (8002dc0 <Log_printVersion+0x5c>)
 8002d96:	f020 fd65 	bl	8023864 <iprintf>

	printf("  Start firmware %s \r\n", DateTimeGetString());
 8002d9a:	f7ff f9ad 	bl	80020f8 <DateTimeGetString>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4619      	mov	r1, r3
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <Log_printVersion+0x60>)
 8002da4:	f020 fd5e 	bl	8023864 <iprintf>

  }
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	08027b78 	.word	0x08027b78
 8002db4:	08027b88 	.word	0x08027b88
 8002db8:	08027ba0 	.word	0x08027ba0
 8002dbc:	08027bac 	.word	0x08027bac
 8002dc0:	08027bb8 	.word	0x08027bb8
 8002dc4:	08027bc8 	.word	0x08027bc8

08002dc8 <Log_printLogo>:

  void Log_printLogo()
  {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	printf(LOGO);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <Log_printLogo+0x10>)
 8002dce:	f020 fd49 	bl	8023864 <iprintf>
  }
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08027be0 	.word	0x08027be0

08002ddc <Log_initModule>:

  /*####################### List Log Functions #######################*/

  void Log_initModule (char *(*funcToGetDateTime) ())

{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

 Log_funcToGetDateTime = funcToGetDateTime;
 8002de4:	4a0b      	ldr	r2, [pc, #44]	; (8002e14 <Log_initModule+0x38>)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <Log_initModule+0x3c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

  memset(&logConfig, 0, sizeof(logConfig));
//	Log_funcToGetDateTime = funcToGetDateTime;

  Log_init(&log_log, LOG_LOGNAME, LOG_LOGLEVEL_DEFAULT);
 8002df0:	2203      	movs	r2, #3
 8002df2:	490a      	ldr	r1, [pc, #40]	; (8002e1c <Log_initModule+0x40>)
 8002df4:	480a      	ldr	r0, [pc, #40]	; (8002e20 <Log_initModule+0x44>)
 8002df6:	f7ff ff47 	bl	8002c88 <Log_init>

  //  Logger_CLI_initCommands ();
  Log_printLogo();
 8002dfa:	f7ff ffe5 	bl	8002dc8 <Log_printLogo>
  Log_printVersion();
 8002dfe:	f7ff ffb1 	bl	8002d64 <Log_printVersion>

  logConfig = &logConfigFile;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <Log_initModule+0x3c>)
 8002e04:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <Log_initModule+0x48>)
 8002e06:	601a      	str	r2, [r3, #0]
  Log_printAllLogsOnTheList();
 8002e08:	f7ff febe 	bl	8002b88 <Log_printAllLogsOnTheList>

}
 8002e0c:	bf00      	nop
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20001f04 	.word	0x20001f04
 8002e18:	20001efc 	.word	0x20001efc
 8002e1c:	08027f58 	.word	0x08027f58
 8002e20:	20001f08 	.word	0x20001f08
 8002e24:	20000930 	.word	0x20000930

08002e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0

  /* MCU Configuration----
   * ----------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e2c:	f001 f8a0 	bl	8003f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e30:	f000 f81e 	bl	8002e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e34:	f7ff fbc0 	bl	80025b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002e38:	f000 fc52 	bl	80036e0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002e3c:	f000 fe9c 	bl	8003b78 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002e40:	f7ff fc50 	bl	80026e4 <MX_I2C1_Init>
  MX_RTC_Init();
 8002e44:	f000 fbfc 	bl	8003640 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  HorusIhmInit();
 8002e48:	f000 f8b4 	bl	8002fb4 <HorusIhmInit>
  FileSystemInit();
 8002e4c:	f7fe fbca 	bl	80015e4 <FileSystemInit>
  CfgFilesInit();
 8002e50:	f7fe ffe4 	bl	8001e1c <CfgFilesInit>
  ModbusInit();
 8002e54:	f01e ffe0 	bl	8021e18 <ModbusInit>
  Log_initModule(DateTimeGetString);
 8002e58:	4804      	ldr	r0, [pc, #16]	; (8002e6c <main+0x44>)
 8002e5a:	f7ff ffbf 	bl	8002ddc <Log_initModule>
  AdapterSSD1306_Init();
 8002e5e:	f7fe f845 	bl	8000eec <AdapterSSD1306_Init>
 // SntpClientInit();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002e62:	f7ff f9e3 	bl	800222c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002e66:	f006 fca6 	bl	80097b6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <main+0x42>
 8002e6c:	080020f9 	.word	0x080020f9

08002e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b094      	sub	sp, #80	; 0x50
 8002e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e76:	f107 0320 	add.w	r3, r7, #32
 8002e7a:	2230      	movs	r2, #48	; 0x30
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f020 feb6 	bl	8023bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
 8002e8c:	605a      	str	r2, [r3, #4]
 8002e8e:	609a      	str	r2, [r3, #8]
 8002e90:	60da      	str	r2, [r3, #12]
 8002e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <SystemClock_Config+0xd0>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <SystemClock_Config+0xd0>)
 8002e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea4:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <SystemClock_Config+0xd0>)
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	4b23      	ldr	r3, [pc, #140]	; (8002f44 <SystemClock_Config+0xd4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <SystemClock_Config+0xd4>)
 8002eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <SystemClock_Config+0xd4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002ecc:	2305      	movs	r3, #5
 8002ece:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ed0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eda:	2302      	movs	r3, #2
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ee8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002eec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ef6:	f107 0320 	add.w	r3, r7, #32
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fa72 	bl	80063e4 <HAL_RCC_OscConfig>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002f06:	f000 f8dd 	bl	80030c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f0a:	230f      	movs	r3, #15
 8002f0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002f16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	2105      	movs	r1, #5
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fcd3 	bl	80068d4 <HAL_RCC_ClockConfig>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f34:	f000 f8c6 	bl	80030c4 <Error_Handler>
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3750      	adds	r7, #80	; 0x50
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40007000 	.word	0x40007000

08002f48 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
//	return ITM_SendChar(ch);
  unsigned char byte = ch;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	73fb      	strb	r3, [r7, #15]
  if (HAL_UART_Transmit(&huart1, &byte, 1, 100) != HAL_OK)
 8002f56:	f107 010f 	add.w	r1, r7, #15
 8002f5a:	2364      	movs	r3, #100	; 0x64
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <__io_putchar+0x30>)
 8002f60:	f005 fa44 	bl	80083ec <HAL_UART_Transmit>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <__io_putchar+0x26>
  {

    return 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <__io_putchar+0x28>
  }
  return ch;
 8002f6e:	687b      	ldr	r3, [r7, #4]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20002010 	.word	0x20002010

08002f7c <HorusOperationMode>:

void HorusOperationMode(TOperationMode operationMode)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
  switch (operationMode)
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d009      	beq.n	8002fa0 <HorusOperationMode+0x24>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	dc09      	bgt.n	8002fa4 <HorusOperationMode+0x28>
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <HorusOperationMode+0x2c>
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d000      	beq.n	8002f9a <HorusOperationMode+0x1e>

	break;

  default:

	break;
 8002f98:	e004      	b.n	8002fa4 <HorusOperationMode+0x28>
	ModbusServerInit();
 8002f9a:	f000 fb21 	bl	80035e0 <ModbusServerInit>
	break;
 8002f9e:	e004      	b.n	8002faa <HorusOperationMode+0x2e>
	break;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <HorusOperationMode+0x2e>
	break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <HorusOperationMode+0x2e>
	break;
 8002fa8:	bf00      	nop
  }

}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <HorusIhmInit>:


void HorusIhmInit()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0

  while (initTimeou < 100)
 8002fb8:	e00d      	b.n	8002fd6 <HorusIhmInit+0x22>
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002fba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fbe:	4835      	ldr	r0, [pc, #212]	; (8003094 <HorusIhmInit+0xe0>)
 8002fc0:	f002 fd47 	bl	8005a52 <HAL_GPIO_TogglePin>
	HAL_Delay(30);
 8002fc4:	201e      	movs	r0, #30
 8002fc6:	f001 f815 	bl	8003ff4 <HAL_Delay>
	initTimeou++;
 8002fca:	4b33      	ldr	r3, [pc, #204]	; (8003098 <HorusIhmInit+0xe4>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HorusIhmInit+0xe4>)
 8002fd4:	801a      	strh	r2, [r3, #0]
  while (initTimeou < 100)
 8002fd6:	4b30      	ldr	r3, [pc, #192]	; (8003098 <HorusIhmInit+0xe4>)
 8002fd8:	881b      	ldrh	r3, [r3, #0]
 8002fda:	2b63      	cmp	r3, #99	; 0x63
 8002fdc:	d9ed      	bls.n	8002fba <HorusIhmInit+0x6>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fe4:	482b      	ldr	r0, [pc, #172]	; (8003094 <HorusIhmInit+0xe0>)
 8002fe6:	f002 fd1b 	bl	8005a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ff0:	4828      	ldr	r0, [pc, #160]	; (8003094 <HorusIhmInit+0xe0>)
 8002ff2:	f002 fd15 	bl	8005a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ffc:	4825      	ldr	r0, [pc, #148]	; (8003094 <HorusIhmInit+0xe0>)
 8002ffe:	f002 fd0f 	bl	8005a20 <HAL_GPIO_WritePin>

  initTimeou = 0;
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HorusIhmInit+0xe4>)
 8003004:	2200      	movs	r2, #0
 8003006:	801a      	strh	r2, [r3, #0]

  while (initTimeou < 20)
 8003008:	e02c      	b.n	8003064 <HorusIhmInit+0xb0>
  {

	if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == 0)
 800300a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800300e:	4821      	ldr	r0, [pc, #132]	; (8003094 <HorusIhmInit+0xe0>)
 8003010:	f002 fcee 	bl	80059f0 <HAL_GPIO_ReadPin>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HorusIhmInit+0x6e>
	{
	  operationMode = NET_MODE;
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HorusIhmInit+0xe8>)
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]

	  break;
 8003020:	e024      	b.n	800306c <HorusIhmInit+0xb8>
	}

	if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == 0)
 8003022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003026:	481b      	ldr	r0, [pc, #108]	; (8003094 <HorusIhmInit+0xe0>)
 8003028:	f002 fce2 	bl	80059f0 <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d103      	bne.n	800303a <HorusIhmInit+0x86>
	{
	  operationMode = CFG_MODE;
 8003032:	4b1a      	ldr	r3, [pc, #104]	; (800309c <HorusIhmInit+0xe8>)
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]

	  break;
 8003038:	e018      	b.n	800306c <HorusIhmInit+0xb8>

	}

	if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == 0)
 800303a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800303e:	4815      	ldr	r0, [pc, #84]	; (8003094 <HorusIhmInit+0xe0>)
 8003040:	f002 fcd6 	bl	80059f0 <HAL_GPIO_ReadPin>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d103      	bne.n	8003052 <HorusIhmInit+0x9e>
	{
	  operationMode = BOOT_MODE;
 800304a:	4b14      	ldr	r3, [pc, #80]	; (800309c <HorusIhmInit+0xe8>)
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]
	  break;
 8003050:	e00c      	b.n	800306c <HorusIhmInit+0xb8>
	}

	initTimeou++;
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HorusIhmInit+0xe4>)
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <HorusIhmInit+0xe4>)
 800305c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 800305e:	2064      	movs	r0, #100	; 0x64
 8003060:	f000 ffc8 	bl	8003ff4 <HAL_Delay>
  while (initTimeou < 20)
 8003064:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <HorusIhmInit+0xe4>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	2b13      	cmp	r3, #19
 800306a:	d9ce      	bls.n	800300a <HorusIhmInit+0x56>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800306c:	2201      	movs	r2, #1
 800306e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003072:	4808      	ldr	r0, [pc, #32]	; (8003094 <HorusIhmInit+0xe0>)
 8003074:	f002 fcd4 	bl	8005a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8003078:	2201      	movs	r2, #1
 800307a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800307e:	4805      	ldr	r0, [pc, #20]	; (8003094 <HorusIhmInit+0xe0>)
 8003080:	f002 fcce 	bl	8005a20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8003084:	2201      	movs	r2, #1
 8003086:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800308a:	4802      	ldr	r0, [pc, #8]	; (8003094 <HorusIhmInit+0xe0>)
 800308c:	f002 fcc8 	bl	8005a20 <HAL_GPIO_WritePin>

}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	20001f22 	.word	0x20001f22
 800309c:	20001f20 	.word	0x20001f20

080030a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030b2:	f000 ff7f 	bl	8003fb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40002000 	.word	0x40002000

080030c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c8:	b672      	cpsid	i
}
 80030ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030cc:	e7fe      	b.n	80030cc <Error_Handler+0x8>
	...

080030d0 <ModbusStatusInfo>:
//#define LOG2(...)
#define LOG2 LOG


static void ModbusStatusInfo(bool open)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b0b2      	sub	sp, #200	; 0xc8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
	MenuData_t menu = {0};
 80030da:	f107 0308 	add.w	r3, r7, #8
 80030de:	22bd      	movs	r2, #189	; 0xbd
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f020 fd84 	bl	8023bf0 <memset>
	if (open)
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d009      	beq.n	8003102 <ModbusStatusInfo+0x32>
	{

		sprintf(menu.items[PAGE_1][LINE_0], "CFG:CN:PORT:%d",MODBUS_SERVER_TCP_PORT);
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	333f      	adds	r3, #63	; 0x3f
 80030f4:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80030f8:	490b      	ldr	r1, [pc, #44]	; (8003128 <ModbusStatusInfo+0x58>)
 80030fa:	4618      	mov	r0, r3
 80030fc:	f020 fc54 	bl	80239a8 <siprintf>
 8003100:	e008      	b.n	8003114 <ModbusStatusInfo+0x44>
	}
	else
	{
		sprintf(menu.items[PAGE_1][LINE_0], "CFG:DC:PORT:%d",MODBUS_SERVER_TCP_PORT);
 8003102:	f107 0308 	add.w	r3, r7, #8
 8003106:	333f      	adds	r3, #63	; 0x3f
 8003108:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800310c:	4907      	ldr	r1, [pc, #28]	; (800312c <ModbusStatusInfo+0x5c>)
 800310e:	4618      	mov	r0, r3
 8003110:	f020 fc4a 	bl	80239a8 <siprintf>
	}

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 8003114:	f107 0308 	add.w	r3, r7, #8
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fa2f 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 800311e:	bf00      	nop
 8003120:	37c8      	adds	r7, #200	; 0xc8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	0802801c 	.word	0x0802801c
 800312c:	0802802c 	.word	0x0802802c

08003130 <formatBytes>:




static void formatBytes(uint32_t bytes, char *str)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]

	if (bytes >= MB_THRESHOLD)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003140:	d313      	bcc.n	800316a <formatBytes+0x3a>
	{
		sprintf(str, "%.2f MBYTES", bytes / (float) MB_THRESHOLD);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	ee07 3a90 	vmov	s15, r3
 8003148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80031ac <formatBytes+0x7c>
 8003150:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003154:	ee16 0a90 	vmov	r0, s13
 8003158:	f7fd fa06 	bl	8000568 <__aeabi_f2d>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4913      	ldr	r1, [pc, #76]	; (80031b0 <formatBytes+0x80>)
 8003162:	6838      	ldr	r0, [r7, #0]
 8003164:	f020 fc20 	bl	80239a8 <siprintf>
	}
	else
	{
		sprintf(str, "%lu BYTES", bytes);
	}
}
 8003168:	e01c      	b.n	80031a4 <formatBytes+0x74>
	else if (bytes >= KB_THRESHOLD)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003170:	d313      	bcc.n	800319a <formatBytes+0x6a>
		sprintf(str, "%.2f KBYTES", bytes / (float) KB_THRESHOLD);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80031b4 <formatBytes+0x84>
 8003180:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003184:	ee16 0a90 	vmov	r0, s13
 8003188:	f7fd f9ee 	bl	8000568 <__aeabi_f2d>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4909      	ldr	r1, [pc, #36]	; (80031b8 <formatBytes+0x88>)
 8003192:	6838      	ldr	r0, [r7, #0]
 8003194:	f020 fc08 	bl	80239a8 <siprintf>
}
 8003198:	e004      	b.n	80031a4 <formatBytes+0x74>
		sprintf(str, "%lu BYTES", bytes);
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <formatBytes+0x8c>)
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	f020 fc02 	bl	80239a8 <siprintf>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	49800000 	.word	0x49800000
 80031b0:	0802803c 	.word	0x0802803c
 80031b4:	44800000 	.word	0x44800000
 80031b8:	08028048 	.word	0x08028048
 80031bc:	08028054 	.word	0x08028054

080031c0 <Modbus_infoPacket>:

static void Modbus_infoPacket()
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ba      	sub	sp, #232	; 0xe8
 80031c4:	af00      	add	r7, sp, #0
	MenuData_t menu = { 0 };
 80031c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ca:	22bd      	movs	r2, #189	; 0xbd
 80031cc:	2100      	movs	r1, #0
 80031ce:	4618      	mov	r0, r3
 80031d0:	f020 fd0e 	bl	8023bf0 <memset>
	char rx_str[17], tx_str[17];

	formatBytes(bytesRx, rx_str);
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <Modbus_infoPacket+0x70>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f107 0214 	add.w	r2, r7, #20
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ffa6 	bl	8003130 <formatBytes>
	formatBytes(bytesTx, tx_str);
 80031e4:	4b13      	ldr	r3, [pc, #76]	; (8003234 <Modbus_infoPacket+0x74>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	463a      	mov	r2, r7
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff9f 	bl	8003130 <formatBytes>

	snprintf(menu.items[PAGE_1][LINE_1], sizeof(menu.items[PAGE_1][LINE_1]), "RX: %s", rx_str);
 80031f2:	f107 0214 	add.w	r2, r7, #20
 80031f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031fa:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80031fe:	4613      	mov	r3, r2
 8003200:	4a0d      	ldr	r2, [pc, #52]	; (8003238 <Modbus_infoPacket+0x78>)
 8003202:	2115      	movs	r1, #21
 8003204:	f020 fb9c 	bl	8023940 <sniprintf>
	snprintf(menu.items[PAGE_1][LINE_2], sizeof(menu.items[PAGE_1][LINE_2]), "TX: %s", tx_str);
 8003208:	463a      	mov	r2, r7
 800320a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800320e:	f103 0069 	add.w	r0, r3, #105	; 0x69
 8003212:	4613      	mov	r3, r2
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <Modbus_infoPacket+0x7c>)
 8003216:	2115      	movs	r1, #21
 8003218:	f020 fb92 	bl	8023940 <sniprintf>

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 800321c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe f9ab 	bl	800157c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 8003226:	bf00      	nop
 8003228:	37e8      	adds	r7, #232	; 0xe8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20001f2c 	.word	0x20001f2c
 8003234:	20001f28 	.word	0x20001f28
 8003238:	08028060 	.word	0x08028060
 800323c:	08028068 	.word	0x08028068

08003240 <ModbusHandleConnection>:



static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8003246:	af04      	add	r7, sp, #16
 8003248:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800324c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003250:	6018      	str	r0, [r3, #0]
	unsigned char recvBuffer[MODBUS_SERVER_BUF_SIZE];

	const int RECEIVE_TIMEOUT_MS = 1; // 1 segundo
 8003252:	2301      	movs	r3, #1
 8003254:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	netconn_set_recvtimeout(connfd, RECEIVE_TIMEOUT_MS);
 8003258:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800325c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003260:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	61da      	str	r2, [r3, #28]
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 8003268:	f107 0208 	add.w	r2, r7, #8
 800326c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003270:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003274:	4611      	mov	r1, r2
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	f010 fc14 	bl	8013aa4 <netconn_recv>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

		if (err == ERR_OK)
 8003282:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 8090 	bne.w	80033ac <ModbusHandleConnection+0x16c>
		{
			if (netconn_err(connfd) == ERR_OK)
 800328c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003290:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f010 fd8e 	bl	8013db6 <netconn_err>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	f040 808c 	bne.w	80033ba <ModbusHandleConnection+0x17a>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 80032a2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80032a6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	f107 010c 	add.w	r1, r7, #12
 80032b2:	2300      	movs	r3, #0
 80032b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032b8:	f014 fc1c 	bl	8017af4 <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 80032bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80032c0:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	891b      	ldrh	r3, [r3, #8]
 80032ca:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210

				Log_print(log_notify, Log_level_info, "Received %u bytes", buffer_len);
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <ModbusHandleConnection+0x190>)
 80032d0:	7bdb      	ldrb	r3, [r3, #15]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d818      	bhi.n	8003308 <ModbusHandleConnection+0xc8>
 80032d6:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <ModbusHandleConnection+0x190>)
 80032d8:	7bdb      	ldrb	r3, [r3, #15]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d814      	bhi.n	8003308 <ModbusHandleConnection+0xc8>
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <ModbusHandleConnection+0x194>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4798      	blx	r3
 80032e4:	4604      	mov	r4, r0
 80032e6:	2002      	movs	r0, #2
 80032e8:	f7ff fb1a 	bl	8002920 <Log_returnLevelString>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 80032f2:	9302      	str	r3, [sp, #8]
 80032f4:	2374      	movs	r3, #116	; 0x74
 80032f6:	9301      	str	r3, [sp, #4]
 80032f8:	4b37      	ldr	r3, [pc, #220]	; (80033d8 <ModbusHandleConnection+0x198>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4613      	mov	r3, r2
 80032fe:	4a37      	ldr	r2, [pc, #220]	; (80033dc <ModbusHandleConnection+0x19c>)
 8003300:	4621      	mov	r1, r4
 8003302:	4837      	ldr	r0, [pc, #220]	; (80033e0 <ModbusHandleConnection+0x1a0>)
 8003304:	f020 faae 	bl	8023864 <iprintf>


				bytesRx = bytesRx + buffer_len;
 8003308:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <ModbusHandleConnection+0x1a4>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4413      	add	r3, r2
 8003312:	4a34      	ldr	r2, [pc, #208]	; (80033e4 <ModbusHandleConnection+0x1a4>)
 8003314:	6013      	str	r3, [r2, #0]

				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 8003316:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f01e fbc1 	bl	8021aa8 <InterpreterMODBUS>
 8003326:	4603      	mov	r3, r0
 8003328:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 800332c:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8003330:	f107 010c 	add.w	r1, r7, #12
 8003334:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003338:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 800333c:	2300      	movs	r3, #0
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	6800      	ldr	r0, [r0, #0]
 8003344:	f010 fc28 	bl	8013b98 <netconn_write_partly>

			    Log_print(log_notify, Log_level_info, "Send %u bytes", response_len);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <ModbusHandleConnection+0x190>)
 800334a:	7bdb      	ldrb	r3, [r3, #15]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d818      	bhi.n	8003382 <ModbusHandleConnection+0x142>
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <ModbusHandleConnection+0x190>)
 8003352:	7bdb      	ldrb	r3, [r3, #15]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d814      	bhi.n	8003382 <ModbusHandleConnection+0x142>
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <ModbusHandleConnection+0x194>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4798      	blx	r3
 800335e:	4604      	mov	r4, r0
 8003360:	2002      	movs	r0, #2
 8003362:	f7ff fadd 	bl	8002920 <Log_returnLevelString>
 8003366:	4602      	mov	r2, r0
 8003368:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800336c:	9302      	str	r3, [sp, #8]
 800336e:	237c      	movs	r3, #124	; 0x7c
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <ModbusHandleConnection+0x198>)
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	4613      	mov	r3, r2
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <ModbusHandleConnection+0x19c>)
 800337a:	4621      	mov	r1, r4
 800337c:	481a      	ldr	r0, [pc, #104]	; (80033e8 <ModbusHandleConnection+0x1a8>)
 800337e:	f020 fa71 	bl	8023864 <iprintf>

				bytesTx = bytesTx + response_len;
 8003382:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8003386:	4b19      	ldr	r3, [pc, #100]	; (80033ec <ModbusHandleConnection+0x1ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <ModbusHandleConnection+0x1ac>)
 800338e:	6013      	str	r3, [r2, #0]

				Modbus_infoPacket();
 8003390:	f7ff ff16 	bl	80031c0 <Modbus_infoPacket>

				netbuf_delete(inbuf);
 8003394:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003398:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f012 f90e 	bl	80155c0 <netbuf_delete>

			    osDelay(100);
 80033a4:	2064      	movs	r0, #100	; 0x64
 80033a6:	f006 fa69 	bl	800987c <osDelay>
				continue;
 80033aa:	e00b      	b.n	80033c4 <ModbusHandleConnection+0x184>
			}
		}
		else if(err == ERR_TIMEOUT)
 80033ac:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 80033b0:	f113 0f03 	cmn.w	r3, #3
 80033b4:	d005      	beq.n	80033c2 <ModbusHandleConnection+0x182>

		osDelay(10);

	} while (1);

	return 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e005      	b.n	80033c6 <ModbusHandleConnection+0x186>
		osDelay(10);
 80033ba:	200a      	movs	r0, #10
 80033bc:	f006 fa5e 	bl	800987c <osDelay>
 80033c0:	e752      	b.n	8003268 <ModbusHandleConnection+0x28>
			continue;
 80033c2:	bf00      	nop
	{
 80033c4:	e750      	b.n	8003268 <ModbusHandleConnection+0x28>
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd90      	pop	{r4, r7, pc}
 80033d0:	20001f30 	.word	0x20001f30
 80033d4:	20001f04 	.word	0x20001f04
 80033d8:	0802bf10 	.word	0x0802bf10
 80033dc:	20001f34 	.word	0x20001f34
 80033e0:	08028070 	.word	0x08028070
 80033e4:	20001f2c 	.word	0x20001f2c
 80033e8:	08028098 	.word	0x08028098
 80033ec:	20001f28 	.word	0x20001f28

080033f0 <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]

    if (connfd == NULL || connfd->type != NETCONN_TCP || connfd->pcb.tcp == NULL) {
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d030      	beq.n	8003466 <Modbus_activateTcpKeepAlive+0x76>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b10      	cmp	r3, #16
 800340a:	d12c      	bne.n	8003466 <Modbus_activateTcpKeepAlive+0x76>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d028      	beq.n	8003466 <Modbus_activateTcpKeepAlive+0x76>
        return;
    }
    struct tcp_pcb *pcb = connfd->pcb.tcp;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	617b      	str	r3, [r7, #20]

    LOCK_TCPIP_CORE();
 800341a:	4815      	ldr	r0, [pc, #84]	; (8003470 <Modbus_activateTcpKeepAlive+0x80>)
 800341c:	f01e f95c 	bl	80216d8 <sys_mutex_lock>
    ip_set_option(connfd->pcb.ip, SO_KEEPALIVE);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	7a5a      	ldrb	r2, [r3, #9]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f042 0208 	orr.w	r2, r2, #8
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	725a      	strb	r2, [r3, #9]
    pcb->keep_idle = idleTime * 1000;    // Tempo de ociosidade em milissegundos
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003438:	fb02 f303 	mul.w	r3, r2, r3
 800343c:	461a      	mov	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = interval * 1000;   // Intervalo entre as tentativas em milissegundos
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	461a      	mov	r2, r3
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt = count;               // Número de tentativas
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    UNLOCK_TCPIP_CORE();
 800345e:	4804      	ldr	r0, [pc, #16]	; (8003470 <Modbus_activateTcpKeepAlive+0x80>)
 8003460:	f01e f949 	bl	80216f6 <sys_mutex_unlock>
 8003464:	e000      	b.n	8003468 <Modbus_activateTcpKeepAlive+0x78>
        return;
 8003466:	bf00      	nop
}
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20011fb0 	.word	0x20011fb0

08003474 <ModbusTcpSeverTask>:

void ModbusTcpSeverTask(void const *argument)
{
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b08b      	sub	sp, #44	; 0x2c
 8003478:	af04      	add	r7, sp, #16
 800347a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 800347c:	2300      	movs	r3, #0
 800347e:	75fb      	strb	r3, [r7, #23]


	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8003480:	2200      	movs	r2, #0
 8003482:	2100      	movs	r1, #0
 8003484:	2010      	movs	r0, #16
 8003486:	f00f ffcb 	bl	8013420 <netconn_new_with_proto_and_callback>
 800348a:	6138      	str	r0, [r7, #16]

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d103      	bne.n	800349a <ModbusTcpSeverTask+0x26>
	{
		/* Handle error */
	    LOG("Failed to create TCP connection handle");
 8003492:	4847      	ldr	r0, [pc, #284]	; (80035b0 <ModbusTcpSeverTask+0x13c>)
 8003494:	f020 fa4c 	bl	8023930 <puts>
		return;
 8003498:	e087      	b.n	80035aa <ModbusTcpSeverTask+0x136>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 800349a:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800349e:	4945      	ldr	r1, [pc, #276]	; (80035b4 <ModbusTcpSeverTask+0x140>)
 80034a0:	6938      	ldr	r0, [r7, #16]
 80034a2:	f010 f877 	bl	8013594 <netconn_bind>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <ModbusTcpSeverTask+0x4a>
	{
		/* Handle error */
	    LOG("Failed to bind to port %d", MODBUS_SERVER_TCP_PORT);
 80034ac:	f245 51f0 	movw	r1, #22000	; 0x55f0
 80034b0:	4841      	ldr	r0, [pc, #260]	; (80035b8 <ModbusTcpSeverTask+0x144>)
 80034b2:	f020 f9d7 	bl	8023864 <iprintf>
		netconn_delete(conn);
 80034b6:	6938      	ldr	r0, [r7, #16]
 80034b8:	f010 f850 	bl	801355c <netconn_delete>
		return;
 80034bc:	e075      	b.n	80035aa <ModbusTcpSeverTask+0x136>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 80034be:	21ff      	movs	r1, #255	; 0xff
 80034c0:	6938      	ldr	r0, [r7, #16]
 80034c2:	f010 f89f 	bl	8013604 <netconn_listen_with_backlog>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <ModbusTcpSeverTask+0x66>
	{
		/* Handle error */
	    LOG("Failed to put the connection into LISTEN state");
 80034cc:	483b      	ldr	r0, [pc, #236]	; (80035bc <ModbusTcpSeverTask+0x148>)
 80034ce:	f020 fa2f 	bl	8023930 <puts>
		netconn_delete(conn);
 80034d2:	6938      	ldr	r0, [r7, #16]
 80034d4:	f010 f842 	bl	801355c <netconn_delete>
		return;
 80034d8:	e067      	b.n	80035aa <ModbusTcpSeverTask+0x136>
	}


	Log_print(log_notify, Log_level_info, "TCP server listening on port: %d", MODBUS_SERVER_TCP_PORT);
 80034da:	4b39      	ldr	r3, [pc, #228]	; (80035c0 <ModbusTcpSeverTask+0x14c>)
 80034dc:	7bdb      	ldrb	r3, [r3, #15]
 80034de:	2b05      	cmp	r3, #5
 80034e0:	d817      	bhi.n	8003512 <ModbusTcpSeverTask+0x9e>
 80034e2:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <ModbusTcpSeverTask+0x14c>)
 80034e4:	7bdb      	ldrb	r3, [r3, #15]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d813      	bhi.n	8003512 <ModbusTcpSeverTask+0x9e>
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <ModbusTcpSeverTask+0x150>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4798      	blx	r3
 80034f0:	4604      	mov	r4, r0
 80034f2:	2002      	movs	r0, #2
 80034f4:	f7ff fa14 	bl	8002920 <Log_returnLevelString>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80034fe:	9202      	str	r2, [sp, #8]
 8003500:	22ce      	movs	r2, #206	; 0xce
 8003502:	9201      	str	r2, [sp, #4]
 8003504:	4a30      	ldr	r2, [pc, #192]	; (80035c8 <ModbusTcpSeverTask+0x154>)
 8003506:	9200      	str	r2, [sp, #0]
 8003508:	4a30      	ldr	r2, [pc, #192]	; (80035cc <ModbusTcpSeverTask+0x158>)
 800350a:	4621      	mov	r1, r4
 800350c:	4830      	ldr	r0, [pc, #192]	; (80035d0 <ModbusTcpSeverTask+0x15c>)
 800350e:	f020 f9a9 	bl	8023864 <iprintf>


	 ModbusStatusInfo(MODBUS_CLOSED);
 8003512:	2000      	movs	r0, #0
 8003514:	f7ff fddc 	bl	80030d0 <ModbusStatusInfo>


	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 8003518:	7dfb      	ldrb	r3, [r7, #23]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d117      	bne.n	800354e <ModbusTcpSeverTask+0xda>
		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 800351e:	f107 030c 	add.w	r3, r7, #12
 8003522:	4619      	mov	r1, r3
 8003524:	6938      	ldr	r0, [r7, #16]
 8003526:	f010 f899 	bl	801365c <netconn_accept>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d138      	bne.n	80035a2 <ModbusTcpSeverTask+0x12e>
			{
				if (newconn != NULL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d035      	beq.n	80035a2 <ModbusTcpSeverTask+0x12e>
				{
					i = MODBUS_OPEN;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]

					 ModbusStatusInfo(MODBUS_OPEN);
 800353a:	2001      	movs	r0, #1
 800353c:	f7ff fdc8 	bl	80030d0 <ModbusStatusInfo>
					/* Set keepalive options if enabled */
					if (MODBUS_SERVER_KEEP_ALIVE)
					{
						Modbus_activateTcpKeepAlive(newconn, keepidle,keepintvl, keepcnt);
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	2305      	movs	r3, #5
 8003544:	2205      	movs	r2, #5
 8003546:	2105      	movs	r1, #5
 8003548:	f7ff ff52 	bl	80033f0 <Modbus_activateTcpKeepAlive>
 800354c:	e029      	b.n	80035a2 <ModbusTcpSeverTask+0x12e>
				}
			}
		}
		else
		{
			if (newconn != NULL && ModbusHandleConnection(newconn))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d026      	beq.n	80035a2 <ModbusTcpSeverTask+0x12e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fe72 	bl	8003240 <ModbusHandleConnection>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d01f      	beq.n	80035a2 <ModbusTcpSeverTask+0x12e>
			{
				i = MODBUS_CLOSED;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
				netconn_close(newconn);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4618      	mov	r0, r3
 800356a:	f010 fc17 	bl	8013d9c <netconn_close>
				netconn_delete(newconn);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4618      	mov	r0, r3
 8003572:	f00f fff3 	bl	801355c <netconn_delete>
				bytesRx = 0;
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <ModbusTcpSeverTask+0x160>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
				bytesTx = 0;
 800357c:	4b16      	ldr	r3, [pc, #88]	; (80035d8 <ModbusTcpSeverTask+0x164>)
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
				AdapterSSD1306_Refresh(PAGE_1, LINE_1);
 8003582:	2101      	movs	r1, #1
 8003584:	2001      	movs	r0, #1
 8003586:	f7fd fe5b 	bl	8001240 <AdapterSSD1306_Refresh>
				AdapterSSD1306_Refresh(PAGE_1, LINE_2);
 800358a:	2102      	movs	r1, #2
 800358c:	2001      	movs	r0, #1
 800358e:	f7fd fe57 	bl	8001240 <AdapterSSD1306_Refresh>
				ModbusStatusInfo(MODBUS_CLOSED);
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff fd9c 	bl	80030d0 <ModbusStatusInfo>
				Modbus_infoPacket();
 8003598:	f7ff fe12 	bl	80031c0 <Modbus_infoPacket>
				LOG("Connection closed");
 800359c:	480f      	ldr	r0, [pc, #60]	; (80035dc <ModbusTcpSeverTask+0x168>)
 800359e:	f020 f9c7 	bl	8023930 <puts>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 80035a2:	2064      	movs	r0, #100	; 0x64
 80035a4:	f006 f96a 	bl	800987c <osDelay>
		if (i == MODBUS_CLOSED)
 80035a8:	e7b6      	b.n	8003518 <ModbusTcpSeverTask+0xa4>
	}
}
 80035aa:	371c      	adds	r7, #28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	080280bc 	.word	0x080280bc
 80035b4:	0802c1e4 	.word	0x0802c1e4
 80035b8:	080280e4 	.word	0x080280e4
 80035bc:	08028100 	.word	0x08028100
 80035c0:	20001f30 	.word	0x20001f30
 80035c4:	20001f04 	.word	0x20001f04
 80035c8:	0802bf28 	.word	0x0802bf28
 80035cc:	20001f34 	.word	0x20001f34
 80035d0:	08028130 	.word	0x08028130
 80035d4:	20001f2c 	.word	0x20001f2c
 80035d8:	20001f28 	.word	0x20001f28
 80035dc:	08028164 	.word	0x08028164

080035e0 <ModbusServerInit>:



void ModbusServerInit()
{
 80035e0:	b5b0      	push	{r4, r5, r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0

  if (!Log_init (&log_notify, MB_SERVER_LOGNAME, MB_SERVER_LOGLEVEL_DEFAULT))
 80035e6:	2200      	movs	r2, #0
 80035e8:	4910      	ldr	r1, [pc, #64]	; (800362c <ModbusServerInit+0x4c>)
 80035ea:	4811      	ldr	r0, [pc, #68]	; (8003630 <ModbusServerInit+0x50>)
 80035ec:	f7ff fb4c 	bl	8002c88 <Log_init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <ModbusServerInit+0x22>
   {
     printf ("Failed to initialize Notify log "MB_SERVER_LOGNAME""Log_newLine);
 80035fc:	480d      	ldr	r0, [pc, #52]	; (8003634 <ModbusServerInit+0x54>)
 80035fe:	f020 f997 	bl	8023930 <puts>
   }


	/* definition and creation of tcpServerTask */
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <ModbusServerInit+0x58>)
 8003604:	1d3c      	adds	r4, r7, #4
 8003606:	461d      	mov	r5, r3
 8003608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800360a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800360c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003610:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f006 f8e3 	bl	80097e4 <osThreadCreate>
 800361e:	4603      	mov	r3, r0
 8003620:	4a06      	ldr	r2, [pc, #24]	; (800363c <ModbusServerInit+0x5c>)
 8003622:	6013      	str	r3, [r2, #0]
}
 8003624:	bf00      	nop
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bdb0      	pop	{r4, r5, r7, pc}
 800362c:	08028178 	.word	0x08028178
 8003630:	20001f30 	.word	0x20001f30
 8003634:	08028184 	.word	0x08028184
 8003638:	080281c0 	.word	0x080281c0
 800363c:	20001f24 	.word	0x20001f24

08003640 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <MX_RTC_Init+0x44>)
 8003646:	4a10      	ldr	r2, [pc, #64]	; (8003688 <MX_RTC_Init+0x48>)
 8003648:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <MX_RTC_Init+0x44>)
 800364c:	2200      	movs	r2, #0
 800364e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <MX_RTC_Init+0x44>)
 8003652:	227f      	movs	r2, #127	; 0x7f
 8003654:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <MX_RTC_Init+0x44>)
 8003658:	22ff      	movs	r2, #255	; 0xff
 800365a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <MX_RTC_Init+0x44>)
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <MX_RTC_Init+0x44>)
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003668:	4b06      	ldr	r3, [pc, #24]	; (8003684 <MX_RTC_Init+0x44>)
 800366a:	2200      	movs	r2, #0
 800366c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <MX_RTC_Init+0x44>)
 8003670:	f003 fc24 	bl	8006ebc <HAL_RTC_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800367a:	f7ff fd23 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800367e:	bf00      	nop
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	20001f48 	.word	0x20001f48
 8003688:	40002800 	.word	0x40002800

0800368c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	f107 0308 	add.w	r3, r7, #8
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a0c      	ldr	r2, [pc, #48]	; (80036d8 <HAL_RTC_MspInit+0x4c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d111      	bne.n	80036d0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036ac:	2302      	movs	r3, #2
 80036ae:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80036b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036b4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fb1c 	bl	8006cf8 <HAL_RCCEx_PeriphCLKConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80036c6:	f7ff fcfd 	bl	80030c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <HAL_RTC_MspInit+0x50>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40002800 	.word	0x40002800
 80036dc:	42470e3c 	.word	0x42470e3c

080036e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <MX_SPI2_Init+0x64>)
 80036e6:	4a18      	ldr	r2, [pc, #96]	; (8003748 <MX_SPI2_Init+0x68>)
 80036e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036ea:	4b16      	ldr	r3, [pc, #88]	; (8003744 <MX_SPI2_Init+0x64>)
 80036ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <MX_SPI2_Init+0x64>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <MX_SPI2_Init+0x64>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <MX_SPI2_Init+0x64>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <MX_SPI2_Init+0x64>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <MX_SPI2_Init+0x64>)
 800370c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003710:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003712:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <MX_SPI2_Init+0x64>)
 8003714:	2200      	movs	r2, #0
 8003716:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <MX_SPI2_Init+0x64>)
 800371a:	2200      	movs	r2, #0
 800371c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <MX_SPI2_Init+0x64>)
 8003720:	2200      	movs	r2, #0
 8003722:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003724:	4b07      	ldr	r3, [pc, #28]	; (8003744 <MX_SPI2_Init+0x64>)
 8003726:	2200      	movs	r2, #0
 8003728:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <MX_SPI2_Init+0x64>)
 800372c:	220a      	movs	r2, #10
 800372e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003730:	4804      	ldr	r0, [pc, #16]	; (8003744 <MX_SPI2_Init+0x64>)
 8003732:	f003 fd93 	bl	800725c <HAL_SPI_Init>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800373c:	f7ff fcc2 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003740:	bf00      	nop
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20001f68 	.word	0x20001f68
 8003748:	40003800 	.word	0x40003800

0800374c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a28      	ldr	r2, [pc, #160]	; (800380c <HAL_SPI_MspInit+0xc0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d14a      	bne.n	8003804 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a26      	ldr	r2, [pc, #152]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 8003778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b20      	ldr	r3, [pc, #128]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a1f      	ldr	r2, [pc, #124]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 8003794:	f043 0304 	orr.w	r3, r3, #4
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b1d      	ldr	r3, [pc, #116]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0304 	and.w	r3, r3, #4
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a18      	ldr	r2, [pc, #96]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 80037b0:	f043 0302 	orr.w	r3, r3, #2
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_SPI_MspInit+0xc4>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037c2:	230c      	movs	r3, #12
 80037c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c6:	2302      	movs	r3, #2
 80037c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037d2:	2305      	movs	r3, #5
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d6:	f107 0314 	add.w	r3, r7, #20
 80037da:	4619      	mov	r1, r3
 80037dc:	480d      	ldr	r0, [pc, #52]	; (8003814 <HAL_SPI_MspInit+0xc8>)
 80037de:	f001 ff6b 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e8:	2302      	movs	r3, #2
 80037ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037f0:	2303      	movs	r3, #3
 80037f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037f4:	2305      	movs	r3, #5
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037f8:	f107 0314 	add.w	r3, r7, #20
 80037fc:	4619      	mov	r1, r3
 80037fe:	4806      	ldr	r0, [pc, #24]	; (8003818 <HAL_SPI_MspInit+0xcc>)
 8003800:	f001 ff5a 	bl	80056b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003804:	bf00      	nop
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40003800 	.word	0x40003800
 8003810:	40023800 	.word	0x40023800
 8003814:	40020800 	.word	0x40020800
 8003818:	40020400 	.word	0x40020400

0800381c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	4b12      	ldr	r3, [pc, #72]	; (8003870 <HAL_MspInit+0x54>)
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	4a11      	ldr	r2, [pc, #68]	; (8003870 <HAL_MspInit+0x54>)
 800382c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003830:	6453      	str	r3, [r2, #68]	; 0x44
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_MspInit+0x54>)
 8003834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383a:	607b      	str	r3, [r7, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	603b      	str	r3, [r7, #0]
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <HAL_MspInit+0x54>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <HAL_MspInit+0x54>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_MspInit+0x54>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	210f      	movs	r1, #15
 800385e:	f06f 0001 	mvn.w	r0, #1
 8003862:	f000 fca3 	bl	80041ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800

08003874 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	; 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	4b33      	ldr	r3, [pc, #204]	; (8003958 <HAL_InitTick+0xe4>)
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	4a32      	ldr	r2, [pc, #200]	; (8003958 <HAL_InitTick+0xe4>)
 800388e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003892:	6413      	str	r3, [r2, #64]	; 0x40
 8003894:	4b30      	ldr	r3, [pc, #192]	; (8003958 <HAL_InitTick+0xe4>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038a0:	f107 0210 	add.w	r2, r7, #16
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 f9f2 	bl	8006c94 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80038b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80038ba:	f003 f9c3 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 80038be:	6378      	str	r0, [r7, #52]	; 0x34
 80038c0:	e004      	b.n	80038cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80038c2:	f003 f9bf 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 80038c6:	4603      	mov	r3, r0
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	4a23      	ldr	r2, [pc, #140]	; (800395c <HAL_InitTick+0xe8>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	0c9b      	lsrs	r3, r3, #18
 80038d6:	3b01      	subs	r3, #1
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <HAL_InitTick+0xec>)
 80038dc:	4a21      	ldr	r2, [pc, #132]	; (8003964 <HAL_InitTick+0xf0>)
 80038de:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80038e0:	4b1f      	ldr	r3, [pc, #124]	; (8003960 <HAL_InitTick+0xec>)
 80038e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038e6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80038e8:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <HAL_InitTick+0xec>)
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80038ee:	4b1c      	ldr	r3, [pc, #112]	; (8003960 <HAL_InitTick+0xec>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f4:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <HAL_InitTick+0xec>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038fa:	4b19      	ldr	r3, [pc, #100]	; (8003960 <HAL_InitTick+0xec>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003900:	4817      	ldr	r0, [pc, #92]	; (8003960 <HAL_InitTick+0xec>)
 8003902:	f004 fa81 	bl	8007e08 <HAL_TIM_Base_Init>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800390c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11b      	bne.n	800394c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003914:	4812      	ldr	r0, [pc, #72]	; (8003960 <HAL_InitTick+0xec>)
 8003916:	f004 fad1 	bl	8007ebc <HAL_TIM_Base_Start_IT>
 800391a:	4603      	mov	r3, r0
 800391c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003924:	2b00      	cmp	r3, #0
 8003926:	d111      	bne.n	800394c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003928:	202d      	movs	r0, #45	; 0x2d
 800392a:	f000 fc5b 	bl	80041e4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b0f      	cmp	r3, #15
 8003932:	d808      	bhi.n	8003946 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003934:	2200      	movs	r2, #0
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	202d      	movs	r0, #45	; 0x2d
 800393a:	f000 fc37 	bl	80041ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_InitTick+0xf4>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	e002      	b.n	800394c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800394c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003950:	4618      	mov	r0, r3
 8003952:	3738      	adds	r7, #56	; 0x38
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	431bde83 	.word	0x431bde83
 8003960:	20001fc0 	.word	0x20001fc0
 8003964:	40002000 	.word	0x40002000
 8003968:	2000000c 	.word	0x2000000c

0800396c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003970:	e7fe      	b.n	8003970 <NMI_Handler+0x4>

08003972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <HardFault_Handler+0x4>

08003978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800397c:	e7fe      	b.n	800397c <MemManage_Handler+0x4>

0800397e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003982:	e7fe      	b.n	8003982 <BusFault_Handler+0x4>

08003984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <UsageFault_Handler+0x4>

0800398a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800399e:	f004 fafd 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20001fc0 	.word	0x20001fc0

080039ac <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80039b0:	4802      	ldr	r0, [pc, #8]	; (80039bc <ETH_IRQHandler+0x10>)
 80039b2:	f000 ffab 	bl	800490c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20006b7c 	.word	0x20006b7c

080039c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return 1;
 80039c4:	2301      	movs	r3, #1
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <_kill>:

int _kill(int pid, int sig)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80039da:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <_kill+0x20>)
 80039dc:	2216      	movs	r2, #22
 80039de:	601a      	str	r2, [r3, #0]
  return -1;
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	200164c4 	.word	0x200164c4

080039f4 <_exit>:

void _exit (int status)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80039fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ffe5 	bl	80039d0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003a06:	e7fe      	b.n	8003a06 <_exit+0x12>

08003a08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	e00a      	b.n	8003a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003a1a:	f3af 8000 	nop.w
 8003a1e:	4601      	mov	r1, r0
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	1c5a      	adds	r2, r3, #1
 8003a24:	60ba      	str	r2, [r7, #8]
 8003a26:	b2ca      	uxtb	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	dbf0      	blt.n	8003a1a <_read+0x12>
  }

  return len;
 8003a38:	687b      	ldr	r3, [r7, #4]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b086      	sub	sp, #24
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e009      	b.n	8003a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	60ba      	str	r2, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fa73 	bl	8002f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	3301      	adds	r3, #1
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	dbf1      	blt.n	8003a54 <_write+0x12>
  }
  return len;
 8003a70:	687b      	ldr	r3, [r7, #4]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <_close>:

int _close(int file)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aa2:	605a      	str	r2, [r3, #4]
  return 0;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <_isatty>:

int _isatty(int file)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b083      	sub	sp, #12
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aec:	4a14      	ldr	r2, [pc, #80]	; (8003b40 <_sbrk+0x5c>)
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <_sbrk+0x60>)
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <_sbrk+0x64>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d102      	bne.n	8003b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <_sbrk+0x64>)
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <_sbrk+0x68>)
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <_sbrk+0x64>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d205      	bcs.n	8003b20 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <_sbrk+0x6c>)
 8003b16:	220c      	movs	r2, #12
 8003b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b1e:	e009      	b.n	8003b34 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b20:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <_sbrk+0x64>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <_sbrk+0x64>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <_sbrk+0x64>)
 8003b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20020000 	.word	0x20020000
 8003b44:	00000400 	.word	0x00000400
 8003b48:	2000200c 	.word	0x2000200c
 8003b4c:	200164d0 	.word	0x200164d0
 8003b50:	200164c4 	.word	0x200164c4

08003b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <SystemInit+0x20>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5e:	4a05      	ldr	r2, [pc, #20]	; (8003b74 <SystemInit+0x20>)
 8003b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b7e:	4a12      	ldr	r2, [pc, #72]	; (8003bc8 <MX_USART1_UART_Init+0x50>)
 8003b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b82:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003b96:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003b9e:	220c      	movs	r2, #12
 8003ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <MX_USART1_UART_Init+0x4c>)
 8003bb0:	f004 fbcc 	bl	800834c <HAL_UART_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003bba:	f7ff fa83 	bl	80030c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20002010 	.word	0x20002010
 8003bc8:	40011000 	.word	0x40011000

08003bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 0314 	add.w	r3, r7, #20
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_UART_MspInit+0x84>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d12c      	bne.n	8003c48 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	4b18      	ldr	r3, [pc, #96]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	4a17      	ldr	r2, [pc, #92]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003bf8:	f043 0310 	orr.w	r3, r3, #16
 8003bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfe:	4b15      	ldr	r3, [pc, #84]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6313      	str	r3, [r2, #48]	; 0x30
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <HAL_UART_MspInit+0x88>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003c26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c34:	2303      	movs	r3, #3
 8003c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c38:	2307      	movs	r3, #7
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3c:	f107 0314 	add.w	r3, r7, #20
 8003c40:	4619      	mov	r1, r3
 8003c42:	4805      	ldr	r0, [pc, #20]	; (8003c58 <HAL_UART_MspInit+0x8c>)
 8003c44:	f001 fd38 	bl	80056b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003c48:	bf00      	nop
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40020000 	.word	0x40020000

08003c5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c60:	f7ff ff78 	bl	8003b54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c66:	490d      	ldr	r1, [pc, #52]	; (8003c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c68:	4a0d      	ldr	r2, [pc, #52]	; (8003ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c6c:	e002      	b.n	8003c74 <LoopCopyDataInit>

08003c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c72:	3304      	adds	r3, #4

08003c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c78:	d3f9      	bcc.n	8003c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c7c:	4c0a      	ldr	r4, [pc, #40]	; (8003ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c80:	e001      	b.n	8003c86 <LoopFillZerobss>

08003c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c84:	3204      	adds	r2, #4

08003c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c88:	d3fb      	bcc.n	8003c82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c8a:	f021 f8dd 	bl	8024e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c8e:	f7ff f8cb 	bl	8002e28 <main>
  bx  lr    
 8003c92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c9c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8003ca0:	0802cf14 	.word	0x0802cf14
  ldr r2, =_sbss
 8003ca4:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8003ca8:	200164cc 	.word	0x200164cc

08003cac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cac:	e7fe      	b.n	8003cac <ADC_IRQHandler>

08003cae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
 8003cb6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <DP83848_RegisterBusIO+0x28>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <DP83848_RegisterBusIO+0x28>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <DP83848_RegisterBusIO+0x28>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8003cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cda:	e014      	b.n	8003d06 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d17c      	bne.n	8003e2c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2220      	movs	r2, #32
 8003d44:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e01c      	b.n	8003d86 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	f107 0208 	add.w	r2, r7, #8
 8003d54:	2119      	movs	r1, #25
 8003d56:	6978      	ldr	r0, [r7, #20]
 8003d58:	4798      	blx	r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	da03      	bge.n	8003d68 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8003d60:	f06f 0304 	mvn.w	r3, #4
 8003d64:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003d66:	e00b      	b.n	8003d80 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f003 031f 	and.w	r3, r3, #31
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d105      	bne.n	8003d80 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
         break;
 8003d7e:	e005      	b.n	8003d8c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	3301      	adds	r3, #1
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b1f      	cmp	r3, #31
 8003d8a:	d9df      	bls.n	8003d4c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b1f      	cmp	r3, #31
 8003d92:	d902      	bls.n	8003d9a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8003d94:	f06f 0302 	mvn.w	r3, #2
 8003d98:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d145      	bne.n	8003e2c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6810      	ldr	r0, [r2, #0]
 8003da8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dac:	2100      	movs	r1, #0
 8003dae:	4798      	blx	r3
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	db37      	blt.n	8003e26 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6810      	ldr	r0, [r2, #0]
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4798      	blx	r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db28      	blt.n	8003e1e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4798      	blx	r3
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003dd6:	e01c      	b.n	8003e12 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	4798      	blx	r3
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dea:	d80e      	bhi.n	8003e0a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6810      	ldr	r0, [r2, #0]
 8003df4:	f107 0208 	add.w	r2, r7, #8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4798      	blx	r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da07      	bge.n	8003e12 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8003e02:	f06f 0304 	mvn.w	r3, #4
 8003e06:	613b      	str	r3, [r7, #16]
                 break;
 8003e08:	e010      	b.n	8003e2c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8003e0a:	f06f 0301 	mvn.w	r3, #1
 8003e0e:	613b      	str	r3, [r7, #16]
               break;
 8003e10:	e00c      	b.n	8003e2c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1dd      	bne.n	8003dd8 <DP83848_Init+0xc6>
 8003e1c:	e006      	b.n	8003e2c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8003e1e:	f06f 0304 	mvn.w	r3, #4
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e002      	b.n	8003e2c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8003e26:	f06f 0303 	mvn.w	r3, #3
 8003e2a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d112      	bne.n	8003e58 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	4798      	blx	r3
 8003e38:	4603      	mov	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8003e3c:	bf00      	nop
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4798      	blx	r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003e50:	d9f5      	bls.n	8003e3e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	605a      	str	r2, [r3, #4]
   }

   return status;
 8003e58:	693b      	ldr	r3, [r7, #16]
 }
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6810      	ldr	r0, [r2, #0]
 8003e76:	f107 020c 	add.w	r2, r7, #12
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4798      	blx	r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	da02      	bge.n	8003e8a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8003e84:	f06f 0304 	mvn.w	r3, #4
 8003e88:	e06e      	b.n	8003f68 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6810      	ldr	r0, [r2, #0]
 8003e92:	f107 020c 	add.w	r2, r7, #12
 8003e96:	2101      	movs	r1, #1
 8003e98:	4798      	blx	r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	da02      	bge.n	8003ea6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8003ea0:	f06f 0304 	mvn.w	r3, #4
 8003ea4:	e060      	b.n	8003f68 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e059      	b.n	8003f68 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6810      	ldr	r0, [r2, #0]
 8003ebc:	f107 020c 	add.w	r2, r7, #12
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4798      	blx	r3
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	da02      	bge.n	8003ed0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8003eca:	f06f 0304 	mvn.w	r3, #4
 8003ece:	e04b      	b.n	8003f68 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d11b      	bne.n	8003f12 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d006      	beq.n	8003ef2 <DP83848_GetLinkState+0x90>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e03a      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e033      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	e02c      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e02a      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6810      	ldr	r0, [r2, #0]
 8003f1a:	f107 020c 	add.w	r2, r7, #12
 8003f1e:	2110      	movs	r1, #16
 8003f20:	4798      	blx	r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da02      	bge.n	8003f2e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8003f28:	f06f 0304 	mvn.w	r3, #4
 8003f2c:	e01c      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8003f38:	2306      	movs	r3, #6
 8003f3a:	e015      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 0306 	and.w	r3, r3, #6
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d101      	bne.n	8003f4a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e00e      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f003 0306 	and.w	r3, r3, #6
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e007      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0306 	and.w	r3, r3, #6
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d101      	bne.n	8003f66 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8003f62:	2304      	movs	r3, #4
 8003f64:	e000      	b.n	8003f68 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8003f66:	2305      	movs	r3, #5
    }
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f74:	4b0e      	ldr	r3, [pc, #56]	; (8003fb0 <HAL_Init+0x40>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <HAL_Init+0x40>)
 8003f7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_Init+0x40>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0a      	ldr	r2, [pc, #40]	; (8003fb0 <HAL_Init+0x40>)
 8003f86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f8c:	4b08      	ldr	r3, [pc, #32]	; (8003fb0 <HAL_Init+0x40>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <HAL_Init+0x40>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f98:	2003      	movs	r0, #3
 8003f9a:	f000 f8fc 	bl	8004196 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f9e:	200f      	movs	r0, #15
 8003fa0:	f7ff fc68 	bl	8003874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fa4:	f7ff fc3a 	bl	800381c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00

08003fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <HAL_IncTick+0x20>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_IncTick+0x24>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <HAL_IncTick+0x24>)
 8003fc6:	6013      	str	r3, [r2, #0]
}
 8003fc8:	bf00      	nop
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	20000010 	.word	0x20000010
 8003fd8:	20002058 	.word	0x20002058

08003fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  return uwTick;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <HAL_GetTick+0x14>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20002058 	.word	0x20002058

08003ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ffc:	f7ff ffee 	bl	8003fdc <HAL_GetTick>
 8004000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800400c:	d005      	beq.n	800401a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800400e:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <HAL_Delay+0x44>)
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4413      	add	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800401a:	bf00      	nop
 800401c:	f7ff ffde 	bl	8003fdc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	429a      	cmp	r2, r3
 800402a:	d8f7      	bhi.n	800401c <HAL_Delay+0x28>
  {
  }
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000010 	.word	0x20000010

0800403c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800404c:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004058:	4013      	ands	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800406e:	4a04      	ldr	r2, [pc, #16]	; (8004080 <__NVIC_SetPriorityGrouping+0x44>)
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	60d3      	str	r3, [r2, #12]
}
 8004074:	bf00      	nop
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	e000ed00 	.word	0xe000ed00

08004084 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004084:	b480      	push	{r7}
 8004086:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <__NVIC_GetPriorityGrouping+0x18>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	0a1b      	lsrs	r3, r3, #8
 800408e:	f003 0307 	and.w	r3, r3, #7
}
 8004092:	4618      	mov	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	e000ed00 	.word	0xe000ed00

080040a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	4603      	mov	r3, r0
 80040a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	db0b      	blt.n	80040ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	f003 021f 	and.w	r2, r3, #31
 80040b8:	4907      	ldr	r1, [pc, #28]	; (80040d8 <__NVIC_EnableIRQ+0x38>)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2001      	movs	r0, #1
 80040c2:	fa00 f202 	lsl.w	r2, r0, r2
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	e000e100 	.word	0xe000e100

080040dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	6039      	str	r1, [r7, #0]
 80040e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	db0a      	blt.n	8004106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	490c      	ldr	r1, [pc, #48]	; (8004128 <__NVIC_SetPriority+0x4c>)
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	0112      	lsls	r2, r2, #4
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	440b      	add	r3, r1
 8004100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004104:	e00a      	b.n	800411c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	4908      	ldr	r1, [pc, #32]	; (800412c <__NVIC_SetPriority+0x50>)
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	3b04      	subs	r3, #4
 8004114:	0112      	lsls	r2, r2, #4
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	440b      	add	r3, r1
 800411a:	761a      	strb	r2, [r3, #24]
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	e000e100 	.word	0xe000e100
 800412c:	e000ed00 	.word	0xe000ed00

08004130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	; 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f1c3 0307 	rsb	r3, r3, #7
 800414a:	2b04      	cmp	r3, #4
 800414c:	bf28      	it	cs
 800414e:	2304      	movcs	r3, #4
 8004150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3304      	adds	r3, #4
 8004156:	2b06      	cmp	r3, #6
 8004158:	d902      	bls.n	8004160 <NVIC_EncodePriority+0x30>
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	3b03      	subs	r3, #3
 800415e:	e000      	b.n	8004162 <NVIC_EncodePriority+0x32>
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	fa02 f303 	lsl.w	r3, r2, r3
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004178:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa01 f303 	lsl.w	r3, r1, r3
 8004182:	43d9      	mvns	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004188:	4313      	orrs	r3, r2
         );
}
 800418a:	4618      	mov	r0, r3
 800418c:	3724      	adds	r7, #36	; 0x24
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr

08004196 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ff4c 	bl	800403c <__NVIC_SetPriorityGrouping>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
 80041b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041be:	f7ff ff61 	bl	8004084 <__NVIC_GetPriorityGrouping>
 80041c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	68b9      	ldr	r1, [r7, #8]
 80041c8:	6978      	ldr	r0, [r7, #20]
 80041ca:	f7ff ffb1 	bl	8004130 <NVIC_EncodePriority>
 80041ce:	4602      	mov	r2, r0
 80041d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d4:	4611      	mov	r1, r2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff ff80 	bl	80040dc <__NVIC_SetPriority>
}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff ff54 	bl	80040a0 <__NVIC_EnableIRQ>
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e06c      	b.n	80042ec <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2223      	movs	r2, #35	; 0x23
 8004220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f005 f897 	bl	8009358 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <HAL_ETH_Init+0xf4>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <HAL_ETH_Init+0xf4>)
 8004234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004238:	6453      	str	r3, [r2, #68]	; 0x44
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <HAL_ETH_Init+0xf4>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004246:	4b2c      	ldr	r3, [pc, #176]	; (80042f8 <HAL_ETH_Init+0xf8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a2b      	ldr	r2, [pc, #172]	; (80042f8 <HAL_ETH_Init+0xf8>)
 800424c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004250:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <HAL_ETH_Init+0xf8>)
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4927      	ldr	r1, [pc, #156]	; (80042f8 <HAL_ETH_Init+0xf8>)
 800425c:	4313      	orrs	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004260:	4b25      	ldr	r3, [pc, #148]	; (80042f8 <HAL_ETH_Init+0xf8>)
 8004262:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6812      	ldr	r2, [r2, #0]
 8004272:	f043 0301 	orr.w	r3, r3, #1
 8004276:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800427a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800427c:	f7ff feae 	bl	8003fdc <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004282:	e011      	b.n	80042a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004284:	f7ff feaa 	bl	8003fdc <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004292:	d909      	bls.n	80042a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2204      	movs	r2, #4
 8004298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	22e0      	movs	r2, #224	; 0xe0
 80042a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e021      	b.n	80042ec <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e4      	bne.n	8004284 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 ff56 	bl	800516c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fffd 	bl	80052c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f001 f853 	bl	8005372 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	461a      	mov	r2, r3
 80042d2:	2100      	movs	r1, #0
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 ffbb 	bl	8005250 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2210      	movs	r2, #16
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3710      	adds	r7, #16
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40013800 	.word	0x40013800

080042fc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430a:	2b10      	cmp	r3, #16
 800430c:	d17f      	bne.n	800440e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2223      	movs	r2, #35	; 0x23
 8004312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800432a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800433c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004340:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004354:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2204      	movs	r2, #4
 800435c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f9f8 	bl	8004754 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f042 0208 	orr.w	r2, r2, #8
 8004372:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800437c:	2001      	movs	r0, #1
 800437e:	f7ff fe39 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0204 	orr.w	r2, r2, #4
 8004398:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043a2:	2001      	movs	r0, #1
 80043a4:	f7ff fe26 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fd7c 	bl	8004eae <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e4:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80043f8:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80043fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004400:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2223      	movs	r2, #35	; 0x23
 8004406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004426:	2b23      	cmp	r3, #35	; 0x23
 8004428:	d170      	bne.n	800450c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2223      	movs	r2, #35	; 0x23
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6812      	ldr	r2, [r2, #0]
 8004440:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8004444:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8004448:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800444c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004460:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004464:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6812      	ldr	r2, [r2, #0]
 8004474:	f023 0302 	bic.w	r3, r3, #2
 8004478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800447c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0204 	bic.w	r2, r2, #4
 800448c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004496:	2001      	movs	r0, #1
 8004498:	f7ff fdac 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fd02 	bl	8004eae <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 0208 	bic.w	r2, r2, #8
 80044b8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f7ff fd96 	bl	8003ff4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00e      	b.n	80044f4 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	3212      	adds	r2, #18
 80044dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044e0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3301      	adds	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d9ed      	bls.n	80044d6 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2210      	movs	r2, #16
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d109      	bne.n	800453a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452c:	f043 0201 	orr.w	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e045      	b.n	80045c6 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004540:	2b23      	cmp	r3, #35	; 0x23
 8004542:	d13f      	bne.n	80045c4 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800454c:	2201      	movs	r2, #1
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 ff7b 	bl	800544c <ETH_Prepare_Tx_Descriptors>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f043 0202 	orr.w	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e02a      	b.n	80045c6 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004570:	f3bf 8f4f 	dsb	sy
}
 8004574:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	629a      	str	r2, [r3, #40]	; 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	2b03      	cmp	r3, #3
 8004586:	d904      	bls.n	8004592 <HAL_ETH_Transmit_IT+0x7c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	1f1a      	subs	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0304 	and.w	r3, r3, #4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ac:	461a      	mov	r2, r3
 80045ae:	2304      	movs	r3, #4
 80045b0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	461a      	mov	r2, r3
 80045bc:	2300      	movs	r3, #0
 80045be:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0a8      	b.n	800474c <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004600:	2b23      	cmp	r3, #35	; 0x23
 8004602:	d001      	beq.n	8004608 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0a1      	b.n	800474c <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	3212      	adds	r2, #18
 8004614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004618:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461e:	f1c3 0304 	rsb	r3, r3, #4
 8004622:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004624:	e06a      	b.n	80046fc <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462e:	2b00      	cmp	r3, #0
 8004630:	d007      	beq.n	8004642 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	69da      	ldr	r2, [r3, #28]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_ETH_ReadData+0x88>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d040      	beq.n	80046d8 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800468a:	3b04      	subs	r3, #4
 800468c:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	689a      	ldr	r2, [r3, #8]
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80046b2:	461a      	mov	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f005 f808 	bl	80096cc <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	2200      	movs	r2, #0
 80046d6:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	3301      	adds	r3, #1
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d902      	bls.n	80046ea <HAL_ETH_ReadData+0x11c>
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3b04      	subs	r3, #4
 80046e8:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	3212      	adds	r2, #18
 80046f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046f4:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	3301      	adds	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004700:	2b00      	cmp	r3, #0
 8004702:	db06      	blt.n	8004712 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	d202      	bcs.n	8004712 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d089      	beq.n	8004626 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	441a      	add	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f814 	bl	8004754 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d108      	bne.n	800474a <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e000      	b.n	800474c <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004760:	2301      	movs	r3, #1
 8004762:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004768:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	3212      	adds	r2, #18
 8004770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004774:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800477a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800477c:	e03d      	b.n	80047fa <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d112      	bne.n	80047ac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4618      	mov	r0, r3
 800478c:	f004 ff6e 	bl	800966c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	74fb      	strb	r3, [r7, #19]
 800479a:	e007      	b.n	80047ac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	461a      	mov	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	461a      	mov	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d023      	beq.n	80047fa <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4a24      	ldr	r2, [pc, #144]	; (8004850 <ETH_UpdateDescriptor+0xfc>)
 80047be:	605a      	str	r2, [r3, #4]
 80047c0:	e003      	b.n	80047ca <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80047c8:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	3301      	adds	r3, #1
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d902      	bls.n	80047e8 <ETH_UpdateDescriptor+0x94>
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	3b04      	subs	r3, #4
 80047e6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	3212      	adds	r2, #18
 80047ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f2:	617b      	str	r3, [r7, #20]
      desccount--;
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <ETH_UpdateDescriptor+0xb2>
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1bb      	bne.n	800477e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	429a      	cmp	r2, r3
 800480e:	d01a      	beq.n	8004846 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	3301      	adds	r3, #1
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800481a:	f3bf 8f5f 	dmb	sy
}
 800481e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6919      	ldr	r1, [r3, #16]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	18ca      	adds	r2, r1, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004838:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69fa      	ldr	r2, [r7, #28]
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004846:	bf00      	nop
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	80004600 	.word	0x80004600

08004854 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3318      	adds	r3, #24
 8004860:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004872:	e03f      	b.n	80048f4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004874:	2301      	movs	r3, #1
 8004876:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	3b01      	subs	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3304      	adds	r3, #4
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d028      	beq.n	80048f4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68d9      	ldr	r1, [r3, #12]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	440b      	add	r3, r1
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	db1b      	blt.n	80048f0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	3304      	adds	r3, #4
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f004 ff41 	bl	800974c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3304      	adds	r3, #4
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	2200      	movs	r2, #0
 80048d6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80048ee:	e001      	b.n	80048f4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_ETH_ReleaseTxPacket+0xac>
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1b9      	bne.n	8004874 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004922:	2b40      	cmp	r3, #64	; 0x40
 8004924:	d112      	bne.n	800494c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d109      	bne.n	800494c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004940:	461a      	mov	r2, r3
 8004942:	4b50      	ldr	r3, [pc, #320]	; (8004a84 <HAL_ETH_IRQHandler+0x178>)
 8004944:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f004 fa4e 	bl	8008de8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b01      	cmp	r3, #1
 800495c:	d113      	bne.n	8004986 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b01      	cmp	r3, #1
 800496e:	d10a      	bne.n	8004986 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004978:	461a      	mov	r2, r3
 800497a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800497e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f004 fa41 	bl	8008e08 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	d14c      	bne.n	8004a34 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ac:	d142      	bne.n	8004a34 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b4:	f043 0208 	orr.w	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d0:	d11a      	bne.n	8004a08 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049da:	695a      	ldr	r2, [r3, #20]
 80049dc:	4b2a      	ldr	r3, [pc, #168]	; (8004a88 <HAL_ETH_IRQHandler+0x17c>)
 80049de:	4013      	ands	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80049f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049fc:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	22e0      	movs	r2, #224	; 0xe0
 8004a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004a06:	e012      	b.n	8004a2e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	f248 6380 	movw	r3, #34432	; 0x8680
 8004a16:	4013      	ands	r3, r2
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a26:	461a      	mov	r2, r3
 8004a28:	f248 6380 	movw	r3, #34432	; 0x8680
 8004a2c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f004 f9fa 	bl	8008e28 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b08      	cmp	r3, #8
 8004a40:	d10e      	bne.n	8004a60 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f81c 	bl	8004a90 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004a60:	4b0a      	ldr	r3, [pc, #40]	; (8004a8c <HAL_ETH_IRQHandler+0x180>)
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <HAL_ETH_IRQHandler+0x180>)
 8004a6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a72:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f815 	bl	8004aa4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	00010040 	.word	0x00010040
 8004a88:	007e2000 	.word	0x007e2000
 8004a8c:	40013c00 	.word	0x40013c00

08004a90 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f003 031c 	and.w	r3, r3, #28
 8004ad4:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	02db      	lsls	r3, r3, #11
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0302 	bic.w	r3, r3, #2
 8004af6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f043 0301 	orr.w	r3, r3, #1
 8004afe:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004b08:	f7ff fa68 	bl	8003fdc <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b0e:	e00d      	b.n	8004b2c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004b10:	f7ff fa64 	bl	8003fdc <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d301      	bcc.n	8004b24 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e010      	b.n	8004b46 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ec      	bne.n	8004b10 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b086      	sub	sp, #24
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f003 031c 	and.w	r3, r3, #28
 8004b6a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	02db      	lsls	r3, r3, #11
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	019b      	lsls	r3, r3, #6
 8004b7c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba8:	f7ff fa18 	bl	8003fdc <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bae:	e00d      	b.n	8004bcc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004bb0:	f7ff fa14 	bl	8003fdc <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbe:	d301      	bcc.n	8004bc4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e009      	b.n	8004bd8 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ec      	bne.n	8004bb0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e0d9      	b.n	8004da8 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	bf0c      	ite	eq
 8004c62:	2301      	moveq	r3, #1
 8004c64:	2300      	movne	r3, #0
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	461a      	mov	r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	bf0c      	ite	eq
 8004cb2:	2301      	moveq	r3, #1
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	bf14      	ite	ne
 8004d0e:	2301      	movne	r3, #1
 8004d10:	2300      	moveq	r3, #0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e00b      	b.n	8004de0 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d105      	bne.n	8004dde <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f88f 	bl	8004ef8 <ETH_SetMACConfig>

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 031c 	bic.w	r3, r3, #28
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004e00:	f001 ff14 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8004e04:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d908      	bls.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x38>
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a1c      	ldr	r2, [pc, #112]	; (8004e84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d804      	bhi.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f043 0308 	orr.w	r3, r3, #8
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e027      	b.n	8004e70 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d908      	bls.n	8004e3a <HAL_ETH_SetMDIOClockRange+0x52>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	4a17      	ldr	r2, [pc, #92]	; (8004e88 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d204      	bcs.n	8004e3a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f043 030c 	orr.w	r3, r3, #12
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e01a      	b.n	8004e70 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d303      	bcc.n	8004e4a <HAL_ETH_SetMDIOClockRange+0x62>
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d911      	bls.n	8004e6e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d908      	bls.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a0e      	ldr	r2, [pc, #56]	; (8004e90 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d804      	bhi.n	8004e64 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
 8004e62:	e005      	b.n	8004e70 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f043 0310 	orr.w	r3, r3, #16
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e000      	b.n	8004e70 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004e6e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	611a      	str	r2, [r3, #16]
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	01312cff 	.word	0x01312cff
 8004e84:	02160ebf 	.word	0x02160ebf
 8004e88:	03938700 	.word	0x03938700
 8004e8c:	05f5e0ff 	.word	0x05f5e0ff
 8004e90:	08f0d17f 	.word	0x08f0d17f

08004e94 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	370c      	adds	r7, #12
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ecc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ed0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ede:	2001      	movs	r0, #1
 8004ee0:	f7ff f888 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eee:	6193      	str	r3, [r2, #24]
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4b51      	ldr	r3, [pc, #324]	; (8005054 <ETH_SetMACConfig+0x15c>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	7c1b      	ldrb	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d102      	bne.n	8004f20 <ETH_SetMACConfig+0x28>
 8004f1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f1e:	e000      	b.n	8004f22 <ETH_SetMACConfig+0x2a>
 8004f20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	7c5b      	ldrb	r3, [r3, #17]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <ETH_SetMACConfig+0x38>
 8004f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f2e:	e000      	b.n	8004f32 <ETH_SetMACConfig+0x3a>
 8004f30:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004f38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	7fdb      	ldrb	r3, [r3, #31]
 8004f3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004f40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004f46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f48:	683a      	ldr	r2, [r7, #0]
 8004f4a:	7f92      	ldrb	r2, [r2, #30]
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d102      	bne.n	8004f56 <ETH_SetMACConfig+0x5e>
 8004f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f54:	e000      	b.n	8004f58 <ETH_SetMACConfig+0x60>
 8004f56:	2200      	movs	r2, #0
                        macconf->Speed |
 8004f58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	7f1b      	ldrb	r3, [r3, #28]
 8004f5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004f60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004f66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	791b      	ldrb	r3, [r3, #4]
 8004f6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004f6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	d102      	bne.n	8004f80 <ETH_SetMACConfig+0x88>
 8004f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7e:	e000      	b.n	8004f82 <ETH_SetMACConfig+0x8a>
 8004f80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004f82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	7bdb      	ldrb	r3, [r3, #15]
 8004f88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004f8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004f90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f7ff f81e 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004fce:	4013      	ands	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004fde:	2a00      	cmp	r2, #0
 8004fe0:	d101      	bne.n	8004fe6 <ETH_SetMACConfig+0xee>
 8004fe2:	2280      	movs	r2, #128	; 0x80
 8004fe4:	e000      	b.n	8004fe8 <ETH_SetMACConfig+0xf0>
 8004fe6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004fe8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004fee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004ff6:	2a01      	cmp	r2, #1
 8004ff8:	d101      	bne.n	8004ffe <ETH_SetMACConfig+0x106>
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	e000      	b.n	8005000 <ETH_SetMACConfig+0x108>
 8004ffe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005000:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005008:	2a01      	cmp	r2, #1
 800500a:	d101      	bne.n	8005010 <ETH_SetMACConfig+0x118>
 800500c:	2204      	movs	r2, #4
 800500e:	e000      	b.n	8005012 <ETH_SetMACConfig+0x11a>
 8005010:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005012:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800501a:	2a01      	cmp	r2, #1
 800501c:	d101      	bne.n	8005022 <ETH_SetMACConfig+0x12a>
 800501e:	2202      	movs	r2, #2
 8005020:	e000      	b.n	8005024 <ETH_SetMACConfig+0x12c>
 8005022:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005024:	4313      	orrs	r3, r2
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800503c:	2001      	movs	r0, #1
 800503e:	f7fe ffd9 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	619a      	str	r2, [r3, #24]
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	ff20810f 	.word	0xff20810f

08005058 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	4b3d      	ldr	r3, [pc, #244]	; (8005168 <ETH_SetDMAConfig+0x110>)
 8005072:	4013      	ands	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	7b1b      	ldrb	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <ETH_SetDMAConfig+0x2c>
 800507e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005082:	e000      	b.n	8005086 <ETH_SetDMAConfig+0x2e>
 8005084:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	7b5b      	ldrb	r3, [r3, #13]
 800508a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800508c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	7f52      	ldrb	r2, [r2, #29]
 8005092:	2a00      	cmp	r2, #0
 8005094:	d102      	bne.n	800509c <ETH_SetDMAConfig+0x44>
 8005096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800509a:	e000      	b.n	800509e <ETH_SetDMAConfig+0x46>
 800509c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800509e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	7b9b      	ldrb	r3, [r3, #14]
 80050a4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80050a6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80050ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	7f1b      	ldrb	r3, [r3, #28]
 80050b2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80050b4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	7f9b      	ldrb	r3, [r3, #30]
 80050ba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80050bc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80050c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80050ca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80050cc:	4313      	orrs	r3, r2
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050dc:	461a      	mov	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80050ee:	2001      	movs	r0, #1
 80050f0:	f7fe ff80 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fc:	461a      	mov	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800510c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005112:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005118:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005120:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005122:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005128:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800512a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005130:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800513a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800513e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800514c:	2001      	movs	r0, #1
 800514e:	f7fe ff51 	bl	8003ff4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6013      	str	r3, [r2, #0]
}
 8005160:	bf00      	nop
 8005162:	3710      	adds	r7, #16
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	f8de3f23 	.word	0xf8de3f23

0800516c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0a6      	sub	sp, #152	; 0x98
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800517a:	2301      	movs	r3, #1
 800517c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005180:	2300      	movs	r3, #0
 8005182:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800519c:	2300      	movs	r3, #0
 800519e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80051a2:	2300      	movs	r3, #0
 80051a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80051a8:	2300      	movs	r3, #0
 80051aa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80051b2:	2300      	movs	r3, #0
 80051b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80051c2:	2300      	movs	r3, #0
 80051c4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80051ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051d2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80051da:	2300      	movs	r3, #0
 80051dc:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80051e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7ff fe86 	bl	8004ef8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80051f0:	2301      	movs	r3, #1
 80051f2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005208:	2300      	movs	r3, #0
 800520a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800520e:	2300      	movs	r3, #0
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005212:	2301      	movs	r3, #1
 8005214:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005218:	2301      	movs	r3, #1
 800521a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800521c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005220:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005226:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800522c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005234:	2300      	movs	r3, #0
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800523c:	f107 0308 	add.w	r3, r7, #8
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7ff ff08 	bl	8005058 <ETH_SetDMAConfig>
}
 8005248:	bf00      	nop
 800524a:	3798      	adds	r7, #152	; 0x98
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3305      	adds	r3, #5
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	3204      	adds	r2, #4
 8005268:	7812      	ldrb	r2, [r2, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <ETH_MACAddressConfig+0x68>)
 8005272:	4413      	add	r3, r2
 8005274:	461a      	mov	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3303      	adds	r3, #3
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	061a      	lsls	r2, r3, #24
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3302      	adds	r3, #2
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3301      	adds	r3, #1
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	021b      	lsls	r3, r3, #8
 8005294:	4313      	orrs	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4b06      	ldr	r3, [pc, #24]	; (80052bc <ETH_MACAddressConfig+0x6c>)
 80052a2:	4413      	add	r3, r2
 80052a4:	461a      	mov	r2, r3
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6013      	str	r3, [r2, #0]
}
 80052aa:	bf00      	nop
 80052ac:	371c      	adds	r7, #28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40028040 	.word	0x40028040
 80052bc:	40028044 	.word	0x40028044

080052c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	e03e      	b.n	800534c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4613      	mov	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	4413      	add	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	440b      	add	r3, r1
 80052de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	3206      	adds	r2, #6
 8005300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b02      	cmp	r3, #2
 8005314:	d80c      	bhi.n	8005330 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68d9      	ldr	r1, [r3, #12]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	440b      	add	r3, r1
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e004      	b.n	800533a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	461a      	mov	r2, r3
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3301      	adds	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b03      	cmp	r3, #3
 8005350:	d9bd      	bls.n	80052ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005364:	611a      	str	r2, [r3, #16]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e046      	b.n	800540e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6919      	ldr	r1, [r3, #16]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	440b      	add	r3, r1
 8005390:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80053c4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	3212      	adds	r2, #18
 80053da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d80c      	bhi.n	80053fe <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6919      	ldr	r1, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	461a      	mov	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	60da      	str	r2, [r3, #12]
 80053fc:	e004      	b.n	8005408 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	461a      	mov	r2, r3
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b03      	cmp	r3, #3
 8005412:	d9b5      	bls.n	8005380 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543e:	60da      	str	r2, [r3, #12]
}
 8005440:	bf00      	nop
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800544c:	b480      	push	{r7}
 800544e:	b08d      	sub	sp, #52	; 0x34
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3318      	adds	r3, #24
 800545c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005476:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800548a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800548e:	d007      	beq.n	80054a0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	3304      	adds	r3, #4
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80054a0:	2302      	movs	r3, #2
 80054a2:	e103      	b.n	80056ac <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	3301      	adds	r3, #1
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80054b4:	6a3b      	ldr	r3, [r7, #32]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80054bc:	f023 031f 	bic.w	r3, r3, #31
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	6852      	ldr	r2, [r2, #4]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d008      	beq.n	80054e8 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	431a      	orrs	r2, r3
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	431a      	orrs	r2, r3
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800552a:	f3bf 8f5f 	dmb	sy
}
 800552e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800553c:	e084      	b.n	8005648 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d006      	beq.n	800555e <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	e005      	b.n	800556a <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800555e:	6a3b      	ldr	r3, [r7, #32]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800556a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556c:	3301      	adds	r3, #1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005572:	2b03      	cmp	r3, #3
 8005574:	d902      	bls.n	800557c <ETH_Prepare_Tx_Descriptors+0x130>
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	3b04      	subs	r3, #4
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005584:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800559a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800559e:	d007      	beq.n	80055b0 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a4:	3304      	adds	r3, #4
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d029      	beq.n	8005604 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055bc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80055be:	2300      	movs	r3, #0
 80055c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c2:	e019      	b.n	80055f8 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 80055c4:	f3bf 8f5f 	dmb	sy
}
 80055c8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	3301      	adds	r3, #1
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d902      	bls.n	80055e8 <ETH_Prepare_Tx_Descriptors+0x19c>
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	3b04      	subs	r3, #4
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	3301      	adds	r3, #1
 80055f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d3e1      	bcc.n	80055c4 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005600:	2302      	movs	r3, #2
 8005602:	e053      	b.n	80056ac <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	461a      	mov	r2, r3
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005622:	f023 031f 	bic.w	r3, r3, #31
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	431a      	orrs	r2, r3
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	3301      	adds	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005636:	f3bf 8f5f 	dmb	sy
}
 800563a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	f47f af76 	bne.w	800553e <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d006      	beq.n	8005666 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	e005      	b.n	8005672 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005682:	6979      	ldr	r1, [r7, #20]
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	3304      	adds	r3, #4
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005692:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005694:	b672      	cpsid	i
}
 8005696:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	4413      	add	r3, r2
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80056a6:	b662      	cpsie	i
}
 80056a8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3734      	adds	r7, #52	; 0x34
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	61fb      	str	r3, [r7, #28]
 80056d2:	e16b      	b.n	80059ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056d4:	2201      	movs	r2, #1
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	fa02 f303 	lsl.w	r3, r2, r3
 80056dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4013      	ands	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	f040 815a 	bne.w	80059a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f003 0303 	and.w	r3, r3, #3
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d005      	beq.n	800570a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005706:	2b02      	cmp	r3, #2
 8005708:	d130      	bne.n	800576c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	2203      	movs	r2, #3
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4013      	ands	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	005b      	lsls	r3, r3, #1
 800572a:	fa02 f303 	lsl.w	r3, r2, r3
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005740:	2201      	movs	r2, #1
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	43db      	mvns	r3, r3
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	4013      	ands	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f003 0201 	and.w	r2, r3, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	2b03      	cmp	r3, #3
 8005776:	d017      	beq.n	80057a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	2203      	movs	r2, #3
 8005784:	fa02 f303 	lsl.w	r3, r2, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4013      	ands	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	4313      	orrs	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0303 	and.w	r3, r3, #3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d123      	bne.n	80057fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	08da      	lsrs	r2, r3, #3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3208      	adds	r2, #8
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	220f      	movs	r2, #15
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	43db      	mvns	r3, r3
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	4013      	ands	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	08da      	lsrs	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3208      	adds	r2, #8
 80057f6:	69b9      	ldr	r1, [r7, #24]
 80057f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f003 0203 	and.w	r2, r3, #3
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	4313      	orrs	r3, r2
 8005828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 80b4 	beq.w	80059a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	4b60      	ldr	r3, [pc, #384]	; (80059c4 <HAL_GPIO_Init+0x30c>)
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005846:	4a5f      	ldr	r2, [pc, #380]	; (80059c4 <HAL_GPIO_Init+0x30c>)
 8005848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800584c:	6453      	str	r3, [r2, #68]	; 0x44
 800584e:	4b5d      	ldr	r3, [pc, #372]	; (80059c4 <HAL_GPIO_Init+0x30c>)
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800585a:	4a5b      	ldr	r2, [pc, #364]	; (80059c8 <HAL_GPIO_Init+0x310>)
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	089b      	lsrs	r3, r3, #2
 8005860:	3302      	adds	r3, #2
 8005862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4013      	ands	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a52      	ldr	r2, [pc, #328]	; (80059cc <HAL_GPIO_Init+0x314>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d02b      	beq.n	80058de <HAL_GPIO_Init+0x226>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a51      	ldr	r2, [pc, #324]	; (80059d0 <HAL_GPIO_Init+0x318>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d025      	beq.n	80058da <HAL_GPIO_Init+0x222>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a50      	ldr	r2, [pc, #320]	; (80059d4 <HAL_GPIO_Init+0x31c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d01f      	beq.n	80058d6 <HAL_GPIO_Init+0x21e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a4f      	ldr	r2, [pc, #316]	; (80059d8 <HAL_GPIO_Init+0x320>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d019      	beq.n	80058d2 <HAL_GPIO_Init+0x21a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a4e      	ldr	r2, [pc, #312]	; (80059dc <HAL_GPIO_Init+0x324>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_GPIO_Init+0x216>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a4d      	ldr	r2, [pc, #308]	; (80059e0 <HAL_GPIO_Init+0x328>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00d      	beq.n	80058ca <HAL_GPIO_Init+0x212>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a4c      	ldr	r2, [pc, #304]	; (80059e4 <HAL_GPIO_Init+0x32c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <HAL_GPIO_Init+0x20e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a4b      	ldr	r2, [pc, #300]	; (80059e8 <HAL_GPIO_Init+0x330>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <HAL_GPIO_Init+0x20a>
 80058be:	2307      	movs	r3, #7
 80058c0:	e00e      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058c2:	2308      	movs	r3, #8
 80058c4:	e00c      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058c6:	2306      	movs	r3, #6
 80058c8:	e00a      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058ca:	2305      	movs	r3, #5
 80058cc:	e008      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058ce:	2304      	movs	r3, #4
 80058d0:	e006      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058d2:	2303      	movs	r3, #3
 80058d4:	e004      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e002      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058da:	2301      	movs	r3, #1
 80058dc:	e000      	b.n	80058e0 <HAL_GPIO_Init+0x228>
 80058de:	2300      	movs	r3, #0
 80058e0:	69fa      	ldr	r2, [r7, #28]
 80058e2:	f002 0203 	and.w	r2, r2, #3
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	4093      	lsls	r3, r2
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058f0:	4935      	ldr	r1, [pc, #212]	; (80059c8 <HAL_GPIO_Init+0x310>)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80058fe:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <HAL_GPIO_Init+0x334>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	43db      	mvns	r3, r3
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	4013      	ands	r3, r2
 800590c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005922:	4a32      	ldr	r2, [pc, #200]	; (80059ec <HAL_GPIO_Init+0x334>)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005928:	4b30      	ldr	r3, [pc, #192]	; (80059ec <HAL_GPIO_Init+0x334>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	43db      	mvns	r3, r3
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800594c:	4a27      	ldr	r2, [pc, #156]	; (80059ec <HAL_GPIO_Init+0x334>)
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005952:	4b26      	ldr	r3, [pc, #152]	; (80059ec <HAL_GPIO_Init+0x334>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_GPIO_Init+0x334>)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800597c:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_GPIO_Init+0x334>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059a0:	4a12      	ldr	r2, [pc, #72]	; (80059ec <HAL_GPIO_Init+0x334>)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3301      	adds	r3, #1
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b0f      	cmp	r3, #15
 80059b0:	f67f ae90 	bls.w	80056d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	3724      	adds	r7, #36	; 0x24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40023800 	.word	0x40023800
 80059c8:	40013800 	.word	0x40013800
 80059cc:	40020000 	.word	0x40020000
 80059d0:	40020400 	.word	0x40020400
 80059d4:	40020800 	.word	0x40020800
 80059d8:	40020c00 	.word	0x40020c00
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40021400 	.word	0x40021400
 80059e4:	40021800 	.word	0x40021800
 80059e8:	40021c00 	.word	0x40021c00
 80059ec:	40013c00 	.word	0x40013c00

080059f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	887b      	ldrh	r3, [r7, #2]
 8005a02:	4013      	ands	r3, r2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d002      	beq.n	8005a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e001      	b.n	8005a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a30:	787b      	ldrb	r3, [r7, #1]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d003      	beq.n	8005a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a36:	887a      	ldrh	r2, [r7, #2]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a3c:	e003      	b.n	8005a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a3e:	887b      	ldrh	r3, [r7, #2]
 8005a40:	041a      	lsls	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	619a      	str	r2, [r3, #24]
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a64:	887a      	ldrh	r2, [r7, #2]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4013      	ands	r3, r2
 8005a6a:	041a      	lsls	r2, r3, #16
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	43d9      	mvns	r1, r3
 8005a70:	887b      	ldrh	r3, [r7, #2]
 8005a72:	400b      	ands	r3, r1
 8005a74:	431a      	orrs	r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	619a      	str	r2, [r3, #24]
}
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e12b      	b.n	8005cf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fc fe46 	bl	8002740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2224      	movs	r2, #36	; 0x24
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 0201 	bic.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ada:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005aea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005aec:	f001 f8aa 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 8005af0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4a81      	ldr	r2, [pc, #516]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d807      	bhi.n	8005b0c <HAL_I2C_Init+0x84>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a80      	ldr	r2, [pc, #512]	; (8005d00 <HAL_I2C_Init+0x278>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bf94      	ite	ls
 8005b04:	2301      	movls	r3, #1
 8005b06:	2300      	movhi	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	e006      	b.n	8005b1a <HAL_I2C_Init+0x92>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a7d      	ldr	r2, [pc, #500]	; (8005d04 <HAL_I2C_Init+0x27c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	bf94      	ite	ls
 8005b14:	2301      	movls	r3, #1
 8005b16:	2300      	movhi	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e0e7      	b.n	8005cf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a78      	ldr	r2, [pc, #480]	; (8005d08 <HAL_I2C_Init+0x280>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	0c9b      	lsrs	r3, r3, #18
 8005b2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d802      	bhi.n	8005b5c <HAL_I2C_Init+0xd4>
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	e009      	b.n	8005b70 <HAL_I2C_Init+0xe8>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b62:	fb02 f303 	mul.w	r3, r2, r3
 8005b66:	4a69      	ldr	r2, [pc, #420]	; (8005d0c <HAL_I2C_Init+0x284>)
 8005b68:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6c:	099b      	lsrs	r3, r3, #6
 8005b6e:	3301      	adds	r3, #1
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6812      	ldr	r2, [r2, #0]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	495c      	ldr	r1, [pc, #368]	; (8005cfc <HAL_I2C_Init+0x274>)
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	d819      	bhi.n	8005bc4 <HAL_I2C_Init+0x13c>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1e59      	subs	r1, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	005b      	lsls	r3, r3, #1
 8005b9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b9e:	1c59      	adds	r1, r3, #1
 8005ba0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ba4:	400b      	ands	r3, r1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <HAL_I2C_Init+0x138>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1e59      	subs	r1, r3, #1
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb8:	3301      	adds	r3, #1
 8005bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bbe:	e051      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	e04f      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <HAL_I2C_Init+0x168>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	1e58      	subs	r0, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	440b      	add	r3, r1
 8005bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bde:	3301      	adds	r3, #1
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	e012      	b.n	8005c16 <HAL_I2C_Init+0x18e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e58      	subs	r0, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	0099      	lsls	r1, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c06:	3301      	adds	r3, #1
 8005c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <HAL_I2C_Init+0x196>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e022      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10e      	bne.n	8005c44 <HAL_I2C_Init+0x1bc>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	1e58      	subs	r0, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6859      	ldr	r1, [r3, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	005b      	lsls	r3, r3, #1
 8005c32:	440b      	add	r3, r1
 8005c34:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c38:	3301      	adds	r3, #1
 8005c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c42:	e00f      	b.n	8005c64 <HAL_I2C_Init+0x1dc>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	1e58      	subs	r0, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	440b      	add	r3, r1
 8005c52:	0099      	lsls	r1, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	6809      	ldr	r1, [r1, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69da      	ldr	r2, [r3, #28]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	6911      	ldr	r1, [r2, #16]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	68d2      	ldr	r2, [r2, #12]
 8005c9e:	4311      	orrs	r1, r2
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6812      	ldr	r2, [r2, #0]
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	000186a0 	.word	0x000186a0
 8005d00:	001e847f 	.word	0x001e847f
 8005d04:	003d08ff 	.word	0x003d08ff
 8005d08:	431bde83 	.word	0x431bde83
 8005d0c:	10624dd3 	.word	0x10624dd3

08005d10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	4608      	mov	r0, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4603      	mov	r3, r0
 8005d20:	817b      	strh	r3, [r7, #10]
 8005d22:	460b      	mov	r3, r1
 8005d24:	813b      	strh	r3, [r7, #8]
 8005d26:	4613      	mov	r3, r2
 8005d28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d2a:	f7fe f957 	bl	8003fdc <HAL_GetTick>
 8005d2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	f040 80d9 	bne.w	8005ef0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	2319      	movs	r3, #25
 8005d44:	2201      	movs	r2, #1
 8005d46:	496d      	ldr	r1, [pc, #436]	; (8005efc <HAL_I2C_Mem_Write+0x1ec>)
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f971 	bl	8006030 <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d54:	2302      	movs	r3, #2
 8005d56:	e0cc      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_I2C_Mem_Write+0x56>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e0c5      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d007      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2221      	movs	r2, #33	; 0x21
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2240      	movs	r2, #64	; 0x40
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4a4d      	ldr	r2, [pc, #308]	; (8005f00 <HAL_I2C_Mem_Write+0x1f0>)
 8005dcc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dce:	88f8      	ldrh	r0, [r7, #6]
 8005dd0:	893a      	ldrh	r2, [r7, #8]
 8005dd2:	8979      	ldrh	r1, [r7, #10]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	4603      	mov	r3, r0
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f890 	bl	8005f04 <I2C_RequestMemoryWrite>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d052      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e081      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dee:	697a      	ldr	r2, [r7, #20]
 8005df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fa36 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d107      	bne.n	8005e16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e06b      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	3b01      	subs	r3, #1
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d11b      	bne.n	8005e90 <HAL_I2C_Mem_Write+0x180>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d017      	beq.n	8005e90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1aa      	bne.n	8005dee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fa29 	bl	80062f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d107      	bne.n	8005ec0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e016      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	00100002 	.word	0x00100002
 8005f00:	ffff0000 	.word	0xffff0000

08005f04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	4611      	mov	r1, r2
 8005f10:	461a      	mov	r2, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	817b      	strh	r3, [r7, #10]
 8005f16:	460b      	mov	r3, r1
 8005f18:	813b      	strh	r3, [r7, #8]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f878 	bl	8006030 <I2C_WaitOnFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f54:	d103      	bne.n	8005f5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e05f      	b.n	8006022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f62:	897b      	ldrh	r3, [r7, #10]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	6a3a      	ldr	r2, [r7, #32]
 8005f76:	492d      	ldr	r1, [pc, #180]	; (800602c <I2C_RequestMemoryWrite+0x128>)
 8005f78:	68f8      	ldr	r0, [r7, #12]
 8005f7a:	f000 f8d3 	bl	8006124 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d001      	beq.n	8005f88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e04c      	b.n	8006022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa0:	6a39      	ldr	r1, [r7, #32]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f95e 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d107      	bne.n	8005fc6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e02b      	b.n	8006022 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d105      	bne.n	8005fdc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fd0:	893b      	ldrh	r3, [r7, #8]
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]
 8005fda:	e021      	b.n	8006020 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fdc:	893b      	ldrh	r3, [r7, #8]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fec:	6a39      	ldr	r1, [r7, #32]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 f938 	bl	8006264 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00d      	beq.n	8006016 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d107      	bne.n	8006012 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e005      	b.n	8006022 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006016:	893b      	ldrh	r3, [r7, #8]
 8006018:	b2da      	uxtb	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	00010002 	.word	0x00010002

08006030 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006040:	e048      	b.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006048:	d044      	beq.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fd ffc7 	bl	8003fdc <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <I2C_WaitOnFlagUntilTimeout+0x30>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d139      	bne.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	0c1b      	lsrs	r3, r3, #16
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b01      	cmp	r3, #1
 8006068:	d10d      	bne.n	8006086 <I2C_WaitOnFlagUntilTimeout+0x56>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	43da      	mvns	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	b29b      	uxth	r3, r3
 8006078:	2b00      	cmp	r3, #0
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	e00c      	b.n	80060a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	43da      	mvns	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4013      	ands	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf0c      	ite	eq
 8006098:	2301      	moveq	r3, #1
 800609a:	2300      	movne	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	461a      	mov	r2, r3
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d116      	bne.n	80060d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	f043 0220 	orr.w	r2, r3, #32
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e023      	b.n	800611c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	0c1b      	lsrs	r3, r3, #16
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d10d      	bne.n	80060fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	43da      	mvns	r2, r3
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	4013      	ands	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	bf0c      	ite	eq
 80060f0:	2301      	moveq	r3, #1
 80060f2:	2300      	movne	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	461a      	mov	r2, r3
 80060f8:	e00c      	b.n	8006114 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	43da      	mvns	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d093      	beq.n	8006042 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006132:	e071      	b.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006142:	d123      	bne.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006152:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800615c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	f043 0204 	orr.w	r2, r3, #4
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e067      	b.n	800625c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006192:	d041      	beq.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006194:	f7fd ff22 	bl	8003fdc <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d302      	bcc.n	80061aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d136      	bne.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d10c      	bne.n	80061ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	43da      	mvns	r2, r3
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	4013      	ands	r3, r2
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bf14      	ite	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	2300      	moveq	r3, #0
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	e00b      	b.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	43da      	mvns	r2, r3
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4013      	ands	r3, r2
 80061da:	b29b      	uxth	r3, r3
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2220      	movs	r2, #32
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f043 0220 	orr.w	r2, r3, #32
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e021      	b.n	800625c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	0c1b      	lsrs	r3, r3, #16
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b01      	cmp	r3, #1
 8006220:	d10c      	bne.n	800623c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	43da      	mvns	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	4013      	ands	r3, r2
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	bf14      	ite	ne
 8006234:	2301      	movne	r3, #1
 8006236:	2300      	moveq	r3, #0
 8006238:	b2db      	uxtb	r3, r3
 800623a:	e00b      	b.n	8006254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	43da      	mvns	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	f47f af6d 	bne.w	8006134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006270:	e034      	b.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f886 	bl	8006384 <I2C_IsAcknowledgeFailed>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e034      	b.n	80062ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006288:	d028      	beq.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628a:	f7fd fea7 	bl	8003fdc <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	429a      	cmp	r2, r3
 8006298:	d302      	bcc.n	80062a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d11d      	bne.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062aa:	2b80      	cmp	r3, #128	; 0x80
 80062ac:	d016      	beq.n	80062dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e007      	b.n	80062ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e6:	2b80      	cmp	r3, #128	; 0x80
 80062e8:	d1c3      	bne.n	8006272 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006300:	e034      	b.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f83e 	bl	8006384 <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e034      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006318:	d028      	beq.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fd fe5f 	bl	8003fdc <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11d      	bne.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0304 	and.w	r3, r3, #4
 800633a:	2b04      	cmp	r3, #4
 800633c:	d016      	beq.n	800636c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0304 	and.w	r3, r3, #4
 8006376:	2b04      	cmp	r3, #4
 8006378:	d1c3      	bne.n	8006302 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800639a:	d11b      	bne.n	80063d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	f043 0204 	orr.w	r2, r3, #4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e000      	b.n	80063d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d101      	bne.n	80063f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e267      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d075      	beq.n	80064ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006402:	4b88      	ldr	r3, [pc, #544]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f003 030c 	and.w	r3, r3, #12
 800640a:	2b04      	cmp	r3, #4
 800640c:	d00c      	beq.n	8006428 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800640e:	4b85      	ldr	r3, [pc, #532]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006416:	2b08      	cmp	r3, #8
 8006418:	d112      	bne.n	8006440 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800641a:	4b82      	ldr	r3, [pc, #520]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006422:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006426:	d10b      	bne.n	8006440 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006428:	4b7e      	ldr	r3, [pc, #504]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d05b      	beq.n	80064ec <HAL_RCC_OscConfig+0x108>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d157      	bne.n	80064ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e242      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006448:	d106      	bne.n	8006458 <HAL_RCC_OscConfig+0x74>
 800644a:	4b76      	ldr	r3, [pc, #472]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a75      	ldr	r2, [pc, #468]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	e01d      	b.n	8006494 <HAL_RCC_OscConfig+0xb0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006460:	d10c      	bne.n	800647c <HAL_RCC_OscConfig+0x98>
 8006462:	4b70      	ldr	r3, [pc, #448]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a6f      	ldr	r2, [pc, #444]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4b6d      	ldr	r3, [pc, #436]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a6c      	ldr	r2, [pc, #432]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e00b      	b.n	8006494 <HAL_RCC_OscConfig+0xb0>
 800647c:	4b69      	ldr	r3, [pc, #420]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a68      	ldr	r2, [pc, #416]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	4b66      	ldr	r3, [pc, #408]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a65      	ldr	r2, [pc, #404]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 800648e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d013      	beq.n	80064c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fd fd9e 	bl	8003fdc <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064a4:	f7fd fd9a 	bl	8003fdc <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b64      	cmp	r3, #100	; 0x64
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e207      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b6:	4b5b      	ldr	r3, [pc, #364]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0xc0>
 80064c2:	e014      	b.n	80064ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c4:	f7fd fd8a 	bl	8003fdc <HAL_GetTick>
 80064c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ca:	e008      	b.n	80064de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064cc:	f7fd fd86 	bl	8003fdc <HAL_GetTick>
 80064d0:	4602      	mov	r2, r0
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	2b64      	cmp	r3, #100	; 0x64
 80064d8:	d901      	bls.n	80064de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e1f3      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064de:	4b51      	ldr	r3, [pc, #324]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1f0      	bne.n	80064cc <HAL_RCC_OscConfig+0xe8>
 80064ea:	e000      	b.n	80064ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d063      	beq.n	80065c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064fa:	4b4a      	ldr	r3, [pc, #296]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 030c 	and.w	r3, r3, #12
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006506:	4b47      	ldr	r3, [pc, #284]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800650e:	2b08      	cmp	r3, #8
 8006510:	d11c      	bne.n	800654c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006512:	4b44      	ldr	r3, [pc, #272]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d116      	bne.n	800654c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651e:	4b41      	ldr	r3, [pc, #260]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_RCC_OscConfig+0x152>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d001      	beq.n	8006536 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e1c7      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006536:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	00db      	lsls	r3, r3, #3
 8006544:	4937      	ldr	r1, [pc, #220]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006546:	4313      	orrs	r3, r2
 8006548:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800654a:	e03a      	b.n	80065c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d020      	beq.n	8006596 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006554:	4b34      	ldr	r3, [pc, #208]	; (8006628 <HAL_RCC_OscConfig+0x244>)
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655a:	f7fd fd3f 	bl	8003fdc <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006562:	f7fd fd3b 	bl	8003fdc <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e1a8      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006574:	4b2b      	ldr	r3, [pc, #172]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0f0      	beq.n	8006562 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4925      	ldr	r1, [pc, #148]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 8006590:	4313      	orrs	r3, r2
 8006592:	600b      	str	r3, [r1, #0]
 8006594:	e015      	b.n	80065c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006596:	4b24      	ldr	r3, [pc, #144]	; (8006628 <HAL_RCC_OscConfig+0x244>)
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800659c:	f7fd fd1e 	bl	8003fdc <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065a4:	f7fd fd1a 	bl	8003fdc <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e187      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b6:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1f0      	bne.n	80065a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d036      	beq.n	800663c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d016      	beq.n	8006604 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d6:	4b15      	ldr	r3, [pc, #84]	; (800662c <HAL_RCC_OscConfig+0x248>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fd fcfe 	bl	8003fdc <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065e4:	f7fd fcfa 	bl	8003fdc <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e167      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065f6:	4b0b      	ldr	r3, [pc, #44]	; (8006624 <HAL_RCC_OscConfig+0x240>)
 80065f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d0f0      	beq.n	80065e4 <HAL_RCC_OscConfig+0x200>
 8006602:	e01b      	b.n	800663c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <HAL_RCC_OscConfig+0x248>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660a:	f7fd fce7 	bl	8003fdc <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006610:	e00e      	b.n	8006630 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006612:	f7fd fce3 	bl	8003fdc <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d907      	bls.n	8006630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e150      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
 8006624:	40023800 	.word	0x40023800
 8006628:	42470000 	.word	0x42470000
 800662c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006630:	4b88      	ldr	r3, [pc, #544]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1ea      	bne.n	8006612 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8097 	beq.w	8006778 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664a:	2300      	movs	r3, #0
 800664c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800664e:	4b81      	ldr	r3, [pc, #516]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10f      	bne.n	800667a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
 800665e:	4b7d      	ldr	r3, [pc, #500]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006662:	4a7c      	ldr	r2, [pc, #496]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006668:	6413      	str	r3, [r2, #64]	; 0x40
 800666a:	4b7a      	ldr	r3, [pc, #488]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667a:	4b77      	ldr	r3, [pc, #476]	; (8006858 <HAL_RCC_OscConfig+0x474>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d118      	bne.n	80066b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006686:	4b74      	ldr	r3, [pc, #464]	; (8006858 <HAL_RCC_OscConfig+0x474>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a73      	ldr	r2, [pc, #460]	; (8006858 <HAL_RCC_OscConfig+0x474>)
 800668c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006692:	f7fd fca3 	bl	8003fdc <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669a:	f7fd fc9f 	bl	8003fdc <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e10c      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ac:	4b6a      	ldr	r3, [pc, #424]	; (8006858 <HAL_RCC_OscConfig+0x474>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d106      	bne.n	80066ce <HAL_RCC_OscConfig+0x2ea>
 80066c0:	4b64      	ldr	r3, [pc, #400]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c4:	4a63      	ldr	r2, [pc, #396]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	6713      	str	r3, [r2, #112]	; 0x70
 80066cc:	e01c      	b.n	8006708 <HAL_RCC_OscConfig+0x324>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	2b05      	cmp	r3, #5
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCC_OscConfig+0x30c>
 80066d6:	4b5f      	ldr	r3, [pc, #380]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	4a5e      	ldr	r2, [pc, #376]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066dc:	f043 0304 	orr.w	r3, r3, #4
 80066e0:	6713      	str	r3, [r2, #112]	; 0x70
 80066e2:	4b5c      	ldr	r3, [pc, #368]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e6:	4a5b      	ldr	r2, [pc, #364]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066e8:	f043 0301 	orr.w	r3, r3, #1
 80066ec:	6713      	str	r3, [r2, #112]	; 0x70
 80066ee:	e00b      	b.n	8006708 <HAL_RCC_OscConfig+0x324>
 80066f0:	4b58      	ldr	r3, [pc, #352]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f4:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	6713      	str	r3, [r2, #112]	; 0x70
 80066fc:	4b55      	ldr	r3, [pc, #340]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80066fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006700:	4a54      	ldr	r2, [pc, #336]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006702:	f023 0304 	bic.w	r3, r3, #4
 8006706:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d015      	beq.n	800673c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006710:	f7fd fc64 	bl	8003fdc <HAL_GetTick>
 8006714:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006716:	e00a      	b.n	800672e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006718:	f7fd fc60 	bl	8003fdc <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	f241 3288 	movw	r2, #5000	; 0x1388
 8006726:	4293      	cmp	r3, r2
 8006728:	d901      	bls.n	800672e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e0cb      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800672e:	4b49      	ldr	r3, [pc, #292]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d0ee      	beq.n	8006718 <HAL_RCC_OscConfig+0x334>
 800673a:	e014      	b.n	8006766 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800673c:	f7fd fc4e 	bl	8003fdc <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006742:	e00a      	b.n	800675a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006744:	f7fd fc4a 	bl	8003fdc <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006752:	4293      	cmp	r3, r2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e0b5      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800675a:	4b3e      	ldr	r3, [pc, #248]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 800675c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1ee      	bne.n	8006744 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d105      	bne.n	8006778 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800676c:	4b39      	ldr	r3, [pc, #228]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	4a38      	ldr	r2, [pc, #224]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006772:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006776:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80a1 	beq.w	80068c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006782:	4b34      	ldr	r3, [pc, #208]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b08      	cmp	r3, #8
 800678c:	d05c      	beq.n	8006848 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	2b02      	cmp	r3, #2
 8006794:	d141      	bne.n	800681a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006796:	4b31      	ldr	r3, [pc, #196]	; (800685c <HAL_RCC_OscConfig+0x478>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fd fc1e 	bl	8003fdc <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fd fc1a 	bl	8003fdc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e087      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067b6:	4b27      	ldr	r3, [pc, #156]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	69da      	ldr	r2, [r3, #28]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	019b      	lsls	r3, r3, #6
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	085b      	lsrs	r3, r3, #1
 80067da:	3b01      	subs	r3, #1
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	431a      	orrs	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	491b      	ldr	r1, [pc, #108]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ec:	4b1b      	ldr	r3, [pc, #108]	; (800685c <HAL_RCC_OscConfig+0x478>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067f2:	f7fd fbf3 	bl	8003fdc <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067fa:	f7fd fbef 	bl	8003fdc <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e05c      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x416>
 8006818:	e054      	b.n	80068c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800681a:	4b10      	ldr	r3, [pc, #64]	; (800685c <HAL_RCC_OscConfig+0x478>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fd fbdc 	bl	8003fdc <HAL_GetTick>
 8006824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006826:	e008      	b.n	800683a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006828:	f7fd fbd8 	bl	8003fdc <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d901      	bls.n	800683a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e045      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <HAL_RCC_OscConfig+0x470>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1f0      	bne.n	8006828 <HAL_RCC_OscConfig+0x444>
 8006846:	e03d      	b.n	80068c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d107      	bne.n	8006860 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e038      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
 8006854:	40023800 	.word	0x40023800
 8006858:	40007000 	.word	0x40007000
 800685c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006860:	4b1b      	ldr	r3, [pc, #108]	; (80068d0 <HAL_RCC_OscConfig+0x4ec>)
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d028      	beq.n	80068c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006878:	429a      	cmp	r2, r3
 800687a:	d121      	bne.n	80068c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006886:	429a      	cmp	r2, r3
 8006888:	d11a      	bne.n	80068c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006890:	4013      	ands	r3, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006896:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006898:	4293      	cmp	r3, r2
 800689a:	d111      	bne.n	80068c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	085b      	lsrs	r3, r3, #1
 80068a8:	3b01      	subs	r3, #1
 80068aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068bc:	429a      	cmp	r2, r3
 80068be:	d001      	beq.n	80068c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e000      	b.n	80068c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	40023800 	.word	0x40023800

080068d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0cc      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068e8:	4b68      	ldr	r3, [pc, #416]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d90c      	bls.n	8006910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f6:	4b65      	ldr	r3, [pc, #404]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	b2d2      	uxtb	r2, r2
 80068fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068fe:	4b63      	ldr	r3, [pc, #396]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	429a      	cmp	r2, r3
 800690a:	d001      	beq.n	8006910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0b8      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d020      	beq.n	800695e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006928:	4b59      	ldr	r3, [pc, #356]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	4a58      	ldr	r2, [pc, #352]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006940:	4b53      	ldr	r3, [pc, #332]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	4a52      	ldr	r2, [pc, #328]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800694a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800694c:	4b50      	ldr	r3, [pc, #320]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	494d      	ldr	r1, [pc, #308]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d044      	beq.n	80069f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d107      	bne.n	8006982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006972:	4b47      	ldr	r3, [pc, #284]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d119      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e07f      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d003      	beq.n	8006992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800698e:	2b03      	cmp	r3, #3
 8006990:	d107      	bne.n	80069a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006992:	4b3f      	ldr	r3, [pc, #252]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d109      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e06f      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a2:	4b3b      	ldr	r3, [pc, #236]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e067      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069b2:	4b37      	ldr	r3, [pc, #220]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f023 0203 	bic.w	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	4934      	ldr	r1, [pc, #208]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069c4:	f7fd fb0a 	bl	8003fdc <HAL_GetTick>
 80069c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069cc:	f7fd fb06 	bl	8003fdc <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e04f      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069e2:	4b2b      	ldr	r3, [pc, #172]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 020c 	and.w	r2, r3, #12
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d1eb      	bne.n	80069cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069f4:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0307 	and.w	r3, r3, #7
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d20c      	bcs.n	8006a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a02:	4b22      	ldr	r3, [pc, #136]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <HAL_RCC_ClockConfig+0x1b8>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d001      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e032      	b.n	8006a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a28:	4b19      	ldr	r3, [pc, #100]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4916      	ldr	r1, [pc, #88]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a46:	4b12      	ldr	r3, [pc, #72]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	00db      	lsls	r3, r3, #3
 8006a54:	490e      	ldr	r1, [pc, #56]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a5a:	f000 f821 	bl	8006aa0 <HAL_RCC_GetSysClockFreq>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <HAL_RCC_ClockConfig+0x1bc>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	490a      	ldr	r1, [pc, #40]	; (8006a94 <HAL_RCC_ClockConfig+0x1c0>)
 8006a6c:	5ccb      	ldrb	r3, [r1, r3]
 8006a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a72:	4a09      	ldr	r2, [pc, #36]	; (8006a98 <HAL_RCC_ClockConfig+0x1c4>)
 8006a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <HAL_RCC_ClockConfig+0x1c8>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fc fefa 	bl	8003874 <HAL_InitTick>

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40023c00 	.word	0x40023c00
 8006a90:	40023800 	.word	0x40023800
 8006a94:	0802bf3c 	.word	0x0802bf3c
 8006a98:	20000008 	.word	0x20000008
 8006a9c:	2000000c 	.word	0x2000000c

08006aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa4:	b090      	sub	sp, #64	; 0x40
 8006aa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8006aac:	2300      	movs	r3, #0
 8006aae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ab8:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 030c 	and.w	r3, r3, #12
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d00d      	beq.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	f200 80a1 	bhi.w	8006c0c <HAL_RCC_GetSysClockFreq+0x16c>
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d003      	beq.n	8006ada <HAL_RCC_GetSysClockFreq+0x3a>
 8006ad2:	e09b      	b.n	8006c0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ad4:	4b53      	ldr	r3, [pc, #332]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ad6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ad8:	e09b      	b.n	8006c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ada:	4b53      	ldr	r3, [pc, #332]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ade:	e098      	b.n	8006c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ae0:	4b4f      	ldr	r3, [pc, #316]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aea:	4b4d      	ldr	r3, [pc, #308]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d028      	beq.n	8006b48 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006af6:	4b4a      	ldr	r3, [pc, #296]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	099b      	lsrs	r3, r3, #6
 8006afc:	2200      	movs	r2, #0
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	627a      	str	r2, [r7, #36]	; 0x24
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4b47      	ldr	r3, [pc, #284]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b0c:	fb03 f201 	mul.w	r2, r3, r1
 8006b10:	2300      	movs	r3, #0
 8006b12:	fb00 f303 	mul.w	r3, r0, r3
 8006b16:	4413      	add	r3, r2
 8006b18:	4a43      	ldr	r2, [pc, #268]	; (8006c28 <HAL_RCC_GetSysClockFreq+0x188>)
 8006b1a:	fba0 1202 	umull	r1, r2, r0, r2
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	460a      	mov	r2, r1
 8006b22:	62ba      	str	r2, [r7, #40]	; 0x28
 8006b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b26:	4413      	add	r3, r2
 8006b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	61fa      	str	r2, [r7, #28]
 8006b32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b3a:	f7fa f845 	bl	8000bc8 <__aeabi_uldivmod>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4613      	mov	r3, r2
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b46:	e053      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b48:	4b35      	ldr	r3, [pc, #212]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	099b      	lsrs	r3, r3, #6
 8006b4e:	2200      	movs	r2, #0
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	617a      	str	r2, [r7, #20]
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b5a:	f04f 0b00 	mov.w	fp, #0
 8006b5e:	4652      	mov	r2, sl
 8006b60:	465b      	mov	r3, fp
 8006b62:	f04f 0000 	mov.w	r0, #0
 8006b66:	f04f 0100 	mov.w	r1, #0
 8006b6a:	0159      	lsls	r1, r3, #5
 8006b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b70:	0150      	lsls	r0, r2, #5
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	ebb2 080a 	subs.w	r8, r2, sl
 8006b7a:	eb63 090b 	sbc.w	r9, r3, fp
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	f04f 0300 	mov.w	r3, #0
 8006b86:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b8a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b8e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b92:	ebb2 0408 	subs.w	r4, r2, r8
 8006b96:	eb63 0509 	sbc.w	r5, r3, r9
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	00eb      	lsls	r3, r5, #3
 8006ba4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ba8:	00e2      	lsls	r2, r4, #3
 8006baa:	4614      	mov	r4, r2
 8006bac:	461d      	mov	r5, r3
 8006bae:	eb14 030a 	adds.w	r3, r4, sl
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	eb45 030b 	adc.w	r3, r5, fp
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	f04f 0200 	mov.w	r2, #0
 8006bbe:	f04f 0300 	mov.w	r3, #0
 8006bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006bc6:	4629      	mov	r1, r5
 8006bc8:	028b      	lsls	r3, r1, #10
 8006bca:	4621      	mov	r1, r4
 8006bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	028a      	lsls	r2, r1, #10
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	2200      	movs	r2, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
 8006bde:	60fa      	str	r2, [r7, #12]
 8006be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006be4:	f7f9 fff0 	bl	8000bc8 <__aeabi_uldivmod>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4613      	mov	r3, r2
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	0c1b      	lsrs	r3, r3, #16
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c0a:	e002      	b.n	8006c12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c0c:	4b05      	ldr	r3, [pc, #20]	; (8006c24 <HAL_RCC_GetSysClockFreq+0x184>)
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3740      	adds	r7, #64	; 0x40
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c1e:	bf00      	nop
 8006c20:	40023800 	.word	0x40023800
 8006c24:	00f42400 	.word	0x00f42400
 8006c28:	017d7840 	.word	0x017d7840

08006c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c30:	4b03      	ldr	r3, [pc, #12]	; (8006c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006c32:	681b      	ldr	r3, [r3, #0]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000008 	.word	0x20000008

08006c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006c48:	f7ff fff0 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	0a9b      	lsrs	r3, r3, #10
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	4903      	ldr	r1, [pc, #12]	; (8006c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c5a:	5ccb      	ldrb	r3, [r1, r3]
 8006c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	40023800 	.word	0x40023800
 8006c68:	0802bf4c 	.word	0x0802bf4c

08006c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006c70:	f7ff ffdc 	bl	8006c2c <HAL_RCC_GetHCLKFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	0b5b      	lsrs	r3, r3, #13
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4903      	ldr	r1, [pc, #12]	; (8006c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	40023800 	.word	0x40023800
 8006c90:	0802bf4c 	.word	0x0802bf4c

08006c94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	220f      	movs	r2, #15
 8006ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006ca4:	4b12      	ldr	r3, [pc, #72]	; (8006cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 0203 	and.w	r2, r3, #3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006cb0:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	08db      	lsrs	r3, r3, #3
 8006cce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cd6:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <HAL_RCC_GetClockConfig+0x60>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0207 	and.w	r2, r3, #7
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	601a      	str	r2, [r3, #0]
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40023800 	.word	0x40023800
 8006cf4:	40023c00 	.word	0x40023c00

08006cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d035      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006d20:	4b62      	ldr	r3, [pc, #392]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d26:	f7fd f959 	bl	8003fdc <HAL_GetTick>
 8006d2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d2c:	e008      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d2e:	f7fd f955 	bl	8003fdc <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d901      	bls.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e0b0      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d40:	4b5b      	ldr	r3, [pc, #364]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f0      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	019a      	lsls	r2, r3, #6
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	071b      	lsls	r3, r3, #28
 8006d58:	4955      	ldr	r1, [pc, #340]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006d60:	4b52      	ldr	r3, [pc, #328]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006d62:	2201      	movs	r2, #1
 8006d64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d66:	f7fd f939 	bl	8003fdc <HAL_GetTick>
 8006d6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006d6e:	f7fd f935 	bl	8003fdc <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e090      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006d80:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0f0      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8083 	beq.w	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]
 8006d9e:	4b44      	ldr	r3, [pc, #272]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	4a43      	ldr	r2, [pc, #268]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da8:	6413      	str	r3, [r2, #64]	; 0x40
 8006daa:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006db6:	4b3f      	ldr	r3, [pc, #252]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3e      	ldr	r2, [pc, #248]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dc2:	f7fd f90b 	bl	8003fdc <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dca:	f7fd f907 	bl	8003fdc <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e062      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006ddc:	4b35      	ldr	r3, [pc, #212]	; (8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0f0      	beq.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006de8:	4b31      	ldr	r3, [pc, #196]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02f      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d028      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e06:	4b2a      	ldr	r3, [pc, #168]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e10:	4b29      	ldr	r3, [pc, #164]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e12:	2201      	movs	r2, #1
 8006e14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e16:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e1c:	4a24      	ldr	r2, [pc, #144]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d114      	bne.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e2e:	f7fd f8d5 	bl	8003fdc <HAL_GetTick>
 8006e32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e34:	e00a      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e36:	f7fd f8d1 	bl	8003fdc <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e02a      	b.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4c:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ee      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e64:	d10d      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006e66:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	608b      	str	r3, [r1, #8]
 8006e80:	e005      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006e82:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e8c:	6093      	str	r3, [r2, #8]
 8006e8e:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e9a:	4905      	ldr	r1, [pc, #20]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	42470068 	.word	0x42470068
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	40007000 	.word	0x40007000
 8006eb8:	42470e40 	.word	0x42470e40

08006ebc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d101      	bne.n	8006ed2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e073      	b.n	8006fba <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7f5b      	ldrb	r3, [r3, #29]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d105      	bne.n	8006ee8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fc fbd2 	bl	800368c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0310 	and.w	r3, r3, #16
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d055      	beq.n	8006fa8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	22ca      	movs	r2, #202	; 0xca
 8006f02:	625a      	str	r2, [r3, #36]	; 0x24
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2253      	movs	r2, #83	; 0x53
 8006f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f92b 	bl	8007168 <RTC_EnterInitMode>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d12c      	bne.n	8006f76 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	6812      	ldr	r2, [r2, #0]
 8006f26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f2e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	6899      	ldr	r1, [r3, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685a      	ldr	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68d2      	ldr	r2, [r2, #12]
 8006f56:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6919      	ldr	r1, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	041a      	lsls	r2, r3, #16
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f932 	bl	80071d6 <RTC_ExitInitMode>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d110      	bne.n	8006f9e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f8a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699a      	ldr	r2, [r3, #24]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	22ff      	movs	r2, #255	; 0xff
 8006fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8006fa6:	e001      	b.n	8006fac <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d102      	bne.n	8006fb8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b086      	sub	sp, #24
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	60f8      	str	r0, [r7, #12]
 8006fca:	60b9      	str	r1, [r7, #8]
 8006fcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ff4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ff8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007004:	b2da      	uxtb	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	0a1b      	lsrs	r3, r3, #8
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007014:	b2da      	uxtb	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007022:	b2da      	uxtb	r2, r3
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	0d9b      	lsrs	r3, r3, #22
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d11a      	bne.n	8007074 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f8ec 	bl	8007220 <RTC_Bcd2ToByte>
 8007048:	4603      	mov	r3, r0
 800704a:	461a      	mov	r2, r3
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	4618      	mov	r0, r3
 8007056:	f000 f8e3 	bl	8007220 <RTC_Bcd2ToByte>
 800705a:	4603      	mov	r3, r0
 800705c:	461a      	mov	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	789b      	ldrb	r3, [r3, #2]
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f8da 	bl	8007220 <RTC_Bcd2ToByte>
 800706c:	4603      	mov	r3, r0
 800706e:	461a      	mov	r2, r3
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007098:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800709c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	0a1b      	lsrs	r3, r3, #8
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	0b5b      	lsrs	r3, r3, #13
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11a      	bne.n	8007112 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	4618      	mov	r0, r3
 80070e2:	f000 f89d 	bl	8007220 <RTC_Bcd2ToByte>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 f894 	bl	8007220 <RTC_Bcd2ToByte>
 80070f8:	4603      	mov	r3, r0
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	789b      	ldrb	r3, [r3, #2]
 8007104:	4618      	mov	r0, r3
 8007106:	f000 f88b 	bl	8007220 <RTC_Bcd2ToByte>
 800710a:	4603      	mov	r3, r0
 800710c:	461a      	mov	r2, r3
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3718      	adds	r7, #24
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0d      	ldr	r2, [pc, #52]	; (8007164 <HAL_RTC_WaitForSynchro+0x48>)
 800712e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007130:	f7fc ff54 	bl	8003fdc <HAL_GetTick>
 8007134:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007136:	e009      	b.n	800714c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007138:	f7fc ff50 	bl	8003fdc <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007146:	d901      	bls.n	800714c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e007      	b.n	800715c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f003 0320 	and.w	r3, r3, #32
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0ee      	beq.n	8007138 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	00017f5f 	.word	0x00017f5f

08007168 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d122      	bne.n	80071cc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68da      	ldr	r2, [r3, #12]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007194:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007196:	f7fc ff21 	bl	8003fdc <HAL_GetTick>
 800719a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800719c:	e00c      	b.n	80071b8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800719e:	f7fc ff1d 	bl	8003fdc <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071ac:	d904      	bls.n	80071b8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2204      	movs	r2, #4
 80071b2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <RTC_EnterInitMode+0x64>
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d1e8      	bne.n	800719e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0320 	and.w	r3, r3, #32
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff ff8b 	bl	800711c <HAL_RTC_WaitForSynchro>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d004      	beq.n	8007216 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2204      	movs	r2, #4
 8007210:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800722e:	79fb      	ldrb	r3, [r7, #7]
 8007230:	091b      	lsrs	r3, r3, #4
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	4613      	mov	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4413      	add	r3, r2
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	b2da      	uxtb	r2, r3
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4413      	add	r3, r2
 800724e:	b2db      	uxtb	r3, r3
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e07b      	b.n	8007366 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b00      	cmp	r3, #0
 8007274:	d108      	bne.n	8007288 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800727e:	d009      	beq.n	8007294 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	61da      	str	r2, [r3, #28]
 8007286:	e005      	b.n	8007294 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fc fa4c 	bl	800374c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072dc:	431a      	orrs	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	431a      	orrs	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007304:	431a      	orrs	r2, r3
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007318:	ea42 0103 	orr.w	r1, r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f003 0104 	and.w	r1, r3, #4
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	f003 0210 	and.w	r2, r3, #16
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007354:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	603b      	str	r3, [r7, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800737e:	2300      	movs	r3, #0
 8007380:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_SPI_Transmit+0x22>
 800738c:	2302      	movs	r3, #2
 800738e:	e12d      	b.n	80075ec <HAL_SPI_Transmit+0x27e>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007398:	f7fc fe20 	bl	8003fdc <HAL_GetTick>
 800739c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800739e:	88fb      	ldrh	r3, [r7, #6]
 80073a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d002      	beq.n	80073b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073ae:	2302      	movs	r3, #2
 80073b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073b2:	e116      	b.n	80075e2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_Transmit+0x52>
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073c4:	e10d      	b.n	80075e2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2203      	movs	r2, #3
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	88fa      	ldrh	r2, [r7, #6]
 80073de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	88fa      	ldrh	r2, [r7, #6]
 80073e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740c:	d10f      	bne.n	800742e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800741c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d007      	beq.n	800744c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800744a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007454:	d14f      	bne.n	80074f6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_SPI_Transmit+0xf6>
 800745e:	8afb      	ldrh	r3, [r7, #22]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d142      	bne.n	80074ea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007474:	1c9a      	adds	r2, r3, #2
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800747e:	b29b      	uxth	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	b29a      	uxth	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007488:	e02f      	b.n	80074ea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	2b02      	cmp	r3, #2
 8007496:	d112      	bne.n	80074be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749c:	881a      	ldrh	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a8:	1c9a      	adds	r2, r3, #2
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80074bc:	e015      	b.n	80074ea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074be:	f7fc fd8d 	bl	8003fdc <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d803      	bhi.n	80074d6 <HAL_SPI_Transmit+0x168>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074d4:	d102      	bne.n	80074dc <HAL_SPI_Transmit+0x16e>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d106      	bne.n	80074ea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80074e8:	e07b      	b.n	80075e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1ca      	bne.n	800748a <HAL_SPI_Transmit+0x11c>
 80074f4:	e050      	b.n	8007598 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_SPI_Transmit+0x196>
 80074fe:	8afb      	ldrh	r3, [r7, #22]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d144      	bne.n	800758e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	330c      	adds	r3, #12
 800750e:	7812      	ldrb	r2, [r2, #0]
 8007510:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007520:	b29b      	uxth	r3, r3
 8007522:	3b01      	subs	r3, #1
 8007524:	b29a      	uxth	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800752a:	e030      	b.n	800758e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b02      	cmp	r3, #2
 8007538:	d113      	bne.n	8007562 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007556:	b29b      	uxth	r3, r3
 8007558:	3b01      	subs	r3, #1
 800755a:	b29a      	uxth	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007560:	e015      	b.n	800758e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007562:	f7fc fd3b 	bl	8003fdc <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d803      	bhi.n	800757a <HAL_SPI_Transmit+0x20c>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007578:	d102      	bne.n	8007580 <HAL_SPI_Transmit+0x212>
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d106      	bne.n	800758e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800758c:	e029      	b.n	80075e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1c9      	bne.n	800752c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fbdf 	bl	8007d60 <SPI_EndRxTxTransaction>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d002      	beq.n	80075ae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	613b      	str	r3, [r7, #16]
 80075ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d002      	beq.n	80075da <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	77fb      	strb	r3, [r7, #31]
 80075d8:	e003      	b.n	80075e2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80075ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800760e:	b2db      	uxtb	r3, r3
 8007610:	2b01      	cmp	r3, #1
 8007612:	d002      	beq.n	800761a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007614:	2302      	movs	r3, #2
 8007616:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007618:	e0fb      	b.n	8007812 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007622:	d112      	bne.n	800764a <HAL_SPI_Receive+0x56>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10e      	bne.n	800764a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2204      	movs	r2, #4
 8007630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007634:	88fa      	ldrh	r2, [r7, #6]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	9300      	str	r3, [sp, #0]
 800763a:	4613      	mov	r3, r2
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	68b9      	ldr	r1, [r7, #8]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f8ef 	bl	8007824 <HAL_SPI_TransmitReceive>
 8007646:	4603      	mov	r3, r0
 8007648:	e0e8      	b.n	800781c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_SPI_Receive+0x64>
 8007654:	2302      	movs	r3, #2
 8007656:	e0e1      	b.n	800781c <HAL_SPI_Receive+0x228>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007660:	f7fc fcbc 	bl	8003fdc <HAL_GetTick>
 8007664:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <HAL_SPI_Receive+0x7e>
 800766c:	88fb      	ldrh	r3, [r7, #6]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007676:	e0cc      	b.n	8007812 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2204      	movs	r2, #4
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	88fa      	ldrh	r2, [r7, #6]
 8007696:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2200      	movs	r2, #0
 800769c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076be:	d10f      	bne.n	80076e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d007      	beq.n	80076fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d16a      	bne.n	80077dc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007706:	e032      	b.n	800776e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b01      	cmp	r3, #1
 8007714:	d115      	bne.n	8007742 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f103 020c 	add.w	r2, r3, #12
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	7812      	ldrb	r2, [r2, #0]
 8007724:	b2d2      	uxtb	r2, r2
 8007726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	3b01      	subs	r3, #1
 800773a:	b29a      	uxth	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007740:	e015      	b.n	800776e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007742:	f7fc fc4b 	bl	8003fdc <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d803      	bhi.n	800775a <HAL_SPI_Receive+0x166>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007758:	d102      	bne.n	8007760 <HAL_SPI_Receive+0x16c>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d106      	bne.n	800776e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8007760:	2303      	movs	r3, #3
 8007762:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800776c:	e051      	b.n	8007812 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1c7      	bne.n	8007708 <HAL_SPI_Receive+0x114>
 8007778:	e035      	b.n	80077e6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b01      	cmp	r3, #1
 8007786:	d113      	bne.n	80077b0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	b292      	uxth	r2, r2
 8007794:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077ae:	e015      	b.n	80077dc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077b0:	f7fc fc14 	bl	8003fdc <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	683a      	ldr	r2, [r7, #0]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d803      	bhi.n	80077c8 <HAL_SPI_Receive+0x1d4>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c6:	d102      	bne.n	80077ce <HAL_SPI_Receive+0x1da>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d106      	bne.n	80077dc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80077da:	e01a      	b.n	8007812 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e0:	b29b      	uxth	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1c9      	bne.n	800777a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 fa52 	bl	8007c94 <SPI_EndRxTransaction>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	75fb      	strb	r3, [r7, #23]
 8007808:	e003      	b.n	8007812 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800781a:	7dfb      	ldrb	r3, [r7, #23]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	; 0x30
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007832:	2301      	movs	r3, #1
 8007834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007836:	2300      	movs	r3, #0
 8007838:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007842:	2b01      	cmp	r3, #1
 8007844:	d101      	bne.n	800784a <HAL_SPI_TransmitReceive+0x26>
 8007846:	2302      	movs	r3, #2
 8007848:	e198      	b.n	8007b7c <HAL_SPI_TransmitReceive+0x358>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007852:	f7fc fbc3 	bl	8003fdc <HAL_GetTick>
 8007856:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800785e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007868:	887b      	ldrh	r3, [r7, #2]
 800786a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800786c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007870:	2b01      	cmp	r3, #1
 8007872:	d00f      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x70>
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800787a:	d107      	bne.n	800788c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <HAL_SPI_TransmitReceive+0x68>
 8007884:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007888:	2b04      	cmp	r3, #4
 800788a:	d003      	beq.n	8007894 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800788c:	2302      	movs	r3, #2
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007892:	e16d      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0x82>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <HAL_SPI_TransmitReceive+0x82>
 80078a0:	887b      	ldrh	r3, [r7, #2]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d103      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078ac:	e160      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b04      	cmp	r3, #4
 80078b8:	d003      	beq.n	80078c2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2205      	movs	r2, #5
 80078be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	887a      	ldrh	r2, [r7, #2]
 80078d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	887a      	ldrh	r2, [r7, #2]
 80078d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	887a      	ldrh	r2, [r7, #2]
 80078e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	887a      	ldrh	r2, [r7, #2]
 80078ea:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2200      	movs	r2, #0
 80078f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007902:	2b40      	cmp	r3, #64	; 0x40
 8007904:	d007      	beq.n	8007916 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800791e:	d17c      	bne.n	8007a1a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <HAL_SPI_TransmitReceive+0x10a>
 8007928:	8b7b      	ldrh	r3, [r7, #26]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d16a      	bne.n	8007a04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007932:	881a      	ldrh	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007952:	e057      	b.n	8007a04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 0302 	and.w	r3, r3, #2
 800795e:	2b02      	cmp	r3, #2
 8007960:	d11b      	bne.n	800799a <HAL_SPI_TransmitReceive+0x176>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007966:	b29b      	uxth	r3, r3
 8007968:	2b00      	cmp	r3, #0
 800796a:	d016      	beq.n	800799a <HAL_SPI_TransmitReceive+0x176>
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	2b01      	cmp	r3, #1
 8007970:	d113      	bne.n	800799a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	881a      	ldrh	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	1c9a      	adds	r2, r3, #2
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d119      	bne.n	80079dc <HAL_SPI_TransmitReceive+0x1b8>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d014      	beq.n	80079dc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68da      	ldr	r2, [r3, #12]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079bc:	b292      	uxth	r2, r2
 80079be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	1c9a      	adds	r2, r3, #2
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079d8:	2301      	movs	r3, #1
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80079dc:	f7fc fafe 	bl	8003fdc <HAL_GetTick>
 80079e0:	4602      	mov	r2, r0
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	1ad3      	subs	r3, r2, r3
 80079e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d80b      	bhi.n	8007a04 <HAL_SPI_TransmitReceive+0x1e0>
 80079ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079f2:	d007      	beq.n	8007a04 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007a02:	e0b5      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1a2      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x130>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d19d      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x130>
 8007a18:	e080      	b.n	8007b1c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x204>
 8007a22:	8b7b      	ldrh	r3, [r7, #26]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d16f      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	330c      	adds	r3, #12
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4e:	e05b      	b.n	8007b08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d11c      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x274>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d017      	beq.n	8007a98 <HAL_SPI_TransmitReceive+0x274>
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d114      	bne.n	8007a98 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a94:	2300      	movs	r3, #0
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d119      	bne.n	8007ada <HAL_SPI_TransmitReceive+0x2b6>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d014      	beq.n	8007ada <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aba:	b2d2      	uxtb	r2, r2
 8007abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac2:	1c5a      	adds	r2, r3, #1
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007ada:	f7fc fa7f 	bl	8003fdc <HAL_GetTick>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	1ad3      	subs	r3, r2, r3
 8007ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d803      	bhi.n	8007af2 <HAL_SPI_TransmitReceive+0x2ce>
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007af0:	d102      	bne.n	8007af8 <HAL_SPI_TransmitReceive+0x2d4>
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d107      	bne.n	8007b08 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8007b06:	e033      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d19e      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x22c>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d199      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f000 f91d 	bl	8007d60 <SPI_EndRxTxTransaction>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d006      	beq.n	8007b3a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2220      	movs	r2, #32
 8007b36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b38:	e01a      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10a      	bne.n	8007b58 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b42:	2300      	movs	r3, #0
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	617b      	str	r3, [r7, #20]
 8007b56:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e003      	b.n	8007b70 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3730      	adds	r7, #48	; 0x30
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b088      	sub	sp, #32
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	603b      	str	r3, [r7, #0]
 8007b90:	4613      	mov	r3, r2
 8007b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007b94:	f7fc fa22 	bl	8003fdc <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	1a9b      	subs	r3, r3, r2
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ba4:	f7fc fa1a 	bl	8003fdc <HAL_GetTick>
 8007ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007baa:	4b39      	ldr	r3, [pc, #228]	; (8007c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	015b      	lsls	r3, r3, #5
 8007bb0:	0d1b      	lsrs	r3, r3, #20
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007bba:	e054      	b.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc2:	d050      	beq.n	8007c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007bc4:	f7fc fa0a 	bl	8003fdc <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	69fa      	ldr	r2, [r7, #28]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d902      	bls.n	8007bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d13d      	bne.n	8007c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bf2:	d111      	bne.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bfc:	d004      	beq.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c06:	d107      	bne.n	8007c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c20:	d10f      	bne.n	8007c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2201      	movs	r2, #1
 8007c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	e017      	b.n	8007c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d19b      	bne.n	8007bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000008 	.word	0x20000008

08007c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af02      	add	r7, sp, #8
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ca8:	d111      	bne.n	8007cce <SPI_EndRxTransaction+0x3a>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb2:	d004      	beq.n	8007cbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbc:	d107      	bne.n	8007cce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ccc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cd6:	d12a      	bne.n	8007d2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce0:	d012      	beq.n	8007d08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f7ff ff49 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d02d      	beq.n	8007d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	f043 0220 	orr.w	r2, r3, #32
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e026      	b.n	8007d56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2101      	movs	r1, #1
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ff36 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d01a      	beq.n	8007d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f043 0220 	orr.w	r2, r3, #32
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e013      	b.n	8007d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	9300      	str	r3, [sp, #0]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2200      	movs	r2, #0
 8007d36:	2101      	movs	r1, #1
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7ff ff23 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d007      	beq.n	8007d54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d48:	f043 0220 	orr.w	r2, r3, #32
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007d50:	2303      	movs	r3, #3
 8007d52:	e000      	b.n	8007d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
	...

08007d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2201      	movs	r2, #1
 8007d74:	2102      	movs	r1, #2
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff ff04 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d86:	f043 0220 	orr.w	r2, r3, #32
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e032      	b.n	8007df8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007d92:	4b1b      	ldr	r3, [pc, #108]	; (8007e00 <SPI_EndRxTxTransaction+0xa0>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1b      	ldr	r2, [pc, #108]	; (8007e04 <SPI_EndRxTxTransaction+0xa4>)
 8007d98:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9c:	0d5b      	lsrs	r3, r3, #21
 8007d9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007db0:	d112      	bne.n	8007dd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2200      	movs	r2, #0
 8007dba:	2180      	movs	r1, #128	; 0x80
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7ff fee1 	bl	8007b84 <SPI_WaitFlagStateUntilTimeout>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d016      	beq.n	8007df6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dcc:	f043 0220 	orr.w	r2, r3, #32
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e00f      	b.n	8007df8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	3b01      	subs	r3, #1
 8007de2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dee:	2b80      	cmp	r3, #128	; 0x80
 8007df0:	d0f2      	beq.n	8007dd8 <SPI_EndRxTxTransaction+0x78>
 8007df2:	e000      	b.n	8007df6 <SPI_EndRxTxTransaction+0x96>
        break;
 8007df4:	bf00      	nop
  }

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000008 	.word	0x20000008
 8007e04:	165e9f81 	.word	0x165e9f81

08007e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e041      	b.n	8007e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f839 	bl	8007ea6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4619      	mov	r1, r3
 8007e46:	4610      	mov	r0, r2
 8007e48:	f000 f9c0 	bl	80081cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3708      	adds	r7, #8
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d001      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e04e      	b.n	8007f72 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a23      	ldr	r2, [pc, #140]	; (8007f80 <HAL_TIM_Base_Start_IT+0xc4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d022      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d01d      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1f      	ldr	r2, [pc, #124]	; (8007f84 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d018      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a1e      	ldr	r2, [pc, #120]	; (8007f88 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1c      	ldr	r2, [pc, #112]	; (8007f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1b      	ldr	r2, [pc, #108]	; (8007f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a19      	ldr	r2, [pc, #100]	; (8007f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a18      	ldr	r2, [pc, #96]	; (8007f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d111      	bne.n	8007f60 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b06      	cmp	r3, #6
 8007f4c:	d010      	beq.n	8007f70 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f042 0201 	orr.w	r2, r2, #1
 8007f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5e:	e007      	b.n	8007f70 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0201 	orr.w	r2, r2, #1
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	40010000 	.word	0x40010000
 8007f84:	40000400 	.word	0x40000400
 8007f88:	40000800 	.word	0x40000800
 8007f8c:	40000c00 	.word	0x40000c00
 8007f90:	40010400 	.word	0x40010400
 8007f94:	40014000 	.word	0x40014000
 8007f98:	40001800 	.word	0x40001800

08007f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	f003 0302 	and.w	r3, r3, #2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d020      	beq.n	8008000 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01b      	beq.n	8008000 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0202 	mvn.w	r2, #2
 8007fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8d2 	bl	8008190 <HAL_TIM_IC_CaptureCallback>
 8007fec:	e005      	b.n	8007ffa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f8c4 	bl	800817c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f8d5 	bl	80081a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	2b00      	cmp	r3, #0
 8008008:	d020      	beq.n	800804c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f06f 0204 	mvn.w	r2, #4
 800801c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f8ac 	bl	8008190 <HAL_TIM_IC_CaptureCallback>
 8008038:	e005      	b.n	8008046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f89e 	bl	800817c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f8af 	bl	80081a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	f003 0308 	and.w	r3, r3, #8
 8008052:	2b00      	cmp	r3, #0
 8008054:	d020      	beq.n	8008098 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d01b      	beq.n	8008098 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f06f 0208 	mvn.w	r2, #8
 8008068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d003      	beq.n	8008086 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f886 	bl	8008190 <HAL_TIM_IC_CaptureCallback>
 8008084:	e005      	b.n	8008092 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f878 	bl	800817c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 f889 	bl	80081a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d020      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f003 0310 	and.w	r3, r3, #16
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d01b      	beq.n	80080e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f06f 0210 	mvn.w	r2, #16
 80080b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2208      	movs	r2, #8
 80080ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f860 	bl	8008190 <HAL_TIM_IC_CaptureCallback>
 80080d0:	e005      	b.n	80080de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f852 	bl	800817c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f863 	bl	80081a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f003 0301 	and.w	r3, r3, #1
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d007      	beq.n	8008108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0201 	mvn.w	r2, #1
 8008100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7fa ffcc 	bl	80030a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00c      	beq.n	800812c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f906 	bl	8008338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00c      	beq.n	8008150 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d007      	beq.n	8008150 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f834 	bl	80081b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00c      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d007      	beq.n	8008174 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f06f 0220 	mvn.w	r2, #32
 800816c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8d8 	bl	8008324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081ac:	bf00      	nop
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a46      	ldr	r2, [pc, #280]	; (80082f8 <TIM_Base_SetConfig+0x12c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d013      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081ea:	d00f      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a43      	ldr	r2, [pc, #268]	; (80082fc <TIM_Base_SetConfig+0x130>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a42      	ldr	r2, [pc, #264]	; (8008300 <TIM_Base_SetConfig+0x134>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a41      	ldr	r2, [pc, #260]	; (8008304 <TIM_Base_SetConfig+0x138>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_Base_SetConfig+0x40>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a40      	ldr	r2, [pc, #256]	; (8008308 <TIM_Base_SetConfig+0x13c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d108      	bne.n	800821e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a35      	ldr	r2, [pc, #212]	; (80082f8 <TIM_Base_SetConfig+0x12c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d02b      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800822c:	d027      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a32      	ldr	r2, [pc, #200]	; (80082fc <TIM_Base_SetConfig+0x130>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d023      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a31      	ldr	r2, [pc, #196]	; (8008300 <TIM_Base_SetConfig+0x134>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d01f      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a30      	ldr	r2, [pc, #192]	; (8008304 <TIM_Base_SetConfig+0x138>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01b      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a2f      	ldr	r2, [pc, #188]	; (8008308 <TIM_Base_SetConfig+0x13c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d017      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a2e      	ldr	r2, [pc, #184]	; (800830c <TIM_Base_SetConfig+0x140>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a2d      	ldr	r2, [pc, #180]	; (8008310 <TIM_Base_SetConfig+0x144>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00f      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a2c      	ldr	r2, [pc, #176]	; (8008314 <TIM_Base_SetConfig+0x148>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d00b      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a2b      	ldr	r2, [pc, #172]	; (8008318 <TIM_Base_SetConfig+0x14c>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d007      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2a      	ldr	r2, [pc, #168]	; (800831c <TIM_Base_SetConfig+0x150>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d003      	beq.n	800827e <TIM_Base_SetConfig+0xb2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a29      	ldr	r2, [pc, #164]	; (8008320 <TIM_Base_SetConfig+0x154>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d108      	bne.n	8008290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	689a      	ldr	r2, [r3, #8]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a10      	ldr	r2, [pc, #64]	; (80082f8 <TIM_Base_SetConfig+0x12c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_Base_SetConfig+0xf8>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a12      	ldr	r2, [pc, #72]	; (8008308 <TIM_Base_SetConfig+0x13c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d103      	bne.n	80082cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2201      	movs	r2, #1
 80082d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d105      	bne.n	80082ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	f023 0201 	bic.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	611a      	str	r2, [r3, #16]
  }
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40010400 	.word	0x40010400
 800830c:	40014000 	.word	0x40014000
 8008310:	40014400 	.word	0x40014400
 8008314:	40014800 	.word	0x40014800
 8008318:	40001800 	.word	0x40001800
 800831c:	40001c00 	.word	0x40001c00
 8008320:	40002000 	.word	0x40002000

08008324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d101      	bne.n	800835e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e042      	b.n	80083e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2b00      	cmp	r3, #0
 8008368:	d106      	bne.n	8008378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f7fb fc2a 	bl	8003bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2224      	movs	r2, #36	; 0x24
 800837c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800838e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f973 	bl	800867c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	695a      	ldr	r2, [r3, #20]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2220      	movs	r2, #32
 80083d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2220      	movs	r2, #32
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	; 0x28
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	4613      	mov	r3, r2
 80083fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b20      	cmp	r3, #32
 800840a:	d175      	bne.n	80084f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <HAL_UART_Transmit+0x2c>
 8008412:	88fb      	ldrh	r3, [r7, #6]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008418:	2301      	movs	r3, #1
 800841a:	e06e      	b.n	80084fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2221      	movs	r2, #33	; 0x21
 8008426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800842a:	f7fb fdd7 	bl	8003fdc <HAL_GetTick>
 800842e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	88fa      	ldrh	r2, [r7, #6]
 8008434:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	88fa      	ldrh	r2, [r7, #6]
 800843a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008444:	d108      	bne.n	8008458 <HAL_UART_Transmit+0x6c>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d104      	bne.n	8008458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	61bb      	str	r3, [r7, #24]
 8008456:	e003      	b.n	8008460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800845c:	2300      	movs	r3, #0
 800845e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008460:	e02e      	b.n	80084c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	9300      	str	r3, [sp, #0]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2200      	movs	r2, #0
 800846a:	2180      	movs	r1, #128	; 0x80
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 f848 	bl	8008502 <UART_WaitOnFlagUntilTimeout>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2220      	movs	r2, #32
 800847c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e03a      	b.n	80084fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008484:	69fb      	ldr	r3, [r7, #28]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10b      	bne.n	80084a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	461a      	mov	r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	3302      	adds	r3, #2
 800849e:	61bb      	str	r3, [r7, #24]
 80084a0:	e007      	b.n	80084b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	781a      	ldrb	r2, [r3, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	3301      	adds	r3, #1
 80084b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084b6:	b29b      	uxth	r3, r3
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1cb      	bne.n	8008462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2200      	movs	r2, #0
 80084d2:	2140      	movs	r1, #64	; 0x40
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f814 	bl	8008502 <UART_WaitOnFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2220      	movs	r2, #32
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e006      	b.n	80084fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	e000      	b.n	80084fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80084f8:	2302      	movs	r3, #2
  }
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3720      	adds	r7, #32
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	60f8      	str	r0, [r7, #12]
 800850a:	60b9      	str	r1, [r7, #8]
 800850c:	603b      	str	r3, [r7, #0]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008512:	e03b      	b.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851a:	d037      	beq.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800851c:	f7fb fd5e 	bl	8003fdc <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	429a      	cmp	r2, r3
 800852a:	d302      	bcc.n	8008532 <UART_WaitOnFlagUntilTimeout+0x30>
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e03a      	b.n	80085ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d023      	beq.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b80      	cmp	r3, #128	; 0x80
 8008548:	d020      	beq.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	d01d      	beq.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b08      	cmp	r3, #8
 800855c:	d116      	bne.n	800858c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	617b      	str	r3, [r7, #20]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	617b      	str	r3, [r7, #20]
 8008572:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 f81d 	bl	80085b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2208      	movs	r2, #8
 800857e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e00f      	b.n	80085ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d0b4      	beq.n	8008514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b095      	sub	sp, #84	; 0x54
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	330c      	adds	r3, #12
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	330c      	adds	r3, #12
 80085da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085dc:	643a      	str	r2, [r7, #64]	; 0x40
 80085de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e5      	bne.n	80085bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3314      	adds	r3, #20
 80085f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	e853 3f00 	ldrex	r3, [r3]
 80085fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	f023 0301 	bic.w	r3, r3, #1
 8008606:	64bb      	str	r3, [r7, #72]	; 0x48
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3314      	adds	r3, #20
 800860e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008610:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008618:	e841 2300 	strex	r3, r2, [r1]
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e5      	bne.n	80085f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008628:	2b01      	cmp	r3, #1
 800862a:	d119      	bne.n	8008660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	e853 3f00 	ldrex	r3, [r3]
 800863a:	60bb      	str	r3, [r7, #8]
   return(result);
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f023 0310 	bic.w	r3, r3, #16
 8008642:	647b      	str	r3, [r7, #68]	; 0x44
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800864c:	61ba      	str	r2, [r7, #24]
 800864e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008650:	6979      	ldr	r1, [r7, #20]
 8008652:	69ba      	ldr	r2, [r7, #24]
 8008654:	e841 2300 	strex	r3, r2, [r1]
 8008658:	613b      	str	r3, [r7, #16]
   return(result);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d1e5      	bne.n	800862c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800866e:	bf00      	nop
 8008670:	3754      	adds	r7, #84	; 0x54
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
	...

0800867c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800867c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008680:	b0c0      	sub	sp, #256	; 0x100
 8008682:	af00      	add	r7, sp, #0
 8008684:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008698:	68d9      	ldr	r1, [r3, #12]
 800869a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	ea40 0301 	orr.w	r3, r0, r1
 80086a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086aa:	689a      	ldr	r2, [r3, #8]
 80086ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	431a      	orrs	r2, r3
 80086b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	431a      	orrs	r2, r3
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c0:	69db      	ldr	r3, [r3, #28]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80086d4:	f021 010c 	bic.w	r1, r1, #12
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80086e2:	430b      	orrs	r3, r1
 80086e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086f6:	6999      	ldr	r1, [r3, #24]
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	ea40 0301 	orr.w	r3, r0, r1
 8008702:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	4b8f      	ldr	r3, [pc, #572]	; (8008948 <UART_SetConfig+0x2cc>)
 800870c:	429a      	cmp	r2, r3
 800870e:	d005      	beq.n	800871c <UART_SetConfig+0xa0>
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b8d      	ldr	r3, [pc, #564]	; (800894c <UART_SetConfig+0x2d0>)
 8008718:	429a      	cmp	r2, r3
 800871a:	d104      	bne.n	8008726 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800871c:	f7fe faa6 	bl	8006c6c <HAL_RCC_GetPCLK2Freq>
 8008720:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008724:	e003      	b.n	800872e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008726:	f7fe fa8d 	bl	8006c44 <HAL_RCC_GetPCLK1Freq>
 800872a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800872e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008732:	69db      	ldr	r3, [r3, #28]
 8008734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008738:	f040 810c 	bne.w	8008954 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800873c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008740:	2200      	movs	r2, #0
 8008742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008746:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800874a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800874e:	4622      	mov	r2, r4
 8008750:	462b      	mov	r3, r5
 8008752:	1891      	adds	r1, r2, r2
 8008754:	65b9      	str	r1, [r7, #88]	; 0x58
 8008756:	415b      	adcs	r3, r3
 8008758:	65fb      	str	r3, [r7, #92]	; 0x5c
 800875a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800875e:	4621      	mov	r1, r4
 8008760:	eb12 0801 	adds.w	r8, r2, r1
 8008764:	4629      	mov	r1, r5
 8008766:	eb43 0901 	adc.w	r9, r3, r1
 800876a:	f04f 0200 	mov.w	r2, #0
 800876e:	f04f 0300 	mov.w	r3, #0
 8008772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800877a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800877e:	4690      	mov	r8, r2
 8008780:	4699      	mov	r9, r3
 8008782:	4623      	mov	r3, r4
 8008784:	eb18 0303 	adds.w	r3, r8, r3
 8008788:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800878c:	462b      	mov	r3, r5
 800878e:	eb49 0303 	adc.w	r3, r9, r3
 8008792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087a2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80087a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80087aa:	460b      	mov	r3, r1
 80087ac:	18db      	adds	r3, r3, r3
 80087ae:	653b      	str	r3, [r7, #80]	; 0x50
 80087b0:	4613      	mov	r3, r2
 80087b2:	eb42 0303 	adc.w	r3, r2, r3
 80087b6:	657b      	str	r3, [r7, #84]	; 0x54
 80087b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80087bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80087c0:	f7f8 fa02 	bl	8000bc8 <__aeabi_uldivmod>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	4b61      	ldr	r3, [pc, #388]	; (8008950 <UART_SetConfig+0x2d4>)
 80087ca:	fba3 2302 	umull	r2, r3, r3, r2
 80087ce:	095b      	lsrs	r3, r3, #5
 80087d0:	011c      	lsls	r4, r3, #4
 80087d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087dc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80087e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	1891      	adds	r1, r2, r2
 80087ea:	64b9      	str	r1, [r7, #72]	; 0x48
 80087ec:	415b      	adcs	r3, r3
 80087ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087f4:	4641      	mov	r1, r8
 80087f6:	eb12 0a01 	adds.w	sl, r2, r1
 80087fa:	4649      	mov	r1, r9
 80087fc:	eb43 0b01 	adc.w	fp, r3, r1
 8008800:	f04f 0200 	mov.w	r2, #0
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800880c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008814:	4692      	mov	sl, r2
 8008816:	469b      	mov	fp, r3
 8008818:	4643      	mov	r3, r8
 800881a:	eb1a 0303 	adds.w	r3, sl, r3
 800881e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008822:	464b      	mov	r3, r9
 8008824:	eb4b 0303 	adc.w	r3, fp, r3
 8008828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800882c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008838:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800883c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008840:	460b      	mov	r3, r1
 8008842:	18db      	adds	r3, r3, r3
 8008844:	643b      	str	r3, [r7, #64]	; 0x40
 8008846:	4613      	mov	r3, r2
 8008848:	eb42 0303 	adc.w	r3, r2, r3
 800884c:	647b      	str	r3, [r7, #68]	; 0x44
 800884e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008852:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008856:	f7f8 f9b7 	bl	8000bc8 <__aeabi_uldivmod>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4611      	mov	r1, r2
 8008860:	4b3b      	ldr	r3, [pc, #236]	; (8008950 <UART_SetConfig+0x2d4>)
 8008862:	fba3 2301 	umull	r2, r3, r3, r1
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	2264      	movs	r2, #100	; 0x64
 800886a:	fb02 f303 	mul.w	r3, r2, r3
 800886e:	1acb      	subs	r3, r1, r3
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <UART_SetConfig+0x2d4>)
 8008878:	fba3 2302 	umull	r2, r3, r3, r2
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008884:	441c      	add	r4, r3
 8008886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800888a:	2200      	movs	r2, #0
 800888c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008890:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008894:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008898:	4642      	mov	r2, r8
 800889a:	464b      	mov	r3, r9
 800889c:	1891      	adds	r1, r2, r2
 800889e:	63b9      	str	r1, [r7, #56]	; 0x38
 80088a0:	415b      	adcs	r3, r3
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80088a8:	4641      	mov	r1, r8
 80088aa:	1851      	adds	r1, r2, r1
 80088ac:	6339      	str	r1, [r7, #48]	; 0x30
 80088ae:	4649      	mov	r1, r9
 80088b0:	414b      	adcs	r3, r1
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34
 80088b4:	f04f 0200 	mov.w	r2, #0
 80088b8:	f04f 0300 	mov.w	r3, #0
 80088bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80088c0:	4659      	mov	r1, fp
 80088c2:	00cb      	lsls	r3, r1, #3
 80088c4:	4651      	mov	r1, sl
 80088c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088ca:	4651      	mov	r1, sl
 80088cc:	00ca      	lsls	r2, r1, #3
 80088ce:	4610      	mov	r0, r2
 80088d0:	4619      	mov	r1, r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	4642      	mov	r2, r8
 80088d6:	189b      	adds	r3, r3, r2
 80088d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80088dc:	464b      	mov	r3, r9
 80088de:	460a      	mov	r2, r1
 80088e0:	eb42 0303 	adc.w	r3, r2, r3
 80088e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088f4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088fc:	460b      	mov	r3, r1
 80088fe:	18db      	adds	r3, r3, r3
 8008900:	62bb      	str	r3, [r7, #40]	; 0x28
 8008902:	4613      	mov	r3, r2
 8008904:	eb42 0303 	adc.w	r3, r2, r3
 8008908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800890a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800890e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008912:	f7f8 f959 	bl	8000bc8 <__aeabi_uldivmod>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <UART_SetConfig+0x2d4>)
 800891c:	fba3 1302 	umull	r1, r3, r3, r2
 8008920:	095b      	lsrs	r3, r3, #5
 8008922:	2164      	movs	r1, #100	; 0x64
 8008924:	fb01 f303 	mul.w	r3, r1, r3
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	00db      	lsls	r3, r3, #3
 800892c:	3332      	adds	r3, #50	; 0x32
 800892e:	4a08      	ldr	r2, [pc, #32]	; (8008950 <UART_SetConfig+0x2d4>)
 8008930:	fba2 2303 	umull	r2, r3, r2, r3
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	f003 0207 	and.w	r2, r3, #7
 800893a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4422      	add	r2, r4
 8008942:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008944:	e106      	b.n	8008b54 <UART_SetConfig+0x4d8>
 8008946:	bf00      	nop
 8008948:	40011000 	.word	0x40011000
 800894c:	40011400 	.word	0x40011400
 8008950:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008958:	2200      	movs	r2, #0
 800895a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800895e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008962:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008966:	4642      	mov	r2, r8
 8008968:	464b      	mov	r3, r9
 800896a:	1891      	adds	r1, r2, r2
 800896c:	6239      	str	r1, [r7, #32]
 800896e:	415b      	adcs	r3, r3
 8008970:	627b      	str	r3, [r7, #36]	; 0x24
 8008972:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008976:	4641      	mov	r1, r8
 8008978:	1854      	adds	r4, r2, r1
 800897a:	4649      	mov	r1, r9
 800897c:	eb43 0501 	adc.w	r5, r3, r1
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	00eb      	lsls	r3, r5, #3
 800898a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800898e:	00e2      	lsls	r2, r4, #3
 8008990:	4614      	mov	r4, r2
 8008992:	461d      	mov	r5, r3
 8008994:	4643      	mov	r3, r8
 8008996:	18e3      	adds	r3, r4, r3
 8008998:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800899c:	464b      	mov	r3, r9
 800899e:	eb45 0303 	adc.w	r3, r5, r3
 80089a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80089a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80089c2:	4629      	mov	r1, r5
 80089c4:	008b      	lsls	r3, r1, #2
 80089c6:	4621      	mov	r1, r4
 80089c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089cc:	4621      	mov	r1, r4
 80089ce:	008a      	lsls	r2, r1, #2
 80089d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80089d4:	f7f8 f8f8 	bl	8000bc8 <__aeabi_uldivmod>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4b60      	ldr	r3, [pc, #384]	; (8008b60 <UART_SetConfig+0x4e4>)
 80089de:	fba3 2302 	umull	r2, r3, r3, r2
 80089e2:	095b      	lsrs	r3, r3, #5
 80089e4:	011c      	lsls	r4, r3, #4
 80089e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	1891      	adds	r1, r2, r2
 80089fe:	61b9      	str	r1, [r7, #24]
 8008a00:	415b      	adcs	r3, r3
 8008a02:	61fb      	str	r3, [r7, #28]
 8008a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a08:	4641      	mov	r1, r8
 8008a0a:	1851      	adds	r1, r2, r1
 8008a0c:	6139      	str	r1, [r7, #16]
 8008a0e:	4649      	mov	r1, r9
 8008a10:	414b      	adcs	r3, r1
 8008a12:	617b      	str	r3, [r7, #20]
 8008a14:	f04f 0200 	mov.w	r2, #0
 8008a18:	f04f 0300 	mov.w	r3, #0
 8008a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a20:	4659      	mov	r1, fp
 8008a22:	00cb      	lsls	r3, r1, #3
 8008a24:	4651      	mov	r1, sl
 8008a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a2a:	4651      	mov	r1, sl
 8008a2c:	00ca      	lsls	r2, r1, #3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4619      	mov	r1, r3
 8008a32:	4603      	mov	r3, r0
 8008a34:	4642      	mov	r2, r8
 8008a36:	189b      	adds	r3, r3, r2
 8008a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	460a      	mov	r2, r1
 8008a40:	eb42 0303 	adc.w	r3, r2, r3
 8008a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a52:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a54:	f04f 0200 	mov.w	r2, #0
 8008a58:	f04f 0300 	mov.w	r3, #0
 8008a5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a60:	4649      	mov	r1, r9
 8008a62:	008b      	lsls	r3, r1, #2
 8008a64:	4641      	mov	r1, r8
 8008a66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a6a:	4641      	mov	r1, r8
 8008a6c:	008a      	lsls	r2, r1, #2
 8008a6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a72:	f7f8 f8a9 	bl	8000bc8 <__aeabi_uldivmod>
 8008a76:	4602      	mov	r2, r0
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	4b38      	ldr	r3, [pc, #224]	; (8008b60 <UART_SetConfig+0x4e4>)
 8008a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008a82:	095b      	lsrs	r3, r3, #5
 8008a84:	2264      	movs	r2, #100	; 0x64
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	1acb      	subs	r3, r1, r3
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	3332      	adds	r3, #50	; 0x32
 8008a90:	4a33      	ldr	r2, [pc, #204]	; (8008b60 <UART_SetConfig+0x4e4>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	095b      	lsrs	r3, r3, #5
 8008a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a9c:	441c      	add	r4, r3
 8008a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	673b      	str	r3, [r7, #112]	; 0x70
 8008aa6:	677a      	str	r2, [r7, #116]	; 0x74
 8008aa8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008aac:	4642      	mov	r2, r8
 8008aae:	464b      	mov	r3, r9
 8008ab0:	1891      	adds	r1, r2, r2
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	415b      	adcs	r3, r3
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008abc:	4641      	mov	r1, r8
 8008abe:	1851      	adds	r1, r2, r1
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	414b      	adcs	r3, r1
 8008ac6:	607b      	str	r3, [r7, #4]
 8008ac8:	f04f 0200 	mov.w	r2, #0
 8008acc:	f04f 0300 	mov.w	r3, #0
 8008ad0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ad4:	4659      	mov	r1, fp
 8008ad6:	00cb      	lsls	r3, r1, #3
 8008ad8:	4651      	mov	r1, sl
 8008ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ade:	4651      	mov	r1, sl
 8008ae0:	00ca      	lsls	r2, r1, #3
 8008ae2:	4610      	mov	r0, r2
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	4642      	mov	r2, r8
 8008aea:	189b      	adds	r3, r3, r2
 8008aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aee:	464b      	mov	r3, r9
 8008af0:	460a      	mov	r2, r1
 8008af2:	eb42 0303 	adc.w	r3, r2, r3
 8008af6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	663b      	str	r3, [r7, #96]	; 0x60
 8008b02:	667a      	str	r2, [r7, #100]	; 0x64
 8008b04:	f04f 0200 	mov.w	r2, #0
 8008b08:	f04f 0300 	mov.w	r3, #0
 8008b0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008b10:	4649      	mov	r1, r9
 8008b12:	008b      	lsls	r3, r1, #2
 8008b14:	4641      	mov	r1, r8
 8008b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	008a      	lsls	r2, r1, #2
 8008b1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008b22:	f7f8 f851 	bl	8000bc8 <__aeabi_uldivmod>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <UART_SetConfig+0x4e4>)
 8008b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	2164      	movs	r1, #100	; 0x64
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	3332      	adds	r3, #50	; 0x32
 8008b3e:	4a08      	ldr	r2, [pc, #32]	; (8008b60 <UART_SetConfig+0x4e4>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	095b      	lsrs	r3, r3, #5
 8008b46:	f003 020f 	and.w	r2, r3, #15
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4422      	add	r2, r4
 8008b52:	609a      	str	r2, [r3, #8]
}
 8008b54:	bf00      	nop
 8008b56:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b60:	51eb851f 	.word	0x51eb851f

08008b64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008b64:	b5b0      	push	{r4, r5, r7, lr}
 8008b66:	b08c      	sub	sp, #48	; 0x30
 8008b68:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8008b6a:	4b8f      	ldr	r3, [pc, #572]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008b6c:	22c0      	movs	r2, #192	; 0xc0
 8008b6e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008b70:	4b8d      	ldr	r3, [pc, #564]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008b72:	22a8      	movs	r2, #168	; 0xa8
 8008b74:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8008b76:	4b8c      	ldr	r3, [pc, #560]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008b78:	2202      	movs	r2, #2
 8008b7a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 125;
 8008b7c:	4b8a      	ldr	r3, [pc, #552]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008b7e:	227d      	movs	r2, #125	; 0x7d
 8008b80:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008b82:	4b8a      	ldr	r3, [pc, #552]	; (8008dac <MX_LWIP_Init+0x248>)
 8008b84:	22ff      	movs	r2, #255	; 0xff
 8008b86:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008b88:	4b88      	ldr	r3, [pc, #544]	; (8008dac <MX_LWIP_Init+0x248>)
 8008b8a:	22ff      	movs	r2, #255	; 0xff
 8008b8c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008b8e:	4b87      	ldr	r3, [pc, #540]	; (8008dac <MX_LWIP_Init+0x248>)
 8008b90:	22ff      	movs	r2, #255	; 0xff
 8008b92:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008b94:	4b85      	ldr	r3, [pc, #532]	; (8008dac <MX_LWIP_Init+0x248>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008b9a:	4b85      	ldr	r3, [pc, #532]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008b9c:	22c0      	movs	r2, #192	; 0xc0
 8008b9e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008ba0:	4b83      	ldr	r3, [pc, #524]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008ba2:	22a8      	movs	r2, #168	; 0xa8
 8008ba4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8008ba6:	4b82      	ldr	r3, [pc, #520]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008ba8:	2202      	movs	r2, #2
 8008baa:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008bac:	4b80      	ldr	r3, [pc, #512]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008bae:	2201      	movs	r2, #1
 8008bb0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f00c fe91 	bl	80158dc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008bba:	4b7b      	ldr	r3, [pc, #492]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	061a      	lsls	r2, r3, #24
 8008bc0:	4b79      	ldr	r3, [pc, #484]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bc2:	785b      	ldrb	r3, [r3, #1]
 8008bc4:	041b      	lsls	r3, r3, #16
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	4b77      	ldr	r3, [pc, #476]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bca:	789b      	ldrb	r3, [r3, #2]
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	4a75      	ldr	r2, [pc, #468]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bd2:	78d2      	ldrb	r2, [r2, #3]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	061a      	lsls	r2, r3, #24
 8008bd8:	4b73      	ldr	r3, [pc, #460]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	0619      	lsls	r1, r3, #24
 8008bde:	4b72      	ldr	r3, [pc, #456]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	041b      	lsls	r3, r3, #16
 8008be4:	4319      	orrs	r1, r3
 8008be6:	4b70      	ldr	r3, [pc, #448]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008be8:	789b      	ldrb	r3, [r3, #2]
 8008bea:	021b      	lsls	r3, r3, #8
 8008bec:	430b      	orrs	r3, r1
 8008bee:	496e      	ldr	r1, [pc, #440]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bf0:	78c9      	ldrb	r1, [r1, #3]
 8008bf2:	430b      	orrs	r3, r1
 8008bf4:	021b      	lsls	r3, r3, #8
 8008bf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	4b6a      	ldr	r3, [pc, #424]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	0619      	lsls	r1, r3, #24
 8008c02:	4b69      	ldr	r3, [pc, #420]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	041b      	lsls	r3, r3, #16
 8008c08:	4319      	orrs	r1, r3
 8008c0a:	4b67      	ldr	r3, [pc, #412]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c0c:	789b      	ldrb	r3, [r3, #2]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	430b      	orrs	r3, r1
 8008c12:	4965      	ldr	r1, [pc, #404]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c14:	78c9      	ldrb	r1, [r1, #3]
 8008c16:	430b      	orrs	r3, r1
 8008c18:	0a1b      	lsrs	r3, r3, #8
 8008c1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c1e:	431a      	orrs	r2, r3
 8008c20:	4b61      	ldr	r3, [pc, #388]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	0619      	lsls	r1, r3, #24
 8008c26:	4b60      	ldr	r3, [pc, #384]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	041b      	lsls	r3, r3, #16
 8008c2c:	4319      	orrs	r1, r3
 8008c2e:	4b5e      	ldr	r3, [pc, #376]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c30:	789b      	ldrb	r3, [r3, #2]
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	430b      	orrs	r3, r1
 8008c36:	495c      	ldr	r1, [pc, #368]	; (8008da8 <MX_LWIP_Init+0x244>)
 8008c38:	78c9      	ldrb	r1, [r1, #3]
 8008c3a:	430b      	orrs	r3, r1
 8008c3c:	0e1b      	lsrs	r3, r3, #24
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	4a5c      	ldr	r2, [pc, #368]	; (8008db4 <MX_LWIP_Init+0x250>)
 8008c42:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008c44:	4b59      	ldr	r3, [pc, #356]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	061a      	lsls	r2, r3, #24
 8008c4a:	4b58      	ldr	r3, [pc, #352]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c4c:	785b      	ldrb	r3, [r3, #1]
 8008c4e:	041b      	lsls	r3, r3, #16
 8008c50:	431a      	orrs	r2, r3
 8008c52:	4b56      	ldr	r3, [pc, #344]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c54:	789b      	ldrb	r3, [r3, #2]
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	4a54      	ldr	r2, [pc, #336]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c5c:	78d2      	ldrb	r2, [r2, #3]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	061a      	lsls	r2, r3, #24
 8008c62:	4b52      	ldr	r3, [pc, #328]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	0619      	lsls	r1, r3, #24
 8008c68:	4b50      	ldr	r3, [pc, #320]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c6a:	785b      	ldrb	r3, [r3, #1]
 8008c6c:	041b      	lsls	r3, r3, #16
 8008c6e:	4319      	orrs	r1, r3
 8008c70:	4b4e      	ldr	r3, [pc, #312]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c72:	789b      	ldrb	r3, [r3, #2]
 8008c74:	021b      	lsls	r3, r3, #8
 8008c76:	430b      	orrs	r3, r1
 8008c78:	494c      	ldr	r1, [pc, #304]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c7a:	78c9      	ldrb	r1, [r1, #3]
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	021b      	lsls	r3, r3, #8
 8008c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008c84:	431a      	orrs	r2, r3
 8008c86:	4b49      	ldr	r3, [pc, #292]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	0619      	lsls	r1, r3, #24
 8008c8c:	4b47      	ldr	r3, [pc, #284]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c8e:	785b      	ldrb	r3, [r3, #1]
 8008c90:	041b      	lsls	r3, r3, #16
 8008c92:	4319      	orrs	r1, r3
 8008c94:	4b45      	ldr	r3, [pc, #276]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c96:	789b      	ldrb	r3, [r3, #2]
 8008c98:	021b      	lsls	r3, r3, #8
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	4943      	ldr	r1, [pc, #268]	; (8008dac <MX_LWIP_Init+0x248>)
 8008c9e:	78c9      	ldrb	r1, [r1, #3]
 8008ca0:	430b      	orrs	r3, r1
 8008ca2:	0a1b      	lsrs	r3, r3, #8
 8008ca4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	4b40      	ldr	r3, [pc, #256]	; (8008dac <MX_LWIP_Init+0x248>)
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	0619      	lsls	r1, r3, #24
 8008cb0:	4b3e      	ldr	r3, [pc, #248]	; (8008dac <MX_LWIP_Init+0x248>)
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	041b      	lsls	r3, r3, #16
 8008cb6:	4319      	orrs	r1, r3
 8008cb8:	4b3c      	ldr	r3, [pc, #240]	; (8008dac <MX_LWIP_Init+0x248>)
 8008cba:	789b      	ldrb	r3, [r3, #2]
 8008cbc:	021b      	lsls	r3, r3, #8
 8008cbe:	430b      	orrs	r3, r1
 8008cc0:	493a      	ldr	r1, [pc, #232]	; (8008dac <MX_LWIP_Init+0x248>)
 8008cc2:	78c9      	ldrb	r1, [r1, #3]
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	0e1b      	lsrs	r3, r3, #24
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	4a3b      	ldr	r2, [pc, #236]	; (8008db8 <MX_LWIP_Init+0x254>)
 8008ccc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008cce:	4b38      	ldr	r3, [pc, #224]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	061a      	lsls	r2, r3, #24
 8008cd4:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	4b34      	ldr	r3, [pc, #208]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cde:	789b      	ldrb	r3, [r3, #2]
 8008ce0:	021b      	lsls	r3, r3, #8
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	4a32      	ldr	r2, [pc, #200]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008ce6:	78d2      	ldrb	r2, [r2, #3]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	061a      	lsls	r2, r3, #24
 8008cec:	4b30      	ldr	r3, [pc, #192]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	0619      	lsls	r1, r3, #24
 8008cf2:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cf4:	785b      	ldrb	r3, [r3, #1]
 8008cf6:	041b      	lsls	r3, r3, #16
 8008cf8:	4319      	orrs	r1, r3
 8008cfa:	4b2d      	ldr	r3, [pc, #180]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008cfc:	789b      	ldrb	r3, [r3, #2]
 8008cfe:	021b      	lsls	r3, r3, #8
 8008d00:	430b      	orrs	r3, r1
 8008d02:	492b      	ldr	r1, [pc, #172]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d04:	78c9      	ldrb	r1, [r1, #3]
 8008d06:	430b      	orrs	r3, r1
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d0e:	431a      	orrs	r2, r3
 8008d10:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	0619      	lsls	r1, r3, #24
 8008d16:	4b26      	ldr	r3, [pc, #152]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d18:	785b      	ldrb	r3, [r3, #1]
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	4319      	orrs	r1, r3
 8008d1e:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d20:	789b      	ldrb	r3, [r3, #2]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	430b      	orrs	r3, r1
 8008d26:	4922      	ldr	r1, [pc, #136]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d28:	78c9      	ldrb	r1, [r1, #3]
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d32:	431a      	orrs	r2, r3
 8008d34:	4b1e      	ldr	r3, [pc, #120]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	0619      	lsls	r1, r3, #24
 8008d3a:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	041b      	lsls	r3, r3, #16
 8008d40:	4319      	orrs	r1, r3
 8008d42:	4b1b      	ldr	r3, [pc, #108]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d44:	789b      	ldrb	r3, [r3, #2]
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	430b      	orrs	r3, r1
 8008d4a:	4919      	ldr	r1, [pc, #100]	; (8008db0 <MX_LWIP_Init+0x24c>)
 8008d4c:	78c9      	ldrb	r1, [r1, #3]
 8008d4e:	430b      	orrs	r3, r1
 8008d50:	0e1b      	lsrs	r3, r3, #24
 8008d52:	4313      	orrs	r3, r2
 8008d54:	4a19      	ldr	r2, [pc, #100]	; (8008dbc <MX_LWIP_Init+0x258>)
 8008d56:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <MX_LWIP_Init+0x25c>)
 8008d5a:	9302      	str	r3, [sp, #8]
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <MX_LWIP_Init+0x260>)
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	2300      	movs	r3, #0
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	4b15      	ldr	r3, [pc, #84]	; (8008dbc <MX_LWIP_Init+0x258>)
 8008d66:	4a14      	ldr	r2, [pc, #80]	; (8008db8 <MX_LWIP_Init+0x254>)
 8008d68:	4912      	ldr	r1, [pc, #72]	; (8008db4 <MX_LWIP_Init+0x250>)
 8008d6a:	4817      	ldr	r0, [pc, #92]	; (8008dc8 <MX_LWIP_Init+0x264>)
 8008d6c:	f00d fe4a 	bl	8016a04 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008d70:	4815      	ldr	r0, [pc, #84]	; (8008dc8 <MX_LWIP_Init+0x264>)
 8008d72:	f00d fff9 	bl	8016d68 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8008d76:	4814      	ldr	r0, [pc, #80]	; (8008dc8 <MX_LWIP_Init+0x264>)
 8008d78:	f00e f806 	bl	8016d88 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8008d7c:	4913      	ldr	r1, [pc, #76]	; (8008dcc <MX_LWIP_Init+0x268>)
 8008d7e:	4812      	ldr	r0, [pc, #72]	; (8008dc8 <MX_LWIP_Init+0x264>)
 8008d80:	f00e f904 	bl	8016f8c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 2048);
 8008d84:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <MX_LWIP_Init+0x26c>)
 8008d86:	1d3c      	adds	r4, r7, #4
 8008d88:	461d      	mov	r5, r3
 8008d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8008d96:	1d3b      	adds	r3, r7, #4
 8008d98:	490b      	ldr	r1, [pc, #44]	; (8008dc8 <MX_LWIP_Init+0x264>)
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 fd22 	bl	80097e4 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008da0:	bf00      	nop
 8008da2:	3720      	adds	r7, #32
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bdb0      	pop	{r4, r5, r7, pc}
 8008da8:	2000209c 	.word	0x2000209c
 8008dac:	200020a0 	.word	0x200020a0
 8008db0:	200020a4 	.word	0x200020a4
 8008db4:	20002090 	.word	0x20002090
 8008db8:	20002094 	.word	0x20002094
 8008dbc:	20002098 	.word	0x20002098
 8008dc0:	080157ed 	.word	0x080157ed
 8008dc4:	080092ad 	.word	0x080092ad
 8008dc8:	2000205c 	.word	0x2000205c
 8008dcc:	08008dd5 	.word	0x08008dd5
 8008dd0:	080281e4 	.word	0x080281e4

08008dd4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <HAL_ETH_RxCpltCallback+0x1c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 fe71 	bl	8009adc <osSemaphoreRelease>
}
 8008dfa:	bf00      	nop
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20006b74 	.word	0x20006b74

08008e08 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008e10:	4b04      	ldr	r3, [pc, #16]	; (8008e24 <HAL_ETH_TxCpltCallback+0x1c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fe61 	bl	8009adc <osSemaphoreRelease>
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20006b78 	.word	0x20006b78

08008e28 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7fc f82f 	bl	8004e94 <HAL_ETH_GetDMAError>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3c:	2b80      	cmp	r3, #128	; 0x80
 8008e3e:	d104      	bne.n	8008e4a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008e40:	4b04      	ldr	r3, [pc, #16]	; (8008e54 <HAL_ETH_ErrorCallback+0x2c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f000 fe49 	bl	8009adc <osSemaphoreRelease>
  }
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20006b74 	.word	0x20006b74

08008e58 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008e58:	b5b0      	push	{r4, r5, r7, lr}
 8008e5a:	b0ac      	sub	sp, #176	; 0xb0
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 8008e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e76:	2264      	movs	r2, #100	; 0x64
 8008e78:	2100      	movs	r1, #0
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f01a feb8 	bl	8023bf0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008e80:	4b90      	ldr	r3, [pc, #576]	; (80090c4 <low_level_init+0x26c>)
 8008e82:	4a91      	ldr	r2, [pc, #580]	; (80090c8 <low_level_init+0x270>)
 8008e84:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 8008e86:	2302      	movs	r3, #2
 8008e88:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x00;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x00;
 8008e92:	2300      	movs	r3, #0
 8008e94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0xA1;
 8008e98:	23a1      	movs	r3, #161	; 0xa1
 8008e9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xB2;
 8008e9e:	23b2      	movs	r3, #178	; 0xb2
 8008ea0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xC3;
 8008ea4:	23c3      	movs	r3, #195	; 0xc3
 8008ea6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8008eaa:	4a86      	ldr	r2, [pc, #536]	; (80090c4 <low_level_init+0x26c>)
 8008eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008eb0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008eb2:	4b84      	ldr	r3, [pc, #528]	; (80090c4 <low_level_init+0x26c>)
 8008eb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008eb8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8008eba:	4b82      	ldr	r3, [pc, #520]	; (80090c4 <low_level_init+0x26c>)
 8008ebc:	4a83      	ldr	r2, [pc, #524]	; (80090cc <low_level_init+0x274>)
 8008ebe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008ec0:	4b80      	ldr	r3, [pc, #512]	; (80090c4 <low_level_init+0x26c>)
 8008ec2:	4a83      	ldr	r2, [pc, #524]	; (80090d0 <low_level_init+0x278>)
 8008ec4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008ec6:	4b7f      	ldr	r3, [pc, #508]	; (80090c4 <low_level_init+0x26c>)
 8008ec8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008ecc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008ece:	487d      	ldr	r0, [pc, #500]	; (80090c4 <low_level_init+0x26c>)
 8008ed0:	f7fb f996 	bl	8004200 <HAL_ETH_Init>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8008eda:	2238      	movs	r2, #56	; 0x38
 8008edc:	2100      	movs	r1, #0
 8008ede:	487d      	ldr	r0, [pc, #500]	; (80090d4 <low_level_init+0x27c>)
 8008ee0:	f01a fe86 	bl	8023bf0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008ee4:	4b7b      	ldr	r3, [pc, #492]	; (80090d4 <low_level_init+0x27c>)
 8008ee6:	2221      	movs	r2, #33	; 0x21
 8008ee8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8008eea:	4b7a      	ldr	r3, [pc, #488]	; (80090d4 <low_level_init+0x27c>)
 8008eec:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8008ef0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008ef2:	4b78      	ldr	r3, [pc, #480]	; (80090d4 <low_level_init+0x27c>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008ef8:	4877      	ldr	r0, [pc, #476]	; (80090d8 <low_level_init+0x280>)
 8008efa:	f00d fc3d 	bl	8016778 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2206      	movs	r2, #6
 8008f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008f06:	4b6f      	ldr	r3, [pc, #444]	; (80090c4 <low_level_init+0x26c>)
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	781a      	ldrb	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008f12:	4b6c      	ldr	r3, [pc, #432]	; (80090c4 <low_level_init+0x26c>)
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	785a      	ldrb	r2, [r3, #1]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008f1e:	4b69      	ldr	r3, [pc, #420]	; (80090c4 <low_level_init+0x26c>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	789a      	ldrb	r2, [r3, #2]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008f2a:	4b66      	ldr	r3, [pc, #408]	; (80090c4 <low_level_init+0x26c>)
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	78da      	ldrb	r2, [r3, #3]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008f36:	4b63      	ldr	r3, [pc, #396]	; (80090c4 <low_level_init+0x26c>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	791a      	ldrb	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008f42:	4b60      	ldr	r3, [pc, #384]	; (80090c4 <low_level_init+0x26c>)
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	795a      	ldrb	r2, [r3, #5]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8008f54:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008f5c:	f043 030a 	orr.w	r3, r3, #10
 8008f60:	b2da      	uxtb	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f74:	2101      	movs	r1, #1
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fd30 	bl	80099dc <osSemaphoreCreate>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	4a57      	ldr	r2, [pc, #348]	; (80090dc <low_level_init+0x284>)
 8008f80:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8008f82:	2300      	movs	r3, #0
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
 8008f86:	2300      	movs	r3, #0
 8008f88:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8008f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f8e:	2101      	movs	r1, #1
 8008f90:	4618      	mov	r0, r3
 8008f92:	f000 fd23 	bl	80099dc <osSemaphoreCreate>
 8008f96:	4603      	mov	r3, r0
 8008f98:	4a51      	ldr	r2, [pc, #324]	; (80090e0 <low_level_init+0x288>)
 8008f9a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8008f9c:	4b4f      	ldr	r3, [pc, #316]	; (80090dc <low_level_init+0x284>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f000 fd4c 	bl	8009a40 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	; (80090e0 <low_level_init+0x288>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2100      	movs	r1, #0
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f000 fd46 	bl	8009a40 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008fb4:	4b4b      	ldr	r3, [pc, #300]	; (80090e4 <low_level_init+0x28c>)
 8008fb6:	f107 0408 	add.w	r4, r7, #8
 8008fba:	461d      	mov	r5, r3
 8008fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	6879      	ldr	r1, [r7, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 fc08 	bl	80097e4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8008fd4:	4944      	ldr	r1, [pc, #272]	; (80090e8 <low_level_init+0x290>)
 8008fd6:	4845      	ldr	r0, [pc, #276]	; (80090ec <low_level_init+0x294>)
 8008fd8:	f7fa fe69 	bl	8003cae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8008fdc:	4843      	ldr	r0, [pc, #268]	; (80090ec <low_level_init+0x294>)
 8008fde:	f7fa fe98 	bl	8003d12 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8008fe2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d165      	bne.n	80090b6 <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008fea:	4840      	ldr	r0, [pc, #256]	; (80090ec <low_level_init+0x294>)
 8008fec:	f7fa ff39 	bl	8003e62 <DP83848_GetLinkState>
 8008ff0:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8008ff4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	dc06      	bgt.n	800900a <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f00d ff95 	bl	8016f2c <netif_set_link_down>
      netif_set_down(netif);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f00d ff2c 	bl	8016e60 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009008:	e057      	b.n	80090ba <low_level_init+0x262>
      switch (PHYLinkState)
 800900a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800900e:	3b02      	subs	r3, #2
 8009010:	2b03      	cmp	r3, #3
 8009012:	d82b      	bhi.n	800906c <low_level_init+0x214>
 8009014:	a201      	add	r2, pc, #4	; (adr r2, 800901c <low_level_init+0x1c4>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	0800902d 	.word	0x0800902d
 8009020:	0800903f 	.word	0x0800903f
 8009024:	0800904f 	.word	0x0800904f
 8009028:	0800905f 	.word	0x0800905f
        duplex = ETH_FULLDUPLEX_MODE;
 800902c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8009034:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009038:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800903c:	e01f      	b.n	800907e <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800903e:	2300      	movs	r3, #0
 8009040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8009044:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800904c:	e017      	b.n	800907e <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800904e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8009056:	2300      	movs	r3, #0
 8009058:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800905c:	e00f      	b.n	800907e <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 800905e:	2300      	movs	r3, #0
 8009060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 8009064:	2300      	movs	r3, #0
 8009066:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800906a:	e008      	b.n	800907e <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 800906c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 8009074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009078:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 800907c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800907e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009082:	4619      	mov	r1, r3
 8009084:	480f      	ldr	r0, [pc, #60]	; (80090c4 <low_level_init+0x26c>)
 8009086:	f7fb fdab 	bl	8004be0 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800908a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800908e:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8009090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009094:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800909a:	4619      	mov	r1, r3
 800909c:	4809      	ldr	r0, [pc, #36]	; (80090c4 <low_level_init+0x26c>)
 800909e:	f7fb fe89 	bl	8004db4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80090a2:	4808      	ldr	r0, [pc, #32]	; (80090c4 <low_level_init+0x26c>)
 80090a4:	f7fb f92a 	bl	80042fc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f00d fe6d 	bl	8016d88 <netif_set_up>
    netif_set_link_up(netif);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f00d ff08 	bl	8016ec4 <netif_set_link_up>
}
 80090b4:	e001      	b.n	80090ba <low_level_init+0x262>
    Error_Handler();
 80090b6:	f7fa f805 	bl	80030c4 <Error_Handler>
}
 80090ba:	bf00      	nop
 80090bc:	37b0      	adds	r7, #176	; 0xb0
 80090be:	46bd      	mov	sp, r7
 80090c0:	bdb0      	pop	{r4, r5, r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20006b7c 	.word	0x20006b7c
 80090c8:	40028000 	.word	0x40028000
 80090cc:	20006ad4 	.word	0x20006ad4
 80090d0:	20006a34 	.word	0x20006a34
 80090d4:	20006c2c 	.word	0x20006c2c
 80090d8:	0802bf54 	.word	0x0802bf54
 80090dc:	20006b74 	.word	0x20006b74
 80090e0:	20006b78 	.word	0x20006b78
 80090e4:	08028208 	.word	0x08028208
 80090e8:	20000014 	.word	0x20000014
 80090ec:	20006c64 	.word	0x20006c64

080090f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b092      	sub	sp, #72	; 0x48
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	2230      	movs	r2, #48	; 0x30
 800910e:	2100      	movs	r1, #0
 8009110:	4618      	mov	r0, r3
 8009112:	f01a fd6d 	bl	8023bf0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009116:	f107 030c 	add.w	r3, r7, #12
 800911a:	2230      	movs	r2, #48	; 0x30
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f01a fd66 	bl	8023bf0 <memset>

  for(q = p; q != NULL; q = q->next)
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
 8009128:	e045      	b.n	80091b6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800912a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800912c:	2b03      	cmp	r3, #3
 800912e:	d902      	bls.n	8009136 <low_level_output+0x46>
      return ERR_IF;
 8009130:	f06f 030b 	mvn.w	r3, #11
 8009134:	e06c      	b.n	8009210 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8009136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009138:	6859      	ldr	r1, [r3, #4]
 800913a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800913c:	4613      	mov	r3, r2
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	4413      	add	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	3348      	adds	r3, #72	; 0x48
 8009146:	443b      	add	r3, r7
 8009148:	3b3c      	subs	r3, #60	; 0x3c
 800914a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800914c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800914e:	895b      	ldrh	r3, [r3, #10]
 8009150:	4619      	mov	r1, r3
 8009152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009154:	4613      	mov	r3, r2
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	3348      	adds	r3, #72	; 0x48
 800915e:	443b      	add	r3, r7
 8009160:	3b38      	subs	r3, #56	; 0x38
 8009162:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009166:	2b00      	cmp	r3, #0
 8009168:	d011      	beq.n	800918e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800916a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	f107 000c 	add.w	r0, r7, #12
 8009172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009174:	460b      	mov	r3, r1
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	440b      	add	r3, r1
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	18c1      	adds	r1, r0, r3
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	3348      	adds	r3, #72	; 0x48
 8009188:	443b      	add	r3, r7
 800918a:	3b34      	subs	r3, #52	; 0x34
 800918c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800918e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d109      	bne.n	80091aa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009198:	4613      	mov	r3, r2
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	3348      	adds	r3, #72	; 0x48
 80091a2:	443b      	add	r3, r7
 80091a4:	3b34      	subs	r3, #52	; 0x34
 80091a6:	2200      	movs	r2, #0
 80091a8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80091aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091ac:	3301      	adds	r3, #1
 80091ae:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80091b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	643b      	str	r3, [r7, #64]	; 0x40
 80091b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1b6      	bne.n	800912a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	891b      	ldrh	r3, [r3, #8]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4b15      	ldr	r3, [pc, #84]	; (8009218 <low_level_output+0x128>)
 80091c4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80091c6:	4a14      	ldr	r2, [pc, #80]	; (8009218 <low_level_output+0x128>)
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80091ce:	4a12      	ldr	r2, [pc, #72]	; (8009218 <low_level_output+0x128>)
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80091d4:	6838      	ldr	r0, [r7, #0]
 80091d6:	f00e fb2d 	bl	8017834 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 80091da:	490f      	ldr	r1, [pc, #60]	; (8009218 <low_level_output+0x128>)
 80091dc:	480f      	ldr	r0, [pc, #60]	; (800921c <low_level_output+0x12c>)
 80091de:	f7fb f99a 	bl	8004516 <HAL_ETH_Transmit_IT>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10e      	bne.n	8009206 <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80091e8:	bf00      	nop
 80091ea:	4b0d      	ldr	r3, [pc, #52]	; (8009220 <low_level_output+0x130>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fc24 	bl	8009a40 <osSemaphoreWait>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1f5      	bne.n	80091ea <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 80091fe:	4807      	ldr	r0, [pc, #28]	; (800921c <low_level_output+0x12c>)
 8009200:	f7fb fb28 	bl	8004854 <HAL_ETH_ReleaseTxPacket>
 8009204:	e002      	b.n	800920c <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8009206:	6838      	ldr	r0, [r7, #0]
 8009208:	f00e fa6e 	bl	80176e8 <pbuf_free>
  }

  return errval;
 800920c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009210:	4618      	mov	r0, r3
 8009212:	3748      	adds	r7, #72	; 0x48
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	20006c2c 	.word	0x20006c2c
 800921c:	20006b7c 	.word	0x20006b7c
 8009220:	20006b78 	.word	0x20006b78

08009224 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b084      	sub	sp, #16
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009230:	4b07      	ldr	r3, [pc, #28]	; (8009250 <low_level_input+0x2c>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d105      	bne.n	8009244 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	4619      	mov	r1, r3
 800923e:	4805      	ldr	r0, [pc, #20]	; (8009254 <low_level_input+0x30>)
 8009240:	f7fb f9c5 	bl	80045ce <HAL_ETH_ReadData>
  }

  return p;
 8009244:	68fb      	ldr	r3, [r7, #12]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	20006a30 	.word	0x20006a30
 8009254:	20006b7c 	.word	0x20006b7c

08009258 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <ethernetif_input+0x50>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009270:	4618      	mov	r0, r3
 8009272:	f000 fbe5 	bl	8009a40 <osSemaphoreWait>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800927c:	68b8      	ldr	r0, [r7, #8]
 800927e:	f7ff ffd1 	bl	8009224 <low_level_input>
 8009282:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	68b9      	ldr	r1, [r7, #8]
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	4798      	blx	r3
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800929a:	68f8      	ldr	r0, [r7, #12]
 800929c:	f00e fa24 	bl	80176e8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1ea      	bne.n	800927c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80092a6:	e7df      	b.n	8009268 <ethernetif_input+0x10>
 80092a8:	20006b74 	.word	0x20006b74

080092ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d106      	bne.n	80092c8 <ethernetif_init+0x1c>
 80092ba:	4b0e      	ldr	r3, [pc, #56]	; (80092f4 <ethernetif_init+0x48>)
 80092bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80092c0:	490d      	ldr	r1, [pc, #52]	; (80092f8 <ethernetif_init+0x4c>)
 80092c2:	480e      	ldr	r0, [pc, #56]	; (80092fc <ethernetif_init+0x50>)
 80092c4:	f01a face 	bl	8023864 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2273      	movs	r2, #115	; 0x73
 80092cc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2274      	movs	r2, #116	; 0x74
 80092d4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a09      	ldr	r2, [pc, #36]	; (8009300 <ethernetif_init+0x54>)
 80092dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a08      	ldr	r2, [pc, #32]	; (8009304 <ethernetif_init+0x58>)
 80092e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff fdb7 	bl	8008e58 <low_level_init>

  return ERR_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	08028224 	.word	0x08028224
 80092f8:	08028240 	.word	0x08028240
 80092fc:	08028250 	.word	0x08028250
 8009300:	0801f5c1 	.word	0x0801f5c1
 8009304:	080090f1 	.word	0x080090f1

08009308 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009314:	68f9      	ldr	r1, [r7, #12]
 8009316:	4809      	ldr	r0, [pc, #36]	; (800933c <pbuf_free_custom+0x34>)
 8009318:	f00d fb1e 	bl	8016958 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800931c:	4b08      	ldr	r3, [pc, #32]	; (8009340 <pbuf_free_custom+0x38>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d107      	bne.n	8009334 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <pbuf_free_custom+0x38>)
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800932a:	4b06      	ldr	r3, [pc, #24]	; (8009344 <pbuf_free_custom+0x3c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f000 fbd4 	bl	8009adc <osSemaphoreRelease>
  }
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	0802bf54 	.word	0x0802bf54
 8009340:	20006a30 	.word	0x20006a30
 8009344:	20006b74 	.word	0x20006b74

08009348 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800934c:	f7fa fe46 	bl	8003fdc <HAL_GetTick>
 8009350:	4603      	mov	r3, r0
}
 8009352:	4618      	mov	r0, r3
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08e      	sub	sp, #56	; 0x38
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009364:	2200      	movs	r2, #0
 8009366:	601a      	str	r2, [r3, #0]
 8009368:	605a      	str	r2, [r3, #4]
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a4a      	ldr	r2, [pc, #296]	; (80094a0 <HAL_ETH_MspInit+0x148>)
 8009376:	4293      	cmp	r3, r2
 8009378:	f040 808d 	bne.w	8009496 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800937c:	2300      	movs	r3, #0
 800937e:	623b      	str	r3, [r7, #32]
 8009380:	4b48      	ldr	r3, [pc, #288]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	4a47      	ldr	r2, [pc, #284]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 8009386:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800938a:	6313      	str	r3, [r2, #48]	; 0x30
 800938c:	4b45      	ldr	r3, [pc, #276]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009394:	623b      	str	r3, [r7, #32]
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	2300      	movs	r3, #0
 800939a:	61fb      	str	r3, [r7, #28]
 800939c:	4b41      	ldr	r3, [pc, #260]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 800939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a0:	4a40      	ldr	r2, [pc, #256]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093a6:	6313      	str	r3, [r2, #48]	; 0x30
 80093a8:	4b3e      	ldr	r3, [pc, #248]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093b0:	61fb      	str	r3, [r7, #28]
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2300      	movs	r3, #0
 80093b6:	61bb      	str	r3, [r7, #24]
 80093b8:	4b3a      	ldr	r3, [pc, #232]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	4a39      	ldr	r2, [pc, #228]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093c2:	6313      	str	r3, [r2, #48]	; 0x30
 80093c4:	4b37      	ldr	r3, [pc, #220]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093cc:	61bb      	str	r3, [r7, #24]
 80093ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	4b33      	ldr	r3, [pc, #204]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d8:	4a32      	ldr	r2, [pc, #200]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093da:	f043 0304 	orr.w	r3, r3, #4
 80093de:	6313      	str	r3, [r2, #48]	; 0x30
 80093e0:	4b30      	ldr	r3, [pc, #192]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e4:	f003 0304 	and.w	r3, r3, #4
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093ec:	2300      	movs	r3, #0
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	4b2c      	ldr	r3, [pc, #176]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f4:	4a2b      	ldr	r2, [pc, #172]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	6313      	str	r3, [r2, #48]	; 0x30
 80093fc:	4b29      	ldr	r3, [pc, #164]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 80093fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009400:	f003 0301 	and.w	r3, r3, #1
 8009404:	613b      	str	r3, [r7, #16]
 8009406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009408:	2300      	movs	r3, #0
 800940a:	60fb      	str	r3, [r7, #12]
 800940c:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	4a24      	ldr	r2, [pc, #144]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 8009412:	f043 0302 	orr.w	r3, r3, #2
 8009416:	6313      	str	r3, [r2, #48]	; 0x30
 8009418:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <HAL_ETH_MspInit+0x14c>)
 800941a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941c:	f003 0302 	and.w	r3, r3, #2
 8009420:	60fb      	str	r3, [r7, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009424:	2332      	movs	r3, #50	; 0x32
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009428:	2302      	movs	r3, #2
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800942c:	2300      	movs	r3, #0
 800942e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009430:	2303      	movs	r3, #3
 8009432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009434:	230b      	movs	r3, #11
 8009436:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800943c:	4619      	mov	r1, r3
 800943e:	481a      	ldr	r0, [pc, #104]	; (80094a8 <HAL_ETH_MspInit+0x150>)
 8009440:	f7fc f93a 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009444:	2386      	movs	r3, #134	; 0x86
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009448:	2302      	movs	r3, #2
 800944a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800944c:	2300      	movs	r3, #0
 800944e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009450:	2303      	movs	r3, #3
 8009452:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009454:	230b      	movs	r3, #11
 8009456:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009458:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800945c:	4619      	mov	r1, r3
 800945e:	4813      	ldr	r0, [pc, #76]	; (80094ac <HAL_ETH_MspInit+0x154>)
 8009460:	f7fc f92a 	bl	80056b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009464:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800946a:	2302      	movs	r3, #2
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800946e:	2300      	movs	r3, #0
 8009470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009472:	2303      	movs	r3, #3
 8009474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009476:	230b      	movs	r3, #11
 8009478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800947a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800947e:	4619      	mov	r1, r3
 8009480:	480b      	ldr	r0, [pc, #44]	; (80094b0 <HAL_ETH_MspInit+0x158>)
 8009482:	f7fc f919 	bl	80056b8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009486:	2200      	movs	r2, #0
 8009488:	2105      	movs	r1, #5
 800948a:	203d      	movs	r0, #61	; 0x3d
 800948c:	f7fa fe8e 	bl	80041ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009490:	203d      	movs	r0, #61	; 0x3d
 8009492:	f7fa fea7 	bl	80041e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009496:	bf00      	nop
 8009498:	3738      	adds	r7, #56	; 0x38
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	40028000 	.word	0x40028000
 80094a4:	40023800 	.word	0x40023800
 80094a8:	40020800 	.word	0x40020800
 80094ac:	40020000 	.word	0x40020000
 80094b0:	40020400 	.word	0x40020400

080094b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80094b8:	4802      	ldr	r0, [pc, #8]	; (80094c4 <ETH_PHY_IO_Init+0x10>)
 80094ba:	f7fb fc95 	bl	8004de8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	20006b7c 	.word	0x20006b7c

080094c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80094c8:	b480      	push	{r7}
 80094ca:	af00      	add	r7, sp, #0
  return 0;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	68f9      	ldr	r1, [r7, #12]
 80094ea:	4807      	ldr	r0, [pc, #28]	; (8009508 <ETH_PHY_IO_ReadReg+0x30>)
 80094ec:	f7fb fae4 	bl	8004ab8 <HAL_ETH_ReadPHYRegister>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d002      	beq.n	80094fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80094f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094fa:	e000      	b.n	80094fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	20006b7c 	.word	0x20006b7c

0800950c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b084      	sub	sp, #16
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68ba      	ldr	r2, [r7, #8]
 800951c:	68f9      	ldr	r1, [r7, #12]
 800951e:	4807      	ldr	r0, [pc, #28]	; (800953c <ETH_PHY_IO_WriteReg+0x30>)
 8009520:	f7fb fb15 	bl	8004b4e <HAL_ETH_WritePHYRegister>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d002      	beq.n	8009530 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800952a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800952e:	e000      	b.n	8009532 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20006b7c 	.word	0x20006b7c

08009540 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009544:	f7fa fd4a 	bl	8003fdc <HAL_GetTick>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b0a0      	sub	sp, #128	; 0x80
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009558:	f107 0308 	add.w	r3, r7, #8
 800955c:	2264      	movs	r2, #100	; 0x64
 800955e:	2100      	movs	r1, #0
 8009560:	4618      	mov	r0, r3
 8009562:	f01a fb45 	bl	8023bf0 <memset>
  int32_t PHYLinkState = 0;
 8009566:	2300      	movs	r3, #0
 8009568:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800956e:	2300      	movs	r3, #0
 8009570:	67bb      	str	r3, [r7, #120]	; 0x78
 8009572:	2300      	movs	r3, #0
 8009574:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 800957a:	483a      	ldr	r0, [pc, #232]	; (8009664 <ethernet_link_thread+0x114>)
 800957c:	f7fa fc71 	bl	8003e62 <DP83848_GetLinkState>
 8009580:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8009582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009588:	089b      	lsrs	r3, r3, #2
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	b2db      	uxtb	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00c      	beq.n	80095ae <ethernet_link_thread+0x5e>
 8009594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009596:	2b01      	cmp	r3, #1
 8009598:	dc09      	bgt.n	80095ae <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800959a:	4833      	ldr	r0, [pc, #204]	; (8009668 <ethernet_link_thread+0x118>)
 800959c:	f7fa ff3c 	bl	8004418 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80095a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80095a2:	f00d fc5d 	bl	8016e60 <netif_set_down>
    netif_set_link_down(netif);
 80095a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80095a8:	f00d fcc0 	bl	8016f2c <netif_set_link_down>
 80095ac:	e055      	b.n	800965a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 80095ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d14e      	bne.n	800965a <ethernet_link_thread+0x10a>
 80095bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095be:	2b01      	cmp	r3, #1
 80095c0:	dd4b      	ble.n	800965a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80095c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095c4:	3b02      	subs	r3, #2
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d82a      	bhi.n	8009620 <ethernet_link_thread+0xd0>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <ethernet_link_thread+0x80>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095e1 	.word	0x080095e1
 80095d4:	080095f3 	.word	0x080095f3
 80095d8:	08009603 	.word	0x08009603
 80095dc:	08009613 	.word	0x08009613
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80095e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80095e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095ea:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095ec:	2301      	movs	r3, #1
 80095ee:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80095f0:	e017      	b.n	8009622 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80095f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095fa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80095fc:	2301      	movs	r3, #1
 80095fe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009600:	e00f      	b.n	8009622 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009602:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009606:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009608:	2300      	movs	r3, #0
 800960a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800960c:	2301      	movs	r3, #1
 800960e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009610:	e007      	b.n	8009622 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009612:	2300      	movs	r3, #0
 8009614:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009616:	2300      	movs	r3, #0
 8009618:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800961a:	2301      	movs	r3, #1
 800961c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800961e:	e000      	b.n	8009622 <ethernet_link_thread+0xd2>
    default:
      break;
 8009620:	bf00      	nop
    }

    if(linkchanged)
 8009622:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009624:	2b00      	cmp	r3, #0
 8009626:	d018      	beq.n	800965a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009628:	f107 0308 	add.w	r3, r7, #8
 800962c:	4619      	mov	r1, r3
 800962e:	480e      	ldr	r0, [pc, #56]	; (8009668 <ethernet_link_thread+0x118>)
 8009630:	f7fb fad6 	bl	8004be0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009636:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800963a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800963c:	f107 0308 	add.w	r3, r7, #8
 8009640:	4619      	mov	r1, r3
 8009642:	4809      	ldr	r0, [pc, #36]	; (8009668 <ethernet_link_thread+0x118>)
 8009644:	f7fb fbb6 	bl	8004db4 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009648:	4807      	ldr	r0, [pc, #28]	; (8009668 <ethernet_link_thread+0x118>)
 800964a:	f7fa fe57 	bl	80042fc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800964e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009650:	f00d fb9a 	bl	8016d88 <netif_set_up>
      netif_set_link_up(netif);
 8009654:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009656:	f00d fc35 	bl	8016ec4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800965a:	2064      	movs	r0, #100	; 0x64
 800965c:	f000 f90e 	bl	800987c <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009660:	e78b      	b.n	800957a <ethernet_link_thread+0x2a>
 8009662:	bf00      	nop
 8009664:	20006c64 	.word	0x20006c64
 8009668:	20006b7c 	.word	0x20006b7c

0800966c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009674:	4812      	ldr	r0, [pc, #72]	; (80096c0 <HAL_ETH_RxAllocateCallback+0x54>)
 8009676:	f00d f8fb 	bl	8016870 <memp_malloc_pool>
 800967a:	60f8      	str	r0, [r7, #12]
  if (p)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d014      	beq.n	80096ac <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f103 0220 	add.w	r2, r3, #32
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a0d      	ldr	r2, [pc, #52]	; (80096c4 <HAL_ETH_RxAllocateCallback+0x58>)
 8009690:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800969a:	9201      	str	r2, [sp, #4]
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2241      	movs	r2, #65	; 0x41
 80096a2:	2100      	movs	r1, #0
 80096a4:	2000      	movs	r0, #0
 80096a6:	f00d fe65 	bl	8017374 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80096aa:	e005      	b.n	80096b8 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <HAL_ETH_RxAllocateCallback+0x5c>)
 80096ae:	2201      	movs	r2, #1
 80096b0:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	601a      	str	r2, [r3, #0]
}
 80096b8:	bf00      	nop
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	0802bf54 	.word	0x0802bf54
 80096c4:	08009309 	.word	0x08009309
 80096c8:	20006a30 	.word	0x20006a30

080096cc <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b089      	sub	sp, #36	; 0x24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	60b9      	str	r1, [r7, #8]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	3b20      	subs	r3, #32
 80096ea:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	2200      	movs	r2, #0
 80096f6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	887a      	ldrh	r2, [r7, #2]
 80096fc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d103      	bne.n	800970e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009706:	69bb      	ldr	r3, [r7, #24]
 8009708:	69fa      	ldr	r2, [r7, #28]
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	e003      	b.n	8009716 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	61fb      	str	r3, [r7, #28]
 8009722:	e009      	b.n	8009738 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	891a      	ldrh	r2, [r3, #8]
 8009728:	887b      	ldrh	r3, [r7, #2]
 800972a:	4413      	add	r3, r2
 800972c:	b29a      	uxth	r2, r3
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009732:	69fb      	ldr	r3, [r7, #28]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	61fb      	str	r3, [r7, #28]
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d1f2      	bne.n	8009724 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800973e:	bf00      	nop
 8009740:	bf00      	nop
 8009742:	3724      	adds	r7, #36	; 0x24
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f00d ffc7 	bl	80176e8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	4603      	mov	r3, r0
 800976a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009774:	2b84      	cmp	r3, #132	; 0x84
 8009776:	d005      	beq.n	8009784 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009778:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	3303      	adds	r3, #3
 8009782:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009784:	68fb      	ldr	r3, [r7, #12]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009798:	f3ef 8305 	mrs	r3, IPSR
 800979c:	607b      	str	r3, [r7, #4]
  return(result);
 800979e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bf14      	ite	ne
 80097a4:	2301      	movne	r3, #1
 80097a6:	2300      	moveq	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr

080097b6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80097ba:	f001 fd99 	bl	800b2f0 <vTaskStartScheduler>
  
  return osOK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80097c8:	f7ff ffe3 	bl	8009792 <inHandlerMode>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d003      	beq.n	80097da <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80097d2:	f001 feb7 	bl	800b544 <xTaskGetTickCountFromISR>
 80097d6:	4603      	mov	r3, r0
 80097d8:	e002      	b.n	80097e0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80097da:	f001 fea3 	bl	800b524 <xTaskGetTickCount>
 80097de:	4603      	mov	r3, r0
  }
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e6:	b089      	sub	sp, #36	; 0x24
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d020      	beq.n	8009838 <osThreadCreate+0x54>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01c      	beq.n	8009838 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685c      	ldr	r4, [r3, #4]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691e      	ldr	r6, [r3, #16]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009810:	4618      	mov	r0, r3
 8009812:	f7ff ffa6 	bl	8009762 <makeFreeRtosPriority>
 8009816:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	695b      	ldr	r3, [r3, #20]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	9100      	str	r1, [sp, #0]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	4632      	mov	r2, r6
 800982a:	4629      	mov	r1, r5
 800982c:	4620      	mov	r0, r4
 800982e:	f001 fb81 	bl	800af34 <xTaskCreateStatic>
 8009832:	4603      	mov	r3, r0
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	e01c      	b.n	8009872 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	685c      	ldr	r4, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009844:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800984c:	4618      	mov	r0, r3
 800984e:	f7ff ff88 	bl	8009762 <makeFreeRtosPriority>
 8009852:	4602      	mov	r2, r0
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	9200      	str	r2, [sp, #0]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	4632      	mov	r2, r6
 8009860:	4629      	mov	r1, r5
 8009862:	4620      	mov	r0, r4
 8009864:	f001 fbc3 	bl	800afee <xTaskCreate>
 8009868:	4603      	mov	r3, r0
 800986a:	2b01      	cmp	r3, #1
 800986c:	d001      	beq.n	8009872 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	e000      	b.n	8009874 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800987c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <osDelay+0x16>
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	e000      	b.n	8009894 <osDelay+0x18>
 8009892:	2301      	movs	r3, #1
 8009894:	4618      	mov	r0, r3
 8009896:	f001 fcf7 	bl	800b288 <vTaskDelay>
  
  return osOK;
 800989a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d007      	beq.n	80098c4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	4619      	mov	r1, r3
 80098ba:	2001      	movs	r0, #1
 80098bc:	f000 fc7d 	bl	800a1ba <xQueueCreateMutexStatic>
 80098c0:	4603      	mov	r3, r0
 80098c2:	e003      	b.n	80098cc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80098c4:	2001      	movs	r0, #1
 80098c6:	f000 fc60 	bl	800a18a <xQueueCreateMutex>
 80098ca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80098de:	2300      	movs	r3, #0
 80098e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <osMutexWait+0x18>
    return osErrorParameter;
 80098e8:	2380      	movs	r3, #128	; 0x80
 80098ea:	e03a      	b.n	8009962 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098f6:	d103      	bne.n	8009900 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80098f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098fc:	60fb      	str	r3, [r7, #12]
 80098fe:	e009      	b.n	8009914 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d006      	beq.n	8009914 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <osMutexWait+0x40>
      ticks = 1;
 8009910:	2301      	movs	r3, #1
 8009912:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009914:	f7ff ff3d 	bl	8009792 <inHandlerMode>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d017      	beq.n	800994e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800991e:	f107 0308 	add.w	r3, r7, #8
 8009922:	461a      	mov	r2, r3
 8009924:	2100      	movs	r1, #0
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f001 f874 	bl	800aa14 <xQueueReceiveFromISR>
 800992c:	4603      	mov	r3, r0
 800992e:	2b01      	cmp	r3, #1
 8009930:	d001      	beq.n	8009936 <osMutexWait+0x62>
      return osErrorOS;
 8009932:	23ff      	movs	r3, #255	; 0xff
 8009934:	e015      	b.n	8009962 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d011      	beq.n	8009960 <osMutexWait+0x8c>
 800993c:	4b0b      	ldr	r3, [pc, #44]	; (800996c <osMutexWait+0x98>)
 800993e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	f3bf 8f6f 	isb	sy
 800994c:	e008      	b.n	8009960 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 ff53 	bl	800a7fc <xQueueSemaphoreTake>
 8009956:	4603      	mov	r3, r0
 8009958:	2b01      	cmp	r3, #1
 800995a:	d001      	beq.n	8009960 <osMutexWait+0x8c>
    return osErrorOS;
 800995c:	23ff      	movs	r3, #255	; 0xff
 800995e:	e000      	b.n	8009962 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009978:	2300      	movs	r3, #0
 800997a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009980:	f7ff ff07 	bl	8009792 <inHandlerMode>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d016      	beq.n	80099b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f000 fdc6 	bl	800a522 <xQueueGiveFromISR>
 8009996:	4603      	mov	r3, r0
 8009998:	2b01      	cmp	r3, #1
 800999a:	d001      	beq.n	80099a0 <osMutexRelease+0x30>
      return osErrorOS;
 800999c:	23ff      	movs	r3, #255	; 0xff
 800999e:	e017      	b.n	80099d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d013      	beq.n	80099ce <osMutexRelease+0x5e>
 80099a6:	4b0c      	ldr	r3, [pc, #48]	; (80099d8 <osMutexRelease+0x68>)
 80099a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ac:	601a      	str	r2, [r3, #0]
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	e00a      	b.n	80099ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80099b8:	2300      	movs	r3, #0
 80099ba:	2200      	movs	r2, #0
 80099bc:	2100      	movs	r1, #0
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fc16 	bl	800a1f0 <xQueueGenericSend>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d001      	beq.n	80099ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80099ca:	23ff      	movs	r3, #255	; 0xff
 80099cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80099ce:	68fb      	ldr	r3, [r7, #12]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af02      	add	r7, sp, #8
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00f      	beq.n	8009a0e <osSemaphoreCreate+0x32>
    if (count == 1) {
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d10a      	bne.n	8009a0a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	2203      	movs	r2, #3
 80099fa:	9200      	str	r2, [sp, #0]
 80099fc:	2200      	movs	r2, #0
 80099fe:	2100      	movs	r1, #0
 8009a00:	2001      	movs	r0, #1
 8009a02:	f000 fad7 	bl	8009fb4 <xQueueGenericCreateStatic>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e016      	b.n	8009a38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e014      	b.n	8009a38 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d110      	bne.n	8009a36 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009a14:	2203      	movs	r2, #3
 8009a16:	2100      	movs	r1, #0
 8009a18:	2001      	movs	r0, #1
 8009a1a:	f000 fb43 	bl	800a0a4 <xQueueGenericCreate>
 8009a1e:	60f8      	str	r0, [r7, #12]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <osSemaphoreCreate+0x56>
 8009a26:	2300      	movs	r3, #0
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fbdf 	bl	800a1f0 <xQueueGenericSend>
      return sema;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	e000      	b.n	8009a38 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009a36:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009a54:	2380      	movs	r3, #128	; 0x80
 8009a56:	e03a      	b.n	8009ace <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a62:	d103      	bne.n	8009a6c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e009      	b.n	8009a80 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d006      	beq.n	8009a80 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <osSemaphoreWait+0x40>
      ticks = 1;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009a80:	f7ff fe87 	bl	8009792 <inHandlerMode>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d017      	beq.n	8009aba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009a8a:	f107 0308 	add.w	r3, r7, #8
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2100      	movs	r1, #0
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 ffbe 	bl	800aa14 <xQueueReceiveFromISR>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d001      	beq.n	8009aa2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009a9e:	23ff      	movs	r3, #255	; 0xff
 8009aa0:	e015      	b.n	8009ace <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d011      	beq.n	8009acc <osSemaphoreWait+0x8c>
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	; (8009ad8 <osSemaphoreWait+0x98>)
 8009aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	e008      	b.n	8009acc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fe9d 	bl	800a7fc <xQueueSemaphoreTake>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d001      	beq.n	8009acc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009ac8:	23ff      	movs	r3, #255	; 0xff
 8009aca:	e000      	b.n	8009ace <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009aec:	f7ff fe51 	bl	8009792 <inHandlerMode>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d016      	beq.n	8009b24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009af6:	f107 0308 	add.w	r3, r7, #8
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fd10 	bl	800a522 <xQueueGiveFromISR>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d001      	beq.n	8009b0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009b08:	23ff      	movs	r3, #255	; 0xff
 8009b0a:	e017      	b.n	8009b3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d013      	beq.n	8009b3a <osSemaphoreRelease+0x5e>
 8009b12:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <osSemaphoreRelease+0x68>)
 8009b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	e00a      	b.n	8009b3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009b24:	2300      	movs	r3, #0
 8009b26:	2200      	movs	r2, #0
 8009b28:	2100      	movs	r1, #0
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 fb60 	bl	800a1f0 <xQueueGenericSend>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d001      	beq.n	8009b3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009b36:	23ff      	movs	r3, #255	; 0xff
 8009b38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009b50:	f7ff fe1f 	bl	8009792 <inHandlerMode>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009b5a:	2382      	movs	r3, #130	; 0x82
 8009b5c:	e003      	b.n	8009b66 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f001 f814 	bl	800ab8c <vQueueDelete>

  return osOK; 
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009b6e:	b590      	push	{r4, r7, lr}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af02      	add	r7, sp, #8
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d011      	beq.n	8009ba4 <osMessageCreate+0x36>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00d      	beq.n	8009ba4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6859      	ldr	r1, [r3, #4]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2400      	movs	r4, #0
 8009b9a:	9400      	str	r4, [sp, #0]
 8009b9c:	f000 fa0a 	bl	8009fb4 <xQueueGenericCreateStatic>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	e008      	b.n	8009bb6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6818      	ldr	r0, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	4619      	mov	r1, r3
 8009bb0:	f000 fa78 	bl	800a0a4 <xQueueGenericCreate>
 8009bb4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd90      	pop	{r4, r7, pc}
	...

08009bc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <osMessagePut+0x1e>
    ticks = 1;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009bde:	f7ff fdd8 	bl	8009792 <inHandlerMode>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d018      	beq.n	8009c1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009be8:	f107 0210 	add.w	r2, r7, #16
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fbfa 	bl	800a3ec <xQueueGenericSendFromISR>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d001      	beq.n	8009c02 <osMessagePut+0x42>
      return osErrorOS;
 8009bfe:	23ff      	movs	r3, #255	; 0xff
 8009c00:	e018      	b.n	8009c34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d014      	beq.n	8009c32 <osMessagePut+0x72>
 8009c08:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <osMessagePut+0x7c>)
 8009c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	e00b      	b.n	8009c32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009c1a:	f107 0108 	add.w	r1, r7, #8
 8009c1e:	2300      	movs	r3, #0
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 fae4 	bl	800a1f0 <xQueueGenericSend>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d001      	beq.n	8009c32 <osMessagePut+0x72>
      return osErrorOS;
 8009c2e:	23ff      	movs	r3, #255	; 0xff
 8009c30:	e000      	b.n	8009c34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	e000ed04 	.word	0xe000ed04

08009c40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b08b      	sub	sp, #44	; 0x2c
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10a      	bne.n	8009c70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009c5a:	2380      	movs	r3, #128	; 0x80
 8009c5c:	617b      	str	r3, [r7, #20]
    return event;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	461c      	mov	r4, r3
 8009c62:	f107 0314 	add.w	r3, r7, #20
 8009c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009c6e:	e054      	b.n	8009d1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009c70:	2300      	movs	r3, #0
 8009c72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009c74:	2300      	movs	r3, #0
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c7e:	d103      	bne.n	8009c88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
 8009c86:	e009      	b.n	8009c9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d006      	beq.n	8009c9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <osMessageGet+0x5c>
      ticks = 1;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009c9c:	f7ff fd79 	bl	8009792 <inHandlerMode>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d01c      	beq.n	8009ce0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009ca6:	f107 0220 	add.w	r2, r7, #32
 8009caa:	f107 0314 	add.w	r3, r7, #20
 8009cae:	3304      	adds	r3, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	68b8      	ldr	r0, [r7, #8]
 8009cb4:	f000 feae 	bl	800aa14 <xQueueReceiveFromISR>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d102      	bne.n	8009cc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8009cbe:	2310      	movs	r3, #16
 8009cc0:	617b      	str	r3, [r7, #20]
 8009cc2:	e001      	b.n	8009cc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01d      	beq.n	8009d0a <osMessageGet+0xca>
 8009cce:	4b15      	ldr	r3, [pc, #84]	; (8009d24 <osMessageGet+0xe4>)
 8009cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd4:	601a      	str	r2, [r3, #0]
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	e014      	b.n	8009d0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8009ce0:	f107 0314 	add.w	r3, r7, #20
 8009ce4:	3304      	adds	r3, #4
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	4619      	mov	r1, r3
 8009cea:	68b8      	ldr	r0, [r7, #8]
 8009cec:	f000 fca6 	bl	800a63c <xQueueReceive>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d102      	bne.n	8009cfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009cf6:	2310      	movs	r3, #16
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e006      	b.n	8009d0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d101      	bne.n	8009d06 <osMessageGet+0xc6>
 8009d02:	2300      	movs	r3, #0
 8009d04:	e000      	b.n	8009d08 <osMessageGet+0xc8>
 8009d06:	2340      	movs	r3, #64	; 0x40
 8009d08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	461c      	mov	r4, r3
 8009d0e:	f107 0314 	add.w	r3, r7, #20
 8009d12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009d1a:	68f8      	ldr	r0, [r7, #12]
 8009d1c:	372c      	adds	r7, #44	; 0x2c
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	e000ed04 	.word	0xe000ed04

08009d28 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009d30:	f7ff fd2f 	bl	8009792 <inHandlerMode>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d004      	beq.n	8009d44 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 ff08 	bl	800ab50 <uxQueueMessagesWaitingFromISR>
 8009d40:	4603      	mov	r3, r0
 8009d42:	e003      	b.n	8009d4c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fee5 	bl	800ab14 <uxQueueMessagesWaiting>
 8009d4a:	4603      	mov	r3, r0
  }
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3708      	adds	r7, #8
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009d5c:	f7ff fd19 	bl	8009792 <inHandlerMode>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <osMessageDelete+0x16>
    return osErrorISR;
 8009d66:	2382      	movs	r3, #130	; 0x82
 8009d68:	e003      	b.n	8009d72 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 ff0e 	bl	800ab8c <vQueueDelete>

  return osOK; 
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b083      	sub	sp, #12
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f103 0208 	add.w	r2, r3, #8
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d92:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0208 	add.w	r2, r3, #8
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f103 0208 	add.w	r2, r3, #8
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dae:	bf00      	nop
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	683a      	ldr	r2, [r7, #0]
 8009dfe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	1c5a      	adds	r2, r3, #1
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	601a      	str	r2, [r3, #0]
}
 8009e10:	bf00      	nop
 8009e12:	3714      	adds	r7, #20
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e32:	d103      	bne.n	8009e3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e00c      	b.n	8009e56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3308      	adds	r3, #8
 8009e40:	60fb      	str	r3, [r7, #12]
 8009e42:	e002      	b.n	8009e4a <vListInsert+0x2e>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	685b      	ldr	r3, [r3, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d2f6      	bcs.n	8009e44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	1c5a      	adds	r2, r3, #1
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	601a      	str	r2, [r3, #0]
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b085      	sub	sp, #20
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6892      	ldr	r2, [r2, #8]
 8009ea4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6852      	ldr	r2, [r2, #4]
 8009eae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d103      	bne.n	8009ec2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	689a      	ldr	r2, [r3, #8]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	1e5a      	subs	r2, r3, #1
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
	...

08009ee4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10a      	bne.n	8009f0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f0e:	f002 fcd9 	bl	800c8c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	441a      	add	r2, r3
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	68f9      	ldr	r1, [r7, #12]
 8009f42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f44:	fb01 f303 	mul.w	r3, r1, r3
 8009f48:	441a      	add	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	22ff      	movs	r2, #255	; 0xff
 8009f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	22ff      	movs	r2, #255	; 0xff
 8009f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d114      	bne.n	8009f8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d01a      	beq.n	8009fa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	3310      	adds	r3, #16
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 fc63 	bl	800b83c <xTaskRemoveFromEventList>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d012      	beq.n	8009fa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <xQueueGenericReset+0xcc>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	e009      	b.n	8009fa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3310      	adds	r3, #16
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fef1 	bl	8009d7a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3324      	adds	r3, #36	; 0x24
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff feec 	bl	8009d7a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fa2:	f002 fcbf 	bl	800c924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fa6:	2301      	movs	r3, #1
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3710      	adds	r7, #16
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	; 0x38
 8009fb8:	af02      	add	r7, sp, #8
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <xQueueGenericCreateStatic+0x52>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <xQueueGenericCreateStatic+0x56>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGenericCreateStatic+0x58>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10a      	bne.n	800a026 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	f383 8811 	msr	BASEPRI, r3
 800a018:	f3bf 8f6f 	isb	sy
 800a01c:	f3bf 8f4f 	dsb	sy
 800a020:	623b      	str	r3, [r7, #32]
}
 800a022:	bf00      	nop
 800a024:	e7fe      	b.n	800a024 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d102      	bne.n	800a032 <xQueueGenericCreateStatic+0x7e>
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <xQueueGenericCreateStatic+0x82>
 800a032:	2301      	movs	r3, #1
 800a034:	e000      	b.n	800a038 <xQueueGenericCreateStatic+0x84>
 800a036:	2300      	movs	r3, #0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d10a      	bne.n	800a052 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	61fb      	str	r3, [r7, #28]
}
 800a04e:	bf00      	nop
 800a050:	e7fe      	b.n	800a050 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a052:	2348      	movs	r3, #72	; 0x48
 800a054:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b48      	cmp	r3, #72	; 0x48
 800a05a:	d00a      	beq.n	800a072 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	61bb      	str	r3, [r7, #24]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a072:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00d      	beq.n	800a09a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a086:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	9300      	str	r3, [sp, #0]
 800a08e:	4613      	mov	r3, r2
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f000 f83f 	bl	800a118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3730      	adds	r7, #48	; 0x30
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b08a      	sub	sp, #40	; 0x28
 800a0a8:	af02      	add	r7, sp, #8
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d10a      	bne.n	800a0ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	613b      	str	r3, [r7, #16]
}
 800a0ca:	bf00      	nop
 800a0cc:	e7fe      	b.n	800a0cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	3348      	adds	r3, #72	; 0x48
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f002 fd13 	bl	800cb08 <pvPortMalloc>
 800a0e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d011      	beq.n	800a10e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	3348      	adds	r3, #72	; 0x48
 800a0f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0fc:	79fa      	ldrb	r2, [r7, #7]
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4613      	mov	r3, r2
 800a104:	697a      	ldr	r2, [r7, #20]
 800a106:	68b9      	ldr	r1, [r7, #8]
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f000 f805 	bl	800a118 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a10e:	69bb      	ldr	r3, [r7, #24]
	}
 800a110:	4618      	mov	r0, r3
 800a112:	3720      	adds	r7, #32
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	607a      	str	r2, [r7, #4]
 800a124:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d103      	bne.n	800a134 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	69ba      	ldr	r2, [r7, #24]
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	e002      	b.n	800a13a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	68ba      	ldr	r2, [r7, #8]
 800a144:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a146:	2101      	movs	r1, #1
 800a148:	69b8      	ldr	r0, [r7, #24]
 800a14a:	f7ff fecb 	bl	8009ee4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a14e:	bf00      	nop
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00e      	beq.n	800a182 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a176:	2300      	movs	r3, #0
 800a178:	2200      	movs	r2, #0
 800a17a:	2100      	movs	r1, #0
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f837 	bl	800a1f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a182:	bf00      	nop
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b086      	sub	sp, #24
 800a18e:	af00      	add	r7, sp, #0
 800a190:	4603      	mov	r3, r0
 800a192:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a194:	2301      	movs	r3, #1
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6939      	ldr	r1, [r7, #16]
 800a1a2:	6978      	ldr	r0, [r7, #20]
 800a1a4:	f7ff ff7e 	bl	800a0a4 <xQueueGenericCreate>
 800a1a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	f7ff ffd3 	bl	800a156 <prvInitialiseMutex>

		return xNewQueue;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
	}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b088      	sub	sp, #32
 800a1be:	af02      	add	r7, sp, #8
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	6039      	str	r1, [r7, #0]
 800a1c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	617b      	str	r3, [r7, #20]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	6939      	ldr	r1, [r7, #16]
 800a1d8:	6978      	ldr	r0, [r7, #20]
 800a1da:	f7ff feeb 	bl	8009fb4 <xQueueGenericCreateStatic>
 800a1de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f7ff ffb8 	bl	800a156 <prvInitialiseMutex>

		return xNewQueue;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
	}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b08e      	sub	sp, #56	; 0x38
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	60f8      	str	r0, [r7, #12]
 800a1f8:	60b9      	str	r1, [r7, #8]
 800a1fa:	607a      	str	r2, [r7, #4]
 800a1fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1fe:	2300      	movs	r3, #0
 800a200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xQueueGenericSend+0x32>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d103      	bne.n	800a230 <xQueueGenericSend+0x40>
 800a228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <xQueueGenericSend+0x44>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <xQueueGenericSend+0x46>
 800a234:	2300      	movs	r3, #0
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <xQueueGenericSend+0x60>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b02      	cmp	r3, #2
 800a254:	d103      	bne.n	800a25e <xQueueGenericSend+0x6e>
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d101      	bne.n	800a262 <xQueueGenericSend+0x72>
 800a25e:	2301      	movs	r3, #1
 800a260:	e000      	b.n	800a264 <xQueueGenericSend+0x74>
 800a262:	2300      	movs	r3, #0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <xQueueGenericSend+0x8e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	f383 8811 	msr	BASEPRI, r3
 800a270:	f3bf 8f6f 	isb	sy
 800a274:	f3bf 8f4f 	dsb	sy
 800a278:	623b      	str	r3, [r7, #32]
}
 800a27a:	bf00      	nop
 800a27c:	e7fe      	b.n	800a27c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a27e:	f001 fc9d 	bl	800bbbc <xTaskGetSchedulerState>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <xQueueGenericSend+0x9e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <xQueueGenericSend+0xa2>
 800a28e:	2301      	movs	r3, #1
 800a290:	e000      	b.n	800a294 <xQueueGenericSend+0xa4>
 800a292:	2300      	movs	r3, #0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <xQueueGenericSend+0xbe>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	61fb      	str	r3, [r7, #28]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2ae:	f002 fb09 	bl	800c8c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d302      	bcc.n	800a2c4 <xQueueGenericSend+0xd4>
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d129      	bne.n	800a318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	68b9      	ldr	r1, [r7, #8]
 800a2c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ca:	f000 fc9a 	bl	800ac02 <prvCopyDataToQueue>
 800a2ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d010      	beq.n	800a2fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2da:	3324      	adds	r3, #36	; 0x24
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f001 faad 	bl	800b83c <xTaskRemoveFromEventList>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d013      	beq.n	800a310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2e8:	4b3f      	ldr	r3, [pc, #252]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	e00a      	b.n	800a310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a300:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	f3bf 8f4f 	dsb	sy
 800a30c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a310:	f002 fb08 	bl	800c924 <vPortExitCritical>
				return pdPASS;
 800a314:	2301      	movs	r3, #1
 800a316:	e063      	b.n	800a3e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a31e:	f002 fb01 	bl	800c924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a322:	2300      	movs	r3, #0
 800a324:	e05c      	b.n	800a3e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d106      	bne.n	800a33a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a32c:	f107 0314 	add.w	r3, r7, #20
 800a330:	4618      	mov	r0, r3
 800a332:	f001 fae5 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a336:	2301      	movs	r3, #1
 800a338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a33a:	f002 faf3 	bl	800c924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a33e:	f001 f847 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a342:	f002 fabf 	bl	800c8c4 <vPortEnterCritical>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a34c:	b25b      	sxtb	r3, r3
 800a34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a352:	d103      	bne.n	800a35c <xQueueGenericSend+0x16c>
 800a354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a362:	b25b      	sxtb	r3, r3
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a368:	d103      	bne.n	800a372 <xQueueGenericSend+0x182>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a372:	f002 fad7 	bl	800c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a376:	1d3a      	adds	r2, r7, #4
 800a378:	f107 0314 	add.w	r3, r7, #20
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fad4 	bl	800b92c <xTaskCheckForTimeOut>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d124      	bne.n	800a3d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a38c:	f000 fd31 	bl	800adf2 <prvIsQueueFull>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d018      	beq.n	800a3c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a398:	3310      	adds	r3, #16
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	4611      	mov	r1, r2
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 f9fc 	bl	800b79c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a3a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3a6:	f000 fcbc 	bl	800ad22 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a3aa:	f001 f81f 	bl	800b3ec <xTaskResumeAll>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f47f af7c 	bne.w	800a2ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a3b6:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <xQueueGenericSend+0x1f8>)
 800a3b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3bc:	601a      	str	r2, [r3, #0]
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	f3bf 8f6f 	isb	sy
 800a3c6:	e772      	b.n	800a2ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3ca:	f000 fcaa 	bl	800ad22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ce:	f001 f80d 	bl	800b3ec <xTaskResumeAll>
 800a3d2:	e76c      	b.n	800a2ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d6:	f000 fca4 	bl	800ad22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3da:	f001 f807 	bl	800b3ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3738      	adds	r7, #56	; 0x38
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	e000ed04 	.word	0xe000ed04

0800a3ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b090      	sub	sp, #64	; 0x40
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
 800a3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10a      	bne.n	800a41a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a408:	f383 8811 	msr	BASEPRI, r3
 800a40c:	f3bf 8f6f 	isb	sy
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a416:	bf00      	nop
 800a418:	e7fe      	b.n	800a418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d103      	bne.n	800a428 <xQueueGenericSendFromISR+0x3c>
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <xQueueGenericSendFromISR+0x40>
 800a428:	2301      	movs	r3, #1
 800a42a:	e000      	b.n	800a42e <xQueueGenericSendFromISR+0x42>
 800a42c:	2300      	movs	r3, #0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10a      	bne.n	800a448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d103      	bne.n	800a456 <xQueueGenericSendFromISR+0x6a>
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a452:	2b01      	cmp	r3, #1
 800a454:	d101      	bne.n	800a45a <xQueueGenericSendFromISR+0x6e>
 800a456:	2301      	movs	r3, #1
 800a458:	e000      	b.n	800a45c <xQueueGenericSendFromISR+0x70>
 800a45a:	2300      	movs	r3, #0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a464:	f383 8811 	msr	BASEPRI, r3
 800a468:	f3bf 8f6f 	isb	sy
 800a46c:	f3bf 8f4f 	dsb	sy
 800a470:	623b      	str	r3, [r7, #32]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a476:	f002 fb07 	bl	800ca88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a47a:	f3ef 8211 	mrs	r2, BASEPRI
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	61fa      	str	r2, [r7, #28]
 800a490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d302      	bcc.n	800a4a8 <xQueueGenericSendFromISR+0xbc>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d12f      	bne.n	800a508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4be:	f000 fba0 	bl	800ac02 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a4c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4ca:	d112      	bne.n	800a4f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d016      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	3324      	adds	r3, #36	; 0x24
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f001 f9af 	bl	800b83c <xTaskRemoveFromEventList>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d00e      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00b      	beq.n	800a502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	e007      	b.n	800a502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	b25a      	sxtb	r2, r3
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a502:	2301      	movs	r3, #1
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a506:	e001      	b.n	800a50c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3740      	adds	r7, #64	; 0x40
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a522:	b580      	push	{r7, lr}
 800a524:	b08e      	sub	sp, #56	; 0x38
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
 800a52a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10a      	bne.n	800a54c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	623b      	str	r3, [r7, #32]
}
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	2b00      	cmp	r3, #0
 800a552:	d00a      	beq.n	800a56a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a558:	f383 8811 	msr	BASEPRI, r3
 800a55c:	f3bf 8f6f 	isb	sy
 800a560:	f3bf 8f4f 	dsb	sy
 800a564:	61fb      	str	r3, [r7, #28]
}
 800a566:	bf00      	nop
 800a568:	e7fe      	b.n	800a568 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <xQueueGiveFromISR+0x58>
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	689b      	ldr	r3, [r3, #8]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <xQueueGiveFromISR+0x5c>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <xQueueGiveFromISR+0x5e>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	61bb      	str	r3, [r7, #24]
}
 800a596:	bf00      	nop
 800a598:	e7fe      	b.n	800a598 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a59a:	f002 fa75 	bl	800ca88 <vPortValidateInterruptPriority>
	__asm volatile
 800a59e:	f3ef 8211 	mrs	r2, BASEPRI
 800a5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	617a      	str	r2, [r7, #20]
 800a5b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a5b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	d22b      	bcs.n	800a622 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	1c5a      	adds	r2, r3, #1
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e4:	d112      	bne.n	800a60c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d016      	beq.n	800a61c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3324      	adds	r3, #36	; 0x24
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f001 f922 	bl	800b83c <xTaskRemoveFromEventList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e007      	b.n	800a61c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a610:	3301      	adds	r3, #1
 800a612:	b2db      	uxtb	r3, r3
 800a614:	b25a      	sxtb	r2, r3
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
 800a620:	e001      	b.n	800a626 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a622:	2300      	movs	r3, #0
 800a624:	637b      	str	r3, [r7, #52]	; 0x34
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f383 8811 	msr	BASEPRI, r3
}
 800a630:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a634:	4618      	mov	r0, r3
 800a636:	3738      	adds	r7, #56	; 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08c      	sub	sp, #48	; 0x30
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a648:	2300      	movs	r3, #0
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	2b00      	cmp	r3, #0
 800a654:	d10a      	bne.n	800a66c <xQueueReceive+0x30>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	623b      	str	r3, [r7, #32]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d103      	bne.n	800a67a <xQueueReceive+0x3e>
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <xQueueReceive+0x42>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e000      	b.n	800a680 <xQueueReceive+0x44>
 800a67e:	2300      	movs	r3, #0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10a      	bne.n	800a69a <xQueueReceive+0x5e>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61fb      	str	r3, [r7, #28]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a69a:	f001 fa8f 	bl	800bbbc <xTaskGetSchedulerState>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <xQueueReceive+0x6e>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <xQueueReceive+0x72>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <xQueueReceive+0x74>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <xQueueReceive+0x8e>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	f383 8811 	msr	BASEPRI, r3
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f3bf 8f4f 	dsb	sy
 800a6c4:	61bb      	str	r3, [r7, #24]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ca:	f002 f8fb 	bl	800c8c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01f      	beq.n	800a71a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6de:	f000 fafa 	bl	800acd6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e4:	1e5a      	subs	r2, r3, #1
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d00f      	beq.n	800a712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f4:	3310      	adds	r3, #16
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f001 f8a0 	bl	800b83c <xTaskRemoveFromEventList>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d007      	beq.n	800a712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a702:	4b3d      	ldr	r3, [pc, #244]	; (800a7f8 <xQueueReceive+0x1bc>)
 800a704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a708:	601a      	str	r2, [r3, #0]
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a712:	f002 f907 	bl	800c924 <vPortExitCritical>
				return pdPASS;
 800a716:	2301      	movs	r3, #1
 800a718:	e069      	b.n	800a7ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d103      	bne.n	800a728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a720:	f002 f900 	bl	800c924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a724:	2300      	movs	r3, #0
 800a726:	e062      	b.n	800a7ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d106      	bne.n	800a73c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a72e:	f107 0310 	add.w	r3, r7, #16
 800a732:	4618      	mov	r0, r3
 800a734:	f001 f8e4 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a738:	2301      	movs	r3, #1
 800a73a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a73c:	f002 f8f2 	bl	800c924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a740:	f000 fe46 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a744:	f002 f8be 	bl	800c8c4 <vPortEnterCritical>
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a74e:	b25b      	sxtb	r3, r3
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a754:	d103      	bne.n	800a75e <xQueueReceive+0x122>
 800a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a764:	b25b      	sxtb	r3, r3
 800a766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76a:	d103      	bne.n	800a774 <xQueueReceive+0x138>
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a774:	f002 f8d6 	bl	800c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a778:	1d3a      	adds	r2, r7, #4
 800a77a:	f107 0310 	add.w	r3, r7, #16
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f001 f8d3 	bl	800b92c <xTaskCheckForTimeOut>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d123      	bne.n	800a7d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a78c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a78e:	f000 fb1a 	bl	800adc6 <prvIsQueueEmpty>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d017      	beq.n	800a7c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79a:	3324      	adds	r3, #36	; 0x24
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fffb 	bl	800b79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f000 fabb 	bl	800ad22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7ac:	f000 fe1e 	bl	800b3ec <xTaskResumeAll>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d189      	bne.n	800a6ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a7b6:	4b10      	ldr	r3, [pc, #64]	; (800a7f8 <xQueueReceive+0x1bc>)
 800a7b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7bc:	601a      	str	r2, [r3, #0]
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	e780      	b.n	800a6ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ca:	f000 faaa 	bl	800ad22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7ce:	f000 fe0d 	bl	800b3ec <xTaskResumeAll>
 800a7d2:	e77a      	b.n	800a6ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7d6:	f000 faa4 	bl	800ad22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7da:	f000 fe07 	bl	800b3ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e0:	f000 faf1 	bl	800adc6 <prvIsQueueEmpty>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f43f af6f 	beq.w	800a6ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3730      	adds	r7, #48	; 0x30
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b08e      	sub	sp, #56	; 0x38
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a806:	2300      	movs	r3, #0
 800a808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a80e:	2300      	movs	r3, #0
 800a810:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	623b      	str	r3, [r7, #32]
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	61fb      	str	r3, [r7, #28]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a84c:	f001 f9b6 	bl	800bbbc <xTaskGetSchedulerState>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <xQueueSemaphoreTake+0x60>
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <xQueueSemaphoreTake+0x64>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <xQueueSemaphoreTake+0x66>
 800a860:	2300      	movs	r3, #0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10a      	bne.n	800a87c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	61bb      	str	r3, [r7, #24]
}
 800a878:	bf00      	nop
 800a87a:	e7fe      	b.n	800a87a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a87c:	f002 f822 	bl	800c8c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a884:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d024      	beq.n	800a8d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a892:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d104      	bne.n	800a8a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a89c:	f001 fb36 	bl	800bf0c <pvTaskIncrementMutexHeldCount>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d00f      	beq.n	800a8ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b0:	3310      	adds	r3, #16
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 ffc2 	bl	800b83c <xTaskRemoveFromEventList>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d007      	beq.n	800a8ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a8be:	4b54      	ldr	r3, [pc, #336]	; (800aa10 <xQueueSemaphoreTake+0x214>)
 800a8c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a8ce:	f002 f829 	bl	800c924 <vPortExitCritical>
				return pdPASS;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e097      	b.n	800aa06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d111      	bne.n	800a900 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
 800a8f2:	617b      	str	r3, [r7, #20]
}
 800a8f4:	bf00      	nop
 800a8f6:	e7fe      	b.n	800a8f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8f8:	f002 f814 	bl	800c924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e082      	b.n	800aa06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a906:	f107 030c 	add.w	r3, r7, #12
 800a90a:	4618      	mov	r0, r3
 800a90c:	f000 fff8 	bl	800b900 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a910:	2301      	movs	r3, #1
 800a912:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a914:	f002 f806 	bl	800c924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a918:	f000 fd5a 	bl	800b3d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a91c:	f001 ffd2 	bl	800c8c4 <vPortEnterCritical>
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a926:	b25b      	sxtb	r3, r3
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92c:	d103      	bne.n	800a936 <xQueueSemaphoreTake+0x13a>
 800a92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a942:	d103      	bne.n	800a94c <xQueueSemaphoreTake+0x150>
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a94c:	f001 ffea 	bl	800c924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a950:	463a      	mov	r2, r7
 800a952:	f107 030c 	add.w	r3, r7, #12
 800a956:	4611      	mov	r1, r2
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 ffe7 	bl	800b92c <xTaskCheckForTimeOut>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d132      	bne.n	800a9ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a966:	f000 fa2e 	bl	800adc6 <prvIsQueueEmpty>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d026      	beq.n	800a9be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d109      	bne.n	800a98c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a978:	f001 ffa4 	bl	800c8c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f939 	bl	800bbf8 <xTaskPriorityInherit>
 800a986:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a988:	f001 ffcc 	bl	800c924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a98e:	3324      	adds	r3, #36	; 0x24
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	4611      	mov	r1, r2
 800a994:	4618      	mov	r0, r3
 800a996:	f000 ff01 	bl	800b79c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a99a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a99c:	f000 f9c1 	bl	800ad22 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9a0:	f000 fd24 	bl	800b3ec <xTaskResumeAll>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f47f af68 	bne.w	800a87c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a9ac:	4b18      	ldr	r3, [pc, #96]	; (800aa10 <xQueueSemaphoreTake+0x214>)
 800a9ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	e75e      	b.n	800a87c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a9be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9c0:	f000 f9af 	bl	800ad22 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9c4:	f000 fd12 	bl	800b3ec <xTaskResumeAll>
 800a9c8:	e758      	b.n	800a87c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a9ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9cc:	f000 f9a9 	bl	800ad22 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9d0:	f000 fd0c 	bl	800b3ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9d6:	f000 f9f6 	bl	800adc6 <prvIsQueueEmpty>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f43f af4d 	beq.w	800a87c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00d      	beq.n	800aa04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a9e8:	f001 ff6c 	bl	800c8c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a9ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9ee:	f000 f8f0 	bl	800abd2 <prvGetDisinheritPriorityAfterTimeout>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 f9f8 	bl	800bdf0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa00:	f001 ff90 	bl	800c924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	3738      	adds	r7, #56	; 0x38
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	bf00      	nop
 800aa10:	e000ed04 	.word	0xe000ed04

0800aa14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08e      	sub	sp, #56	; 0x38
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	60f8      	str	r0, [r7, #12]
 800aa1c:	60b9      	str	r1, [r7, #8]
 800aa1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800aa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2e:	f383 8811 	msr	BASEPRI, r3
 800aa32:	f3bf 8f6f 	isb	sy
 800aa36:	f3bf 8f4f 	dsb	sy
 800aa3a:	623b      	str	r3, [r7, #32]
}
 800aa3c:	bf00      	nop
 800aa3e:	e7fe      	b.n	800aa3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d103      	bne.n	800aa4e <xQueueReceiveFromISR+0x3a>
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d101      	bne.n	800aa52 <xQueueReceiveFromISR+0x3e>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <xQueueReceiveFromISR+0x40>
 800aa52:	2300      	movs	r3, #0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10a      	bne.n	800aa6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	61fb      	str	r3, [r7, #28]
}
 800aa6a:	bf00      	nop
 800aa6c:	e7fe      	b.n	800aa6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa6e:	f002 f80b 	bl	800ca88 <vPortValidateInterruptPriority>
	__asm volatile
 800aa72:	f3ef 8211 	mrs	r2, BASEPRI
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	61ba      	str	r2, [r7, #24]
 800aa88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d02f      	beq.n	800aafa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aaa4:	68b9      	ldr	r1, [r7, #8]
 800aaa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaa8:	f000 f915 	bl	800acd6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	1e5a      	subs	r2, r3, #1
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aabc:	d112      	bne.n	800aae4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d016      	beq.n	800aaf4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac8:	3310      	adds	r3, #16
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 feb6 	bl	800b83c <xTaskRemoveFromEventList>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	e007      	b.n	800aaf4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aae8:	3301      	adds	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	b25a      	sxtb	r2, r3
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf8:	e001      	b.n	800aafe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34
 800aafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab00:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	f383 8811 	msr	BASEPRI, r3
}
 800ab08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3738      	adds	r7, #56	; 0x38
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	60bb      	str	r3, [r7, #8]
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ab38:	f001 fec4 	bl	800c8c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ab42:	f001 feef 	bl	800c924 <vPortExitCritical>

	return uxReturn;
 800ab46:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	60fb      	str	r3, [r7, #12]
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ab7e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ab80:	4618      	mov	r0, r3
 800ab82:	371c      	adds	r7, #28
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b084      	sub	sp, #16
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <vQueueDelete+0x28>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60bb      	str	r3, [r7, #8]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800abb4:	68f8      	ldr	r0, [r7, #12]
 800abb6:	f000 f95f 	bl	800ae78 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800abc4:	68f8      	ldr	r0, [r7, #12]
 800abc6:	f002 f86b 	bl	800cca0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800abca:	bf00      	nop
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800abd2:	b480      	push	{r7}
 800abd4:	b085      	sub	sp, #20
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f1c3 0307 	rsb	r3, r3, #7
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e001      	b.n	800abf4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800abf0:	2300      	movs	r3, #0
 800abf2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800abf4:	68fb      	ldr	r3, [r7, #12]
	}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d10d      	bne.n	800ac3c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d14d      	bne.n	800acc4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f001 f859 	bl	800bce4 <xTaskPriorityDisinherit>
 800ac32:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	609a      	str	r2, [r3, #8]
 800ac3a:	e043      	b.n	800acc4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d119      	bne.n	800ac76 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6858      	ldr	r0, [r3, #4]
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	68b9      	ldr	r1, [r7, #8]
 800ac4e:	f01a f92c 	bl	8024eaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	685a      	ldr	r2, [r3, #4]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	441a      	add	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d32b      	bcc.n	800acc4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	605a      	str	r2, [r3, #4]
 800ac74:	e026      	b.n	800acc4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68d8      	ldr	r0, [r3, #12]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	461a      	mov	r2, r3
 800ac80:	68b9      	ldr	r1, [r7, #8]
 800ac82:	f01a f912 	bl	8024eaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	68da      	ldr	r2, [r3, #12]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8e:	425b      	negs	r3, r3
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d207      	bcs.n	800acb2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	689a      	ldr	r2, [r3, #8]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acaa:	425b      	negs	r3, r3
 800acac:	441a      	add	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d105      	bne.n	800acc4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	1c5a      	adds	r2, r3, #1
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b082      	sub	sp, #8
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d018      	beq.n	800ad1a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf0:	441a      	add	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d303      	bcc.n	800ad0a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68d9      	ldr	r1, [r3, #12]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	461a      	mov	r2, r3
 800ad14:	6838      	ldr	r0, [r7, #0]
 800ad16:	f01a f8c8 	bl	8024eaa <memcpy>
	}
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad2a:	f001 fdcb 	bl	800c8c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad34:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad36:	e011      	b.n	800ad5c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d012      	beq.n	800ad66 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3324      	adds	r3, #36	; 0x24
 800ad44:	4618      	mov	r0, r3
 800ad46:	f000 fd79 	bl	800b83c <xTaskRemoveFromEventList>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad50:	f000 fe4e 	bl	800b9f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	dce9      	bgt.n	800ad38 <prvUnlockQueue+0x16>
 800ad64:	e000      	b.n	800ad68 <prvUnlockQueue+0x46>
					break;
 800ad66:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	22ff      	movs	r2, #255	; 0xff
 800ad6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad70:	f001 fdd8 	bl	800c924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad74:	f001 fda6 	bl	800c8c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad7e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad80:	e011      	b.n	800ada6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d012      	beq.n	800adb0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3310      	adds	r3, #16
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fd54 	bl	800b83c <xTaskRemoveFromEventList>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad9a:	f000 fe29 	bl	800b9f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	3b01      	subs	r3, #1
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ada6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dce9      	bgt.n	800ad82 <prvUnlockQueue+0x60>
 800adae:	e000      	b.n	800adb2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800adb0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	22ff      	movs	r2, #255	; 0xff
 800adb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800adba:	f001 fdb3 	bl	800c924 <vPortExitCritical>
}
 800adbe:	bf00      	nop
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adce:	f001 fd79 	bl	800c8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	d102      	bne.n	800ade0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adda:	2301      	movs	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e001      	b.n	800ade4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ade4:	f001 fd9e 	bl	800c924 <vPortExitCritical>

	return xReturn;
 800ade8:	68fb      	ldr	r3, [r7, #12]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b084      	sub	sp, #16
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adfa:	f001 fd63 	bl	800c8c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d102      	bne.n	800ae10 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	60fb      	str	r3, [r7, #12]
 800ae0e:	e001      	b.n	800ae14 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae14:	f001 fd86 	bl	800c924 <vPortExitCritical>

	return xReturn;
 800ae18:	68fb      	ldr	r3, [r7, #12]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60fb      	str	r3, [r7, #12]
 800ae32:	e014      	b.n	800ae5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae34:	4a0f      	ldr	r2, [pc, #60]	; (800ae74 <vQueueAddToRegistry+0x50>)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae40:	490c      	ldr	r1, [pc, #48]	; (800ae74 <vQueueAddToRegistry+0x50>)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae4a:	4a0a      	ldr	r2, [pc, #40]	; (800ae74 <vQueueAddToRegistry+0x50>)
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4413      	add	r3, r2
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae56:	e006      	b.n	800ae66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2b07      	cmp	r3, #7
 800ae62:	d9e7      	bls.n	800ae34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae64:	bf00      	nop
 800ae66:	bf00      	nop
 800ae68:	3714      	adds	r7, #20
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	20006c84 	.word	0x20006c84

0800ae78 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ae78:	b480      	push	{r7}
 800ae7a:	b085      	sub	sp, #20
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae80:	2300      	movs	r3, #0
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e016      	b.n	800aeb4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ae86:	4a10      	ldr	r2, [pc, #64]	; (800aec8 <vQueueUnregisterQueue+0x50>)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	00db      	lsls	r3, r3, #3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d10b      	bne.n	800aeae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ae96:	4a0c      	ldr	r2, [pc, #48]	; (800aec8 <vQueueUnregisterQueue+0x50>)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800aea0:	4a09      	ldr	r2, [pc, #36]	; (800aec8 <vQueueUnregisterQueue+0x50>)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	4413      	add	r3, r2
 800aea8:	2200      	movs	r2, #0
 800aeaa:	605a      	str	r2, [r3, #4]
				break;
 800aeac:	e006      	b.n	800aebc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3301      	adds	r3, #1
 800aeb2:	60fb      	str	r3, [r7, #12]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2b07      	cmp	r3, #7
 800aeb8:	d9e5      	bls.n	800ae86 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800aeba:	bf00      	nop
 800aebc:	bf00      	nop
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr
 800aec8:	20006c84 	.word	0x20006c84

0800aecc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aedc:	f001 fcf2 	bl	800c8c4 <vPortEnterCritical>
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeec:	d103      	bne.n	800aef6 <vQueueWaitForMessageRestricted+0x2a>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aefc:	b25b      	sxtb	r3, r3
 800aefe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af02:	d103      	bne.n	800af0c <vQueueWaitForMessageRestricted+0x40>
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af0c:	f001 fd0a 	bl	800c924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af14:	2b00      	cmp	r3, #0
 800af16:	d106      	bne.n	800af26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	3324      	adds	r3, #36	; 0x24
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	68b9      	ldr	r1, [r7, #8]
 800af20:	4618      	mov	r0, r3
 800af22:	f000 fc5f 	bl	800b7e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800af26:	6978      	ldr	r0, [r7, #20]
 800af28:	f7ff fefb 	bl	800ad22 <prvUnlockQueue>
	}
 800af2c:	bf00      	nop
 800af2e:	3718      	adds	r7, #24
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08e      	sub	sp, #56	; 0x38
 800af38:	af04      	add	r7, sp, #16
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	607a      	str	r2, [r7, #4]
 800af40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800af42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af44:	2b00      	cmp	r3, #0
 800af46:	d10a      	bne.n	800af5e <xTaskCreateStatic+0x2a>
	__asm volatile
 800af48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4c:	f383 8811 	msr	BASEPRI, r3
 800af50:	f3bf 8f6f 	isb	sy
 800af54:	f3bf 8f4f 	dsb	sy
 800af58:	623b      	str	r3, [r7, #32]
}
 800af5a:	bf00      	nop
 800af5c:	e7fe      	b.n	800af5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800af5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10a      	bne.n	800af7a <xTaskCreateStatic+0x46>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	61fb      	str	r3, [r7, #28]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af7a:	23a0      	movs	r3, #160	; 0xa0
 800af7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2ba0      	cmp	r3, #160	; 0xa0
 800af82:	d00a      	beq.n	800af9a <xTaskCreateStatic+0x66>
	__asm volatile
 800af84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	61bb      	str	r3, [r7, #24]
}
 800af96:	bf00      	nop
 800af98:	e7fe      	b.n	800af98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01e      	beq.n	800afe0 <xTaskCreateStatic+0xac>
 800afa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d01b      	beq.n	800afe0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800afb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb4:	2202      	movs	r2, #2
 800afb6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800afba:	2300      	movs	r3, #0
 800afbc:	9303      	str	r3, [sp, #12]
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	9302      	str	r3, [sp, #8]
 800afc2:	f107 0314 	add.w	r3, r7, #20
 800afc6:	9301      	str	r3, [sp, #4]
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	9300      	str	r3, [sp, #0]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f000 f850 	bl	800b078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800afda:	f000 f8eb 	bl	800b1b4 <prvAddNewTaskToReadyList>
 800afde:	e001      	b.n	800afe4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800afe4:	697b      	ldr	r3, [r7, #20]
	}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3728      	adds	r7, #40	; 0x28
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b08c      	sub	sp, #48	; 0x30
 800aff2:	af04      	add	r7, sp, #16
 800aff4:	60f8      	str	r0, [r7, #12]
 800aff6:	60b9      	str	r1, [r7, #8]
 800aff8:	603b      	str	r3, [r7, #0]
 800affa:	4613      	mov	r3, r2
 800affc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800affe:	88fb      	ldrh	r3, [r7, #6]
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4618      	mov	r0, r3
 800b004:	f001 fd80 	bl	800cb08 <pvPortMalloc>
 800b008:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00e      	beq.n	800b02e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b010:	20a0      	movs	r0, #160	; 0xa0
 800b012:	f001 fd79 	bl	800cb08 <pvPortMalloc>
 800b016:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d003      	beq.n	800b026 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	631a      	str	r2, [r3, #48]	; 0x30
 800b024:	e005      	b.n	800b032 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b026:	6978      	ldr	r0, [r7, #20]
 800b028:	f001 fe3a 	bl	800cca0 <vPortFree>
 800b02c:	e001      	b.n	800b032 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b02e:	2300      	movs	r3, #0
 800b030:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d017      	beq.n	800b068 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b040:	88fa      	ldrh	r2, [r7, #6]
 800b042:	2300      	movs	r3, #0
 800b044:	9303      	str	r3, [sp, #12]
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	9302      	str	r3, [sp, #8]
 800b04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b04c:	9301      	str	r3, [sp, #4]
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 f80e 	bl	800b078 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b05c:	69f8      	ldr	r0, [r7, #28]
 800b05e:	f000 f8a9 	bl	800b1b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b062:	2301      	movs	r3, #1
 800b064:	61bb      	str	r3, [r7, #24]
 800b066:	e002      	b.n	800b06e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b06c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b06e:	69bb      	ldr	r3, [r7, #24]
	}
 800b070:	4618      	mov	r0, r3
 800b072:	3720      	adds	r7, #32
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b088      	sub	sp, #32
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b090:	3b01      	subs	r3, #1
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	f023 0307 	bic.w	r3, r3, #7
 800b09e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	617b      	str	r3, [r7, #20]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d01f      	beq.n	800b106 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	61fb      	str	r3, [r7, #28]
 800b0ca:	e012      	b.n	800b0f2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	69fb      	ldr	r3, [r7, #28]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	7819      	ldrb	r1, [r3, #0]
 800b0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	3334      	adds	r3, #52	; 0x34
 800b0dc:	460a      	mov	r2, r1
 800b0de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b0e0:	68ba      	ldr	r2, [r7, #8]
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	61fb      	str	r3, [r7, #28]
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	2b0f      	cmp	r3, #15
 800b0f6:	d9e9      	bls.n	800b0cc <prvInitialiseNewTask+0x54>
 800b0f8:	e000      	b.n	800b0fc <prvInitialiseNewTask+0x84>
			{
				break;
 800b0fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b104:	e003      	b.n	800b10e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b110:	2b06      	cmp	r3, #6
 800b112:	d901      	bls.n	800b118 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b114:	2306      	movs	r3, #6
 800b116:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b11c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b122:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b126:	2200      	movs	r2, #0
 800b128:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	3304      	adds	r3, #4
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe fe43 	bl	8009dba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b136:	3318      	adds	r3, #24
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fe3e 	bl	8009dba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b142:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b146:	f1c3 0207 	rsb	r2, r3, #7
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b152:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15e:	2200      	movs	r2, #0
 800b160:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	334c      	adds	r3, #76	; 0x4c
 800b168:	224c      	movs	r2, #76	; 0x4c
 800b16a:	2100      	movs	r1, #0
 800b16c:	4618      	mov	r0, r3
 800b16e:	f018 fd3f 	bl	8023bf0 <memset>
 800b172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b174:	4a0c      	ldr	r2, [pc, #48]	; (800b1a8 <prvInitialiseNewTask+0x130>)
 800b176:	651a      	str	r2, [r3, #80]	; 0x50
 800b178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17a:	4a0c      	ldr	r2, [pc, #48]	; (800b1ac <prvInitialiseNewTask+0x134>)
 800b17c:	655a      	str	r2, [r3, #84]	; 0x54
 800b17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b180:	4a0b      	ldr	r2, [pc, #44]	; (800b1b0 <prvInitialiseNewTask+0x138>)
 800b182:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	69b8      	ldr	r0, [r7, #24]
 800b18a:	f001 fa6b 	bl	800c664 <pxPortInitialiseStack>
 800b18e:	4602      	mov	r2, r0
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b19c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b19e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1a0:	bf00      	nop
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	20016364 	.word	0x20016364
 800b1ac:	200163cc 	.word	0x200163cc
 800b1b0:	20016434 	.word	0x20016434

0800b1b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b1bc:	f001 fb82 	bl	800c8c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b1c0:	4b2a      	ldr	r3, [pc, #168]	; (800b26c <prvAddNewTaskToReadyList+0xb8>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	4a29      	ldr	r2, [pc, #164]	; (800b26c <prvAddNewTaskToReadyList+0xb8>)
 800b1c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b1ca:	4b29      	ldr	r3, [pc, #164]	; (800b270 <prvAddNewTaskToReadyList+0xbc>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d109      	bne.n	800b1e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b1d2:	4a27      	ldr	r2, [pc, #156]	; (800b270 <prvAddNewTaskToReadyList+0xbc>)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b1d8:	4b24      	ldr	r3, [pc, #144]	; (800b26c <prvAddNewTaskToReadyList+0xb8>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d110      	bne.n	800b202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b1e0:	f000 fc2a 	bl	800ba38 <prvInitialiseTaskLists>
 800b1e4:	e00d      	b.n	800b202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b1e6:	4b23      	ldr	r3, [pc, #140]	; (800b274 <prvAddNewTaskToReadyList+0xc0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b1ee:	4b20      	ldr	r3, [pc, #128]	; (800b270 <prvAddNewTaskToReadyList+0xbc>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d802      	bhi.n	800b202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b1fc:	4a1c      	ldr	r2, [pc, #112]	; (800b270 <prvAddNewTaskToReadyList+0xbc>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b202:	4b1d      	ldr	r3, [pc, #116]	; (800b278 <prvAddNewTaskToReadyList+0xc4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3301      	adds	r3, #1
 800b208:	4a1b      	ldr	r2, [pc, #108]	; (800b278 <prvAddNewTaskToReadyList+0xc4>)
 800b20a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	2201      	movs	r2, #1
 800b212:	409a      	lsls	r2, r3
 800b214:	4b19      	ldr	r3, [pc, #100]	; (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4313      	orrs	r3, r2
 800b21a:	4a18      	ldr	r2, [pc, #96]	; (800b27c <prvAddNewTaskToReadyList+0xc8>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4a15      	ldr	r2, [pc, #84]	; (800b280 <prvAddNewTaskToReadyList+0xcc>)
 800b22c:	441a      	add	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	3304      	adds	r3, #4
 800b232:	4619      	mov	r1, r3
 800b234:	4610      	mov	r0, r2
 800b236:	f7fe fdcd 	bl	8009dd4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b23a:	f001 fb73 	bl	800c924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b23e:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <prvAddNewTaskToReadyList+0xc0>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00e      	beq.n	800b264 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b246:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <prvAddNewTaskToReadyList+0xbc>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	429a      	cmp	r2, r3
 800b252:	d207      	bcs.n	800b264 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b254:	4b0b      	ldr	r3, [pc, #44]	; (800b284 <prvAddNewTaskToReadyList+0xd0>)
 800b256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b264:	bf00      	nop
 800b266:	3708      	adds	r7, #8
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	20006dc4 	.word	0x20006dc4
 800b270:	20006cc4 	.word	0x20006cc4
 800b274:	20006dd0 	.word	0x20006dd0
 800b278:	20006de0 	.word	0x20006de0
 800b27c:	20006dcc 	.word	0x20006dcc
 800b280:	20006cc8 	.word	0x20006cc8
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d017      	beq.n	800b2ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b29a:	4b13      	ldr	r3, [pc, #76]	; (800b2e8 <vTaskDelay+0x60>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <vTaskDelay+0x30>
	__asm volatile
 800b2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a6:	f383 8811 	msr	BASEPRI, r3
 800b2aa:	f3bf 8f6f 	isb	sy
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	60bb      	str	r3, [r7, #8]
}
 800b2b4:	bf00      	nop
 800b2b6:	e7fe      	b.n	800b2b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b2b8:	f000 f88a 	bl	800b3d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b2bc:	2100      	movs	r1, #0
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f000 fe38 	bl	800bf34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b2c4:	f000 f892 	bl	800b3ec <xTaskResumeAll>
 800b2c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d107      	bne.n	800b2e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b2d0:	4b06      	ldr	r3, [pc, #24]	; (800b2ec <vTaskDelay+0x64>)
 800b2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	f3bf 8f4f 	dsb	sy
 800b2dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b2e0:	bf00      	nop
 800b2e2:	3710      	adds	r7, #16
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20006dec 	.word	0x20006dec
 800b2ec:	e000ed04 	.word	0xe000ed04

0800b2f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b08a      	sub	sp, #40	; 0x28
 800b2f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b2fe:	463a      	mov	r2, r7
 800b300:	1d39      	adds	r1, r7, #4
 800b302:	f107 0308 	add.w	r3, r7, #8
 800b306:	4618      	mov	r0, r3
 800b308:	f7f6 ff5c 	bl	80021c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	9202      	str	r2, [sp, #8]
 800b314:	9301      	str	r3, [sp, #4]
 800b316:	2300      	movs	r3, #0
 800b318:	9300      	str	r3, [sp, #0]
 800b31a:	2300      	movs	r3, #0
 800b31c:	460a      	mov	r2, r1
 800b31e:	4924      	ldr	r1, [pc, #144]	; (800b3b0 <vTaskStartScheduler+0xc0>)
 800b320:	4824      	ldr	r0, [pc, #144]	; (800b3b4 <vTaskStartScheduler+0xc4>)
 800b322:	f7ff fe07 	bl	800af34 <xTaskCreateStatic>
 800b326:	4603      	mov	r3, r0
 800b328:	4a23      	ldr	r2, [pc, #140]	; (800b3b8 <vTaskStartScheduler+0xc8>)
 800b32a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b32c:	4b22      	ldr	r3, [pc, #136]	; (800b3b8 <vTaskStartScheduler+0xc8>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d002      	beq.n	800b33a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b334:	2301      	movs	r3, #1
 800b336:	617b      	str	r3, [r7, #20]
 800b338:	e001      	b.n	800b33e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b01      	cmp	r3, #1
 800b342:	d102      	bne.n	800b34a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b344:	f000 fe5c 	bl	800c000 <xTimerCreateTimerTask>
 800b348:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d11b      	bne.n	800b388 <vTaskStartScheduler+0x98>
	__asm volatile
 800b350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	613b      	str	r3, [r7, #16]
}
 800b362:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b364:	4b15      	ldr	r3, [pc, #84]	; (800b3bc <vTaskStartScheduler+0xcc>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	334c      	adds	r3, #76	; 0x4c
 800b36a:	4a15      	ldr	r2, [pc, #84]	; (800b3c0 <vTaskStartScheduler+0xd0>)
 800b36c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b36e:	4b15      	ldr	r3, [pc, #84]	; (800b3c4 <vTaskStartScheduler+0xd4>)
 800b370:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b374:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b376:	4b14      	ldr	r3, [pc, #80]	; (800b3c8 <vTaskStartScheduler+0xd8>)
 800b378:	2201      	movs	r2, #1
 800b37a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b37c:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <vTaskStartScheduler+0xdc>)
 800b37e:	2200      	movs	r2, #0
 800b380:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b382:	f001 f9fd 	bl	800c780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b386:	e00e      	b.n	800b3a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b38e:	d10a      	bne.n	800b3a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b394:	f383 8811 	msr	BASEPRI, r3
 800b398:	f3bf 8f6f 	isb	sy
 800b39c:	f3bf 8f4f 	dsb	sy
 800b3a0:	60fb      	str	r3, [r7, #12]
}
 800b3a2:	bf00      	nop
 800b3a4:	e7fe      	b.n	800b3a4 <vTaskStartScheduler+0xb4>
}
 800b3a6:	bf00      	nop
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	08028278 	.word	0x08028278
 800b3b4:	0800ba09 	.word	0x0800ba09
 800b3b8:	20006de8 	.word	0x20006de8
 800b3bc:	20006cc4 	.word	0x20006cc4
 800b3c0:	200000a0 	.word	0x200000a0
 800b3c4:	20006de4 	.word	0x20006de4
 800b3c8:	20006dd0 	.word	0x20006dd0
 800b3cc:	20006dc8 	.word	0x20006dc8

0800b3d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b3d4:	4b04      	ldr	r3, [pc, #16]	; (800b3e8 <vTaskSuspendAll+0x18>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	4a03      	ldr	r2, [pc, #12]	; (800b3e8 <vTaskSuspendAll+0x18>)
 800b3dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b3de:	bf00      	nop
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr
 800b3e8:	20006dec 	.word	0x20006dec

0800b3ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b3fa:	4b41      	ldr	r3, [pc, #260]	; (800b500 <xTaskResumeAll+0x114>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d10a      	bne.n	800b418 <xTaskResumeAll+0x2c>
	__asm volatile
 800b402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b406:	f383 8811 	msr	BASEPRI, r3
 800b40a:	f3bf 8f6f 	isb	sy
 800b40e:	f3bf 8f4f 	dsb	sy
 800b412:	603b      	str	r3, [r7, #0]
}
 800b414:	bf00      	nop
 800b416:	e7fe      	b.n	800b416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b418:	f001 fa54 	bl	800c8c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b41c:	4b38      	ldr	r3, [pc, #224]	; (800b500 <xTaskResumeAll+0x114>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3b01      	subs	r3, #1
 800b422:	4a37      	ldr	r2, [pc, #220]	; (800b500 <xTaskResumeAll+0x114>)
 800b424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b426:	4b36      	ldr	r3, [pc, #216]	; (800b500 <xTaskResumeAll+0x114>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d161      	bne.n	800b4f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b42e:	4b35      	ldr	r3, [pc, #212]	; (800b504 <xTaskResumeAll+0x118>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d05d      	beq.n	800b4f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b436:	e02e      	b.n	800b496 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b438:	4b33      	ldr	r3, [pc, #204]	; (800b508 <xTaskResumeAll+0x11c>)
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3318      	adds	r3, #24
 800b444:	4618      	mov	r0, r3
 800b446:	f7fe fd22 	bl	8009e8e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3304      	adds	r3, #4
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fe fd1d 	bl	8009e8e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b458:	2201      	movs	r2, #1
 800b45a:	409a      	lsls	r2, r3
 800b45c:	4b2b      	ldr	r3, [pc, #172]	; (800b50c <xTaskResumeAll+0x120>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4313      	orrs	r3, r2
 800b462:	4a2a      	ldr	r2, [pc, #168]	; (800b50c <xTaskResumeAll+0x120>)
 800b464:	6013      	str	r3, [r2, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46a:	4613      	mov	r3, r2
 800b46c:	009b      	lsls	r3, r3, #2
 800b46e:	4413      	add	r3, r2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4a27      	ldr	r2, [pc, #156]	; (800b510 <xTaskResumeAll+0x124>)
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f7fe fca9 	bl	8009dd4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b486:	4b23      	ldr	r3, [pc, #140]	; (800b514 <xTaskResumeAll+0x128>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d302      	bcc.n	800b496 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b490:	4b21      	ldr	r3, [pc, #132]	; (800b518 <xTaskResumeAll+0x12c>)
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b496:	4b1c      	ldr	r3, [pc, #112]	; (800b508 <xTaskResumeAll+0x11c>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1cc      	bne.n	800b438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b4a4:	f000 fb6a 	bl	800bb7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b4a8:	4b1c      	ldr	r3, [pc, #112]	; (800b51c <xTaskResumeAll+0x130>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d010      	beq.n	800b4d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b4b4:	f000 f858 	bl	800b568 <xTaskIncrementTick>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d002      	beq.n	800b4c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b4be:	4b16      	ldr	r3, [pc, #88]	; (800b518 <xTaskResumeAll+0x12c>)
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d1f1      	bne.n	800b4b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b4d0:	4b12      	ldr	r3, [pc, #72]	; (800b51c <xTaskResumeAll+0x130>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b4d6:	4b10      	ldr	r3, [pc, #64]	; (800b518 <xTaskResumeAll+0x12c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d009      	beq.n	800b4f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <xTaskResumeAll+0x134>)
 800b4e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	f3bf 8f4f 	dsb	sy
 800b4ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4f2:	f001 fa17 	bl	800c924 <vPortExitCritical>

	return xAlreadyYielded;
 800b4f6:	68bb      	ldr	r3, [r7, #8]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3710      	adds	r7, #16
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	20006dec 	.word	0x20006dec
 800b504:	20006dc4 	.word	0x20006dc4
 800b508:	20006d84 	.word	0x20006d84
 800b50c:	20006dcc 	.word	0x20006dcc
 800b510:	20006cc8 	.word	0x20006cc8
 800b514:	20006cc4 	.word	0x20006cc4
 800b518:	20006dd8 	.word	0x20006dd8
 800b51c:	20006dd4 	.word	0x20006dd4
 800b520:	e000ed04 	.word	0xe000ed04

0800b524 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b52a:	4b05      	ldr	r3, [pc, #20]	; (800b540 <xTaskGetTickCount+0x1c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b530:	687b      	ldr	r3, [r7, #4]
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20006dc8 	.word	0x20006dc8

0800b544 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b54a:	f001 fa9d 	bl	800ca88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b54e:	2300      	movs	r3, #0
 800b550:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b552:	4b04      	ldr	r3, [pc, #16]	; (800b564 <xTaskGetTickCountFromISR+0x20>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b558:	683b      	ldr	r3, [r7, #0]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20006dc8 	.word	0x20006dc8

0800b568 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b572:	4b4e      	ldr	r3, [pc, #312]	; (800b6ac <xTaskIncrementTick+0x144>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	2b00      	cmp	r3, #0
 800b578:	f040 808e 	bne.w	800b698 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b57c:	4b4c      	ldr	r3, [pc, #304]	; (800b6b0 <xTaskIncrementTick+0x148>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	3301      	adds	r3, #1
 800b582:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b584:	4a4a      	ldr	r2, [pc, #296]	; (800b6b0 <xTaskIncrementTick+0x148>)
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d120      	bne.n	800b5d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b590:	4b48      	ldr	r3, [pc, #288]	; (800b6b4 <xTaskIncrementTick+0x14c>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00a      	beq.n	800b5b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	603b      	str	r3, [r7, #0]
}
 800b5ac:	bf00      	nop
 800b5ae:	e7fe      	b.n	800b5ae <xTaskIncrementTick+0x46>
 800b5b0:	4b40      	ldr	r3, [pc, #256]	; (800b6b4 <xTaskIncrementTick+0x14c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	4b40      	ldr	r3, [pc, #256]	; (800b6b8 <xTaskIncrementTick+0x150>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a3e      	ldr	r2, [pc, #248]	; (800b6b4 <xTaskIncrementTick+0x14c>)
 800b5bc:	6013      	str	r3, [r2, #0]
 800b5be:	4a3e      	ldr	r2, [pc, #248]	; (800b6b8 <xTaskIncrementTick+0x150>)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6013      	str	r3, [r2, #0]
 800b5c4:	4b3d      	ldr	r3, [pc, #244]	; (800b6bc <xTaskIncrementTick+0x154>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	4a3c      	ldr	r2, [pc, #240]	; (800b6bc <xTaskIncrementTick+0x154>)
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	f000 fad5 	bl	800bb7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b5d2:	4b3b      	ldr	r3, [pc, #236]	; (800b6c0 <xTaskIncrementTick+0x158>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d348      	bcc.n	800b66e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5dc:	4b35      	ldr	r3, [pc, #212]	; (800b6b4 <xTaskIncrementTick+0x14c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d104      	bne.n	800b5f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e6:	4b36      	ldr	r3, [pc, #216]	; (800b6c0 <xTaskIncrementTick+0x158>)
 800b5e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5ec:	601a      	str	r2, [r3, #0]
					break;
 800b5ee:	e03e      	b.n	800b66e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f0:	4b30      	ldr	r3, [pc, #192]	; (800b6b4 <xTaskIncrementTick+0x14c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	429a      	cmp	r2, r3
 800b606:	d203      	bcs.n	800b610 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b608:	4a2d      	ldr	r2, [pc, #180]	; (800b6c0 <xTaskIncrementTick+0x158>)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b60e:	e02e      	b.n	800b66e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	3304      	adds	r3, #4
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe fc3a 	bl	8009e8e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d004      	beq.n	800b62c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3318      	adds	r3, #24
 800b626:	4618      	mov	r0, r3
 800b628:	f7fe fc31 	bl	8009e8e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b630:	2201      	movs	r2, #1
 800b632:	409a      	lsls	r2, r3
 800b634:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <xTaskIncrementTick+0x15c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4313      	orrs	r3, r2
 800b63a:	4a22      	ldr	r2, [pc, #136]	; (800b6c4 <xTaskIncrementTick+0x15c>)
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4a1f      	ldr	r2, [pc, #124]	; (800b6c8 <xTaskIncrementTick+0x160>)
 800b64c:	441a      	add	r2, r3
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	3304      	adds	r3, #4
 800b652:	4619      	mov	r1, r3
 800b654:	4610      	mov	r0, r2
 800b656:	f7fe fbbd 	bl	8009dd4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65e:	4b1b      	ldr	r3, [pc, #108]	; (800b6cc <xTaskIncrementTick+0x164>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b664:	429a      	cmp	r2, r3
 800b666:	d3b9      	bcc.n	800b5dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b66c:	e7b6      	b.n	800b5dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b66e:	4b17      	ldr	r3, [pc, #92]	; (800b6cc <xTaskIncrementTick+0x164>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b674:	4914      	ldr	r1, [pc, #80]	; (800b6c8 <xTaskIncrementTick+0x160>)
 800b676:	4613      	mov	r3, r2
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	440b      	add	r3, r1
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d901      	bls.n	800b68a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800b686:	2301      	movs	r3, #1
 800b688:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b68a:	4b11      	ldr	r3, [pc, #68]	; (800b6d0 <xTaskIncrementTick+0x168>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d007      	beq.n	800b6a2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b692:	2301      	movs	r3, #1
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e004      	b.n	800b6a2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b698:	4b0e      	ldr	r3, [pc, #56]	; (800b6d4 <xTaskIncrementTick+0x16c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3301      	adds	r3, #1
 800b69e:	4a0d      	ldr	r2, [pc, #52]	; (800b6d4 <xTaskIncrementTick+0x16c>)
 800b6a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b6a2:	697b      	ldr	r3, [r7, #20]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3718      	adds	r7, #24
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}
 800b6ac:	20006dec 	.word	0x20006dec
 800b6b0:	20006dc8 	.word	0x20006dc8
 800b6b4:	20006d7c 	.word	0x20006d7c
 800b6b8:	20006d80 	.word	0x20006d80
 800b6bc:	20006ddc 	.word	0x20006ddc
 800b6c0:	20006de4 	.word	0x20006de4
 800b6c4:	20006dcc 	.word	0x20006dcc
 800b6c8:	20006cc8 	.word	0x20006cc8
 800b6cc:	20006cc4 	.word	0x20006cc4
 800b6d0:	20006dd8 	.word	0x20006dd8
 800b6d4:	20006dd4 	.word	0x20006dd4

0800b6d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b6de:	4b29      	ldr	r3, [pc, #164]	; (800b784 <vTaskSwitchContext+0xac>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b6e6:	4b28      	ldr	r3, [pc, #160]	; (800b788 <vTaskSwitchContext+0xb0>)
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b6ec:	e044      	b.n	800b778 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800b6ee:	4b26      	ldr	r3, [pc, #152]	; (800b788 <vTaskSwitchContext+0xb0>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f4:	4b25      	ldr	r3, [pc, #148]	; (800b78c <vTaskSwitchContext+0xb4>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	fab3 f383 	clz	r3, r3
 800b700:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b702:	7afb      	ldrb	r3, [r7, #11]
 800b704:	f1c3 031f 	rsb	r3, r3, #31
 800b708:	617b      	str	r3, [r7, #20]
 800b70a:	4921      	ldr	r1, [pc, #132]	; (800b790 <vTaskSwitchContext+0xb8>)
 800b70c:	697a      	ldr	r2, [r7, #20]
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	440b      	add	r3, r1
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d10a      	bne.n	800b734 <vTaskSwitchContext+0x5c>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	607b      	str	r3, [r7, #4]
}
 800b730:	bf00      	nop
 800b732:	e7fe      	b.n	800b732 <vTaskSwitchContext+0x5a>
 800b734:	697a      	ldr	r2, [r7, #20]
 800b736:	4613      	mov	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4a14      	ldr	r2, [pc, #80]	; (800b790 <vTaskSwitchContext+0xb8>)
 800b740:	4413      	add	r3, r2
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	685a      	ldr	r2, [r3, #4]
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	605a      	str	r2, [r3, #4]
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	3308      	adds	r3, #8
 800b756:	429a      	cmp	r2, r3
 800b758:	d104      	bne.n	800b764 <vTaskSwitchContext+0x8c>
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	685a      	ldr	r2, [r3, #4]
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	605a      	str	r2, [r3, #4]
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	4a0a      	ldr	r2, [pc, #40]	; (800b794 <vTaskSwitchContext+0xbc>)
 800b76c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b76e:	4b09      	ldr	r3, [pc, #36]	; (800b794 <vTaskSwitchContext+0xbc>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	334c      	adds	r3, #76	; 0x4c
 800b774:	4a08      	ldr	r2, [pc, #32]	; (800b798 <vTaskSwitchContext+0xc0>)
 800b776:	6013      	str	r3, [r2, #0]
}
 800b778:	bf00      	nop
 800b77a:	371c      	adds	r7, #28
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr
 800b784:	20006dec 	.word	0x20006dec
 800b788:	20006dd8 	.word	0x20006dd8
 800b78c:	20006dcc 	.word	0x20006dcc
 800b790:	20006cc8 	.word	0x20006cc8
 800b794:	20006cc4 	.word	0x20006cc4
 800b798:	200000a0 	.word	0x200000a0

0800b79c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c2:	4b07      	ldr	r3, [pc, #28]	; (800b7e0 <vTaskPlaceOnEventList+0x44>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	3318      	adds	r3, #24
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7fe fb26 	bl	8009e1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	6838      	ldr	r0, [r7, #0]
 800b7d4:	f000 fbae 	bl	800bf34 <prvAddCurrentTaskToDelayedList>
}
 800b7d8:	bf00      	nop
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	20006cc4 	.word	0x20006cc4

0800b7e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d10a      	bne.n	800b80c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	617b      	str	r3, [r7, #20]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <vTaskPlaceOnEventListRestricted+0x54>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3318      	adds	r3, #24
 800b812:	4619      	mov	r1, r3
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7fe fadd 	bl	8009dd4 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d002      	beq.n	800b826 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b824:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	68b8      	ldr	r0, [r7, #8]
 800b82a:	f000 fb83 	bl	800bf34 <prvAddCurrentTaskToDelayedList>
	}
 800b82e:	bf00      	nop
 800b830:	3718      	adds	r7, #24
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20006cc4 	.word	0x20006cc4

0800b83c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b086      	sub	sp, #24
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10a      	bne.n	800b868 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60fb      	str	r3, [r7, #12]
}
 800b864:	bf00      	nop
 800b866:	e7fe      	b.n	800b866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	3318      	adds	r3, #24
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fb0e 	bl	8009e8e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b872:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <xTaskRemoveFromEventList+0xac>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d11c      	bne.n	800b8b4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	3304      	adds	r3, #4
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fb05 	bl	8009e8e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	2201      	movs	r2, #1
 800b88a:	409a      	lsls	r2, r3
 800b88c:	4b17      	ldr	r3, [pc, #92]	; (800b8ec <xTaskRemoveFromEventList+0xb0>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4313      	orrs	r3, r2
 800b892:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <xTaskRemoveFromEventList+0xb0>)
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b89a:	4613      	mov	r3, r2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	009b      	lsls	r3, r3, #2
 800b8a2:	4a13      	ldr	r2, [pc, #76]	; (800b8f0 <xTaskRemoveFromEventList+0xb4>)
 800b8a4:	441a      	add	r2, r3
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3304      	adds	r3, #4
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	f7fe fa91 	bl	8009dd4 <vListInsertEnd>
 800b8b2:	e005      	b.n	800b8c0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	3318      	adds	r3, #24
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	480e      	ldr	r0, [pc, #56]	; (800b8f4 <xTaskRemoveFromEventList+0xb8>)
 800b8bc:	f7fe fa8a 	bl	8009dd4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <xTaskRemoveFromEventList+0xbc>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d905      	bls.n	800b8da <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b8d2:	4b0a      	ldr	r3, [pc, #40]	; (800b8fc <xTaskRemoveFromEventList+0xc0>)
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	e001      	b.n	800b8de <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b8de:	697b      	ldr	r3, [r7, #20]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20006dec 	.word	0x20006dec
 800b8ec:	20006dcc 	.word	0x20006dcc
 800b8f0:	20006cc8 	.word	0x20006cc8
 800b8f4:	20006d84 	.word	0x20006d84
 800b8f8:	20006cc4 	.word	0x20006cc4
 800b8fc:	20006dd8 	.word	0x20006dd8

0800b900 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <vTaskInternalSetTimeOutState+0x24>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b910:	4b05      	ldr	r3, [pc, #20]	; (800b928 <vTaskInternalSetTimeOutState+0x28>)
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	605a      	str	r2, [r3, #4]
}
 800b918:	bf00      	nop
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	20006ddc 	.word	0x20006ddc
 800b928:	20006dc8 	.word	0x20006dc8

0800b92c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b088      	sub	sp, #32
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d10a      	bne.n	800b952 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b940:	f383 8811 	msr	BASEPRI, r3
 800b944:	f3bf 8f6f 	isb	sy
 800b948:	f3bf 8f4f 	dsb	sy
 800b94c:	613b      	str	r3, [r7, #16]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d10a      	bne.n	800b96e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	60fb      	str	r3, [r7, #12]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b96e:	f000 ffa9 	bl	800c8c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b972:	4b1d      	ldr	r3, [pc, #116]	; (800b9e8 <xTaskCheckForTimeOut+0xbc>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b98a:	d102      	bne.n	800b992 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e023      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b15      	ldr	r3, [pc, #84]	; (800b9ec <xTaskCheckForTimeOut+0xc0>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d007      	beq.n	800b9ae <xTaskCheckForTimeOut+0x82>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d302      	bcc.n	800b9ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e015      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d20b      	bcs.n	800b9d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff9b 	bl	800b900 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e004      	b.n	800b9da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9da:	f000 ffa3 	bl	800c924 <vPortExitCritical>

	return xReturn;
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20006dc8 	.word	0x20006dc8
 800b9ec:	20006ddc 	.word	0x20006ddc

0800b9f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9f4:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <vTaskMissedYield+0x14>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20006dd8 	.word	0x20006dd8

0800ba08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba10:	f000 f852 	bl	800bab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba14:	4b06      	ldr	r3, [pc, #24]	; (800ba30 <prvIdleTask+0x28>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d9f9      	bls.n	800ba10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <prvIdleTask+0x2c>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba2c:	e7f0      	b.n	800ba10 <prvIdleTask+0x8>
 800ba2e:	bf00      	nop
 800ba30:	20006cc8 	.word	0x20006cc8
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e00c      	b.n	800ba5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4a12      	ldr	r2, [pc, #72]	; (800ba98 <prvInitialiseTaskLists+0x60>)
 800ba50:	4413      	add	r3, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe f991 	bl	8009d7a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b06      	cmp	r3, #6
 800ba62:	d9ef      	bls.n	800ba44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba64:	480d      	ldr	r0, [pc, #52]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba66:	f7fe f988 	bl	8009d7a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba6a:	480d      	ldr	r0, [pc, #52]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba6c:	f7fe f985 	bl	8009d7a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba70:	480c      	ldr	r0, [pc, #48]	; (800baa4 <prvInitialiseTaskLists+0x6c>)
 800ba72:	f7fe f982 	bl	8009d7a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba76:	480c      	ldr	r0, [pc, #48]	; (800baa8 <prvInitialiseTaskLists+0x70>)
 800ba78:	f7fe f97f 	bl	8009d7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba7c:	480b      	ldr	r0, [pc, #44]	; (800baac <prvInitialiseTaskLists+0x74>)
 800ba7e:	f7fe f97c 	bl	8009d7a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba82:	4b0b      	ldr	r3, [pc, #44]	; (800bab0 <prvInitialiseTaskLists+0x78>)
 800ba84:	4a05      	ldr	r2, [pc, #20]	; (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <prvInitialiseTaskLists+0x7c>)
 800ba8a:	4a05      	ldr	r2, [pc, #20]	; (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20006cc8 	.word	0x20006cc8
 800ba9c:	20006d54 	.word	0x20006d54
 800baa0:	20006d68 	.word	0x20006d68
 800baa4:	20006d84 	.word	0x20006d84
 800baa8:	20006d98 	.word	0x20006d98
 800baac:	20006db0 	.word	0x20006db0
 800bab0:	20006d7c 	.word	0x20006d7c
 800bab4:	20006d80 	.word	0x20006d80

0800bab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800babe:	e019      	b.n	800baf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac0:	f000 ff00 	bl	800c8c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac4:	4b10      	ldr	r3, [pc, #64]	; (800bb08 <prvCheckTasksWaitingTermination+0x50>)
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3304      	adds	r3, #4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe f9dc 	bl	8009e8e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3b01      	subs	r3, #1
 800badc:	4a0b      	ldr	r2, [pc, #44]	; (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae0:	4b0b      	ldr	r3, [pc, #44]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	4a0a      	ldr	r2, [pc, #40]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baea:	f000 ff1b 	bl	800c924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f810 	bl	800bb14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baf4:	4b06      	ldr	r3, [pc, #24]	; (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e1      	bne.n	800bac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20006d98 	.word	0x20006d98
 800bb0c:	20006dc4 	.word	0x20006dc4
 800bb10:	20006dac 	.word	0x20006dac

0800bb14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	334c      	adds	r3, #76	; 0x4c
 800bb20:	4618      	mov	r0, r3
 800bb22:	f019 f8ef 	bl	8024d04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d108      	bne.n	800bb42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb34:	4618      	mov	r0, r3
 800bb36:	f001 f8b3 	bl	800cca0 <vPortFree>
				vPortFree( pxTCB );
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f001 f8b0 	bl	800cca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb40:	e018      	b.n	800bb74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d103      	bne.n	800bb54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 f8a7 	bl	800cca0 <vPortFree>
	}
 800bb52:	e00f      	b.n	800bb74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800bb5a:	2b02      	cmp	r3, #2
 800bb5c:	d00a      	beq.n	800bb74 <prvDeleteTCB+0x60>
	__asm volatile
 800bb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb62:	f383 8811 	msr	BASEPRI, r3
 800bb66:	f3bf 8f6f 	isb	sy
 800bb6a:	f3bf 8f4f 	dsb	sy
 800bb6e:	60fb      	str	r3, [r7, #12]
}
 800bb70:	bf00      	nop
 800bb72:	e7fe      	b.n	800bb72 <prvDeleteTCB+0x5e>
	}
 800bb74:	bf00      	nop
 800bb76:	3710      	adds	r7, #16
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb82:	4b0c      	ldr	r3, [pc, #48]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d104      	bne.n	800bb96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb94:	e008      	b.n	800bba8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb96:	4b07      	ldr	r3, [pc, #28]	; (800bbb4 <prvResetNextTaskUnblockTime+0x38>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	685b      	ldr	r3, [r3, #4]
 800bba4:	4a04      	ldr	r2, [pc, #16]	; (800bbb8 <prvResetNextTaskUnblockTime+0x3c>)
 800bba6:	6013      	str	r3, [r2, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	20006d7c 	.word	0x20006d7c
 800bbb8:	20006de4 	.word	0x20006de4

0800bbbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <xTaskGetSchedulerState+0x34>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e008      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbd0:	4b08      	ldr	r3, [pc, #32]	; (800bbf4 <xTaskGetSchedulerState+0x38>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d102      	bne.n	800bbde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbd8:	2302      	movs	r3, #2
 800bbda:	607b      	str	r3, [r7, #4]
 800bbdc:	e001      	b.n	800bbe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbe2:	687b      	ldr	r3, [r7, #4]
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	20006dd0 	.word	0x20006dd0
 800bbf4:	20006dec 	.word	0x20006dec

0800bbf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc04:	2300      	movs	r3, #0
 800bc06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d05e      	beq.n	800bccc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc12:	4b31      	ldr	r3, [pc, #196]	; (800bcd8 <xTaskPriorityInherit+0xe0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d24e      	bcs.n	800bcba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	db06      	blt.n	800bc32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc24:	4b2c      	ldr	r3, [pc, #176]	; (800bcd8 <xTaskPriorityInherit+0xe0>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	f1c3 0207 	rsb	r2, r3, #7
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	6959      	ldr	r1, [r3, #20]
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3a:	4613      	mov	r3, r2
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4a26      	ldr	r2, [pc, #152]	; (800bcdc <xTaskPriorityInherit+0xe4>)
 800bc44:	4413      	add	r3, r2
 800bc46:	4299      	cmp	r1, r3
 800bc48:	d12f      	bne.n	800bcaa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe f91d 	bl	8009e8e <uxListRemove>
 800bc54:	4603      	mov	r3, r0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5e:	2201      	movs	r2, #1
 800bc60:	fa02 f303 	lsl.w	r3, r2, r3
 800bc64:	43da      	mvns	r2, r3
 800bc66:	4b1e      	ldr	r3, [pc, #120]	; (800bce0 <xTaskPriorityInherit+0xe8>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	4a1c      	ldr	r2, [pc, #112]	; (800bce0 <xTaskPriorityInherit+0xe8>)
 800bc6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bc70:	4b19      	ldr	r3, [pc, #100]	; (800bcd8 <xTaskPriorityInherit+0xe0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7e:	2201      	movs	r2, #1
 800bc80:	409a      	lsls	r2, r3
 800bc82:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <xTaskPriorityInherit+0xe8>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	4313      	orrs	r3, r2
 800bc88:	4a15      	ldr	r2, [pc, #84]	; (800bce0 <xTaskPriorityInherit+0xe8>)
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4a10      	ldr	r2, [pc, #64]	; (800bcdc <xTaskPriorityInherit+0xe4>)
 800bc9a:	441a      	add	r2, r3
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe f896 	bl	8009dd4 <vListInsertEnd>
 800bca8:	e004      	b.n	800bcb4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcaa:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <xTaskPriorityInherit+0xe0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e008      	b.n	800bccc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bcbe:	4b06      	ldr	r3, [pc, #24]	; (800bcd8 <xTaskPriorityInherit+0xe0>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d201      	bcs.n	800bccc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bccc:	68fb      	ldr	r3, [r7, #12]
	}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20006cc4 	.word	0x20006cc4
 800bcdc:	20006cc8 	.word	0x20006cc8
 800bce0:	20006dcc 	.word	0x20006dcc

0800bce4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b086      	sub	sp, #24
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d06e      	beq.n	800bdd8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcfa:	4b3a      	ldr	r3, [pc, #232]	; (800bde4 <xTaskPriorityDisinherit+0x100>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d00a      	beq.n	800bd1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	60fb      	str	r3, [r7, #12]
}
 800bd16:	bf00      	nop
 800bd18:	e7fe      	b.n	800bd18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd26:	f383 8811 	msr	BASEPRI, r3
 800bd2a:	f3bf 8f6f 	isb	sy
 800bd2e:	f3bf 8f4f 	dsb	sy
 800bd32:	60bb      	str	r3, [r7, #8]
}
 800bd34:	bf00      	nop
 800bd36:	e7fe      	b.n	800bd36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd3c:	1e5a      	subs	r2, r3, #1
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d044      	beq.n	800bdd8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d140      	bne.n	800bdd8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe f897 	bl	8009e8e <uxListRemove>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d115      	bne.n	800bd92 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6a:	491f      	ldr	r1, [pc, #124]	; (800bde8 <xTaskPriorityDisinherit+0x104>)
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	009b      	lsls	r3, r3, #2
 800bd70:	4413      	add	r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10a      	bne.n	800bd92 <xTaskPriorityDisinherit+0xae>
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	2201      	movs	r2, #1
 800bd82:	fa02 f303 	lsl.w	r3, r2, r3
 800bd86:	43da      	mvns	r2, r3
 800bd88:	4b18      	ldr	r3, [pc, #96]	; (800bdec <xTaskPriorityDisinherit+0x108>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	4a17      	ldr	r2, [pc, #92]	; (800bdec <xTaskPriorityDisinherit+0x108>)
 800bd90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9e:	f1c3 0207 	rsb	r2, r3, #7
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	2201      	movs	r2, #1
 800bdac:	409a      	lsls	r2, r3
 800bdae:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <xTaskPriorityDisinherit+0x108>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	4a0d      	ldr	r2, [pc, #52]	; (800bdec <xTaskPriorityDisinherit+0x108>)
 800bdb6:	6013      	str	r3, [r2, #0]
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4a08      	ldr	r2, [pc, #32]	; (800bde8 <xTaskPriorityDisinherit+0x104>)
 800bdc6:	441a      	add	r2, r3
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	3304      	adds	r3, #4
 800bdcc:	4619      	mov	r1, r3
 800bdce:	4610      	mov	r0, r2
 800bdd0:	f7fe f800 	bl	8009dd4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdd8:	697b      	ldr	r3, [r7, #20]
	}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3718      	adds	r7, #24
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20006cc4 	.word	0x20006cc4
 800bde8:	20006cc8 	.word	0x20006cc8
 800bdec:	20006dcc 	.word	0x20006dcc

0800bdf0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b088      	sub	sp, #32
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bdfe:	2301      	movs	r3, #1
 800be00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d077      	beq.n	800bef8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d10a      	bne.n	800be26 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800be10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be14:	f383 8811 	msr	BASEPRI, r3
 800be18:	f3bf 8f6f 	isb	sy
 800be1c:	f3bf 8f4f 	dsb	sy
 800be20:	60fb      	str	r3, [r7, #12]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d902      	bls.n	800be36 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	61fb      	str	r3, [r7, #28]
 800be34:	e002      	b.n	800be3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be36:	69bb      	ldr	r3, [r7, #24]
 800be38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	69fa      	ldr	r2, [r7, #28]
 800be42:	429a      	cmp	r2, r3
 800be44:	d058      	beq.n	800bef8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d153      	bne.n	800bef8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be50:	4b2b      	ldr	r3, [pc, #172]	; (800bf00 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	429a      	cmp	r2, r3
 800be58:	d10a      	bne.n	800be70 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be5e:	f383 8811 	msr	BASEPRI, r3
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	f3bf 8f4f 	dsb	sy
 800be6a:	60bb      	str	r3, [r7, #8]
}
 800be6c:	bf00      	nop
 800be6e:	e7fe      	b.n	800be6e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	69fa      	ldr	r2, [r7, #28]
 800be7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800be7c:	69bb      	ldr	r3, [r7, #24]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	2b00      	cmp	r3, #0
 800be82:	db04      	blt.n	800be8e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	f1c3 0207 	rsb	r2, r3, #7
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	6959      	ldr	r1, [r3, #20]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4a19      	ldr	r2, [pc, #100]	; (800bf04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800be9e:	4413      	add	r3, r2
 800bea0:	4299      	cmp	r1, r3
 800bea2:	d129      	bne.n	800bef8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	3304      	adds	r3, #4
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7fd fff0 	bl	8009e8e <uxListRemove>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	2201      	movs	r2, #1
 800beba:	fa02 f303 	lsl.w	r3, r2, r3
 800bebe:	43da      	mvns	r2, r3
 800bec0:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4013      	ands	r3, r2
 800bec6:	4a10      	ldr	r2, [pc, #64]	; (800bf08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bec8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bece:	2201      	movs	r2, #1
 800bed0:	409a      	lsls	r2, r3
 800bed2:	4b0d      	ldr	r3, [pc, #52]	; (800bf08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	4a0b      	ldr	r2, [pc, #44]	; (800bf08 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	4a06      	ldr	r2, [pc, #24]	; (800bf04 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800beea:	441a      	add	r2, r3
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	3304      	adds	r3, #4
 800bef0:	4619      	mov	r1, r3
 800bef2:	4610      	mov	r0, r2
 800bef4:	f7fd ff6e 	bl	8009dd4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bef8:	bf00      	nop
 800befa:	3720      	adds	r7, #32
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	20006cc4 	.word	0x20006cc4
 800bf04:	20006cc8 	.word	0x20006cc8
 800bf08:	20006dcc 	.word	0x20006dcc

0800bf0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf0c:	b480      	push	{r7}
 800bf0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d004      	beq.n	800bf22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf1e:	3201      	adds	r2, #1
 800bf20:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800bf22:	4b03      	ldr	r3, [pc, #12]	; (800bf30 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf24:	681b      	ldr	r3, [r3, #0]
	}
 800bf26:	4618      	mov	r0, r3
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	20006cc4 	.word	0x20006cc4

0800bf34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf3e:	4b29      	ldr	r3, [pc, #164]	; (800bfe4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf44:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	3304      	adds	r3, #4
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fd ff9f 	bl	8009e8e <uxListRemove>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d10b      	bne.n	800bf6e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bf56:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf62:	43da      	mvns	r2, r3
 800bf64:	4b21      	ldr	r3, [pc, #132]	; (800bfec <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	4a20      	ldr	r2, [pc, #128]	; (800bfec <prvAddCurrentTaskToDelayedList+0xb8>)
 800bf6c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf74:	d10a      	bne.n	800bf8c <prvAddCurrentTaskToDelayedList+0x58>
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d007      	beq.n	800bf8c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bf7c:	4b1a      	ldr	r3, [pc, #104]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3304      	adds	r3, #4
 800bf82:	4619      	mov	r1, r3
 800bf84:	481a      	ldr	r0, [pc, #104]	; (800bff0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bf86:	f7fd ff25 	bl	8009dd4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bf8a:	e026      	b.n	800bfda <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4413      	add	r3, r2
 800bf92:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bf94:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d209      	bcs.n	800bfb8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa4:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fd ff33 	bl	8009e1c <vListInsert>
}
 800bfb6:	e010      	b.n	800bfda <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfb8:	4b0f      	ldr	r3, [pc, #60]	; (800bff8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	4b0a      	ldr	r3, [pc, #40]	; (800bfe8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	f7fd ff29 	bl	8009e1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bfca:	4b0c      	ldr	r3, [pc, #48]	; (800bffc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68ba      	ldr	r2, [r7, #8]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d202      	bcs.n	800bfda <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bfd4:	4a09      	ldr	r2, [pc, #36]	; (800bffc <prvAddCurrentTaskToDelayedList+0xc8>)
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	6013      	str	r3, [r2, #0]
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	20006dc8 	.word	0x20006dc8
 800bfe8:	20006cc4 	.word	0x20006cc4
 800bfec:	20006dcc 	.word	0x20006dcc
 800bff0:	20006db0 	.word	0x20006db0
 800bff4:	20006d80 	.word	0x20006d80
 800bff8:	20006d7c 	.word	0x20006d7c
 800bffc:	20006de4 	.word	0x20006de4

0800c000 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b08a      	sub	sp, #40	; 0x28
 800c004:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c006:	2300      	movs	r3, #0
 800c008:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c00a:	f000 faeb 	bl	800c5e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c00e:	4b1c      	ldr	r3, [pc, #112]	; (800c080 <xTimerCreateTimerTask+0x80>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d021      	beq.n	800c05a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c016:	2300      	movs	r3, #0
 800c018:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c01a:	2300      	movs	r3, #0
 800c01c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c01e:	1d3a      	adds	r2, r7, #4
 800c020:	f107 0108 	add.w	r1, r7, #8
 800c024:	f107 030c 	add.w	r3, r7, #12
 800c028:	4618      	mov	r0, r3
 800c02a:	f7f6 f8e5 	bl	80021f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	9202      	str	r2, [sp, #8]
 800c036:	9301      	str	r3, [sp, #4]
 800c038:	2302      	movs	r3, #2
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	2300      	movs	r3, #0
 800c03e:	460a      	mov	r2, r1
 800c040:	4910      	ldr	r1, [pc, #64]	; (800c084 <xTimerCreateTimerTask+0x84>)
 800c042:	4811      	ldr	r0, [pc, #68]	; (800c088 <xTimerCreateTimerTask+0x88>)
 800c044:	f7fe ff76 	bl	800af34 <xTaskCreateStatic>
 800c048:	4603      	mov	r3, r0
 800c04a:	4a10      	ldr	r2, [pc, #64]	; (800c08c <xTimerCreateTimerTask+0x8c>)
 800c04c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <xTimerCreateTimerTask+0x8c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d001      	beq.n	800c05a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c056:	2301      	movs	r3, #1
 800c058:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	613b      	str	r3, [r7, #16]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c076:	697b      	ldr	r3, [r7, #20]
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	20006e20 	.word	0x20006e20
 800c084:	08028280 	.word	0x08028280
 800c088:	0800c1c5 	.word	0x0800c1c5
 800c08c:	20006e24 	.word	0x20006e24

0800c090 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b08a      	sub	sp, #40	; 0x28
 800c094:	af00      	add	r7, sp, #0
 800c096:	60f8      	str	r0, [r7, #12]
 800c098:	60b9      	str	r1, [r7, #8]
 800c09a:	607a      	str	r2, [r7, #4]
 800c09c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10a      	bne.n	800c0be <xTimerGenericCommand+0x2e>
	__asm volatile
 800c0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ac:	f383 8811 	msr	BASEPRI, r3
 800c0b0:	f3bf 8f6f 	isb	sy
 800c0b4:	f3bf 8f4f 	dsb	sy
 800c0b8:	623b      	str	r3, [r7, #32]
}
 800c0ba:	bf00      	nop
 800c0bc:	e7fe      	b.n	800c0bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0be:	4b1a      	ldr	r3, [pc, #104]	; (800c128 <xTimerGenericCommand+0x98>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d02a      	beq.n	800c11c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b05      	cmp	r3, #5
 800c0d6:	dc18      	bgt.n	800c10a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0d8:	f7ff fd70 	bl	800bbbc <xTaskGetSchedulerState>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d109      	bne.n	800c0f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c0e2:	4b11      	ldr	r3, [pc, #68]	; (800c128 <xTimerGenericCommand+0x98>)
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f107 0114 	add.w	r1, r7, #20
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0ee:	f7fe f87f 	bl	800a1f0 <xQueueGenericSend>
 800c0f2:	6278      	str	r0, [r7, #36]	; 0x24
 800c0f4:	e012      	b.n	800c11c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c0f6:	4b0c      	ldr	r3, [pc, #48]	; (800c128 <xTimerGenericCommand+0x98>)
 800c0f8:	6818      	ldr	r0, [r3, #0]
 800c0fa:	f107 0114 	add.w	r1, r7, #20
 800c0fe:	2300      	movs	r3, #0
 800c100:	2200      	movs	r2, #0
 800c102:	f7fe f875 	bl	800a1f0 <xQueueGenericSend>
 800c106:	6278      	str	r0, [r7, #36]	; 0x24
 800c108:	e008      	b.n	800c11c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c10a:	4b07      	ldr	r3, [pc, #28]	; (800c128 <xTimerGenericCommand+0x98>)
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	f107 0114 	add.w	r1, r7, #20
 800c112:	2300      	movs	r3, #0
 800c114:	683a      	ldr	r2, [r7, #0]
 800c116:	f7fe f969 	bl	800a3ec <xQueueGenericSendFromISR>
 800c11a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3728      	adds	r7, #40	; 0x28
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	20006e20 	.word	0x20006e20

0800c12c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b088      	sub	sp, #32
 800c130:	af02      	add	r7, sp, #8
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c136:	4b22      	ldr	r3, [pc, #136]	; (800c1c0 <prvProcessExpiredTimer+0x94>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	68db      	ldr	r3, [r3, #12]
 800c13e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	3304      	adds	r3, #4
 800c144:	4618      	mov	r0, r3
 800c146:	f7fd fea2 	bl	8009e8e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d022      	beq.n	800c19e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	18d1      	adds	r1, r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	6978      	ldr	r0, [r7, #20]
 800c166:	f000 f8d1 	bl	800c30c <prvInsertTimerInActiveList>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01f      	beq.n	800c1b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c170:	2300      	movs	r3, #0
 800c172:	9300      	str	r3, [sp, #0]
 800c174:	2300      	movs	r3, #0
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	2100      	movs	r1, #0
 800c17a:	6978      	ldr	r0, [r7, #20]
 800c17c:	f7ff ff88 	bl	800c090 <xTimerGenericCommand>
 800c180:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d113      	bne.n	800c1b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	60fb      	str	r3, [r7, #12]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c1a4:	f023 0301 	bic.w	r3, r3, #1
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	6978      	ldr	r0, [r7, #20]
 800c1b6:	4798      	blx	r3
}
 800c1b8:	bf00      	nop
 800c1ba:	3718      	adds	r7, #24
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	20006e18 	.word	0x20006e18

0800c1c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1cc:	f107 0308 	add.w	r3, r7, #8
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f000 f857 	bl	800c284 <prvGetNextExpireTime>
 800c1d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 f803 	bl	800c1e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c1e2:	f000 f8d5 	bl	800c390 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1e6:	e7f1      	b.n	800c1cc <prvTimerTask+0x8>

0800c1e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c1f2:	f7ff f8ed 	bl	800b3d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c1f6:	f107 0308 	add.w	r3, r7, #8
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f000 f866 	bl	800c2cc <prvSampleTimeNow>
 800c200:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d130      	bne.n	800c26a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d10a      	bne.n	800c224 <prvProcessTimerOrBlockTask+0x3c>
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	429a      	cmp	r2, r3
 800c214:	d806      	bhi.n	800c224 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c216:	f7ff f8e9 	bl	800b3ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c21a:	68f9      	ldr	r1, [r7, #12]
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff ff85 	bl	800c12c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c222:	e024      	b.n	800c26e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c22a:	4b13      	ldr	r3, [pc, #76]	; (800c278 <prvProcessTimerOrBlockTask+0x90>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d101      	bne.n	800c238 <prvProcessTimerOrBlockTask+0x50>
 800c234:	2301      	movs	r3, #1
 800c236:	e000      	b.n	800c23a <prvProcessTimerOrBlockTask+0x52>
 800c238:	2300      	movs	r3, #0
 800c23a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c23c:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <prvProcessTimerOrBlockTask+0x94>)
 800c23e:	6818      	ldr	r0, [r3, #0]
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	1ad3      	subs	r3, r2, r3
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	4619      	mov	r1, r3
 800c24a:	f7fe fe3f 	bl	800aecc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c24e:	f7ff f8cd 	bl	800b3ec <xTaskResumeAll>
 800c252:	4603      	mov	r3, r0
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10a      	bne.n	800c26e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c258:	4b09      	ldr	r3, [pc, #36]	; (800c280 <prvProcessTimerOrBlockTask+0x98>)
 800c25a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	f3bf 8f4f 	dsb	sy
 800c264:	f3bf 8f6f 	isb	sy
}
 800c268:	e001      	b.n	800c26e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c26a:	f7ff f8bf 	bl	800b3ec <xTaskResumeAll>
}
 800c26e:	bf00      	nop
 800c270:	3710      	adds	r7, #16
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20006e1c 	.word	0x20006e1c
 800c27c:	20006e20 	.word	0x20006e20
 800c280:	e000ed04 	.word	0xe000ed04

0800c284 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c28c:	4b0e      	ldr	r3, [pc, #56]	; (800c2c8 <prvGetNextExpireTime+0x44>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <prvGetNextExpireTime+0x16>
 800c296:	2201      	movs	r2, #1
 800c298:	e000      	b.n	800c29c <prvGetNextExpireTime+0x18>
 800c29a:	2200      	movs	r2, #0
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d105      	bne.n	800c2b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2a8:	4b07      	ldr	r3, [pc, #28]	; (800c2c8 <prvGetNextExpireTime+0x44>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e001      	b.n	800c2b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3714      	adds	r7, #20
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop
 800c2c8:	20006e18 	.word	0x20006e18

0800c2cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2d4:	f7ff f926 	bl	800b524 <xTaskGetTickCount>
 800c2d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <prvSampleTimeNow+0x3c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68fa      	ldr	r2, [r7, #12]
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d205      	bcs.n	800c2f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c2e4:	f000 f91a 	bl	800c51c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	e002      	b.n	800c2f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c2f6:	4a04      	ldr	r2, [pc, #16]	; (800c308 <prvSampleTimeNow+0x3c>)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	20006e28 	.word	0x20006e28

0800c30c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	68ba      	ldr	r2, [r7, #8]
 800c322:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	68fa      	ldr	r2, [r7, #12]
 800c328:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d812      	bhi.n	800c358 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c332:	687a      	ldr	r2, [r7, #4]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	1ad2      	subs	r2, r2, r3
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d302      	bcc.n	800c346 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c340:	2301      	movs	r3, #1
 800c342:	617b      	str	r3, [r7, #20]
 800c344:	e01b      	b.n	800c37e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c346:	4b10      	ldr	r3, [pc, #64]	; (800c388 <prvInsertTimerInActiveList+0x7c>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3304      	adds	r3, #4
 800c34e:	4619      	mov	r1, r3
 800c350:	4610      	mov	r0, r2
 800c352:	f7fd fd63 	bl	8009e1c <vListInsert>
 800c356:	e012      	b.n	800c37e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d206      	bcs.n	800c36e <prvInsertTimerInActiveList+0x62>
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	429a      	cmp	r2, r3
 800c366:	d302      	bcc.n	800c36e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	e007      	b.n	800c37e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <prvInsertTimerInActiveList+0x80>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3304      	adds	r3, #4
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7fd fd4f 	bl	8009e1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c37e:	697b      	ldr	r3, [r7, #20]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3718      	adds	r7, #24
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20006e1c 	.word	0x20006e1c
 800c38c:	20006e18 	.word	0x20006e18

0800c390 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b08c      	sub	sp, #48	; 0x30
 800c394:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c396:	e0ae      	b.n	800c4f6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f2c0 80ab 	blt.w	800c4f6 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	695b      	ldr	r3, [r3, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d004      	beq.n	800c3b6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd fd6c 	bl	8009e8e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c3b6:	1d3b      	adds	r3, r7, #4
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff ff87 	bl	800c2cc <prvSampleTimeNow>
 800c3be:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b09      	cmp	r3, #9
 800c3c4:	f200 8096 	bhi.w	800c4f4 <prvProcessReceivedCommands+0x164>
 800c3c8:	a201      	add	r2, pc, #4	; (adr r2, 800c3d0 <prvProcessReceivedCommands+0x40>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c3f9 	.word	0x0800c3f9
 800c3d4:	0800c3f9 	.word	0x0800c3f9
 800c3d8:	0800c3f9 	.word	0x0800c3f9
 800c3dc:	0800c46d 	.word	0x0800c46d
 800c3e0:	0800c481 	.word	0x0800c481
 800c3e4:	0800c4cb 	.word	0x0800c4cb
 800c3e8:	0800c3f9 	.word	0x0800c3f9
 800c3ec:	0800c3f9 	.word	0x0800c3f9
 800c3f0:	0800c46d 	.word	0x0800c46d
 800c3f4:	0800c481 	.word	0x0800c481
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c3fe:	f043 0301 	orr.w	r3, r3, #1
 800c402:	b2da      	uxtb	r2, r3
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c40a:	68fa      	ldr	r2, [r7, #12]
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	18d1      	adds	r1, r2, r3
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6a3a      	ldr	r2, [r7, #32]
 800c416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c418:	f7ff ff78 	bl	800c30c <prvInsertTimerInActiveList>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d069      	beq.n	800c4f6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c428:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d05e      	beq.n	800c4f6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	441a      	add	r2, r3
 800c440:	2300      	movs	r3, #0
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	2300      	movs	r3, #0
 800c446:	2100      	movs	r1, #0
 800c448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c44a:	f7ff fe21 	bl	800c090 <xTimerGenericCommand>
 800c44e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800c450:	69fb      	ldr	r3, [r7, #28]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d14f      	bne.n	800c4f6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800c456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c45a:	f383 8811 	msr	BASEPRI, r3
 800c45e:	f3bf 8f6f 	isb	sy
 800c462:	f3bf 8f4f 	dsb	sy
 800c466:	61bb      	str	r3, [r7, #24]
}
 800c468:	bf00      	nop
 800c46a:	e7fe      	b.n	800c46a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c472:	f023 0301 	bic.w	r3, r3, #1
 800c476:	b2da      	uxtb	r2, r3
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800c47e:	e03a      	b.n	800c4f6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c486:	f043 0301 	orr.w	r3, r3, #1
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10a      	bne.n	800c4b6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	617b      	str	r3, [r7, #20]
}
 800c4b2:	bf00      	nop
 800c4b4:	e7fe      	b.n	800c4b4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	699a      	ldr	r2, [r3, #24]
 800c4ba:	6a3b      	ldr	r3, [r7, #32]
 800c4bc:	18d1      	adds	r1, r2, r3
 800c4be:	6a3b      	ldr	r3, [r7, #32]
 800c4c0:	6a3a      	ldr	r2, [r7, #32]
 800c4c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4c4:	f7ff ff22 	bl	800c30c <prvInsertTimerInActiveList>
					break;
 800c4c8:	e015      	b.n	800c4f6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4d0:	f003 0302 	and.w	r3, r3, #2
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d103      	bne.n	800c4e0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800c4d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4da:	f000 fbe1 	bl	800cca0 <vPortFree>
 800c4de:	e00a      	b.n	800c4f6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c4e6:	f023 0301 	bic.w	r3, r3, #1
 800c4ea:	b2da      	uxtb	r2, r3
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c4f2:	e000      	b.n	800c4f6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800c4f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4f6:	4b08      	ldr	r3, [pc, #32]	; (800c518 <prvProcessReceivedCommands+0x188>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f107 0108 	add.w	r1, r7, #8
 800c4fe:	2200      	movs	r2, #0
 800c500:	4618      	mov	r0, r3
 800c502:	f7fe f89b 	bl	800a63c <xQueueReceive>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f47f af45 	bne.w	800c398 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c50e:	bf00      	nop
 800c510:	bf00      	nop
 800c512:	3728      	adds	r7, #40	; 0x28
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	20006e20 	.word	0x20006e20

0800c51c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c522:	e048      	b.n	800c5b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c524:	4b2d      	ldr	r3, [pc, #180]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c52e:	4b2b      	ldr	r3, [pc, #172]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3304      	adds	r3, #4
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fd fca6 	bl	8009e8e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c550:	f003 0304 	and.w	r3, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	d02e      	beq.n	800c5b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	699b      	ldr	r3, [r3, #24]
 800c55c:	693a      	ldr	r2, [r7, #16]
 800c55e:	4413      	add	r3, r2
 800c560:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	429a      	cmp	r2, r3
 800c568:	d90e      	bls.n	800c588 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68fa      	ldr	r2, [r7, #12]
 800c574:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c576:	4b19      	ldr	r3, [pc, #100]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fd fc4b 	bl	8009e1c <vListInsert>
 800c586:	e016      	b.n	800c5b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c588:	2300      	movs	r3, #0
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	2300      	movs	r3, #0
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	2100      	movs	r1, #0
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7ff fd7c 	bl	800c090 <xTimerGenericCommand>
 800c598:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d10a      	bne.n	800c5b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	f383 8811 	msr	BASEPRI, r3
 800c5a8:	f3bf 8f6f 	isb	sy
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	603b      	str	r3, [r7, #0]
}
 800c5b2:	bf00      	nop
 800c5b4:	e7fe      	b.n	800c5b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c5b6:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1b1      	bne.n	800c524 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c5c0:	4b06      	ldr	r3, [pc, #24]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c5c6:	4b06      	ldr	r3, [pc, #24]	; (800c5e0 <prvSwitchTimerLists+0xc4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a04      	ldr	r2, [pc, #16]	; (800c5dc <prvSwitchTimerLists+0xc0>)
 800c5cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c5ce:	4a04      	ldr	r2, [pc, #16]	; (800c5e0 <prvSwitchTimerLists+0xc4>)
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	6013      	str	r3, [r2, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20006e18 	.word	0x20006e18
 800c5e0:	20006e1c 	.word	0x20006e1c

0800c5e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c5ea:	f000 f96b 	bl	800c8c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c5ee:	4b15      	ldr	r3, [pc, #84]	; (800c644 <prvCheckForValidListAndQueue+0x60>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d120      	bne.n	800c638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c5f6:	4814      	ldr	r0, [pc, #80]	; (800c648 <prvCheckForValidListAndQueue+0x64>)
 800c5f8:	f7fd fbbf 	bl	8009d7a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c5fc:	4813      	ldr	r0, [pc, #76]	; (800c64c <prvCheckForValidListAndQueue+0x68>)
 800c5fe:	f7fd fbbc 	bl	8009d7a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c602:	4b13      	ldr	r3, [pc, #76]	; (800c650 <prvCheckForValidListAndQueue+0x6c>)
 800c604:	4a10      	ldr	r2, [pc, #64]	; (800c648 <prvCheckForValidListAndQueue+0x64>)
 800c606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c608:	4b12      	ldr	r3, [pc, #72]	; (800c654 <prvCheckForValidListAndQueue+0x70>)
 800c60a:	4a10      	ldr	r2, [pc, #64]	; (800c64c <prvCheckForValidListAndQueue+0x68>)
 800c60c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c60e:	2300      	movs	r3, #0
 800c610:	9300      	str	r3, [sp, #0]
 800c612:	4b11      	ldr	r3, [pc, #68]	; (800c658 <prvCheckForValidListAndQueue+0x74>)
 800c614:	4a11      	ldr	r2, [pc, #68]	; (800c65c <prvCheckForValidListAndQueue+0x78>)
 800c616:	210c      	movs	r1, #12
 800c618:	200a      	movs	r0, #10
 800c61a:	f7fd fccb 	bl	8009fb4 <xQueueGenericCreateStatic>
 800c61e:	4603      	mov	r3, r0
 800c620:	4a08      	ldr	r2, [pc, #32]	; (800c644 <prvCheckForValidListAndQueue+0x60>)
 800c622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <prvCheckForValidListAndQueue+0x60>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d005      	beq.n	800c638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c62c:	4b05      	ldr	r3, [pc, #20]	; (800c644 <prvCheckForValidListAndQueue+0x60>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	490b      	ldr	r1, [pc, #44]	; (800c660 <prvCheckForValidListAndQueue+0x7c>)
 800c632:	4618      	mov	r0, r3
 800c634:	f7fe fbf6 	bl	800ae24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c638:	f000 f974 	bl	800c924 <vPortExitCritical>
}
 800c63c:	bf00      	nop
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	20006e20 	.word	0x20006e20
 800c648:	20006df0 	.word	0x20006df0
 800c64c:	20006e04 	.word	0x20006e04
 800c650:	20006e18 	.word	0x20006e18
 800c654:	20006e1c 	.word	0x20006e1c
 800c658:	20006ea4 	.word	0x20006ea4
 800c65c:	20006e2c 	.word	0x20006e2c
 800c660:	08028288 	.word	0x08028288

0800c664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	3b04      	subs	r3, #4
 800c674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c67c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	3b04      	subs	r3, #4
 800c682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	f023 0201 	bic.w	r2, r3, #1
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3b04      	subs	r3, #4
 800c692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c694:	4a0c      	ldr	r2, [pc, #48]	; (800c6c8 <pxPortInitialiseStack+0x64>)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3b14      	subs	r3, #20
 800c69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3b04      	subs	r3, #4
 800c6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f06f 0202 	mvn.w	r2, #2
 800c6b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3b20      	subs	r3, #32
 800c6b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	0800c6cd 	.word	0x0800c6cd

0800c6cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <prvTaskExitError+0x54>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6de:	d00a      	beq.n	800c6f6 <prvTaskExitError+0x2a>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	60fb      	str	r3, [r7, #12]
}
 800c6f2:	bf00      	nop
 800c6f4:	e7fe      	b.n	800c6f4 <prvTaskExitError+0x28>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	60bb      	str	r3, [r7, #8]
}
 800c708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c70a:	bf00      	nop
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0fc      	beq.n	800c70c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	20000028 	.word	0x20000028
	...

0800c730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c730:	4b07      	ldr	r3, [pc, #28]	; (800c750 <pxCurrentTCBConst2>)
 800c732:	6819      	ldr	r1, [r3, #0]
 800c734:	6808      	ldr	r0, [r1, #0]
 800c736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73a:	f380 8809 	msr	PSP, r0
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f04f 0000 	mov.w	r0, #0
 800c746:	f380 8811 	msr	BASEPRI, r0
 800c74a:	4770      	bx	lr
 800c74c:	f3af 8000 	nop.w

0800c750 <pxCurrentTCBConst2>:
 800c750:	20006cc4 	.word	0x20006cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop

0800c758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c758:	4808      	ldr	r0, [pc, #32]	; (800c77c <prvPortStartFirstTask+0x24>)
 800c75a:	6800      	ldr	r0, [r0, #0]
 800c75c:	6800      	ldr	r0, [r0, #0]
 800c75e:	f380 8808 	msr	MSP, r0
 800c762:	f04f 0000 	mov.w	r0, #0
 800c766:	f380 8814 	msr	CONTROL, r0
 800c76a:	b662      	cpsie	i
 800c76c:	b661      	cpsie	f
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	f3bf 8f6f 	isb	sy
 800c776:	df00      	svc	0
 800c778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c77a:	bf00      	nop
 800c77c:	e000ed08 	.word	0xe000ed08

0800c780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c786:	4b46      	ldr	r3, [pc, #280]	; (800c8a0 <xPortStartScheduler+0x120>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a46      	ldr	r2, [pc, #280]	; (800c8a4 <xPortStartScheduler+0x124>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d10a      	bne.n	800c7a6 <xPortStartScheduler+0x26>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	613b      	str	r3, [r7, #16]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c7a6:	4b3e      	ldr	r3, [pc, #248]	; (800c8a0 <xPortStartScheduler+0x120>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a3f      	ldr	r2, [pc, #252]	; (800c8a8 <xPortStartScheduler+0x128>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d10a      	bne.n	800c7c6 <xPortStartScheduler+0x46>
	__asm volatile
 800c7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b4:	f383 8811 	msr	BASEPRI, r3
 800c7b8:	f3bf 8f6f 	isb	sy
 800c7bc:	f3bf 8f4f 	dsb	sy
 800c7c0:	60fb      	str	r3, [r7, #12]
}
 800c7c2:	bf00      	nop
 800c7c4:	e7fe      	b.n	800c7c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c7c6:	4b39      	ldr	r3, [pc, #228]	; (800c8ac <xPortStartScheduler+0x12c>)
 800c7c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	22ff      	movs	r2, #255	; 0xff
 800c7d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c7e0:	78fb      	ldrb	r3, [r7, #3]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	4b31      	ldr	r3, [pc, #196]	; (800c8b0 <xPortStartScheduler+0x130>)
 800c7ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7ee:	4b31      	ldr	r3, [pc, #196]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c7f0:	2207      	movs	r2, #7
 800c7f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7f4:	e009      	b.n	800c80a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c7f6:	4b2f      	ldr	r3, [pc, #188]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	4a2d      	ldr	r2, [pc, #180]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c7fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	b2db      	uxtb	r3, r3
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	b2db      	uxtb	r3, r3
 800c808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c812:	2b80      	cmp	r3, #128	; 0x80
 800c814:	d0ef      	beq.n	800c7f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c816:	4b27      	ldr	r3, [pc, #156]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f1c3 0307 	rsb	r3, r3, #7
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d00a      	beq.n	800c838 <xPortStartScheduler+0xb8>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	f383 8811 	msr	BASEPRI, r3
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	f3bf 8f4f 	dsb	sy
 800c832:	60bb      	str	r3, [r7, #8]
}
 800c834:	bf00      	nop
 800c836:	e7fe      	b.n	800c836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c838:	4b1e      	ldr	r3, [pc, #120]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	021b      	lsls	r3, r3, #8
 800c83e:	4a1d      	ldr	r2, [pc, #116]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c842:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c84a:	4a1a      	ldr	r2, [pc, #104]	; (800c8b4 <xPortStartScheduler+0x134>)
 800c84c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	b2da      	uxtb	r2, r3
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c856:	4b18      	ldr	r3, [pc, #96]	; (800c8b8 <xPortStartScheduler+0x138>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a17      	ldr	r2, [pc, #92]	; (800c8b8 <xPortStartScheduler+0x138>)
 800c85c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c862:	4b15      	ldr	r3, [pc, #84]	; (800c8b8 <xPortStartScheduler+0x138>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a14      	ldr	r2, [pc, #80]	; (800c8b8 <xPortStartScheduler+0x138>)
 800c868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c86c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c86e:	f000 f8dd 	bl	800ca2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c872:	4b12      	ldr	r3, [pc, #72]	; (800c8bc <xPortStartScheduler+0x13c>)
 800c874:	2200      	movs	r2, #0
 800c876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c878:	f000 f8fc 	bl	800ca74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c87c:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <xPortStartScheduler+0x140>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a0f      	ldr	r2, [pc, #60]	; (800c8c0 <xPortStartScheduler+0x140>)
 800c882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c888:	f7ff ff66 	bl	800c758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c88c:	f7fe ff24 	bl	800b6d8 <vTaskSwitchContext>
	prvTaskExitError();
 800c890:	f7ff ff1c 	bl	800c6cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3718      	adds	r7, #24
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	e000ed00 	.word	0xe000ed00
 800c8a4:	410fc271 	.word	0x410fc271
 800c8a8:	410fc270 	.word	0x410fc270
 800c8ac:	e000e400 	.word	0xe000e400
 800c8b0:	20006eec 	.word	0x20006eec
 800c8b4:	20006ef0 	.word	0x20006ef0
 800c8b8:	e000ed20 	.word	0xe000ed20
 800c8bc:	20000028 	.word	0x20000028
 800c8c0:	e000ef34 	.word	0xe000ef34

0800c8c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	607b      	str	r3, [r7, #4]
}
 800c8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c8de:	4b0f      	ldr	r3, [pc, #60]	; (800c91c <vPortEnterCritical+0x58>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	4a0d      	ldr	r2, [pc, #52]	; (800c91c <vPortEnterCritical+0x58>)
 800c8e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c8e8:	4b0c      	ldr	r3, [pc, #48]	; (800c91c <vPortEnterCritical+0x58>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d10f      	bne.n	800c910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8f0:	4b0b      	ldr	r3, [pc, #44]	; (800c920 <vPortEnterCritical+0x5c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00a      	beq.n	800c910 <vPortEnterCritical+0x4c>
	__asm volatile
 800c8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fe:	f383 8811 	msr	BASEPRI, r3
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	f3bf 8f4f 	dsb	sy
 800c90a:	603b      	str	r3, [r7, #0]
}
 800c90c:	bf00      	nop
 800c90e:	e7fe      	b.n	800c90e <vPortEnterCritical+0x4a>
	}
}
 800c910:	bf00      	nop
 800c912:	370c      	adds	r7, #12
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	20000028 	.word	0x20000028
 800c920:	e000ed04 	.word	0xe000ed04

0800c924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c924:	b480      	push	{r7}
 800c926:	b083      	sub	sp, #12
 800c928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c92a:	4b12      	ldr	r3, [pc, #72]	; (800c974 <vPortExitCritical+0x50>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d10a      	bne.n	800c948 <vPortExitCritical+0x24>
	__asm volatile
 800c932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c936:	f383 8811 	msr	BASEPRI, r3
 800c93a:	f3bf 8f6f 	isb	sy
 800c93e:	f3bf 8f4f 	dsb	sy
 800c942:	607b      	str	r3, [r7, #4]
}
 800c944:	bf00      	nop
 800c946:	e7fe      	b.n	800c946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c948:	4b0a      	ldr	r3, [pc, #40]	; (800c974 <vPortExitCritical+0x50>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	4a09      	ldr	r2, [pc, #36]	; (800c974 <vPortExitCritical+0x50>)
 800c950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c952:	4b08      	ldr	r3, [pc, #32]	; (800c974 <vPortExitCritical+0x50>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <vPortExitCritical+0x42>
 800c95a:	2300      	movs	r3, #0
 800c95c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	f383 8811 	msr	BASEPRI, r3
}
 800c964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c966:	bf00      	nop
 800c968:	370c      	adds	r7, #12
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
 800c972:	bf00      	nop
 800c974:	20000028 	.word	0x20000028
	...

0800c980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c980:	f3ef 8009 	mrs	r0, PSP
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4b15      	ldr	r3, [pc, #84]	; (800c9e0 <pxCurrentTCBConst>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	f01e 0f10 	tst.w	lr, #16
 800c990:	bf08      	it	eq
 800c992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c99a:	6010      	str	r0, [r2, #0]
 800c99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c9a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c9a4:	f380 8811 	msr	BASEPRI, r0
 800c9a8:	f3bf 8f4f 	dsb	sy
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f7fe fe92 	bl	800b6d8 <vTaskSwitchContext>
 800c9b4:	f04f 0000 	mov.w	r0, #0
 800c9b8:	f380 8811 	msr	BASEPRI, r0
 800c9bc:	bc09      	pop	{r0, r3}
 800c9be:	6819      	ldr	r1, [r3, #0]
 800c9c0:	6808      	ldr	r0, [r1, #0]
 800c9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c6:	f01e 0f10 	tst.w	lr, #16
 800c9ca:	bf08      	it	eq
 800c9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c9d0:	f380 8809 	msr	PSP, r0
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	f3af 8000 	nop.w

0800c9e0 <pxCurrentTCBConst>:
 800c9e0:	20006cc4 	.word	0x20006cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop

0800c9e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	607b      	str	r3, [r7, #4]
}
 800ca00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca02:	f7fe fdb1 	bl	800b568 <xTaskIncrementTick>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d003      	beq.n	800ca14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <SysTick_Handler+0x40>)
 800ca0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca12:	601a      	str	r2, [r3, #0]
 800ca14:	2300      	movs	r3, #0
 800ca16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	f383 8811 	msr	BASEPRI, r3
}
 800ca1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ca20:	bf00      	nop
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	e000ed04 	.word	0xe000ed04

0800ca2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ca30:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <vPortSetupTimerInterrupt+0x34>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ca36:	4b0b      	ldr	r3, [pc, #44]	; (800ca64 <vPortSetupTimerInterrupt+0x38>)
 800ca38:	2200      	movs	r2, #0
 800ca3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ca3c:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <vPortSetupTimerInterrupt+0x3c>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a0a      	ldr	r2, [pc, #40]	; (800ca6c <vPortSetupTimerInterrupt+0x40>)
 800ca42:	fba2 2303 	umull	r2, r3, r2, r3
 800ca46:	099b      	lsrs	r3, r3, #6
 800ca48:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <vPortSetupTimerInterrupt+0x44>)
 800ca4a:	3b01      	subs	r3, #1
 800ca4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ca4e:	4b04      	ldr	r3, [pc, #16]	; (800ca60 <vPortSetupTimerInterrupt+0x34>)
 800ca50:	2207      	movs	r2, #7
 800ca52:	601a      	str	r2, [r3, #0]
}
 800ca54:	bf00      	nop
 800ca56:	46bd      	mov	sp, r7
 800ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	e000e010 	.word	0xe000e010
 800ca64:	e000e018 	.word	0xe000e018
 800ca68:	20000008 	.word	0x20000008
 800ca6c:	10624dd3 	.word	0x10624dd3
 800ca70:	e000e014 	.word	0xe000e014

0800ca74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca84 <vPortEnableVFP+0x10>
 800ca78:	6801      	ldr	r1, [r0, #0]
 800ca7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca7e:	6001      	str	r1, [r0, #0]
 800ca80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca82:	bf00      	nop
 800ca84:	e000ed88 	.word	0xe000ed88

0800ca88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca88:	b480      	push	{r7}
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca8e:	f3ef 8305 	mrs	r3, IPSR
 800ca92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	d914      	bls.n	800cac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca9a:	4a17      	ldr	r2, [pc, #92]	; (800caf8 <vPortValidateInterruptPriority+0x70>)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4413      	add	r3, r2
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800caa4:	4b15      	ldr	r3, [pc, #84]	; (800cafc <vPortValidateInterruptPriority+0x74>)
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	7afa      	ldrb	r2, [r7, #11]
 800caaa:	429a      	cmp	r2, r3
 800caac:	d20a      	bcs.n	800cac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800caae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab2:	f383 8811 	msr	BASEPRI, r3
 800cab6:	f3bf 8f6f 	isb	sy
 800caba:	f3bf 8f4f 	dsb	sy
 800cabe:	607b      	str	r3, [r7, #4]
}
 800cac0:	bf00      	nop
 800cac2:	e7fe      	b.n	800cac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cac4:	4b0e      	ldr	r3, [pc, #56]	; (800cb00 <vPortValidateInterruptPriority+0x78>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cacc:	4b0d      	ldr	r3, [pc, #52]	; (800cb04 <vPortValidateInterruptPriority+0x7c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d90a      	bls.n	800caea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad8:	f383 8811 	msr	BASEPRI, r3
 800cadc:	f3bf 8f6f 	isb	sy
 800cae0:	f3bf 8f4f 	dsb	sy
 800cae4:	603b      	str	r3, [r7, #0]
}
 800cae6:	bf00      	nop
 800cae8:	e7fe      	b.n	800cae8 <vPortValidateInterruptPriority+0x60>
	}
 800caea:	bf00      	nop
 800caec:	3714      	adds	r7, #20
 800caee:	46bd      	mov	sp, r7
 800caf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop
 800caf8:	e000e3f0 	.word	0xe000e3f0
 800cafc:	20006eec 	.word	0x20006eec
 800cb00:	e000ed0c 	.word	0xe000ed0c
 800cb04:	20006ef0 	.word	0x20006ef0

0800cb08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b08a      	sub	sp, #40	; 0x28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cb14:	f7fe fc5c 	bl	800b3d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cb18:	4b5b      	ldr	r3, [pc, #364]	; (800cc88 <pvPortMalloc+0x180>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d101      	bne.n	800cb24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cb20:	f000 f920 	bl	800cd64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cb24:	4b59      	ldr	r3, [pc, #356]	; (800cc8c <pvPortMalloc+0x184>)
 800cb26:	681a      	ldr	r2, [r3, #0]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f040 8093 	bne.w	800cc58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d01d      	beq.n	800cb74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cb38:	2208      	movs	r2, #8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d014      	beq.n	800cb74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f023 0307 	bic.w	r3, r3, #7
 800cb50:	3308      	adds	r3, #8
 800cb52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f003 0307 	and.w	r3, r3, #7
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d00a      	beq.n	800cb74 <pvPortMalloc+0x6c>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	617b      	str	r3, [r7, #20]
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d06e      	beq.n	800cc58 <pvPortMalloc+0x150>
 800cb7a:	4b45      	ldr	r3, [pc, #276]	; (800cc90 <pvPortMalloc+0x188>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d869      	bhi.n	800cc58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb84:	4b43      	ldr	r3, [pc, #268]	; (800cc94 <pvPortMalloc+0x18c>)
 800cb86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb88:	4b42      	ldr	r3, [pc, #264]	; (800cc94 <pvPortMalloc+0x18c>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb8e:	e004      	b.n	800cb9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d903      	bls.n	800cbac <pvPortMalloc+0xa4>
 800cba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1f1      	bne.n	800cb90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cbac:	4b36      	ldr	r3, [pc, #216]	; (800cc88 <pvPortMalloc+0x180>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d050      	beq.n	800cc58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cbb6:	6a3b      	ldr	r3, [r7, #32]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2208      	movs	r2, #8
 800cbbc:	4413      	add	r3, r2
 800cbbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	681a      	ldr	r2, [r3, #0]
 800cbc4:	6a3b      	ldr	r3, [r7, #32]
 800cbc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	1ad2      	subs	r2, r2, r3
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d91f      	bls.n	800cc18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cbd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4413      	add	r3, r2
 800cbde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	f003 0307 	and.w	r3, r3, #7
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <pvPortMalloc+0xf8>
	__asm volatile
 800cbea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbee:	f383 8811 	msr	BASEPRI, r3
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	f3bf 8f4f 	dsb	sy
 800cbfa:	613b      	str	r3, [r7, #16]
}
 800cbfc:	bf00      	nop
 800cbfe:	e7fe      	b.n	800cbfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc02:	685a      	ldr	r2, [r3, #4]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	1ad2      	subs	r2, r2, r3
 800cc08:	69bb      	ldr	r3, [r7, #24]
 800cc0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cc12:	69b8      	ldr	r0, [r7, #24]
 800cc14:	f000 f908 	bl	800ce28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cc18:	4b1d      	ldr	r3, [pc, #116]	; (800cc90 <pvPortMalloc+0x188>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	1ad3      	subs	r3, r2, r3
 800cc22:	4a1b      	ldr	r2, [pc, #108]	; (800cc90 <pvPortMalloc+0x188>)
 800cc24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cc26:	4b1a      	ldr	r3, [pc, #104]	; (800cc90 <pvPortMalloc+0x188>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	4b1b      	ldr	r3, [pc, #108]	; (800cc98 <pvPortMalloc+0x190>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d203      	bcs.n	800cc3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cc32:	4b17      	ldr	r3, [pc, #92]	; (800cc90 <pvPortMalloc+0x188>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4a18      	ldr	r2, [pc, #96]	; (800cc98 <pvPortMalloc+0x190>)
 800cc38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	685a      	ldr	r2, [r3, #4]
 800cc3e:	4b13      	ldr	r3, [pc, #76]	; (800cc8c <pvPortMalloc+0x184>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	431a      	orrs	r2, r3
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc4e:	4b13      	ldr	r3, [pc, #76]	; (800cc9c <pvPortMalloc+0x194>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	4a11      	ldr	r2, [pc, #68]	; (800cc9c <pvPortMalloc+0x194>)
 800cc56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc58:	f7fe fbc8 	bl	800b3ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	f003 0307 	and.w	r3, r3, #7
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00a      	beq.n	800cc7c <pvPortMalloc+0x174>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	60fb      	str	r3, [r7, #12]
}
 800cc78:	bf00      	nop
 800cc7a:	e7fe      	b.n	800cc7a <pvPortMalloc+0x172>
	return pvReturn;
 800cc7c:	69fb      	ldr	r3, [r7, #28]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3728      	adds	r7, #40	; 0x28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	20011ec4 	.word	0x20011ec4
 800cc8c:	20011ed8 	.word	0x20011ed8
 800cc90:	20011ec8 	.word	0x20011ec8
 800cc94:	20011ebc 	.word	0x20011ebc
 800cc98:	20011ecc 	.word	0x20011ecc
 800cc9c:	20011ed0 	.word	0x20011ed0

0800cca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d04d      	beq.n	800cd4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ccb2:	2308      	movs	r3, #8
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	697a      	ldr	r2, [r7, #20]
 800ccb8:	4413      	add	r3, r2
 800ccba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	4b24      	ldr	r3, [pc, #144]	; (800cd58 <vPortFree+0xb8>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4013      	ands	r3, r2
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <vPortFree+0x44>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	60fb      	str	r3, [r7, #12]
}
 800cce0:	bf00      	nop
 800cce2:	e7fe      	b.n	800cce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d00a      	beq.n	800cd02 <vPortFree+0x62>
	__asm volatile
 800ccec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf0:	f383 8811 	msr	BASEPRI, r3
 800ccf4:	f3bf 8f6f 	isb	sy
 800ccf8:	f3bf 8f4f 	dsb	sy
 800ccfc:	60bb      	str	r3, [r7, #8]
}
 800ccfe:	bf00      	nop
 800cd00:	e7fe      	b.n	800cd00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	685a      	ldr	r2, [r3, #4]
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <vPortFree+0xb8>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4013      	ands	r3, r2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01e      	beq.n	800cd4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d11a      	bne.n	800cd4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	685a      	ldr	r2, [r3, #4]
 800cd1c:	4b0e      	ldr	r3, [pc, #56]	; (800cd58 <vPortFree+0xb8>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	43db      	mvns	r3, r3
 800cd22:	401a      	ands	r2, r3
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cd28:	f7fe fb52 	bl	800b3d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	685a      	ldr	r2, [r3, #4]
 800cd30:	4b0a      	ldr	r3, [pc, #40]	; (800cd5c <vPortFree+0xbc>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4413      	add	r3, r2
 800cd36:	4a09      	ldr	r2, [pc, #36]	; (800cd5c <vPortFree+0xbc>)
 800cd38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cd3a:	6938      	ldr	r0, [r7, #16]
 800cd3c:	f000 f874 	bl	800ce28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cd40:	4b07      	ldr	r3, [pc, #28]	; (800cd60 <vPortFree+0xc0>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3301      	adds	r3, #1
 800cd46:	4a06      	ldr	r2, [pc, #24]	; (800cd60 <vPortFree+0xc0>)
 800cd48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd4a:	f7fe fb4f 	bl	800b3ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd4e:	bf00      	nop
 800cd50:	3718      	adds	r7, #24
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	20011ed8 	.word	0x20011ed8
 800cd5c:	20011ec8 	.word	0x20011ec8
 800cd60:	20011ed4 	.word	0x20011ed4

0800cd64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd6a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800cd6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd70:	4b27      	ldr	r3, [pc, #156]	; (800ce10 <prvHeapInit+0xac>)
 800cd72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f003 0307 	and.w	r3, r3, #7
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00c      	beq.n	800cd98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3307      	adds	r3, #7
 800cd82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f023 0307 	bic.w	r3, r3, #7
 800cd8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd8c:	68ba      	ldr	r2, [r7, #8]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	4a1f      	ldr	r2, [pc, #124]	; (800ce10 <prvHeapInit+0xac>)
 800cd94:	4413      	add	r3, r2
 800cd96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd9c:	4a1d      	ldr	r2, [pc, #116]	; (800ce14 <prvHeapInit+0xb0>)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cda2:	4b1c      	ldr	r3, [pc, #112]	; (800ce14 <prvHeapInit+0xb0>)
 800cda4:	2200      	movs	r2, #0
 800cda6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68ba      	ldr	r2, [r7, #8]
 800cdac:	4413      	add	r3, r2
 800cdae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cdb0:	2208      	movs	r2, #8
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	1a9b      	subs	r3, r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f023 0307 	bic.w	r3, r3, #7
 800cdbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	4a15      	ldr	r2, [pc, #84]	; (800ce18 <prvHeapInit+0xb4>)
 800cdc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cdc6:	4b14      	ldr	r3, [pc, #80]	; (800ce18 <prvHeapInit+0xb4>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cdce:	4b12      	ldr	r3, [pc, #72]	; (800ce18 <prvHeapInit+0xb4>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cde4:	4b0c      	ldr	r3, [pc, #48]	; (800ce18 <prvHeapInit+0xb4>)
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	685b      	ldr	r3, [r3, #4]
 800cdf0:	4a0a      	ldr	r2, [pc, #40]	; (800ce1c <prvHeapInit+0xb8>)
 800cdf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	4a09      	ldr	r2, [pc, #36]	; (800ce20 <prvHeapInit+0xbc>)
 800cdfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <prvHeapInit+0xc0>)
 800cdfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce02:	601a      	str	r2, [r3, #0]
}
 800ce04:	bf00      	nop
 800ce06:	3714      	adds	r7, #20
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	20006ef4 	.word	0x20006ef4
 800ce14:	20011ebc 	.word	0x20011ebc
 800ce18:	20011ec4 	.word	0x20011ec4
 800ce1c:	20011ecc 	.word	0x20011ecc
 800ce20:	20011ec8 	.word	0x20011ec8
 800ce24:	20011ed8 	.word	0x20011ed8

0800ce28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ce30:	4b28      	ldr	r3, [pc, #160]	; (800ced4 <prvInsertBlockIntoFreeList+0xac>)
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	e002      	b.n	800ce3c <prvInsertBlockIntoFreeList+0x14>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	60fb      	str	r3, [r7, #12]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d8f7      	bhi.n	800ce36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	685b      	ldr	r3, [r3, #4]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	4413      	add	r3, r2
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d108      	bne.n	800ce6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685b      	ldr	r3, [r3, #4]
 800ce60:	441a      	add	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	441a      	add	r2, r3
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d118      	bne.n	800ceb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681a      	ldr	r2, [r3, #0]
 800ce82:	4b15      	ldr	r3, [pc, #84]	; (800ced8 <prvInsertBlockIntoFreeList+0xb0>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d00d      	beq.n	800cea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	441a      	add	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	e008      	b.n	800ceb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cea6:	4b0c      	ldr	r3, [pc, #48]	; (800ced8 <prvInsertBlockIntoFreeList+0xb0>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	601a      	str	r2, [r3, #0]
 800ceae:	e003      	b.n	800ceb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d002      	beq.n	800cec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cec6:	bf00      	nop
 800cec8:	3714      	adds	r7, #20
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	20011ebc 	.word	0x20011ebc
 800ced8:	20011ec4 	.word	0x20011ec4

0800cedc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	4293      	cmp	r3, r2
 800ceec:	bf38      	it	cc
 800ceee:	4613      	movcc	r3, r2
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	370c      	adds	r7, #12
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	bf28      	it	cs
 800cf0e:	4613      	movcs	r3, r2
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf2e:	6839      	ldr	r1, [r7, #0]
 800cf30:	fb01 f202 	mul.w	r2, r1, r2
 800cf34:	1a9b      	subs	r3, r3, r2
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	1ad3      	subs	r3, r2, r3
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr

0800cf46 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	4413      	add	r3, r2
 800cf56:	3b01      	subs	r3, #1
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff ffde 	bl	800cf1c <lfs_aligndown>
 800cf60:	4603      	mov	r3, r0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800cf6a:	b480      	push	{r7}
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	3b01      	subs	r3, #1
 800cf76:	fab3 f383 	clz	r3, r3
 800cf7a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800cf8a:	b480      	push	{r7}
 800cf8c:	b083      	sub	sp, #12
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	fa93 f3a3 	rbit	r3, r3
 800cf98:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr

0800cfa8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7f3 fe21 	bl	8000bf8 <__popcountsi2>
 800cfb6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3708      	adds	r7, #8
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}

0800cfc0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	1ad3      	subs	r3, r2, r3
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 800cfe4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b082      	sub	sp, #8
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7ff ffee 	bl	800cfdc <lfs_fromle32>
 800d000:	4603      	mov	r3, r0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800d00a:	b480      	push	{r7}
 800d00c:	b083      	sub	sp, #12
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800d016:	4618      	mov	r0, r3
 800d018:	370c      	adds	r7, #12
 800d01a:	46bd      	mov	sp, r7
 800d01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d020:	4770      	bx	lr

0800d022 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f7ff ffed 	bl	800d00a <lfs_frombe32>
 800d030:	4603      	mov	r3, r0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3708      	adds	r7, #8
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b082      	sub	sp, #8
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f015 fd56 	bl	8022af4 <malloc>
 800d048:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3708      	adds	r7, #8
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800d05a:	6878      	ldr	r0, [r7, #4]
 800d05c:	f015 fd52 	bl	8022b04 <free>
#else
    (void)p;
#endif
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d078:	601a      	str	r2, [r3, #0]
}
 800d07a:	bf00      	nop
 800d07c:	370c      	adds	r7, #12
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr

0800d086 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800d086:	b580      	push	{r7, lr}
 800d088:	b082      	sub	sp, #8
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	68d8      	ldr	r0, [r3, #12]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d09a:	461a      	mov	r2, r3
 800d09c:	21ff      	movs	r1, #255	; 0xff
 800d09e:	f016 fda7 	bl	8023bf0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0a8:	601a      	str	r2, [r3, #0]
}
 800d0aa:	bf00      	nop
 800d0ac:	3708      	adds	r7, #8
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}
	...

0800d0b4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800d0b4:	b5b0      	push	{r4, r5, r7, lr}
 800d0b6:	b08a      	sub	sp, #40	; 0x28
 800d0b8:	af02      	add	r7, sp, #8
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800d0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0ca:	6a1b      	ldr	r3, [r3, #32]
 800d0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d208      	bcs.n	800d0e4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800d0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d6:	441a      	add	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0dc:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	f240 811b 	bls.w	800d31a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800d0e4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d0e8:	e11c      	b.n	800d324 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800d0ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ec:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d03f      	beq.n	800d174 <lfs_bd_read+0xc0>
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d13a      	bne.n	800d174 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800d108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d232      	bcs.n	800d174 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d114:	429a      	cmp	r2, r3
 800d116:	d324      	bcc.n	800d162 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	689a      	ldr	r2, [r3, #8]
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	6859      	ldr	r1, [r3, #4]
 800d120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d122:	1acb      	subs	r3, r1, r3
 800d124:	4413      	add	r3, r2
 800d126:	4619      	mov	r1, r3
 800d128:	69b8      	ldr	r0, [r7, #24]
 800d12a:	f7ff fee7 	bl	800cefc <lfs_min>
 800d12e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	68da      	ldr	r2, [r3, #12]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d13a:	1acb      	subs	r3, r1, r3
 800d13c:	4413      	add	r3, r2
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	4619      	mov	r1, r3
 800d142:	69f8      	ldr	r0, [r7, #28]
 800d144:	f017 feb1 	bl	8024eaa <memcpy>

                data += diff;
 800d148:	69fa      	ldr	r2, [r7, #28]
 800d14a:	69bb      	ldr	r3, [r7, #24]
 800d14c:	4413      	add	r3, r2
 800d14e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	4413      	add	r3, r2
 800d156:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800d158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800d160:	e0db      	b.n	800d31a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	685a      	ldr	r2, [r3, #4]
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	1ad3      	subs	r3, r2, r3
 800d16a:	4619      	mov	r1, r3
 800d16c:	69b8      	ldr	r0, [r7, #24]
 800d16e:	f7ff fec5 	bl	800cefc <lfs_min>
 800d172:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d17a:	429a      	cmp	r2, r3
 800d17c:	d13a      	bne.n	800d1f4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685a      	ldr	r2, [r3, #4]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	4413      	add	r3, r2
        if (block == rcache->block &&
 800d188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d232      	bcs.n	800d1f4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d194:	429a      	cmp	r2, r3
 800d196:	d324      	bcc.n	800d1e2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	689a      	ldr	r2, [r3, #8]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6859      	ldr	r1, [r3, #4]
 800d1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a2:	1acb      	subs	r3, r1, r3
 800d1a4:	4413      	add	r3, r2
 800d1a6:	4619      	mov	r1, r3
 800d1a8:	69b8      	ldr	r0, [r7, #24]
 800d1aa:	f7ff fea7 	bl	800cefc <lfs_min>
 800d1ae:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	68da      	ldr	r2, [r3, #12]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1ba:	1acb      	subs	r3, r1, r3
 800d1bc:	4413      	add	r3, r2
 800d1be:	69ba      	ldr	r2, [r7, #24]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	69f8      	ldr	r0, [r7, #28]
 800d1c4:	f017 fe71 	bl	8024eaa <memcpy>

                data += diff;
 800d1c8:	69fa      	ldr	r2, [r7, #28]
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	61fb      	str	r3, [r7, #28]
                off += diff;
 800d1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800d1d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800d1e0:	e09b      	b.n	800d31a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	685a      	ldr	r2, [r3, #4]
 800d1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	69b8      	ldr	r0, [r7, #24]
 800d1ee:	f7ff fe85 	bl	800cefc <lfs_min>
 800d1f2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800d1f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d336      	bcc.n	800d26a <lfs_bd_read+0x1b6>
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d200:	695a      	ldr	r2, [r3, #20]
 800d202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d204:	fbb3 f1f2 	udiv	r1, r3, r2
 800d208:	fb01 f202 	mul.w	r2, r1, r2
 800d20c:	1a9b      	subs	r3, r3, r2
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d12b      	bne.n	800d26a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d216:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800d218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d325      	bcc.n	800d26a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d222:	695b      	ldr	r3, [r3, #20]
 800d224:	4619      	mov	r1, r3
 800d226:	69b8      	ldr	r0, [r7, #24]
 800d228:	f7ff fe78 	bl	800cf1c <lfs_aligndown>
 800d22c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d232:	685c      	ldr	r4, [r3, #4]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	9300      	str	r3, [sp, #0]
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d242:	47a0      	blx	r4
 800d244:	6178      	str	r0, [r7, #20]
            if (err) {
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d001      	beq.n	800d250 <lfs_bd_read+0x19c>
                return err;
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	e069      	b.n	800d324 <lfs_bd_read+0x270>
            }

            data += diff;
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	4413      	add	r3, r2
 800d256:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	4413      	add	r3, r2
 800d25e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800d260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	1ad3      	subs	r3, r2, r3
 800d266:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800d268:	e057      	b.n	800d31a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d272:	429a      	cmp	r2, r3
 800d274:	d305      	bcc.n	800d282 <lfs_bd_read+0x1ce>
 800d276:	4b2d      	ldr	r3, [pc, #180]	; (800d32c <lfs_bd_read+0x278>)
 800d278:	4a2d      	ldr	r2, [pc, #180]	; (800d330 <lfs_bd_read+0x27c>)
 800d27a:	215e      	movs	r1, #94	; 0x5e
 800d27c:	482d      	ldr	r0, [pc, #180]	; (800d334 <lfs_bd_read+0x280>)
 800d27e:	f015 fc1b 	bl	8022ab8 <__assert_func>
        rcache->block = block;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d286:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	4619      	mov	r1, r3
 800d290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d292:	f7ff fe43 	bl	800cf1c <lfs_aligndown>
 800d296:	4602      	mov	r2, r0
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800d29c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2a6:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4610      	mov	r0, r2
 800d2ac:	f7ff fe4b 	bl	800cf46 <lfs_alignup>
 800d2b0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2b6:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	4610      	mov	r0, r2
 800d2bc:	f7ff fe1e 	bl	800cefc <lfs_min>
 800d2c0:	4602      	mov	r2, r0
                - rcache->off,
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800d2c6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	f7ff fe13 	bl	800cefc <lfs_min>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2e0:	685c      	ldr	r4, [r3, #4]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6819      	ldr	r1, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	689b      	ldr	r3, [r3, #8]
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	462b      	mov	r3, r5
 800d2fa:	47a0      	blx	r4
 800d2fc:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dd05      	ble.n	800d310 <lfs_bd_read+0x25c>
 800d304:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <lfs_bd_read+0x284>)
 800d306:	4a0a      	ldr	r2, [pc, #40]	; (800d330 <lfs_bd_read+0x27c>)
 800d308:	2169      	movs	r1, #105	; 0x69
 800d30a:	480a      	ldr	r0, [pc, #40]	; (800d334 <lfs_bd_read+0x280>)
 800d30c:	f015 fbd4 	bl	8022ab8 <__assert_func>
        if (err) {
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d001      	beq.n	800d31a <lfs_bd_read+0x266>
            return err;
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	e004      	b.n	800d324 <lfs_bd_read+0x270>
    while (size > 0) {
 800d31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	f47f aee4 	bne.w	800d0ea <lfs_bd_read+0x36>
        }
    }

    return 0;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3720      	adds	r7, #32
 800d328:	46bd      	mov	sp, r7
 800d32a:	bdb0      	pop	{r4, r5, r7, pc}
 800d32c:	08028290 	.word	0x08028290
 800d330:	0802bf60 	.word	0x0802bf60
 800d334:	080282b0 	.word	0x080282b0
 800d338:	080282dc 	.word	0x080282dc

0800d33c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b08e      	sub	sp, #56	; 0x38
 800d340:	af04      	add	r7, sp, #16
 800d342:	60f8      	str	r0, [r7, #12]
 800d344:	60b9      	str	r1, [r7, #8]
 800d346:	607a      	str	r2, [r7, #4]
 800d348:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800d34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800d352:	2300      	movs	r3, #0
 800d354:	627b      	str	r3, [r7, #36]	; 0x24
 800d356:	e039      	b.n	800d3cc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800d358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35c:	1ad3      	subs	r3, r2, r3
 800d35e:	2108      	movs	r1, #8
 800d360:	4618      	mov	r0, r3
 800d362:	f7ff fdcb 	bl	800cefc <lfs_min>
 800d366:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800d368:	683a      	ldr	r2, [r7, #0]
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36c:	1ad1      	subs	r1, r2, r3
 800d36e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	4413      	add	r3, r2
 800d374:	69fa      	ldr	r2, [r7, #28]
 800d376:	9203      	str	r2, [sp, #12]
 800d378:	f107 0210 	add.w	r2, r7, #16
 800d37c:	9202      	str	r2, [sp, #8]
 800d37e:	9301      	str	r3, [sp, #4]
 800d380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	460b      	mov	r3, r1
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fe92 	bl	800d0b4 <lfs_bd_read>
 800d390:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <lfs_bd_cmp+0x60>
            return res;
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	e01c      	b.n	800d3d6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800d39c:	6a3a      	ldr	r2, [r7, #32]
 800d39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a0:	18d1      	adds	r1, r2, r3
 800d3a2:	f107 0310 	add.w	r3, r7, #16
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f016 fbf7 	bl	8023b9c <memcmp>
 800d3ae:	61b8      	str	r0, [r7, #24]
        if (res) {
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d006      	beq.n	800d3c4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	da01      	bge.n	800d3c0 <lfs_bd_cmp+0x84>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e00a      	b.n	800d3d6 <lfs_bd_cmp+0x9a>
 800d3c0:	2302      	movs	r3, #2
 800d3c2:	e008      	b.n	800d3d6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800d3c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	4413      	add	r3, r2
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
 800d3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d3c1      	bcc.n	800d358 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3728      	adds	r7, #40	; 0x28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
	...

0800d3e0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d3e0:	b5b0      	push	{r4, r5, r7, lr}
 800d3e2:	b08c      	sub	sp, #48	; 0x30
 800d3e4:	af04      	add	r7, sp, #16
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3f6:	d061      	beq.n	800d4bc <lfs_bd_flush+0xdc>
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f113 0f02 	cmn.w	r3, #2
 800d400:	d05c      	beq.n	800d4bc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d40a:	6a1b      	ldr	r3, [r3, #32]
 800d40c:	429a      	cmp	r2, r3
 800d40e:	d305      	bcc.n	800d41c <lfs_bd_flush+0x3c>
 800d410:	4b2d      	ldr	r3, [pc, #180]	; (800d4c8 <lfs_bd_flush+0xe8>)
 800d412:	4a2e      	ldr	r2, [pc, #184]	; (800d4cc <lfs_bd_flush+0xec>)
 800d414:	2197      	movs	r1, #151	; 0x97
 800d416:	482e      	ldr	r0, [pc, #184]	; (800d4d0 <lfs_bd_flush+0xf0>)
 800d418:	f015 fb4e 	bl	8022ab8 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	689a      	ldr	r2, [r3, #8]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d424:	699b      	ldr	r3, [r3, #24]
 800d426:	4619      	mov	r1, r3
 800d428:	4610      	mov	r0, r2
 800d42a:	f7ff fd8c 	bl	800cf46 <lfs_alignup>
 800d42e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d434:	689c      	ldr	r4, [r3, #8]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	6819      	ldr	r1, [r3, #0]
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	462b      	mov	r3, r5
 800d44c:	47a0      	blx	r4
 800d44e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	2b00      	cmp	r3, #0
 800d454:	dd05      	ble.n	800d462 <lfs_bd_flush+0x82>
 800d456:	4b1f      	ldr	r3, [pc, #124]	; (800d4d4 <lfs_bd_flush+0xf4>)
 800d458:	4a1c      	ldr	r2, [pc, #112]	; (800d4cc <lfs_bd_flush+0xec>)
 800d45a:	219b      	movs	r1, #155	; 0x9b
 800d45c:	481c      	ldr	r0, [pc, #112]	; (800d4d0 <lfs_bd_flush+0xf0>)
 800d45e:	f015 fb2b 	bl	8022ab8 <__assert_func>
        if (err) {
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d001      	beq.n	800d46c <lfs_bd_flush+0x8c>
            return err;
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	e028      	b.n	800d4be <lfs_bd_flush+0xde>
        }

        if (validate) {
 800d46c:	78fb      	ldrb	r3, [r7, #3]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d020      	beq.n	800d4b4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800d472:	6879      	ldr	r1, [r7, #4]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff fdf7 	bl	800d068 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800d482:	68b9      	ldr	r1, [r7, #8]
 800d484:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800d486:	69f8      	ldr	r0, [r7, #28]
 800d488:	9003      	str	r0, [sp, #12]
 800d48a:	9102      	str	r1, [sp, #8]
 800d48c:	9201      	str	r2, [sp, #4]
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	2100      	movs	r1, #0
 800d496:	68f8      	ldr	r0, [r7, #12]
 800d498:	f7ff ff50 	bl	800d33c <lfs_bd_cmp>
 800d49c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da01      	bge.n	800d4a8 <lfs_bd_flush+0xc8>
                return res;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	e00a      	b.n	800d4be <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800d4ae:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d4b2:	e004      	b.n	800d4be <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800d4b4:	68b9      	ldr	r1, [r7, #8]
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff fde5 	bl	800d086 <lfs_cache_zero>
    }

    return 0;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	080282e8 	.word	0x080282e8
 800d4cc:	0802bf6c 	.word	0x0802bf6c
 800d4d0:	080282b0 	.word	0x080282b0
 800d4d4:	080282dc 	.word	0x080282dc

0800d4d8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
 800d4e4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800d4e6:	6879      	ldr	r1, [r7, #4]
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7ff fdbd 	bl	800d068 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d4ee:	78fb      	ldrb	r3, [r7, #3]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	68b9      	ldr	r1, [r7, #8]
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff ff73 	bl	800d3e0 <lfs_bd_flush>
 800d4fa:	6178      	str	r0, [r7, #20]
    if (err) {
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d001      	beq.n	800d506 <lfs_bd_sync+0x2e>
        return err;
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	e011      	b.n	800d52a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d510:	4610      	mov	r0, r2
 800d512:	4798      	blx	r3
 800d514:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	dd05      	ble.n	800d528 <lfs_bd_sync+0x50>
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <lfs_bd_sync+0x5c>)
 800d51e:	4a06      	ldr	r2, [pc, #24]	; (800d538 <lfs_bd_sync+0x60>)
 800d520:	21c1      	movs	r1, #193	; 0xc1
 800d522:	4806      	ldr	r0, [pc, #24]	; (800d53c <lfs_bd_sync+0x64>)
 800d524:	f015 fac8 	bl	8022ab8 <__assert_func>
    return err;
 800d528:	697b      	ldr	r3, [r7, #20]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3718      	adds	r7, #24
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	080282dc 	.word	0x080282dc
 800d538:	0802bf7c 	.word	0x0802bf7c
 800d53c:	080282b0 	.word	0x080282b0

0800d540 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af00      	add	r7, sp, #0
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800d552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d554:	f113 0f02 	cmn.w	r3, #2
 800d558:	d00b      	beq.n	800d572 <lfs_bd_prog+0x32>
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d55e:	6a1b      	ldr	r3, [r3, #32]
 800d560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d562:	429a      	cmp	r2, r3
 800d564:	d305      	bcc.n	800d572 <lfs_bd_prog+0x32>
 800d566:	4b47      	ldr	r3, [pc, #284]	; (800d684 <lfs_bd_prog+0x144>)
 800d568:	4a47      	ldr	r2, [pc, #284]	; (800d688 <lfs_bd_prog+0x148>)
 800d56a:	21cc      	movs	r1, #204	; 0xcc
 800d56c:	4847      	ldr	r0, [pc, #284]	; (800d68c <lfs_bd_prog+0x14c>)
 800d56e:	f015 faa3 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800d572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d576:	441a      	add	r2, r3
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d57c:	69db      	ldr	r3, [r3, #28]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d977      	bls.n	800d672 <lfs_bd_prog+0x132>
 800d582:	4b43      	ldr	r3, [pc, #268]	; (800d690 <lfs_bd_prog+0x150>)
 800d584:	4a40      	ldr	r2, [pc, #256]	; (800d688 <lfs_bd_prog+0x148>)
 800d586:	21cd      	movs	r1, #205	; 0xcd
 800d588:	4840      	ldr	r0, [pc, #256]	; (800d68c <lfs_bd_prog+0x14c>)
 800d58a:	f015 fa95 	bl	8022ab8 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d594:	429a      	cmp	r2, r3
 800d596:	d151      	bne.n	800d63c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800d59c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d34c      	bcc.n	800d63c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ac:	4413      	add	r3, r2
                off >= pcache->off &&
 800d5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b0:	429a      	cmp	r2, r3
 800d5b2:	d243      	bcs.n	800d63c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	6859      	ldr	r1, [r3, #4]
 800d5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800d5c2:	4413      	add	r3, r2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d5c8:	f7ff fc98 	bl	800cefc <lfs_min>
 800d5cc:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5d8:	1acb      	subs	r3, r1, r3
 800d5da:	4413      	add	r3, r2
 800d5dc:	69ba      	ldr	r2, [r7, #24]
 800d5de:	69f9      	ldr	r1, [r7, #28]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f017 fc62 	bl	8024eaa <memcpy>

            data += diff;
 800d5e6:	69fa      	ldr	r2, [r7, #28]
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	61fb      	str	r3, [r7, #28]
            off += diff;
 800d5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5f0:	69bb      	ldr	r3, [r7, #24]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800d5f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	6898      	ldr	r0, [r3, #8]
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	4619      	mov	r1, r3
 800d60c:	f7ff fc66 	bl	800cedc <lfs_max>
 800d610:	4602      	mov	r2, r0
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	689a      	ldr	r2, [r3, #8]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d620:	429a      	cmp	r2, r3
 800d622:	d126      	bne.n	800d672 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800d624:	78fb      	ldrb	r3, [r7, #3]
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	68b9      	ldr	r1, [r7, #8]
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff fed8 	bl	800d3e0 <lfs_bd_flush>
 800d630:	6178      	str	r0, [r7, #20]
                if (err) {
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d01c      	beq.n	800d672 <lfs_bd_prog+0x132>
                    return err;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	e01e      	b.n	800d67a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d644:	d005      	beq.n	800d652 <lfs_bd_prog+0x112>
 800d646:	4b13      	ldr	r3, [pc, #76]	; (800d694 <lfs_bd_prog+0x154>)
 800d648:	4a0f      	ldr	r2, [pc, #60]	; (800d688 <lfs_bd_prog+0x148>)
 800d64a:	21ea      	movs	r1, #234	; 0xea
 800d64c:	480f      	ldr	r0, [pc, #60]	; (800d68c <lfs_bd_prog+0x14c>)
 800d64e:	f015 fa33 	bl	8022ab8 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d656:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	4619      	mov	r1, r3
 800d660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d662:	f7ff fc5b 	bl	800cf1c <lfs_aligndown>
 800d666:	4602      	mov	r2, r0
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	2200      	movs	r2, #0
 800d670:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	2b00      	cmp	r3, #0
 800d676:	d18a      	bne.n	800d58e <lfs_bd_prog+0x4e>
    }

    return 0;
 800d678:	2300      	movs	r3, #0
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3720      	adds	r7, #32
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	08028310 	.word	0x08028310
 800d688:	0802bf88 	.word	0x0802bf88
 800d68c:	080282b0 	.word	0x080282b0
 800d690:	0802834c 	.word	0x0802834c
 800d694:	08028370 	.word	0x08028370

0800d698 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	683a      	ldr	r2, [r7, #0]
 800d6aa:	429a      	cmp	r2, r3
 800d6ac:	d305      	bcc.n	800d6ba <lfs_bd_erase+0x22>
 800d6ae:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <lfs_bd_erase+0x50>)
 800d6b0:	4a0e      	ldr	r2, [pc, #56]	; (800d6ec <lfs_bd_erase+0x54>)
 800d6b2:	21f8      	movs	r1, #248	; 0xf8
 800d6b4:	480e      	ldr	r0, [pc, #56]	; (800d6f0 <lfs_bd_erase+0x58>)
 800d6b6:	f015 f9ff 	bl	8022ab8 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6be:	68db      	ldr	r3, [r3, #12]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	4610      	mov	r0, r2
 800d6c8:	4798      	blx	r3
 800d6ca:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	dd05      	ble.n	800d6de <lfs_bd_erase+0x46>
 800d6d2:	4b08      	ldr	r3, [pc, #32]	; (800d6f4 <lfs_bd_erase+0x5c>)
 800d6d4:	4a05      	ldr	r2, [pc, #20]	; (800d6ec <lfs_bd_erase+0x54>)
 800d6d6:	21fa      	movs	r1, #250	; 0xfa
 800d6d8:	4805      	ldr	r0, [pc, #20]	; (800d6f0 <lfs_bd_erase+0x58>)
 800d6da:	f015 f9ed 	bl	8022ab8 <__assert_func>
    return err;
 800d6de:	68fb      	ldr	r3, [r7, #12]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	08028290 	.word	0x08028290
 800d6ec:	0802bf94 	.word	0x0802bf94
 800d6f0:	080282b0 	.word	0x080282b0
 800d6f4:	080282dc 	.word	0x080282dc

0800d6f8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	685a      	ldr	r2, [r3, #4]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3304      	adds	r3, #4
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	601a      	str	r2, [r3, #0]
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800d722:	b480      	push	{r7}
 800d724:	b083      	sub	sp, #12
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d732:	d005      	beq.n	800d740 <lfs_pair_isnull+0x1e>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	3304      	adds	r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d73e:	d101      	bne.n	800d744 <lfs_pair_isnull+0x22>
 800d740:	2301      	movs	r3, #1
 800d742:	e000      	b.n	800d746 <lfs_pair_isnull+0x24>
 800d744:	2300      	movs	r3, #0
 800d746:	f003 0301 	and.w	r3, r3, #1
 800d74a:	b2db      	uxtb	r3, r3
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	370c      	adds	r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr

0800d758 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d017      	beq.n	800d79e <lfs_pair_cmp+0x46>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	3304      	adds	r3, #4
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	3304      	adds	r3, #4
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d00f      	beq.n	800d79e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	3304      	adds	r3, #4
 800d786:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d788:	429a      	cmp	r2, r3
 800d78a:	d008      	beq.n	800d79e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3304      	adds	r3, #4
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800d796:	429a      	cmp	r2, r3
 800d798:	d001      	beq.n	800d79e <lfs_pair_cmp+0x46>
 800d79a:	2301      	movs	r3, #1
 800d79c:	e000      	b.n	800d7a0 <lfs_pair_cmp+0x48>
 800d79e:	2300      	movs	r3, #0
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	370c      	adds	r7, #12
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800d7ac:	b480      	push	{r7}
 800d7ae:	b083      	sub	sp, #12
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d107      	bne.n	800d7d2 <lfs_pair_sync+0x26>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	3304      	adds	r3, #4
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	3304      	adds	r3, #4
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d00d      	beq.n	800d7ee <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d108      	bne.n	800d7f2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d101      	bne.n	800d7f2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e000      	b.n	800d7f4 <lfs_pair_sync+0x48>
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	b2db      	uxtb	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800d806:	b590      	push	{r4, r7, lr}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff fbe2 	bl	800cfdc <lfs_fromle32>
 800d818:	4602      	mov	r2, r0
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	3304      	adds	r3, #4
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	1d1c      	adds	r4, r3, #4
 800d828:	4610      	mov	r0, r2
 800d82a:	f7ff fbd7 	bl	800cfdc <lfs_fromle32>
 800d82e:	4603      	mov	r3, r0
 800d830:	6023      	str	r3, [r4, #0]
}
 800d832:	bf00      	nop
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	bd90      	pop	{r4, r7, pc}

0800d83a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800d83a:	b590      	push	{r4, r7, lr}
 800d83c:	b083      	sub	sp, #12
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff fbd3 	bl	800cff2 <lfs_tole32>
 800d84c:	4602      	mov	r2, r0
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3304      	adds	r3, #4
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	1d1c      	adds	r4, r3, #4
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7ff fbc8 	bl	800cff2 <lfs_tole32>
 800d862:	4603      	mov	r3, r0
 800d864:	6023      	str	r3, [r4, #0]
}
 800d866:	bf00      	nop
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd90      	pop	{r4, r7, pc}

0800d86e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800d86e:	b480      	push	{r7}
 800d870:	b083      	sub	sp, #12
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	43db      	mvns	r3, r3
 800d87a:	0fdb      	lsrs	r3, r3, #31
 800d87c:	b2db      	uxtb	r3, r3
}
 800d87e:	4618      	mov	r0, r3
 800d880:	370c      	adds	r7, #12
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800d88a:	b480      	push	{r7}
 800d88c:	b083      	sub	sp, #12
 800d88e:	af00      	add	r7, sp, #0
 800d890:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	059b      	lsls	r3, r3, #22
 800d896:	159b      	asrs	r3, r3, #22
 800d898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d89c:	bf0c      	ite	eq
 800d89e:	2301      	moveq	r3, #1
 800d8a0:	2300      	movne	r3, #0
 800d8a2:	b2db      	uxtb	r3, r3
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	370c      	adds	r7, #12
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr

0800d8b0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	0d1b      	lsrs	r3, r3, #20
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d8c2:	b29b      	uxth	r3, r3
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	370c      	adds	r7, #12
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	0d1b      	lsrs	r3, r3, #20
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d8e2:	b29b      	uxth	r3, r3
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	370c      	adds	r7, #12
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr

0800d8f0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800d8f0:	b480      	push	{r7}
 800d8f2:	b083      	sub	sp, #12
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	0d1b      	lsrs	r3, r3, #20
 800d8fc:	b2db      	uxtb	r3, r3
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	370c      	adds	r7, #12
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff ffec 	bl	800d8f0 <lfs_tag_chunk>
 800d918:	4603      	mov	r3, r0
 800d91a:	b25b      	sxtb	r3, r3
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	0a9b      	lsrs	r3, r3, #10
 800d930:	b29b      	uxth	r3, r3
 800d932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d936:	b29b      	uxth	r3, r3
}
 800d938:	4618      	mov	r0, r3
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800d952:	4618      	mov	r0, r3
 800d954:	370c      	adds	r7, #12
 800d956:	46bd      	mov	sp, r7
 800d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95c:	4770      	bx	lr

0800d95e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800d95e:	b580      	push	{r7, lr}
 800d960:	b082      	sub	sp, #8
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff ff8f 	bl	800d88a <lfs_tag_isdelete>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4413      	add	r3, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7ff ffe5 	bl	800d944 <lfs_tag_size>
 800d97a:	4603      	mov	r3, r0
 800d97c:	3304      	adds	r3, #4
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800d986:	b480      	push	{r7}
 800d988:	b085      	sub	sp, #20
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800d990:	2300      	movs	r3, #0
 800d992:	60fb      	str	r3, [r7, #12]
 800d994:	e012      	b.n	800d9bc <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	4413      	add	r3, r2
 800d99e:	6819      	ldr	r1, [r3, #0]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	009b      	lsls	r3, r3, #2
 800d9a4:	683a      	ldr	r2, [r7, #0]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	681a      	ldr	r2, [r3, #0]
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	4403      	add	r3, r0
 800d9b2:	404a      	eors	r2, r1
 800d9b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	60fb      	str	r3, [r7, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	dde9      	ble.n	800d996 <lfs_gstate_xor+0x10>
    }
}
 800d9c2:	bf00      	nop
 800d9c4:	bf00      	nop
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800d9d8:	2300      	movs	r3, #0
 800d9da:	60fb      	str	r3, [r7, #12]
 800d9dc:	e00b      	b.n	800d9f6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <lfs_gstate_iszero+0x20>
            return false;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	e006      	b.n	800d9fe <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	60fb      	str	r3, [r7, #12]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	ddf0      	ble.n	800d9de <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800d9fc:	2301      	movs	r3, #1
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr

0800da0a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800da0a:	b580      	push	{r7, lr}
 800da0c:	b082      	sub	sp, #8
 800da0e:	af00      	add	r7, sp, #0
 800da10:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff ff94 	bl	800d944 <lfs_tag_size>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	bf14      	ite	ne
 800da22:	2301      	movne	r3, #1
 800da24:	2300      	moveq	r3, #0
 800da26:	b2db      	uxtb	r3, r3
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3708      	adds	r7, #8
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7ff ff81 	bl	800d944 <lfs_tag_size>
 800da42:	4603      	mov	r3, r0
 800da44:	b2db      	uxtb	r3, r3
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7ff ff28 	bl	800d8b0 <lfs_tag_type1>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	bf14      	ite	ne
 800da66:	2301      	movne	r3, #1
 800da68:	2300      	moveq	r3, #0
 800da6a:	b2db      	uxtb	r3, r3
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3708      	adds	r7, #8
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
 800da7c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f7ff ff14 	bl	800d8b0 <lfs_tag_type1>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00a      	beq.n	800daa4 <lfs_gstate_hasmovehere+0x30>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	3304      	adds	r3, #4
 800da92:	6839      	ldr	r1, [r7, #0]
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff fe5f 	bl	800d758 <lfs_pair_cmp>
 800da9a:	4603      	mov	r3, r0
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <lfs_gstate_hasmovehere+0x30>
 800daa0:	2301      	movs	r3, #1
 800daa2:	e000      	b.n	800daa6 <lfs_gstate_hasmovehere+0x32>
 800daa4:	2300      	movs	r3, #0
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	b2db      	uxtb	r3, r3
}
 800daac:	4618      	mov	r0, r3
 800daae:	3708      	adds	r7, #8
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}

0800dab4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff fa8b 	bl	800cfdc <lfs_fromle32>
 800dac6:	4602      	mov	r2, r0
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff fa83 	bl	800cfdc <lfs_fromle32>
 800dad6:	4602      	mov	r2, r0
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7ff fa7b 	bl	800cfdc <lfs_fromle32>
 800dae6:	4602      	mov	r2, r0
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	609a      	str	r2, [r3, #8]
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff fa76 	bl	800cff2 <lfs_tole32>
 800db06:	4602      	mov	r2, r0
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	f7ff fa6e 	bl	800cff2 <lfs_tole32>
 800db16:	4602      	mov	r2, r0
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	689b      	ldr	r3, [r3, #8]
 800db20:	4618      	mov	r0, r3
 800db22:	f7ff fa66 	bl	800cff2 <lfs_tole32>
 800db26:	4602      	mov	r2, r0
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	609a      	str	r2, [r3, #8]
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4618      	mov	r0, r3
 800db42:	f7ff fa4b 	bl	800cfdc <lfs_fromle32>
 800db46:	4602      	mov	r2, r0
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	f7ff fa43 	bl	800cfdc <lfs_fromle32>
 800db56:	4602      	mov	r2, r0
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	605a      	str	r2, [r3, #4]
}
 800db5c:	bf00      	nop
 800db5e:	3708      	adds	r7, #8
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff fa3e 	bl	800cff2 <lfs_tole32>
 800db76:	4602      	mov	r2, r0
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fa36 	bl	800cff2 <lfs_tole32>
 800db86:	4602      	mov	r2, r0
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	605a      	str	r2, [r3, #4]
}
 800db8c:	bf00      	nop
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7ff fa1b 	bl	800cfdc <lfs_fromle32>
 800dba6:	4602      	mov	r2, r0
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7ff fa13 	bl	800cfdc <lfs_fromle32>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7ff fa0b 	bl	800cfdc <lfs_fromle32>
 800dbc6:	4602      	mov	r2, r0
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7ff fa03 	bl	800cfdc <lfs_fromle32>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7ff f9fb 	bl	800cfdc <lfs_fromle32>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff f9f3 	bl	800cfdc <lfs_fromle32>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	615a      	str	r2, [r3, #20]
}
 800dbfc:	bf00      	nop
 800dbfe:	3708      	adds	r7, #8
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7ff f9ee 	bl	800cff2 <lfs_tole32>
 800dc16:	4602      	mov	r2, r0
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff f9e6 	bl	800cff2 <lfs_tole32>
 800dc26:	4602      	mov	r2, r0
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	689b      	ldr	r3, [r3, #8]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f7ff f9de 	bl	800cff2 <lfs_tole32>
 800dc36:	4602      	mov	r2, r0
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff f9d6 	bl	800cff2 <lfs_tole32>
 800dc46:	4602      	mov	r2, r0
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff f9ce 	bl	800cff2 <lfs_tole32>
 800dc56:	4602      	mov	r2, r0
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	695b      	ldr	r3, [r3, #20]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff f9c6 	bl	800cff2 <lfs_tole32>
 800dc66:	4602      	mov	r2, r0
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	615a      	str	r2, [r3, #20]
}
 800dc6c:	bf00      	nop
 800dc6e:	3708      	adds	r7, #8
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <lfs_mlist_isopen>:

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800dc7e:	1d3b      	adds	r3, r7, #4
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	e009      	b.n	800dc98 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	683a      	ldr	r2, [r7, #0]
 800dc8a:	429a      	cmp	r2, r3
 800dc8c:	d101      	bne.n	800dc92 <lfs_mlist_isopen+0x1e>
            return true;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e007      	b.n	800dca2 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	60fb      	str	r3, [r7, #12]
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d1f1      	bne.n	800dc84 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3714      	adds	r7, #20
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800dcae:	b480      	push	{r7}
 800dcb0:	b085      	sub	sp, #20
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3328      	adds	r3, #40	; 0x28
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	e00d      	b.n	800dcdc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d105      	bne.n	800dcd6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	601a      	str	r2, [r3, #0]
            break;
 800dcd4:	e007      	b.n	800dce6 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1ed      	bne.n	800dcc0 <lfs_mlist_remove+0x12>
        }
    }
}
 800dce4:	bf00      	nop
 800dce6:	bf00      	nop
 800dce8:	3714      	adds	r7, #20
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800dcf2:	b480      	push	{r7}
 800dcf4:	b083      	sub	sp, #12
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
 800dcfa:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dd0a:	bf00      	nop
 800dd0c:	370c      	adds	r7, #12
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr

0800dd16 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800dd16:	b480      	push	{r7}
 800dd18:	b085      	sub	sp, #20
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	4413      	add	r3, r2
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dd38:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800dd3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd3e:	fb01 f202 	mul.w	r2, r1, r2
 800dd42:	1a9b      	subs	r3, r3, r2
 800dd44:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d212      	bcs.n	800dd76 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	095b      	lsrs	r3, r3, #5
 800dd58:	009a      	lsls	r2, r3, #2
 800dd5a:	440a      	add	r2, r1
 800dd5c:	6811      	ldr	r1, [r2, #0]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	f002 021f 	and.w	r2, r2, #31
 800dd64:	2001      	movs	r0, #1
 800dd66:	fa00 f202 	lsl.w	r2, r0, r2
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4403      	add	r3, r0
 800dd72:	430a      	orrs	r2, r1
 800dd74:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3714      	adds	r7, #20
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd90:	6a1a      	ldr	r2, [r3, #32]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	661a      	str	r2, [r3, #96]	; 0x60
}
 800dd96:	bf00      	nop
 800dd98:	370c      	adds	r7, #12
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda0:	4770      	bx	lr

0800dda2 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b082      	sub	sp, #8
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f7ff ffe4 	bl	800dd84 <lfs_alloc_ack>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b086      	sub	sp, #24
 800ddc8:	af02      	add	r7, sp, #8
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800ddce:	e04f      	b.n	800de70 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddd4:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddda:	1c5a      	adds	r2, r3, #1
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dde4:	1e5a      	subs	r2, r3, #1
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	095b      	lsrs	r3, r3, #5
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	f003 031f 	and.w	r3, r3, #31
 800ddfe:	2101      	movs	r1, #1
 800de00:	fa01 f303 	lsl.w	r3, r1, r3
 800de04:	4013      	ands	r3, r2
 800de06:	2b00      	cmp	r3, #0
 800de08:	d132      	bne.n	800de70 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	4413      	add	r3, r2
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800de16:	6a12      	ldr	r2, [r2, #32]
 800de18:	fbb3 f1f2 	udiv	r1, r3, r2
 800de1c:	fb01 f202 	mul.w	r2, r1, r2
 800de20:	1a9a      	subs	r2, r3, r2
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800de26:	e009      	b.n	800de3c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2c:	1c5a      	adds	r2, r3, #1
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de36:	1e5a      	subs	r2, r3, #1
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de44:	429a      	cmp	r2, r3
 800de46:	d011      	beq.n	800de6c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de50:	095b      	lsrs	r3, r3, #5
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de5c:	f003 031f 	and.w	r3, r3, #31
 800de60:	2101      	movs	r1, #1
 800de62:	fa01 f303 	lsl.w	r3, r1, r3
 800de66:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1dd      	bne.n	800de28 <lfs_alloc+0x64>
                }

                return 0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	e050      	b.n	800df12 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de78:	429a      	cmp	r2, r3
 800de7a:	d1a9      	bne.n	800ddd0 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de80:	2b00      	cmp	r3, #0
 800de82:	d10f      	bne.n	800dea4 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de8c:	4413      	add	r3, r2
 800de8e:	4a23      	ldr	r2, [pc, #140]	; (800df1c <lfs_alloc+0x158>)
 800de90:	9200      	str	r2, [sp, #0]
 800de92:	f44f 720d 	mov.w	r2, #564	; 0x234
 800de96:	4922      	ldr	r1, [pc, #136]	; (800df20 <lfs_alloc+0x15c>)
 800de98:	4822      	ldr	r0, [pc, #136]	; (800df24 <lfs_alloc+0x160>)
 800de9a:	f015 fce3 	bl	8023864 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800de9e:	f06f 031b 	mvn.w	r3, #27
 800dea2:	e036      	b.n	800df12 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deac:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800deb2:	6a12      	ldr	r2, [r2, #32]
 800deb4:	fbb3 f1f2 	udiv	r1, r3, r2
 800deb8:	fb01 f202 	mul.w	r2, r1, r2
 800debc:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec8:	00da      	lsls	r2, r3, #3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dece:	4619      	mov	r1, r3
 800ded0:	4610      	mov	r0, r2
 800ded2:	f7ff f813 	bl	800cefc <lfs_min>
 800ded6:	4602      	mov	r2, r0
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	2200      	movs	r2, #0
 800dee0:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800deea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deec:	461a      	mov	r2, r3
 800deee:	2100      	movs	r1, #0
 800def0:	f015 fe7e 	bl	8023bf0 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800def4:	2301      	movs	r3, #1
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	490b      	ldr	r1, [pc, #44]	; (800df28 <lfs_alloc+0x164>)
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f004 faf2 	bl	80124e4 <lfs_fs_rawtraverse>
 800df00:	60f8      	str	r0, [r7, #12]
        if (err) {
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2b00      	cmp	r3, #0
 800df06:	f43f af62 	beq.w	800ddce <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f7ff ff49 	bl	800dda2 <lfs_alloc_drop>
            return err;
 800df10:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800df12:	4618      	mov	r0, r3
 800df14:	3710      	adds	r7, #16
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}
 800df1a:	bf00      	nop
 800df1c:	080283bc 	.word	0x080283bc
 800df20:	080282b0 	.word	0x080282b0
 800df24:	08028394 	.word	0x08028394
 800df28:	0800dd17 	.word	0x0800dd17

0800df2c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800df2c:	b590      	push	{r4, r7, lr}
 800df2e:	b08f      	sub	sp, #60	; 0x3c
 800df30:	af04      	add	r7, sp, #16
 800df32:	60f8      	str	r0, [r7, #12]
 800df34:	60b9      	str	r1, [r7, #8]
 800df36:	607a      	str	r2, [r7, #4]
 800df38:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	68db      	ldr	r3, [r3, #12]
 800df3e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	333c      	adds	r3, #60	; 0x3c
 800df4e:	68ba      	ldr	r2, [r7, #8]
 800df50:	4611      	mov	r1, r2
 800df52:	4618      	mov	r0, r3
 800df54:	f7ff fd8e 	bl	800da74 <lfs_gstate_hasmovehere>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 80ba 	beq.w	800e0d4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff fcdf 	bl	800d924 <lfs_tag_id>
 800df66:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 80b3 	beq.w	800e0d4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fcd6 	bl	800d924 <lfs_tag_id>
 800df78:	4603      	mov	r3, r0
 800df7a:	461c      	mov	r4, r3
 800df7c:	6838      	ldr	r0, [r7, #0]
 800df7e:	f7ff fcd1 	bl	800d924 <lfs_tag_id>
 800df82:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800df84:	429c      	cmp	r4, r3
 800df86:	f200 80a5 	bhi.w	800e0d4 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800df90:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800df92:	e09f      	b.n	800e0d4 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	4618      	mov	r0, r3
 800df98:	f7ff fce1 	bl	800d95e <lfs_tag_dsize>
 800df9c:	4602      	mov	r2, r0
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	1a9b      	subs	r3, r3, r2
 800dfa2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800dfa8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800dfae:	2204      	movs	r2, #4
 800dfb0:	9203      	str	r2, [sp, #12]
 800dfb2:	f107 0210 	add.w	r2, r7, #16
 800dfb6:	9202      	str	r2, [sp, #8]
 800dfb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfba:	9201      	str	r2, [sp, #4]
 800dfbc:	9300      	str	r3, [sp, #0]
 800dfbe:	2304      	movs	r3, #4
 800dfc0:	460a      	mov	r2, r1
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f7ff f875 	bl	800d0b4 <lfs_bd_read>
 800dfca:	61b8      	str	r0, [r7, #24]
        if (err) {
 800dfcc:	69bb      	ldr	r3, [r7, #24]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <lfs_dir_getslice+0xaa>
            return err;
 800dfd2:	69bb      	ldr	r3, [r7, #24]
 800dfd4:	e08a      	b.n	800e0ec <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff f816 	bl	800d00a <lfs_frombe32>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	4053      	eors	r3, r2
 800dfe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfe8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff fc9a 	bl	800d924 <lfs_tag_id>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d02b      	beq.n	800e04e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800dff6:	69f8      	ldr	r0, [r7, #28]
 800dff8:	f7ff fc5a 	bl	800d8b0 <lfs_tag_type1>
 800dffc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800dffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e002:	d124      	bne.n	800e04e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800e004:	69f8      	ldr	r0, [r7, #28]
 800e006:	f7ff fc8d 	bl	800d924 <lfs_tag_id>
 800e00a:	4603      	mov	r3, r0
 800e00c:	461c      	mov	r4, r3
 800e00e:	6a3b      	ldr	r3, [r7, #32]
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff fc85 	bl	800d924 <lfs_tag_id>
 800e01a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e01c:	429c      	cmp	r4, r3
 800e01e:	d816      	bhi.n	800e04e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	1ad2      	subs	r2, r2, r3
 800e026:	4b33      	ldr	r3, [pc, #204]	; (800e0f4 <lfs_dir_getslice+0x1c8>)
 800e028:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800e02a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e02e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e032:	69fa      	ldr	r2, [r7, #28]
 800e034:	429a      	cmp	r2, r3
 800e036:	d102      	bne.n	800e03e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800e038:	f06f 0301 	mvn.w	r3, #1
 800e03c:	e056      	b.n	800e0ec <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e03e:	69f8      	ldr	r0, [r7, #28]
 800e040:	f7ff fc63 	bl	800d90a <lfs_tag_splice>
 800e044:	4603      	mov	r3, r0
 800e046:	029a      	lsls	r2, r3, #10
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	4413      	add	r3, r2
 800e04c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800e04e:	687a      	ldr	r2, [r7, #4]
 800e050:	69fb      	ldr	r3, [r7, #28]
 800e052:	401a      	ands	r2, r3
 800e054:	6a3b      	ldr	r3, [r7, #32]
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	1ac9      	subs	r1, r1, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	400b      	ands	r3, r1
 800e05e:	429a      	cmp	r2, r3
 800e060:	d138      	bne.n	800e0d4 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800e062:	69f8      	ldr	r0, [r7, #28]
 800e064:	f7ff fc11 	bl	800d88a <lfs_tag_isdelete>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800e06e:	f06f 0301 	mvn.w	r3, #1
 800e072:	e03b      	b.n	800e0ec <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800e074:	69f8      	ldr	r0, [r7, #28]
 800e076:	f7ff fc65 	bl	800d944 <lfs_tag_size>
 800e07a:	4603      	mov	r3, r0
 800e07c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe ff3c 	bl	800cefc <lfs_min>
 800e084:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800e086:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e08e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e090:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800e092:	3204      	adds	r2, #4
 800e094:	6979      	ldr	r1, [r7, #20]
 800e096:	9103      	str	r1, [sp, #12]
 800e098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e09a:	9102      	str	r1, [sp, #8]
 800e09c:	9201      	str	r2, [sp, #4]
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	2100      	movs	r1, #0
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f7ff f804 	bl	800d0b4 <lfs_bd_read>
 800e0ac:	61b8      	str	r0, [r7, #24]
            if (err) {
 800e0ae:	69bb      	ldr	r3, [r7, #24]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <lfs_dir_getslice+0x18c>
                return err;
 800e0b4:	69bb      	ldr	r3, [r7, #24]
 800e0b6:	e019      	b.n	800e0ec <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800e0b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	18d0      	adds	r0, r2, r3
 800e0be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	f015 fd92 	bl	8023bf0 <memset>

            return tag + gdiff;
 800e0cc:	6a3a      	ldr	r2, [r7, #32]
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	e00b      	b.n	800e0ec <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fc41 	bl	800d95e <lfs_tag_dsize>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	3304      	adds	r3, #4
 800e0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	f4bf af56 	bcs.w	800df94 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800e0e8:	f06f 0301 	mvn.w	r3, #1
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	372c      	adds	r7, #44	; 0x2c
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd90      	pop	{r4, r7, pc}
 800e0f4:	000ffc00 	.word	0x000ffc00

0800e0f8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b088      	sub	sp, #32
 800e0fc:	af04      	add	r7, sp, #16
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800e106:	6838      	ldr	r0, [r7, #0]
 800e108:	f7ff fc1c 	bl	800d944 <lfs_tag_size>
 800e10c:	4603      	mov	r3, r0
 800e10e:	9302      	str	r3, [sp, #8]
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	9301      	str	r3, [sp, #4]
 800e114:	2300      	movs	r3, #0
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	68b9      	ldr	r1, [r7, #8]
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff ff04 	bl	800df2c <lfs_dir_getslice>
 800e124:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800e12e:	b580      	push	{r7, lr}
 800e130:	b08c      	sub	sp, #48	; 0x30
 800e132:	af04      	add	r7, sp, #16
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	607a      	str	r2, [r7, #4]
 800e13a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800e13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e13e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800e140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e144:	441a      	add	r2, r3
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e14a:	69db      	ldr	r3, [r3, #28]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	f240 80c0 	bls.w	800e2d2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800e152:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e156:	e0c1      	b.n	800e2dc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800e158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d03f      	beq.n	800e1e2 <lfs_dir_getread+0xb4>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	f113 0f02 	cmn.w	r3, #2
 800e16a:	d13a      	bne.n	800e1e2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	685a      	ldr	r2, [r3, #4]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800e176:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e178:	429a      	cmp	r2, r3
 800e17a:	d232      	bcs.n	800e1e2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e182:	429a      	cmp	r2, r3
 800e184:	d324      	bcc.n	800e1d0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	689a      	ldr	r2, [r3, #8]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6859      	ldr	r1, [r3, #4]
 800e18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e190:	1acb      	subs	r3, r1, r3
 800e192:	4413      	add	r3, r2
 800e194:	4619      	mov	r1, r3
 800e196:	69b8      	ldr	r0, [r7, #24]
 800e198:	f7fe feb0 	bl	800cefc <lfs_min>
 800e19c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	68da      	ldr	r2, [r3, #12]
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1a8:	1acb      	subs	r3, r1, r3
 800e1aa:	4413      	add	r3, r2
 800e1ac:	69ba      	ldr	r2, [r7, #24]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	69f8      	ldr	r0, [r7, #28]
 800e1b2:	f016 fe7a 	bl	8024eaa <memcpy>

                data += diff;
 800e1b6:	69fa      	ldr	r2, [r7, #28]
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	4413      	add	r3, r2
 800e1bc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e1be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1c0:	69bb      	ldr	r3, [r7, #24]
 800e1c2:	4413      	add	r3, r2
 800e1c4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800e1c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800e1ce:	e080      	b.n	800e2d2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	685a      	ldr	r2, [r3, #4]
 800e1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1d6:	1ad3      	subs	r3, r2, r3
 800e1d8:	4619      	mov	r1, r3
 800e1da:	69b8      	ldr	r0, [r7, #24]
 800e1dc:	f7fe fe8e 	bl	800cefc <lfs_min>
 800e1e0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f113 0f02 	cmn.w	r3, #2
 800e1ea:	d13a      	bne.n	800e262 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	685a      	ldr	r2, [r3, #4]
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800e1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d232      	bcs.n	800e262 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e202:	429a      	cmp	r2, r3
 800e204:	d324      	bcc.n	800e250 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	689a      	ldr	r2, [r3, #8]
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	6859      	ldr	r1, [r3, #4]
 800e20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e210:	1acb      	subs	r3, r1, r3
 800e212:	4413      	add	r3, r2
 800e214:	4619      	mov	r1, r3
 800e216:	69b8      	ldr	r0, [r7, #24]
 800e218:	f7fe fe70 	bl	800cefc <lfs_min>
 800e21c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	68da      	ldr	r2, [r3, #12]
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e228:	1acb      	subs	r3, r1, r3
 800e22a:	4413      	add	r3, r2
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	4619      	mov	r1, r3
 800e230:	69f8      	ldr	r0, [r7, #28]
 800e232:	f016 fe3a 	bl	8024eaa <memcpy>

                data += diff;
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	4413      	add	r3, r2
 800e23c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800e23e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	4413      	add	r3, r2
 800e244:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800e246:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	1ad3      	subs	r3, r2, r3
 800e24c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800e24e:	e040      	b.n	800e2d2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e256:	1ad3      	subs	r3, r2, r3
 800e258:	4619      	mov	r1, r3
 800e25a:	69b8      	ldr	r0, [r7, #24]
 800e25c:	f7fe fe4e 	bl	800cefc <lfs_min>
 800e260:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	f06f 0201 	mvn.w	r2, #1
 800e268:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e26e:	695b      	ldr	r3, [r3, #20]
 800e270:	4619      	mov	r1, r3
 800e272:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e274:	f7fe fe52 	bl	800cf1c <lfs_aligndown>
 800e278:	4602      	mov	r2, r0
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e27e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	441a      	add	r2, r3
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e288:	695b      	ldr	r3, [r3, #20]
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7fe fe5a 	bl	800cf46 <lfs_alignup>
 800e292:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800e29a:	4619      	mov	r1, r3
 800e29c:	4610      	mov	r0, r2
 800e29e:	f7fe fe2d 	bl	800cefc <lfs_min>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6889      	ldr	r1, [r1, #8]
 800e2b4:	9102      	str	r1, [sp, #8]
 800e2b6:	9201      	str	r2, [sp, #4]
 800e2b8:	9300      	str	r3, [sp, #0]
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2be:	68b9      	ldr	r1, [r7, #8]
 800e2c0:	68f8      	ldr	r0, [r7, #12]
 800e2c2:	f7ff fe33 	bl	800df2c <lfs_dir_getslice>
 800e2c6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	da01      	bge.n	800e2d2 <lfs_dir_getread+0x1a4>
            return err;
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	e004      	b.n	800e2dc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800e2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f47f af3f 	bne.w	800e158 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3720      	adds	r7, #32
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800e2e4:	b590      	push	{r4, r7, lr}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d001      	beq.n	800e302 <lfs_dir_traverse_filter+0x1e>
 800e2fe:	4b23      	ldr	r3, [pc, #140]	; (800e38c <lfs_dir_traverse_filter+0xa8>)
 800e300:	e000      	b.n	800e304 <lfs_dir_traverse_filter+0x20>
 800e302:	4b23      	ldr	r3, [pc, #140]	; (800e390 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800e304:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	405a      	eors	r2, r3
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	4013      	ands	r3, r2
 800e312:	2b00      	cmp	r3, #0
 800e314:	d014      	beq.n	800e340 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff fab5 	bl	800d88a <lfs_tag_isdelete>
 800e320:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10c      	bne.n	800e340 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	4a18      	ldr	r2, [pc, #96]	; (800e38c <lfs_dir_traverse_filter+0xa8>)
 800e32a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	6819      	ldr	r1, [r3, #0]
 800e330:	4b18      	ldr	r3, [pc, #96]	; (800e394 <lfs_dir_traverse_filter+0xb0>)
 800e332:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800e334:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e338:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d101      	bne.n	800e344 <lfs_dir_traverse_filter+0x60>
        return true;
 800e340:	2301      	movs	r3, #1
 800e342:	e01e      	b.n	800e382 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e344:	68b8      	ldr	r0, [r7, #8]
 800e346:	f7ff fab3 	bl	800d8b0 <lfs_tag_type1>
 800e34a:	4603      	mov	r3, r0
 800e34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e350:	d116      	bne.n	800e380 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800e352:	68b8      	ldr	r0, [r7, #8]
 800e354:	f7ff fae6 	bl	800d924 <lfs_tag_id>
 800e358:	4603      	mov	r3, r0
 800e35a:	461c      	mov	r4, r3
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff fadf 	bl	800d924 <lfs_tag_id>
 800e366:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e368:	429c      	cmp	r4, r3
 800e36a:	d809      	bhi.n	800e380 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7ff facc 	bl	800d90a <lfs_tag_splice>
 800e372:	4603      	mov	r3, r0
 800e374:	029a      	lsls	r2, r3, #10
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	441a      	add	r2, r3
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	601a      	str	r2, [r3, #0]
    }

    return false;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	371c      	adds	r7, #28
 800e386:	46bd      	mov	sp, r7
 800e388:	bd90      	pop	{r4, r7, pc}
 800e38a:	bf00      	nop
 800e38c:	7ffffc00 	.word	0x7ffffc00
 800e390:	700ffc00 	.word	0x700ffc00
 800e394:	000ffc00 	.word	0x000ffc00

0800e398 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e398:	b590      	push	{r4, r7, lr}
 800e39a:	b09d      	sub	sp, #116	; 0x74
 800e39c:	af0a      	add	r7, sp, #40	; 0x28
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800e3a6:	6838      	ldr	r0, [r7, #0]
 800e3a8:	f7ff fad9 	bl	800d95e <lfs_tag_dsize>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	441a      	add	r2, r3
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	68db      	ldr	r3, [r3, #12]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d233      	bcs.n	800e422 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800e3ba:	6838      	ldr	r0, [r7, #0]
 800e3bc:	f7ff facf 	bl	800d95e <lfs_tag_dsize>
 800e3c0:	4602      	mov	r2, r0
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	4413      	add	r3, r2
 800e3c6:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800e3c8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800e3ce:	2204      	movs	r2, #4
 800e3d0:	9203      	str	r2, [sp, #12]
 800e3d2:	f107 021c 	add.w	r2, r7, #28
 800e3d6:	9202      	str	r2, [sp, #8]
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	9201      	str	r2, [sp, #4]
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	2304      	movs	r3, #4
 800e3e0:	460a      	mov	r2, r1
 800e3e2:	2100      	movs	r1, #0
 800e3e4:	68f8      	ldr	r0, [r7, #12]
 800e3e6:	f7fe fe65 	bl	800d0b4 <lfs_bd_read>
 800e3ea:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800e3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <lfs_dir_traverse+0x5e>
                return err;
 800e3f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3f4:	e11e      	b.n	800e634 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe fe06 	bl	800d00a <lfs_frombe32>
 800e3fe:	4602      	mov	r2, r0
 800e400:	683b      	ldr	r3, [r7, #0]
 800e402:	4053      	eors	r3, r2
 800e404:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e408:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	3304      	adds	r3, #4
 800e414:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800e416:	f107 0314 	add.w	r3, r7, #20
 800e41a:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	603b      	str	r3, [r7, #0]
 800e420:	e011      	b.n	800e446 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800e422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e424:	2b00      	cmp	r3, #0
 800e426:	dd0c      	ble.n	800e442 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800e428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800e42e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800e434:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e436:	3308      	adds	r3, #8
 800e438:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800e43a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e43c:	3b01      	subs	r3, #1
 800e43e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e440:	e001      	b.n	800e446 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800e442:	2300      	movs	r3, #0
 800e444:	e0f6      	b.n	800e634 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800e446:	4b7d      	ldr	r3, [pc, #500]	; (800e63c <lfs_dir_traverse+0x2a4>)
 800e448:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e44e:	405a      	eors	r2, r3
 800e450:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e454:	400b      	ands	r3, r1
 800e456:	4013      	ands	r3, r2
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f040 80e5 	bne.w	800e628 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800e45e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e460:	f7ff fa60 	bl	800d924 <lfs_tag_id>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d038      	beq.n	800e4dc <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800e46a:	f107 031c 	add.w	r3, r7, #28
 800e46e:	9308      	str	r3, [sp, #32]
 800e470:	4b73      	ldr	r3, [pc, #460]	; (800e640 <lfs_dir_traverse+0x2a8>)
 800e472:	9307      	str	r3, [sp, #28]
 800e474:	2300      	movs	r3, #0
 800e476:	9306      	str	r3, [sp, #24]
 800e478:	2300      	movs	r3, #0
 800e47a:	9305      	str	r3, [sp, #20]
 800e47c:	2300      	movs	r3, #0
 800e47e:	9304      	str	r3, [sp, #16]
 800e480:	2300      	movs	r3, #0
 800e482:	9303      	str	r3, [sp, #12]
 800e484:	2300      	movs	r3, #0
 800e486:	9302      	str	r3, [sp, #8]
 800e488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	68b9      	ldr	r1, [r7, #8]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f7ff ff7e 	bl	800e398 <lfs_dir_traverse>
 800e49c:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800e49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da01      	bge.n	800e4a8 <lfs_dir_traverse+0x110>
                return filter;
 800e4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4a6:	e0c5      	b.n	800e634 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800e4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f040 80be 	bne.w	800e62c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7ff fa36 	bl	800d924 <lfs_tag_id>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	461a      	mov	r2, r3
 800e4bc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800e4c0:	4293      	cmp	r3, r2
 800e4c2:	f200 80b5 	bhi.w	800e630 <lfs_dir_traverse+0x298>
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7ff fa2b 	bl	800d924 <lfs_tag_id>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	f240 80aa 	bls.w	800e630 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7ff f9f6 	bl	800d8d0 <lfs_tag_type3>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	f43f af5d 	beq.w	800e3a6 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800e4ec:	69fb      	ldr	r3, [r7, #28]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff f9ee 	bl	800d8d0 <lfs_tag_type3>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	f240 1301 	movw	r3, #257	; 0x101
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d136      	bne.n	800e56e <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fa1e 	bl	800d944 <lfs_tag_size>
 800e508:	4603      	mov	r3, r0
 800e50a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	4618      	mov	r0, r3
 800e510:	f7ff fa08 	bl	800d924 <lfs_tag_id>
 800e514:	4603      	mov	r3, r0
 800e516:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800e518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e51a:	3301      	adds	r3, #1
 800e51c:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800e51e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e520:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e522:	1a8a      	subs	r2, r1, r2
 800e524:	b291      	uxth	r1, r2
 800e526:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800e52a:	440a      	add	r2, r1
 800e52c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800e52e:	b212      	sxth	r2, r2
 800e530:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800e532:	9108      	str	r1, [sp, #32]
 800e534:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800e536:	9107      	str	r1, [sp, #28]
 800e538:	9206      	str	r2, [sp, #24]
 800e53a:	9305      	str	r3, [sp, #20]
 800e53c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e544:	9303      	str	r3, [sp, #12]
 800e546:	4b3f      	ldr	r3, [pc, #252]	; (800e644 <lfs_dir_traverse+0x2ac>)
 800e548:	9302      	str	r3, [sp, #8]
 800e54a:	2300      	movs	r3, #0
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	2300      	movs	r3, #0
 800e550:	9300      	str	r3, [sp, #0]
 800e552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e556:	2200      	movs	r2, #0
 800e558:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f7ff ff1c 	bl	800e398 <lfs_dir_traverse>
 800e560:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800e562:	6a3b      	ldr	r3, [r7, #32]
 800e564:	2b00      	cmp	r3, #0
 800e566:	f43f af1e 	beq.w	800e3a6 <lfs_dir_traverse+0xe>
                return err;
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	e062      	b.n	800e634 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff f9ad 	bl	800d8d0 <lfs_tag_type3>
 800e576:	4603      	mov	r3, r0
 800e578:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800e57c:	d144      	bne.n	800e608 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e57e:	2300      	movs	r3, #0
 800e580:	643b      	str	r3, [r7, #64]	; 0x40
 800e582:	e038      	b.n	800e5f6 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800e584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e586:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e58a:	4613      	mov	r3, r2
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	4413      	add	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	461a      	mov	r2, r3
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	4413      	add	r3, r2
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e59e:	051c      	lsls	r4, r3, #20
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff f9be 	bl	800d924 <lfs_tag_id>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800e5b0:	4413      	add	r3, r2
 800e5b2:	029b      	lsls	r3, r3, #10
 800e5b4:	ea44 0103 	orr.w	r1, r4, r3
 800e5b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5ba:	4613      	mov	r3, r2
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	4413      	add	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	4413      	add	r3, r2
 800e5c8:	689b      	ldr	r3, [r3, #8]
 800e5ca:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800e5cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	005b      	lsls	r3, r3, #1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	009b      	lsls	r3, r3, #2
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	4413      	add	r3, r2
 800e5dc:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800e5de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5e0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e5e2:	4798      	blx	r3
 800e5e4:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d001      	beq.n	800e5f0 <lfs_dir_traverse+0x258>
                    return err;
 800e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ee:	e021      	b.n	800e634 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800e5f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	643b      	str	r3, [r7, #64]	; 0x40
 800e5f6:	69fb      	ldr	r3, [r7, #28]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7ff f9a3 	bl	800d944 <lfs_tag_size>
 800e5fe:	4602      	mov	r2, r0
 800e600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e602:	4293      	cmp	r3, r2
 800e604:	d3be      	bcc.n	800e584 <lfs_dir_traverse+0x1ec>
 800e606:	e6ce      	b.n	800e3a6 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800e608:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800e60c:	029a      	lsls	r2, r3, #10
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	18d1      	adds	r1, r2, r3
 800e612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e616:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800e618:	4798      	blx	r3
 800e61a:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800e61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f43f aec1 	beq.w	800e3a6 <lfs_dir_traverse+0xe>
                return err;
 800e624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e626:	e005      	b.n	800e634 <lfs_dir_traverse+0x29c>
            continue;
 800e628:	bf00      	nop
 800e62a:	e6bc      	b.n	800e3a6 <lfs_dir_traverse+0xe>
                continue;
 800e62c:	bf00      	nop
 800e62e:	e6ba      	b.n	800e3a6 <lfs_dir_traverse+0xe>
                continue;
 800e630:	bf00      	nop
    while (true) {
 800e632:	e6b8      	b.n	800e3a6 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800e634:	4618      	mov	r0, r3
 800e636:	374c      	adds	r7, #76	; 0x4c
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd90      	pop	{r4, r7, pc}
 800e63c:	7ff00000 	.word	0x7ff00000
 800e640:	0800e2e5 	.word	0x0800e2e5
 800e644:	600ffc00 	.word	0x600ffc00

0800e648 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800e648:	b590      	push	{r4, r7, lr}
 800e64a:	b09f      	sub	sp, #124	; 0x7c
 800e64c:	af04      	add	r7, sp, #16
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800e656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e65a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681a      	ldr	r2, [r3, #0]
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	429a      	cmp	r2, r3
 800e668:	d207      	bcs.n	800e67a <lfs_dir_fetchmatch+0x32>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3304      	adds	r3, #4
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e674:	6a1b      	ldr	r3, [r3, #32]
 800e676:	429a      	cmp	r2, r3
 800e678:	d302      	bcc.n	800e680 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800e67a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800e67e:	e340      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800e680:	2300      	movs	r3, #0
 800e682:	633b      	str	r3, [r7, #48]	; 0x30
 800e684:	2300      	movs	r3, #0
 800e686:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800e68c:	2300      	movs	r3, #0
 800e68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e690:	e052      	b.n	800e738 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800e692:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800e694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800e69c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800e69e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800e6a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e6a4:	0092      	lsls	r2, r2, #2
 800e6a6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800e6a8:	2104      	movs	r1, #4
 800e6aa:	9103      	str	r1, [sp, #12]
 800e6ac:	9202      	str	r2, [sp, #8]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	9201      	str	r2, [sp, #4]
 800e6b2:	9300      	str	r3, [sp, #0]
 800e6b4:	2304      	movs	r3, #4
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	2100      	movs	r1, #0
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f7fe fcfa 	bl	800d0b4 <lfs_bd_read>
 800e6c0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800e6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	3368      	adds	r3, #104	; 0x68
 800e6c8:	443b      	add	r3, r7
 800e6ca:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fe fc84 	bl	800cfdc <lfs_fromle32>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	3368      	adds	r3, #104	; 0x68
 800e6dc:	443b      	add	r3, r7
 800e6de:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d005      	beq.n	800e6f4 <lfs_dir_fetchmatch+0xac>
 800e6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ea:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e6ee:	d001      	beq.n	800e6f4 <lfs_dir_fetchmatch+0xac>
            return err;
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	e306      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800e6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e6fa:	d01a      	beq.n	800e732 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800e6fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	3368      	adds	r3, #104	; 0x68
 800e702:	443b      	add	r3, r7
 800e704:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800e708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e70a:	3301      	adds	r3, #1
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f003 0301 	and.w	r3, r3, #1
 800e712:	bfb8      	it	lt
 800e714:	425b      	neglt	r3, r3
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	3368      	adds	r3, #104	; 0x68
 800e71a:	443b      	add	r3, r7
 800e71c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800e720:	4619      	mov	r1, r3
 800e722:	4610      	mov	r0, r2
 800e724:	f7fe fc4c 	bl	800cfc0 <lfs_scmp>
 800e728:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	dd01      	ble.n	800e732 <lfs_dir_fetchmatch+0xea>
            r = i;
 800e72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e730:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800e732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e734:	3301      	adds	r3, #1
 800e736:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	dda9      	ble.n	800e692 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800e73e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e740:	2b00      	cmp	r3, #0
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	bfb8      	it	lt
 800e748:	425b      	neglt	r3, r3
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	4413      	add	r3, r2
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800e756:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e758:	3301      	adds	r3, #1
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	bfb8      	it	lt
 800e762:	425b      	neglt	r3, r3
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	4413      	add	r3, r2
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800e770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e772:	2b00      	cmp	r3, #0
 800e774:	f003 0301 	and.w	r3, r3, #1
 800e778:	bfb8      	it	lt
 800e77a:	425b      	neglt	r3, r3
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	3368      	adds	r3, #104	; 0x68
 800e780:	443b      	add	r3, r7
 800e782:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	2200      	movs	r2, #0
 800e78e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800e790:	2300      	movs	r3, #0
 800e792:	65bb      	str	r3, [r7, #88]	; 0x58
 800e794:	e2a1      	b.n	800ecda <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800e796:	2300      	movs	r3, #0
 800e798:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800e79a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e79e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800e7a6:	4a96      	ldr	r2, [pc, #600]	; (800ea00 <lfs_dir_fetchmatch+0x3b8>)
 800e7a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7b0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800e7ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e7bc:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fe fc15 	bl	800cff2 <lfs_tole32>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	3308      	adds	r3, #8
 800e7d2:	2204      	movs	r2, #4
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7da:	f004 fdc5 	bl	8013368 <lfs_crc>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7fe fbf8 	bl	800cfdc <lfs_fromle32>
 800e7ec:	4602      	mov	r2, r0
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800e7f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e7f4:	f7ff f8b3 	bl	800d95e <lfs_tag_dsize>
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7fc:	4413      	add	r3, r2
 800e7fe:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800e800:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e806:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2204      	movs	r2, #4
 800e80e:	9203      	str	r2, [sp, #12]
 800e810:	f107 0220 	add.w	r2, r7, #32
 800e814:	9202      	str	r2, [sp, #8]
 800e816:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e818:	9201      	str	r2, [sp, #4]
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	4603      	mov	r3, r0
 800e81e:	460a      	mov	r2, r1
 800e820:	2100      	movs	r1, #0
 800e822:	68f8      	ldr	r0, [r7, #12]
 800e824:	f7fe fc46 	bl	800d0b4 <lfs_bd_read>
 800e828:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800e82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d009      	beq.n	800e844 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800e830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e832:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e836:	d103      	bne.n	800e840 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	2200      	movs	r2, #0
 800e83c:	759a      	strb	r2, [r3, #22]
                    break;
 800e83e:	e1d4      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800e840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e842:	e25e      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	f107 0120 	add.w	r1, r7, #32
 800e84a:	2204      	movs	r2, #4
 800e84c:	4618      	mov	r0, r3
 800e84e:	f004 fd8b 	bl	8013368 <lfs_crc>
 800e852:	4603      	mov	r3, r0
 800e854:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7fe fbd6 	bl	800d00a <lfs_frombe32>
 800e85e:	4602      	mov	r2, r0
 800e860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e862:	4053      	eors	r3, r2
 800e864:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff f800 	bl	800d86e <lfs_tag_isvalid>
 800e86e:	4603      	mov	r3, r0
 800e870:	f083 0301 	eor.w	r3, r3, #1
 800e874:	b2db      	uxtb	r3, r3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d01b      	beq.n	800e8b2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800e87a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e87c:	f7ff f818 	bl	800d8b0 <lfs_tag_type1>
 800e880:	4603      	mov	r3, r0
 800e882:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e886:	d10d      	bne.n	800e8a4 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	68fa      	ldr	r2, [r7, #12]
 800e88e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e890:	6992      	ldr	r2, [r2, #24]
 800e892:	fbb3 f1f2 	udiv	r1, r3, r2
 800e896:	fb01 f202 	mul.w	r2, r1, r2
 800e89a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <lfs_dir_fetchmatch+0x25c>
 800e8a0:	2301      	movs	r3, #1
 800e8a2:	e000      	b.n	800e8a6 <lfs_dir_fetchmatch+0x25e>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	b2da      	uxtb	r2, r3
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	759a      	strb	r2, [r3, #22]
                break;
 800e8b0:	e19b      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7ff f852 	bl	800d95e <lfs_tag_dsize>
 800e8ba:	4602      	mov	r2, r0
 800e8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8be:	441a      	add	r2, r3
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8c4:	69db      	ldr	r3, [r3, #28]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d903      	bls.n	800e8d2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	759a      	strb	r2, [r3, #22]
                break;
 800e8d0:	e18b      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800e8d6:	6a3b      	ldr	r3, [r7, #32]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7fe ffe9 	bl	800d8b0 <lfs_tag_type1>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800e8e4:	d164      	bne.n	800e9b0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800e8e6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ec:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e8f4:	3204      	adds	r2, #4
 800e8f6:	2104      	movs	r1, #4
 800e8f8:	9103      	str	r1, [sp, #12]
 800e8fa:	f107 011c 	add.w	r1, r7, #28
 800e8fe:	9102      	str	r1, [sp, #8]
 800e900:	9201      	str	r2, [sp, #4]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4623      	mov	r3, r4
 800e906:	4602      	mov	r2, r0
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f7fe fbd2 	bl	800d0b4 <lfs_bd_read>
 800e910:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800e912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e914:	2b00      	cmp	r3, #0
 800e916:	d009      	beq.n	800e92c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800e918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e91a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e91e:	d103      	bne.n	800e928 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	2200      	movs	r2, #0
 800e924:	759a      	strb	r2, [r3, #22]
                        break;
 800e926:	e160      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800e928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800e92a:	e1ea      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe fb54 	bl	800cfdc <lfs_fromle32>
 800e934:	4603      	mov	r3, r0
 800e936:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800e938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d003      	beq.n	800e948 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	2200      	movs	r2, #0
 800e944:	759a      	strb	r2, [r3, #22]
                    break;
 800e946:	e150      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe ffd0 	bl	800d8f0 <lfs_tag_chunk>
 800e950:	4603      	mov	r3, r0
 800e952:	07db      	lsls	r3, r3, #31
 800e954:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e956:	4053      	eors	r3, r2
 800e958:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e95e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e962:	2204      	movs	r2, #4
 800e964:	4618      	mov	r0, r3
 800e966:	f004 fcff 	bl	8013368 <lfs_crc>
 800e96a:	4602      	mov	r2, r0
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800e970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e972:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800e974:	6a3b      	ldr	r3, [r7, #32]
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fff1 	bl	800d95e <lfs_tag_dsize>
 800e97c:	4602      	mov	r2, r0
 800e97e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e980:	441a      	add	r2, r3
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e98a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e992:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800e994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800e99a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800e9a6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800e9a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e9ae:	e720      	b.n	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800e9b0:	2304      	movs	r3, #4
 800e9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e9b4:	e032      	b.n	800ea1c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800e9b6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9bc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800e9be:	68bb      	ldr	r3, [r7, #8]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9c6:	440a      	add	r2, r1
 800e9c8:	2101      	movs	r1, #1
 800e9ca:	9103      	str	r1, [sp, #12]
 800e9cc:	f107 011b 	add.w	r1, r7, #27
 800e9d0:	9102      	str	r1, [sp, #8]
 800e9d2:	9201      	str	r2, [sp, #4]
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	4623      	mov	r3, r4
 800e9d8:	4602      	mov	r2, r0
 800e9da:	2100      	movs	r1, #0
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f7fe fb69 	bl	800d0b4 <lfs_bd_read>
 800e9e2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800e9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00c      	beq.n	800ea04 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800e9ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e9f0:	d103      	bne.n	800e9fa <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	759a      	strb	r2, [r3, #22]
 800e9f8:	e018      	b.n	800ea2c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800e9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800e9fc:	e181      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
 800e9fe:	bf00      	nop
 800ea00:	080283f8 	.word	0x080283f8
                }

                crc = lfs_crc(crc, &dat, 1);
 800ea04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea06:	f107 011b 	add.w	r1, r7, #27
 800ea0a:	2201      	movs	r2, #1
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f004 fcab 	bl	8013368 <lfs_crc>
 800ea12:	4603      	mov	r3, r0
 800ea14:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800ea16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea18:	3301      	adds	r3, #1
 800ea1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe ff9d 	bl	800d95e <lfs_tag_dsize>
 800ea24:	4602      	mov	r2, r0
 800ea26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d3c4      	bcc.n	800e9b6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7fe ff3e 	bl	800d8b0 <lfs_tag_type1>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d113      	bne.n	800ea62 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe ff71 	bl	800d924 <lfs_tag_id>
 800ea42:	4603      	mov	r3, r0
 800ea44:	461a      	mov	r2, r3
 800ea46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	f200 8081 	bhi.w	800eb52 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800ea50:	6a3b      	ldr	r3, [r7, #32]
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe ff66 	bl	800d924 <lfs_tag_id>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ea60:	e077      	b.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe ff23 	bl	800d8b0 <lfs_tag_type1>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ea70:	d134      	bne.n	800eadc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800ea72:	6a3b      	ldr	r3, [r7, #32]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe ff48 	bl	800d90a <lfs_tag_splice>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	b29a      	uxth	r2, r3
 800ea7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ea82:	4413      	add	r3, r2
 800ea84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800ea88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea8a:	4ba0      	ldr	r3, [pc, #640]	; (800ed0c <lfs_dir_fetchmatch+0x6c4>)
 800ea8c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ea8e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ea92:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800ea96:	6a3a      	ldr	r2, [r7, #32]
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d104      	bne.n	800eaa6 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800ea9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eaa2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaa4:	e055      	b.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800eaa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaac:	d051      	beq.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800eaae:	6a3b      	ldr	r3, [r7, #32]
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe ff37 	bl	800d924 <lfs_tag_id>
 800eab6:	4603      	mov	r3, r0
 800eab8:	461c      	mov	r4, r3
 800eaba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe ff31 	bl	800d924 <lfs_tag_id>
 800eac2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800eac4:	429c      	cmp	r4, r3
 800eac6:	d844      	bhi.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800eac8:	6a3b      	ldr	r3, [r7, #32]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fe ff1d 	bl	800d90a <lfs_tag_splice>
 800ead0:	4603      	mov	r3, r0
 800ead2:	029a      	lsls	r2, r3, #10
 800ead4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead6:	4413      	add	r3, r2
 800ead8:	64bb      	str	r3, [r7, #72]	; 0x48
 800eada:	e03a      	b.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800eadc:	6a3b      	ldr	r3, [r7, #32]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fee6 	bl	800d8b0 <lfs_tag_type1>
 800eae4:	4603      	mov	r3, r0
 800eae6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eaea:	d132      	bne.n	800eb52 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800eaec:	6a3b      	ldr	r3, [r7, #32]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f7fe fefe 	bl	800d8f0 <lfs_tag_chunk>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	f003 0301 	and.w	r3, r3, #1
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bf14      	ite	ne
 800eafe:	2301      	movne	r3, #1
 800eb00:	2300      	moveq	r3, #0
 800eb02:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800eb06:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb0c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800eb14:	3204      	adds	r2, #4
 800eb16:	2108      	movs	r1, #8
 800eb18:	9103      	str	r1, [sp, #12]
 800eb1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800eb1e:	9102      	str	r1, [sp, #8]
 800eb20:	9201      	str	r2, [sp, #4]
 800eb22:	9300      	str	r3, [sp, #0]
 800eb24:	4623      	mov	r3, r4
 800eb26:	4602      	mov	r2, r0
 800eb28:	2100      	movs	r1, #0
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7fe fac2 	bl	800d0b4 <lfs_bd_read>
 800eb30:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800eb32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d007      	beq.n	800eb48 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800eb38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800eb3e:	d103      	bne.n	800eb48 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2200      	movs	r2, #0
 800eb44:	759a      	strb	r2, [r3, #22]
                        break;
 800eb46:	e050      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800eb48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f7fe fe5a 	bl	800d806 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800eb52:	6a3a      	ldr	r2, [r7, #32]
 800eb54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eb56:	405a      	eors	r2, r3
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	4013      	ands	r3, r2
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	f47f ae48 	bne.w	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800eb62:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800eb68:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800eb6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb6c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800eb6e:	617b      	str	r3, [r7, #20]
 800eb70:	f107 0210 	add.w	r2, r7, #16
 800eb74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eb78:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800eb7c:	4798      	blx	r3
 800eb7e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800eb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	da09      	bge.n	800eb9a <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800eb86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb88:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800eb8c:	d103      	bne.n	800eb96 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	2200      	movs	r2, #0
 800eb92:	759a      	strb	r2, [r3, #22]
 800eb94:	e029      	b.n	800ebea <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800eb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800eb98:	e0b3      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800eb9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d102      	bne.n	800eba6 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	64bb      	str	r3, [r7, #72]	; 0x48
 800eba4:	e625      	b.n	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800eba6:	6a3a      	ldr	r2, [r7, #32]
 800eba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebaa:	405a      	eors	r2, r3
 800ebac:	4b58      	ldr	r3, [pc, #352]	; (800ed10 <lfs_dir_fetchmatch+0x6c8>)
 800ebae:	4013      	ands	r3, r2
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d103      	bne.n	800ebbc <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800ebb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ebb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebba:	e61a      	b.n	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800ebbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebbe:	2b02      	cmp	r3, #2
 800ebc0:	f47f ae17 	bne.w	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7fe feac 	bl	800d924 <lfs_tag_id>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	461c      	mov	r4, r3
 800ebd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe fea6 	bl	800d924 <lfs_tag_id>
 800ebd8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ebda:	429c      	cmp	r4, r3
 800ebdc:	f63f ae09 	bhi.w	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ebe0:	6a3b      	ldr	r3, [r7, #32]
 800ebe2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ebe6:	64bb      	str	r3, [r7, #72]	; 0x48
 800ebe8:	e603      	b.n	800e7f2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d100      	bne.n	800ebf4 <lfs_dir_fetchmatch+0x5ac>
 800ebf2:	e05d      	b.n	800ecb0 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	333c      	adds	r3, #60	; 0x3c
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fe ff39 	bl	800da74 <lfs_gstate_hasmovehere>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d028      	beq.n	800ec5a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fe fe89 	bl	800d924 <lfs_tag_id>
 800ec12:	4603      	mov	r3, r0
 800ec14:	461c      	mov	r4, r3
 800ec16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7fe fe83 	bl	800d924 <lfs_tag_id>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	429c      	cmp	r4, r3
 800ec22:	d104      	bne.n	800ec2e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800ec24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ec2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ec2c:	e015      	b.n	800ec5a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800ec2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec34:	d011      	beq.n	800ec5a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fe fe72 	bl	800d924 <lfs_tag_id>
 800ec40:	4603      	mov	r3, r0
 800ec42:	461c      	mov	r4, r3
 800ec44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec46:	4618      	mov	r0, r3
 800ec48:	f7fe fe6c 	bl	800d924 <lfs_tag_id>
 800ec4c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800ec4e:	429c      	cmp	r4, r3
 800ec50:	d203      	bcs.n	800ec5a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800ec52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec54:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ec58:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800ec5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00f      	beq.n	800ec80 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800ec60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec62:	4618      	mov	r0, r3
 800ec64:	f7fe fe5e 	bl	800d924 <lfs_tag_id>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	8a9b      	ldrh	r3, [r3, #20]
 800ec70:	4619      	mov	r1, r3
 800ec72:	4610      	mov	r0, r2
 800ec74:	f7fe f942 	bl	800cefc <lfs_min>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ec7e:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800ec80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fe fdf3 	bl	800d86e <lfs_tag_isvalid>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d001      	beq.n	800ec92 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800ec8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec90:	e037      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800ec92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec94:	4618      	mov	r0, r3
 800ec96:	f7fe fe45 	bl	800d924 <lfs_tag_id>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	8a9b      	ldrh	r3, [r3, #20]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d202      	bcs.n	800ecac <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800eca6:	f06f 0301 	mvn.w	r3, #1
 800ecaa:	e02a      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800ecac:	2300      	movs	r3, #0
 800ecae:	e028      	b.n	800ed02 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f7fe fd20 	bl	800d6f8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800ecb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecba:	3301      	adds	r3, #1
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f003 0301 	and.w	r3, r3, #1
 800ecc2:	bfb8      	it	lt
 800ecc4:	425b      	neglt	r3, r3
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	3368      	adds	r3, #104	; 0x68
 800ecca:	443b      	add	r3, r7
 800eccc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800ecd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecd6:	3301      	adds	r3, #1
 800ecd8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ecda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	f77f ad5a 	ble.w	800e796 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	490a      	ldr	r1, [pc, #40]	; (800ed14 <lfs_dir_fetchmatch+0x6cc>)
 800ecec:	9101      	str	r1, [sp, #4]
 800ecee:	9300      	str	r3, [sp, #0]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	f240 4232 	movw	r2, #1074	; 0x432
 800ecf6:	4908      	ldr	r1, [pc, #32]	; (800ed18 <lfs_dir_fetchmatch+0x6d0>)
 800ecf8:	4808      	ldr	r0, [pc, #32]	; (800ed1c <lfs_dir_fetchmatch+0x6d4>)
 800ecfa:	f014 fdb3 	bl	8023864 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800ecfe:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	376c      	adds	r7, #108	; 0x6c
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd90      	pop	{r4, r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	000ffc00 	.word	0x000ffc00
 800ed10:	7ffffc00 	.word	0x7ffffc00
 800ed14:	080283bc 	.word	0x080283bc
 800ed18:	080282b0 	.word	0x080282b0
 800ed1c:	080283c0 	.word	0x080283c0

0800ed20 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af04      	add	r7, sp, #16
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	9303      	str	r3, [sp, #12]
 800ed30:	2300      	movs	r3, #0
 800ed32:	9302      	str	r3, [sp, #8]
 800ed34:	2300      	movs	r3, #0
 800ed36:	9301      	str	r3, [sp, #4]
 800ed38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff fc7e 	bl	800e648 <lfs_dir_fetchmatch>
 800ed4c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3710      	adds	r7, #16
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
	...

0800ed58 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b08a      	sub	sp, #40	; 0x28
 800ed5c:	af02      	add	r7, sp, #8
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800ed64:	f107 0310 	add.w	r3, r7, #16
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	4b12      	ldr	r3, [pc, #72]	; (800edb4 <lfs_dir_getgstate+0x5c>)
 800ed6c:	4a12      	ldr	r2, [pc, #72]	; (800edb8 <lfs_dir_getgstate+0x60>)
 800ed6e:	68b9      	ldr	r1, [r7, #8]
 800ed70:	68f8      	ldr	r0, [r7, #12]
 800ed72:	f7ff f9c1 	bl	800e0f8 <lfs_dir_get>
 800ed76:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800ed78:	69fb      	ldr	r3, [r7, #28]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	da05      	bge.n	800ed8a <lfs_dir_getgstate+0x32>
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	f113 0f02 	cmn.w	r3, #2
 800ed84:	d001      	beq.n	800ed8a <lfs_dir_getgstate+0x32>
        return res;
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	e00f      	b.n	800edaa <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	f113 0f02 	cmn.w	r3, #2
 800ed90:	d00a      	beq.n	800eda8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800ed92:	f107 0310 	add.w	r3, r7, #16
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fe fe8c 	bl	800dab4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800ed9c:	f107 0310 	add.w	r3, r7, #16
 800eda0:	4619      	mov	r1, r3
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f7fe fdef 	bl	800d986 <lfs_gstate_xor>
    }

    return 0;
 800eda8:	2300      	movs	r3, #0
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3720      	adds	r7, #32
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	7ff0000c 	.word	0x7ff0000c
 800edb8:	7ff00000 	.word	0x7ff00000

0800edbc <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b08a      	sub	sp, #40	; 0x28
 800edc0:	af02      	add	r7, sp, #8
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	4613      	mov	r3, r2
 800edca:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800edcc:	88fb      	ldrh	r3, [r7, #6]
 800edce:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d10b      	bne.n	800edee <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	3308      	adds	r3, #8
 800edda:	4932      	ldr	r1, [pc, #200]	; (800eea4 <lfs_dir_getinfo+0xe8>)
 800eddc:	461a      	mov	r2, r3
 800edde:	460b      	mov	r3, r1
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	2202      	movs	r2, #2
 800ede8:	701a      	strb	r2, [r3, #0]
        return 0;
 800edea:	2300      	movs	r3, #0
 800edec:	e055      	b.n	800ee9a <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800edee:	88fb      	ldrh	r3, [r7, #6]
 800edf0:	029a      	lsls	r2, r3, #10
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edf6:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800edf8:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800edfe:	9300      	str	r3, [sp, #0]
 800ee00:	4613      	mov	r3, r2
 800ee02:	4a29      	ldr	r2, [pc, #164]	; (800eea8 <lfs_dir_getinfo+0xec>)
 800ee04:	68b9      	ldr	r1, [r7, #8]
 800ee06:	68f8      	ldr	r0, [r7, #12]
 800ee08:	f7ff f976 	bl	800e0f8 <lfs_dir_get>
 800ee0c:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	da01      	bge.n	800ee18 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	e040      	b.n	800ee9a <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fe fd58 	bl	800d8d0 <lfs_tag_type3>
 800ee20:	4603      	mov	r3, r0
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800ee28:	88fb      	ldrh	r3, [r7, #6]
 800ee2a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800ee2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee30:	f043 0308 	orr.w	r3, r3, #8
 800ee34:	f107 0214 	add.w	r2, r7, #20
 800ee38:	9200      	str	r2, [sp, #0]
 800ee3a:	4a1c      	ldr	r2, [pc, #112]	; (800eeac <lfs_dir_getinfo+0xf0>)
 800ee3c:	68b9      	ldr	r1, [r7, #8]
 800ee3e:	68f8      	ldr	r0, [r7, #12]
 800ee40:	f7ff f95a 	bl	800e0f8 <lfs_dir_get>
 800ee44:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	da01      	bge.n	800ee50 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	e024      	b.n	800ee9a <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800ee50:	f107 0314 	add.w	r3, r7, #20
 800ee54:	4618      	mov	r0, r3
 800ee56:	f7fe fe6d 	bl	800db34 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fe fd37 	bl	800d8d0 <lfs_tag_type3>
 800ee62:	4603      	mov	r3, r0
 800ee64:	461a      	mov	r2, r3
 800ee66:	f240 2302 	movw	r3, #514	; 0x202
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d103      	bne.n	800ee76 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800ee6e:	69ba      	ldr	r2, [r7, #24]
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	605a      	str	r2, [r3, #4]
 800ee74:	e010      	b.n	800ee98 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800ee76:	69fb      	ldr	r3, [r7, #28]
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f7fe fd29 	bl	800d8d0 <lfs_tag_type3>
 800ee7e:	4603      	mov	r3, r0
 800ee80:	461a      	mov	r2, r3
 800ee82:	f240 2301 	movw	r3, #513	; 0x201
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d106      	bne.n	800ee98 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe fd59 	bl	800d944 <lfs_tag_size>
 800ee92:	4602      	mov	r2, r0
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3720      	adds	r7, #32
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	08028400 	.word	0x08028400
 800eea8:	780ffc00 	.word	0x780ffc00
 800eeac:	700ffc00 	.word	0x700ffc00

0800eeb0 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800eeb0:	b590      	push	{r4, r7, lr}
 800eeb2:	b08f      	sub	sp, #60	; 0x3c
 800eeb4:	af04      	add	r7, sp, #16
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	689c      	ldr	r4, [r3, #8]
 800eece:	68b8      	ldr	r0, [r7, #8]
 800eed0:	f7fe fd38 	bl	800d944 <lfs_tag_size>
 800eed4:	4603      	mov	r3, r0
 800eed6:	4619      	mov	r1, r3
 800eed8:	4620      	mov	r0, r4
 800eeda:	f7fe f80f 	bl	800cefc <lfs_min>
 800eede:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800eee0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	69fa      	ldr	r2, [r7, #28]
 800eee8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800eeea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eeec:	6849      	ldr	r1, [r1, #4]
 800eeee:	69b8      	ldr	r0, [r7, #24]
 800eef0:	9003      	str	r0, [sp, #12]
 800eef2:	9102      	str	r1, [sp, #8]
 800eef4:	9201      	str	r2, [sp, #4]
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	4622      	mov	r2, r4
 800eefc:	2100      	movs	r1, #0
 800eefe:	6a38      	ldr	r0, [r7, #32]
 800ef00:	f7fe fa1c 	bl	800d33c <lfs_bd_cmp>
 800ef04:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d001      	beq.n	800ef10 <lfs_dir_find_match+0x60>
        return res;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	e014      	b.n	800ef3a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	689c      	ldr	r4, [r3, #8]
 800ef14:	68b8      	ldr	r0, [r7, #8]
 800ef16:	f7fe fd15 	bl	800d944 <lfs_tag_size>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	429c      	cmp	r4, r3
 800ef1e:	d00b      	beq.n	800ef38 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	689c      	ldr	r4, [r3, #8]
 800ef24:	68b8      	ldr	r0, [r7, #8]
 800ef26:	f7fe fd0d 	bl	800d944 <lfs_tag_size>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	429c      	cmp	r4, r3
 800ef2e:	d201      	bcs.n	800ef34 <lfs_dir_find_match+0x84>
 800ef30:	2301      	movs	r3, #1
 800ef32:	e002      	b.n	800ef3a <lfs_dir_find_match+0x8a>
 800ef34:	2302      	movs	r3, #2
 800ef36:	e000      	b.n	800ef3a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	372c      	adds	r7, #44	; 0x2c
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd90      	pop	{r4, r7, pc}
	...

0800ef44 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800ef44:	b590      	push	{r4, r7, lr}
 800ef46:	b093      	sub	sp, #76	; 0x4c
 800ef48:	af04      	add	r7, sp, #16
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
 800ef50:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ef64:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800ef66:	4b6e      	ldr	r3, [pc, #440]	; (800f120 <lfs_dir_find+0x1dc>)
 800ef68:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6a1a      	ldr	r2, [r3, #32]
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800ef7a:	496a      	ldr	r1, [pc, #424]	; (800f124 <lfs_dir_find+0x1e0>)
 800ef7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef7e:	f014 fe91 	bl	8023ca4 <strspn>
 800ef82:	4602      	mov	r2, r0
 800ef84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef86:	4413      	add	r3, r2
 800ef88:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800ef8a:	4966      	ldr	r1, [pc, #408]	; (800f124 <lfs_dir_find+0x1e0>)
 800ef8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ef8e:	f014 fe53 	bl	8023c38 <strcspn>
 800ef92:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d105      	bne.n	800efa6 <lfs_dir_find+0x62>
 800ef9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef9c:	781a      	ldrb	r2, [r3, #0]
 800ef9e:	4b62      	ldr	r3, [pc, #392]	; (800f128 <lfs_dir_find+0x1e4>)
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	429a      	cmp	r2, r3
 800efa4:	d00a      	beq.n	800efbc <lfs_dir_find+0x78>
 800efa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa8:	2b02      	cmp	r3, #2
 800efaa:	d10c      	bne.n	800efc6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800efac:	2202      	movs	r2, #2
 800efae:	495f      	ldr	r1, [pc, #380]	; (800f12c <lfs_dir_find+0x1e8>)
 800efb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800efb2:	f014 fdf3 	bl	8023b9c <memcmp>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d104      	bne.n	800efc6 <lfs_dir_find+0x82>
            name += namelen;
 800efbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc0:	4413      	add	r3, r2
 800efc2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800efc4:	e7d9      	b.n	800ef7a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800efc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800efc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efca:	4413      	add	r3, r2
 800efcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800efce:	2301      	movs	r3, #1
 800efd0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800efd2:	4954      	ldr	r1, [pc, #336]	; (800f124 <lfs_dir_find+0x1e0>)
 800efd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efd6:	f014 fe65 	bl	8023ca4 <strspn>
 800efda:	4602      	mov	r2, r0
 800efdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efde:	4413      	add	r3, r2
 800efe0:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800efe2:	4950      	ldr	r1, [pc, #320]	; (800f124 <lfs_dir_find+0x1e0>)
 800efe4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efe6:	f014 fe27 	bl	8023c38 <strcspn>
 800efea:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800efec:	6a3b      	ldr	r3, [r7, #32]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d01d      	beq.n	800f02e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	2b02      	cmp	r3, #2
 800eff6:	d112      	bne.n	800f01e <lfs_dir_find+0xda>
 800eff8:	2202      	movs	r2, #2
 800effa:	494c      	ldr	r1, [pc, #304]	; (800f12c <lfs_dir_find+0x1e8>)
 800effc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800effe:	f014 fdcd 	bl	8023b9c <memcmp>
 800f002:	4603      	mov	r3, r0
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <lfs_dir_find+0xda>
                depth -= 1;
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	3b01      	subs	r3, #1
 800f00c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800f00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f010:	2b00      	cmp	r3, #0
 800f012:	d107      	bne.n	800f024 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800f014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f016:	6a3b      	ldr	r3, [r7, #32]
 800f018:	4413      	add	r3, r2
 800f01a:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800f01c:	e7ad      	b.n	800ef7a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800f01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f020:	3301      	adds	r3, #1
 800f022:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800f024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	4413      	add	r3, r2
 800f02a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800f02c:	e7d1      	b.n	800efd2 <lfs_dir_find+0x8e>
                break;
 800f02e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800f030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f032:	781b      	ldrb	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d101      	bne.n	800f03c <lfs_dir_find+0xf8>
            return tag;
 800f038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f03a:	e06c      	b.n	800f116 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f040:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f044:	4618      	mov	r0, r3
 800f046:	f7fe fc43 	bl	800d8d0 <lfs_tag_type3>
 800f04a:	4603      	mov	r3, r0
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d002      	beq.n	800f056 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800f050:	f06f 0313 	mvn.w	r3, #19
 800f054:	e05f      	b.n	800f116 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800f056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fe fc63 	bl	800d924 <lfs_tag_id>
 800f05e:	4603      	mov	r3, r0
 800f060:	461a      	mov	r2, r3
 800f062:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800f066:	429a      	cmp	r2, r3
 800f068:	d01c      	beq.n	800f0a4 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7fe fc59 	bl	800d924 <lfs_tag_id>
 800f072:	4603      	mov	r3, r0
 800f074:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f07a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f082:	9200      	str	r2, [sp, #0]
 800f084:	4a2a      	ldr	r2, [pc, #168]	; (800f130 <lfs_dir_find+0x1ec>)
 800f086:	68b9      	ldr	r1, [r7, #8]
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f7ff f835 	bl	800e0f8 <lfs_dir_get>
 800f08e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800f090:	69fb      	ldr	r3, [r7, #28]
 800f092:	2b00      	cmp	r3, #0
 800f094:	da01      	bge.n	800f09a <lfs_dir_find+0x156>
                return res;
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	e03d      	b.n	800f116 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	3318      	adds	r3, #24
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7fe fbb1 	bl	800d806 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800f0aa:	212f      	movs	r1, #47	; 0x2f
 800f0ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f0ae:	f014 fdb6 	bl	8023c1e <strchr>
 800f0b2:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d101      	bne.n	800f0bc <lfs_dir_find+0x178>
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	e000      	b.n	800f0be <lfs_dir_find+0x17a>
 800f0bc:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	613a      	str	r2, [r7, #16]
 800f0c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0c4:	617a      	str	r2, [r7, #20]
 800f0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f0ca:	f107 0210 	add.w	r2, r7, #16
 800f0ce:	9203      	str	r2, [sp, #12]
 800f0d0:	4a18      	ldr	r2, [pc, #96]	; (800f134 <lfs_dir_find+0x1f0>)
 800f0d2:	9202      	str	r2, [sp, #8]
 800f0d4:	9301      	str	r3, [sp, #4]
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f0de:	4622      	mov	r2, r4
 800f0e0:	68b9      	ldr	r1, [r7, #8]
 800f0e2:	68f8      	ldr	r0, [r7, #12]
 800f0e4:	f7ff fab0 	bl	800e648 <lfs_dir_fetchmatch>
 800f0e8:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	da01      	bge.n	800f0f4 <lfs_dir_find+0x1b0>
                return tag;
 800f0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f2:	e010      	b.n	800f116 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d004      	beq.n	800f104 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f0fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0fe:	4413      	add	r3, r2
 800f100:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800f102:	e73a      	b.n	800ef7a <lfs_dir_find+0x36>
            if (!dir->split) {
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	7ddb      	ldrb	r3, [r3, #23]
 800f108:	f083 0301 	eor.w	r3, r3, #1
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d0c8      	beq.n	800f0a4 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f112:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f116:	4618      	mov	r0, r3
 800f118:	373c      	adds	r7, #60	; 0x3c
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd90      	pop	{r4, r7, pc}
 800f11e:	bf00      	nop
 800f120:	002ffc00 	.word	0x002ffc00
 800f124:	08028400 	.word	0x08028400
 800f128:	08028404 	.word	0x08028404
 800f12c:	08028408 	.word	0x08028408
 800f130:	700ffc00 	.word	0x700ffc00
 800f134:	0800eeb1 	.word	0x0800eeb1

0800f138 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800f138:	b590      	push	{r4, r7, lr}
 800f13a:	b08b      	sub	sp, #44	; 0x2c
 800f13c:	af04      	add	r7, sp, #16
 800f13e:	60f8      	str	r0, [r7, #12]
 800f140:	60b9      	str	r1, [r7, #8]
 800f142:	607a      	str	r2, [r7, #4]
 800f144:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f103 0010 	add.w	r0, r3, #16
 800f14c:	68fc      	ldr	r4, [r7, #12]
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	6852      	ldr	r2, [r2, #4]
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	9103      	str	r1, [sp, #12]
 800f15a:	6879      	ldr	r1, [r7, #4]
 800f15c:	9102      	str	r1, [sp, #8]
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	2300      	movs	r3, #0
 800f164:	4622      	mov	r2, r4
 800f166:	4601      	mov	r1, r0
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f7fe f9e9 	bl	800d540 <lfs_bd_prog>
 800f16e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d001      	beq.n	800f17a <lfs_dir_commitprog+0x42>
        return err;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	e010      	b.n	800f19c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	6879      	ldr	r1, [r7, #4]
 800f182:	4618      	mov	r0, r3
 800f184:	f004 f8f0 	bl	8013368 <lfs_crc>
 800f188:	4602      	mov	r2, r0
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	441a      	add	r2, r3
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	605a      	str	r2, [r3, #4]
    return 0;
 800f19a:	2300      	movs	r3, #0
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	371c      	adds	r7, #28
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd90      	pop	{r4, r7, pc}

0800f1a4 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b08f      	sub	sp, #60	; 0x3c
 800f1a8:	af04      	add	r7, sp, #16
 800f1aa:	60f8      	str	r0, [r7, #12]
 800f1ac:	60b9      	str	r1, [r7, #8]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fe fbd3 	bl	800d95e <lfs_tag_dsize>
 800f1b8:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	685a      	ldr	r2, [r3, #4]
 800f1be:	6a3b      	ldr	r3, [r7, #32]
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	695b      	ldr	r3, [r3, #20]
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d902      	bls.n	800f1d0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800f1ca:	f06f 031b 	mvn.w	r3, #27
 800f1ce:	e065      	b.n	800f29c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	689b      	ldr	r3, [r3, #8]
 800f1da:	4053      	eors	r3, r2
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fd ff20 	bl	800d022 <lfs_tobe32>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800f1e6:	f107 0214 	add.w	r2, r7, #20
 800f1ea:	2304      	movs	r3, #4
 800f1ec:	68b9      	ldr	r1, [r7, #8]
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	f7ff ffa2 	bl	800f138 <lfs_dir_commitprog>
 800f1f4:	61f8      	str	r0, [r7, #28]
    if (err) {
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <lfs_dir_commitattr+0x5c>
        return err;
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	e04d      	b.n	800f29c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	db0c      	blt.n	800f220 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	3b04      	subs	r3, #4
 800f20a:	683a      	ldr	r2, [r7, #0]
 800f20c:	68b9      	ldr	r1, [r7, #8]
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f7ff ff92 	bl	800f138 <lfs_dir_commitprog>
 800f214:	61f8      	str	r0, [r7, #28]
        if (err) {
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d039      	beq.n	800f290 <lfs_dir_commitattr+0xec>
            return err;
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	e03d      	b.n	800f29c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f224:	2300      	movs	r3, #0
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
 800f228:	e02d      	b.n	800f286 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800f22a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800f22c:	6a3a      	ldr	r2, [r7, #32]
 800f22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f230:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800f232:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	69ba      	ldr	r2, [r7, #24]
 800f23a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800f23c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f23e:	440a      	add	r2, r1
 800f240:	2101      	movs	r1, #1
 800f242:	9103      	str	r1, [sp, #12]
 800f244:	f107 0113 	add.w	r1, r7, #19
 800f248:	9102      	str	r1, [sp, #8]
 800f24a:	9201      	str	r2, [sp, #4]
 800f24c:	9300      	str	r3, [sp, #0]
 800f24e:	4623      	mov	r3, r4
 800f250:	4602      	mov	r2, r0
 800f252:	2100      	movs	r1, #0
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f7fd ff2d 	bl	800d0b4 <lfs_bd_read>
 800f25a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <lfs_dir_commitattr+0xc2>
                return err;
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	e01a      	b.n	800f29c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800f266:	f107 0213 	add.w	r2, r7, #19
 800f26a:	2301      	movs	r3, #1
 800f26c:	68b9      	ldr	r1, [r7, #8]
 800f26e:	68f8      	ldr	r0, [r7, #12]
 800f270:	f7ff ff62 	bl	800f138 <lfs_dir_commitprog>
 800f274:	61f8      	str	r0, [r7, #28]
            if (err) {
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <lfs_dir_commitattr+0xdc>
                return err;
 800f27c:	69fb      	ldr	r3, [r7, #28]
 800f27e:	e00d      	b.n	800f29c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800f280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f282:	3301      	adds	r3, #1
 800f284:	627b      	str	r3, [r7, #36]	; 0x24
 800f286:	6a3b      	ldr	r3, [r7, #32]
 800f288:	3b04      	subs	r3, #4
 800f28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d3cc      	bcc.n	800f22a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	609a      	str	r2, [r3, #8]
    return 0;
 800f29a:	2300      	movs	r3, #0
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	372c      	adds	r7, #44	; 0x2c
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd90      	pop	{r4, r7, pc}

0800f2a4 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b097      	sub	sp, #92	; 0x5c
 800f2a8:	af04      	add	r7, sp, #16
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	685b      	ldr	r3, [r3, #4]
 800f2b2:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ba:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800f2bc:	4619      	mov	r1, r3
 800f2be:	4610      	mov	r0, r2
 800f2c0:	f7fd fe41 	bl	800cf46 <lfs_alignup>
 800f2c4:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800f2ce:	e0a6      	b.n	800f41e <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	3304      	adds	r3, #4
 800f2d6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800f2d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2da:	6a3b      	ldr	r3, [r7, #32]
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f7fd fe0a 	bl	800cefc <lfs_min>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	6a3b      	ldr	r3, [r7, #32]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800f2f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d206      	bcs.n	800f306 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800f2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2fa:	3b08      	subs	r3, #8
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f300:	f7fd fdfc 	bl	800cefc <lfs_min>
 800f304:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800f306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f30a:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800f30c:	6879      	ldr	r1, [r7, #4]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2204      	movs	r2, #4
 800f314:	9203      	str	r2, [sp, #12]
 800f316:	f107 0214 	add.w	r2, r7, #20
 800f31a:	9202      	str	r2, [sp, #8]
 800f31c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f31e:	9201      	str	r2, [sp, #4]
 800f320:	9300      	str	r3, [sp, #0]
 800f322:	2304      	movs	r3, #4
 800f324:	460a      	mov	r2, r1
 800f326:	2100      	movs	r1, #0
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7fd fec3 	bl	800d0b4 <lfs_bd_read>
 800f32e:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d005      	beq.n	800f342 <lfs_dir_commitcrc+0x9e>
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f33c:	d001      	beq.n	800f342 <lfs_dir_commitcrc+0x9e>
            return err;
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	e0e8      	b.n	800f514 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	4618      	mov	r0, r3
 800f346:	f7fd fe60 	bl	800d00a <lfs_frombe32>
 800f34a:	4603      	mov	r3, r0
 800f34c:	43db      	mvns	r3, r3
 800f34e:	0fdb      	lsrs	r3, r3, #31
 800f350:	2b00      	cmp	r3, #0
 800f352:	bf14      	ite	ne
 800f354:	2301      	movne	r3, #1
 800f356:	2300      	moveq	r3, #0
 800f358:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800f35a:	7efb      	ldrb	r3, [r7, #27]
 800f35c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800f360:	051a      	lsls	r2, r3, #20
 800f362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	1acb      	subs	r3, r1, r3
 800f368:	4313      	orrs	r3, r2
 800f36a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800f36e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800f372:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	689a      	ldr	r2, [r3, #8]
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	4053      	eors	r3, r2
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7fd fe50 	bl	800d022 <lfs_tobe32>
 800f382:	4603      	mov	r3, r0
 800f384:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	f107 010c 	add.w	r1, r7, #12
 800f38e:	2204      	movs	r2, #4
 800f390:	4618      	mov	r0, r3
 800f392:	f003 ffe9 	bl	8013368 <lfs_crc>
 800f396:	4602      	mov	r2, r0
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fd fe26 	bl	800cff2 <lfs_tole32>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f103 0010 	add.w	r0, r3, #16
 800f3b0:	687c      	ldr	r4, [r7, #4]
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	6852      	ldr	r2, [r2, #4]
 800f3ba:	2108      	movs	r1, #8
 800f3bc:	9103      	str	r1, [sp, #12]
 800f3be:	f107 010c 	add.w	r1, r7, #12
 800f3c2:	9102      	str	r1, [sp, #8]
 800f3c4:	9201      	str	r2, [sp, #4]
 800f3c6:	9300      	str	r3, [sp, #0]
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	4622      	mov	r2, r4
 800f3cc:	4601      	mov	r1, r0
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7fe f8b6 	bl	800d540 <lfs_bd_prog>
 800f3d4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <lfs_dir_commitcrc+0x13c>
            return err;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	e099      	b.n	800f514 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800f3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d106      	bne.n	800f3f4 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800f3f4:	697b      	ldr	r3, [r7, #20]
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fe faa4 	bl	800d944 <lfs_tag_size>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	1d1a      	adds	r2, r3, #4
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	441a      	add	r2, r3
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800f40a:	7efb      	ldrb	r3, [r7, #27]
 800f40c:	07da      	lsls	r2, r3, #31
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	405a      	eors	r2, r3
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f41c:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f424:	429a      	cmp	r2, r3
 800f426:	f63f af53 	bhi.w	800f2d0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f103 0110 	add.w	r1, r3, #16
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	2300      	movs	r3, #0
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7fe f84f 	bl	800d4d8 <lfs_bd_sync>
 800f43a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800f43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <lfs_dir_commitcrc+0x1a2>
        return err;
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f444:	e066      	b.n	800f514 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	691b      	ldr	r3, [r3, #16]
 800f44a:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800f44c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f44e:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800f450:	e05b      	b.n	800f50a <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800f452:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f456:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800f458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f45c:	e030      	b.n	800f4c0 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800f45e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f462:	429a      	cmp	r2, r3
 800f464:	d106      	bne.n	800f474 <lfs_dir_commitcrc+0x1d0>
 800f466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f46a:	429a      	cmp	r2, r3
 800f46c:	d002      	beq.n	800f474 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800f46e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f472:	e04f      	b.n	800f514 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800f474:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800f476:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800f47c:	1d18      	adds	r0, r3, #4
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2201      	movs	r2, #1
 800f484:	9203      	str	r2, [sp, #12]
 800f486:	f107 020b 	add.w	r2, r7, #11
 800f48a:	9202      	str	r2, [sp, #8]
 800f48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48e:	9201      	str	r2, [sp, #4]
 800f490:	9300      	str	r3, [sp, #0]
 800f492:	4603      	mov	r3, r0
 800f494:	460a      	mov	r2, r1
 800f496:	2100      	movs	r1, #0
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f7fd fe0b 	bl	800d0b4 <lfs_bd_read>
 800f49e:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d001      	beq.n	800f4aa <lfs_dir_commitcrc+0x206>
                return err;
 800f4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a8:	e034      	b.n	800f514 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800f4aa:	f107 030b 	add.w	r3, r7, #11
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4b4:	f003 ff58 	bl	8013368 <lfs_crc>
 800f4b8:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800f4ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4bc:	3301      	adds	r3, #1
 800f4be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c2:	3304      	adds	r3, #4
 800f4c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d3c9      	bcc.n	800f45e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800f4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800f4d0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f4d4:	e01e      	b.n	800f514 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800f4d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f7fd fd0b 	bl	800cefc <lfs_min>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ea:	4413      	add	r3, r2
 800f4ec:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800f4ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f2:	429a      	cmp	r2, r3
 800f4f4:	d206      	bcs.n	800f504 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800f4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f8:	3b08      	subs	r3, #8
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4fe:	f7fd fcfd 	bl	800cefc <lfs_min>
 800f502:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	3304      	adds	r3, #4
 800f508:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800f50a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	429a      	cmp	r2, r3
 800f510:	d39f      	bcc.n	800f452 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800f512:	2300      	movs	r3, #0
}
 800f514:	4618      	mov	r0, r3
 800f516:	374c      	adds	r7, #76	; 0x4c
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd90      	pop	{r4, r7, pc}

0800f51c <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08a      	sub	sp, #40	; 0x28
 800f520:	af04      	add	r7, sp, #16
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800f526:	2300      	movs	r3, #0
 800f528:	617b      	str	r3, [r7, #20]
 800f52a:	e016      	b.n	800f55a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	3301      	adds	r3, #1
 800f530:	2b00      	cmp	r3, #0
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	bfb8      	it	lt
 800f538:	425b      	neglt	r3, r3
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	4413      	add	r3, r2
 800f540:	4619      	mov	r1, r3
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7fe fc3e 	bl	800ddc4 <lfs_alloc>
 800f548:	60f8      	str	r0, [r7, #12]
        if (err) {
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <lfs_dir_alloc+0x38>
            return err;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	e058      	b.n	800f606 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800f554:	697b      	ldr	r3, [r7, #20]
 800f556:	3301      	adds	r3, #1
 800f558:	617b      	str	r3, [r7, #20]
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	dde5      	ble.n	800f52c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	2200      	movs	r2, #0
 800f564:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800f566:	6879      	ldr	r1, [r7, #4]
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800f56c:	683a      	ldr	r2, [r7, #0]
 800f56e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800f570:	2004      	movs	r0, #4
 800f572:	9003      	str	r0, [sp, #12]
 800f574:	9202      	str	r2, [sp, #8]
 800f576:	2200      	movs	r2, #0
 800f578:	9201      	str	r2, [sp, #4]
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	2304      	movs	r3, #4
 800f57e:	460a      	mov	r2, r1
 800f580:	2100      	movs	r1, #0
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7fd fd96 	bl	800d0b4 <lfs_bd_read>
 800f588:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd fd24 	bl	800cfdc <lfs_fromle32>
 800f594:	4602      	mov	r2, r0
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800f59a:	693b      	ldr	r3, [r7, #16]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d005      	beq.n	800f5ac <lfs_dir_alloc+0x90>
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f5a6:	d001      	beq.n	800f5ac <lfs_dir_alloc+0x90>
        return err;
 800f5a8:	693b      	ldr	r3, [r7, #16]
 800f5aa:	e02c      	b.n	800f606 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	dd0e      	ble.n	800f5d4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	689a      	ldr	r2, [r3, #8]
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	f043 0301 	orr.w	r3, r3, #1
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	4610      	mov	r0, r2
 800f5ca:	f7fd fcbc 	bl	800cf46 <lfs_alignup>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2204      	movs	r2, #4
 800f5d8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5ee:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5f6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	2200      	movs	r2, #0
 800f602:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800f604:	2300      	movs	r3, #0
}
 800f606:	4618      	mov	r0, r3
 800f608:	3718      	adds	r7, #24
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
	...

0800f610 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800f610:	b580      	push	{r7, lr}
 800f612:	b08a      	sub	sp, #40	; 0x28
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	3348      	adds	r3, #72	; 0x48
 800f620:	461a      	mov	r2, r3
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	68f8      	ldr	r0, [r7, #12]
 800f626:	f7ff fb97 	bl	800ed58 <lfs_dir_getgstate>
 800f62a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <lfs_dir_drop+0x26>
        return err;
 800f632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f634:	e022      	b.n	800f67c <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	3318      	adds	r3, #24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fe f8fd 	bl	800d83a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	7ddb      	ldrb	r3, [r3, #23]
 800f644:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800f648:	051a      	lsls	r2, r3, #20
 800f64a:	4b0e      	ldr	r3, [pc, #56]	; (800f684 <lfs_dir_drop+0x74>)
 800f64c:	4313      	orrs	r3, r2
 800f64e:	61fb      	str	r3, [r7, #28]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	3318      	adds	r3, #24
 800f654:	623b      	str	r3, [r7, #32]
 800f656:	f107 021c 	add.w	r2, r7, #28
 800f65a:	2301      	movs	r3, #1
 800f65c:	68b9      	ldr	r1, [r7, #8]
 800f65e:	68f8      	ldr	r0, [r7, #12]
 800f660:	f000 fbac 	bl	800fdbc <lfs_dir_commit>
 800f664:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	3318      	adds	r3, #24
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe f8cb 	bl	800d806 <lfs_pair_fromle32>
    if (err) {
 800f670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <lfs_dir_drop+0x6a>
        return err;
 800f676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f678:	e000      	b.n	800f67c <lfs_dir_drop+0x6c>
    }

    return 0;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3728      	adds	r7, #40	; 0x28
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	000ffc08 	.word	0x000ffc08

0800f688 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800f688:	b580      	push	{r7, lr}
 800f68a:	b092      	sub	sp, #72	; 0x48
 800f68c:	af04      	add	r7, sp, #16
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	607a      	str	r2, [r7, #4]
 800f694:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7fe fb74 	bl	800dd84 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800f69c:	f107 0314 	add.w	r3, r7, #20
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	f7ff ff3a 	bl	800f51c <lfs_dir_alloc>
 800f6a8:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800f6aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <lfs_dir_split+0x2c>
        return err;
 800f6b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6b2:	e03c      	b.n	800f72e <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	7ddb      	ldrb	r3, [r3, #23]
 800f6b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	699b      	ldr	r3, [r3, #24]
 800f6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	69db      	ldr	r3, [r3, #28]
 800f6c6:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800f6c8:	f107 0114 	add.w	r1, r7, #20
 800f6cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800f6d0:	9302      	str	r3, [sp, #8]
 800f6d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f6d6:	9301      	str	r3, [sp, #4]
 800f6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	68f8      	ldr	r0, [r7, #12]
 800f6e2:	f000 f853 	bl	800f78c <lfs_dir_compact>
 800f6e6:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800f6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d001      	beq.n	800f6f2 <lfs_dir_split+0x6a>
        return err;
 800f6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6f0:	e01d      	b.n	800f72e <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800f6f2:	697a      	ldr	r2, [r7, #20]
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800f6f8:	69ba      	ldr	r2, [r7, #24]
 800f6fa:	68bb      	ldr	r3, [r7, #8]
 800f6fc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	2201      	movs	r2, #1
 800f702:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800f704:	68ba      	ldr	r2, [r7, #8]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	3320      	adds	r3, #32
 800f70a:	4619      	mov	r1, r3
 800f70c:	4610      	mov	r0, r2
 800f70e:	f7fe f823 	bl	800d758 <lfs_pair_cmp>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d109      	bne.n	800f72c <lfs_dir_split+0xa4>
 800f718:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d105      	bne.n	800f72c <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800f726:	69ba      	ldr	r2, [r7, #24]
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3738      	adds	r7, #56	; 0x38
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800f736:	b580      	push	{r7, lr}
 800f738:	b086      	sub	sp, #24
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	60f8      	str	r0, [r7, #12]
 800f73e:	60b9      	str	r1, [r7, #8]
 800f740:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800f746:	68b8      	ldr	r0, [r7, #8]
 800f748:	f7fe f909 	bl	800d95e <lfs_tag_dsize>
 800f74c:	4602      	mov	r2, r0
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	441a      	add	r2, r3
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	601a      	str	r2, [r3, #0]
    return 0;
 800f758:	2300      	movs	r3, #0
}
 800f75a:	4618      	mov	r0, r3
 800f75c:	3718      	adds	r7, #24
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}

0800f762 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800f762:	b580      	push	{r7, lr}
 800f764:	b086      	sub	sp, #24
 800f766:	af00      	add	r7, sp, #0
 800f768:	60f8      	str	r0, [r7, #12]
 800f76a:	60b9      	str	r1, [r7, #8]
 800f76c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	6859      	ldr	r1, [r3, #4]
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	68ba      	ldr	r2, [r7, #8]
 800f77e:	f7ff fd11 	bl	800f1a4 <lfs_dir_commitattr>
 800f782:	4603      	mov	r3, r0
}
 800f784:	4618      	mov	r0, r3
 800f786:	3718      	adds	r7, #24
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800f78c:	b590      	push	{r4, r7, lr}
 800f78e:	b0ad      	sub	sp, #180	; 0xb4
 800f790:	af0a      	add	r7, sp, #40	; 0x28
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	607a      	str	r2, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	663b      	str	r3, [r7, #96]	; 0x60
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800f7b2:	e08f      	b.n	800f8d4 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800f7b8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f7bc:	425b      	negs	r3, r3
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	b21b      	sxth	r3, r3
 800f7c2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800f7c6:	9208      	str	r2, [sp, #32]
 800f7c8:	4aa4      	ldr	r2, [pc, #656]	; (800fa5c <lfs_dir_compact+0x2d0>)
 800f7ca:	9207      	str	r2, [sp, #28]
 800f7cc:	9306      	str	r3, [sp, #24]
 800f7ce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800f7d2:	9305      	str	r3, [sp, #20]
 800f7d4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f7d8:	9304      	str	r3, [sp, #16]
 800f7da:	2300      	movs	r3, #0
 800f7dc:	9303      	str	r3, [sp, #12]
 800f7de:	4ba0      	ldr	r3, [pc, #640]	; (800fa60 <lfs_dir_compact+0x2d4>)
 800f7e0:	9302      	str	r3, [sp, #8]
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	9301      	str	r3, [sp, #4]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	9300      	str	r3, [sp, #0]
 800f7ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800f7f4:	68f8      	ldr	r0, [r7, #12]
 800f7f6:	f7fe fdcf 	bl	800e398 <lfs_dir_traverse>
 800f7fa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800f7fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f802:	2b00      	cmp	r3, #0
 800f804:	d002      	beq.n	800f80c <lfs_dir_compact+0x80>
            return err;
 800f806:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f80a:	e2cc      	b.n	800fda6 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800f80c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800f810:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	2bfe      	cmp	r3, #254	; 0xfe
 800f818:	dc22      	bgt.n	800f860 <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f81e:	69db      	ldr	r3, [r3, #28]
 800f820:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d004      	beq.n	800f838 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 800f834:	085b      	lsrs	r3, r3, #1
 800f836:	e003      	b.n	800f840 <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f83c:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800f83e:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f844:	6992      	ldr	r2, [r2, #24]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800f846:	4611      	mov	r1, r2
 800f848:	4618      	mov	r0, r3
 800f84a:	f7fd fb7c 	bl	800cf46 <lfs_alignup>
 800f84e:	4603      	mov	r3, r0
 800f850:	4619      	mov	r1, r3
 800f852:	4620      	mov	r0, r4
 800f854:	f7fd fb52 	bl	800cefc <lfs_min>
 800f858:	4602      	mov	r2, r0
 800f85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d242      	bcs.n	800f8e6 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800f860:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800f864:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	0fda      	lsrs	r2, r3, #31
 800f86c:	4413      	add	r3, r2
 800f86e:	105b      	asrs	r3, r3, #1
 800f870:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800f874:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800f878:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f87c:	4413      	add	r3, r2
 800f87e:	b29b      	uxth	r3, r3
 800f880:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800f884:	9202      	str	r2, [sp, #8]
 800f886:	9301      	str	r3, [sp, #4]
 800f888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f88c:	9300      	str	r3, [sp, #0]
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	68b9      	ldr	r1, [r7, #8]
 800f894:	68f8      	ldr	r0, [r7, #12]
 800f896:	f7ff fef7 	bl	800f688 <lfs_dir_split>
 800f89a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800f89e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d00f      	beq.n	800f8c6 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800f8a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8aa:	f113 0f1c 	cmn.w	r3, #28
 800f8ae:	d107      	bne.n	800f8c0 <lfs_dir_compact+0x134>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800f8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d214      	bcs.n	800f8ea <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800f8c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f8c4:	e26f      	b.n	800fda6 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800f8c6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800f8ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800f8ce:	4413      	add	r3, r2
 800f8d0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800f8d4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800f8d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f8dc:	1ad3      	subs	r3, r2, r3
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	f73f af68 	bgt.w	800f7b4 <lfs_dir_compact+0x28>
 800f8e4:	e002      	b.n	800f8ec <lfs_dir_compact+0x160>
            break;
 800f8e6:	bf00      	nop
 800f8e8:	e000      	b.n	800f8ec <lfs_dir_compact+0x160>
                break;
 800f8ea:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	689b      	ldr	r3, [r3, #8]
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	dd5b      	ble.n	800f9b8 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	689b      	ldr	r3, [r3, #8]
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f90a:	3201      	adds	r2, #1
 800f90c:	f042 0201 	orr.w	r2, r2, #1
 800f910:	fbb3 f1f2 	udiv	r1, r3, r2
 800f914:	fb01 f202 	mul.w	r2, r1, r2
 800f918:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d14c      	bne.n	800f9b8 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2200      	movs	r2, #0
 800f922:	657a      	str	r2, [r7, #84]	; 0x54
 800f924:	2201      	movs	r2, #1
 800f926:	65ba      	str	r2, [r7, #88]	; 0x58
 800f928:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800f92c:	4611      	mov	r1, r2
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fd ff12 	bl	800d758 <lfs_pair_cmp>
 800f934:	4603      	mov	r3, r0
 800f936:	2b00      	cmp	r3, #0
 800f938:	d13a      	bne.n	800f9b0 <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f003 fb50 	bl	8012fe0 <lfs_fs_rawsize>
 800f940:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800f942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f944:	2b00      	cmp	r3, #0
 800f946:	da01      	bge.n	800f94c <lfs_dir_compact+0x1c0>
                return res;
 800f948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f94a:	e22c      	b.n	800fda6 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f950:	6a1b      	ldr	r3, [r3, #32]
 800f952:	085a      	lsrs	r2, r3, #1
 800f954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f956:	429a      	cmp	r2, r3
 800f958:	d92e      	bls.n	800f9b8 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	4a41      	ldr	r2, [pc, #260]	; (800fa64 <lfs_dir_compact+0x2d8>)
 800f960:	9200      	str	r2, [sp, #0]
 800f962:	f240 626c 	movw	r2, #1644	; 0x66c
 800f966:	4940      	ldr	r1, [pc, #256]	; (800fa68 <lfs_dir_compact+0x2dc>)
 800f968:	4840      	ldr	r0, [pc, #256]	; (800fa6c <lfs_dir_compact+0x2e0>)
 800f96a:	f013 ff7b 	bl	8023864 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800f96e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800f972:	9302      	str	r3, [sp, #8]
 800f974:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	68b9      	ldr	r1, [r7, #8]
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f7ff fe7e 	bl	800f688 <lfs_dir_split>
 800f98c:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800f98e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f990:	2b00      	cmp	r3, #0
 800f992:	d005      	beq.n	800f9a0 <lfs_dir_compact+0x214>
 800f994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f996:	f113 0f1c 	cmn.w	r3, #28
 800f99a:	d001      	beq.n	800f9a0 <lfs_dir_compact+0x214>
                    return err;
 800f99c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f99e:	e202      	b.n	800fda6 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800f9a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d108      	bne.n	800f9b8 <lfs_dir_compact+0x22c>
                    end = begin;
 800f9a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f9aa:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800f9ae:	e003      	b.n	800f9b8 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800f9b6:	e16b      	b.n	800fc90 <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800f9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f9be:	2300      	movs	r3, #0
 800f9c0:	643b      	str	r3, [r7, #64]	; 0x40
 800f9c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f9c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f9cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d004      	beq.n	800f9e6 <lfs_dir_compact+0x25a>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9e2:	3b08      	subs	r3, #8
 800f9e4:	e003      	b.n	800f9ee <lfs_dir_compact+0x262>
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9ea:	69db      	ldr	r3, [r3, #28]
 800f9ec:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800f9ee:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	685b      	ldr	r3, [r3, #4]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f7fd fe4e 	bl	800d698 <lfs_bd_erase>
 800f9fc:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800f9fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d006      	beq.n	800fa12 <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800fa04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fa0a:	f000 8136 	beq.w	800fc7a <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800fa0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa10:	e1c9      	b.n	800fda6 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	689b      	ldr	r3, [r3, #8]
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fd faeb 	bl	800cff2 <lfs_tole32>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800fa28:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800fa2c:	2304      	movs	r3, #4
 800fa2e:	68f8      	ldr	r0, [r7, #12]
 800fa30:	f7ff fb82 	bl	800f138 <lfs_dir_commitprog>
 800fa34:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fd face 	bl	800cfdc <lfs_fromle32>
 800fa40:	4602      	mov	r2, r0
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	609a      	str	r2, [r3, #8]
            if (err) {
 800fa46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d011      	beq.n	800fa70 <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800fa4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa4e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fa52:	f000 8114 	beq.w	800fc7e <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800fa56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa58:	e1a5      	b.n	800fda6 <lfs_dir_compact+0x61a>
 800fa5a:	bf00      	nop
 800fa5c:	0800f737 	.word	0x0800f737
 800fa60:	400ffc00 	.word	0x400ffc00
 800fa64:	080283bc 	.word	0x080283bc
 800fa68:	080282b0 	.word	0x080282b0
 800fa6c:	0802840c 	.word	0x0802840c
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800fa70:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fa74:	425b      	negs	r3, r3
 800fa76:	b29b      	uxth	r3, r3
 800fa78:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	637a      	str	r2, [r7, #52]	; 0x34
 800fa7e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800fa82:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800fa84:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fa88:	9208      	str	r2, [sp, #32]
 800fa8a:	4aaa      	ldr	r2, [pc, #680]	; (800fd34 <lfs_dir_compact+0x5a8>)
 800fa8c:	9207      	str	r2, [sp, #28]
 800fa8e:	9306      	str	r3, [sp, #24]
 800fa90:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800fa94:	9305      	str	r3, [sp, #20]
 800fa96:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fa9a:	9304      	str	r3, [sp, #16]
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	9303      	str	r3, [sp, #12]
 800faa0:	4ba5      	ldr	r3, [pc, #660]	; (800fd38 <lfs_dir_compact+0x5ac>)
 800faa2:	9302      	str	r3, [sp, #8]
 800faa4:	683b      	ldr	r3, [r7, #0]
 800faa6:	9301      	str	r3, [sp, #4]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	9300      	str	r3, [sp, #0]
 800faac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fab0:	2200      	movs	r2, #0
 800fab2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800fab6:	68f8      	ldr	r0, [r7, #12]
 800fab8:	f7fe fc6e 	bl	800e398 <lfs_dir_traverse>
 800fabc:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800fabe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800fac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fac6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800faca:	f000 80da 	beq.w	800fc82 <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800face:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fad0:	e169      	b.n	800fda6 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	3318      	adds	r3, #24
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fd fe23 	bl	800d722 <lfs_pair_isnull>
 800fadc:	4603      	mov	r3, r0
 800fade:	f083 0301 	eor.w	r3, r3, #1
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d022      	beq.n	800fb2e <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	3318      	adds	r3, #24
 800faec:	4618      	mov	r0, r3
 800faee:	f7fd fea4 	bl	800d83a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	7ddb      	ldrb	r3, [r3, #23]
 800faf6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800fafa:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800fafc:	4a8f      	ldr	r2, [pc, #572]	; (800fd3c <lfs_dir_compact+0x5b0>)
 800fafe:	431a      	orrs	r2, r3
                        dir->tail);
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800fb04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f7ff fb4b 	bl	800f1a4 <lfs_dir_commitattr>
 800fb0e:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	3318      	adds	r3, #24
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7fd fe76 	bl	800d806 <lfs_pair_fromle32>
                if (err) {
 800fb1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d006      	beq.n	800fb2e <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800fb20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb22:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fb26:	f000 80ae 	beq.w	800fc86 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800fb2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb2c:	e13b      	b.n	800fda6 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800fb2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb32:	2200      	movs	r2, #0
 800fb34:	601a      	str	r2, [r3, #0]
 800fb36:	605a      	str	r2, [r3, #4]
 800fb38:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800fb3a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fb3e:	f083 0301 	eor.w	r3, r3, #1
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d011      	beq.n	800fb6c <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fb4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb52:	4611      	mov	r1, r2
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fd ff16 	bl	800d986 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fb60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb64:	4611      	mov	r1, r2
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fd ff0d 	bl	800d986 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800fb72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7fd ff04 	bl	800d986 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800fb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb80:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800fb84:	f023 0303 	bic.w	r3, r3, #3
 800fb88:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800fb8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fb8e:	461a      	mov	r2, r3
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	f7ff f8e0 	bl	800ed58 <lfs_dir_getgstate>
 800fb98:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800fb9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d001      	beq.n	800fba4 <lfs_dir_compact+0x418>
                return err;
 800fba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fba2:	e100      	b.n	800fda6 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800fba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd ff11 	bl	800d9d0 <lfs_gstate_iszero>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	f083 0301 	eor.w	r3, r3, #1
 800fbb4:	b2db      	uxtb	r3, r3
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d016      	beq.n	800fbe8 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800fbba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fd ff98 	bl	800daf4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800fbc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fbc8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800fbcc:	4a5c      	ldr	r2, [pc, #368]	; (800fd40 <lfs_dir_compact+0x5b4>)
 800fbce:	68f8      	ldr	r0, [r7, #12]
 800fbd0:	f7ff fae8 	bl	800f1a4 <lfs_dir_commitattr>
 800fbd4:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800fbd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d005      	beq.n	800fbe8 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800fbdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbde:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fbe2:	d052      	beq.n	800fc8a <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800fbe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbe6:	e0de      	b.n	800fda6 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800fbe8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fbec:	4619      	mov	r1, r3
 800fbee:	68f8      	ldr	r0, [r7, #12]
 800fbf0:	f7ff fb58 	bl	800f2a4 <lfs_dir_commitcrc>
 800fbf4:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800fbf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800fbfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbfe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fc02:	d044      	beq.n	800fc8e <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800fc04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc06:	e0ce      	b.n	800fda6 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800fc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800fc0e:	6992      	ldr	r2, [r2, #24]
 800fc10:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc14:	fb01 f202 	mul.w	r2, r1, r2
 800fc18:	1a9b      	subs	r3, r3, r2
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d006      	beq.n	800fc2c <lfs_dir_compact+0x4a0>
 800fc1e:	4b49      	ldr	r3, [pc, #292]	; (800fd44 <lfs_dir_compact+0x5b8>)
 800fc20:	4a49      	ldr	r2, [pc, #292]	; (800fd48 <lfs_dir_compact+0x5bc>)
 800fc22:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800fc26:	4849      	ldr	r0, [pc, #292]	; (800fd4c <lfs_dir_compact+0x5c0>)
 800fc28:	f012 ff46 	bl	8022ab8 <__assert_func>
            lfs_pair_swap(dir->pair);
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7fd fd62 	bl	800d6f8 <lfs_pair_swap>
            dir->count = end - begin;
 800fc34:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800fc38:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fc3c:	1ad3      	subs	r3, r2, r3
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800fc44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc46:	68bb      	ldr	r3, [r7, #8]
 800fc48:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800fc4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	3348      	adds	r3, #72	; 0x48
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	605a      	str	r2, [r3, #4]
 800fc5a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800fc5c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fc60:	f083 0301 	eor.w	r3, r3, #1
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d078      	beq.n	800fd5c <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	68fa      	ldr	r2, [r7, #12]
 800fc6e:	333c      	adds	r3, #60	; 0x3c
 800fc70:	3230      	adds	r2, #48	; 0x30
 800fc72:	ca07      	ldmia	r2, {r0, r1, r2}
 800fc74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800fc78:	e070      	b.n	800fd5c <lfs_dir_compact+0x5d0>
                    goto relocate;
 800fc7a:	bf00      	nop
 800fc7c:	e008      	b.n	800fc90 <lfs_dir_compact+0x504>
                    goto relocate;
 800fc7e:	bf00      	nop
 800fc80:	e006      	b.n	800fc90 <lfs_dir_compact+0x504>
                    goto relocate;
 800fc82:	bf00      	nop
 800fc84:	e004      	b.n	800fc90 <lfs_dir_compact+0x504>
                        goto relocate;
 800fc86:	bf00      	nop
 800fc88:	e002      	b.n	800fc90 <lfs_dir_compact+0x504>
                        goto relocate;
 800fc8a:	bf00      	nop
 800fc8c:	e000      	b.n	800fc90 <lfs_dir_compact+0x504>
                    goto relocate;
 800fc8e:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800fc90:	2301      	movs	r3, #1
 800fc92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	3310      	adds	r3, #16
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	68f8      	ldr	r0, [r7, #12]
 800fc9e:	f7fd f9e3 	bl	800d068 <lfs_cache_drop>
        if (!tired) {
 800fca2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800fca6:	f083 0301 	eor.w	r3, r3, #1
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d009      	beq.n	800fcc4 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	4a26      	ldr	r2, [pc, #152]	; (800fd50 <lfs_dir_compact+0x5c4>)
 800fcb6:	9200      	str	r2, [sp, #0]
 800fcb8:	f240 7202 	movw	r2, #1794	; 0x702
 800fcbc:	4923      	ldr	r1, [pc, #140]	; (800fd4c <lfs_dir_compact+0x5c0>)
 800fcbe:	4825      	ldr	r0, [pc, #148]	; (800fd54 <lfs_dir_compact+0x5c8>)
 800fcc0:	f013 fdd0 	bl	8023864 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800fcc4:	68bb      	ldr	r3, [r7, #8]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	617a      	str	r2, [r7, #20]
 800fcca:	2201      	movs	r2, #1
 800fccc:	61ba      	str	r2, [r7, #24]
 800fcce:	f107 0214 	add.w	r2, r7, #20
 800fcd2:	4611      	mov	r1, r2
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fd fd3f 	bl	800d758 <lfs_pair_cmp>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d10c      	bne.n	800fcfa <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	4a1a      	ldr	r2, [pc, #104]	; (800fd50 <lfs_dir_compact+0x5c4>)
 800fce6:	9200      	str	r2, [sp, #0]
 800fce8:	f240 7207 	movw	r2, #1799	; 0x707
 800fcec:	4917      	ldr	r1, [pc, #92]	; (800fd4c <lfs_dir_compact+0x5c0>)
 800fcee:	481a      	ldr	r0, [pc, #104]	; (800fd58 <lfs_dir_compact+0x5cc>)
 800fcf0:	f013 fdb8 	bl	8023864 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800fcf4:	f06f 031b 	mvn.w	r3, #27
 800fcf8:	e055      	b.n	800fda6 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	3304      	adds	r3, #4
 800fcfe:	4619      	mov	r1, r3
 800fd00:	68f8      	ldr	r0, [r7, #12]
 800fd02:	f7fe f85f 	bl	800ddc4 <lfs_alloc>
 800fd06:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800fd08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00c      	beq.n	800fd28 <lfs_dir_compact+0x59c>
 800fd0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd10:	f113 0f1c 	cmn.w	r3, #28
 800fd14:	d106      	bne.n	800fd24 <lfs_dir_compact+0x598>
 800fd16:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800fd1a:	f083 0301 	eor.w	r3, r3, #1
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <lfs_dir_compact+0x59c>
            return err;
 800fd24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd26:	e03e      	b.n	800fda6 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800fd28:	2300      	movs	r3, #0
 800fd2a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800fd2e:	bf00      	nop
    while (true) {
 800fd30:	e642      	b.n	800f9b8 <lfs_dir_compact+0x22c>
 800fd32:	bf00      	nop
 800fd34:	0800f763 	.word	0x0800f763
 800fd38:	400ffc00 	.word	0x400ffc00
 800fd3c:	000ffc08 	.word	0x000ffc08
 800fd40:	7ffffc0c 	.word	0x7ffffc0c
 800fd44:	0802843c 	.word	0x0802843c
 800fd48:	0802bfa4 	.word	0x0802bfa4
 800fd4c:	080282b0 	.word	0x080282b0
 800fd50:	080283bc 	.word	0x080283bc
 800fd54:	08028464 	.word	0x08028464
 800fd58:	08028488 	.word	0x08028488
        break;
 800fd5c:	bf00      	nop
    }

    if (relocated) {
 800fd5e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d01e      	beq.n	800fda4 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800fd66:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fd68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	6812      	ldr	r2, [r2, #0]
 800fd6e:	68b9      	ldr	r1, [r7, #8]
 800fd70:	6849      	ldr	r1, [r1, #4]
 800fd72:	4c0f      	ldr	r4, [pc, #60]	; (800fdb0 <lfs_dir_compact+0x624>)
 800fd74:	9403      	str	r4, [sp, #12]
 800fd76:	9102      	str	r1, [sp, #8]
 800fd78:	9201      	str	r2, [sp, #4]
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800fd82:	490c      	ldr	r1, [pc, #48]	; (800fdb4 <lfs_dir_compact+0x628>)
 800fd84:	480c      	ldr	r0, [pc, #48]	; (800fdb8 <lfs_dir_compact+0x62c>)
 800fd86:	f013 fd6d 	bl	8023864 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800fd8a:	68ba      	ldr	r2, [r7, #8]
 800fd8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd90:	4619      	mov	r1, r3
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f002 fdac 	bl	80128f0 <lfs_fs_relocate>
 800fd98:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800fd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d001      	beq.n	800fda4 <lfs_dir_compact+0x618>
            return err;
 800fda0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fda2:	e000      	b.n	800fda6 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	378c      	adds	r7, #140	; 0x8c
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd90      	pop	{r4, r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	080283bc 	.word	0x080283bc
 800fdb4:	080282b0 	.word	0x080282b0
 800fdb8:	080284c0 	.word	0x080284c0

0800fdbc <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800fdbc:	b5b0      	push	{r4, r5, r7, lr}
 800fdbe:	b0b8      	sub	sp, #224	; 0xe0
 800fdc0:	af0a      	add	r7, sp, #40	; 0x28
 800fdc2:	60f8      	str	r0, [r7, #12]
 800fdc4:	60b9      	str	r1, [r7, #8]
 800fdc6:	607a      	str	r2, [r7, #4]
 800fdc8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fdd2:	e045      	b.n	800fe60 <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800fdd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fdd8:	3308      	adds	r3, #8
 800fdda:	68ba      	ldr	r2, [r7, #8]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d03a      	beq.n	800fe56 <lfs_dir_commit+0x9a>
 800fde0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fde4:	3308      	adds	r3, #8
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	4611      	mov	r1, r2
 800fdea:	4618      	mov	r0, r3
 800fdec:	f7fd fcb4 	bl	800d758 <lfs_pair_cmp>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d12f      	bne.n	800fe56 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800fdf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fdfa:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800fdfc:	2b01      	cmp	r3, #1
 800fdfe:	d12a      	bne.n	800fe56 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800fe00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d023      	beq.n	800fe56 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800fe0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d91b      	bls.n	800fe56 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800fe1e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	f001 faca 	bl	80113bc <lfs_file_outline>
 800fe28:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800fe2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <lfs_dir_commit+0x7e>
                return err;
 800fe34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe38:	e36e      	b.n	8010518 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800fe3a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800fe3e:	68f8      	ldr	r0, [r7, #12]
 800fe40:	f001 fade 	bl	8011400 <lfs_file_flush>
 800fe44:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800fe48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <lfs_dir_commit+0x9a>
                return err;
 800fe50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fe54:	e360      	b.n	8010518 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800fe56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fe60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d1b5      	bne.n	800fdd4 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800fe6e:	461d      	mov	r5, r3
 800fe70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800fe78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800fe82:	2300      	movs	r3, #0
 800fe84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fe88:	e075      	b.n	800ff76 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800fe8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe8e:	00db      	lsls	r3, r3, #3
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	4413      	add	r3, r2
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fd fd1a 	bl	800d8d0 <lfs_tag_type3>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	461a      	mov	r2, r3
 800fea0:	f240 4301 	movw	r3, #1025	; 0x401
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d106      	bne.n	800feb6 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	8a9b      	ldrh	r3, [r3, #20]
 800feac:	3301      	adds	r3, #1
 800feae:	b29a      	uxth	r2, r3
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	829a      	strh	r2, [r3, #20]
 800feb4:	e05a      	b.n	800ff6c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800feb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800feba:	00db      	lsls	r3, r3, #3
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	4413      	add	r3, r2
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fd fd04 	bl	800d8d0 <lfs_tag_type3>
 800fec8:	4603      	mov	r3, r0
 800feca:	461a      	mov	r2, r3
 800fecc:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d114      	bne.n	800fefe <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	8a9b      	ldrh	r3, [r3, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d106      	bne.n	800feea <lfs_dir_commit+0x12e>
 800fedc:	4bac      	ldr	r3, [pc, #688]	; (8010190 <lfs_dir_commit+0x3d4>)
 800fede:	4aad      	ldr	r2, [pc, #692]	; (8010194 <lfs_dir_commit+0x3d8>)
 800fee0:	f240 7141 	movw	r1, #1857	; 0x741
 800fee4:	48ac      	ldr	r0, [pc, #688]	; (8010198 <lfs_dir_commit+0x3dc>)
 800fee6:	f012 fde7 	bl	8022ab8 <__assert_func>
            dir->count -= 1;
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	8a9b      	ldrh	r3, [r3, #20]
 800feee:	3b01      	subs	r3, #1
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800fef6:	2301      	movs	r3, #1
 800fef8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800fefc:	e036      	b.n	800ff6c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800fefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff02:	00db      	lsls	r3, r3, #3
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	4413      	add	r3, r2
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fd fcd0 	bl	800d8b0 <lfs_tag_type1>
 800ff10:	4603      	mov	r3, r0
 800ff12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ff16:	d129      	bne.n	800ff6c <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800ff18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff1c:	00db      	lsls	r3, r3, #3
 800ff1e:	687a      	ldr	r2, [r7, #4]
 800ff20:	4413      	add	r3, r2
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800ff2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff2e:	00db      	lsls	r3, r3, #3
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	4413      	add	r3, r2
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	685a      	ldr	r2, [r3, #4]
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800ff3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff40:	00db      	lsls	r3, r3, #3
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	4413      	add	r3, r2
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fd fcd1 	bl	800d8f0 <lfs_tag_chunk>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	f003 0301 	and.w	r3, r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	bf14      	ite	ne
 800ff58:	2301      	movne	r3, #1
 800ff5a:	2300      	moveq	r3, #0
 800ff5c:	b2da      	uxtb	r2, r3
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	3318      	adds	r3, #24
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7fd fc4d 	bl	800d806 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800ff6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ff70:	3301      	adds	r3, #1
 800ff72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ff76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	db84      	blt.n	800fe8a <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800ff80:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d045      	beq.n	8010014 <lfs_dir_commit+0x258>
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	8a9b      	ldrh	r3, [r3, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d141      	bne.n	8010014 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	f107 0214 	add.w	r2, r7, #20
 800ff96:	4619      	mov	r1, r3
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f002 fbc9 	bl	8012730 <lfs_fs_pred>
 800ff9e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800ffa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d011      	beq.n	800ffce <lfs_dir_commit+0x212>
 800ffaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffae:	f113 0f02 	cmn.w	r3, #2
 800ffb2:	d00c      	beq.n	800ffce <lfs_dir_commit+0x212>
            *dir = olddir;
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	461d      	mov	r5, r3
 800ffb8:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800ffbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ffc0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ffc4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800ffc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffcc:	e2a4      	b.n	8010518 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800ffce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ffd2:	f113 0f02 	cmn.w	r3, #2
 800ffd6:	d01d      	beq.n	8010014 <lfs_dir_commit+0x258>
 800ffd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d019      	beq.n	8010014 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800ffe0:	f107 0314 	add.w	r3, r7, #20
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	68f8      	ldr	r0, [r7, #12]
 800ffea:	f7ff fb11 	bl	800f610 <lfs_dir_drop>
 800ffee:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800fff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00c      	beq.n	8010014 <lfs_dir_commit+0x258>
                *dir = olddir;
 800fffa:	68bb      	ldr	r3, [r7, #8]
 800fffc:	461d      	mov	r5, r3
 800fffe:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010006:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801000a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 801000e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010012:	e281      	b.n	8010518 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	7d9b      	ldrb	r3, [r3, #22]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d104      	bne.n	8010026 <lfs_dir_commit+0x26a>
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	8a9b      	ldrh	r3, [r3, #20]
 8010020:	2bfe      	cmp	r3, #254	; 0xfe
 8010022:	f240 8130 	bls.w	8010286 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 801002a:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8010030:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8010036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801003c:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8010042:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801004a:	2b00      	cmp	r3, #0
 801004c:	d004      	beq.n	8010058 <lfs_dir_commit+0x29c>
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010054:	3b08      	subs	r3, #8
 8010056:	e003      	b.n	8010060 <lfs_dir_commit+0x2a4>
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801005c:	69db      	ldr	r3, [r3, #28]
 801005e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8010060:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	3318      	adds	r3, #24
 8010066:	4618      	mov	r0, r3
 8010068:	f7fd fbe7 	bl	800d83a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	68da      	ldr	r2, [r3, #12]
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010078:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801007c:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 801007e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010082:	9308      	str	r3, [sp, #32]
 8010084:	4b45      	ldr	r3, [pc, #276]	; (801019c <lfs_dir_commit+0x3e0>)
 8010086:	9307      	str	r3, [sp, #28]
 8010088:	2300      	movs	r3, #0
 801008a:	9306      	str	r3, [sp, #24]
 801008c:	2300      	movs	r3, #0
 801008e:	9305      	str	r3, [sp, #20]
 8010090:	2300      	movs	r3, #0
 8010092:	9304      	str	r3, [sp, #16]
 8010094:	2300      	movs	r3, #0
 8010096:	9303      	str	r3, [sp, #12]
 8010098:	2300      	movs	r3, #0
 801009a:	9302      	str	r3, [sp, #8]
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	9301      	str	r3, [sp, #4]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	9300      	str	r3, [sp, #0]
 80100a4:	460b      	mov	r3, r1
 80100a6:	68b9      	ldr	r1, [r7, #8]
 80100a8:	68f8      	ldr	r0, [r7, #12]
 80100aa:	f7fe f975 	bl	800e398 <lfs_dir_traverse>
 80100ae:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	3318      	adds	r3, #24
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7fd fba5 	bl	800d806 <lfs_pair_fromle32>
        if (err) {
 80100bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d018      	beq.n	80100f6 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80100c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100c8:	f113 0f1c 	cmn.w	r3, #28
 80100cc:	f000 80dd 	beq.w	801028a <lfs_dir_commit+0x4ce>
 80100d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80100d8:	f000 80d7 	beq.w	801028a <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	461d      	mov	r5, r3
 80100e0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80100e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80100e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80100e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80100ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 80100f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80100f4:	e210      	b.n	8010518 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80100f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100fa:	2200      	movs	r2, #0
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	605a      	str	r2, [r3, #4]
 8010100:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010108:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801010c:	4611      	mov	r1, r2
 801010e:	4618      	mov	r0, r3
 8010110:	f7fd fc39 	bl	800d986 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801011a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801011e:	4611      	mov	r1, r2
 8010120:	4618      	mov	r0, r3
 8010122:	f7fd fc30 	bl	800d986 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f103 0248 	add.w	r2, r3, #72	; 0x48
 801012c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010130:	4611      	mov	r1, r2
 8010132:	4618      	mov	r0, r3
 8010134:	f7fd fc27 	bl	800d986 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8010138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 801013e:	f023 0303 	bic.w	r3, r3, #3
 8010142:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 8010144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010148:	4618      	mov	r0, r3
 801014a:	f7fd fc41 	bl	800d9d0 <lfs_gstate_iszero>
 801014e:	4603      	mov	r3, r0
 8010150:	f083 0301 	eor.w	r3, r3, #1
 8010154:	b2db      	uxtb	r3, r3
 8010156:	2b00      	cmp	r3, #0
 8010158:	d04c      	beq.n	80101f4 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 801015a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801015e:	461a      	mov	r2, r3
 8010160:	68b9      	ldr	r1, [r7, #8]
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	f7fe fdf8 	bl	800ed58 <lfs_dir_getgstate>
 8010168:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 801016c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010170:	2b00      	cmp	r3, #0
 8010172:	d015      	beq.n	80101a0 <lfs_dir_commit+0x3e4>
                *dir = olddir;
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	461d      	mov	r5, r3
 8010178:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 801017c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801017e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010180:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010184:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 8010188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801018c:	e1c4      	b.n	8010518 <lfs_dir_commit+0x75c>
 801018e:	bf00      	nop
 8010190:	080284fc 	.word	0x080284fc
 8010194:	0802bfb4 	.word	0x0802bfb4
 8010198:	080282b0 	.word	0x080282b0
 801019c:	0800f763 	.word	0x0800f763
            }

            lfs_gstate_tole32(&delta);
 80101a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fd fca5 	bl	800daf4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 80101aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101ae:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80101b2:	4aba      	ldr	r2, [pc, #744]	; (801049c <lfs_dir_commit+0x6e0>)
 80101b4:	68f8      	ldr	r0, [r7, #12]
 80101b6:	f7fe fff5 	bl	800f1a4 <lfs_dir_commitattr>
 80101ba:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 80101be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d016      	beq.n	80101f4 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80101c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101ca:	f113 0f1c 	cmn.w	r3, #28
 80101ce:	d05e      	beq.n	801028e <lfs_dir_commit+0x4d2>
 80101d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80101d8:	d059      	beq.n	801028e <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 80101da:	68bb      	ldr	r3, [r7, #8]
 80101dc:	461d      	mov	r5, r3
 80101de:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80101e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80101e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80101e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80101ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 80101ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101f2:	e191      	b.n	8010518 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 80101f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80101f8:	4619      	mov	r1, r3
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	f7ff f852 	bl	800f2a4 <lfs_dir_commitcrc>
 8010200:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 8010204:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010208:	2b00      	cmp	r3, #0
 801020a:	d016      	beq.n	801023a <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 801020c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010210:	f113 0f1c 	cmn.w	r3, #28
 8010214:	d03d      	beq.n	8010292 <lfs_dir_commit+0x4d6>
 8010216:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801021a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801021e:	d038      	beq.n	8010292 <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	461d      	mov	r5, r3
 8010224:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010228:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801022a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801022c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010230:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 8010234:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010238:	e16e      	b.n	8010518 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 801023a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010240:	6992      	ldr	r2, [r2, #24]
 8010242:	fbb3 f1f2 	udiv	r1, r3, r2
 8010246:	fb01 f202 	mul.w	r2, r1, r2
 801024a:	1a9b      	subs	r3, r3, r2
 801024c:	2b00      	cmp	r3, #0
 801024e:	d006      	beq.n	801025e <lfs_dir_commit+0x4a2>
 8010250:	4b93      	ldr	r3, [pc, #588]	; (80104a0 <lfs_dir_commit+0x6e4>)
 8010252:	4a94      	ldr	r2, [pc, #592]	; (80104a4 <lfs_dir_commit+0x6e8>)
 8010254:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 8010258:	4893      	ldr	r0, [pc, #588]	; (80104a8 <lfs_dir_commit+0x6ec>)
 801025a:	f012 fc2d 	bl	8022ab8 <__assert_func>
        dir->off = commit.off;
 801025e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8010264:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	68fa      	ldr	r2, [r7, #12]
 801026e:	333c      	adds	r3, #60	; 0x3c
 8010270:	3230      	adds	r2, #48	; 0x30
 8010272:	ca07      	ldmia	r2, {r0, r1, r2}
 8010274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	3348      	adds	r3, #72	; 0x48
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
 8010280:	605a      	str	r2, [r3, #4]
 8010282:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 8010284:	e02c      	b.n	80102e0 <lfs_dir_commit+0x524>
    } else {
compact:
 8010286:	bf00      	nop
 8010288:	e004      	b.n	8010294 <lfs_dir_commit+0x4d8>
                goto compact;
 801028a:	bf00      	nop
 801028c:	e002      	b.n	8010294 <lfs_dir_commit+0x4d8>
                    goto compact;
 801028e:	bf00      	nop
 8010290:	e000      	b.n	8010294 <lfs_dir_commit+0x4d8>
                goto compact;
 8010292:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	3310      	adds	r3, #16
 8010298:	4619      	mov	r1, r3
 801029a:	68f8      	ldr	r0, [r7, #12]
 801029c:	f7fc fee4 	bl	800d068 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 80102a0:	68bb      	ldr	r3, [r7, #8]
 80102a2:	8a9b      	ldrh	r3, [r3, #20]
 80102a4:	9302      	str	r3, [sp, #8]
 80102a6:	2300      	movs	r3, #0
 80102a8:	9301      	str	r3, [sp, #4]
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	9300      	str	r3, [sp, #0]
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	687a      	ldr	r2, [r7, #4]
 80102b2:	68b9      	ldr	r1, [r7, #8]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f7ff fa69 	bl	800f78c <lfs_dir_compact>
 80102ba:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 80102be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d00c      	beq.n	80102e0 <lfs_dir_commit+0x524>
            *dir = olddir;
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	461d      	mov	r5, r3
 80102ca:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80102ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80102d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80102d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80102d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 80102da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102de:	e11b      	b.n	8010518 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80102e8:	e0c1      	b.n	801046e <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 80102ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102ee:	3308      	adds	r3, #8
 80102f0:	68ba      	ldr	r2, [r7, #8]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	f000 80b6 	beq.w	8010464 <lfs_dir_commit+0x6a8>
 80102f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80102fc:	3308      	adds	r3, #8
 80102fe:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f7fd fa27 	bl	800d758 <lfs_pair_cmp>
 801030a:	4603      	mov	r3, r0
 801030c:	2b00      	cmp	r3, #0
 801030e:	f040 80a9 	bne.w	8010464 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 8010312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010316:	68ba      	ldr	r2, [r7, #8]
 8010318:	f103 0408 	add.w	r4, r3, #8
 801031c:	4615      	mov	r5, r2
 801031e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010322:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 801032a:	2300      	movs	r3, #0
 801032c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010330:	e092      	b.n	8010458 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010332:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	4413      	add	r3, r2
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4618      	mov	r0, r3
 8010340:	f7fd fac6 	bl	800d8d0 <lfs_tag_type3>
 8010344:	4603      	mov	r3, r0
 8010346:	461a      	mov	r2, r3
 8010348:	f240 43ff 	movw	r3, #1279	; 0x4ff
 801034c:	429a      	cmp	r2, r3
 801034e:	d119      	bne.n	8010384 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 8010350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010354:	889c      	ldrh	r4, [r3, #4]
 8010356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801035a:	00db      	lsls	r3, r3, #3
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	4413      	add	r3, r2
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4618      	mov	r0, r3
 8010364:	f7fd fade 	bl	800d924 <lfs_tag_id>
 8010368:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 801036a:	429c      	cmp	r4, r3
 801036c:	d10a      	bne.n	8010384 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 801036e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010376:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 8010378:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801037c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010380:	60da      	str	r2, [r3, #12]
 8010382:	e064      	b.n	801044e <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010384:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010388:	00db      	lsls	r3, r3, #3
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	4413      	add	r3, r2
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4618      	mov	r0, r3
 8010392:	f7fd fa9d 	bl	800d8d0 <lfs_tag_type3>
 8010396:	4603      	mov	r3, r0
 8010398:	461a      	mov	r2, r3
 801039a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 801039e:	429a      	cmp	r2, r3
 80103a0:	d123      	bne.n	80103ea <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 80103a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103a6:	889c      	ldrh	r4, [r3, #4]
 80103a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103ac:	00db      	lsls	r3, r3, #3
 80103ae:	687a      	ldr	r2, [r7, #4]
 80103b0:	4413      	add	r3, r2
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7fd fab5 	bl	800d924 <lfs_tag_id>
 80103ba:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80103bc:	429c      	cmp	r4, r3
 80103be:	d914      	bls.n	80103ea <lfs_dir_commit+0x62e>
                    d->id -= 1;
 80103c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103c4:	889b      	ldrh	r3, [r3, #4]
 80103c6:	3b01      	subs	r3, #1
 80103c8:	b29a      	uxth	r2, r3
 80103ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103ce:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 80103d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103d4:	799b      	ldrb	r3, [r3, #6]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d139      	bne.n	801044e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 80103da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103e0:	1e5a      	subs	r2, r3, #1
 80103e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80103e6:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 80103e8:	e031      	b.n	801044e <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80103ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103ee:	00db      	lsls	r3, r3, #3
 80103f0:	687a      	ldr	r2, [r7, #4]
 80103f2:	4413      	add	r3, r2
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f7fd fa6a 	bl	800d8d0 <lfs_tag_type3>
 80103fc:	4603      	mov	r3, r0
 80103fe:	461a      	mov	r2, r3
 8010400:	f240 4301 	movw	r3, #1025	; 0x401
 8010404:	429a      	cmp	r2, r3
 8010406:	d122      	bne.n	801044e <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 8010408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801040c:	889c      	ldrh	r4, [r3, #4]
 801040e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010412:	00db      	lsls	r3, r3, #3
 8010414:	687a      	ldr	r2, [r7, #4]
 8010416:	4413      	add	r3, r2
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4618      	mov	r0, r3
 801041c:	f7fd fa82 	bl	800d924 <lfs_tag_id>
 8010420:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010422:	429c      	cmp	r4, r3
 8010424:	d313      	bcc.n	801044e <lfs_dir_commit+0x692>
                    d->id += 1;
 8010426:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801042a:	889b      	ldrh	r3, [r3, #4]
 801042c:	3301      	adds	r3, #1
 801042e:	b29a      	uxth	r2, r3
 8010430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010434:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 8010436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801043a:	799b      	ldrb	r3, [r3, #6]
 801043c:	2b02      	cmp	r3, #2
 801043e:	d106      	bne.n	801044e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 8010440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010446:	1c5a      	adds	r2, r3, #1
 8010448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801044c:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 801044e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010452:	3301      	adds	r3, #1
 8010454:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010458:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	429a      	cmp	r2, r3
 8010460:	f6ff af67 	blt.w	8010332 <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010464:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801046e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010472:	2b00      	cmp	r3, #0
 8010474:	f47f af39 	bne.w	80102ea <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801047c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010480:	e045      	b.n	801050e <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 8010482:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010486:	3308      	adds	r3, #8
 8010488:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801048c:	4611      	mov	r1, r2
 801048e:	4618      	mov	r0, r3
 8010490:	f7fd f962 	bl	800d758 <lfs_pair_cmp>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d134      	bne.n	8010504 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 801049a:	e026      	b.n	80104ea <lfs_dir_commit+0x72e>
 801049c:	7ffffc0c 	.word	0x7ffffc0c
 80104a0:	0802843c 	.word	0x0802843c
 80104a4:	0802bfb4 	.word	0x0802bfb4
 80104a8:	080282b0 	.word	0x080282b0
                // we split and id is on tail now
                d->id -= d->m.count;
 80104ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104b0:	889a      	ldrh	r2, [r3, #4]
 80104b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104b6:	8b9b      	ldrh	r3, [r3, #28]
 80104b8:	1ad3      	subs	r3, r2, r3
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104c0:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80104c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104c6:	f103 0108 	add.w	r1, r3, #8
 80104ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104ce:	3320      	adds	r3, #32
 80104d0:	461a      	mov	r2, r3
 80104d2:	68f8      	ldr	r0, [r7, #12]
 80104d4:	f7fe fc24 	bl	800ed20 <lfs_dir_fetch>
 80104d8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 80104dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d002      	beq.n	80104ea <lfs_dir_commit+0x72e>
                    return err;
 80104e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80104e8:	e016      	b.n	8010518 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 80104ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104ee:	889a      	ldrh	r2, [r3, #4]
 80104f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104f4:	8b9b      	ldrh	r3, [r3, #28]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d304      	bcc.n	8010504 <lfs_dir_commit+0x748>
 80104fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80104fe:	7fdb      	ldrb	r3, [r3, #31]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d1d3      	bne.n	80104ac <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801050e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d1b5      	bne.n	8010482 <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	37b8      	adds	r7, #184	; 0xb8
 801051c:	46bd      	mov	sp, r7
 801051e:	bdb0      	pop	{r4, r5, r7, pc}

08010520 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8010520:	b5b0      	push	{r4, r5, r7, lr}
 8010522:	b0b8      	sub	sp, #224	; 0xe0
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f002 fd2a 	bl	8012f84 <lfs_fs_forceconsistency>
 8010530:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8010534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <lfs_rawmkdir+0x22>
        return err;
 801053c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010540:	e128      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 801054a:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 801054e:	463a      	mov	r2, r7
 8010550:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010554:	f103 0108 	add.w	r1, r3, #8
 8010558:	4603      	mov	r3, r0
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7fe fcf2 	bl	800ef44 <lfs_dir_find>
 8010560:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8010564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010568:	f113 0f02 	cmn.w	r3, #2
 801056c:	d105      	bne.n	801057a <lfs_rawmkdir+0x5a>
 801056e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8010572:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010576:	4293      	cmp	r3, r2
 8010578:	d109      	bne.n	801058e <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 801057a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801057e:	2b00      	cmp	r3, #0
 8010580:	da02      	bge.n	8010588 <lfs_rawmkdir+0x68>
 8010582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010586:	e105      	b.n	8010794 <lfs_rawmkdir+0x274>
 8010588:	f06f 0310 	mvn.w	r3, #16
 801058c:	e102      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	4618      	mov	r0, r3
 8010592:	f7ef fe7d 	bl	8000290 <strlen>
 8010596:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801059e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d902      	bls.n	80105ac <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80105a6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80105aa:	e0f3      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7fd fbe9 	bl	800dd84 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80105b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80105b6:	4619      	mov	r1, r3
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7fe ffaf 	bl	800f51c <lfs_dir_alloc>
 80105be:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80105c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <lfs_rawmkdir+0xb0>
        return err;
 80105ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80105ce:	e0e1      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80105d0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80105d4:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80105d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80105da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80105dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80105e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 80105e4:	e012      	b.n	801060c <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 80105e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80105ea:	f103 0218 	add.w	r2, r3, #24
 80105ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80105f2:	4619      	mov	r1, r3
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7fe fb93 	bl	800ed20 <lfs_dir_fetch>
 80105fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80105fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010602:	2b00      	cmp	r3, #0
 8010604:	d002      	beq.n	801060c <lfs_rawmkdir+0xec>
            return err;
 8010606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801060a:	e0c3      	b.n	8010794 <lfs_rawmkdir+0x274>
    while (pred.split) {
 801060c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e8      	bne.n	80105e6 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8010614:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010618:	3318      	adds	r3, #24
 801061a:	4618      	mov	r0, r3
 801061c:	f7fd f90d 	bl	800d83a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8010620:	4b5e      	ldr	r3, [pc, #376]	; (801079c <lfs_rawmkdir+0x27c>)
 8010622:	667b      	str	r3, [r7, #100]	; 0x64
 8010624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010628:	3318      	adds	r3, #24
 801062a:	66bb      	str	r3, [r7, #104]	; 0x68
 801062c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010630:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8010634:	2301      	movs	r3, #1
 8010636:	6878      	ldr	r0, [r7, #4]
 8010638:	f7ff fbc0 	bl	800fdbc <lfs_dir_commit>
 801063c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8010640:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010644:	3318      	adds	r3, #24
 8010646:	4618      	mov	r0, r3
 8010648:	f7fd f8dd 	bl	800d806 <lfs_pair_fromle32>
    if (err) {
 801064c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <lfs_rawmkdir+0x13a>
        return err;
 8010654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010658:	e09c      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 801065a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801065e:	2b00      	cmp	r3, #0
 8010660:	d04c      	beq.n	80106fc <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8010662:	2101      	movs	r1, #1
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f002 faab 	bl	8012bc0 <lfs_fs_preporphans>
 801066a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 801066e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010672:	2b00      	cmp	r3, #0
 8010674:	d002      	beq.n	801067c <lfs_rawmkdir+0x15c>
            return err;
 8010676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801067a:	e08b      	b.n	8010794 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801068e:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8010690:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010694:	4618      	mov	r0, r3
 8010696:	f7fd f8d0 	bl	800d83a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 801069a:	4b40      	ldr	r3, [pc, #256]	; (801079c <lfs_rawmkdir+0x27c>)
 801069c:	617b      	str	r3, [r7, #20]
 801069e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80106a2:	61bb      	str	r3, [r7, #24]
 80106a4:	f107 0214 	add.w	r2, r7, #20
 80106a8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80106ac:	2301      	movs	r3, #1
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7ff fb84 	bl	800fdbc <lfs_dir_commit>
 80106b4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80106b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80106bc:	4618      	mov	r0, r3
 80106be:	f7fd f8a2 	bl	800d806 <lfs_pair_fromle32>
        if (err) {
 80106c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d006      	beq.n	80106d8 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 80106ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80106d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106d6:	e05d      	b.n	8010794 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 80106d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 80106e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f002 fa6b 	bl	8012bc0 <lfs_fs_preporphans>
 80106ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80106ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d002      	beq.n	80106fc <lfs_rawmkdir+0x1dc>
            return err;
 80106f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80106fa:	e04b      	b.n	8010794 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 80106fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010700:	4618      	mov	r0, r3
 8010702:	f7fd f89a 	bl	800d83a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8010706:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801070a:	029b      	lsls	r3, r3, #10
 801070c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010716:	2300      	movs	r3, #0
 8010718:	643b      	str	r3, [r7, #64]	; 0x40
 801071a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801071e:	029a      	lsls	r2, r3, #10
 8010720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010724:	4313      	orrs	r3, r2
 8010726:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801072a:	647b      	str	r3, [r7, #68]	; 0x44
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010730:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8010734:	029b      	lsls	r3, r3, #10
 8010736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801073a:	f043 0308 	orr.w	r3, r3, #8
 801073e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010740:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010744:	653b      	str	r3, [r7, #80]	; 0x50
 8010746:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801074a:	f083 0301 	eor.w	r3, r3, #1
 801074e:	b2db      	uxtb	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <lfs_rawmkdir+0x238>
 8010754:	4b11      	ldr	r3, [pc, #68]	; (801079c <lfs_rawmkdir+0x27c>)
 8010756:	e000      	b.n	801075a <lfs_rawmkdir+0x23a>
 8010758:	2300      	movs	r3, #0
 801075a:	657b      	str	r3, [r7, #84]	; 0x54
 801075c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010760:	65bb      	str	r3, [r7, #88]	; 0x58
 8010762:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010766:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801076a:	f103 0108 	add.w	r1, r3, #8
 801076e:	2304      	movs	r3, #4
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f7ff fb23 	bl	800fdbc <lfs_dir_commit>
 8010776:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 801077a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801077e:	4618      	mov	r0, r3
 8010780:	f7fd f841 	bl	800d806 <lfs_pair_fromle32>
    if (err) {
 8010784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <lfs_rawmkdir+0x272>
        return err;
 801078c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010790:	e000      	b.n	8010794 <lfs_rawmkdir+0x274>
    }

    return 0;
 8010792:	2300      	movs	r3, #0
}
 8010794:	4618      	mov	r0, r3
 8010796:	37e0      	adds	r7, #224	; 0xe0
 8010798:	46bd      	mov	sp, r7
 801079a:	bdb0      	pop	{r4, r5, r7, pc}
 801079c:	600ffc08 	.word	0x600ffc08

080107a0 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80107a0:	b590      	push	{r4, r7, lr}
 80107a2:	b08d      	sub	sp, #52	; 0x34
 80107a4:	af02      	add	r7, sp, #8
 80107a6:	60f8      	str	r0, [r7, #12]
 80107a8:	60b9      	str	r1, [r7, #8]
 80107aa:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 80107ac:	68bb      	ldr	r3, [r7, #8]
 80107ae:	f103 0108 	add.w	r1, r3, #8
 80107b2:	1d3a      	adds	r2, r7, #4
 80107b4:	2300      	movs	r3, #0
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f7fe fbc4 	bl	800ef44 <lfs_dir_find>
 80107bc:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 80107be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da01      	bge.n	80107c8 <lfs_dir_rawopen+0x28>
        return tag;
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	e05e      	b.n	8010886 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80107c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fd f880 	bl	800d8d0 <lfs_tag_type3>
 80107d0:	4603      	mov	r3, r0
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	d002      	beq.n	80107dc <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 80107d6:	f06f 0313 	mvn.w	r3, #19
 80107da:	e054      	b.n	8010886 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80107dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107de:	4618      	mov	r0, r3
 80107e0:	f7fd f8a0 	bl	800d924 <lfs_tag_id>
 80107e4:	4603      	mov	r3, r0
 80107e6:	461a      	mov	r2, r3
 80107e8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80107ec:	429a      	cmp	r2, r3
 80107ee:	d106      	bne.n	80107fe <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6a1b      	ldr	r3, [r3, #32]
 80107f4:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107fa:	61bb      	str	r3, [r7, #24]
 80107fc:	e01f      	b.n	801083e <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	4618      	mov	r0, r3
 8010808:	f7fd f88c 	bl	800d924 <lfs_tag_id>
 801080c:	4603      	mov	r3, r0
 801080e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010814:	f043 0308 	orr.w	r3, r3, #8
 8010818:	f107 0214 	add.w	r2, r7, #20
 801081c:	9200      	str	r2, [sp, #0]
 801081e:	4a1c      	ldr	r2, [pc, #112]	; (8010890 <lfs_dir_rawopen+0xf0>)
 8010820:	4621      	mov	r1, r4
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7fd fc68 	bl	800e0f8 <lfs_dir_get>
 8010828:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 801082a:	6a3b      	ldr	r3, [r7, #32]
 801082c:	2b00      	cmp	r3, #0
 801082e:	da01      	bge.n	8010834 <lfs_dir_rawopen+0x94>
            return res;
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	e028      	b.n	8010886 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8010834:	f107 0314 	add.w	r3, r7, #20
 8010838:	4618      	mov	r0, r3
 801083a:	f7fc ffe4 	bl	800d806 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	3308      	adds	r3, #8
 8010842:	f107 0214 	add.w	r2, r7, #20
 8010846:	4619      	mov	r1, r3
 8010848:	68f8      	ldr	r0, [r7, #12]
 801084a:	f7fe fa69 	bl	800ed20 <lfs_dir_fetch>
 801084e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <lfs_dir_rawopen+0xba>
        return err;
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	e015      	b.n	8010886 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	689a      	ldr	r2, [r3, #8]
 801085e:	68bb      	ldr	r3, [r7, #8]
 8010860:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	68da      	ldr	r2, [r3, #12]
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	2200      	movs	r2, #0
 801086e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	2200      	movs	r2, #0
 8010874:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2202      	movs	r2, #2
 801087a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801087c:	68b9      	ldr	r1, [r7, #8]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7fd fa37 	bl	800dcf2 <lfs_mlist_append>

    return 0;
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	372c      	adds	r7, #44	; 0x2c
 801088a:	46bd      	mov	sp, r7
 801088c:	bd90      	pop	{r4, r7, pc}
 801088e:	bf00      	nop
 8010890:	700ffc00 	.word	0x700ffc00

08010894 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f7fd fa04 	bl	800dcae <lfs_mlist_remove>

    return 0;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3708      	adds	r7, #8
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b086      	sub	sp, #24
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 80108bc:	f44f 7284 	mov.w	r2, #264	; 0x108
 80108c0:	2100      	movs	r1, #0
 80108c2:	6878      	ldr	r0, [r7, #4]
 80108c4:	f013 f994 	bl	8023bf0 <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d110      	bne.n	80108f2 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2202      	movs	r2, #2
 80108d4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	3308      	adds	r3, #8
 80108da:	4935      	ldr	r1, [pc, #212]	; (80109b0 <lfs_dir_rawread+0x100>)
 80108dc:	461a      	mov	r2, r3
 80108de:	460b      	mov	r3, r1
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108e8:	1c5a      	adds	r2, r3, #1
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80108ee:	2301      	movs	r3, #1
 80108f0:	e05a      	b.n	80109a8 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d110      	bne.n	801091c <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2202      	movs	r2, #2
 80108fe:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	3308      	adds	r3, #8
 8010904:	4a2b      	ldr	r2, [pc, #172]	; (80109b4 <lfs_dir_rawread+0x104>)
 8010906:	8811      	ldrh	r1, [r2, #0]
 8010908:	7892      	ldrb	r2, [r2, #2]
 801090a:	8019      	strh	r1, [r3, #0]
 801090c:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010912:	1c5a      	adds	r2, r3, #1
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8010918:	2301      	movs	r3, #1
 801091a:	e045      	b.n	80109a8 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	889a      	ldrh	r2, [r3, #4]
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	8b9b      	ldrh	r3, [r3, #28]
 8010924:	429a      	cmp	r2, r3
 8010926:	d11a      	bne.n	801095e <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	7fdb      	ldrb	r3, [r3, #31]
 801092c:	f083 0301 	eor.w	r3, r3, #1
 8010930:	b2db      	uxtb	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	d001      	beq.n	801093a <lfs_dir_rawread+0x8a>
                return false;
 8010936:	2300      	movs	r3, #0
 8010938:	e036      	b.n	80109a8 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	f103 0108 	add.w	r1, r3, #8
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	3320      	adds	r3, #32
 8010944:	461a      	mov	r2, r3
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	f7fe f9ea 	bl	800ed20 <lfs_dir_fetch>
 801094c:	6178      	str	r0, [r7, #20]
            if (err) {
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <lfs_dir_rawread+0xa8>
                return err;
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	e027      	b.n	80109a8 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2200      	movs	r2, #0
 801095c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	f103 0108 	add.w	r1, r3, #8
 8010964:	68bb      	ldr	r3, [r7, #8]
 8010966:	889a      	ldrh	r2, [r3, #4]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f7fe fa26 	bl	800edbc <lfs_dir_getinfo>
 8010970:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8010972:	693b      	ldr	r3, [r7, #16]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d005      	beq.n	8010984 <lfs_dir_rawread+0xd4>
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	f113 0f02 	cmn.w	r3, #2
 801097e:	d001      	beq.n	8010984 <lfs_dir_rawread+0xd4>
            return err;
 8010980:	693b      	ldr	r3, [r7, #16]
 8010982:	e011      	b.n	80109a8 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	889b      	ldrh	r3, [r3, #4]
 8010988:	3301      	adds	r3, #1
 801098a:	b29a      	uxth	r2, r3
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	f113 0f02 	cmn.w	r3, #2
 8010996:	d100      	bne.n	801099a <lfs_dir_rawread+0xea>
    while (true) {
 8010998:	e7c0      	b.n	801091c <lfs_dir_rawread+0x6c>
            break;
 801099a:	bf00      	nop
        }
    }

    dir->pos += 1;
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109a0:	1c5a      	adds	r2, r3, #1
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 80109a6:	2301      	movs	r3, #1
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3718      	adds	r7, #24
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	08028404 	.word	0x08028404
 80109b4:	08028408 	.word	0x08028408

080109b8 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b087      	sub	sp, #28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109cc:	69db      	ldr	r3, [r3, #28]
 80109ce:	3b08      	subs	r3, #8
 80109d0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80109da:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d101      	bne.n	80109e6 <lfs_ctz_index+0x2e>
        return 0;
 80109e2:	2300      	movs	r3, #0
 80109e4:	e01c      	b.n	8010a20 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	3b01      	subs	r3, #1
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7fc fadc 	bl	800cfa8 <lfs_popc>
 80109f0:	4603      	mov	r3, r0
 80109f2:	3302      	adds	r3, #2
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	697a      	ldr	r2, [r7, #20]
 80109f8:	1ad2      	subs	r2, r2, r3
 80109fa:	693b      	ldr	r3, [r7, #16]
 80109fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a00:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	fb02 f303 	mul.w	r3, r2, r3
 8010a0a:	697a      	ldr	r2, [r7, #20]
 8010a0c:	1ad4      	subs	r4, r2, r3
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f7fc faca 	bl	800cfa8 <lfs_popc>
 8010a14:	4603      	mov	r3, r0
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	1ae2      	subs	r2, r4, r3
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	601a      	str	r2, [r3, #0]
    return i;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	371c      	adds	r7, #28
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd90      	pop	{r4, r7, pc}

08010a28 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8010a28:	b590      	push	{r4, r7, lr}
 8010a2a:	b08f      	sub	sp, #60	; 0x3c
 8010a2c:	af04      	add	r7, sp, #16
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
 8010a34:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8010a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d108      	bne.n	8010a4e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8010a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a42:	601a      	str	r2, [r3, #0]
        *off = 0;
 8010a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a46:	2200      	movs	r2, #0
 8010a48:	601a      	str	r2, [r3, #0]
        return 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	e053      	b.n	8010af6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8010a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a50:	3b01      	subs	r3, #1
 8010a52:	617b      	str	r3, [r7, #20]
 8010a54:	f107 0314 	add.w	r3, r7, #20
 8010a58:	4619      	mov	r1, r3
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f7ff ffac 	bl	80109b8 <lfs_ctz_index>
 8010a60:	4603      	mov	r3, r0
 8010a62:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8010a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010a68:	4619      	mov	r1, r3
 8010a6a:	68f8      	ldr	r0, [r7, #12]
 8010a6c:	f7ff ffa4 	bl	80109b8 <lfs_ctz_index>
 8010a70:	4603      	mov	r3, r0
 8010a72:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8010a74:	e034      	b.n	8010ae0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8010a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fc fa73 	bl	800cf6a <lfs_npw2>
 8010a84:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8010a86:	1e5c      	subs	r4, r3, #1
 8010a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a8a:	f7fc fa7e 	bl	800cf8a <lfs_ctz>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	4619      	mov	r1, r3
 8010a92:	4620      	mov	r0, r4
 8010a94:	f7fc fa32 	bl	800cefc <lfs_min>
 8010a98:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	0092      	lsls	r2, r2, #2
 8010aa0:	2104      	movs	r1, #4
 8010aa2:	9103      	str	r1, [sp, #12]
 8010aa4:	4639      	mov	r1, r7
 8010aa6:	9102      	str	r1, [sp, #8]
 8010aa8:	9201      	str	r2, [sp, #4]
 8010aaa:	9300      	str	r3, [sp, #0]
 8010aac:	2304      	movs	r3, #4
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	68b9      	ldr	r1, [r7, #8]
 8010ab2:	68f8      	ldr	r0, [r7, #12]
 8010ab4:	f7fc fafe 	bl	800d0b4 <lfs_bd_read>
 8010ab8:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fc fa8d 	bl	800cfdc <lfs_fromle32>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	603b      	str	r3, [r7, #0]
        if (err) {
 8010ac6:	69bb      	ldr	r3, [r7, #24]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <lfs_ctz_find+0xa8>
            return err;
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	e012      	b.n	8010af6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8010ad0:	2201      	movs	r2, #1
 8010ad2:	69fb      	ldr	r3, [r7, #28]
 8010ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ad8:	461a      	mov	r2, r3
 8010ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010adc:	1a9b      	subs	r3, r3, r2
 8010ade:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8010ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	429a      	cmp	r2, r3
 8010ae6:	d8c6      	bhi.n	8010a76 <lfs_ctz_find+0x4e>
    }

    *block = head;
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010aec:	601a      	str	r2, [r3, #0]
    *off = pos;
 8010aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010af2:	601a      	str	r2, [r3, #0]
    return 0;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	372c      	adds	r7, #44	; 0x2c
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd90      	pop	{r4, r7, pc}
	...

08010b00 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b092      	sub	sp, #72	; 0x48
 8010b04:	af04      	add	r7, sp, #16
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8010b0e:	f107 0320 	add.w	r3, r7, #32
 8010b12:	4619      	mov	r1, r3
 8010b14:	68f8      	ldr	r0, [r7, #12]
 8010b16:	f7fd f955 	bl	800ddc4 <lfs_alloc>
 8010b1a:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d001      	beq.n	8010b26 <lfs_ctz_extend+0x26>
            return err;
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	e0e9      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8010b26:	6a3b      	ldr	r3, [r7, #32]
 8010b28:	4619      	mov	r1, r3
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f7fc fdb4 	bl	800d698 <lfs_bd_erase>
 8010b30:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d006      	beq.n	8010b46 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8010b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010b3e:	f000 80cb 	beq.w	8010cd8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8010b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b44:	e0d9      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8010b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d107      	bne.n	8010b5c <lfs_ctz_extend+0x5c>
                *block = nblock;
 8010b4c:	6a3a      	ldr	r2, [r7, #32]
 8010b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010b50:	601a      	str	r2, [r3, #0]
                *off = 0;
 8010b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b54:	2200      	movs	r2, #0
 8010b56:	601a      	str	r2, [r3, #0]
                return 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	e0ce      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8010b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8010b62:	f107 031c 	add.w	r3, r7, #28
 8010b66:	4619      	mov	r1, r3
 8010b68:	68f8      	ldr	r0, [r7, #12]
 8010b6a:	f7ff ff25 	bl	80109b8 <lfs_ctz_index>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	3301      	adds	r3, #1
 8010b76:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010b7c:	69da      	ldr	r2, [r3, #28]
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d044      	beq.n	8010c0e <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8010b84:	2300      	movs	r3, #0
 8010b86:	637b      	str	r3, [r7, #52]	; 0x34
 8010b88:	e035      	b.n	8010bf6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	2301      	movs	r3, #1
 8010b92:	9303      	str	r3, [sp, #12]
 8010b94:	f107 0317 	add.w	r3, r7, #23
 8010b98:	9302      	str	r3, [sp, #8]
 8010b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b9c:	9301      	str	r3, [sp, #4]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	687a      	ldr	r2, [r7, #4]
 8010ba6:	2100      	movs	r1, #0
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f7fc fa83 	bl	800d0b4 <lfs_bd_read>
 8010bae:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8010bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d001      	beq.n	8010bba <lfs_ctz_extend+0xba>
                        return err;
 8010bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb8:	e09f      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	2201      	movs	r2, #1
 8010bbe:	9203      	str	r2, [sp, #12]
 8010bc0:	f107 0217 	add.w	r2, r7, #23
 8010bc4:	9202      	str	r2, [sp, #8]
 8010bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bc8:	9201      	str	r2, [sp, #4]
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	2301      	movs	r3, #1
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	68b9      	ldr	r1, [r7, #8]
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f7fc fcb4 	bl	800d540 <lfs_bd_prog>
 8010bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8010bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d007      	beq.n	8010bf0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8010be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010be6:	d101      	bne.n	8010bec <lfs_ctz_extend+0xec>
                            goto relocate;
 8010be8:	bf00      	nop
                    goto relocate;
 8010bea:	e075      	b.n	8010cd8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8010bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8010bee:	e084      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8010bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf2:	3301      	adds	r3, #1
 8010bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d3c5      	bcc.n	8010b8a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8010bfe:	6a3a      	ldr	r2, [r7, #32]
 8010c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c02:	601a      	str	r2, [r3, #0]
                *off = noff;
 8010c04:	69fa      	ldr	r2, [r7, #28]
 8010c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c08:	601a      	str	r2, [r3, #0]
                return 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	e075      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8010c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c10:	3301      	adds	r3, #1
 8010c12:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8010c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c16:	f7fc f9b8 	bl	800cf8a <lfs_ctz>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	3301      	adds	r3, #1
 8010c1e:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8010c24:	2300      	movs	r3, #0
 8010c26:	633b      	str	r3, [r7, #48]	; 0x30
 8010c28:	e049      	b.n	8010cbe <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fc f9e0 	bl	800cff2 <lfs_tole32>
 8010c32:	4603      	mov	r3, r0
 8010c34:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8010c36:	6a3b      	ldr	r3, [r7, #32]
 8010c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3a:	0092      	lsls	r2, r2, #2
 8010c3c:	2104      	movs	r1, #4
 8010c3e:	9103      	str	r1, [sp, #12]
 8010c40:	f107 0118 	add.w	r1, r7, #24
 8010c44:	9102      	str	r1, [sp, #8]
 8010c46:	9201      	str	r2, [sp, #4]
 8010c48:	9300      	str	r3, [sp, #0]
 8010c4a:	2301      	movs	r3, #1
 8010c4c:	687a      	ldr	r2, [r7, #4]
 8010c4e:	68b9      	ldr	r1, [r7, #8]
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	f7fc fc75 	bl	800d540 <lfs_bd_prog>
 8010c56:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fc f9be 	bl	800cfdc <lfs_fromle32>
 8010c60:	4603      	mov	r3, r0
 8010c62:	61bb      	str	r3, [r7, #24]
                if (err) {
 8010c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d005      	beq.n	8010c76 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010c70:	d034      	beq.n	8010cdc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8010c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c74:	e041      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d01b      	beq.n	8010cb8 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c84:	0092      	lsls	r2, r2, #2
 8010c86:	2104      	movs	r1, #4
 8010c88:	9103      	str	r1, [sp, #12]
 8010c8a:	f107 0118 	add.w	r1, r7, #24
 8010c8e:	9102      	str	r1, [sp, #8]
 8010c90:	9201      	str	r2, [sp, #4]
 8010c92:	9300      	str	r3, [sp, #0]
 8010c94:	2304      	movs	r3, #4
 8010c96:	687a      	ldr	r2, [r7, #4]
 8010c98:	2100      	movs	r1, #0
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f7fc fa0a 	bl	800d0b4 <lfs_bd_read>
 8010ca0:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8010ca2:	69bb      	ldr	r3, [r7, #24]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fc f999 	bl	800cfdc <lfs_fromle32>
 8010caa:	4603      	mov	r3, r0
 8010cac:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8010cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <lfs_ctz_extend+0x1b8>
                        return err;
 8010cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb6:	e020      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8010cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cba:	3301      	adds	r3, #1
 8010cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8010cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d3b1      	bcc.n	8010c2a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8010cc6:	6a3a      	ldr	r2, [r7, #32]
 8010cc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cca:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cce:	009a      	lsls	r2, r3, #2
 8010cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cd2:	601a      	str	r2, [r3, #0]
            return 0;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	e010      	b.n	8010cfa <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8010cd8:	bf00      	nop
 8010cda:	e000      	b.n	8010cde <lfs_ctz_extend+0x1de>
                        goto relocate;
 8010cdc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8010cde:	6a3b      	ldr	r3, [r7, #32]
 8010ce0:	4a08      	ldr	r2, [pc, #32]	; (8010d04 <lfs_ctz_extend+0x204>)
 8010ce2:	9200      	str	r2, [sp, #0]
 8010ce4:	f640 126a 	movw	r2, #2410	; 0x96a
 8010ce8:	4907      	ldr	r1, [pc, #28]	; (8010d08 <lfs_ctz_extend+0x208>)
 8010cea:	4808      	ldr	r0, [pc, #32]	; (8010d0c <lfs_ctz_extend+0x20c>)
 8010cec:	f012 fdba 	bl	8023864 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	68f8      	ldr	r0, [r7, #12]
 8010cf4:	f7fc f9b8 	bl	800d068 <lfs_cache_drop>
    while (true) {
 8010cf8:	e709      	b.n	8010b0e <lfs_ctz_extend+0xe>
    }
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3738      	adds	r7, #56	; 0x38
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	080283bc 	.word	0x080283bc
 8010d08:	080282b0 	.word	0x080282b0
 8010d0c:	08028464 	.word	0x08028464

08010d10 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b090      	sub	sp, #64	; 0x40
 8010d14:	af04      	add	r7, sp, #16
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
 8010d1c:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d101      	bne.n	8010d28 <lfs_ctz_traverse+0x18>
        return 0;
 8010d24:	2300      	movs	r3, #0
 8010d26:	e06b      	b.n	8010e00 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8010d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	61fb      	str	r3, [r7, #28]
 8010d2e:	f107 031c 	add.w	r3, r7, #28
 8010d32:	4619      	mov	r1, r3
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	f7ff fe3f 	bl	80109b8 <lfs_ctz_index>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8010d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010d44:	4798      	blx	r3
 8010d46:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8010d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <lfs_ctz_traverse+0x42>
            return err;
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d50:	e056      	b.n	8010e00 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d101      	bne.n	8010d5c <lfs_ctz_traverse+0x4c>
            return 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	e051      	b.n	8010e00 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	f003 0301 	and.w	r3, r3, #1
 8010d62:	f1c3 0302 	rsb	r3, r3, #2
 8010d66:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8010d68:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8010d6a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8010d6c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8010d6e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8010d70:	9303      	str	r3, [sp, #12]
 8010d72:	f107 0314 	add.w	r3, r7, #20
 8010d76:	9302      	str	r3, [sp, #8]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	9301      	str	r3, [sp, #4]
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	9300      	str	r3, [sp, #0]
 8010d80:	4613      	mov	r3, r2
 8010d82:	687a      	ldr	r2, [r7, #4]
 8010d84:	68b9      	ldr	r1, [r7, #8]
 8010d86:	68f8      	ldr	r0, [r7, #12]
 8010d88:	f7fc f994 	bl	800d0b4 <lfs_bd_read>
 8010d8c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fc f923 	bl	800cfdc <lfs_fromle32>
 8010d96:	4603      	mov	r3, r0
 8010d98:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8010d9a:	69bb      	ldr	r3, [r7, #24]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fc f91d 	bl	800cfdc <lfs_fromle32>
 8010da2:	4603      	mov	r3, r0
 8010da4:	61bb      	str	r3, [r7, #24]
        if (err) {
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d001      	beq.n	8010db0 <lfs_ctz_traverse+0xa0>
            return err;
 8010dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dae:	e027      	b.n	8010e00 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8010db0:	2300      	movs	r3, #0
 8010db2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010db4:	e012      	b.n	8010ddc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	009b      	lsls	r3, r3, #2
 8010dba:	3330      	adds	r3, #48	; 0x30
 8010dbc:	443b      	add	r3, r7
 8010dbe:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8010dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8010dc8:	4798      	blx	r3
 8010dca:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d001      	beq.n	8010dd6 <lfs_ctz_traverse+0xc6>
                return err;
 8010dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd4:	e014      	b.n	8010e00 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8010dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd8:	3301      	adds	r3, #1
 8010dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8010ddc:	6a3b      	ldr	r3, [r7, #32]
 8010dde:	3b01      	subs	r3, #1
 8010de0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010de2:	429a      	cmp	r2, r3
 8010de4:	dbe7      	blt.n	8010db6 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8010de6:	6a3b      	ldr	r3, [r7, #32]
 8010de8:	3b01      	subs	r3, #1
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	3330      	adds	r3, #48	; 0x30
 8010dee:	443b      	add	r3, r7
 8010df0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8010df4:	603b      	str	r3, [r7, #0]
        index -= count;
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfa:	1ad3      	subs	r3, r2, r3
 8010dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8010dfe:	e79e      	b.n	8010d3e <lfs_ctz_traverse+0x2e>
    }
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3730      	adds	r7, #48	; 0x30
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8010e08:	b5b0      	push	{r4, r5, r7, lr}
 8010e0a:	b09a      	sub	sp, #104	; 0x68
 8010e0c:	af02      	add	r7, sp, #8
 8010e0e:	60f8      	str	r0, [r7, #12]
 8010e10:	60b9      	str	r1, [r7, #8]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	f003 0302 	and.w	r3, r3, #2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d008      	beq.n	8010e32 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f002 f8af 	bl	8012f84 <lfs_fs_forceconsistency>
 8010e26:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8010e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d001      	beq.n	8010e32 <lfs_file_rawopencfg+0x2a>
            return err;
 8010e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e30:	e1a9      	b.n	8011186 <lfs_file_rawopencfg+0x37e>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010e36:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8010e38:	683a      	ldr	r2, [r7, #0]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	2200      	movs	r2, #0
 8010e42:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2200      	movs	r2, #0
 8010e48:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2200      	movs	r2, #0
 8010e4e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	f103 0108 	add.w	r1, r3, #8
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	3304      	adds	r3, #4
 8010e5a:	1d3a      	adds	r2, r7, #4
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	f7fe f871 	bl	800ef44 <lfs_dir_find>
 8010e62:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8010e64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	da0c      	bge.n	8010e84 <lfs_file_rawopencfg+0x7c>
 8010e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e6c:	f113 0f02 	cmn.w	r3, #2
 8010e70:	d105      	bne.n	8010e7e <lfs_file_rawopencfg+0x76>
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	889b      	ldrh	r3, [r3, #4]
 8010e76:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d102      	bne.n	8010e84 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8010e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e80:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8010e82:	e175      	b.n	8011170 <lfs_file_rawopencfg+0x368>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8010e84:	68bb      	ldr	r3, [r7, #8]
 8010e86:	2201      	movs	r2, #1
 8010e88:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8010e8a:	68b9      	ldr	r1, [r7, #8]
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f7fc ff30 	bl	800dcf2 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8010e92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e94:	f113 0f02 	cmn.w	r3, #2
 8010e98:	d148      	bne.n	8010f2c <lfs_file_rawopencfg+0x124>
        if (!(flags & LFS_O_CREAT)) {
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d103      	bne.n	8010eac <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8010ea4:	f06f 0301 	mvn.w	r3, #1
 8010ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8010eaa:	e161      	b.n	8011170 <lfs_file_rawopencfg+0x368>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	f7ef f9ee 	bl	8000290 <strlen>
 8010eb4:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d903      	bls.n	8010ec8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8010ec0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8010ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8010ec6:	e153      	b.n	8011170 <lfs_file_rawopencfg+0x368>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	f103 0108 	add.w	r1, r3, #8
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	889b      	ldrh	r3, [r3, #4]
 8010ed2:	029b      	lsls	r3, r3, #10
 8010ed4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ed8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ede:	2300      	movs	r3, #0
 8010ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	889b      	ldrh	r3, [r3, #4]
 8010ee6:	029a      	lsls	r2, r3, #10
 8010ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eea:	4313      	orrs	r3, r2
 8010eec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	889b      	ldrh	r3, [r3, #4]
 8010efa:	029b      	lsls	r3, r3, #10
 8010efc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010f06:	2300      	movs	r3, #0
 8010f08:	643b      	str	r3, [r7, #64]	; 0x40
 8010f0a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010f0e:	2303      	movs	r3, #3
 8010f10:	68f8      	ldr	r0, [r7, #12]
 8010f12:	f7fe ff53 	bl	800fdbc <lfs_dir_commit>
 8010f16:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
 8010f18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d003      	beq.n	8010f26 <lfs_file_rawopencfg+0x11e>
            err = LFS_ERR_NAMETOOLONG;
 8010f1e:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8010f22:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8010f24:	e124      	b.n	8011170 <lfs_file_rawopencfg+0x368>
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8010f26:	4b9a      	ldr	r3, [pc, #616]	; (8011190 <lfs_file_rawopencfg+0x388>)
 8010f28:	65bb      	str	r3, [r7, #88]	; 0x58
 8010f2a:	e044      	b.n	8010fb6 <lfs_file_rawopencfg+0x1ae>
    } else if (flags & LFS_O_EXCL) {
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d003      	beq.n	8010f3e <lfs_file_rawopencfg+0x136>
        err = LFS_ERR_EXIST;
 8010f36:	f06f 0310 	mvn.w	r3, #16
 8010f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8010f3c:	e118      	b.n	8011170 <lfs_file_rawopencfg+0x368>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8010f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fc fcc5 	bl	800d8d0 <lfs_tag_type3>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b01      	cmp	r3, #1
 8010f4a:	d003      	beq.n	8010f54 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_ISDIR;
 8010f4c:	f06f 0314 	mvn.w	r3, #20
 8010f50:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8010f52:	e10d      	b.n	8011170 <lfs_file_rawopencfg+0x368>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00e      	beq.n	8010f7c <lfs_file_rawopencfg+0x174>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	889b      	ldrh	r3, [r3, #4]
 8010f62:	029b      	lsls	r3, r3, #10
 8010f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f6c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	631a      	str	r2, [r3, #48]	; 0x30
 8010f7a:	e01c      	b.n	8010fb6 <lfs_file_rawopencfg+0x1ae>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	889b      	ldrh	r3, [r3, #4]
 8010f86:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010f88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010f8c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8010f90:	68ba      	ldr	r2, [r7, #8]
 8010f92:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8010f94:	9200      	str	r2, [sp, #0]
 8010f96:	4a7f      	ldr	r2, [pc, #508]	; (8011194 <lfs_file_rawopencfg+0x38c>)
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f7fd f8ad 	bl	800e0f8 <lfs_dir_get>
 8010f9e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8010fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	da02      	bge.n	8010fac <lfs_file_rawopencfg+0x1a4>
            err = tag;
 8010fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8010faa:	e0e1      	b.n	8011170 <lfs_file_rawopencfg+0x368>
        }
        lfs_ctz_fromle32(&file->ctz);
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	3328      	adds	r3, #40	; 0x28
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fc fdbf 	bl	800db34 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	657b      	str	r3, [r7, #84]	; 0x54
 8010fba:	e063      	b.n	8011084 <lfs_file_rawopencfg+0x27c>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc0:	f003 0301 	and.w	r3, r3, #1
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d03c      	beq.n	8011042 <lfs_file_rawopencfg+0x23a>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8010fce:	68bb      	ldr	r3, [r7, #8]
 8010fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fd2:	6859      	ldr	r1, [r3, #4]
 8010fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	009b      	lsls	r3, r3, #2
 8010fde:	440b      	add	r3, r1
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010fe6:	051a      	lsls	r2, r3, #20
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	889b      	ldrh	r3, [r3, #4]
 8010fec:	029b      	lsls	r3, r3, #10
 8010fee:	ea42 0103 	orr.w	r1, r2, r3
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ff6:	6858      	ldr	r0, [r3, #4]
 8010ff8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ffa:	4613      	mov	r3, r2
 8010ffc:	005b      	lsls	r3, r3, #1
 8010ffe:	4413      	add	r3, r2
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	4403      	add	r3, r0
 8011004:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011006:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801100e:	6859      	ldr	r1, [r3, #4]
 8011010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011012:	4613      	mov	r3, r2
 8011014:	005b      	lsls	r3, r3, #1
 8011016:	4413      	add	r3, r2
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4603      	mov	r3, r0
 8011022:	4a5d      	ldr	r2, [pc, #372]	; (8011198 <lfs_file_rawopencfg+0x390>)
 8011024:	4621      	mov	r1, r4
 8011026:	68f8      	ldr	r0, [r7, #12]
 8011028:	f7fd f866 	bl	800e0f8 <lfs_dir_get>
 801102c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 801102e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011030:	2b00      	cmp	r3, #0
 8011032:	da06      	bge.n	8011042 <lfs_file_rawopencfg+0x23a>
 8011034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011036:	f113 0f02 	cmn.w	r3, #2
 801103a:	d002      	beq.n	8011042 <lfs_file_rawopencfg+0x23a>
                err = res;
 801103c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801103e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011040:	e096      	b.n	8011170 <lfs_file_rawopencfg+0x368>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011046:	f003 0302 	and.w	r3, r3, #2
 801104a:	2b00      	cmp	r3, #0
 801104c:	d017      	beq.n	801107e <lfs_file_rawopencfg+0x276>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801104e:	68bb      	ldr	r3, [r7, #8]
 8011050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011052:	6859      	ldr	r1, [r3, #4]
 8011054:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011056:	4613      	mov	r3, r2
 8011058:	005b      	lsls	r3, r3, #1
 801105a:	4413      	add	r3, r2
 801105c:	009b      	lsls	r3, r3, #2
 801105e:	440b      	add	r3, r1
 8011060:	689a      	ldr	r2, [r3, #8]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011066:	429a      	cmp	r2, r3
 8011068:	d903      	bls.n	8011072 <lfs_file_rawopencfg+0x26a>
                err = LFS_ERR_NOSPC;
 801106a:	f06f 031b 	mvn.w	r3, #27
 801106e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011070:	e07e      	b.n	8011170 <lfs_file_rawopencfg+0x368>
            }

            file->flags |= LFS_F_DIRTY;
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801107e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011080:	3301      	adds	r3, #1
 8011082:	657b      	str	r3, [r7, #84]	; 0x54
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011088:	689b      	ldr	r3, [r3, #8]
 801108a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801108c:	429a      	cmp	r2, r3
 801108e:	d395      	bcc.n	8010fbc <lfs_file_rawopencfg+0x1b4>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d005      	beq.n	80110a6 <lfs_file_rawopencfg+0x29e>
        file->cache.buffer = file->cfg->buffer;
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80110a4:	e010      	b.n	80110c8 <lfs_file_rawopencfg+0x2c0>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80110aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ac:	4618      	mov	r0, r3
 80110ae:	f7fb ffc4 	bl	800d03a <lfs_malloc>
 80110b2:	4602      	mov	r2, r0
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d103      	bne.n	80110c8 <lfs_file_rawopencfg+0x2c0>
            err = LFS_ERR_NOMEM;
 80110c0:	f06f 030b 	mvn.w	r3, #11
 80110c4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80110c6:	e053      	b.n	8011170 <lfs_file_rawopencfg+0x368>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80110c8:	68bb      	ldr	r3, [r7, #8]
 80110ca:	3340      	adds	r3, #64	; 0x40
 80110cc:	4619      	mov	r1, r3
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f7fb ffd9 	bl	800d086 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80110d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fc fbfa 	bl	800d8d0 <lfs_tag_type3>
 80110dc:	4603      	mov	r3, r0
 80110de:	461a      	mov	r2, r3
 80110e0:	f240 2301 	movw	r3, #513	; 0x201
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d141      	bne.n	801116c <lfs_file_rawopencfg+0x364>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	f06f 0201 	mvn.w	r2, #1
 80110ee:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80110f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fc fc26 	bl	800d944 <lfs_tag_size>
 80110f8:	4602      	mov	r2, r0
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	2200      	movs	r2, #0
 8011116:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801111c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011126:	2b00      	cmp	r3, #0
 8011128:	d020      	beq.n	801116c <lfs_file_rawopencfg+0x364>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	889b      	ldrh	r3, [r3, #4]
 8011134:	029c      	lsls	r4, r3, #10
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801113a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 801113e:	4618      	mov	r0, r3
 8011140:	f7fb fedc 	bl	800cefc <lfs_min>
 8011144:	4603      	mov	r3, r0
 8011146:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011148:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011150:	9300      	str	r3, [sp, #0]
 8011152:	4613      	mov	r3, r2
 8011154:	4a0f      	ldr	r2, [pc, #60]	; (8011194 <lfs_file_rawopencfg+0x38c>)
 8011156:	4629      	mov	r1, r5
 8011158:	68f8      	ldr	r0, [r7, #12]
 801115a:	f7fc ffcd 	bl	800e0f8 <lfs_dir_get>
 801115e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8011160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011162:	2b00      	cmp	r3, #0
 8011164:	da02      	bge.n	801116c <lfs_file_rawopencfg+0x364>
                err = res;
 8011166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011168:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 801116a:	e001      	b.n	8011170 <lfs_file_rawopencfg+0x368>
            }
        }
    }

    return 0;
 801116c:	2300      	movs	r3, #0
 801116e:	e00a      	b.n	8011186 <lfs_file_rawopencfg+0x37e>

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011174:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 801117c:	68b9      	ldr	r1, [r7, #8]
 801117e:	68f8      	ldr	r0, [r7, #12]
 8011180:	f000 f824 	bl	80111cc <lfs_file_rawclose>
    return err;
 8011184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8011186:	4618      	mov	r0, r3
 8011188:	3760      	adds	r7, #96	; 0x60
 801118a:	46bd      	mov	sp, r7
 801118c:	bdb0      	pop	{r4, r5, r7, pc}
 801118e:	bf00      	nop
 8011190:	20100000 	.word	0x20100000
 8011194:	700ffc00 	.word	0x700ffc00
 8011198:	7ffffc00 	.word	0x7ffffc00

0801119c <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 801119c:	b580      	push	{r7, lr}
 801119e:	b088      	sub	sp, #32
 80111a0:	af02      	add	r7, sp, #8
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	607a      	str	r2, [r7, #4]
 80111a8:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 80111aa:	4b07      	ldr	r3, [pc, #28]	; (80111c8 <lfs_file_rawopen+0x2c>)
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	687a      	ldr	r2, [r7, #4]
 80111b2:	68b9      	ldr	r1, [r7, #8]
 80111b4:	68f8      	ldr	r0, [r7, #12]
 80111b6:	f7ff fe27 	bl	8010e08 <lfs_file_rawopencfg>
 80111ba:	6178      	str	r0, [r7, #20]
    return err;
 80111bc:	697b      	ldr	r3, [r7, #20]
}
 80111be:	4618      	mov	r0, r3
 80111c0:	3718      	adds	r7, #24
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	0802bfc4 	.word	0x0802bfc4

080111cc <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b084      	sub	sp, #16
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
 80111d4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f000 f9e5 	bl	80115a8 <lfs_file_rawsync>
 80111de:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80111e0:	6839      	ldr	r1, [r7, #0]
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f7fc fd63 	bl	800dcae <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d104      	bne.n	80111fc <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fb ff2b 	bl	800d052 <lfs_free>
    }

    return err;
 80111fc:	68fb      	ldr	r3, [r7, #12]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
	...

08011208 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011208:	b590      	push	{r4, r7, lr}
 801120a:	b08d      	sub	sp, #52	; 0x34
 801120c:	af06      	add	r7, sp, #24
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8011212:	f107 030c 	add.w	r3, r7, #12
 8011216:	4619      	mov	r1, r3
 8011218:	6878      	ldr	r0, [r7, #4]
 801121a:	f7fc fdd3 	bl	800ddc4 <lfs_alloc>
 801121e:	6138      	str	r0, [r7, #16]
        if (err) {
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d001      	beq.n	801122a <lfs_file_relocate+0x22>
            return err;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	e0bb      	b.n	80113a2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	4619      	mov	r1, r3
 801122e:	6878      	ldr	r0, [r7, #4]
 8011230:	f7fc fa32 	bl	800d698 <lfs_bd_erase>
 8011234:	6138      	str	r0, [r7, #16]
        if (err) {
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d006      	beq.n	801124a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011242:	f000 809b 	beq.w	801137c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	e0ab      	b.n	80113a2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 801124a:	2300      	movs	r3, #0
 801124c:	617b      	str	r3, [r7, #20]
 801124e:	e069      	b.n	8011324 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011258:	2b00      	cmp	r3, #0
 801125a:	d027      	beq.n	80112ac <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	f103 0008 	add.w	r0, r3, #8
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 801126c:	697b      	ldr	r3, [r7, #20]
 801126e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	889b      	ldrh	r3, [r3, #4]
 8011274:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8011276:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801127a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801127e:	2101      	movs	r1, #1
 8011280:	9105      	str	r1, [sp, #20]
 8011282:	f107 010b 	add.w	r1, r7, #11
 8011286:	9104      	str	r1, [sp, #16]
 8011288:	6979      	ldr	r1, [r7, #20]
 801128a:	9103      	str	r1, [sp, #12]
 801128c:	9302      	str	r3, [sp, #8]
 801128e:	4b47      	ldr	r3, [pc, #284]	; (80113ac <lfs_file_relocate+0x1a4>)
 8011290:	9301      	str	r3, [sp, #4]
 8011292:	9200      	str	r2, [sp, #0]
 8011294:	4623      	mov	r3, r4
 8011296:	2200      	movs	r2, #0
 8011298:	4601      	mov	r1, r0
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7fc ff47 	bl	800e12e <lfs_dir_getread>
 80112a0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d01e      	beq.n	80112e6 <lfs_file_relocate+0xde>
                    return err;
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	e07a      	b.n	80113a2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80112b2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	1ad4      	subs	r4, r2, r3
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112c0:	2201      	movs	r2, #1
 80112c2:	9203      	str	r2, [sp, #12]
 80112c4:	f107 020b 	add.w	r2, r7, #11
 80112c8:	9202      	str	r2, [sp, #8]
 80112ca:	697a      	ldr	r2, [r7, #20]
 80112cc:	9201      	str	r2, [sp, #4]
 80112ce:	9300      	str	r3, [sp, #0]
 80112d0:	4623      	mov	r3, r4
 80112d2:	4602      	mov	r2, r0
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f7fb feed 	bl	800d0b4 <lfs_bd_read>
 80112da:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d001      	beq.n	80112e6 <lfs_file_relocate+0xde>
                    return err;
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	e05d      	b.n	80113a2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	f103 0110 	add.w	r1, r3, #16
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	2201      	movs	r2, #1
 80112f2:	9203      	str	r2, [sp, #12]
 80112f4:	f107 020b 	add.w	r2, r7, #11
 80112f8:	9202      	str	r2, [sp, #8]
 80112fa:	697a      	ldr	r2, [r7, #20]
 80112fc:	9201      	str	r2, [sp, #4]
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	2301      	movs	r3, #1
 8011302:	4602      	mov	r2, r0
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fc f91b 	bl	800d540 <lfs_bd_prog>
 801130a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 801130c:	693b      	ldr	r3, [r7, #16]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d005      	beq.n	801131e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011318:	d032      	beq.n	8011380 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	e041      	b.n	80113a2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	3301      	adds	r3, #1
 8011322:	617b      	str	r3, [r7, #20]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011328:	697a      	ldr	r2, [r7, #20]
 801132a:	429a      	cmp	r2, r3
 801132c:	d390      	bcc.n	8011250 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	69d9      	ldr	r1, [r3, #28]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801133a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801133c:	461a      	mov	r2, r3
 801133e:	f013 fdb4 	bl	8024eaa <memcpy>
        file->cache.block = lfs->pcache.block;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	691a      	ldr	r2, [r3, #16]
 8011346:	683b      	ldr	r3, [r7, #0]
 8011348:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	695a      	ldr	r2, [r3, #20]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	699a      	ldr	r2, [r3, #24]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	3310      	adds	r3, #16
 801135e:	4619      	mov	r1, r3
 8011360:	6878      	ldr	r0, [r7, #4]
 8011362:	f7fb fe90 	bl	800d086 <lfs_cache_zero>

        file->block = nblock;
 8011366:	68fa      	ldr	r2, [r7, #12]
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011370:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8011378:	2300      	movs	r3, #0
 801137a:	e012      	b.n	80113a2 <lfs_file_relocate+0x19a>
                goto relocate;
 801137c:	bf00      	nop
 801137e:	e000      	b.n	8011382 <lfs_file_relocate+0x17a>
                    goto relocate;
 8011380:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	4a0a      	ldr	r2, [pc, #40]	; (80113b0 <lfs_file_relocate+0x1a8>)
 8011386:	9200      	str	r2, [sp, #0]
 8011388:	f640 229b 	movw	r2, #2715	; 0xa9b
 801138c:	4909      	ldr	r1, [pc, #36]	; (80113b4 <lfs_file_relocate+0x1ac>)
 801138e:	480a      	ldr	r0, [pc, #40]	; (80113b8 <lfs_file_relocate+0x1b0>)
 8011390:	f012 fa68 	bl	8023864 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	3310      	adds	r3, #16
 8011398:	4619      	mov	r1, r3
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7fb fe64 	bl	800d068 <lfs_cache_drop>
    while (true) {
 80113a0:	e737      	b.n	8011212 <lfs_file_relocate+0xa>
    }
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	371c      	adds	r7, #28
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd90      	pop	{r4, r7, pc}
 80113aa:	bf00      	nop
 80113ac:	fff7fc00 	.word	0xfff7fc00
 80113b0:	080283bc 	.word	0x080283bc
 80113b4:	080282b0 	.word	0x080282b0
 80113b8:	08028464 	.word	0x08028464

080113bc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f7fc fcd8 	bl	800dd84 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80113d4:	6839      	ldr	r1, [r7, #0]
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f7ff ff16 	bl	8011208 <lfs_file_relocate>
 80113dc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <lfs_file_outline+0x2c>
        return err;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	e006      	b.n	80113f6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80113f4:	2300      	movs	r3, #0
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3710      	adds	r7, #16
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
	...

08011400 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8011400:	b590      	push	{r4, r7, lr}
 8011402:	b09f      	sub	sp, #124	; 0x7c
 8011404:	af02      	add	r7, sp, #8
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 801140a:	683b      	ldr	r3, [r7, #0]
 801140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011412:	2b00      	cmp	r3, #0
 8011414:	d011      	beq.n	801143a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801141a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801141e:	2b00      	cmp	r3, #0
 8011420:	d105      	bne.n	801142e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8011422:	683b      	ldr	r3, [r7, #0]
 8011424:	3340      	adds	r3, #64	; 0x40
 8011426:	4619      	mov	r1, r3
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7fb fe1d 	bl	800d068 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011442:	2b00      	cmp	r3, #0
 8011444:	f000 80a4 	beq.w	8011590 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801144c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011456:	2b00      	cmp	r3, #0
 8011458:	d176      	bne.n	8011548 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 801145a:	f107 030c 	add.w	r3, r7, #12
 801145e:	2254      	movs	r2, #84	; 0x54
 8011460:	2100      	movs	r1, #0
 8011462:	4618      	mov	r0, r3
 8011464:	f012 fbc4 	bl	8023bf0 <memset>
                .ctz.head = file->ctz.head,
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 801146c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8011472:	63bb      	str	r3, [r7, #56]	; 0x38
 8011474:	2301      	movs	r3, #1
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 801147c:	643b      	str	r3, [r7, #64]	; 0x40
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8011484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4619      	mov	r1, r3
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7fb fdea 	bl	800d068 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8011494:	e02b      	b.n	80114ee <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 8011496:	f107 0263 	add.w	r2, r7, #99	; 0x63
 801149a:	f107 010c 	add.w	r1, r7, #12
 801149e:	2301      	movs	r3, #1
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f000 f90d 	bl	80116c0 <lfs_file_rawread>
 80114a6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80114a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	da01      	bge.n	80114b2 <lfs_file_flush+0xb2>
                    return res;
 80114ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114b0:	e06f      	b.n	8011592 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 80114b2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80114b6:	2301      	movs	r3, #1
 80114b8:	6839      	ldr	r1, [r7, #0]
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f000 f9f4 	bl	80118a8 <lfs_file_rawwrite>
 80114c0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80114c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	da01      	bge.n	80114cc <lfs_file_flush+0xcc>
                    return res;
 80114c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80114ca:	e062      	b.n	8011592 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114d4:	d00b      	beq.n	80114ee <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80114d6:	f107 030c 	add.w	r3, r7, #12
 80114da:	3340      	adds	r3, #64	; 0x40
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7fb fdc2 	bl	800d068 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4619      	mov	r1, r3
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7fb fdbd 	bl	800d068 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d3cd      	bcc.n	8011496 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	2301      	movs	r3, #1
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f7fb ff6b 	bl	800d3e0 <lfs_bd_flush>
 801150a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 801150c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801150e:	2b00      	cmp	r3, #0
 8011510:	d026      	beq.n	8011560 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8011512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011514:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011518:	d001      	beq.n	801151e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 801151a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801151c:	e039      	b.n	8011592 <lfs_file_flush+0x192>
                        goto relocate;
 801151e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011524:	4a1d      	ldr	r2, [pc, #116]	; (801159c <lfs_file_flush+0x19c>)
 8011526:	9200      	str	r2, [sp, #0]
 8011528:	f640 22ea 	movw	r2, #2794	; 0xaea
 801152c:	491c      	ldr	r1, [pc, #112]	; (80115a0 <lfs_file_flush+0x1a0>)
 801152e:	481d      	ldr	r0, [pc, #116]	; (80115a4 <lfs_file_flush+0x1a4>)
 8011530:	f012 f998 	bl	8023864 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8011534:	6839      	ldr	r1, [r7, #0]
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff fe66 	bl	8011208 <lfs_file_relocate>
 801153c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 801153e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011540:	2b00      	cmp	r3, #0
 8011542:	d0da      	beq.n	80114fa <lfs_file_flush+0xfa>
                    return err;
 8011544:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011546:	e024      	b.n	8011592 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011550:	4619      	mov	r1, r3
 8011552:	4610      	mov	r0, r2
 8011554:	f7fb fcc2 	bl	800cedc <lfs_max>
 8011558:	4602      	mov	r2, r0
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	635a      	str	r2, [r3, #52]	; 0x34
 801155e:	e000      	b.n	8011562 <lfs_file_flush+0x162>
                break;
 8011560:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011582:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801158e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3774      	adds	r7, #116	; 0x74
 8011596:	46bd      	mov	sp, r7
 8011598:	bd90      	pop	{r4, r7, pc}
 801159a:	bf00      	nop
 801159c:	080283bc 	.word	0x080283bc
 80115a0:	080282b0 	.word	0x080282b0
 80115a4:	08028464 	.word	0x08028464

080115a8 <lfs_file_rawsync>:
#endif

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b090      	sub	sp, #64	; 0x40
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
 80115b0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d001      	beq.n	80115c2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80115be:	2300      	movs	r3, #0
 80115c0:	e07a      	b.n	80116b8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80115c2:	6839      	ldr	r1, [r7, #0]
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f7ff ff1b 	bl	8011400 <lfs_file_flush>
 80115ca:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d007      	beq.n	80115e2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80115de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e0:	e06a      	b.n	80116b8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d063      	beq.n	80116b6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	3308      	adds	r3, #8
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fc f895 	bl	800d722 <lfs_pair_isnull>
 80115f8:	4603      	mov	r3, r0
 80115fa:	f083 0301 	eor.w	r3, r3, #1
 80115fe:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8011600:	2b00      	cmp	r3, #0
 8011602:	d058      	beq.n	80116b6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801160c:	2b00      	cmp	r3, #0
 801160e:	d009      	beq.n	8011624 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8011610:	f240 2301 	movw	r3, #513	; 0x201
 8011614:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801161a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011620:	637b      	str	r3, [r7, #52]	; 0x34
 8011622:	e014      	b.n	801164e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8011624:	f240 2302 	movw	r3, #514	; 0x202
 8011628:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 801162a:	683a      	ldr	r2, [r7, #0]
 801162c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011630:	3228      	adds	r2, #40	; 0x28
 8011632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011636:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 801163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801163e:	4618      	mov	r0, r3
 8011640:	f7fc fa90 	bl	800db64 <lfs_ctz_tole32>
            buffer = &ctz;
 8011644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011648:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 801164a:	2308      	movs	r3, #8
 801164c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	f103 0108 	add.w	r1, r3, #8
 8011654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011656:	051a      	lsls	r2, r3, #20
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	889b      	ldrh	r3, [r3, #4]
 801165c:	029b      	lsls	r3, r3, #10
 801165e:	431a      	orrs	r2, r3
 8011660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011662:	4313      	orrs	r3, r2
 8011664:	61bb      	str	r3, [r7, #24]
 8011666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011668:	61fb      	str	r3, [r7, #28]
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	889b      	ldrh	r3, [r3, #4]
 801166e:	029a      	lsls	r2, r3, #10
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	4313      	orrs	r3, r2
 8011678:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 801167c:	623b      	str	r3, [r7, #32]
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
 8011686:	f107 0218 	add.w	r2, r7, #24
 801168a:	2302      	movs	r3, #2
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f7fe fb95 	bl	800fdbc <lfs_dir_commit>
 8011692:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8011694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011696:	2b00      	cmp	r3, #0
 8011698:	d007      	beq.n	80116aa <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801169e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80116a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a8:	e006      	b.n	80116b8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3740      	adds	r7, #64	; 0x40
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <lfs_file_rawread>:
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80116c0:	b5b0      	push	{r4, r5, r7, lr}
 80116c2:	b092      	sub	sp, #72	; 0x48
 80116c4:	af06      	add	r7, sp, #24
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80116ce:	68bb      	ldr	r3, [r7, #8]
 80116d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d2:	f003 0301 	and.w	r3, r3, #1
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d106      	bne.n	80116e8 <lfs_file_rawread+0x28>
 80116da:	4b6f      	ldr	r3, [pc, #444]	; (8011898 <lfs_file_rawread+0x1d8>)
 80116dc:	4a6f      	ldr	r2, [pc, #444]	; (801189c <lfs_file_rawread+0x1dc>)
 80116de:	f640 3138 	movw	r1, #2872	; 0xb38
 80116e2:	486f      	ldr	r0, [pc, #444]	; (80118a0 <lfs_file_rawread+0x1e0>)
 80116e4:	f011 f9e8 	bl	8022ab8 <__assert_func>

    uint8_t *data = buffer;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d009      	beq.n	8011710 <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80116fc:	68b9      	ldr	r1, [r7, #8]
 80116fe:	68f8      	ldr	r0, [r7, #12]
 8011700:	f7ff fe7e 	bl	8011400 <lfs_file_flush>
 8011704:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8011706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011708:	2b00      	cmp	r3, #0
 801170a:	d001      	beq.n	8011710 <lfs_file_rawread+0x50>
            return err;
 801170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170e:	e0bf      	b.n	8011890 <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 8011710:	68bb      	ldr	r3, [r7, #8]
 8011712:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011718:	429a      	cmp	r2, r3
 801171a:	d301      	bcc.n	8011720 <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 801171c:	2300      	movs	r3, #0
 801171e:	e0b7      	b.n	8011890 <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011728:	1ad3      	subs	r3, r2, r3
 801172a:	4619      	mov	r1, r3
 801172c:	6838      	ldr	r0, [r7, #0]
 801172e:	f7fb fbe5 	bl	800cefc <lfs_min>
 8011732:	6038      	str	r0, [r7, #0]
    nsize = size;
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 8011738:	e0a5      	b.n	8011886 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801173e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011742:	2b00      	cmp	r3, #0
 8011744:	d006      	beq.n	8011754 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801174e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8011750:	429a      	cmp	r2, r3
 8011752:	d130      	bne.n	80117b6 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 8011754:	68bb      	ldr	r3, [r7, #8]
 8011756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801175c:	2b00      	cmp	r3, #0
 801175e:	d11c      	bne.n	801179a <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8011772:	68b9      	ldr	r1, [r7, #8]
 8011774:	3138      	adds	r1, #56	; 0x38
 8011776:	68b8      	ldr	r0, [r7, #8]
 8011778:	303c      	adds	r0, #60	; 0x3c
 801177a:	9003      	str	r0, [sp, #12]
 801177c:	9102      	str	r1, [sp, #8]
 801177e:	9201      	str	r2, [sp, #4]
 8011780:	9300      	str	r3, [sp, #0]
 8011782:	462b      	mov	r3, r5
 8011784:	4622      	mov	r2, r4
 8011786:	2100      	movs	r1, #0
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7ff f94d 	bl	8010a28 <lfs_ctz_find>
 801178e:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8011790:	6a3b      	ldr	r3, [r7, #32]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d009      	beq.n	80117aa <lfs_file_rawread+0xea>
                    return err;
 8011796:	6a3b      	ldr	r3, [r7, #32]
 8011798:	e07a      	b.n	8011890 <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	f06f 0201 	mvn.w	r2, #1
 80117a0:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80117a2:	68bb      	ldr	r3, [r7, #8]
 80117a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117ba:	69da      	ldr	r2, [r3, #28]
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	4619      	mov	r1, r3
 80117c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80117c6:	f7fb fb99 	bl	800cefc <lfs_min>
 80117ca:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d026      	beq.n	8011826 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	f103 0408 	add.w	r4, r3, #8
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117e8:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80117ea:	68bb      	ldr	r3, [r7, #8]
 80117ec:	889b      	ldrh	r3, [r3, #4]
 80117ee:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80117f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117f8:	68b9      	ldr	r1, [r7, #8]
 80117fa:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80117fc:	69f8      	ldr	r0, [r7, #28]
 80117fe:	9005      	str	r0, [sp, #20]
 8011800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011802:	9004      	str	r0, [sp, #16]
 8011804:	9103      	str	r1, [sp, #12]
 8011806:	9302      	str	r3, [sp, #8]
 8011808:	4b26      	ldr	r3, [pc, #152]	; (80118a4 <lfs_file_rawread+0x1e4>)
 801180a:	9301      	str	r3, [sp, #4]
 801180c:	9200      	str	r2, [sp, #0]
 801180e:	462b      	mov	r3, r5
 8011810:	2200      	movs	r2, #0
 8011812:	4621      	mov	r1, r4
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f7fc fc8a 	bl	800e12e <lfs_dir_getread>
 801181a:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d01d      	beq.n	801185e <lfs_file_rawread+0x19e>
                return err;
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	e034      	b.n	8011890 <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011830:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8011832:	68bb      	ldr	r3, [r7, #8]
 8011834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011836:	68ba      	ldr	r2, [r7, #8]
 8011838:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801183a:	69f9      	ldr	r1, [r7, #28]
 801183c:	9103      	str	r1, [sp, #12]
 801183e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011840:	9102      	str	r1, [sp, #8]
 8011842:	9201      	str	r2, [sp, #4]
 8011844:	9300      	str	r3, [sp, #0]
 8011846:	4623      	mov	r3, r4
 8011848:	4602      	mov	r2, r0
 801184a:	2100      	movs	r1, #0
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f7fb fc31 	bl	800d0b4 <lfs_bd_read>
 8011852:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d001      	beq.n	801185e <lfs_file_rawread+0x19e>
                return err;
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	e018      	b.n	8011890 <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	441a      	add	r2, r3
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801186e:	69fb      	ldr	r3, [r7, #28]
 8011870:	441a      	add	r2, r3
 8011872:	68bb      	ldr	r3, [r7, #8]
 8011874:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8011876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011878:	69fb      	ldr	r3, [r7, #28]
 801187a:	4413      	add	r3, r2
 801187c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 801187e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	1ad3      	subs	r3, r2, r3
 8011884:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 8011886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011888:	2b00      	cmp	r3, #0
 801188a:	f47f af56 	bne.w	801173a <lfs_file_rawread+0x7a>
    }

    return size;
 801188e:	683b      	ldr	r3, [r7, #0]
}
 8011890:	4618      	mov	r0, r3
 8011892:	3730      	adds	r7, #48	; 0x30
 8011894:	46bd      	mov	sp, r7
 8011896:	bdb0      	pop	{r4, r5, r7, pc}
 8011898:	0802850c 	.word	0x0802850c
 801189c:	0802bfd0 	.word	0x0802bfd0
 80118a0:	080282b0 	.word	0x080282b0
 80118a4:	fff7fc00 	.word	0xfff7fc00

080118a8 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80118a8:	b5b0      	push	{r4, r5, r7, lr}
 80118aa:	b094      	sub	sp, #80	; 0x50
 80118ac:	af04      	add	r7, sp, #16
 80118ae:	60f8      	str	r0, [r7, #12]
 80118b0:	60b9      	str	r1, [r7, #8]
 80118b2:	607a      	str	r2, [r7, #4]
 80118b4:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ba:	f003 0302 	and.w	r3, r3, #2
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d106      	bne.n	80118d0 <lfs_file_rawwrite+0x28>
 80118c2:	4b85      	ldr	r3, [pc, #532]	; (8011ad8 <lfs_file_rawwrite+0x230>)
 80118c4:	4a85      	ldr	r2, [pc, #532]	; (8011adc <lfs_file_rawwrite+0x234>)
 80118c6:	f640 3182 	movw	r1, #2946	; 0xb82
 80118ca:	4885      	ldr	r0, [pc, #532]	; (8011ae0 <lfs_file_rawwrite+0x238>)
 80118cc:	f011 f8f4 	bl	8022ab8 <__assert_func>

    const uint8_t *data = buffer;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d009      	beq.n	80118f8 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80118e4:	68b9      	ldr	r1, [r7, #8]
 80118e6:	68f8      	ldr	r0, [r7, #12]
 80118e8:	f7ff fd8a 	bl	8011400 <lfs_file_flush>
 80118ec:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 80118ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d001      	beq.n	80118f8 <lfs_file_rawwrite+0x50>
            return err;
 80118f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118f6:	e166      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011900:	2b00      	cmp	r3, #0
 8011902:	d009      	beq.n	8011918 <lfs_file_rawwrite+0x70>
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801190c:	429a      	cmp	r2, r3
 801190e:	d203      	bcs.n	8011918 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	441a      	add	r2, r3
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011924:	429a      	cmp	r2, r3
 8011926:	d902      	bls.n	801192e <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8011928:	f06f 031a 	mvn.w	r3, #26
 801192c:	e14b      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011936:	2b00      	cmp	r3, #0
 8011938:	d121      	bne.n	801197e <lfs_file_rawwrite+0xd6>
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011942:	429a      	cmp	r2, r3
 8011944:	d91b      	bls.n	801197e <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801194a:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8011954:	e00e      	b.n	8011974 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 8011956:	2300      	movs	r3, #0
 8011958:	75fb      	strb	r3, [r7, #23]
 801195a:	f107 0217 	add.w	r2, r7, #23
 801195e:	2301      	movs	r3, #1
 8011960:	68b9      	ldr	r1, [r7, #8]
 8011962:	68f8      	ldr	r0, [r7, #12]
 8011964:	f7ff ffa0 	bl	80118a8 <lfs_file_rawwrite>
 8011968:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	2b00      	cmp	r3, #0
 801196e:	da01      	bge.n	8011974 <lfs_file_rawwrite+0xcc>
                return res;
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	e128      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 8011974:	68bb      	ldr	r3, [r7, #8]
 8011976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801197a:	429a      	cmp	r2, r3
 801197c:	d8eb      	bhi.n	8011956 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011986:	2b00      	cmp	r3, #0
 8011988:	f000 8112 	beq.w	8011bb0 <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011992:	441a      	add	r2, r3
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011998:	4619      	mov	r1, r3
 801199a:	4610      	mov	r0, r2
 801199c:	f7fb fa9e 	bl	800cedc <lfs_max>
 80119a0:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d004      	beq.n	80119bc <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 80119b8:	08db      	lsrs	r3, r3, #3
 80119ba:	e003      	b.n	80119c4 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119c0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80119c2:	08db      	lsrs	r3, r3, #3
 80119c4:	4619      	mov	r1, r3
 80119c6:	4610      	mov	r0, r2
 80119c8:	f7fb fa98 	bl	800cefc <lfs_min>
 80119cc:	4603      	mov	r3, r0
 80119ce:	4619      	mov	r1, r3
 80119d0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80119d4:	f7fb fa92 	bl	800cefc <lfs_min>
 80119d8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80119da:	429c      	cmp	r4, r3
 80119dc:	f240 80e8 	bls.w	8011bb0 <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80119e0:	68b9      	ldr	r1, [r7, #8]
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7ff fcea 	bl	80113bc <lfs_file_outline>
 80119e8:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	f000 80df 	beq.w	8011bb0 <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	e0e1      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d006      	beq.n	8011a1c <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a16:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8011a18:	429a      	cmp	r2, r3
 8011a1a:	d171      	bne.n	8011b00 <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d15d      	bne.n	8011ae4 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d12d      	bne.n	8011a90 <lfs_file_rawwrite+0x1e8>
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d029      	beq.n	8011a90 <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8011a46:	68bb      	ldr	r3, [r7, #8]
 8011a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8011a4a:	68ba      	ldr	r2, [r7, #8]
 8011a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8011a4e:	3a01      	subs	r2, #1
 8011a50:	68b9      	ldr	r1, [r7, #8]
 8011a52:	3138      	adds	r1, #56	; 0x38
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	303c      	adds	r0, #60	; 0x3c
 8011a58:	9003      	str	r0, [sp, #12]
 8011a5a:	9102      	str	r1, [sp, #8]
 8011a5c:	9201      	str	r2, [sp, #4]
 8011a5e:	9300      	str	r3, [sp, #0]
 8011a60:	462b      	mov	r3, r5
 8011a62:	4622      	mov	r2, r4
 8011a64:	2100      	movs	r1, #0
 8011a66:	68f8      	ldr	r0, [r7, #12]
 8011a68:	f7fe ffde 	bl	8010a28 <lfs_ctz_find>
 8011a6c:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 8011a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d007      	beq.n	8011a84 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a78:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011a7c:	68bb      	ldr	r3, [r7, #8]
 8011a7e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8011a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a82:	e0a0      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	3340      	adds	r3, #64	; 0x40
 8011a88:	4619      	mov	r1, r3
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f7fb fafb 	bl	800d086 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f7fc f977 	bl	800dd84 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011a9c:	68fc      	ldr	r4, [r7, #12]
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011aa6:	68ba      	ldr	r2, [r7, #8]
 8011aa8:	3238      	adds	r2, #56	; 0x38
 8011aaa:	68b9      	ldr	r1, [r7, #8]
 8011aac:	313c      	adds	r1, #60	; 0x3c
 8011aae:	9102      	str	r1, [sp, #8]
 8011ab0:	9201      	str	r2, [sp, #4]
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	462b      	mov	r3, r5
 8011ab6:	4622      	mov	r2, r4
 8011ab8:	4601      	mov	r1, r0
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f7ff f820 	bl	8010b00 <lfs_ctz_extend>
 8011ac0:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8011ac2:	6a3b      	ldr	r3, [r7, #32]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d015      	beq.n	8011af4 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011acc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8011ad4:	6a3b      	ldr	r3, [r7, #32]
 8011ad6:	e076      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
 8011ad8:	0802853c 	.word	0x0802853c
 8011adc:	0802bfe4 	.word	0x0802bfe4
 8011ae0:	080282b0 	.word	0x080282b0
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	f06f 0201 	mvn.w	r2, #1
 8011aea:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011af0:	68bb      	ldr	r3, [r7, #8]
 8011af2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011af8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b04:	69da      	ldr	r2, [r3, #28]
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b0a:	1ad3      	subs	r3, r2, r3
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b10:	f7fb f9f4 	bl	800cefc <lfs_min>
 8011b14:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8011b1c:	68fc      	ldr	r4, [r7, #12]
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b22:	68ba      	ldr	r2, [r7, #8]
 8011b24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8011b26:	69f9      	ldr	r1, [r7, #28]
 8011b28:	9103      	str	r1, [sp, #12]
 8011b2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b2c:	9102      	str	r1, [sp, #8]
 8011b2e:	9201      	str	r2, [sp, #4]
 8011b30:	9300      	str	r3, [sp, #0]
 8011b32:	2301      	movs	r3, #1
 8011b34:	4622      	mov	r2, r4
 8011b36:	4601      	mov	r1, r0
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7fb fd01 	bl	800d540 <lfs_bd_prog>
 8011b3e:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8011b40:	69bb      	ldr	r3, [r7, #24]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d01c      	beq.n	8011b80 <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011b4c:	d007      	beq.n	8011b5e <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	e033      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 8011b5e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8011b60:	68b9      	ldr	r1, [r7, #8]
 8011b62:	68f8      	ldr	r0, [r7, #12]
 8011b64:	f7ff fb50 	bl	8011208 <lfs_file_relocate>
 8011b68:	61b8      	str	r0, [r7, #24]
            if (err) {
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d0d2      	beq.n	8011b16 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	e022      	b.n	8011bc6 <lfs_file_rawwrite+0x31e>
            break;
 8011b80:	bf00      	nop
            }
        }

        file->pos += diff;
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b86:	69fb      	ldr	r3, [r7, #28]
 8011b88:	441a      	add	r2, r3
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	441a      	add	r2, r3
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8011b9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8011ba2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	1ad3      	subs	r3, r2, r3
 8011ba8:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 8011baa:	68f8      	ldr	r0, [r7, #12]
 8011bac:	f7fc f8ea 	bl	800dd84 <lfs_alloc_ack>
    while (nsize > 0) {
 8011bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	f47f af25 	bne.w	8011a02 <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 8011bb8:	68bb      	ldr	r3, [r7, #8]
 8011bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bbc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8011bc0:	68bb      	ldr	r3, [r7, #8]
 8011bc2:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 8011bc4:	683b      	ldr	r3, [r7, #0]
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3740      	adds	r7, #64	; 0x40
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8011bce:	bf00      	nop

08011bd0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b086      	sub	sp, #24
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	60f8      	str	r0, [r7, #12]
 8011bd8:	60b9      	str	r1, [r7, #8]
 8011bda:	607a      	str	r2, [r7, #4]
 8011bdc:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8011bde:	68bb      	ldr	r3, [r7, #8]
 8011be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011be2:	617b      	str	r3, [r7, #20]
    if (whence == LFS_SEEK_SET) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d102      	bne.n	8011bf0 <lfs_file_rawseek+0x20>
        npos = off;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	617b      	str	r3, [r7, #20]
 8011bee:	e013      	b.n	8011c18 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_CUR) {
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d105      	bne.n	8011c02 <lfs_file_rawseek+0x32>
        npos = file->pos + off;
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	617b      	str	r3, [r7, #20]
 8011c00:	e00a      	b.n	8011c18 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_END) {
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	2b02      	cmp	r3, #2
 8011c06:	d107      	bne.n	8011c18 <lfs_file_rawseek+0x48>
        npos = lfs_file_rawsize(lfs, file) + off;
 8011c08:	68b9      	ldr	r1, [r7, #8]
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	f000 f825 	bl	8011c5a <lfs_file_rawsize>
 8011c10:	4602      	mov	r2, r0
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4413      	add	r3, r2
 8011c16:	617b      	str	r3, [r7, #20]
    }

    if (npos > lfs->file_max) {
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	429a      	cmp	r2, r3
 8011c20:	d902      	bls.n	8011c28 <lfs_file_rawseek+0x58>
        // file position out of range
        return LFS_ERR_INVAL;
 8011c22:	f06f 0315 	mvn.w	r3, #21
 8011c26:	e014      	b.n	8011c52 <lfs_file_rawseek+0x82>
    }

    if (file->pos == npos) {
 8011c28:	68bb      	ldr	r3, [r7, #8]
 8011c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c2c:	697a      	ldr	r2, [r7, #20]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d101      	bne.n	8011c36 <lfs_file_rawseek+0x66>
        // noop - position has not changed
        return npos;
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	e00d      	b.n	8011c52 <lfs_file_rawseek+0x82>
    }

#ifndef LFS_READONLY
    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8011c36:	68b9      	ldr	r1, [r7, #8]
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7ff fbe1 	bl	8011400 <lfs_file_flush>
 8011c3e:	6138      	str	r0, [r7, #16]
    if (err) {
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d001      	beq.n	8011c4a <lfs_file_rawseek+0x7a>
        return err;
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	e003      	b.n	8011c52 <lfs_file_rawseek+0x82>
    }
#endif

    // update pos
    file->pos = npos;
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	697a      	ldr	r2, [r7, #20]
 8011c4e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8011c50:	697b      	ldr	r3, [r7, #20]
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3718      	adds	r7, #24
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b082      	sub	sp, #8
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
 8011c62:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d009      	beq.n	8011c84 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c78:	4619      	mov	r1, r3
 8011c7a:	4610      	mov	r0, r2
 8011c7c:	f7fb f92e 	bl	800cedc <lfs_max>
 8011c80:	4603      	mov	r3, r0
 8011c82:	e001      	b.n	8011c88 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}

08011c90 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08e      	sub	sp, #56	; 0x38
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8011c9c:	f107 0208 	add.w	r2, r7, #8
 8011ca0:	f107 0114 	add.w	r1, r7, #20
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7fd f94c 	bl	800ef44 <lfs_dir_find>
 8011cac:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8011cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	da01      	bge.n	8011cb8 <lfs_rawstat+0x28>
        return (int)tag;
 8011cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb6:	e00c      	b.n	8011cd2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8011cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fb fe32 	bl	800d924 <lfs_tag_id>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	f107 0114 	add.w	r1, r7, #20
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	68f8      	ldr	r0, [r7, #12]
 8011ccc:	f7fd f876 	bl	800edbc <lfs_dir_getinfo>
 8011cd0:	4603      	mov	r3, r0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3738      	adds	r7, #56	; 0x38
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08c      	sub	sp, #48	; 0x30
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
 8011ce4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	683a      	ldr	r2, [r7, #0]
 8011cea:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8011cec:	2300      	movs	r3, #0
 8011cee:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cf4:	695b      	ldr	r3, [r3, #20]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <lfs_init+0x2c>
 8011cfa:	4b92      	ldr	r3, [pc, #584]	; (8011f44 <lfs_init+0x268>)
 8011cfc:	4a92      	ldr	r2, [pc, #584]	; (8011f48 <lfs_init+0x26c>)
 8011cfe:	f640 51a4 	movw	r1, #3492	; 0xda4
 8011d02:	4892      	ldr	r0, [pc, #584]	; (8011f4c <lfs_init+0x270>)
 8011d04:	f010 fed8 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d0c:	699b      	ldr	r3, [r3, #24]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d106      	bne.n	8011d20 <lfs_init+0x44>
 8011d12:	4b8f      	ldr	r3, [pc, #572]	; (8011f50 <lfs_init+0x274>)
 8011d14:	4a8c      	ldr	r2, [pc, #560]	; (8011f48 <lfs_init+0x26c>)
 8011d16:	f640 51a5 	movw	r1, #3493	; 0xda5
 8011d1a:	488c      	ldr	r0, [pc, #560]	; (8011f4c <lfs_init+0x270>)
 8011d1c:	f010 fecc 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d106      	bne.n	8011d38 <lfs_init+0x5c>
 8011d2a:	4b8a      	ldr	r3, [pc, #552]	; (8011f54 <lfs_init+0x278>)
 8011d2c:	4a86      	ldr	r2, [pc, #536]	; (8011f48 <lfs_init+0x26c>)
 8011d2e:	f640 51a6 	movw	r1, #3494	; 0xda6
 8011d32:	4886      	ldr	r0, [pc, #536]	; (8011f4c <lfs_init+0x270>)
 8011d34:	f010 fec0 	bl	8022ab8 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d3e:	687a      	ldr	r2, [r7, #4]
 8011d40:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8011d42:	6952      	ldr	r2, [r2, #20]
 8011d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d48:	fb01 f202 	mul.w	r2, r1, r2
 8011d4c:	1a9b      	subs	r3, r3, r2
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d006      	beq.n	8011d60 <lfs_init+0x84>
 8011d52:	4b81      	ldr	r3, [pc, #516]	; (8011f58 <lfs_init+0x27c>)
 8011d54:	4a7c      	ldr	r2, [pc, #496]	; (8011f48 <lfs_init+0x26c>)
 8011d56:	f640 51aa 	movw	r1, #3498	; 0xdaa
 8011d5a:	487c      	ldr	r0, [pc, #496]	; (8011f4c <lfs_init+0x270>)
 8011d5c:	f010 feac 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8011d6a:	6992      	ldr	r2, [r2, #24]
 8011d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d70:	fb01 f202 	mul.w	r2, r1, r2
 8011d74:	1a9b      	subs	r3, r3, r2
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d006      	beq.n	8011d88 <lfs_init+0xac>
 8011d7a:	4b78      	ldr	r3, [pc, #480]	; (8011f5c <lfs_init+0x280>)
 8011d7c:	4a72      	ldr	r2, [pc, #456]	; (8011f48 <lfs_init+0x26c>)
 8011d7e:	f640 51ab 	movw	r1, #3499	; 0xdab
 8011d82:	4872      	ldr	r0, [pc, #456]	; (8011f4c <lfs_init+0x270>)
 8011d84:	f010 fe98 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d8c:	69db      	ldr	r3, [r3, #28]
 8011d8e:	687a      	ldr	r2, [r7, #4]
 8011d90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8011d92:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8011d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d98:	fb01 f202 	mul.w	r2, r1, r2
 8011d9c:	1a9b      	subs	r3, r3, r2
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d006      	beq.n	8011db0 <lfs_init+0xd4>
 8011da2:	4b6f      	ldr	r3, [pc, #444]	; (8011f60 <lfs_init+0x284>)
 8011da4:	4a68      	ldr	r2, [pc, #416]	; (8011f48 <lfs_init+0x26c>)
 8011da6:	f640 51ac 	movw	r1, #3500	; 0xdac
 8011daa:	4868      	ldr	r0, [pc, #416]	; (8011f4c <lfs_init+0x270>)
 8011dac:	f010 fe84 	bl	8022ab8 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011db4:	69db      	ldr	r3, [r3, #28]
 8011db6:	3b08      	subs	r3, #8
 8011db8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7fb f8d2 	bl	800cf6a <lfs_npw2>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	009a      	lsls	r2, r3, #2
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dce:	69db      	ldr	r3, [r3, #28]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d906      	bls.n	8011de2 <lfs_init+0x106>
 8011dd4:	4b63      	ldr	r3, [pc, #396]	; (8011f64 <lfs_init+0x288>)
 8011dd6:	4a5c      	ldr	r2, [pc, #368]	; (8011f48 <lfs_init+0x26c>)
 8011dd8:	f640 51af 	movw	r1, #3503	; 0xdaf
 8011ddc:	485b      	ldr	r0, [pc, #364]	; (8011f4c <lfs_init+0x270>)
 8011dde:	f010 fe6b 	bl	8022ab8 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d106      	bne.n	8011dfa <lfs_init+0x11e>
 8011dec:	4b5e      	ldr	r3, [pc, #376]	; (8011f68 <lfs_init+0x28c>)
 8011dee:	4a56      	ldr	r2, [pc, #344]	; (8011f48 <lfs_init+0x26c>)
 8011df0:	f640 51b8 	movw	r1, #3512	; 0xdb8
 8011df4:	4855      	ldr	r0, [pc, #340]	; (8011f4c <lfs_init+0x270>)
 8011df6:	f010 fe5f 	bl	8022ab8 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d005      	beq.n	8011e10 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	60da      	str	r2, [r3, #12]
 8011e0e:	e010      	b.n	8011e32 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e16:	4618      	mov	r0, r3
 8011e18:	f7fb f90f 	bl	800d03a <lfs_malloc>
 8011e1c:	4602      	mov	r2, r0
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d103      	bne.n	8011e32 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8011e2a:	f06f 030b 	mvn.w	r3, #11
 8011e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011e30:	e0fd      	b.n	801202e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d005      	beq.n	8011e48 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	61da      	str	r2, [r3, #28]
 8011e46:	e010      	b.n	8011e6a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7fb f8f3 	bl	800d03a <lfs_malloc>
 8011e54:	4602      	mov	r2, r0
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d103      	bne.n	8011e6a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8011e62:	f06f 030b 	mvn.w	r3, #11
 8011e66:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011e68:	e0e1      	b.n	801202e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	4619      	mov	r1, r3
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7fb f909 	bl	800d086 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	3310      	adds	r3, #16
 8011e78:	4619      	mov	r1, r3
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f7fb f903 	bl	800d086 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d106      	bne.n	8011e98 <lfs_init+0x1bc>
 8011e8a:	4b38      	ldr	r3, [pc, #224]	; (8011f6c <lfs_init+0x290>)
 8011e8c:	4a2e      	ldr	r2, [pc, #184]	; (8011f48 <lfs_init+0x26c>)
 8011e8e:	f640 51d6 	movw	r1, #3542	; 0xdd6
 8011e92:	482e      	ldr	r0, [pc, #184]	; (8011f4c <lfs_init+0x270>)
 8011e94:	f010 fe10 	bl	8022ab8 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e9e:	f003 0307 	and.w	r3, r3, #7
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d106      	bne.n	8011eb4 <lfs_init+0x1d8>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eac:	f003 0303 	and.w	r3, r3, #3
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d006      	beq.n	8011ec2 <lfs_init+0x1e6>
 8011eb4:	4b2e      	ldr	r3, [pc, #184]	; (8011f70 <lfs_init+0x294>)
 8011eb6:	4a24      	ldr	r2, [pc, #144]	; (8011f48 <lfs_init+0x26c>)
 8011eb8:	f640 51d7 	movw	r1, #3543	; 0xdd7
 8011ebc:	4823      	ldr	r0, [pc, #140]	; (8011f4c <lfs_init+0x270>)
 8011ebe:	f010 fdfb 	bl	8022ab8 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d005      	beq.n	8011ed8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	665a      	str	r2, [r3, #100]	; 0x64
 8011ed6:	e010      	b.n	8011efa <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fb f8ab 	bl	800d03a <lfs_malloc>
 8011ee4:	4602      	mov	r2, r0
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d103      	bne.n	8011efa <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 8011ef2:	f06f 030b 	mvn.w	r3, #11
 8011ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8011ef8:	e099      	b.n	801202e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f00:	2bff      	cmp	r3, #255	; 0xff
 8011f02:	d906      	bls.n	8011f12 <lfs_init+0x236>
 8011f04:	4b1b      	ldr	r3, [pc, #108]	; (8011f74 <lfs_init+0x298>)
 8011f06:	4a10      	ldr	r2, [pc, #64]	; (8011f48 <lfs_init+0x26c>)
 8011f08:	f640 51e4 	movw	r1, #3556	; 0xde4
 8011f0c:	480f      	ldr	r0, [pc, #60]	; (8011f4c <lfs_init+0x270>)
 8011f0e:	f010 fdd3 	bl	8022ab8 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d102      	bne.n	8011f2a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	22ff      	movs	r2, #255	; 0xff
 8011f28:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	da23      	bge.n	8011f7c <lfs_init+0x2a0>
 8011f34:	4b10      	ldr	r3, [pc, #64]	; (8011f78 <lfs_init+0x29c>)
 8011f36:	4a04      	ldr	r2, [pc, #16]	; (8011f48 <lfs_init+0x26c>)
 8011f38:	f640 51ea 	movw	r1, #3562	; 0xdea
 8011f3c:	4803      	ldr	r0, [pc, #12]	; (8011f4c <lfs_init+0x270>)
 8011f3e:	f010 fdbb 	bl	8022ab8 <__assert_func>
 8011f42:	bf00      	nop
 8011f44:	0802856c 	.word	0x0802856c
 8011f48:	0802bff8 	.word	0x0802bff8
 8011f4c:	080282b0 	.word	0x080282b0
 8011f50:	08028588 	.word	0x08028588
 8011f54:	080285a4 	.word	0x080285a4
 8011f58:	080285c0 	.word	0x080285c0
 8011f5c:	080285f0 	.word	0x080285f0
 8011f60:	08028620 	.word	0x08028620
 8011f64:	08028654 	.word	0x08028654
 8011f68:	080286a0 	.word	0x080286a0
 8011f6c:	080286bc 	.word	0x080286bc
 8011f70:	080286dc 	.word	0x080286dc
 8011f74:	08028730 	.word	0x08028730
 8011f78:	0802874c 	.word	0x0802874c
    lfs->file_max = lfs->cfg->file_max;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d103      	bne.n	8011f96 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011f94:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f9c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d906      	bls.n	8011fb2 <lfs_init+0x2d6>
 8011fa4:	4b26      	ldr	r3, [pc, #152]	; (8012040 <lfs_init+0x364>)
 8011fa6:	4a27      	ldr	r2, [pc, #156]	; (8012044 <lfs_init+0x368>)
 8011fa8:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 8011fac:	4826      	ldr	r0, [pc, #152]	; (8012048 <lfs_init+0x36c>)
 8011fae:	f010 fd83 	bl	8022ab8 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d103      	bne.n	8011fcc <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8011fca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011fd6:	69db      	ldr	r3, [r3, #28]
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d906      	bls.n	8011fea <lfs_init+0x30e>
 8011fdc:	4b1b      	ldr	r3, [pc, #108]	; (801204c <lfs_init+0x370>)
 8011fde:	4a19      	ldr	r2, [pc, #100]	; (8012044 <lfs_init+0x368>)
 8011fe0:	f640 51f6 	movw	r1, #3574	; 0xdf6
 8011fe4:	4818      	ldr	r0, [pc, #96]	; (8012048 <lfs_init+0x36c>)
 8011fe6:	f010 fd67 	bl	8022ab8 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ff0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011ff8:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2200      	movs	r2, #0
 8012004:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	333c      	adds	r3, #60	; 0x3c
 801200a:	2200      	movs	r2, #0
 801200c:	601a      	str	r2, [r3, #0]
 801200e:	605a      	str	r2, [r3, #4]
 8012010:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	3330      	adds	r3, #48	; 0x30
 8012016:	2200      	movs	r2, #0
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	605a      	str	r2, [r3, #4]
 801201c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	3348      	adds	r3, #72	; 0x48
 8012022:	2200      	movs	r2, #0
 8012024:	601a      	str	r2, [r3, #0]
 8012026:	605a      	str	r2, [r3, #4]
 8012028:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 801202a:	2300      	movs	r3, #0
 801202c:	e003      	b.n	8012036 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 f80e 	bl	8012050 <lfs_deinit>
    return err;
 8012034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012036:	4618      	mov	r0, r3
 8012038:	3730      	adds	r7, #48	; 0x30
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	08028770 	.word	0x08028770
 8012044:	0802bff8 	.word	0x0802bff8
 8012048:	080282b0 	.word	0x080282b0
 801204c:	0802878c 	.word	0x0802878c

08012050 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205e:	2b00      	cmp	r3, #0
 8012060:	d104      	bne.n	801206c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	4618      	mov	r0, r3
 8012068:	f7fa fff3 	bl	800d052 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012072:	2b00      	cmp	r3, #0
 8012074:	d104      	bne.n	8012080 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	69db      	ldr	r3, [r3, #28]
 801207a:	4618      	mov	r0, r3
 801207c:	f7fa ffe9 	bl	800d052 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012086:	2b00      	cmp	r3, #0
 8012088:	d104      	bne.n	8012094 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801208e:	4618      	mov	r0, r3
 8012090:	f7fa ffdf 	bl	800d052 <lfs_free>
    }

    return 0;
 8012094:	2300      	movs	r3, #0
}
 8012096:	4618      	mov	r0, r3
 8012098:	3708      	adds	r7, #8
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
	...

080120a0 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b0a0      	sub	sp, #128	; 0x80
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
    int err = 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80120ae:	6839      	ldr	r1, [r7, #0]
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7ff fe13 	bl	8011cdc <lfs_init>
 80120b6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80120b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <lfs_rawformat+0x22>
            return err;
 80120be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80120c0:	e082      	b.n	80121c8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120cc:	461a      	mov	r2, r3
 80120ce:	2100      	movs	r1, #0
 80120d0:	f011 fd8e 	bl	8023bf0 <memset>
        lfs->free.off = 0;
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	2200      	movs	r2, #0
 80120d8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e0:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120e6:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80120e8:	4619      	mov	r1, r3
 80120ea:	4610      	mov	r0, r2
 80120ec:	f7fa ff06 	bl	800cefc <lfs_min>
 80120f0:	4602      	mov	r2, r0
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7fb fe41 	bl	800dd84 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8012102:	f107 030c 	add.w	r3, r7, #12
 8012106:	4619      	mov	r1, r3
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f7fd fa07 	bl	800f51c <lfs_dir_alloc>
 801210e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8012110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012112:	2b00      	cmp	r3, #0
 8012114:	d14f      	bne.n	80121b6 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8012116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801211a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012120:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8012122:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012128:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 801212a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8012130:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8012136:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 801213c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 801213e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012142:	4618      	mov	r0, r3
 8012144:	f7fb fd5e 	bl	800dc04 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8012148:	4b21      	ldr	r3, [pc, #132]	; (80121d0 <lfs_rawformat+0x130>)
 801214a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801214c:	2300      	movs	r3, #0
 801214e:	653b      	str	r3, [r7, #80]	; 0x50
 8012150:	4b20      	ldr	r3, [pc, #128]	; (80121d4 <lfs_rawformat+0x134>)
 8012152:	657b      	str	r3, [r7, #84]	; 0x54
 8012154:	4b20      	ldr	r3, [pc, #128]	; (80121d8 <lfs_rawformat+0x138>)
 8012156:	65bb      	str	r3, [r7, #88]	; 0x58
 8012158:	4b20      	ldr	r3, [pc, #128]	; (80121dc <lfs_rawformat+0x13c>)
 801215a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801215c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012160:	663b      	str	r3, [r7, #96]	; 0x60
 8012162:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012166:	f107 010c 	add.w	r1, r7, #12
 801216a:	2303      	movs	r3, #3
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f7fd fe25 	bl	800fdbc <lfs_dir_commit>
 8012172:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8012174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012176:	2b00      	cmp	r3, #0
 8012178:	d11f      	bne.n	80121ba <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 801217a:	2300      	movs	r3, #0
 801217c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8012180:	f107 010c 	add.w	r1, r7, #12
 8012184:	2300      	movs	r3, #0
 8012186:	2200      	movs	r2, #0
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7fd fe17 	bl	800fdbc <lfs_dir_commit>
 801218e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8012190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012192:	2b00      	cmp	r3, #0
 8012194:	d113      	bne.n	80121be <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8012196:	2300      	movs	r3, #0
 8012198:	62fb      	str	r3, [r7, #44]	; 0x2c
 801219a:	2301      	movs	r3, #1
 801219c:	633b      	str	r3, [r7, #48]	; 0x30
 801219e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80121a2:	f107 030c 	add.w	r3, r7, #12
 80121a6:	4619      	mov	r1, r3
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7fc fdb9 	bl	800ed20 <lfs_dir_fetch>
 80121ae:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80121b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	e004      	b.n	80121c0 <lfs_rawformat+0x120>
            goto cleanup;
 80121b6:	bf00      	nop
 80121b8:	e002      	b.n	80121c0 <lfs_rawformat+0x120>
            goto cleanup;
 80121ba:	bf00      	nop
 80121bc:	e000      	b.n	80121c0 <lfs_rawformat+0x120>
            goto cleanup;
 80121be:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f7ff ff45 	bl	8012050 <lfs_deinit>
    return err;
 80121c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80121c8:	4618      	mov	r0, r3
 80121ca:	3780      	adds	r7, #128	; 0x80
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}
 80121d0:	40100000 	.word	0x40100000
 80121d4:	0ff00008 	.word	0x0ff00008
 80121d8:	080287bc 	.word	0x080287bc
 80121dc:	20100018 	.word	0x20100018

080121e0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b09c      	sub	sp, #112	; 0x70
 80121e4:	af04      	add	r7, sp, #16
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80121ea:	6839      	ldr	r1, [r7, #0]
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff fd75 	bl	8011cdc <lfs_init>
 80121f2:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 80121f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d001      	beq.n	80121fe <lfs_rawmount+0x1e>
        return err;
 80121fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121fc:	e149      	b.n	8012492 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 80121fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012202:	2220      	movs	r2, #32
 8012204:	2100      	movs	r1, #0
 8012206:	4618      	mov	r0, r3
 8012208:	f011 fcf2 	bl	8023bf0 <memset>
 801220c:	2301      	movs	r3, #1
 801220e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8012210:	2300      	movs	r3, #0
 8012212:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8012214:	e0dc      	b.n	80123d0 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801221a:	6a1b      	ldr	r3, [r3, #32]
 801221c:	085b      	lsrs	r3, r3, #1
 801221e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012220:	429a      	cmp	r2, r3
 8012222:	d303      	bcc.n	801222c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8012224:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012228:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801222a:	e12e      	b.n	801248a <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 801222c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801222e:	3301      	adds	r3, #1
 8012230:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	627b      	str	r3, [r7, #36]	; 0x24
 8012236:	4b99      	ldr	r3, [pc, #612]	; (801249c <lfs_rawmount+0x2bc>)
 8012238:	62bb      	str	r3, [r7, #40]	; 0x28
 801223a:	2308      	movs	r3, #8
 801223c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 801223e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012242:	f103 0218 	add.w	r2, r3, #24
 8012246:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801224a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801224e:	9303      	str	r3, [sp, #12]
 8012250:	4b93      	ldr	r3, [pc, #588]	; (80124a0 <lfs_rawmount+0x2c0>)
 8012252:	9302      	str	r3, [sp, #8]
 8012254:	2300      	movs	r3, #0
 8012256:	9301      	str	r3, [sp, #4]
 8012258:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <lfs_rawmount+0x2c4>)
 801225a:	9300      	str	r3, [sp, #0]
 801225c:	4b92      	ldr	r3, [pc, #584]	; (80124a8 <lfs_rawmount+0x2c8>)
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f7fc f9f2 	bl	800e648 <lfs_dir_fetchmatch>
 8012264:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8012266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012268:	2b00      	cmp	r3, #0
 801226a:	da02      	bge.n	8012272 <lfs_rawmount+0x92>
            err = tag;
 801226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801226e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8012270:	e10b      	b.n	801248a <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8012272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012274:	2b00      	cmp	r3, #0
 8012276:	f000 809e 	beq.w	80123b6 <lfs_rawmount+0x1d6>
 801227a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801227c:	4618      	mov	r0, r3
 801227e:	f7fb fb04 	bl	800d88a <lfs_tag_isdelete>
 8012282:	4603      	mov	r3, r0
 8012284:	f083 0301 	eor.w	r3, r3, #1
 8012288:	b2db      	uxtb	r3, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	f000 8093 	beq.w	80123b6 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 8012290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8012296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 801229c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80122a0:	f107 030c 	add.w	r3, r7, #12
 80122a4:	9300      	str	r3, [sp, #0]
 80122a6:	4b81      	ldr	r3, [pc, #516]	; (80124ac <lfs_rawmount+0x2cc>)
 80122a8:	4a7f      	ldr	r2, [pc, #508]	; (80124a8 <lfs_rawmount+0x2c8>)
 80122aa:	6878      	ldr	r0, [r7, #4]
 80122ac:	f7fb ff24 	bl	800e0f8 <lfs_dir_get>
 80122b0:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80122b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	da02      	bge.n	80122be <lfs_rawmount+0xde>
                err = tag;
 80122b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80122bc:	e0e5      	b.n	801248a <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 80122be:	f107 030c 	add.w	r3, r7, #12
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7fb fc66 	bl	800db94 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	0c1b      	lsrs	r3, r3, #16
 80122cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80122d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80122da:	2b02      	cmp	r3, #2
 80122dc:	d103      	bne.n	80122e6 <lfs_rawmount+0x106>
 80122de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d011      	beq.n	801230a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 80122e6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80122ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80122ee:	4970      	ldr	r1, [pc, #448]	; (80124b0 <lfs_rawmount+0x2d0>)
 80122f0:	9101      	str	r1, [sp, #4]
 80122f2:	9300      	str	r3, [sp, #0]
 80122f4:	4613      	mov	r3, r2
 80122f6:	f640 6291 	movw	r2, #3729	; 0xe91
 80122fa:	496e      	ldr	r1, [pc, #440]	; (80124b4 <lfs_rawmount+0x2d4>)
 80122fc:	486e      	ldr	r0, [pc, #440]	; (80124b8 <lfs_rawmount+0x2d8>)
 80122fe:	f011 fab1 	bl	8023864 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8012302:	f06f 0315 	mvn.w	r3, #21
 8012306:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8012308:	e054      	b.n	80123b4 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d018      	beq.n	8012342 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8012310:	69ba      	ldr	r2, [r7, #24]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012316:	429a      	cmp	r2, r3
 8012318:	d910      	bls.n	801233c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 801231a:	69ba      	ldr	r2, [r7, #24]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012320:	4963      	ldr	r1, [pc, #396]	; (80124b0 <lfs_rawmount+0x2d0>)
 8012322:	9101      	str	r1, [sp, #4]
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	4613      	mov	r3, r2
 8012328:	f640 629a 	movw	r2, #3738	; 0xe9a
 801232c:	4961      	ldr	r1, [pc, #388]	; (80124b4 <lfs_rawmount+0x2d4>)
 801232e:	4863      	ldr	r0, [pc, #396]	; (80124bc <lfs_rawmount+0x2dc>)
 8012330:	f011 fa98 	bl	8023864 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8012334:	f06f 0315 	mvn.w	r3, #21
 8012338:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 801233a:	e03b      	b.n	80123b4 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 801233c:	69ba      	ldr	r2, [r7, #24]
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d018      	beq.n	801237a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8012348:	69fa      	ldr	r2, [r7, #28]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801234e:	429a      	cmp	r2, r3
 8012350:	d910      	bls.n	8012374 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8012352:	69fa      	ldr	r2, [r7, #28]
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012358:	4955      	ldr	r1, [pc, #340]	; (80124b0 <lfs_rawmount+0x2d0>)
 801235a:	9101      	str	r1, [sp, #4]
 801235c:	9300      	str	r3, [sp, #0]
 801235e:	4613      	mov	r3, r2
 8012360:	f640 62a5 	movw	r2, #3749	; 0xea5
 8012364:	4953      	ldr	r1, [pc, #332]	; (80124b4 <lfs_rawmount+0x2d4>)
 8012366:	4856      	ldr	r0, [pc, #344]	; (80124c0 <lfs_rawmount+0x2e0>)
 8012368:	f011 fa7c 	bl	8023864 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 801236c:	f06f 0315 	mvn.w	r3, #21
 8012370:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8012372:	e01f      	b.n	80123b4 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 8012374:	69fa      	ldr	r2, [r7, #28]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 801237a:	6a3b      	ldr	r3, [r7, #32]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d01a      	beq.n	80123b6 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 8012380:	6a3a      	ldr	r2, [r7, #32]
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012386:	429a      	cmp	r2, r3
 8012388:	d910      	bls.n	80123ac <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 801238a:	6a3a      	ldr	r2, [r7, #32]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012390:	4947      	ldr	r1, [pc, #284]	; (80124b0 <lfs_rawmount+0x2d0>)
 8012392:	9101      	str	r1, [sp, #4]
 8012394:	9300      	str	r3, [sp, #0]
 8012396:	4613      	mov	r3, r2
 8012398:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 801239c:	4945      	ldr	r1, [pc, #276]	; (80124b4 <lfs_rawmount+0x2d4>)
 801239e:	4849      	ldr	r0, [pc, #292]	; (80124c4 <lfs_rawmount+0x2e4>)
 80123a0:	f011 fa60 	bl	8023864 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80123a4:	f06f 0315 	mvn.w	r3, #21
 80123a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80123aa:	e003      	b.n	80123b4 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 80123ac:	6a3a      	ldr	r2, [r7, #32]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	675a      	str	r2, [r3, #116]	; 0x74
 80123b2:	e000      	b.n	80123b6 <lfs_rawmount+0x1d6>
            goto cleanup;
 80123b4:	e069      	b.n	801248a <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80123bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80123c0:	4619      	mov	r1, r3
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fc fcc8 	bl	800ed58 <lfs_dir_getgstate>
 80123c8:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 80123ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d15b      	bne.n	8012488 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 80123d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80123d4:	3318      	adds	r3, #24
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fb f9a3 	bl	800d722 <lfs_pair_isnull>
 80123dc:	4603      	mov	r3, r0
 80123de:	f083 0301 	eor.w	r3, r3, #1
 80123e2:	b2db      	uxtb	r3, r3
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	f47f af16 	bne.w	8012216 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	3320      	adds	r3, #32
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7fb f997 	bl	800d722 <lfs_pair_isnull>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d003      	beq.n	8012402 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 80123fa:	f06f 0315 	mvn.w	r3, #21
 80123fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8012400:	e043      	b.n	801248a <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	3330      	adds	r3, #48	; 0x30
 8012406:	4618      	mov	r0, r3
 8012408:	f7fb fae2 	bl	800d9d0 <lfs_gstate_iszero>
 801240c:	4603      	mov	r3, r0
 801240e:	f083 0301 	eor.w	r3, r3, #1
 8012412:	b2db      	uxtb	r3, r3
 8012414:	2b00      	cmp	r3, #0
 8012416:	d010      	beq.n	801243a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012424:	4822      	ldr	r0, [pc, #136]	; (80124b0 <lfs_rawmount+0x2d0>)
 8012426:	9002      	str	r0, [sp, #8]
 8012428:	9201      	str	r2, [sp, #4]
 801242a:	9300      	str	r3, [sp, #0]
 801242c:	460b      	mov	r3, r1
 801242e:	f640 62c9 	movw	r2, #3785	; 0xec9
 8012432:	4920      	ldr	r1, [pc, #128]	; (80124b4 <lfs_rawmount+0x2d4>)
 8012434:	4824      	ldr	r0, [pc, #144]	; (80124c8 <lfs_rawmount+0x2e8>)
 8012436:	f011 fa15 	bl	8023864 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801243e:	4618      	mov	r0, r3
 8012440:	f7fb fa15 	bl	800d86e <lfs_tag_isvalid>
 8012444:	4603      	mov	r3, r0
 8012446:	f083 0301 	eor.w	r3, r3, #1
 801244a:	b2db      	uxtb	r3, r3
 801244c:	461a      	mov	r2, r3
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012452:	441a      	add	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	687a      	ldr	r2, [r7, #4]
 801245c:	333c      	adds	r3, #60	; 0x3c
 801245e:	3230      	adds	r2, #48	; 0x30
 8012460:	ca07      	ldmia	r2, {r0, r1, r2}
 8012462:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801246a:	687a      	ldr	r2, [r7, #4]
 801246c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801246e:	6a12      	ldr	r2, [r2, #32]
 8012470:	fbb3 f1f2 	udiv	r1, r3, r2
 8012474:	fb01 f202 	mul.w	r2, r1, r2
 8012478:	1a9a      	subs	r2, r3, r2
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 801247e:	6878      	ldr	r0, [r7, #4]
 8012480:	f7fb fc8f 	bl	800dda2 <lfs_alloc_drop>

    return 0;
 8012484:	2300      	movs	r3, #0
 8012486:	e004      	b.n	8012492 <lfs_rawmount+0x2b2>
            goto cleanup;
 8012488:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f81e 	bl	80124cc <lfs_rawunmount>
    return err;
 8012490:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8012492:	4618      	mov	r0, r3
 8012494:	3760      	adds	r7, #96	; 0x60
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	080287bc 	.word	0x080287bc
 80124a0:	0800eeb1 	.word	0x0800eeb1
 80124a4:	0ff00008 	.word	0x0ff00008
 80124a8:	7ffffc00 	.word	0x7ffffc00
 80124ac:	20100018 	.word	0x20100018
 80124b0:	080283bc 	.word	0x080283bc
 80124b4:	080282b0 	.word	0x080282b0
 80124b8:	080287c8 	.word	0x080287c8
 80124bc:	080287f4 	.word	0x080287f4
 80124c0:	08028828 	.word	0x08028828
 80124c4:	0802885c 	.word	0x0802885c
 80124c8:	08028890 	.word	0x08028890

080124cc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 80124d4:	6878      	ldr	r0, [r7, #4]
 80124d6:	f7ff fdbb 	bl	8012050 <lfs_deinit>
 80124da:	4603      	mov	r3, r0
}
 80124dc:	4618      	mov	r0, r3
 80124de:	3708      	adds	r7, #8
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 80124e4:	b590      	push	{r4, r7, lr}
 80124e6:	b09d      	sub	sp, #116	; 0x74
 80124e8:	af04      	add	r7, sp, #16
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	607a      	str	r2, [r7, #4]
 80124f0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 80124f2:	f107 0318 	add.w	r3, r7, #24
 80124f6:	2220      	movs	r2, #32
 80124f8:	2100      	movs	r1, #0
 80124fa:	4618      	mov	r0, r3
 80124fc:	f011 fb78 	bl	8023bf0 <memset>
 8012500:	2301      	movs	r3, #1
 8012502:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8012504:	2300      	movs	r3, #0
 8012506:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8012508:	e0a7      	b.n	801265a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801250e:	6a1b      	ldr	r3, [r3, #32]
 8012510:	085b      	lsrs	r3, r3, #1
 8012512:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012514:	429a      	cmp	r2, r3
 8012516:	d302      	bcc.n	801251e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8012518:	f06f 0353 	mvn.w	r3, #83	; 0x53
 801251c:	e102      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 801251e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012520:	3301      	adds	r3, #1
 8012522:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8012524:	2300      	movs	r3, #0
 8012526:	65bb      	str	r3, [r7, #88]	; 0x58
 8012528:	e013      	b.n	8012552 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 801252a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801252c:	3306      	adds	r3, #6
 801252e:	009b      	lsls	r3, r3, #2
 8012530:	3360      	adds	r3, #96	; 0x60
 8012532:	443b      	add	r3, r7
 8012534:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	4611      	mov	r1, r2
 801253c:	6878      	ldr	r0, [r7, #4]
 801253e:	4798      	blx	r3
 8012540:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8012542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012544:	2b00      	cmp	r3, #0
 8012546:	d001      	beq.n	801254c <lfs_fs_rawtraverse+0x68>
                return err;
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	e0eb      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 801254c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801254e:	3301      	adds	r3, #1
 8012550:	65bb      	str	r3, [r7, #88]	; 0x58
 8012552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012554:	2b01      	cmp	r3, #1
 8012556:	dde8      	ble.n	801252a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8012558:	f107 0318 	add.w	r3, r7, #24
 801255c:	f103 0218 	add.w	r2, r3, #24
 8012560:	f107 0318 	add.w	r3, r7, #24
 8012564:	4619      	mov	r1, r3
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	f7fc fbda 	bl	800ed20 <lfs_dir_fetch>
 801256c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 801256e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012570:	2b00      	cmp	r3, #0
 8012572:	d001      	beq.n	8012578 <lfs_fs_rawtraverse+0x94>
            return err;
 8012574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012576:	e0d5      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8012578:	2300      	movs	r3, #0
 801257a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801257e:	e067      	b.n	8012650 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8012580:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012584:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8012586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801258a:	f043 0308 	orr.w	r3, r3, #8
 801258e:	f107 0118 	add.w	r1, r7, #24
 8012592:	f107 0210 	add.w	r2, r7, #16
 8012596:	9200      	str	r2, [sp, #0]
 8012598:	4a64      	ldr	r2, [pc, #400]	; (801272c <lfs_fs_rawtraverse+0x248>)
 801259a:	68f8      	ldr	r0, [r7, #12]
 801259c:	f7fb fdac 	bl	800e0f8 <lfs_dir_get>
 80125a0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 80125a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	da05      	bge.n	80125b4 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 80125a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125aa:	f113 0f02 	cmn.w	r3, #2
 80125ae:	d049      	beq.n	8012644 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 80125b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125b2:	e0b7      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 80125b4:	f107 0310 	add.w	r3, r7, #16
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fb fabb 	bl	800db34 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 80125be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125c0:	4618      	mov	r0, r3
 80125c2:	f7fb f985 	bl	800d8d0 <lfs_tag_type3>
 80125c6:	4603      	mov	r3, r0
 80125c8:	461a      	mov	r2, r3
 80125ca:	f240 2302 	movw	r3, #514	; 0x202
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d113      	bne.n	80125fa <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 80125d2:	68f9      	ldr	r1, [r7, #12]
 80125d4:	6938      	ldr	r0, [r7, #16]
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	687a      	ldr	r2, [r7, #4]
 80125da:	9202      	str	r2, [sp, #8]
 80125dc:	68ba      	ldr	r2, [r7, #8]
 80125de:	9201      	str	r2, [sp, #4]
 80125e0:	9300      	str	r3, [sp, #0]
 80125e2:	4603      	mov	r3, r0
 80125e4:	460a      	mov	r2, r1
 80125e6:	2100      	movs	r1, #0
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f7fe fb91 	bl	8010d10 <lfs_ctz_traverse>
 80125ee:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 80125f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d027      	beq.n	8012646 <lfs_fs_rawtraverse+0x162>
                    return err;
 80125f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125f8:	e094      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d022      	beq.n	8012646 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8012600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012602:	4618      	mov	r0, r3
 8012604:	f7fb f964 	bl	800d8d0 <lfs_tag_type3>
 8012608:	4603      	mov	r3, r0
            } else if (includeorphans &&
 801260a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801260e:	d11a      	bne.n	8012646 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8012610:	2300      	movs	r3, #0
 8012612:	653b      	str	r3, [r7, #80]	; 0x50
 8012614:	e012      	b.n	801263c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8012616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	f107 0210 	add.w	r2, r7, #16
 801261e:	4413      	add	r3, r2
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	4611      	mov	r1, r2
 8012626:	6878      	ldr	r0, [r7, #4]
 8012628:	4798      	blx	r3
 801262a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 801262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <lfs_fs_rawtraverse+0x152>
                        return err;
 8012632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012634:	e076      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8012636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012638:	3301      	adds	r3, #1
 801263a:	653b      	str	r3, [r7, #80]	; 0x50
 801263c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801263e:	2b01      	cmp	r3, #1
 8012640:	dde9      	ble.n	8012616 <lfs_fs_rawtraverse+0x132>
 8012642:	e000      	b.n	8012646 <lfs_fs_rawtraverse+0x162>
                    continue;
 8012644:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8012646:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801264a:	3301      	adds	r3, #1
 801264c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012650:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012652:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8012656:	429a      	cmp	r2, r3
 8012658:	d392      	bcc.n	8012580 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 801265a:	f107 0318 	add.w	r3, r7, #24
 801265e:	3318      	adds	r3, #24
 8012660:	4618      	mov	r0, r3
 8012662:	f7fb f85e 	bl	800d722 <lfs_pair_isnull>
 8012666:	4603      	mov	r3, r0
 8012668:	f083 0301 	eor.w	r3, r3, #1
 801266c:	b2db      	uxtb	r3, r3
 801266e:	2b00      	cmp	r3, #0
 8012670:	f47f af4b 	bne.w	801250a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012678:	64fb      	str	r3, [r7, #76]	; 0x4c
 801267a:	e04f      	b.n	801271c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 801267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801267e:	799b      	ldrb	r3, [r3, #6]
 8012680:	2b01      	cmp	r3, #1
 8012682:	d147      	bne.n	8012714 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8012684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d01d      	beq.n	80126cc <lfs_fs_rawtraverse+0x1e8>
 8012690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012698:	2b00      	cmp	r3, #0
 801269a:	d117      	bne.n	80126cc <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 801269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801269e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80126a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	9202      	str	r2, [sp, #8]
 80126b0:	68ba      	ldr	r2, [r7, #8]
 80126b2:	9201      	str	r2, [sp, #4]
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	4623      	mov	r3, r4
 80126b8:	4602      	mov	r2, r0
 80126ba:	68f8      	ldr	r0, [r7, #12]
 80126bc:	f7fe fb28 	bl	8010d10 <lfs_ctz_traverse>
 80126c0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 80126c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d001      	beq.n	80126cc <lfs_fs_rawtraverse+0x1e8>
                return err;
 80126c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126ca:	e02b      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 80126cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d01e      	beq.n	8012716 <lfs_fs_rawtraverse+0x232>
 80126d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d118      	bne.n	8012716 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80126e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80126ea:	68f8      	ldr	r0, [r7, #12]
 80126ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ee:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80126f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	9202      	str	r2, [sp, #8]
 80126f8:	68ba      	ldr	r2, [r7, #8]
 80126fa:	9201      	str	r2, [sp, #4]
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	4623      	mov	r3, r4
 8012700:	4602      	mov	r2, r0
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7fe fb04 	bl	8010d10 <lfs_ctz_traverse>
 8012708:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 801270a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <lfs_fs_rawtraverse+0x232>
                return err;
 8012710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012712:	e007      	b.n	8012724 <lfs_fs_rawtraverse+0x240>
            continue;
 8012714:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8012716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1ac      	bne.n	801267c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8012722:	2300      	movs	r3, #0
}
 8012724:	4618      	mov	r0, r3
 8012726:	3764      	adds	r7, #100	; 0x64
 8012728:	46bd      	mov	sp, r7
 801272a:	bd90      	pop	{r4, r7, pc}
 801272c:	700ffc00 	.word	0x700ffc00

08012730 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2200      	movs	r2, #0
 8012740:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2201      	movs	r2, #1
 8012746:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8012748:	2300      	movs	r3, #0
 801274a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 801274c:	e024      	b.n	8012798 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012752:	6a1b      	ldr	r3, [r3, #32]
 8012754:	085b      	lsrs	r3, r3, #1
 8012756:	697a      	ldr	r2, [r7, #20]
 8012758:	429a      	cmp	r2, r3
 801275a:	d302      	bcc.n	8012762 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 801275c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012760:	e027      	b.n	80127b2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	3301      	adds	r3, #1
 8012766:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	3318      	adds	r3, #24
 801276c:	68b9      	ldr	r1, [r7, #8]
 801276e:	4618      	mov	r0, r3
 8012770:	f7fa fff2 	bl	800d758 <lfs_pair_cmp>
 8012774:	4603      	mov	r3, r0
 8012776:	2b00      	cmp	r3, #0
 8012778:	d101      	bne.n	801277e <lfs_fs_pred+0x4e>
            return 0;
 801277a:	2300      	movs	r3, #0
 801277c:	e019      	b.n	80127b2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	3318      	adds	r3, #24
 8012782:	461a      	mov	r2, r3
 8012784:	6879      	ldr	r1, [r7, #4]
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	f7fc faca 	bl	800ed20 <lfs_dir_fetch>
 801278c:	6138      	str	r0, [r7, #16]
        if (err) {
 801278e:	693b      	ldr	r3, [r7, #16]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <lfs_fs_pred+0x68>
            return err;
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	e00c      	b.n	80127b2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	3318      	adds	r3, #24
 801279c:	4618      	mov	r0, r3
 801279e:	f7fa ffc0 	bl	800d722 <lfs_pair_isnull>
 80127a2:	4603      	mov	r3, r0
 80127a4:	f083 0301 	eor.w	r3, r3, #1
 80127a8:	b2db      	uxtb	r3, r3
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1cf      	bne.n	801274e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80127ae:	f06f 0301 	mvn.w	r3, #1
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3718      	adds	r7, #24
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80127ba:	b5b0      	push	{r4, r5, r7, lr}
 80127bc:	b08e      	sub	sp, #56	; 0x38
 80127be:	af04      	add	r7, sp, #16
 80127c0:	60f8      	str	r0, [r7, #12]
 80127c2:	60b9      	str	r1, [r7, #8]
 80127c4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80127ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80127da:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80127dc:	6a3b      	ldr	r3, [r7, #32]
 80127de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127e0:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	69fa      	ldr	r2, [r7, #28]
 80127e8:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80127ea:	2108      	movs	r1, #8
 80127ec:	9103      	str	r1, [sp, #12]
 80127ee:	f107 0110 	add.w	r1, r7, #16
 80127f2:	9102      	str	r1, [sp, #8]
 80127f4:	9201      	str	r2, [sp, #4]
 80127f6:	9300      	str	r3, [sp, #0]
 80127f8:	462b      	mov	r3, r5
 80127fa:	4622      	mov	r2, r4
 80127fc:	4601      	mov	r1, r0
 80127fe:	6a38      	ldr	r0, [r7, #32]
 8012800:	f7fa fc58 	bl	800d0b4 <lfs_bd_read>
 8012804:	61b8      	str	r0, [r7, #24]
    if (err) {
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d001      	beq.n	8012810 <lfs_fs_parent_match+0x56>
        return err;
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	e012      	b.n	8012836 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8012810:	f107 0310 	add.w	r3, r7, #16
 8012814:	4618      	mov	r0, r3
 8012816:	f7fa fff6 	bl	800d806 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 801281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281c:	1d1a      	adds	r2, r3, #4
 801281e:	f107 0310 	add.w	r3, r7, #16
 8012822:	4611      	mov	r1, r2
 8012824:	4618      	mov	r0, r3
 8012826:	f7fa ff97 	bl	800d758 <lfs_pair_cmp>
 801282a:	4603      	mov	r3, r0
 801282c:	2b00      	cmp	r3, #0
 801282e:	bf14      	ite	ne
 8012830:	2301      	movne	r3, #1
 8012832:	2300      	moveq	r3, #0
 8012834:	b2db      	uxtb	r3, r3
}
 8012836:	4618      	mov	r0, r3
 8012838:	3728      	adds	r7, #40	; 0x28
 801283a:	46bd      	mov	sp, r7
 801283c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012840 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8012840:	b580      	push	{r7, lr}
 8012842:	b08e      	sub	sp, #56	; 0x38
 8012844:	af04      	add	r7, sp, #16
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	2200      	movs	r2, #0
 8012850:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2201      	movs	r2, #1
 8012856:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8012858:	2300      	movs	r3, #0
 801285a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 801285c:	e030      	b.n	80128c0 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012862:	6a1b      	ldr	r3, [r3, #32]
 8012864:	085b      	lsrs	r3, r3, #1
 8012866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012868:	429a      	cmp	r2, r3
 801286a:	d302      	bcc.n	8012872 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 801286c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012870:	e033      	b.n	80128da <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	3301      	adds	r3, #1
 8012876:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8012886:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8012888:	68bb      	ldr	r3, [r7, #8]
 801288a:	3304      	adds	r3, #4
 801288c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801288e:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8012890:	f107 0314 	add.w	r3, r7, #20
 8012894:	9303      	str	r3, [sp, #12]
 8012896:	4b13      	ldr	r3, [pc, #76]	; (80128e4 <lfs_fs_parent+0xa4>)
 8012898:	9302      	str	r3, [sp, #8]
 801289a:	2300      	movs	r3, #0
 801289c:	9301      	str	r3, [sp, #4]
 801289e:	4b12      	ldr	r3, [pc, #72]	; (80128e8 <lfs_fs_parent+0xa8>)
 80128a0:	9300      	str	r3, [sp, #0]
 80128a2:	4b12      	ldr	r3, [pc, #72]	; (80128ec <lfs_fs_parent+0xac>)
 80128a4:	6879      	ldr	r1, [r7, #4]
 80128a6:	68f8      	ldr	r0, [r7, #12]
 80128a8:	f7fb fece 	bl	800e648 <lfs_dir_fetchmatch>
 80128ac:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 80128ae:	6a3b      	ldr	r3, [r7, #32]
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d005      	beq.n	80128c0 <lfs_fs_parent+0x80>
 80128b4:	6a3b      	ldr	r3, [r7, #32]
 80128b6:	f113 0f02 	cmn.w	r3, #2
 80128ba:	d001      	beq.n	80128c0 <lfs_fs_parent+0x80>
            return tag;
 80128bc:	6a3b      	ldr	r3, [r7, #32]
 80128be:	e00c      	b.n	80128da <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3318      	adds	r3, #24
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fa ff2c 	bl	800d722 <lfs_pair_isnull>
 80128ca:	4603      	mov	r3, r0
 80128cc:	f083 0301 	eor.w	r3, r3, #1
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d1c3      	bne.n	801285e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80128d6:	f06f 0301 	mvn.w	r3, #1
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3728      	adds	r7, #40	; 0x28
 80128de:	46bd      	mov	sp, r7
 80128e0:	bd80      	pop	{r7, pc}
 80128e2:	bf00      	nop
 80128e4:	080127bb 	.word	0x080127bb
 80128e8:	20000008 	.word	0x20000008
 80128ec:	7ff003ff 	.word	0x7ff003ff

080128f0 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b0a6      	sub	sp, #152	; 0x98
 80128f4:	af04      	add	r7, sp, #16
 80128f6:	60f8      	str	r0, [r7, #12]
 80128f8:	60b9      	str	r1, [r7, #8]
 80128fa:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	3320      	adds	r3, #32
 8012900:	4619      	mov	r1, r3
 8012902:	68b8      	ldr	r0, [r7, #8]
 8012904:	f7fa ff28 	bl	800d758 <lfs_pair_cmp>
 8012908:	4603      	mov	r3, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	d107      	bne.n	801291e <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681a      	ldr	r2, [r3, #0]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	685a      	ldr	r2, [r3, #4]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012926:	e031      	b.n	801298c <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8012928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801292c:	3308      	adds	r3, #8
 801292e:	4619      	mov	r1, r3
 8012930:	68b8      	ldr	r0, [r7, #8]
 8012932:	f7fa ff11 	bl	800d758 <lfs_pair_cmp>
 8012936:	4603      	mov	r3, r0
 8012938:	2b00      	cmp	r3, #0
 801293a:	d109      	bne.n	8012950 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681a      	ldr	r2, [r3, #0]
 8012940:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012944:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	685a      	ldr	r2, [r3, #4]
 801294a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801294e:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 8012950:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012954:	799b      	ldrb	r3, [r3, #6]
 8012956:	2b02      	cmp	r3, #2
 8012958:	d113      	bne.n	8012982 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 801295a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801295e:	332c      	adds	r3, #44	; 0x2c
 8012960:	4619      	mov	r1, r3
 8012962:	68b8      	ldr	r0, [r7, #8]
 8012964:	f7fa fef8 	bl	800d758 <lfs_pair_cmp>
 8012968:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 801296a:	2b00      	cmp	r3, #0
 801296c:	d109      	bne.n	8012982 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012976:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	685a      	ldr	r2, [r3, #4]
 801297c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012980:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8012982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801298c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1c9      	bne.n	8012928 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8012994:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012998:	461a      	mov	r2, r3
 801299a:	68b9      	ldr	r1, [r7, #8]
 801299c:	68f8      	ldr	r0, [r7, #12]
 801299e:	f7ff ff4f 	bl	8012840 <lfs_fs_parent>
 80129a2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 80129a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	da07      	bge.n	80129be <lfs_fs_relocate+0xce>
 80129ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129b2:	f113 0f02 	cmn.w	r3, #2
 80129b6:	d002      	beq.n	80129be <lfs_fs_relocate+0xce>
        return tag;
 80129b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129bc:	e0f3      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 80129be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80129c2:	f113 0f02 	cmn.w	r3, #2
 80129c6:	d07c      	beq.n	8012ac2 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 80129c8:	2101      	movs	r1, #1
 80129ca:	68f8      	ldr	r0, [r7, #12]
 80129cc:	f000 f8f8 	bl	8012bc0 <lfs_fs_preporphans>
 80129d0:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 80129d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <lfs_fs_relocate+0xec>
            return err;
 80129d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129da:	e0e4      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 80129dc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80129e0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	3330      	adds	r3, #48	; 0x30
 80129e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80129ec:	4611      	mov	r1, r2
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fb f840 	bl	800da74 <lfs_gstate_hasmovehere>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d02d      	beq.n	8012a56 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fa ff90 	bl	800d924 <lfs_tag_id>
 8012a04:	4603      	mov	r3, r0
 8012a06:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 8012a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012a0e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8012a12:	4867      	ldr	r0, [pc, #412]	; (8012bb0 <lfs_fs_relocate+0x2c0>)
 8012a14:	9002      	str	r0, [sp, #8]
 8012a16:	9201      	str	r2, [sp, #4]
 8012a18:	9300      	str	r3, [sp, #0]
 8012a1a:	460b      	mov	r3, r1
 8012a1c:	f640 72c4 	movw	r2, #4036	; 0xfc4
 8012a20:	4964      	ldr	r1, [pc, #400]	; (8012bb4 <lfs_fs_relocate+0x2c4>)
 8012a22:	4865      	ldr	r0, [pc, #404]	; (8012bb8 <lfs_fs_relocate+0x2c8>)
 8012a24:	f010 ff1e 	bl	8023864 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012a28:	2200      	movs	r2, #0
 8012a2a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8012a2e:	68f8      	ldr	r0, [r7, #12]
 8012a30:	f000 f900 	bl	8012c34 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 8012a34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fa ff73 	bl	800d924 <lfs_tag_id>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	461a      	mov	r2, r3
 8012a42:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d205      	bcs.n	8012a56 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 8012a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a4e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8012a52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7fa feef 	bl	800d83a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8012a5c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012a60:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d007      	beq.n	8012a78 <lfs_fs_relocate+0x188>
 8012a68:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012a6c:	029b      	lsls	r3, r3, #10
 8012a6e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8012a72:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8012a76:	e000      	b.n	8012a7a <lfs_fs_relocate+0x18a>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	647b      	str	r3, [r7, #68]	; 0x44
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	653b      	str	r3, [r7, #80]	; 0x50
 8012a8a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012a8e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012a92:	2302      	movs	r3, #2
 8012a94:	68f8      	ldr	r0, [r7, #12]
 8012a96:	f7fd f991 	bl	800fdbc <lfs_dir_commit>
 8012a9a:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 8012a9c:	6878      	ldr	r0, [r7, #4]
 8012a9e:	f7fa feb2 	bl	800d806 <lfs_pair_fromle32>
        if (err) {
 8012aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d001      	beq.n	8012aac <lfs_fs_relocate+0x1bc>
            return err;
 8012aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aaa:	e07c      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 8012aac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012ab0:	68f8      	ldr	r0, [r7, #12]
 8012ab2:	f000 f885 	bl	8012bc0 <lfs_fs_preporphans>
 8012ab6:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 8012ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d001      	beq.n	8012ac2 <lfs_fs_relocate+0x1d2>
            return err;
 8012abe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ac0:	e071      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 8012ac2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	68b9      	ldr	r1, [r7, #8]
 8012aca:	68f8      	ldr	r0, [r7, #12]
 8012acc:	f7ff fe30 	bl	8012730 <lfs_fs_pred>
 8012ad0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 8012ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d005      	beq.n	8012ae4 <lfs_fs_relocate+0x1f4>
 8012ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ada:	f113 0f02 	cmn.w	r3, #2
 8012ade:	d001      	beq.n	8012ae4 <lfs_fs_relocate+0x1f4>
        return err;
 8012ae0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ae2:	e060      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 8012ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ae6:	f113 0f02 	cmn.w	r3, #2
 8012aea:	d05b      	beq.n	8012ba4 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 8012aec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8012af0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	3330      	adds	r3, #48	; 0x30
 8012af8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8012afc:	4611      	mov	r1, r2
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fa ffb8 	bl	800da74 <lfs_gstate_hasmovehere>
 8012b04:	4603      	mov	r3, r0
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d01c      	beq.n	8012b44 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fa ff08 	bl	800d924 <lfs_tag_id>
 8012b14:	4603      	mov	r3, r0
 8012b16:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 8012b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b1e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8012b22:	4823      	ldr	r0, [pc, #140]	; (8012bb0 <lfs_fs_relocate+0x2c0>)
 8012b24:	9002      	str	r0, [sp, #8]
 8012b26:	9201      	str	r2, [sp, #4]
 8012b28:	9300      	str	r3, [sp, #0]
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 8012b30:	4920      	ldr	r1, [pc, #128]	; (8012bb4 <lfs_fs_relocate+0x2c4>)
 8012b32:	4821      	ldr	r0, [pc, #132]	; (8012bb8 <lfs_fs_relocate+0x2c8>)
 8012b34:	f010 fe96 	bl	8023864 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012b38:	2200      	movs	r2, #0
 8012b3a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8012b3e:	68f8      	ldr	r0, [r7, #12]
 8012b40:	f000 f878 	bl	8012c34 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7fa fe78 	bl	800d83a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8012b4a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8012b4e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d007      	beq.n	8012b66 <lfs_fs_relocate+0x276>
 8012b56:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8012b5a:	029b      	lsls	r3, r3, #10
 8012b5c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8012b60:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8012b64:	e000      	b.n	8012b68 <lfs_fs_relocate+0x278>
 8012b66:	2300      	movs	r3, #0
 8012b68:	627b      	str	r3, [r7, #36]	; 0x24
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b6e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012b72:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8012b76:	051a      	lsls	r2, r3, #20
 8012b78:	4b10      	ldr	r3, [pc, #64]	; (8012bbc <lfs_fs_relocate+0x2cc>)
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	633b      	str	r3, [r7, #48]	; 0x30
 8012b82:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8012b86:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012b8a:	2302      	movs	r3, #2
 8012b8c:	68f8      	ldr	r0, [r7, #12]
 8012b8e:	f7fd f915 	bl	800fdbc <lfs_dir_commit>
 8012b92:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f7fa fe36 	bl	800d806 <lfs_pair_fromle32>
        if (err) {
 8012b9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d001      	beq.n	8012ba4 <lfs_fs_relocate+0x2b4>
            return err;
 8012ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012ba2:	e000      	b.n	8012ba6 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 8012ba4:	2300      	movs	r3, #0
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3788      	adds	r7, #136	; 0x88
 8012baa:	46bd      	mov	sp, r7
 8012bac:	bd80      	pop	{r7, pc}
 8012bae:	bf00      	nop
 8012bb0:	080283bc 	.word	0x080283bc
 8012bb4:	080282b0 	.word	0x080282b0
 8012bb8:	080288c8 	.word	0x080288c8
 8012bbc:	000ffc08 	.word	0x000ffc08

08012bc0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8012bc0:	b590      	push	{r4, r7, lr}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7fa feb7 	bl	800d944 <lfs_tag_size>
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d10a      	bne.n	8012bf2 <lfs_fs_preporphans+0x32>
 8012bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	da06      	bge.n	8012bf2 <lfs_fs_preporphans+0x32>
 8012be4:	4b10      	ldr	r3, [pc, #64]	; (8012c28 <lfs_fs_preporphans+0x68>)
 8012be6:	4a11      	ldr	r2, [pc, #68]	; (8012c2c <lfs_fs_preporphans+0x6c>)
 8012be8:	f241 0103 	movw	r1, #4099	; 0x1003
 8012bec:	4810      	ldr	r0, [pc, #64]	; (8012c30 <lfs_fs_preporphans+0x70>)
 8012bee:	f00f ff63 	bl	8022ab8 <__assert_func>
    lfs->gstate.tag += orphans;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012bfa:	441a      	add	r2, r3
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c04:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	3330      	adds	r3, #48	; 0x30
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	f7fa fefc 	bl	800da0a <lfs_gstate_hasorphans>
 8012c12:	4603      	mov	r3, r0
 8012c14:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8012c16:	ea44 0203 	orr.w	r2, r4, r3
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8012c1e:	2300      	movs	r3, #0
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	370c      	adds	r7, #12
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd90      	pop	{r4, r7, pc}
 8012c28:	0802890c 	.word	0x0802890c
 8012c2c:	0802c004 	.word	0x0802c004
 8012c30:	080282b0 	.word	0x080282b0

08012c34 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8012c34:	b480      	push	{r7}
 8012c36:	b085      	sub	sp, #20
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	60f8      	str	r0, [r7, #12]
 8012c3c:	460b      	mov	r3, r1
 8012c3e:	607a      	str	r2, [r7, #4]
 8012c40:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c46:	4a17      	ldr	r2, [pc, #92]	; (8012ca4 <lfs_fs_prepmove+0x70>)
 8012c48:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8012c4a:	897b      	ldrh	r3, [r7, #10]
 8012c4c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8012c50:	428b      	cmp	r3, r1
 8012c52:	d006      	beq.n	8012c62 <lfs_fs_prepmove+0x2e>
 8012c54:	897b      	ldrh	r3, [r7, #10]
 8012c56:	029b      	lsls	r3, r3, #10
 8012c58:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8012c5c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8012c60:	e000      	b.n	8012c64 <lfs_fs_prepmove+0x30>
 8012c62:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8012c64:	431a      	orrs	r2, r3
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 8012c6a:	897b      	ldrh	r3, [r7, #10]
 8012c6c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d002      	beq.n	8012c7a <lfs_fs_prepmove+0x46>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	e000      	b.n	8012c7c <lfs_fs_prepmove+0x48>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	68fa      	ldr	r2, [r7, #12]
 8012c7e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8012c80:	897b      	ldrh	r3, [r7, #10]
 8012c82:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d003      	beq.n	8012c92 <lfs_fs_prepmove+0x5e>
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	3304      	adds	r3, #4
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	e000      	b.n	8012c94 <lfs_fs_prepmove+0x60>
 8012c92:	2300      	movs	r3, #0
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	6393      	str	r3, [r2, #56]	; 0x38
}
 8012c98:	bf00      	nop
 8012c9a:	3714      	adds	r7, #20
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr
 8012ca4:	800003ff 	.word	0x800003ff

08012ca8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8012ca8:	b5b0      	push	{r4, r5, r7, lr}
 8012caa:	b094      	sub	sp, #80	; 0x50
 8012cac:	af04      	add	r7, sp, #16
 8012cae:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	333c      	adds	r3, #60	; 0x3c
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	f7fa feca 	bl	800da4e <lfs_gstate_hasmove>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	f083 0301 	eor.w	r3, r3, #1
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d001      	beq.n	8012cca <lfs_fs_demove+0x22>
        return 0;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	e049      	b.n	8012d5e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	f7fa fe24 	bl	800d924 <lfs_tag_id>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	461a      	mov	r2, r3
 8012ce0:	4b21      	ldr	r3, [pc, #132]	; (8012d68 <lfs_fs_demove+0xc0>)
 8012ce2:	9302      	str	r3, [sp, #8]
 8012ce4:	9201      	str	r2, [sp, #4]
 8012ce6:	9400      	str	r4, [sp, #0]
 8012ce8:	462b      	mov	r3, r5
 8012cea:	f241 021d 	movw	r2, #4125	; 0x101d
 8012cee:	491f      	ldr	r1, [pc, #124]	; (8012d6c <lfs_fs_demove+0xc4>)
 8012cf0:	481f      	ldr	r0, [pc, #124]	; (8012d70 <lfs_fs_demove+0xc8>)
 8012cf2:	f010 fdb7 	bl	8023864 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8012cfc:	f107 0318 	add.w	r3, r7, #24
 8012d00:	4619      	mov	r1, r3
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f7fc f80c 	bl	800ed20 <lfs_dir_fetch>
 8012d08:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 8012d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d001      	beq.n	8012d14 <lfs_fs_demove+0x6c>
        return err;
 8012d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d12:	e024      	b.n	8012d5e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fa fe03 	bl	800d924 <lfs_tag_id>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8012d22:	2200      	movs	r2, #0
 8012d24:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8012d28:	6878      	ldr	r0, [r7, #4]
 8012d2a:	f7ff ff83 	bl	8012c34 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 8012d2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012d30:	029b      	lsls	r3, r3, #10
 8012d32:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8012d36:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8012d3a:	613b      	str	r3, [r7, #16]
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	617b      	str	r3, [r7, #20]
 8012d40:	f107 0210 	add.w	r2, r7, #16
 8012d44:	f107 0118 	add.w	r1, r7, #24
 8012d48:	2301      	movs	r3, #1
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7fd f836 	bl	800fdbc <lfs_dir_commit>
 8012d50:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8012d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d001      	beq.n	8012d5c <lfs_fs_demove+0xb4>
        return err;
 8012d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5a:	e000      	b.n	8012d5e <lfs_fs_demove+0xb6>
    }

    return 0;
 8012d5c:	2300      	movs	r3, #0
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3740      	adds	r7, #64	; 0x40
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bdb0      	pop	{r4, r5, r7, pc}
 8012d66:	bf00      	nop
 8012d68:	080283bc 	.word	0x080283bc
 8012d6c:	080282b0 	.word	0x080282b0
 8012d70:	08028940 	.word	0x08028940

08012d74 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 8012d74:	b5b0      	push	{r4, r5, r7, lr}
 8012d76:	b0a8      	sub	sp, #160	; 0xa0
 8012d78:	af04      	add	r7, sp, #16
 8012d7a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	3330      	adds	r3, #48	; 0x30
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7fa fe42 	bl	800da0a <lfs_gstate_hasorphans>
 8012d86:	4603      	mov	r3, r0
 8012d88:	f083 0301 	eor.w	r3, r3, #1
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d001      	beq.n	8012d96 <lfs_fs_deorphan+0x22>
        return 0;
 8012d92:	2300      	movs	r3, #0
 8012d94:	e0e6      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8012d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012d9a:	2220      	movs	r2, #32
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f010 ff26 	bl	8023bf0 <memset>
 8012da4:	2301      	movs	r3, #1
 8012da6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8012daa:	2301      	movs	r3, #1
 8012dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 8012db0:	e0bd      	b.n	8012f2e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8012db2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012db6:	f103 0218 	add.w	r2, r3, #24
 8012dba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7fb ffad 	bl	800ed20 <lfs_dir_fetch>
 8012dc6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 8012dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d002      	beq.n	8012dd8 <lfs_fs_deorphan+0x64>
            return err;
 8012dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012dd6:	e0c5      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 8012dd8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8012ddc:	f083 0301 	eor.w	r3, r3, #1
 8012de0:	b2db      	uxtb	r3, r3
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f000 8099 	beq.w	8012f1a <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 8012de8:	f107 020c 	add.w	r2, r7, #12
 8012dec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012df0:	3318      	adds	r3, #24
 8012df2:	4619      	mov	r1, r3
 8012df4:	6878      	ldr	r0, [r7, #4]
 8012df6:	f7ff fd23 	bl	8012840 <lfs_fs_parent>
 8012dfa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 8012dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	da07      	bge.n	8012e16 <lfs_fs_deorphan+0xa2>
 8012e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e0a:	f113 0f02 	cmn.w	r3, #2
 8012e0e:	d002      	beq.n	8012e16 <lfs_fs_deorphan+0xa2>
                return tag;
 8012e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e14:	e0a6      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 8012e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e1a:	f113 0f02 	cmn.w	r3, #2
 8012e1e:	d11d      	bne.n	8012e5c <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8012e20:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012e26:	4951      	ldr	r1, [pc, #324]	; (8012f6c <lfs_fs_deorphan+0x1f8>)
 8012e28:	9101      	str	r1, [sp, #4]
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	4613      	mov	r3, r2
 8012e2e:	f241 0252 	movw	r2, #4178	; 0x1052
 8012e32:	494f      	ldr	r1, [pc, #316]	; (8012f70 <lfs_fs_deorphan+0x1fc>)
 8012e34:	484f      	ldr	r0, [pc, #316]	; (8012f74 <lfs_fs_deorphan+0x200>)
 8012e36:	f010 fd15 	bl	8023864 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 8012e3a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012e3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e42:	4619      	mov	r1, r3
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7fc fbe3 	bl	800f610 <lfs_dir_drop>
 8012e4a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 8012e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d05d      	beq.n	8012f12 <lfs_fs_deorphan+0x19e>
                    return err;
 8012e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012e5a:	e083      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 8012e5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8012e60:	f107 010c 	add.w	r1, r7, #12
 8012e64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012e68:	9300      	str	r3, [sp, #0]
 8012e6a:	4613      	mov	r3, r2
 8012e6c:	4a42      	ldr	r2, [pc, #264]	; (8012f78 <lfs_fs_deorphan+0x204>)
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7fb f942 	bl	800e0f8 <lfs_dir_get>
 8012e74:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 8012e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	da02      	bge.n	8012e86 <lfs_fs_deorphan+0x112>
                return res;
 8012e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e84:	e06e      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 8012e86:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fa fcbb 	bl	800d806 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 8012e90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e94:	f103 0218 	add.w	r2, r3, #24
 8012e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012e9c:	4611      	mov	r1, r2
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fa fc84 	bl	800d7ac <lfs_pair_sync>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	f083 0301 	eor.w	r3, r3, #1
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d034      	beq.n	8012f1a <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 8012eb0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8012eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012eb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012eb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012eba:	4c2c      	ldr	r4, [pc, #176]	; (8012f6c <lfs_fs_deorphan+0x1f8>)
 8012ebc:	9403      	str	r4, [sp, #12]
 8012ebe:	9102      	str	r1, [sp, #8]
 8012ec0:	9201      	str	r2, [sp, #4]
 8012ec2:	9300      	str	r3, [sp, #0]
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	f241 0268 	movw	r2, #4200	; 0x1068
 8012eca:	4929      	ldr	r1, [pc, #164]	; (8012f70 <lfs_fs_deorphan+0x1fc>)
 8012ecc:	482b      	ldr	r0, [pc, #172]	; (8012f7c <lfs_fs_deorphan+0x208>)
 8012ece:	f010 fcc9 	bl	8023864 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 8012ed2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fa fcaf 	bl	800d83a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 8012edc:	4b28      	ldr	r3, [pc, #160]	; (8012f80 <lfs_fs_deorphan+0x20c>)
 8012ede:	637b      	str	r3, [r7, #52]	; 0x34
 8012ee0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ee6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012eea:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8012eee:	2301      	movs	r3, #1
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7fc ff63 	bl	800fdbc <lfs_dir_commit>
 8012ef6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 8012efa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8012efe:	4618      	mov	r0, r3
 8012f00:	f7fa fc81 	bl	800d806 <lfs_pair_fromle32>
                if (err) {
 8012f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d004      	beq.n	8012f16 <lfs_fs_deorphan+0x1a2>
                    return err;
 8012f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 8012f10:	e028      	b.n	8012f64 <lfs_fs_deorphan+0x1f0>
                continue;
 8012f12:	bf00      	nop
 8012f14:	e00b      	b.n	8012f2e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 8012f16:	bf00      	nop
 8012f18:	e009      	b.n	8012f2e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 8012f1a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8012f1e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8012f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8012f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 8012f2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012f32:	3318      	adds	r3, #24
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7fa fbf4 	bl	800d722 <lfs_pair_isnull>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	f083 0301 	eor.w	r3, r3, #1
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	f47f af35 	bne.w	8012db2 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3330      	adds	r3, #48	; 0x30
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fa fd6f 	bl	800da30 <lfs_gstate_getorphans>
 8012f52:	4603      	mov	r3, r0
 8012f54:	425b      	negs	r3, r3
 8012f56:	b2db      	uxtb	r3, r3
 8012f58:	b25b      	sxtb	r3, r3
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f7ff fe2f 	bl	8012bc0 <lfs_fs_preporphans>
 8012f62:	4603      	mov	r3, r0
}
 8012f64:	4618      	mov	r0, r3
 8012f66:	3790      	adds	r7, #144	; 0x90
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8012f6c:	080283bc 	.word	0x080283bc
 8012f70:	080282b0 	.word	0x080282b0
 8012f74:	08028974 	.word	0x08028974
 8012f78:	7ffffc00 	.word	0x7ffffc00
 8012f7c:	080289a4 	.word	0x080289a4
 8012f80:	600ffc08 	.word	0x600ffc08

08012f84 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b084      	sub	sp, #16
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 8012f8c:	6878      	ldr	r0, [r7, #4]
 8012f8e:	f7ff fe8b 	bl	8012ca8 <lfs_fs_demove>
 8012f92:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d001      	beq.n	8012f9e <lfs_fs_forceconsistency+0x1a>
        return err;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	e009      	b.n	8012fb2 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7ff fee8 	bl	8012d74 <lfs_fs_deorphan>
 8012fa4:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d001      	beq.n	8012fb0 <lfs_fs_forceconsistency+0x2c>
        return err;
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	e000      	b.n	8012fb2 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}

08012fba <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	1c5a      	adds	r2, r3, #1
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	601a      	str	r2, [r3, #0]
    return 0;
 8012fd2:	2300      	movs	r3, #0
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b084      	sub	sp, #16
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8012fe8:	2300      	movs	r3, #0
 8012fea:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8012fec:	f107 0208 	add.w	r2, r7, #8
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	4907      	ldr	r1, [pc, #28]	; (8013010 <lfs_fs_rawsize+0x30>)
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f7ff fa75 	bl	80124e4 <lfs_fs_rawtraverse>
 8012ffa:	60f8      	str	r0, [r7, #12]
    if (err) {
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d001      	beq.n	8013006 <lfs_fs_rawsize+0x26>
        return err;
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	e000      	b.n	8013008 <lfs_fs_rawsize+0x28>
    }

    return size;
 8013006:	68bb      	ldr	r3, [r7, #8]
}
 8013008:	4618      	mov	r0, r3
 801300a:	3710      	adds	r7, #16
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}
 8013010:	08012fbb 	.word	0x08012fbb

08013014 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801301e:	2300      	movs	r3, #0
 8013020:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d001      	beq.n	801302c <lfs_format+0x18>
        return err;
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	e005      	b.n	8013038 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 801302c:	6839      	ldr	r1, [r7, #0]
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff f836 	bl	80120a0 <lfs_rawformat>
 8013034:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8013036:	68fb      	ldr	r3, [r7, #12]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}

08013040 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801304a:	2300      	movs	r3, #0
 801304c:	60fb      	str	r3, [r7, #12]
    if (err) {
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d001      	beq.n	8013058 <lfs_mount+0x18>
        return err;
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	e005      	b.n	8013064 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8013058:	6839      	ldr	r1, [r7, #0]
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f7ff f8c0 	bl	80121e0 <lfs_rawmount>
 8013060:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8013062:	68fb      	ldr	r3, [r7, #12]
}
 8013064:	4618      	mov	r0, r3
 8013066:	3710      	adds	r7, #16
 8013068:	46bd      	mov	sp, r7
 801306a:	bd80      	pop	{r7, pc}

0801306c <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013078:	2300      	movs	r3, #0
 801307a:	617b      	str	r3, [r7, #20]
    if (err) {
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d001      	beq.n	8013086 <lfs_stat+0x1a>
        return err;
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	e006      	b.n	8013094 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	68f8      	ldr	r0, [r7, #12]
 801308c:	f7fe fe00 	bl	8011c90 <lfs_rawstat>
 8013090:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013092:	697b      	ldr	r3, [r7, #20]
}
 8013094:	4618      	mov	r0, r3
 8013096:	3718      	adds	r7, #24
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <lfs_file_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801309c:	b580      	push	{r7, lr}
 801309e:	b086      	sub	sp, #24
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
 80130a8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80130aa:	2300      	movs	r3, #0
 80130ac:	617b      	str	r3, [r7, #20]
    if (err) {
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d001      	beq.n	80130b8 <lfs_file_open+0x1c>
        return err;
 80130b4:	697b      	ldr	r3, [r7, #20]
 80130b6:	e01a      	b.n	80130ee <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130bc:	68b9      	ldr	r1, [r7, #8]
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fa fdd8 	bl	800dc74 <lfs_mlist_isopen>
 80130c4:	4603      	mov	r3, r0
 80130c6:	f083 0301 	eor.w	r3, r3, #1
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d106      	bne.n	80130de <lfs_file_open+0x42>
 80130d0:	4b09      	ldr	r3, [pc, #36]	; (80130f8 <lfs_file_open+0x5c>)
 80130d2:	4a0a      	ldr	r2, [pc, #40]	; (80130fc <lfs_file_open+0x60>)
 80130d4:	f241 31e8 	movw	r1, #5096	; 0x13e8
 80130d8:	4809      	ldr	r0, [pc, #36]	; (8013100 <lfs_file_open+0x64>)
 80130da:	f00f fced 	bl	8022ab8 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	687a      	ldr	r2, [r7, #4]
 80130e2:	68b9      	ldr	r1, [r7, #8]
 80130e4:	68f8      	ldr	r0, [r7, #12]
 80130e6:	f7fe f859 	bl	801119c <lfs_file_rawopen>
 80130ea:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80130ec:	697b      	ldr	r3, [r7, #20]
}
 80130ee:	4618      	mov	r0, r3
 80130f0:	3718      	adds	r7, #24
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd80      	pop	{r7, pc}
 80130f6:	bf00      	nop
 80130f8:	080289e8 	.word	0x080289e8
 80130fc:	0802c018 	.word	0x0802c018
 8013100:	080282b0 	.word	0x080282b0

08013104 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801310e:	2300      	movs	r3, #0
 8013110:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d001      	beq.n	801311c <lfs_file_close+0x18>
        return err;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	e015      	b.n	8013148 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013120:	6839      	ldr	r1, [r7, #0]
 8013122:	4618      	mov	r0, r3
 8013124:	f7fa fda6 	bl	800dc74 <lfs_mlist_isopen>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d106      	bne.n	801313c <lfs_file_close+0x38>
 801312e:	4b08      	ldr	r3, [pc, #32]	; (8013150 <lfs_file_close+0x4c>)
 8013130:	4a08      	ldr	r2, [pc, #32]	; (8013154 <lfs_file_close+0x50>)
 8013132:	f241 410b 	movw	r1, #5131	; 0x140b
 8013136:	4808      	ldr	r0, [pc, #32]	; (8013158 <lfs_file_close+0x54>)
 8013138:	f00f fcbe 	bl	8022ab8 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 801313c:	6839      	ldr	r1, [r7, #0]
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7fe f844 	bl	80111cc <lfs_file_rawclose>
 8013144:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013146:	68fb      	ldr	r3, [r7, #12]
}
 8013148:	4618      	mov	r0, r3
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	08028a20 	.word	0x08028a20
 8013154:	0802c028 	.word	0x0802c028
 8013158:	080282b0 	.word	0x080282b0

0801315c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af00      	add	r7, sp, #0
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801316a:	2300      	movs	r3, #0
 801316c:	617b      	str	r3, [r7, #20]
    if (err) {
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d001      	beq.n	8013178 <lfs_file_read+0x1c>
        return err;
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	e017      	b.n	80131a8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801317c:	68b9      	ldr	r1, [r7, #8]
 801317e:	4618      	mov	r0, r3
 8013180:	f7fa fd78 	bl	800dc74 <lfs_mlist_isopen>
 8013184:	4603      	mov	r3, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	d106      	bne.n	8013198 <lfs_file_read+0x3c>
 801318a:	4b09      	ldr	r3, [pc, #36]	; (80131b0 <lfs_file_read+0x54>)
 801318c:	4a09      	ldr	r2, [pc, #36]	; (80131b4 <lfs_file_read+0x58>)
 801318e:	f241 412d 	movw	r1, #5165	; 0x142d
 8013192:	4809      	ldr	r0, [pc, #36]	; (80131b8 <lfs_file_read+0x5c>)
 8013194:	f00f fc90 	bl	8022ab8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	68b9      	ldr	r1, [r7, #8]
 801319e:	68f8      	ldr	r0, [r7, #12]
 80131a0:	f7fe fa8e 	bl	80116c0 <lfs_file_rawread>
 80131a4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 80131a6:	693b      	ldr	r3, [r7, #16]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	3718      	adds	r7, #24
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}
 80131b0:	08028a20 	.word	0x08028a20
 80131b4:	0802c038 	.word	0x0802c038
 80131b8:	080282b0 	.word	0x080282b0

080131bc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 80131bc:	b580      	push	{r7, lr}
 80131be:	b086      	sub	sp, #24
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	60f8      	str	r0, [r7, #12]
 80131c4:	60b9      	str	r1, [r7, #8]
 80131c6:	607a      	str	r2, [r7, #4]
 80131c8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80131ca:	2300      	movs	r3, #0
 80131cc:	617b      	str	r3, [r7, #20]
    if (err) {
 80131ce:	697b      	ldr	r3, [r7, #20]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d001      	beq.n	80131d8 <lfs_file_write+0x1c>
        return err;
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	e017      	b.n	8013208 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131dc:	68b9      	ldr	r1, [r7, #8]
 80131de:	4618      	mov	r0, r3
 80131e0:	f7fa fd48 	bl	800dc74 <lfs_mlist_isopen>
 80131e4:	4603      	mov	r3, r0
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d106      	bne.n	80131f8 <lfs_file_write+0x3c>
 80131ea:	4b09      	ldr	r3, [pc, #36]	; (8013210 <lfs_file_write+0x54>)
 80131ec:	4a09      	ldr	r2, [pc, #36]	; (8013214 <lfs_file_write+0x58>)
 80131ee:	f241 413f 	movw	r1, #5183	; 0x143f
 80131f2:	4809      	ldr	r0, [pc, #36]	; (8013218 <lfs_file_write+0x5c>)
 80131f4:	f00f fc60 	bl	8022ab8 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	687a      	ldr	r2, [r7, #4]
 80131fc:	68b9      	ldr	r1, [r7, #8]
 80131fe:	68f8      	ldr	r0, [r7, #12]
 8013200:	f7fe fb52 	bl	80118a8 <lfs_file_rawwrite>
 8013204:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8013206:	693b      	ldr	r3, [r7, #16]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3718      	adds	r7, #24
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	08028a20 	.word	0x08028a20
 8013214:	0802c048 	.word	0x0802c048
 8013218:	080282b0 	.word	0x080282b0

0801321c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
 8013228:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801322a:	2300      	movs	r3, #0
 801322c:	617b      	str	r3, [r7, #20]
    if (err) {
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d001      	beq.n	8013238 <lfs_file_seek+0x1c>
        return err;
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	e017      	b.n	8013268 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801323c:	68b9      	ldr	r1, [r7, #8]
 801323e:	4618      	mov	r0, r3
 8013240:	f7fa fd18 	bl	800dc74 <lfs_mlist_isopen>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d106      	bne.n	8013258 <lfs_file_seek+0x3c>
 801324a:	4b09      	ldr	r3, [pc, #36]	; (8013270 <lfs_file_seek+0x54>)
 801324c:	4a09      	ldr	r2, [pc, #36]	; (8013274 <lfs_file_seek+0x58>)
 801324e:	f241 4151 	movw	r1, #5201	; 0x1451
 8013252:	4809      	ldr	r0, [pc, #36]	; (8013278 <lfs_file_seek+0x5c>)
 8013254:	f00f fc30 	bl	8022ab8 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	687a      	ldr	r2, [r7, #4]
 801325c:	68b9      	ldr	r1, [r7, #8]
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7fe fcb6 	bl	8011bd0 <lfs_file_rawseek>
 8013264:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8013266:	693b      	ldr	r3, [r7, #16]
}
 8013268:	4618      	mov	r0, r3
 801326a:	3718      	adds	r7, #24
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	08028a20 	.word	0x08028a20
 8013274:	0802c058 	.word	0x0802c058
 8013278:	080282b0 	.word	0x080282b0

0801327c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 801327c:	b580      	push	{r7, lr}
 801327e:	b084      	sub	sp, #16
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013286:	2300      	movs	r3, #0
 8013288:	60fb      	str	r3, [r7, #12]
    if (err) {
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d001      	beq.n	8013294 <lfs_mkdir+0x18>
        return err;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	e005      	b.n	80132a0 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 8013294:	6839      	ldr	r1, [r7, #0]
 8013296:	6878      	ldr	r0, [r7, #4]
 8013298:	f7fd f942 	bl	8010520 <lfs_rawmkdir>
 801329c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801329e:	68fb      	ldr	r3, [r7, #12]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3710      	adds	r7, #16
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b086      	sub	sp, #24
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 80132b4:	2300      	movs	r3, #0
 80132b6:	617b      	str	r3, [r7, #20]
    if (err) {
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d001      	beq.n	80132c2 <lfs_dir_open+0x1a>
        return err;
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	e019      	b.n	80132f6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132c6:	68b9      	ldr	r1, [r7, #8]
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7fa fcd3 	bl	800dc74 <lfs_mlist_isopen>
 80132ce:	4603      	mov	r3, r0
 80132d0:	f083 0301 	eor.w	r3, r3, #1
 80132d4:	b2db      	uxtb	r3, r3
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d106      	bne.n	80132e8 <lfs_dir_open+0x40>
 80132da:	4b09      	ldr	r3, [pc, #36]	; (8013300 <lfs_dir_open+0x58>)
 80132dc:	4a09      	ldr	r2, [pc, #36]	; (8013304 <lfs_dir_open+0x5c>)
 80132de:	f241 41ae 	movw	r1, #5294	; 0x14ae
 80132e2:	4809      	ldr	r0, [pc, #36]	; (8013308 <lfs_dir_open+0x60>)
 80132e4:	f00f fbe8 	bl	8022ab8 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	68b9      	ldr	r1, [r7, #8]
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	f7fd fa57 	bl	80107a0 <lfs_dir_rawopen>
 80132f2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80132f4:	697b      	ldr	r3, [r7, #20]
}
 80132f6:	4618      	mov	r0, r3
 80132f8:	3718      	adds	r7, #24
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}
 80132fe:	bf00      	nop
 8013300:	08028a58 	.word	0x08028a58
 8013304:	0802c068 	.word	0x0802c068
 8013308:	080282b0 	.word	0x080282b0

0801330c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013316:	2300      	movs	r3, #0
 8013318:	60fb      	str	r3, [r7, #12]
    if (err) {
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d001      	beq.n	8013324 <lfs_dir_close+0x18>
        return err;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	e005      	b.n	8013330 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	f7fd fab4 	bl	8010894 <lfs_dir_rawclose>
 801332c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801332e:	68fb      	ldr	r3, [r7, #12]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}

08013338 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8013338:	b580      	push	{r7, lr}
 801333a:	b086      	sub	sp, #24
 801333c:	af00      	add	r7, sp, #0
 801333e:	60f8      	str	r0, [r7, #12]
 8013340:	60b9      	str	r1, [r7, #8]
 8013342:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013344:	2300      	movs	r3, #0
 8013346:	617b      	str	r3, [r7, #20]
    if (err) {
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <lfs_dir_read+0x1a>
        return err;
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	e006      	b.n	8013360 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	68b9      	ldr	r1, [r7, #8]
 8013356:	68f8      	ldr	r0, [r7, #12]
 8013358:	f7fd faaa 	bl	80108b0 <lfs_dir_rawread>
 801335c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 801335e:	697b      	ldr	r3, [r7, #20]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8013368:	b480      	push	{r7}
 801336a:	b087      	sub	sp, #28
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8013378:	2300      	movs	r3, #0
 801337a:	617b      	str	r3, [r7, #20]
 801337c:	e024      	b.n	80133c8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	091a      	lsrs	r2, r3, #4
 8013382:	6939      	ldr	r1, [r7, #16]
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	440b      	add	r3, r1
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	4619      	mov	r1, r3
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	404b      	eors	r3, r1
 8013390:	f003 030f 	and.w	r3, r3, #15
 8013394:	4912      	ldr	r1, [pc, #72]	; (80133e0 <lfs_crc+0x78>)
 8013396:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801339a:	4053      	eors	r3, r2
 801339c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	091a      	lsrs	r2, r3, #4
 80133a2:	6939      	ldr	r1, [r7, #16]
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	440b      	add	r3, r1
 80133a8:	781b      	ldrb	r3, [r3, #0]
 80133aa:	091b      	lsrs	r3, r3, #4
 80133ac:	b2db      	uxtb	r3, r3
 80133ae:	4619      	mov	r1, r3
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	404b      	eors	r3, r1
 80133b4:	f003 030f 	and.w	r3, r3, #15
 80133b8:	4909      	ldr	r1, [pc, #36]	; (80133e0 <lfs_crc+0x78>)
 80133ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80133be:	4053      	eors	r3, r2
 80133c0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 80133c2:	697b      	ldr	r3, [r7, #20]
 80133c4:	3301      	adds	r3, #1
 80133c6:	617b      	str	r3, [r7, #20]
 80133c8:	697a      	ldr	r2, [r7, #20]
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d3d6      	bcc.n	801337e <lfs_crc+0x16>
    }

    return crc;
 80133d0:	68fb      	ldr	r3, [r7, #12]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	371c      	adds	r7, #28
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	0802c078 	.word	0x0802c078

080133e4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b084      	sub	sp, #16
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
 80133ec:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	330c      	adds	r3, #12
 80133f4:	461a      	mov	r2, r3
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f002 fa59 	bl	80158b0 <tcpip_send_msg_wait_sem>
 80133fe:	4603      	mov	r3, r0
 8013400:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d103      	bne.n	8013412 <netconn_apimsg+0x2e>
    return apimsg->err;
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013410:	e001      	b.n	8013416 <netconn_apimsg+0x32>
  }
  return err;
 8013412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
	...

08013420 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b08c      	sub	sp, #48	; 0x30
 8013424:	af00      	add	r7, sp, #0
 8013426:	4603      	mov	r3, r0
 8013428:	603a      	str	r2, [r7, #0]
 801342a:	71fb      	strb	r3, [r7, #7]
 801342c:	460b      	mov	r3, r1
 801342e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8013430:	79fb      	ldrb	r3, [r7, #7]
 8013432:	6839      	ldr	r1, [r7, #0]
 8013434:	4618      	mov	r0, r3
 8013436:	f001 f949 	bl	80146cc <netconn_alloc>
 801343a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 801343c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801343e:	2b00      	cmp	r3, #0
 8013440:	d054      	beq.n	80134ec <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8013442:	79bb      	ldrb	r3, [r7, #6]
 8013444:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8013446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013448:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801344a:	f107 0308 	add.w	r3, r7, #8
 801344e:	4619      	mov	r1, r3
 8013450:	4829      	ldr	r0, [pc, #164]	; (80134f8 <netconn_new_with_proto_and_callback+0xd8>)
 8013452:	f7ff ffc7 	bl	80133e4 <netconn_apimsg>
 8013456:	4603      	mov	r3, r0
 8013458:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 801345c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013460:	2b00      	cmp	r3, #0
 8013462:	d043      	beq.n	80134ec <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8013464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013466:	685b      	ldr	r3, [r3, #4]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d005      	beq.n	8013478 <netconn_new_with_proto_and_callback+0x58>
 801346c:	4b23      	ldr	r3, [pc, #140]	; (80134fc <netconn_new_with_proto_and_callback+0xdc>)
 801346e:	22a3      	movs	r2, #163	; 0xa3
 8013470:	4923      	ldr	r1, [pc, #140]	; (8013500 <netconn_new_with_proto_and_callback+0xe0>)
 8013472:	4824      	ldr	r0, [pc, #144]	; (8013504 <netconn_new_with_proto_and_callback+0xe4>)
 8013474:	f010 f9f6 	bl	8023864 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8013478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347a:	3310      	adds	r3, #16
 801347c:	4618      	mov	r0, r3
 801347e:	f00e f852 	bl	8021526 <sys_mbox_valid>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d105      	bne.n	8013494 <netconn_new_with_proto_and_callback+0x74>
 8013488:	4b1c      	ldr	r3, [pc, #112]	; (80134fc <netconn_new_with_proto_and_callback+0xdc>)
 801348a:	22a4      	movs	r2, #164	; 0xa4
 801348c:	491e      	ldr	r1, [pc, #120]	; (8013508 <netconn_new_with_proto_and_callback+0xe8>)
 801348e:	481d      	ldr	r0, [pc, #116]	; (8013504 <netconn_new_with_proto_and_callback+0xe4>)
 8013490:	f010 f9e8 	bl	8023864 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8013494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013496:	3314      	adds	r3, #20
 8013498:	4618      	mov	r0, r3
 801349a:	f00e f844 	bl	8021526 <sys_mbox_valid>
 801349e:	4603      	mov	r3, r0
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d005      	beq.n	80134b0 <netconn_new_with_proto_and_callback+0x90>
 80134a4:	4b15      	ldr	r3, [pc, #84]	; (80134fc <netconn_new_with_proto_and_callback+0xdc>)
 80134a6:	22a6      	movs	r2, #166	; 0xa6
 80134a8:	4918      	ldr	r1, [pc, #96]	; (801350c <netconn_new_with_proto_and_callback+0xec>)
 80134aa:	4816      	ldr	r0, [pc, #88]	; (8013504 <netconn_new_with_proto_and_callback+0xe4>)
 80134ac:	f010 f9da 	bl	8023864 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80134b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b2:	330c      	adds	r3, #12
 80134b4:	4618      	mov	r0, r3
 80134b6:	f00e f8c7 	bl	8021648 <sys_sem_valid>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d105      	bne.n	80134cc <netconn_new_with_proto_and_callback+0xac>
 80134c0:	4b0e      	ldr	r3, [pc, #56]	; (80134fc <netconn_new_with_proto_and_callback+0xdc>)
 80134c2:	22a9      	movs	r2, #169	; 0xa9
 80134c4:	4912      	ldr	r1, [pc, #72]	; (8013510 <netconn_new_with_proto_and_callback+0xf0>)
 80134c6:	480f      	ldr	r0, [pc, #60]	; (8013504 <netconn_new_with_proto_and_callback+0xe4>)
 80134c8:	f010 f9cc 	bl	8023864 <iprintf>
      sys_sem_free(&conn->op_completed);
 80134cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ce:	330c      	adds	r3, #12
 80134d0:	4618      	mov	r0, r3
 80134d2:	f00e f8ac 	bl	802162e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	3310      	adds	r3, #16
 80134da:	4618      	mov	r0, r3
 80134dc:	f00d ff9c 	bl	8021418 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80134e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134e2:	2007      	movs	r0, #7
 80134e4:	f003 fa5c 	bl	80169a0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80134e8:	2300      	movs	r3, #0
 80134ea:	e000      	b.n	80134ee <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80134ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3730      	adds	r7, #48	; 0x30
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	080146a1 	.word	0x080146a1
 80134fc:	08028a90 	.word	0x08028a90
 8013500:	08028ac4 	.word	0x08028ac4
 8013504:	08028ae8 	.word	0x08028ae8
 8013508:	08028b10 	.word	0x08028b10
 801350c:	08028b28 	.word	0x08028b28
 8013510:	08028b4c 	.word	0x08028b4c

08013514 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b08c      	sub	sp, #48	; 0x30
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d101      	bne.n	8013526 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8013522:	2300      	movs	r3, #0
 8013524:	e014      	b.n	8013550 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801352a:	2329      	movs	r3, #41	; 0x29
 801352c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801352e:	f107 030c 	add.w	r3, r7, #12
 8013532:	4619      	mov	r1, r3
 8013534:	4808      	ldr	r0, [pc, #32]	; (8013558 <netconn_prepare_delete+0x44>)
 8013536:	f7ff ff55 	bl	80133e4 <netconn_apimsg>
 801353a:	4603      	mov	r3, r0
 801353c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8013540:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <netconn_prepare_delete+0x3a>
    return err;
 8013548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801354c:	e000      	b.n	8013550 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801354e:	2300      	movs	r3, #0
}
 8013550:	4618      	mov	r0, r3
 8013552:	3730      	adds	r7, #48	; 0x30
 8013554:	46bd      	mov	sp, r7
 8013556:	bd80      	pop	{r7, pc}
 8013558:	08014c15 	.word	0x08014c15

0801355c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d101      	bne.n	801356e <netconn_delete+0x12>
    return ERR_OK;
 801356a:	2300      	movs	r3, #0
 801356c:	e00d      	b.n	801358a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f7ff ffd0 	bl	8013514 <netconn_prepare_delete>
 8013574:	4603      	mov	r3, r0
 8013576:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8013578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d102      	bne.n	8013586 <netconn_delete+0x2a>
    netconn_free(conn);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f001 f915 	bl	80147b0 <netconn_free>
  }
  return err;
 8013586:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801358a:	4618      	mov	r0, r3
 801358c:	3710      	adds	r7, #16
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
	...

08013594 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b08e      	sub	sp, #56	; 0x38
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	4613      	mov	r3, r2
 80135a0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d109      	bne.n	80135bc <netconn_bind+0x28>
 80135a8:	4b11      	ldr	r3, [pc, #68]	; (80135f0 <netconn_bind+0x5c>)
 80135aa:	f44f 729c 	mov.w	r2, #312	; 0x138
 80135ae:	4911      	ldr	r1, [pc, #68]	; (80135f4 <netconn_bind+0x60>)
 80135b0:	4811      	ldr	r0, [pc, #68]	; (80135f8 <netconn_bind+0x64>)
 80135b2:	f010 f957 	bl	8023864 <iprintf>
 80135b6:	f06f 030f 	mvn.w	r3, #15
 80135ba:	e015      	b.n	80135e8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d101      	bne.n	80135c6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80135c2:	4b0e      	ldr	r3, [pc, #56]	; (80135fc <netconn_bind+0x68>)
 80135c4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80135ce:	88fb      	ldrh	r3, [r7, #6]
 80135d0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80135d2:	f107 0314 	add.w	r3, r7, #20
 80135d6:	4619      	mov	r1, r3
 80135d8:	4809      	ldr	r0, [pc, #36]	; (8013600 <netconn_bind+0x6c>)
 80135da:	f7ff ff03 	bl	80133e4 <netconn_apimsg>
 80135de:	4603      	mov	r3, r0
 80135e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80135e4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3738      	adds	r7, #56	; 0x38
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bd80      	pop	{r7, pc}
 80135f0:	08028a90 	.word	0x08028a90
 80135f4:	08028bc8 	.word	0x08028bc8
 80135f8:	08028ae8 	.word	0x08028ae8
 80135fc:	0802c1e4 	.word	0x0802c1e4
 8013600:	08014de1 	.word	0x08014de1

08013604 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b08c      	sub	sp, #48	; 0x30
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	460b      	mov	r3, r1
 801360e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d109      	bne.n	801362a <netconn_listen_with_backlog+0x26>
 8013616:	4b0d      	ldr	r3, [pc, #52]	; (801364c <netconn_listen_with_backlog+0x48>)
 8013618:	f240 12bb 	movw	r2, #443	; 0x1bb
 801361c:	490c      	ldr	r1, [pc, #48]	; (8013650 <netconn_listen_with_backlog+0x4c>)
 801361e:	480d      	ldr	r0, [pc, #52]	; (8013654 <netconn_listen_with_backlog+0x50>)
 8013620:	f010 f920 	bl	8023864 <iprintf>
 8013624:	f06f 030f 	mvn.w	r3, #15
 8013628:	e00c      	b.n	8013644 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 801362e:	f107 030c 	add.w	r3, r7, #12
 8013632:	4619      	mov	r1, r3
 8013634:	4808      	ldr	r0, [pc, #32]	; (8013658 <netconn_listen_with_backlog+0x54>)
 8013636:	f7ff fed5 	bl	80133e4 <netconn_apimsg>
 801363a:	4603      	mov	r3, r0
 801363c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013640:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8013644:	4618      	mov	r0, r3
 8013646:	3730      	adds	r7, #48	; 0x30
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	08028a90 	.word	0x08028a90
 8013650:	08028c48 	.word	0x08028c48
 8013654:	08028ae8 	.word	0x08028ae8
 8013658:	08014e55 	.word	0x08014e55

0801365c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b086      	sub	sp, #24
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
 8013664:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8013666:	683b      	ldr	r3, [r7, #0]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d109      	bne.n	8013680 <netconn_accept+0x24>
 801366c:	4b42      	ldr	r3, [pc, #264]	; (8013778 <netconn_accept+0x11c>)
 801366e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8013672:	4942      	ldr	r1, [pc, #264]	; (801377c <netconn_accept+0x120>)
 8013674:	4842      	ldr	r0, [pc, #264]	; (8013780 <netconn_accept+0x124>)
 8013676:	f010 f8f5 	bl	8023864 <iprintf>
 801367a:	f06f 030f 	mvn.w	r3, #15
 801367e:	e077      	b.n	8013770 <netconn_accept+0x114>
  *new_conn = NULL;
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	2200      	movs	r2, #0
 8013684:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d109      	bne.n	80136a0 <netconn_accept+0x44>
 801368c:	4b3a      	ldr	r3, [pc, #232]	; (8013778 <netconn_accept+0x11c>)
 801368e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8013692:	493c      	ldr	r1, [pc, #240]	; (8013784 <netconn_accept+0x128>)
 8013694:	483a      	ldr	r0, [pc, #232]	; (8013780 <netconn_accept+0x124>)
 8013696:	f010 f8e5 	bl	8023864 <iprintf>
 801369a:	f06f 030f 	mvn.w	r3, #15
 801369e:	e067      	b.n	8013770 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f000 fb88 	bl	8013db6 <netconn_err>
 80136a6:	4603      	mov	r3, r0
 80136a8:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80136aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80136b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136b6:	e05b      	b.n	8013770 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	3314      	adds	r3, #20
 80136bc:	4618      	mov	r0, r3
 80136be:	f00d ff32 	bl	8021526 <sys_mbox_valid>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d006      	beq.n	80136d6 <netconn_accept+0x7a>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136ce:	f003 0301 	and.w	r3, r3, #1
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d002      	beq.n	80136dc <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80136d6:	f06f 030e 	mvn.w	r3, #14
 80136da:	e049      	b.n	8013770 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80136e2:	f003 0302 	and.w	r3, r3, #2
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d00e      	beq.n	8013708 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	3314      	adds	r3, #20
 80136ee:	f107 020c 	add.w	r2, r7, #12
 80136f2:	4611      	mov	r1, r2
 80136f4:	4618      	mov	r0, r3
 80136f6:	f00d fefa 	bl	80214ee <sys_arch_mbox_tryfetch>
 80136fa:	4603      	mov	r3, r0
 80136fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013700:	d113      	bne.n	801372a <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8013702:	f06f 0306 	mvn.w	r3, #6
 8013706:	e033      	b.n	8013770 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f103 0014 	add.w	r0, r3, #20
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	69da      	ldr	r2, [r3, #28]
 8013712:	f107 030c 	add.w	r3, r7, #12
 8013716:	4619      	mov	r1, r3
 8013718:	f00d feaa 	bl	8021470 <sys_arch_mbox_fetch>
 801371c:	4603      	mov	r3, r0
 801371e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013722:	d102      	bne.n	801372a <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8013724:	f06f 0302 	mvn.w	r3, #2
 8013728:	e022      	b.n	8013770 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801372e:	2b00      	cmp	r3, #0
 8013730:	d005      	beq.n	801373e <netconn_accept+0xe2>
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013736:	2200      	movs	r2, #0
 8013738:	2101      	movs	r1, #1
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	f107 0213 	add.w	r2, r7, #19
 8013744:	4611      	mov	r1, r2
 8013746:	4618      	mov	r0, r3
 8013748:	f000 fb86 	bl	8013e58 <lwip_netconn_is_err_msg>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d002      	beq.n	8013758 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8013752:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013756:	e00b      	b.n	8013770 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d102      	bne.n	8013764 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 801375e:	f06f 030e 	mvn.w	r3, #14
 8013762:	e005      	b.n	8013770 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	697a      	ldr	r2, [r7, #20]
 801376c:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 801376e:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8013770:	4618      	mov	r0, r3
 8013772:	3718      	adds	r7, #24
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}
 8013778:	08028a90 	.word	0x08028a90
 801377c:	08028c68 	.word	0x08028c68
 8013780:	08028ae8 	.word	0x08028ae8
 8013784:	08028c88 	.word	0x08028c88

08013788 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b088      	sub	sp, #32
 801378c:	af00      	add	r7, sp, #0
 801378e:	60f8      	str	r0, [r7, #12]
 8013790:	60b9      	str	r1, [r7, #8]
 8013792:	4613      	mov	r3, r2
 8013794:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8013796:	2300      	movs	r3, #0
 8013798:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d109      	bne.n	80137b4 <netconn_recv_data+0x2c>
 80137a0:	4b5e      	ldr	r3, [pc, #376]	; (801391c <netconn_recv_data+0x194>)
 80137a2:	f44f 7212 	mov.w	r2, #584	; 0x248
 80137a6:	495e      	ldr	r1, [pc, #376]	; (8013920 <netconn_recv_data+0x198>)
 80137a8:	485e      	ldr	r0, [pc, #376]	; (8013924 <netconn_recv_data+0x19c>)
 80137aa:	f010 f85b 	bl	8023864 <iprintf>
 80137ae:	f06f 030f 	mvn.w	r3, #15
 80137b2:	e0ae      	b.n	8013912 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2200      	movs	r2, #0
 80137b8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d109      	bne.n	80137d4 <netconn_recv_data+0x4c>
 80137c0:	4b56      	ldr	r3, [pc, #344]	; (801391c <netconn_recv_data+0x194>)
 80137c2:	f240 224a 	movw	r2, #586	; 0x24a
 80137c6:	4958      	ldr	r1, [pc, #352]	; (8013928 <netconn_recv_data+0x1a0>)
 80137c8:	4856      	ldr	r0, [pc, #344]	; (8013924 <netconn_recv_data+0x19c>)
 80137ca:	f010 f84b 	bl	8023864 <iprintf>
 80137ce:	f06f 030f 	mvn.w	r3, #15
 80137d2:	e09e      	b.n	8013912 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	3310      	adds	r3, #16
 80137d8:	4618      	mov	r0, r3
 80137da:	f00d fea4 	bl	8021526 <sys_mbox_valid>
 80137de:	4603      	mov	r3, r0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10e      	bne.n	8013802 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f000 fae6 	bl	8013db6 <netconn_err>
 80137ea:	4603      	mov	r3, r0
 80137ec:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80137ee:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d002      	beq.n	80137fc <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80137f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80137fa:	e08a      	b.n	8013912 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 80137fc:	f06f 030a 	mvn.w	r3, #10
 8013800:	e087      	b.n	8013912 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013808:	f003 0302 	and.w	r3, r3, #2
 801380c:	2b00      	cmp	r3, #0
 801380e:	d110      	bne.n	8013832 <netconn_recv_data+0xaa>
 8013810:	79fb      	ldrb	r3, [r7, #7]
 8013812:	f003 0304 	and.w	r3, r3, #4
 8013816:	2b00      	cmp	r3, #0
 8013818:	d10b      	bne.n	8013832 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013820:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8013824:	2b00      	cmp	r3, #0
 8013826:	d104      	bne.n	8013832 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d024      	beq.n	801387c <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	3310      	adds	r3, #16
 8013836:	f107 0218 	add.w	r2, r7, #24
 801383a:	4611      	mov	r1, r2
 801383c:	4618      	mov	r0, r3
 801383e:	f00d fe56 	bl	80214ee <sys_arch_mbox_tryfetch>
 8013842:	4603      	mov	r3, r0
 8013844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013848:	d129      	bne.n	801389e <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801384a:	68f8      	ldr	r0, [r7, #12]
 801384c:	f000 fab3 	bl	8013db6 <netconn_err>
 8013850:	4603      	mov	r3, r0
 8013852:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8013854:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d002      	beq.n	8013862 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 801385c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8013860:	e057      	b.n	8013912 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013868:	f003 0301 	and.w	r3, r3, #1
 801386c:	2b00      	cmp	r3, #0
 801386e:	d002      	beq.n	8013876 <netconn_recv_data+0xee>
        return ERR_CONN;
 8013870:	f06f 030a 	mvn.w	r3, #10
 8013874:	e04d      	b.n	8013912 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8013876:	f06f 0306 	mvn.w	r3, #6
 801387a:	e04a      	b.n	8013912 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f103 0010 	add.w	r0, r3, #16
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	69da      	ldr	r2, [r3, #28]
 8013886:	f107 0318 	add.w	r3, r7, #24
 801388a:	4619      	mov	r1, r3
 801388c:	f00d fdf0 	bl	8021470 <sys_arch_mbox_fetch>
 8013890:	4603      	mov	r3, r0
 8013892:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013896:	d102      	bne.n	801389e <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8013898:	f06f 0302 	mvn.w	r3, #2
 801389c:	e039      	b.n	8013912 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	781b      	ldrb	r3, [r3, #0]
 80138a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138a6:	2b10      	cmp	r3, #16
 80138a8:	d117      	bne.n	80138da <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	f107 0217 	add.w	r2, r7, #23
 80138b0:	4611      	mov	r1, r2
 80138b2:	4618      	mov	r0, r3
 80138b4:	f000 fad0 	bl	8013e58 <lwip_netconn_is_err_msg>
 80138b8:	4603      	mov	r3, r0
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d009      	beq.n	80138d2 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80138be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80138c2:	f113 0f0f 	cmn.w	r3, #15
 80138c6:	d101      	bne.n	80138cc <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80138c8:	2300      	movs	r3, #0
 80138ca:	e022      	b.n	8013912 <netconn_recv_data+0x18a>
      }
      return err;
 80138cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80138d0:	e01f      	b.n	8013912 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	891b      	ldrh	r3, [r3, #8]
 80138d6:	83fb      	strh	r3, [r7, #30]
 80138d8:	e00d      	b.n	80138f6 <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d106      	bne.n	80138ee <netconn_recv_data+0x166>
 80138e0:	4b0e      	ldr	r3, [pc, #56]	; (801391c <netconn_recv_data+0x194>)
 80138e2:	f240 2291 	movw	r2, #657	; 0x291
 80138e6:	4911      	ldr	r1, [pc, #68]	; (801392c <netconn_recv_data+0x1a4>)
 80138e8:	480e      	ldr	r0, [pc, #56]	; (8013924 <netconn_recv_data+0x19c>)
 80138ea:	f00f ffbb 	bl	8023864 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	891b      	ldrh	r3, [r3, #8]
 80138f4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d005      	beq.n	801390a <netconn_recv_data+0x182>
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013902:	8bfa      	ldrh	r2, [r7, #30]
 8013904:	2101      	movs	r1, #1
 8013906:	68f8      	ldr	r0, [r7, #12]
 8013908:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801390a:	69ba      	ldr	r2, [r7, #24]
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3720      	adds	r7, #32
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	08028a90 	.word	0x08028a90
 8013920:	08028ca8 	.word	0x08028ca8
 8013924:	08028ae8 	.word	0x08028ae8
 8013928:	08028cc8 	.word	0x08028cc8
 801392c:	08028ce4 	.word	0x08028ce4

08013930 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b084      	sub	sp, #16
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d005      	beq.n	801394e <netconn_tcp_recvd_msg+0x1e>
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	781b      	ldrb	r3, [r3, #0]
 8013946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801394a:	2b10      	cmp	r3, #16
 801394c:	d009      	beq.n	8013962 <netconn_tcp_recvd_msg+0x32>
 801394e:	4b0c      	ldr	r3, [pc, #48]	; (8013980 <netconn_tcp_recvd_msg+0x50>)
 8013950:	f240 22a7 	movw	r2, #679	; 0x2a7
 8013954:	490b      	ldr	r1, [pc, #44]	; (8013984 <netconn_tcp_recvd_msg+0x54>)
 8013956:	480c      	ldr	r0, [pc, #48]	; (8013988 <netconn_tcp_recvd_msg+0x58>)
 8013958:	f00f ff84 	bl	8023864 <iprintf>
 801395c:	f06f 030f 	mvn.w	r3, #15
 8013960:	e00a      	b.n	8013978 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68fa      	ldr	r2, [r7, #12]
 8013966:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	68ba      	ldr	r2, [r7, #8]
 801396c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801396e:	6879      	ldr	r1, [r7, #4]
 8013970:	4806      	ldr	r0, [pc, #24]	; (801398c <netconn_tcp_recvd_msg+0x5c>)
 8013972:	f7ff fd37 	bl	80133e4 <netconn_apimsg>
 8013976:	4603      	mov	r3, r0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3710      	adds	r7, #16
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	08028a90 	.word	0x08028a90
 8013984:	08028cf0 	.word	0x08028cf0
 8013988:	08028ae8 	.word	0x08028ae8
 801398c:	08014f85 	.word	0x08014f85

08013990 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b090      	sub	sp, #64	; 0x40
 8013994:	af00      	add	r7, sp, #0
 8013996:	60f8      	str	r0, [r7, #12]
 8013998:	60b9      	str	r1, [r7, #8]
 801399a:	4613      	mov	r3, r2
 801399c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	3310      	adds	r3, #16
 80139a2:	4618      	mov	r0, r3
 80139a4:	f00d fdbf 	bl	8021526 <sys_mbox_valid>
 80139a8:	4603      	mov	r3, r0
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d102      	bne.n	80139b4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80139ae:	f06f 030a 	mvn.w	r3, #10
 80139b2:	e072      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139ba:	b25b      	sxtb	r3, r3
 80139bc:	2b00      	cmp	r3, #0
 80139be:	da09      	bge.n	80139d4 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80139c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 80139d2:	e03b      	b.n	8013a4c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80139d4:	79fb      	ldrb	r3, [r7, #7]
 80139d6:	461a      	mov	r2, r3
 80139d8:	68b9      	ldr	r1, [r7, #8]
 80139da:	68f8      	ldr	r0, [r7, #12]
 80139dc:	f7ff fed4 	bl	8013788 <netconn_recv_data>
 80139e0:	4603      	mov	r3, r0
 80139e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80139e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d002      	beq.n	80139f4 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80139ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80139f2:	e052      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80139fa:	79fb      	ldrb	r3, [r7, #7]
 80139fc:	f003 0308 	and.w	r3, r3, #8
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d10e      	bne.n	8013a22 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8013a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d002      	beq.n	8013a10 <netconn_recv_data_tcp+0x80>
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a0c:	891b      	ldrh	r3, [r3, #8]
 8013a0e:	e000      	b.n	8013a12 <netconn_recv_data_tcp+0x82>
 8013a10:	2301      	movs	r3, #1
 8013a12:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8013a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013a16:	f107 0214 	add.w	r2, r7, #20
 8013a1a:	4619      	mov	r1, r3
 8013a1c:	68f8      	ldr	r0, [r7, #12]
 8013a1e:	f7ff ff87 	bl	8013930 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8013a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d136      	bne.n	8013a96 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8013a28:	79fb      	ldrb	r3, [r7, #7]
 8013a2a:	f003 0310 	and.w	r3, r3, #16
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d00b      	beq.n	8013a4a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013a3c:	b2da      	uxtb	r2, r3
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8013a44:	f06f 0306 	mvn.w	r3, #6
 8013a48:	e027      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8013a4a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d005      	beq.n	8013a60 <netconn_recv_data_tcp+0xd0>
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a58:	2200      	movs	r2, #0
 8013a5a:	2101      	movs	r1, #1
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d10f      	bne.n	8013a88 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f000 f9a4 	bl	8013db6 <netconn_err>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8013a74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d002      	beq.n	8013a82 <netconn_recv_data_tcp+0xf2>
          return err;
 8013a7c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8013a80:	e00b      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8013a82:	f06f 030d 	mvn.w	r3, #13
 8013a86:	e008      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8013a88:	2101      	movs	r1, #1
 8013a8a:	68f8      	ldr	r0, [r7, #12]
 8013a8c:	f000 f956 	bl	8013d3c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8013a90:	f06f 030e 	mvn.w	r3, #14
 8013a94:	e001      	b.n	8013a9a <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8013a96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3740      	adds	r7, #64	; 0x40
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
	...

08013aa4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b086      	sub	sp, #24
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
 8013aac:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8013aae:	2300      	movs	r3, #0
 8013ab0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8013ab2:	683b      	ldr	r3, [r7, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d109      	bne.n	8013acc <netconn_recv+0x28>
 8013ab8:	4b32      	ldr	r3, [pc, #200]	; (8013b84 <netconn_recv+0xe0>)
 8013aba:	f240 3263 	movw	r2, #867	; 0x363
 8013abe:	4932      	ldr	r1, [pc, #200]	; (8013b88 <netconn_recv+0xe4>)
 8013ac0:	4832      	ldr	r0, [pc, #200]	; (8013b8c <netconn_recv+0xe8>)
 8013ac2:	f00f fecf 	bl	8023864 <iprintf>
 8013ac6:	f06f 030f 	mvn.w	r3, #15
 8013aca:	e056      	b.n	8013b7a <netconn_recv+0xd6>
  *new_buf = NULL;
 8013acc:	683b      	ldr	r3, [r7, #0]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d109      	bne.n	8013aec <netconn_recv+0x48>
 8013ad8:	4b2a      	ldr	r3, [pc, #168]	; (8013b84 <netconn_recv+0xe0>)
 8013ada:	f240 3265 	movw	r2, #869	; 0x365
 8013ade:	492c      	ldr	r1, [pc, #176]	; (8013b90 <netconn_recv+0xec>)
 8013ae0:	482a      	ldr	r0, [pc, #168]	; (8013b8c <netconn_recv+0xe8>)
 8013ae2:	f00f febf 	bl	8023864 <iprintf>
 8013ae6:	f06f 030f 	mvn.w	r3, #15
 8013aea:	e046      	b.n	8013b7a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	781b      	ldrb	r3, [r3, #0]
 8013af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013af4:	2b10      	cmp	r3, #16
 8013af6:	d13a      	bne.n	8013b6e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8013af8:	2300      	movs	r3, #0
 8013afa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013afc:	2006      	movs	r0, #6
 8013afe:	f002 fed9 	bl	80168b4 <memp_malloc>
 8013b02:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d102      	bne.n	8013b10 <netconn_recv+0x6c>
      return ERR_MEM;
 8013b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013b0e:	e034      	b.n	8013b7a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8013b10:	f107 030c 	add.w	r3, r7, #12
 8013b14:	2200      	movs	r2, #0
 8013b16:	4619      	mov	r1, r3
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f7ff ff39 	bl	8013990 <netconn_recv_data_tcp>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013b22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d006      	beq.n	8013b38 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8013b2a:	6979      	ldr	r1, [r7, #20]
 8013b2c:	2006      	movs	r0, #6
 8013b2e:	f002 ff37 	bl	80169a0 <memp_free>
      return err;
 8013b32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b36:	e020      	b.n	8013b7a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <netconn_recv+0xa8>
 8013b3e:	4b11      	ldr	r3, [pc, #68]	; (8013b84 <netconn_recv+0xe0>)
 8013b40:	f240 3279 	movw	r2, #889	; 0x379
 8013b44:	4913      	ldr	r1, [pc, #76]	; (8013b94 <netconn_recv+0xf0>)
 8013b46:	4811      	ldr	r0, [pc, #68]	; (8013b8c <netconn_recv+0xe8>)
 8013b48:	f00f fe8c 	bl	8023864 <iprintf>

    buf->p = p;
 8013b4c:	68fa      	ldr	r2, [r7, #12]
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8013b52:	68fa      	ldr	r2, [r7, #12]
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	2200      	movs	r2, #0
 8013b62:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	697a      	ldr	r2, [r7, #20]
 8013b68:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	e005      	b.n	8013b7a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8013b6e:	2200      	movs	r2, #0
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f7ff fe08 	bl	8013788 <netconn_recv_data>
 8013b78:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3718      	adds	r7, #24
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	08028a90 	.word	0x08028a90
 8013b88:	08028ca8 	.word	0x08028ca8
 8013b8c:	08028ae8 	.word	0x08028ae8
 8013b90:	08028cc8 	.word	0x08028cc8
 8013b94:	08028d40 	.word	0x08028d40

08013b98 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b088      	sub	sp, #32
 8013b9c:	af02      	add	r7, sp, #8
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	607a      	str	r2, [r7, #4]
 8013ba4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8013bae:	78fa      	ldrb	r2, [r7, #3]
 8013bb0:	f107 0110 	add.w	r1, r7, #16
 8013bb4:	6a3b      	ldr	r3, [r7, #32]
 8013bb6:	9300      	str	r3, [sp, #0]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	2201      	movs	r2, #1
 8013bbc:	68f8      	ldr	r0, [r7, #12]
 8013bbe:	f000 f805 	bl	8013bcc <netconn_write_vectors_partly>
 8013bc2:	4603      	mov	r3, r0
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	3718      	adds	r7, #24
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd80      	pop	{r7, pc}

08013bcc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b092      	sub	sp, #72	; 0x48
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	60f8      	str	r0, [r7, #12]
 8013bd4:	60b9      	str	r1, [r7, #8]
 8013bd6:	4611      	mov	r1, r2
 8013bd8:	461a      	mov	r2, r3
 8013bda:	460b      	mov	r3, r1
 8013bdc:	80fb      	strh	r3, [r7, #6]
 8013bde:	4613      	mov	r3, r2
 8013be0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d109      	bne.n	8013bfc <netconn_write_vectors_partly+0x30>
 8013be8:	4b4e      	ldr	r3, [pc, #312]	; (8013d24 <netconn_write_vectors_partly+0x158>)
 8013bea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013bee:	494e      	ldr	r1, [pc, #312]	; (8013d28 <netconn_write_vectors_partly+0x15c>)
 8013bf0:	484e      	ldr	r0, [pc, #312]	; (8013d2c <netconn_write_vectors_partly+0x160>)
 8013bf2:	f00f fe37 	bl	8023864 <iprintf>
 8013bf6:	f06f 030f 	mvn.w	r3, #15
 8013bfa:	e08f      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	781b      	ldrb	r3, [r3, #0]
 8013c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013c04:	2b10      	cmp	r3, #16
 8013c06:	d009      	beq.n	8013c1c <netconn_write_vectors_partly+0x50>
 8013c08:	4b46      	ldr	r3, [pc, #280]	; (8013d24 <netconn_write_vectors_partly+0x158>)
 8013c0a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8013c0e:	4948      	ldr	r1, [pc, #288]	; (8013d30 <netconn_write_vectors_partly+0x164>)
 8013c10:	4846      	ldr	r0, [pc, #280]	; (8013d2c <netconn_write_vectors_partly+0x160>)
 8013c12:	f00f fe27 	bl	8023864 <iprintf>
 8013c16:	f06f 0305 	mvn.w	r3, #5
 8013c1a:	e07f      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c22:	f003 0302 	and.w	r3, r3, #2
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d104      	bne.n	8013c34 <netconn_write_vectors_partly+0x68>
 8013c2a:	797b      	ldrb	r3, [r7, #5]
 8013c2c:	f003 0304 	and.w	r3, r3, #4
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d001      	beq.n	8013c38 <netconn_write_vectors_partly+0x6c>
 8013c34:	2301      	movs	r3, #1
 8013c36:	e000      	b.n	8013c3a <netconn_write_vectors_partly+0x6e>
 8013c38:	2300      	movs	r3, #0
 8013c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8013c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d005      	beq.n	8013c52 <netconn_write_vectors_partly+0x86>
 8013c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d102      	bne.n	8013c52 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8013c4c:	f06f 0305 	mvn.w	r3, #5
 8013c50:	e064      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8013c52:	2300      	movs	r3, #0
 8013c54:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8013c56:	2300      	movs	r3, #0
 8013c58:	643b      	str	r3, [r7, #64]	; 0x40
 8013c5a:	e015      	b.n	8013c88 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8013c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	68ba      	ldr	r2, [r7, #8]
 8013c62:	4413      	add	r3, r2
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c68:	4413      	add	r3, r2
 8013c6a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8013c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c6e:	00db      	lsls	r3, r3, #3
 8013c70:	68ba      	ldr	r2, [r7, #8]
 8013c72:	4413      	add	r3, r2
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d202      	bcs.n	8013c82 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8013c7c:	f06f 0305 	mvn.w	r3, #5
 8013c80:	e04c      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8013c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013c84:	3301      	adds	r3, #1
 8013c86:	643b      	str	r3, [r7, #64]	; 0x40
 8013c88:	88fb      	ldrh	r3, [r7, #6]
 8013c8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	dbe5      	blt.n	8013c5c <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8013c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d101      	bne.n	8013c9a <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8013c96:	2300      	movs	r3, #0
 8013c98:	e040      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8013c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	da0a      	bge.n	8013cb6 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8013ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d102      	bne.n	8013cac <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8013ca6:	f06f 0305 	mvn.w	r3, #5
 8013caa:	e037      	b.n	8013d1c <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8013cac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8013cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8013cbe:	88fb      	ldrh	r3, [r7, #6]
 8013cc0:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8013cc6:	797b      	ldrb	r3, [r7, #5]
 8013cc8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8013ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cce:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8013cd4:	f107 0314 	add.w	r3, r7, #20
 8013cd8:	4619      	mov	r1, r3
 8013cda:	4816      	ldr	r0, [pc, #88]	; (8013d34 <netconn_write_vectors_partly+0x168>)
 8013cdc:	f7ff fb82 	bl	80133e4 <netconn_apimsg>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8013ce6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d114      	bne.n	8013d18 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8013cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d002      	beq.n	8013cfa <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8013cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf8:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8013cfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d10a      	bne.n	8013d18 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8013d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d006      	beq.n	8013d18 <netconn_write_vectors_partly+0x14c>
 8013d0a:	4b06      	ldr	r3, [pc, #24]	; (8013d24 <netconn_write_vectors_partly+0x158>)
 8013d0c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013d10:	4909      	ldr	r1, [pc, #36]	; (8013d38 <netconn_write_vectors_partly+0x16c>)
 8013d12:	4806      	ldr	r0, [pc, #24]	; (8013d2c <netconn_write_vectors_partly+0x160>)
 8013d14:	f00f fda6 	bl	8023864 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8013d18:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3748      	adds	r7, #72	; 0x48
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	08028a90 	.word	0x08028a90
 8013d28:	08028d68 	.word	0x08028d68
 8013d2c:	08028ae8 	.word	0x08028ae8
 8013d30:	08028d84 	.word	0x08028d84
 8013d34:	08015391 	.word	0x08015391
 8013d38:	08028da8 	.word	0x08028da8

08013d3c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b08c      	sub	sp, #48	; 0x30
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
 8013d44:	460b      	mov	r3, r1
 8013d46:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d109      	bne.n	8013d62 <netconn_close_shutdown+0x26>
 8013d4e:	4b0f      	ldr	r3, [pc, #60]	; (8013d8c <netconn_close_shutdown+0x50>)
 8013d50:	f240 4247 	movw	r2, #1095	; 0x447
 8013d54:	490e      	ldr	r1, [pc, #56]	; (8013d90 <netconn_close_shutdown+0x54>)
 8013d56:	480f      	ldr	r0, [pc, #60]	; (8013d94 <netconn_close_shutdown+0x58>)
 8013d58:	f00f fd84 	bl	8023864 <iprintf>
 8013d5c:	f06f 030f 	mvn.w	r3, #15
 8013d60:	e010      	b.n	8013d84 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8013d66:	78fb      	ldrb	r3, [r7, #3]
 8013d68:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013d6a:	2329      	movs	r3, #41	; 0x29
 8013d6c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8013d6e:	f107 030c 	add.w	r3, r7, #12
 8013d72:	4619      	mov	r1, r3
 8013d74:	4808      	ldr	r0, [pc, #32]	; (8013d98 <netconn_close_shutdown+0x5c>)
 8013d76:	f7ff fb35 	bl	80133e4 <netconn_apimsg>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013d80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3730      	adds	r7, #48	; 0x30
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	08028a90 	.word	0x08028a90
 8013d90:	08028dcc 	.word	0x08028dcc
 8013d94:	08028ae8 	.word	0x08028ae8
 8013d98:	080154a9 	.word	0x080154a9

08013d9c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b082      	sub	sp, #8
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8013da4:	2103      	movs	r1, #3
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f7ff ffc8 	bl	8013d3c <netconn_close_shutdown>
 8013dac:	4603      	mov	r3, r0
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3708      	adds	r7, #8
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}

08013db6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8013db6:	b580      	push	{r7, lr}
 8013db8:	b084      	sub	sp, #16
 8013dba:	af00      	add	r7, sp, #0
 8013dbc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d101      	bne.n	8013dc8 <netconn_err+0x12>
    return ERR_OK;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	e00d      	b.n	8013de4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8013dc8:	f00d fcc8 	bl	802175c <sys_arch_protect>
 8013dcc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	7a1b      	ldrb	r3, [r3, #8]
 8013dd2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8013dda:	68f8      	ldr	r0, [r7, #12]
 8013ddc:	f00d fccc 	bl	8021778 <sys_arch_unprotect>
  return err;
 8013de0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3710      	adds	r7, #16
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd80      	pop	{r7, pc}

08013dec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	4603      	mov	r3, r0
 8013df4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8013df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013dfa:	f113 0f0d 	cmn.w	r3, #13
 8013dfe:	d009      	beq.n	8013e14 <lwip_netconn_err_to_msg+0x28>
 8013e00:	f113 0f0d 	cmn.w	r3, #13
 8013e04:	dc0c      	bgt.n	8013e20 <lwip_netconn_err_to_msg+0x34>
 8013e06:	f113 0f0f 	cmn.w	r3, #15
 8013e0a:	d007      	beq.n	8013e1c <lwip_netconn_err_to_msg+0x30>
 8013e0c:	f113 0f0e 	cmn.w	r3, #14
 8013e10:	d002      	beq.n	8013e18 <lwip_netconn_err_to_msg+0x2c>
 8013e12:	e005      	b.n	8013e20 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8013e14:	4b0a      	ldr	r3, [pc, #40]	; (8013e40 <lwip_netconn_err_to_msg+0x54>)
 8013e16:	e00e      	b.n	8013e36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8013e18:	4b0a      	ldr	r3, [pc, #40]	; (8013e44 <lwip_netconn_err_to_msg+0x58>)
 8013e1a:	e00c      	b.n	8013e36 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8013e1c:	4b0a      	ldr	r3, [pc, #40]	; (8013e48 <lwip_netconn_err_to_msg+0x5c>)
 8013e1e:	e00a      	b.n	8013e36 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8013e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d005      	beq.n	8013e34 <lwip_netconn_err_to_msg+0x48>
 8013e28:	4b08      	ldr	r3, [pc, #32]	; (8013e4c <lwip_netconn_err_to_msg+0x60>)
 8013e2a:	227d      	movs	r2, #125	; 0x7d
 8013e2c:	4908      	ldr	r1, [pc, #32]	; (8013e50 <lwip_netconn_err_to_msg+0x64>)
 8013e2e:	4809      	ldr	r0, [pc, #36]	; (8013e54 <lwip_netconn_err_to_msg+0x68>)
 8013e30:	f00f fd18 	bl	8023864 <iprintf>
      return NULL;
 8013e34:	2300      	movs	r3, #0
  }
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	0802c0b8 	.word	0x0802c0b8
 8013e44:	0802c0b9 	.word	0x0802c0b9
 8013e48:	0802c0ba 	.word	0x0802c0ba
 8013e4c:	08028e30 	.word	0x08028e30
 8013e50:	08028e64 	.word	0x08028e64
 8013e54:	08028e74 	.word	0x08028e74

08013e58 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
 8013e60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8013e62:	683b      	ldr	r3, [r7, #0]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d105      	bne.n	8013e74 <lwip_netconn_is_err_msg+0x1c>
 8013e68:	4b12      	ldr	r3, [pc, #72]	; (8013eb4 <lwip_netconn_is_err_msg+0x5c>)
 8013e6a:	2285      	movs	r2, #133	; 0x85
 8013e6c:	4912      	ldr	r1, [pc, #72]	; (8013eb8 <lwip_netconn_is_err_msg+0x60>)
 8013e6e:	4813      	ldr	r0, [pc, #76]	; (8013ebc <lwip_netconn_is_err_msg+0x64>)
 8013e70:	f00f fcf8 	bl	8023864 <iprintf>

  if (msg == &netconn_aborted) {
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	4a12      	ldr	r2, [pc, #72]	; (8013ec0 <lwip_netconn_is_err_msg+0x68>)
 8013e78:	4293      	cmp	r3, r2
 8013e7a:	d104      	bne.n	8013e86 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8013e7c:	683b      	ldr	r3, [r7, #0]
 8013e7e:	22f3      	movs	r2, #243	; 0xf3
 8013e80:	701a      	strb	r2, [r3, #0]
    return 1;
 8013e82:	2301      	movs	r3, #1
 8013e84:	e012      	b.n	8013eac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4a0e      	ldr	r2, [pc, #56]	; (8013ec4 <lwip_netconn_is_err_msg+0x6c>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d104      	bne.n	8013e98 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	22f2      	movs	r2, #242	; 0xf2
 8013e92:	701a      	strb	r2, [r3, #0]
    return 1;
 8013e94:	2301      	movs	r3, #1
 8013e96:	e009      	b.n	8013eac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	4a0b      	ldr	r2, [pc, #44]	; (8013ec8 <lwip_netconn_is_err_msg+0x70>)
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d104      	bne.n	8013eaa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	22f1      	movs	r2, #241	; 0xf1
 8013ea4:	701a      	strb	r2, [r3, #0]
    return 1;
 8013ea6:	2301      	movs	r3, #1
 8013ea8:	e000      	b.n	8013eac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8013eaa:	2300      	movs	r3, #0
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3708      	adds	r7, #8
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}
 8013eb4:	08028e30 	.word	0x08028e30
 8013eb8:	08028e9c 	.word	0x08028e9c
 8013ebc:	08028e74 	.word	0x08028e74
 8013ec0:	0802c0b8 	.word	0x0802c0b8
 8013ec4:	0802c0b9 	.word	0x0802c0b9
 8013ec8:	0802c0ba 	.word	0x0802c0ba

08013ecc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b088      	sub	sp, #32
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	60f8      	str	r0, [r7, #12]
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
 8013ed8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d105      	bne.n	8013eec <recv_udp+0x20>
 8013ee0:	4b34      	ldr	r3, [pc, #208]	; (8013fb4 <recv_udp+0xe8>)
 8013ee2:	22e5      	movs	r2, #229	; 0xe5
 8013ee4:	4934      	ldr	r1, [pc, #208]	; (8013fb8 <recv_udp+0xec>)
 8013ee6:	4835      	ldr	r0, [pc, #212]	; (8013fbc <recv_udp+0xf0>)
 8013ee8:	f00f fcbc 	bl	8023864 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d105      	bne.n	8013efe <recv_udp+0x32>
 8013ef2:	4b30      	ldr	r3, [pc, #192]	; (8013fb4 <recv_udp+0xe8>)
 8013ef4:	22e6      	movs	r2, #230	; 0xe6
 8013ef6:	4932      	ldr	r1, [pc, #200]	; (8013fc0 <recv_udp+0xf4>)
 8013ef8:	4830      	ldr	r0, [pc, #192]	; (8013fbc <recv_udp+0xf0>)
 8013efa:	f00f fcb3 	bl	8023864 <iprintf>
  conn = (struct netconn *)arg;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8013f02:	69fb      	ldr	r3, [r7, #28]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d103      	bne.n	8013f10 <recv_udp+0x44>
    pbuf_free(p);
 8013f08:	6878      	ldr	r0, [r7, #4]
 8013f0a:	f003 fbed 	bl	80176e8 <pbuf_free>
    return;
 8013f0e:	e04d      	b.n	8013fac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	685b      	ldr	r3, [r3, #4]
 8013f14:	68ba      	ldr	r2, [r7, #8]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d005      	beq.n	8013f26 <recv_udp+0x5a>
 8013f1a:	4b26      	ldr	r3, [pc, #152]	; (8013fb4 <recv_udp+0xe8>)
 8013f1c:	22ee      	movs	r2, #238	; 0xee
 8013f1e:	4929      	ldr	r1, [pc, #164]	; (8013fc4 <recv_udp+0xf8>)
 8013f20:	4826      	ldr	r0, [pc, #152]	; (8013fbc <recv_udp+0xf0>)
 8013f22:	f00f fc9f 	bl	8023864 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	3310      	adds	r3, #16
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f00d fafb 	bl	8021526 <sys_mbox_valid>
 8013f30:	4603      	mov	r3, r0
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d103      	bne.n	8013f3e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f003 fbd6 	bl	80176e8 <pbuf_free>
    return;
 8013f3c:	e036      	b.n	8013fac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8013f3e:	2006      	movs	r0, #6
 8013f40:	f002 fcb8 	bl	80168b4 <memp_malloc>
 8013f44:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8013f46:	69bb      	ldr	r3, [r7, #24]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d103      	bne.n	8013f54 <recv_udp+0x88>
    pbuf_free(p);
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f003 fbcb 	bl	80176e8 <pbuf_free>
    return;
 8013f52:	e02b      	b.n	8013fac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8013f54:	69bb      	ldr	r3, [r7, #24]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8013f5a:	69bb      	ldr	r3, [r7, #24]
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d002      	beq.n	8013f6c <recv_udp+0xa0>
 8013f66:	683b      	ldr	r3, [r7, #0]
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	e000      	b.n	8013f6e <recv_udp+0xa2>
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	69ba      	ldr	r2, [r7, #24]
 8013f70:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8013f72:	69bb      	ldr	r3, [r7, #24]
 8013f74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013f76:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	891b      	ldrh	r3, [r3, #8]
 8013f7c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8013f7e:	69fb      	ldr	r3, [r7, #28]
 8013f80:	3310      	adds	r3, #16
 8013f82:	69b9      	ldr	r1, [r7, #24]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f00d fa59 	bl	802143c <sys_mbox_trypost>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d003      	beq.n	8013f98 <recv_udp+0xcc>
    netbuf_delete(buf);
 8013f90:	69b8      	ldr	r0, [r7, #24]
 8013f92:	f001 fb15 	bl	80155c0 <netbuf_delete>
    return;
 8013f96:	e009      	b.n	8013fac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8013f98:	69fb      	ldr	r3, [r7, #28]
 8013f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d005      	beq.n	8013fac <recv_udp+0xe0>
 8013fa0:	69fb      	ldr	r3, [r7, #28]
 8013fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fa4:	8afa      	ldrh	r2, [r7, #22]
 8013fa6:	2100      	movs	r1, #0
 8013fa8:	69f8      	ldr	r0, [r7, #28]
 8013faa:	4798      	blx	r3
  }
}
 8013fac:	3720      	adds	r7, #32
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	bd80      	pop	{r7, pc}
 8013fb2:	bf00      	nop
 8013fb4:	08028e30 	.word	0x08028e30
 8013fb8:	08028ea8 	.word	0x08028ea8
 8013fbc:	08028e74 	.word	0x08028e74
 8013fc0:	08028ecc 	.word	0x08028ecc
 8013fc4:	08028eec 	.word	0x08028eec

08013fc8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
 8013fd4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8013fd6:	68bb      	ldr	r3, [r7, #8]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d106      	bne.n	8013fea <recv_tcp+0x22>
 8013fdc:	4b36      	ldr	r3, [pc, #216]	; (80140b8 <recv_tcp+0xf0>)
 8013fde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013fe2:	4936      	ldr	r1, [pc, #216]	; (80140bc <recv_tcp+0xf4>)
 8013fe4:	4836      	ldr	r0, [pc, #216]	; (80140c0 <recv_tcp+0xf8>)
 8013fe6:	f00f fc3d 	bl	8023864 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d106      	bne.n	8013ffe <recv_tcp+0x36>
 8013ff0:	4b31      	ldr	r3, [pc, #196]	; (80140b8 <recv_tcp+0xf0>)
 8013ff2:	f240 122d 	movw	r2, #301	; 0x12d
 8013ff6:	4933      	ldr	r1, [pc, #204]	; (80140c4 <recv_tcp+0xfc>)
 8013ff8:	4831      	ldr	r0, [pc, #196]	; (80140c0 <recv_tcp+0xf8>)
 8013ffa:	f00f fc33 	bl	8023864 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8013ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d006      	beq.n	8014014 <recv_tcp+0x4c>
 8014006:	4b2c      	ldr	r3, [pc, #176]	; (80140b8 <recv_tcp+0xf0>)
 8014008:	f44f 7297 	mov.w	r2, #302	; 0x12e
 801400c:	492e      	ldr	r1, [pc, #184]	; (80140c8 <recv_tcp+0x100>)
 801400e:	482c      	ldr	r0, [pc, #176]	; (80140c0 <recv_tcp+0xf8>)
 8014010:	f00f fc28 	bl	8023864 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d102      	bne.n	8014024 <recv_tcp+0x5c>
    return ERR_VAL;
 801401e:	f06f 0305 	mvn.w	r3, #5
 8014022:	e045      	b.n	80140b0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	685b      	ldr	r3, [r3, #4]
 8014028:	68ba      	ldr	r2, [r7, #8]
 801402a:	429a      	cmp	r2, r3
 801402c:	d006      	beq.n	801403c <recv_tcp+0x74>
 801402e:	4b22      	ldr	r3, [pc, #136]	; (80140b8 <recv_tcp+0xf0>)
 8014030:	f240 1235 	movw	r2, #309	; 0x135
 8014034:	4925      	ldr	r1, [pc, #148]	; (80140cc <recv_tcp+0x104>)
 8014036:	4822      	ldr	r0, [pc, #136]	; (80140c0 <recv_tcp+0xf8>)
 8014038:	f00f fc14 	bl	8023864 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	3310      	adds	r3, #16
 8014040:	4618      	mov	r0, r3
 8014042:	f00d fa70 	bl	8021526 <sys_mbox_valid>
 8014046:	4603      	mov	r3, r0
 8014048:	2b00      	cmp	r3, #0
 801404a:	d10d      	bne.n	8014068 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d008      	beq.n	8014064 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	891b      	ldrh	r3, [r3, #8]
 8014056:	4619      	mov	r1, r3
 8014058:	68b8      	ldr	r0, [r7, #8]
 801405a:	f004 fc9b 	bl	8018994 <tcp_recved>
      pbuf_free(p);
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f003 fb42 	bl	80176e8 <pbuf_free>
    }
    return ERR_OK;
 8014064:	2300      	movs	r3, #0
 8014066:	e023      	b.n	80140b0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d005      	beq.n	801407a <recv_tcp+0xb2>
    msg = p;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	891b      	ldrh	r3, [r3, #8]
 8014076:	83fb      	strh	r3, [r7, #30]
 8014078:	e003      	b.n	8014082 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801407a:	4b15      	ldr	r3, [pc, #84]	; (80140d0 <recv_tcp+0x108>)
 801407c:	61bb      	str	r3, [r7, #24]
    len = 0;
 801407e:	2300      	movs	r3, #0
 8014080:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	3310      	adds	r3, #16
 8014086:	69b9      	ldr	r1, [r7, #24]
 8014088:	4618      	mov	r0, r3
 801408a:	f00d f9d7 	bl	802143c <sys_mbox_trypost>
 801408e:	4603      	mov	r3, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	d002      	beq.n	801409a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8014094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014098:	e00a      	b.n	80140b0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d005      	beq.n	80140ae <recv_tcp+0xe6>
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140a6:	8bfa      	ldrh	r2, [r7, #30]
 80140a8:	2100      	movs	r1, #0
 80140aa:	6978      	ldr	r0, [r7, #20]
 80140ac:	4798      	blx	r3
  }

  return ERR_OK;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	3720      	adds	r7, #32
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	08028e30 	.word	0x08028e30
 80140bc:	08028f0c 	.word	0x08028f0c
 80140c0:	08028e74 	.word	0x08028e74
 80140c4:	08028f30 	.word	0x08028f30
 80140c8:	08028f50 	.word	0x08028f50
 80140cc:	08028f68 	.word	0x08028f68
 80140d0:	0802c0ba 	.word	0x0802c0ba

080140d4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d106      	bne.n	80140f6 <poll_tcp+0x22>
 80140e8:	4b2b      	ldr	r3, [pc, #172]	; (8014198 <poll_tcp+0xc4>)
 80140ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80140ee:	492b      	ldr	r1, [pc, #172]	; (801419c <poll_tcp+0xc8>)
 80140f0:	482b      	ldr	r0, [pc, #172]	; (80141a0 <poll_tcp+0xcc>)
 80140f2:	f00f fbb7 	bl	8023864 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	785b      	ldrb	r3, [r3, #1]
 80140fa:	2b01      	cmp	r3, #1
 80140fc:	d104      	bne.n	8014108 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80140fe:	2101      	movs	r1, #1
 8014100:	68f8      	ldr	r0, [r7, #12]
 8014102:	f000 ff75 	bl	8014ff0 <lwip_netconn_do_writemore>
 8014106:	e016      	b.n	8014136 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	785b      	ldrb	r3, [r3, #1]
 801410c:	2b04      	cmp	r3, #4
 801410e:	d112      	bne.n	8014136 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00a      	beq.n	801412e <poll_tcp+0x5a>
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411c:	7a5b      	ldrb	r3, [r3, #9]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d005      	beq.n	801412e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014126:	7a5a      	ldrb	r2, [r3, #9]
 8014128:	3a01      	subs	r2, #1
 801412a:	b2d2      	uxtb	r2, r2
 801412c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801412e:	2101      	movs	r1, #1
 8014130:	68f8      	ldr	r0, [r7, #12]
 8014132:	f000 fc05 	bl	8014940 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	f893 3020 	ldrb.w	r3, [r3, #32]
 801413c:	f003 0310 	and.w	r3, r3, #16
 8014140:	2b00      	cmp	r3, #0
 8014142:	d023      	beq.n	801418c <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d01f      	beq.n	801418c <poll_tcp+0xb8>
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	685b      	ldr	r3, [r3, #4]
 8014150:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014154:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8014158:	d318      	bcc.n	801418c <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	685b      	ldr	r3, [r3, #4]
 801415e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014162:	2b04      	cmp	r3, #4
 8014164:	d812      	bhi.n	801418c <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	f893 3020 	ldrb.w	r3, [r3, #32]
 801416c:	f023 0310 	bic.w	r3, r3, #16
 8014170:	b2da      	uxtb	r2, r3
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801417c:	2b00      	cmp	r3, #0
 801417e:	d005      	beq.n	801418c <poll_tcp+0xb8>
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014184:	2200      	movs	r2, #0
 8014186:	2102      	movs	r1, #2
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801418c:	2300      	movs	r3, #0
}
 801418e:	4618      	mov	r0, r3
 8014190:	3710      	adds	r7, #16
 8014192:	46bd      	mov	sp, r7
 8014194:	bd80      	pop	{r7, pc}
 8014196:	bf00      	nop
 8014198:	08028e30 	.word	0x08028e30
 801419c:	08028f88 	.word	0x08028f88
 80141a0:	08028e74 	.word	0x08028e74

080141a4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b086      	sub	sp, #24
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	60f8      	str	r0, [r7, #12]
 80141ac:	60b9      	str	r1, [r7, #8]
 80141ae:	4613      	mov	r3, r2
 80141b0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d106      	bne.n	80141ca <sent_tcp+0x26>
 80141bc:	4b21      	ldr	r3, [pc, #132]	; (8014244 <sent_tcp+0xa0>)
 80141be:	f240 1293 	movw	r2, #403	; 0x193
 80141c2:	4921      	ldr	r1, [pc, #132]	; (8014248 <sent_tcp+0xa4>)
 80141c4:	4821      	ldr	r0, [pc, #132]	; (801424c <sent_tcp+0xa8>)
 80141c6:	f00f fb4d 	bl	8023864 <iprintf>

  if (conn) {
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d034      	beq.n	801423a <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 80141d0:	697b      	ldr	r3, [r7, #20]
 80141d2:	785b      	ldrb	r3, [r3, #1]
 80141d4:	2b01      	cmp	r3, #1
 80141d6:	d104      	bne.n	80141e2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80141d8:	2101      	movs	r1, #1
 80141da:	6978      	ldr	r0, [r7, #20]
 80141dc:	f000 ff08 	bl	8014ff0 <lwip_netconn_do_writemore>
 80141e0:	e007      	b.n	80141f2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80141e2:	697b      	ldr	r3, [r7, #20]
 80141e4:	785b      	ldrb	r3, [r3, #1]
 80141e6:	2b04      	cmp	r3, #4
 80141e8:	d103      	bne.n	80141f2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80141ea:	2101      	movs	r1, #1
 80141ec:	6978      	ldr	r0, [r7, #20]
 80141ee:	f000 fba7 	bl	8014940 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80141f2:	697b      	ldr	r3, [r7, #20]
 80141f4:	685b      	ldr	r3, [r3, #4]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d01f      	beq.n	801423a <sent_tcp+0x96>
 80141fa:	697b      	ldr	r3, [r7, #20]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014202:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8014206:	d318      	bcc.n	801423a <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014210:	2b04      	cmp	r3, #4
 8014212:	d812      	bhi.n	801423a <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	f893 3020 	ldrb.w	r3, [r3, #32]
 801421a:	f023 0310 	bic.w	r3, r3, #16
 801421e:	b2da      	uxtb	r2, r3
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801422a:	2b00      	cmp	r3, #0
 801422c:	d005      	beq.n	801423a <sent_tcp+0x96>
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014232:	88fa      	ldrh	r2, [r7, #6]
 8014234:	2102      	movs	r1, #2
 8014236:	6978      	ldr	r0, [r7, #20]
 8014238:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3718      	adds	r7, #24
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}
 8014244:	08028e30 	.word	0x08028e30
 8014248:	08028f88 	.word	0x08028f88
 801424c:	08028e74 	.word	0x08028e74

08014250 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b088      	sub	sp, #32
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
 8014258:	460b      	mov	r3, r1
 801425a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d106      	bne.n	8014274 <err_tcp+0x24>
 8014266:	4b61      	ldr	r3, [pc, #388]	; (80143ec <err_tcp+0x19c>)
 8014268:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801426c:	4960      	ldr	r1, [pc, #384]	; (80143f0 <err_tcp+0x1a0>)
 801426e:	4861      	ldr	r0, [pc, #388]	; (80143f4 <err_tcp+0x1a4>)
 8014270:	f00f faf8 	bl	8023864 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8014274:	f00d fa72 	bl	802175c <sys_arch_protect>
 8014278:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801427a:	69fb      	ldr	r3, [r7, #28]
 801427c:	2200      	movs	r2, #0
 801427e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	78fa      	ldrb	r2, [r7, #3]
 8014284:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	f893 3020 	ldrb.w	r3, [r3, #32]
 801428c:	f043 0301 	orr.w	r3, r3, #1
 8014290:	b2da      	uxtb	r2, r3
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	785b      	ldrb	r3, [r3, #1]
 801429c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 801429e:	69fb      	ldr	r3, [r7, #28]
 80142a0:	2200      	movs	r2, #0
 80142a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80142a4:	69b8      	ldr	r0, [r7, #24]
 80142a6:	f00d fa67 	bl	8021778 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d005      	beq.n	80142be <err_tcp+0x6e>
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142b6:	2200      	movs	r2, #0
 80142b8:	2104      	movs	r1, #4
 80142ba:	69f8      	ldr	r0, [r7, #28]
 80142bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80142be:	69fb      	ldr	r3, [r7, #28]
 80142c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d005      	beq.n	80142d2 <err_tcp+0x82>
 80142c6:	69fb      	ldr	r3, [r7, #28]
 80142c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ca:	2200      	movs	r2, #0
 80142cc:	2100      	movs	r1, #0
 80142ce:	69f8      	ldr	r0, [r7, #28]
 80142d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d005      	beq.n	80142e6 <err_tcp+0x96>
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142de:	2200      	movs	r2, #0
 80142e0:	2102      	movs	r1, #2
 80142e2:	69f8      	ldr	r0, [r7, #28]
 80142e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80142e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7ff fd7e 	bl	8013dec <lwip_netconn_err_to_msg>
 80142f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80142f2:	69fb      	ldr	r3, [r7, #28]
 80142f4:	3310      	adds	r3, #16
 80142f6:	4618      	mov	r0, r3
 80142f8:	f00d f915 	bl	8021526 <sys_mbox_valid>
 80142fc:	4603      	mov	r3, r0
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d005      	beq.n	801430e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	3310      	adds	r3, #16
 8014306:	6939      	ldr	r1, [r7, #16]
 8014308:	4618      	mov	r0, r3
 801430a:	f00d f897 	bl	802143c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	3314      	adds	r3, #20
 8014312:	4618      	mov	r0, r3
 8014314:	f00d f907 	bl	8021526 <sys_mbox_valid>
 8014318:	4603      	mov	r3, r0
 801431a:	2b00      	cmp	r3, #0
 801431c:	d005      	beq.n	801432a <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801431e:	69fb      	ldr	r3, [r7, #28]
 8014320:	3314      	adds	r3, #20
 8014322:	6939      	ldr	r1, [r7, #16]
 8014324:	4618      	mov	r0, r3
 8014326:	f00d f889 	bl	802143c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801432a:	7dfb      	ldrb	r3, [r7, #23]
 801432c:	2b01      	cmp	r3, #1
 801432e:	d005      	beq.n	801433c <err_tcp+0xec>
 8014330:	7dfb      	ldrb	r3, [r7, #23]
 8014332:	2b04      	cmp	r3, #4
 8014334:	d002      	beq.n	801433c <err_tcp+0xec>
 8014336:	7dfb      	ldrb	r3, [r7, #23]
 8014338:	2b03      	cmp	r3, #3
 801433a:	d146      	bne.n	80143ca <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014342:	f003 0304 	and.w	r3, r3, #4
 8014346:	2b00      	cmp	r3, #0
 8014348:	bf14      	ite	ne
 801434a:	2301      	movne	r3, #1
 801434c:	2300      	moveq	r3, #0
 801434e:	b2db      	uxtb	r3, r3
 8014350:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8014352:	69fb      	ldr	r3, [r7, #28]
 8014354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014358:	f023 0304 	bic.w	r3, r3, #4
 801435c:	b2da      	uxtb	r2, r3
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d13b      	bne.n	80143e2 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801436e:	2b00      	cmp	r3, #0
 8014370:	d106      	bne.n	8014380 <err_tcp+0x130>
 8014372:	4b1e      	ldr	r3, [pc, #120]	; (80143ec <err_tcp+0x19c>)
 8014374:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014378:	491f      	ldr	r1, [pc, #124]	; (80143f8 <err_tcp+0x1a8>)
 801437a:	481e      	ldr	r0, [pc, #120]	; (80143f4 <err_tcp+0x1a4>)
 801437c:	f00f fa72 	bl	8023864 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8014380:	7dfb      	ldrb	r3, [r7, #23]
 8014382:	2b04      	cmp	r3, #4
 8014384:	d104      	bne.n	8014390 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8014386:	69fb      	ldr	r3, [r7, #28]
 8014388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801438a:	2200      	movs	r2, #0
 801438c:	711a      	strb	r2, [r3, #4]
 801438e:	e003      	b.n	8014398 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8014390:	69fb      	ldr	r3, [r7, #28]
 8014392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014394:	78fa      	ldrb	r2, [r7, #3]
 8014396:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	330c      	adds	r3, #12
 80143a0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80143a2:	68b8      	ldr	r0, [r7, #8]
 80143a4:	f00d f950 	bl	8021648 <sys_sem_valid>
 80143a8:	4603      	mov	r3, r0
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d106      	bne.n	80143bc <err_tcp+0x16c>
 80143ae:	4b0f      	ldr	r3, [pc, #60]	; (80143ec <err_tcp+0x19c>)
 80143b0:	f240 12ef 	movw	r2, #495	; 0x1ef
 80143b4:	4911      	ldr	r1, [pc, #68]	; (80143fc <err_tcp+0x1ac>)
 80143b6:	480f      	ldr	r0, [pc, #60]	; (80143f4 <err_tcp+0x1a4>)
 80143b8:	f00f fa54 	bl	8023864 <iprintf>
      conn->current_msg = NULL;
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	2200      	movs	r2, #0
 80143c0:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80143c2:	68b8      	ldr	r0, [r7, #8]
 80143c4:	f00d f926 	bl	8021614 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80143c8:	e00b      	b.n	80143e2 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d008      	beq.n	80143e4 <err_tcp+0x194>
 80143d2:	4b06      	ldr	r3, [pc, #24]	; (80143ec <err_tcp+0x19c>)
 80143d4:	f240 12f7 	movw	r2, #503	; 0x1f7
 80143d8:	4909      	ldr	r1, [pc, #36]	; (8014400 <err_tcp+0x1b0>)
 80143da:	4806      	ldr	r0, [pc, #24]	; (80143f4 <err_tcp+0x1a4>)
 80143dc:	f00f fa42 	bl	8023864 <iprintf>
  }
}
 80143e0:	e000      	b.n	80143e4 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 80143e2:	bf00      	nop
}
 80143e4:	bf00      	nop
 80143e6:	3720      	adds	r7, #32
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	08028e30 	.word	0x08028e30
 80143f0:	08028f88 	.word	0x08028f88
 80143f4:	08028e74 	.word	0x08028e74
 80143f8:	08028f98 	.word	0x08028f98
 80143fc:	08028fb4 	.word	0x08028fb4
 8014400:	08028fd0 	.word	0x08028fd0

08014404 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8014412:	6879      	ldr	r1, [r7, #4]
 8014414:	68f8      	ldr	r0, [r7, #12]
 8014416:	f005 f98f 	bl	8019738 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801441a:	490a      	ldr	r1, [pc, #40]	; (8014444 <setup_tcp+0x40>)
 801441c:	68f8      	ldr	r0, [r7, #12]
 801441e:	f005 f99d 	bl	801975c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014422:	4909      	ldr	r1, [pc, #36]	; (8014448 <setup_tcp+0x44>)
 8014424:	68f8      	ldr	r0, [r7, #12]
 8014426:	f005 f9bb 	bl	80197a0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801442a:	2202      	movs	r2, #2
 801442c:	4907      	ldr	r1, [pc, #28]	; (801444c <setup_tcp+0x48>)
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f005 fa12 	bl	8019858 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014434:	4906      	ldr	r1, [pc, #24]	; (8014450 <setup_tcp+0x4c>)
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	f005 f9d4 	bl	80197e4 <tcp_err>
}
 801443c:	bf00      	nop
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	08013fc9 	.word	0x08013fc9
 8014448:	080141a5 	.word	0x080141a5
 801444c:	080140d5 	.word	0x080140d5
 8014450:	08014251 	.word	0x08014251

08014454 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8014454:	b590      	push	{r4, r7, lr}
 8014456:	b089      	sub	sp, #36	; 0x24
 8014458:	af00      	add	r7, sp, #0
 801445a:	60f8      	str	r0, [r7, #12]
 801445c:	60b9      	str	r1, [r7, #8]
 801445e:	4613      	mov	r3, r2
 8014460:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8014466:	69fb      	ldr	r3, [r7, #28]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <accept_function+0x1e>
    return ERR_VAL;
 801446c:	f06f 0305 	mvn.w	r3, #5
 8014470:	e0a1      	b.n	80145b6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	3314      	adds	r3, #20
 8014476:	4618      	mov	r0, r3
 8014478:	f00d f855 	bl	8021526 <sys_mbox_valid>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d102      	bne.n	8014488 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8014482:	f06f 0305 	mvn.w	r3, #5
 8014486:	e096      	b.n	80145b6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8014488:	68bb      	ldr	r3, [r7, #8]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d11b      	bne.n	80144c6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	f103 0414 	add.w	r4, r3, #20
 8014494:	f06f 000c 	mvn.w	r0, #12
 8014498:	f7ff fca8 	bl	8013dec <lwip_netconn_err_to_msg>
 801449c:	4603      	mov	r3, r0
 801449e:	4619      	mov	r1, r3
 80144a0:	4620      	mov	r0, r4
 80144a2:	f00c ffcb 	bl	802143c <sys_mbox_trypost>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d109      	bne.n	80144c0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80144ac:	69fb      	ldr	r3, [r7, #28]
 80144ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d005      	beq.n	80144c0 <accept_function+0x6c>
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144b8:	2200      	movs	r2, #0
 80144ba:	2100      	movs	r1, #0
 80144bc:	69f8      	ldr	r0, [r7, #28]
 80144be:	4798      	blx	r3
    }
    return ERR_VAL;
 80144c0:	f06f 0305 	mvn.w	r3, #5
 80144c4:	e077      	b.n	80145b6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80144c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d006      	beq.n	80144dc <accept_function+0x88>
 80144ce:	4b3c      	ldr	r3, [pc, #240]	; (80145c0 <accept_function+0x16c>)
 80144d0:	f240 222a 	movw	r2, #554	; 0x22a
 80144d4:	493b      	ldr	r1, [pc, #236]	; (80145c4 <accept_function+0x170>)
 80144d6:	483c      	ldr	r0, [pc, #240]	; (80145c8 <accept_function+0x174>)
 80144d8:	f00f f9c4 	bl	8023864 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80144dc:	69fb      	ldr	r3, [r7, #28]
 80144de:	781a      	ldrb	r2, [r3, #0]
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144e4:	4619      	mov	r1, r3
 80144e6:	4610      	mov	r0, r2
 80144e8:	f000 f8f0 	bl	80146cc <netconn_alloc>
 80144ec:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80144ee:	69bb      	ldr	r3, [r7, #24]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d11b      	bne.n	801452c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	f103 0414 	add.w	r4, r3, #20
 80144fa:	f06f 000c 	mvn.w	r0, #12
 80144fe:	f7ff fc75 	bl	8013dec <lwip_netconn_err_to_msg>
 8014502:	4603      	mov	r3, r0
 8014504:	4619      	mov	r1, r3
 8014506:	4620      	mov	r0, r4
 8014508:	f00c ff98 	bl	802143c <sys_mbox_trypost>
 801450c:	4603      	mov	r3, r0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d109      	bne.n	8014526 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014512:	69fb      	ldr	r3, [r7, #28]
 8014514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014516:	2b00      	cmp	r3, #0
 8014518:	d005      	beq.n	8014526 <accept_function+0xd2>
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801451e:	2200      	movs	r2, #0
 8014520:	2100      	movs	r1, #0
 8014522:	69f8      	ldr	r0, [r7, #28]
 8014524:	4798      	blx	r3
    }
    return ERR_MEM;
 8014526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801452a:	e044      	b.n	80145b6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 801452c:	69bb      	ldr	r3, [r7, #24]
 801452e:	68ba      	ldr	r2, [r7, #8]
 8014530:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8014532:	69b8      	ldr	r0, [r7, #24]
 8014534:	f7ff ff66 	bl	8014404 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	3314      	adds	r3, #20
 801453c:	69b9      	ldr	r1, [r7, #24]
 801453e:	4618      	mov	r0, r3
 8014540:	f00c ff7c 	bl	802143c <sys_mbox_trypost>
 8014544:	4603      	mov	r3, r0
 8014546:	2b00      	cmp	r3, #0
 8014548:	d02a      	beq.n	80145a0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801454a:	69bb      	ldr	r3, [r7, #24]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8014550:	2100      	movs	r1, #0
 8014552:	6978      	ldr	r0, [r7, #20]
 8014554:	f005 f8f0 	bl	8019738 <tcp_arg>
    tcp_recv(pcb, NULL);
 8014558:	2100      	movs	r1, #0
 801455a:	6978      	ldr	r0, [r7, #20]
 801455c:	f005 f8fe 	bl	801975c <tcp_recv>
    tcp_sent(pcb, NULL);
 8014560:	2100      	movs	r1, #0
 8014562:	6978      	ldr	r0, [r7, #20]
 8014564:	f005 f91c 	bl	80197a0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8014568:	2200      	movs	r2, #0
 801456a:	2100      	movs	r1, #0
 801456c:	6978      	ldr	r0, [r7, #20]
 801456e:	f005 f973 	bl	8019858 <tcp_poll>
    tcp_err(pcb, NULL);
 8014572:	2100      	movs	r1, #0
 8014574:	6978      	ldr	r0, [r7, #20]
 8014576:	f005 f935 	bl	80197e4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801457a:	69bb      	ldr	r3, [r7, #24]
 801457c:	2200      	movs	r2, #0
 801457e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8014580:	69bb      	ldr	r3, [r7, #24]
 8014582:	3310      	adds	r3, #16
 8014584:	4618      	mov	r0, r3
 8014586:	f00c ff47 	bl	8021418 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801458a:	69bb      	ldr	r3, [r7, #24]
 801458c:	3310      	adds	r3, #16
 801458e:	4618      	mov	r0, r3
 8014590:	f00c ffda 	bl	8021548 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8014594:	69b8      	ldr	r0, [r7, #24]
 8014596:	f000 f90b 	bl	80147b0 <netconn_free>
    return ERR_MEM;
 801459a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801459e:	e00a      	b.n	80145b6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80145a0:	69fb      	ldr	r3, [r7, #28]
 80145a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d005      	beq.n	80145b4 <accept_function+0x160>
 80145a8:	69fb      	ldr	r3, [r7, #28]
 80145aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ac:	2200      	movs	r2, #0
 80145ae:	2100      	movs	r1, #0
 80145b0:	69f8      	ldr	r0, [r7, #28]
 80145b2:	4798      	blx	r3
  }

  return ERR_OK;
 80145b4:	2300      	movs	r3, #0
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3724      	adds	r7, #36	; 0x24
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd90      	pop	{r4, r7, pc}
 80145be:	bf00      	nop
 80145c0:	08028e30 	.word	0x08028e30
 80145c4:	08028fec 	.word	0x08028fec
 80145c8:	08028e74 	.word	0x08028e74

080145cc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80145cc:	b590      	push	{r4, r7, lr}
 80145ce:	b085      	sub	sp, #20
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80145d4:	2300      	movs	r3, #0
 80145d6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d006      	beq.n	80145f0 <pcb_new+0x24>
 80145e2:	4b2b      	ldr	r3, [pc, #172]	; (8014690 <pcb_new+0xc4>)
 80145e4:	f240 2265 	movw	r2, #613	; 0x265
 80145e8:	492a      	ldr	r1, [pc, #168]	; (8014694 <pcb_new+0xc8>)
 80145ea:	482b      	ldr	r0, [pc, #172]	; (8014698 <pcb_new+0xcc>)
 80145ec:	f00f f93a 	bl	8023864 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	781b      	ldrb	r3, [r3, #0]
 80145f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145fa:	2b10      	cmp	r3, #16
 80145fc:	d022      	beq.n	8014644 <pcb_new+0x78>
 80145fe:	2b20      	cmp	r3, #32
 8014600:	d133      	bne.n	801466a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681c      	ldr	r4, [r3, #0]
 8014606:	7bfb      	ldrb	r3, [r7, #15]
 8014608:	4618      	mov	r0, r3
 801460a:	f00a fb50 	bl	801ecae <udp_new_ip_type>
 801460e:	4603      	mov	r3, r0
 8014610:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	681b      	ldr	r3, [r3, #0]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d02a      	beq.n	8014672 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	2b22      	cmp	r3, #34	; 0x22
 8014624:	d104      	bne.n	8014630 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	685b      	ldr	r3, [r3, #4]
 801462c:	2201      	movs	r2, #1
 801462e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	6858      	ldr	r0, [r3, #4]
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	461a      	mov	r2, r3
 801463c:	4917      	ldr	r1, [pc, #92]	; (801469c <pcb_new+0xd0>)
 801463e:	f00a fabd 	bl	801ebbc <udp_recv>
      }
      break;
 8014642:	e016      	b.n	8014672 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	681c      	ldr	r4, [r3, #0]
 8014648:	7bfb      	ldrb	r3, [r7, #15]
 801464a:	4618      	mov	r0, r3
 801464c:	f005 f866 	bl	801971c <tcp_new_ip_type>
 8014650:	4603      	mov	r3, r0
 8014652:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d00b      	beq.n	8014676 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	4618      	mov	r0, r3
 8014664:	f7ff fece 	bl	8014404 <setup_tcp>
      }
      break;
 8014668:	e005      	b.n	8014676 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	22fa      	movs	r2, #250	; 0xfa
 801466e:	711a      	strb	r2, [r3, #4]
      return;
 8014670:	e00a      	b.n	8014688 <pcb_new+0xbc>
      break;
 8014672:	bf00      	nop
 8014674:	e000      	b.n	8014678 <pcb_new+0xac>
      break;
 8014676:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	685b      	ldr	r3, [r3, #4]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d102      	bne.n	8014688 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	22ff      	movs	r2, #255	; 0xff
 8014686:	711a      	strb	r2, [r3, #4]
  }
}
 8014688:	3714      	adds	r7, #20
 801468a:	46bd      	mov	sp, r7
 801468c:	bd90      	pop	{r4, r7, pc}
 801468e:	bf00      	nop
 8014690:	08028e30 	.word	0x08028e30
 8014694:	08029014 	.word	0x08029014
 8014698:	08028e74 	.word	0x08028e74
 801469c:	08013ecd 	.word	0x08013ecd

080146a0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	2200      	movs	r2, #0
 80146b0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d102      	bne.n	80146c2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	f7ff ff85 	bl	80145cc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80146c2:	bf00      	nop
 80146c4:	3710      	adds	r7, #16
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
	...

080146cc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b086      	sub	sp, #24
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	4603      	mov	r3, r0
 80146d4:	6039      	str	r1, [r7, #0]
 80146d6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80146d8:	2300      	movs	r3, #0
 80146da:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80146dc:	2007      	movs	r0, #7
 80146de:	f002 f8e9 	bl	80168b4 <memp_malloc>
 80146e2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d101      	bne.n	80146ee <netconn_alloc+0x22>
    return NULL;
 80146ea:	2300      	movs	r3, #0
 80146ec:	e056      	b.n	801479c <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	2200      	movs	r2, #0
 80146f2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	79fa      	ldrb	r2, [r7, #7]
 80146f8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2200      	movs	r2, #0
 80146fe:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8014700:	79fb      	ldrb	r3, [r7, #7]
 8014702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014706:	2b10      	cmp	r3, #16
 8014708:	d004      	beq.n	8014714 <netconn_alloc+0x48>
 801470a:	2b20      	cmp	r3, #32
 801470c:	d105      	bne.n	801471a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801470e:	2306      	movs	r3, #6
 8014710:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8014712:	e00a      	b.n	801472a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8014714:	2306      	movs	r3, #6
 8014716:	617b      	str	r3, [r7, #20]
      break;
 8014718:	e007      	b.n	801472a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801471a:	4b22      	ldr	r3, [pc, #136]	; (80147a4 <netconn_alloc+0xd8>)
 801471c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8014720:	4921      	ldr	r1, [pc, #132]	; (80147a8 <netconn_alloc+0xdc>)
 8014722:	4822      	ldr	r0, [pc, #136]	; (80147ac <netconn_alloc+0xe0>)
 8014724:	f00f f89e 	bl	8023864 <iprintf>
      goto free_and_return;
 8014728:	e033      	b.n	8014792 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	3310      	adds	r3, #16
 801472e:	6979      	ldr	r1, [r7, #20]
 8014730:	4618      	mov	r0, r3
 8014732:	f00c fe4f 	bl	80213d4 <sys_mbox_new>
 8014736:	4603      	mov	r3, r0
 8014738:	2b00      	cmp	r3, #0
 801473a:	d129      	bne.n	8014790 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	330c      	adds	r3, #12
 8014740:	2100      	movs	r1, #0
 8014742:	4618      	mov	r0, r3
 8014744:	f00c ff0d 	bl	8021562 <sys_sem_new>
 8014748:	4603      	mov	r3, r0
 801474a:	2b00      	cmp	r3, #0
 801474c:	d005      	beq.n	801475a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	3310      	adds	r3, #16
 8014752:	4618      	mov	r0, r3
 8014754:	f00c fe60 	bl	8021418 <sys_mbox_free>
    goto free_and_return;
 8014758:	e01b      	b.n	8014792 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	3314      	adds	r3, #20
 801475e:	4618      	mov	r0, r3
 8014760:	f00c fef2 	bl	8021548 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	2200      	movs	r2, #0
 8014768:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014770:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	683a      	ldr	r2, [r7, #0]
 8014776:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2200      	movs	r2, #0
 801477c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2200      	movs	r2, #0
 8014782:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	7cfa      	ldrb	r2, [r7, #19]
 8014788:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	e005      	b.n	801479c <netconn_alloc+0xd0>
    goto free_and_return;
 8014790:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8014792:	68f9      	ldr	r1, [r7, #12]
 8014794:	2007      	movs	r0, #7
 8014796:	f002 f903 	bl	80169a0 <memp_free>
  return NULL;
 801479a:	2300      	movs	r3, #0
}
 801479c:	4618      	mov	r0, r3
 801479e:	3718      	adds	r7, #24
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	08028e30 	.word	0x08028e30
 80147a8:	08029034 	.word	0x08029034
 80147ac:	08028e74 	.word	0x08028e74

080147b0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	685b      	ldr	r3, [r3, #4]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d006      	beq.n	80147ce <netconn_free+0x1e>
 80147c0:	4b1b      	ldr	r3, [pc, #108]	; (8014830 <netconn_free+0x80>)
 80147c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80147c6:	491b      	ldr	r1, [pc, #108]	; (8014834 <netconn_free+0x84>)
 80147c8:	481b      	ldr	r0, [pc, #108]	; (8014838 <netconn_free+0x88>)
 80147ca:	f00f f84b 	bl	8023864 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	3310      	adds	r3, #16
 80147d2:	4618      	mov	r0, r3
 80147d4:	f00c fea7 	bl	8021526 <sys_mbox_valid>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d006      	beq.n	80147ec <netconn_free+0x3c>
 80147de:	4b14      	ldr	r3, [pc, #80]	; (8014830 <netconn_free+0x80>)
 80147e0:	f240 3223 	movw	r2, #803	; 0x323
 80147e4:	4915      	ldr	r1, [pc, #84]	; (801483c <netconn_free+0x8c>)
 80147e6:	4814      	ldr	r0, [pc, #80]	; (8014838 <netconn_free+0x88>)
 80147e8:	f00f f83c 	bl	8023864 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	3314      	adds	r3, #20
 80147f0:	4618      	mov	r0, r3
 80147f2:	f00c fe98 	bl	8021526 <sys_mbox_valid>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d006      	beq.n	801480a <netconn_free+0x5a>
 80147fc:	4b0c      	ldr	r3, [pc, #48]	; (8014830 <netconn_free+0x80>)
 80147fe:	f240 3226 	movw	r2, #806	; 0x326
 8014802:	490f      	ldr	r1, [pc, #60]	; (8014840 <netconn_free+0x90>)
 8014804:	480c      	ldr	r0, [pc, #48]	; (8014838 <netconn_free+0x88>)
 8014806:	f00f f82d 	bl	8023864 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	330c      	adds	r3, #12
 801480e:	4618      	mov	r0, r3
 8014810:	f00c ff0d 	bl	802162e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	330c      	adds	r3, #12
 8014818:	4618      	mov	r0, r3
 801481a:	f00c ff26 	bl	802166a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	2007      	movs	r0, #7
 8014822:	f002 f8bd 	bl	80169a0 <memp_free>
}
 8014826:	bf00      	nop
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	08028e30 	.word	0x08028e30
 8014834:	0802905c 	.word	0x0802905c
 8014838:	08028e74 	.word	0x08028e74
 801483c:	0802908c 	.word	0x0802908c
 8014840:	080290c8 	.word	0x080290c8

08014844 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	3310      	adds	r3, #16
 8014850:	4618      	mov	r0, r3
 8014852:	f00c fe68 	bl	8021526 <sys_mbox_valid>
 8014856:	4603      	mov	r3, r0
 8014858:	2b00      	cmp	r3, #0
 801485a:	d02f      	beq.n	80148bc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801485c:	e018      	b.n	8014890 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	781b      	ldrb	r3, [r3, #0]
 8014862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014866:	2b10      	cmp	r3, #16
 8014868:	d10e      	bne.n	8014888 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	f107 020f 	add.w	r2, r7, #15
 8014870:	4611      	mov	r1, r2
 8014872:	4618      	mov	r0, r3
 8014874:	f7ff faf0 	bl	8013e58 <lwip_netconn_is_err_msg>
 8014878:	4603      	mov	r3, r0
 801487a:	2b00      	cmp	r3, #0
 801487c:	d108      	bne.n	8014890 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801487e:	693b      	ldr	r3, [r7, #16]
 8014880:	4618      	mov	r0, r3
 8014882:	f002 ff31 	bl	80176e8 <pbuf_free>
 8014886:	e003      	b.n	8014890 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8014888:	693b      	ldr	r3, [r7, #16]
 801488a:	4618      	mov	r0, r3
 801488c:	f000 fe98 	bl	80155c0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	3310      	adds	r3, #16
 8014894:	f107 0210 	add.w	r2, r7, #16
 8014898:	4611      	mov	r1, r2
 801489a:	4618      	mov	r0, r3
 801489c:	f00c fe27 	bl	80214ee <sys_arch_mbox_tryfetch>
 80148a0:	4603      	mov	r3, r0
 80148a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148a6:	d1da      	bne.n	801485e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	3310      	adds	r3, #16
 80148ac:	4618      	mov	r0, r3
 80148ae:	f00c fdb3 	bl	8021418 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	3310      	adds	r3, #16
 80148b6:	4618      	mov	r0, r3
 80148b8:	f00c fe46 	bl	8021548 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	3314      	adds	r3, #20
 80148c0:	4618      	mov	r0, r3
 80148c2:	f00c fe30 	bl	8021526 <sys_mbox_valid>
 80148c6:	4603      	mov	r3, r0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d034      	beq.n	8014936 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80148cc:	e01d      	b.n	801490a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80148ce:	693b      	ldr	r3, [r7, #16]
 80148d0:	f107 020e 	add.w	r2, r7, #14
 80148d4:	4611      	mov	r1, r2
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7ff fabe 	bl	8013e58 <lwip_netconn_is_err_msg>
 80148dc:	4603      	mov	r3, r0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d113      	bne.n	801490a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80148e2:	693b      	ldr	r3, [r7, #16]
 80148e4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80148e6:	6978      	ldr	r0, [r7, #20]
 80148e8:	f7ff ffac 	bl	8014844 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d007      	beq.n	8014904 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80148f4:	697b      	ldr	r3, [r7, #20]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f003 fe4f 	bl	801859c <tcp_abort>
            newconn->pcb.tcp = NULL;
 80148fe:	697b      	ldr	r3, [r7, #20]
 8014900:	2200      	movs	r2, #0
 8014902:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8014904:	6978      	ldr	r0, [r7, #20]
 8014906:	f7ff ff53 	bl	80147b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	3314      	adds	r3, #20
 801490e:	f107 0210 	add.w	r2, r7, #16
 8014912:	4611      	mov	r1, r2
 8014914:	4618      	mov	r0, r3
 8014916:	f00c fdea 	bl	80214ee <sys_arch_mbox_tryfetch>
 801491a:	4603      	mov	r3, r0
 801491c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014920:	d1d5      	bne.n	80148ce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3314      	adds	r3, #20
 8014926:	4618      	mov	r0, r3
 8014928:	f00c fd76 	bl	8021418 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	3314      	adds	r3, #20
 8014930:	4618      	mov	r0, r3
 8014932:	f00c fe09 	bl	8021548 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8014936:	bf00      	nop
 8014938:	3718      	adds	r7, #24
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
	...

08014940 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b086      	sub	sp, #24
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	460b      	mov	r3, r1
 801494a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 801494c:	2300      	movs	r3, #0
 801494e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d106      	bne.n	8014964 <lwip_netconn_do_close_internal+0x24>
 8014956:	4b87      	ldr	r3, [pc, #540]	; (8014b74 <lwip_netconn_do_close_internal+0x234>)
 8014958:	f240 32a2 	movw	r2, #930	; 0x3a2
 801495c:	4986      	ldr	r1, [pc, #536]	; (8014b78 <lwip_netconn_do_close_internal+0x238>)
 801495e:	4887      	ldr	r0, [pc, #540]	; (8014b7c <lwip_netconn_do_close_internal+0x23c>)
 8014960:	f00e ff80 	bl	8023864 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801496c:	2b10      	cmp	r3, #16
 801496e:	d006      	beq.n	801497e <lwip_netconn_do_close_internal+0x3e>
 8014970:	4b80      	ldr	r3, [pc, #512]	; (8014b74 <lwip_netconn_do_close_internal+0x234>)
 8014972:	f240 32a3 	movw	r2, #931	; 0x3a3
 8014976:	4982      	ldr	r1, [pc, #520]	; (8014b80 <lwip_netconn_do_close_internal+0x240>)
 8014978:	4880      	ldr	r0, [pc, #512]	; (8014b7c <lwip_netconn_do_close_internal+0x23c>)
 801497a:	f00e ff73 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	785b      	ldrb	r3, [r3, #1]
 8014982:	2b04      	cmp	r3, #4
 8014984:	d006      	beq.n	8014994 <lwip_netconn_do_close_internal+0x54>
 8014986:	4b7b      	ldr	r3, [pc, #492]	; (8014b74 <lwip_netconn_do_close_internal+0x234>)
 8014988:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 801498c:	497d      	ldr	r1, [pc, #500]	; (8014b84 <lwip_netconn_do_close_internal+0x244>)
 801498e:	487b      	ldr	r0, [pc, #492]	; (8014b7c <lwip_netconn_do_close_internal+0x23c>)
 8014990:	f00e ff68 	bl	8023864 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d106      	bne.n	80149aa <lwip_netconn_do_close_internal+0x6a>
 801499c:	4b75      	ldr	r3, [pc, #468]	; (8014b74 <lwip_netconn_do_close_internal+0x234>)
 801499e:	f240 32a5 	movw	r2, #933	; 0x3a5
 80149a2:	4979      	ldr	r1, [pc, #484]	; (8014b88 <lwip_netconn_do_close_internal+0x248>)
 80149a4:	4875      	ldr	r0, [pc, #468]	; (8014b7c <lwip_netconn_do_close_internal+0x23c>)
 80149a6:	f00e ff5d 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d106      	bne.n	80149c0 <lwip_netconn_do_close_internal+0x80>
 80149b2:	4b70      	ldr	r3, [pc, #448]	; (8014b74 <lwip_netconn_do_close_internal+0x234>)
 80149b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80149b8:	4974      	ldr	r1, [pc, #464]	; (8014b8c <lwip_netconn_do_close_internal+0x24c>)
 80149ba:	4870      	ldr	r0, [pc, #448]	; (8014b7c <lwip_netconn_do_close_internal+0x23c>)
 80149bc:	f00e ff52 	bl	8023864 <iprintf>

  tpcb = conn->pcb.tcp;
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ca:	7a1b      	ldrb	r3, [r3, #8]
 80149cc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80149ce:	7bfb      	ldrb	r3, [r7, #15]
 80149d0:	f003 0301 	and.w	r3, r3, #1
 80149d4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80149d6:	7bfb      	ldrb	r3, [r7, #15]
 80149d8:	f003 0302 	and.w	r3, r3, #2
 80149dc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80149de:	7bfb      	ldrb	r3, [r7, #15]
 80149e0:	2b03      	cmp	r3, #3
 80149e2:	d102      	bne.n	80149ea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80149e4:	2301      	movs	r3, #1
 80149e6:	75bb      	strb	r3, [r7, #22]
 80149e8:	e01f      	b.n	8014a2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80149ea:	7bbb      	ldrb	r3, [r7, #14]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d00e      	beq.n	8014a0e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80149f4:	2b05      	cmp	r3, #5
 80149f6:	d007      	beq.n	8014a08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80149fc:	2b06      	cmp	r3, #6
 80149fe:	d003      	beq.n	8014a08 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8014a04:	2b08      	cmp	r3, #8
 8014a06:	d102      	bne.n	8014a0e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	75bb      	strb	r3, [r7, #22]
 8014a0c:	e00d      	b.n	8014a2a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8014a0e:	7b7b      	ldrb	r3, [r7, #13]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d008      	beq.n	8014a26 <lwip_netconn_do_close_internal+0xe6>
 8014a14:	693b      	ldr	r3, [r7, #16]
 8014a16:	8b5b      	ldrh	r3, [r3, #26]
 8014a18:	f003 0310 	and.w	r3, r3, #16
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d002      	beq.n	8014a26 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8014a20:	2301      	movs	r3, #1
 8014a22:	75bb      	strb	r3, [r7, #22]
 8014a24:	e001      	b.n	8014a2a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8014a26:	2300      	movs	r3, #0
 8014a28:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8014a2a:	7dbb      	ldrb	r3, [r7, #22]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d003      	beq.n	8014a38 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8014a30:	2100      	movs	r1, #0
 8014a32:	6938      	ldr	r0, [r7, #16]
 8014a34:	f004 fe80 	bl	8019738 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8014a38:	693b      	ldr	r3, [r7, #16]
 8014a3a:	7d1b      	ldrb	r3, [r3, #20]
 8014a3c:	2b01      	cmp	r3, #1
 8014a3e:	d104      	bne.n	8014a4a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8014a40:	2100      	movs	r1, #0
 8014a42:	6938      	ldr	r0, [r7, #16]
 8014a44:	f004 fef0 	bl	8019828 <tcp_accept>
 8014a48:	e01d      	b.n	8014a86 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8014a4a:	7bbb      	ldrb	r3, [r7, #14]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d007      	beq.n	8014a60 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8014a50:	2100      	movs	r1, #0
 8014a52:	6938      	ldr	r0, [r7, #16]
 8014a54:	f004 fe82 	bl	801975c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8014a58:	2100      	movs	r1, #0
 8014a5a:	6938      	ldr	r0, [r7, #16]
 8014a5c:	f004 fee4 	bl	8019828 <tcp_accept>
    }
    if (shut_tx) {
 8014a60:	7b7b      	ldrb	r3, [r7, #13]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d003      	beq.n	8014a6e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8014a66:	2100      	movs	r1, #0
 8014a68:	6938      	ldr	r0, [r7, #16]
 8014a6a:	f004 fe99 	bl	80197a0 <tcp_sent>
    }
    if (shut_close) {
 8014a6e:	7dbb      	ldrb	r3, [r7, #22]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d008      	beq.n	8014a86 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8014a74:	2200      	movs	r2, #0
 8014a76:	2100      	movs	r1, #0
 8014a78:	6938      	ldr	r0, [r7, #16]
 8014a7a:	f004 feed 	bl	8019858 <tcp_poll>
      tcp_err(tpcb, NULL);
 8014a7e:	2100      	movs	r1, #0
 8014a80:	6938      	ldr	r0, [r7, #16]
 8014a82:	f004 feaf 	bl	80197e4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8014a86:	7dbb      	ldrb	r3, [r7, #22]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d005      	beq.n	8014a98 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8014a8c:	6938      	ldr	r0, [r7, #16]
 8014a8e:	f003 fc3f 	bl	8018310 <tcp_close>
 8014a92:	4603      	mov	r3, r0
 8014a94:	75fb      	strb	r3, [r7, #23]
 8014a96:	e007      	b.n	8014aa8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8014a98:	7bbb      	ldrb	r3, [r7, #14]
 8014a9a:	7b7a      	ldrb	r2, [r7, #13]
 8014a9c:	4619      	mov	r1, r3
 8014a9e:	6938      	ldr	r0, [r7, #16]
 8014aa0:	f003 fc62 	bl	8018368 <tcp_shutdown>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8014aa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d102      	bne.n	8014ab6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	757b      	strb	r3, [r7, #21]
 8014ab4:	e016      	b.n	8014ae4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8014ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014abe:	d10f      	bne.n	8014ae0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac4:	7a5b      	ldrb	r3, [r3, #9]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d10c      	bne.n	8014ae4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8014aca:	2301      	movs	r3, #1
 8014acc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8014ace:	7dbb      	ldrb	r3, [r7, #22]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d007      	beq.n	8014ae4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8014ad4:	6938      	ldr	r0, [r7, #16]
 8014ad6:	f003 fd61 	bl	801859c <tcp_abort>
          err = ERR_OK;
 8014ada:	2300      	movs	r3, #0
 8014adc:	75fb      	strb	r3, [r7, #23]
 8014ade:	e001      	b.n	8014ae4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8014ae4:	7d7b      	ldrb	r3, [r7, #21]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d052      	beq.n	8014b90 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	330c      	adds	r3, #12
 8014af2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014af8:	7dfa      	ldrb	r2, [r7, #23]
 8014afa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	2200      	movs	r2, #0
 8014b00:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	2200      	movs	r2, #0
 8014b06:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8014b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d129      	bne.n	8014b64 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8014b10:	7dbb      	ldrb	r3, [r7, #22]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d00c      	beq.n	8014b30 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d005      	beq.n	8014b30 <lwip_netconn_do_close_internal+0x1f0>
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b28:	2200      	movs	r2, #0
 8014b2a:	2104      	movs	r1, #4
 8014b2c:	6878      	ldr	r0, [r7, #4]
 8014b2e:	4798      	blx	r3
      }
      if (shut_rx) {
 8014b30:	7bbb      	ldrb	r3, [r7, #14]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d009      	beq.n	8014b4a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d005      	beq.n	8014b4a <lwip_netconn_do_close_internal+0x20a>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b42:	2200      	movs	r2, #0
 8014b44:	2100      	movs	r1, #0
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	4798      	blx	r3
      }
      if (shut_tx) {
 8014b4a:	7b7b      	ldrb	r3, [r7, #13]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d009      	beq.n	8014b64 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d005      	beq.n	8014b64 <lwip_netconn_do_close_internal+0x224>
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	2102      	movs	r1, #2
 8014b60:	6878      	ldr	r0, [r7, #4]
 8014b62:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8014b64:	78fb      	ldrb	r3, [r7, #3]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d002      	beq.n	8014b70 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8014b6a:	68b8      	ldr	r0, [r7, #8]
 8014b6c:	f00c fd52 	bl	8021614 <sys_sem_signal>
    }
    return ERR_OK;
 8014b70:	2300      	movs	r3, #0
 8014b72:	e03c      	b.n	8014bee <lwip_netconn_do_close_internal+0x2ae>
 8014b74:	08028e30 	.word	0x08028e30
 8014b78:	08029104 	.word	0x08029104
 8014b7c:	08028e74 	.word	0x08028e74
 8014b80:	08029114 	.word	0x08029114
 8014b84:	08029134 	.word	0x08029134
 8014b88:	08029158 	.word	0x08029158
 8014b8c:	08028f98 	.word	0x08028f98
  }
  if (!close_finished) {
 8014b90:	7d7b      	ldrb	r3, [r7, #21]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d11e      	bne.n	8014bd4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	7d1b      	ldrb	r3, [r3, #20]
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d106      	bne.n	8014bac <lwip_netconn_do_close_internal+0x26c>
 8014b9e:	4b16      	ldr	r3, [pc, #88]	; (8014bf8 <lwip_netconn_do_close_internal+0x2b8>)
 8014ba0:	f240 4241 	movw	r2, #1089	; 0x441
 8014ba4:	4915      	ldr	r1, [pc, #84]	; (8014bfc <lwip_netconn_do_close_internal+0x2bc>)
 8014ba6:	4816      	ldr	r0, [pc, #88]	; (8014c00 <lwip_netconn_do_close_internal+0x2c0>)
 8014ba8:	f00e fe5c 	bl	8023864 <iprintf>
    if (shut_tx) {
 8014bac:	7b7b      	ldrb	r3, [r7, #13]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d003      	beq.n	8014bba <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8014bb2:	4914      	ldr	r1, [pc, #80]	; (8014c04 <lwip_netconn_do_close_internal+0x2c4>)
 8014bb4:	6938      	ldr	r0, [r7, #16]
 8014bb6:	f004 fdf3 	bl	80197a0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8014bba:	2201      	movs	r2, #1
 8014bbc:	4912      	ldr	r1, [pc, #72]	; (8014c08 <lwip_netconn_do_close_internal+0x2c8>)
 8014bbe:	6938      	ldr	r0, [r7, #16]
 8014bc0:	f004 fe4a 	bl	8019858 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8014bc4:	4911      	ldr	r1, [pc, #68]	; (8014c0c <lwip_netconn_do_close_internal+0x2cc>)
 8014bc6:	6938      	ldr	r0, [r7, #16]
 8014bc8:	f004 fe0c 	bl	80197e4 <tcp_err>
    tcp_arg(tpcb, conn);
 8014bcc:	6879      	ldr	r1, [r7, #4]
 8014bce:	6938      	ldr	r0, [r7, #16]
 8014bd0:	f004 fdb2 	bl	8019738 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8014bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d106      	bne.n	8014bea <lwip_netconn_do_close_internal+0x2aa>
 8014bdc:	4b06      	ldr	r3, [pc, #24]	; (8014bf8 <lwip_netconn_do_close_internal+0x2b8>)
 8014bde:	f240 424d 	movw	r2, #1101	; 0x44d
 8014be2:	490b      	ldr	r1, [pc, #44]	; (8014c10 <lwip_netconn_do_close_internal+0x2d0>)
 8014be4:	4806      	ldr	r0, [pc, #24]	; (8014c00 <lwip_netconn_do_close_internal+0x2c0>)
 8014be6:	f00e fe3d 	bl	8023864 <iprintf>
  return err;
 8014bea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3718      	adds	r7, #24
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	08028e30 	.word	0x08028e30
 8014bfc:	0802916c 	.word	0x0802916c
 8014c00:	08028e74 	.word	0x08028e74
 8014c04:	080141a5 	.word	0x080141a5
 8014c08:	080140d5 	.word	0x080140d5
 8014c0c:	08014251 	.word	0x08014251
 8014c10:	08029190 	.word	0x08029190

08014c14 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b084      	sub	sp, #16
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	785b      	ldrb	r3, [r3, #1]
 8014c26:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8014c28:	7afb      	ldrb	r3, [r7, #11]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d00d      	beq.n	8014c4a <lwip_netconn_do_delconn+0x36>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c38:	2b10      	cmp	r3, #16
 8014c3a:	d006      	beq.n	8014c4a <lwip_netconn_do_delconn+0x36>
 8014c3c:	4b61      	ldr	r3, [pc, #388]	; (8014dc4 <lwip_netconn_do_delconn+0x1b0>)
 8014c3e:	f240 425e 	movw	r2, #1118	; 0x45e
 8014c42:	4961      	ldr	r1, [pc, #388]	; (8014dc8 <lwip_netconn_do_delconn+0x1b4>)
 8014c44:	4861      	ldr	r0, [pc, #388]	; (8014dcc <lwip_netconn_do_delconn+0x1b8>)
 8014c46:	f00e fe0d 	bl	8023864 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8014c4a:	7afb      	ldrb	r3, [r7, #11]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d005      	beq.n	8014c5c <lwip_netconn_do_delconn+0x48>
 8014c50:	7afb      	ldrb	r3, [r7, #11]
 8014c52:	2b02      	cmp	r3, #2
 8014c54:	d002      	beq.n	8014c5c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8014c56:	7afb      	ldrb	r3, [r7, #11]
 8014c58:	2b03      	cmp	r3, #3
 8014c5a:	d10a      	bne.n	8014c72 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8014c5c:	7afb      	ldrb	r3, [r7, #11]
 8014c5e:	2b03      	cmp	r3, #3
 8014c60:	d10b      	bne.n	8014c7a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c6a:	f003 0304 	and.w	r3, r3, #4
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d103      	bne.n	8014c7a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	22fb      	movs	r2, #251	; 0xfb
 8014c76:	711a      	strb	r2, [r3, #4]
 8014c78:	e098      	b.n	8014dac <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8014c7a:	7afb      	ldrb	r3, [r7, #11]
 8014c7c:	2b03      	cmp	r3, #3
 8014c7e:	d10e      	bne.n	8014c9e <lwip_netconn_do_delconn+0x8a>
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c88:	f003 0304 	and.w	r3, r3, #4
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d106      	bne.n	8014c9e <lwip_netconn_do_delconn+0x8a>
 8014c90:	4b4c      	ldr	r3, [pc, #304]	; (8014dc4 <lwip_netconn_do_delconn+0x1b0>)
 8014c92:	f240 427a 	movw	r2, #1146	; 0x47a
 8014c96:	494e      	ldr	r1, [pc, #312]	; (8014dd0 <lwip_netconn_do_delconn+0x1bc>)
 8014c98:	484c      	ldr	r0, [pc, #304]	; (8014dcc <lwip_netconn_do_delconn+0x1b8>)
 8014c9a:	f00e fde3 	bl	8023864 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7ff fdcb 	bl	8014844 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d05f      	beq.n	8014d78 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	781b      	ldrb	r3, [r3, #0]
 8014cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014cc2:	2b10      	cmp	r3, #16
 8014cc4:	d00d      	beq.n	8014ce2 <lwip_netconn_do_delconn+0xce>
 8014cc6:	2b20      	cmp	r3, #32
 8014cc8:	d151      	bne.n	8014d6e <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	685b      	ldr	r3, [r3, #4]
 8014cda:	4618      	mov	r0, r3
 8014cdc:	f009 ff8e 	bl	801ebfc <udp_remove>
          break;
 8014ce0:	e046      	b.n	8014d70 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d006      	beq.n	8014cfa <lwip_netconn_do_delconn+0xe6>
 8014cec:	4b35      	ldr	r3, [pc, #212]	; (8014dc4 <lwip_netconn_do_delconn+0x1b0>)
 8014cee:	f240 4294 	movw	r2, #1172	; 0x494
 8014cf2:	4938      	ldr	r1, [pc, #224]	; (8014dd4 <lwip_netconn_do_delconn+0x1c0>)
 8014cf4:	4835      	ldr	r0, [pc, #212]	; (8014dcc <lwip_netconn_do_delconn+0x1b8>)
 8014cf6:	f00e fdb5 	bl	8023864 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	2204      	movs	r2, #4
 8014d00:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	2203      	movs	r2, #3
 8014d06:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	2100      	movs	r1, #0
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7ff fe12 	bl	8014940 <lwip_netconn_do_close_internal>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d04b      	beq.n	8014dba <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	785b      	ldrb	r3, [r3, #1]
 8014d28:	2b04      	cmp	r3, #4
 8014d2a:	d006      	beq.n	8014d3a <lwip_netconn_do_delconn+0x126>
 8014d2c:	4b25      	ldr	r3, [pc, #148]	; (8014dc4 <lwip_netconn_do_delconn+0x1b0>)
 8014d2e:	f240 429a 	movw	r2, #1178	; 0x49a
 8014d32:	4929      	ldr	r1, [pc, #164]	; (8014dd8 <lwip_netconn_do_delconn+0x1c4>)
 8014d34:	4825      	ldr	r0, [pc, #148]	; (8014dcc <lwip_netconn_do_delconn+0x1b8>)
 8014d36:	f00e fd95 	bl	8023864 <iprintf>
            UNLOCK_TCPIP_CORE();
 8014d3a:	4828      	ldr	r0, [pc, #160]	; (8014ddc <lwip_netconn_do_delconn+0x1c8>)
 8014d3c:	f00c fcdb 	bl	80216f6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	330c      	adds	r3, #12
 8014d46:	2100      	movs	r1, #0
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f00c fc32 	bl	80215b2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8014d4e:	4823      	ldr	r0, [pc, #140]	; (8014ddc <lwip_netconn_do_delconn+0x1c8>)
 8014d50:	f00c fcc2 	bl	80216d8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	785b      	ldrb	r3, [r3, #1]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d02d      	beq.n	8014dba <lwip_netconn_do_delconn+0x1a6>
 8014d5e:	4b19      	ldr	r3, [pc, #100]	; (8014dc4 <lwip_netconn_do_delconn+0x1b0>)
 8014d60:	f240 429e 	movw	r2, #1182	; 0x49e
 8014d64:	491c      	ldr	r1, [pc, #112]	; (8014dd8 <lwip_netconn_do_delconn+0x1c4>)
 8014d66:	4819      	ldr	r0, [pc, #100]	; (8014dcc <lwip_netconn_do_delconn+0x1b8>)
 8014d68:	f00e fd7c 	bl	8023864 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8014d6c:	e025      	b.n	8014dba <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8014d6e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2200      	movs	r2, #0
 8014d76:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d007      	beq.n	8014d92 <lwip_netconn_do_delconn+0x17e>
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d88:	68fa      	ldr	r2, [r7, #12]
 8014d8a:	6810      	ldr	r0, [r2, #0]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	2100      	movs	r1, #0
 8014d90:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8014d92:	68fb      	ldr	r3, [r7, #12]
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d007      	beq.n	8014dac <lwip_netconn_do_delconn+0x198>
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014da2:	68fa      	ldr	r2, [r7, #12]
 8014da4:	6810      	ldr	r0, [r2, #0]
 8014da6:	2200      	movs	r2, #0
 8014da8:	2102      	movs	r1, #2
 8014daa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	330c      	adds	r3, #12
 8014db2:	4618      	mov	r0, r3
 8014db4:	f00c fc48 	bl	8021648 <sys_sem_valid>
 8014db8:	e000      	b.n	8014dbc <lwip_netconn_do_delconn+0x1a8>
          return;
 8014dba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8014dbc:	3710      	adds	r7, #16
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	08028e30 	.word	0x08028e30
 8014dc8:	080291a0 	.word	0x080291a0
 8014dcc:	08028e74 	.word	0x08028e74
 8014dd0:	080291b4 	.word	0x080291b4
 8014dd4:	080291d4 	.word	0x080291d4
 8014dd8:	080291f0 	.word	0x080291f0
 8014ddc:	20011fb0 	.word	0x20011fb0

08014de0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	b084      	sub	sp, #16
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d025      	beq.n	8014e42 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e00:	2b10      	cmp	r3, #16
 8014e02:	d00e      	beq.n	8014e22 <lwip_netconn_do_bind+0x42>
 8014e04:	2b20      	cmp	r3, #32
 8014e06:	d119      	bne.n	8014e3c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	6858      	ldr	r0, [r3, #4]
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	6899      	ldr	r1, [r3, #8]
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	899b      	ldrh	r3, [r3, #12]
 8014e16:	461a      	mov	r2, r3
 8014e18:	f009 fe3c 	bl	801ea94 <udp_bind>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	73fb      	strb	r3, [r7, #15]
        break;
 8014e20:	e011      	b.n	8014e46 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	6858      	ldr	r0, [r3, #4]
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	6899      	ldr	r1, [r3, #8]
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	899b      	ldrh	r3, [r3, #12]
 8014e30:	461a      	mov	r2, r3
 8014e32:	f003 fbbf 	bl	80185b4 <tcp_bind>
 8014e36:	4603      	mov	r3, r0
 8014e38:	73fb      	strb	r3, [r7, #15]
        break;
 8014e3a:	e004      	b.n	8014e46 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8014e3c:	23fa      	movs	r3, #250	; 0xfa
 8014e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8014e40:	e001      	b.n	8014e46 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8014e42:	23fa      	movs	r3, #250	; 0xfa
 8014e44:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8014e46:	68bb      	ldr	r3, [r7, #8]
 8014e48:	7bfa      	ldrb	r2, [r7, #15]
 8014e4a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014e4c:	bf00      	nop
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b086      	sub	sp, #24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d07f      	beq.n	8014f6a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e74:	2b10      	cmp	r3, #16
 8014e76:	d175      	bne.n	8014f64 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	785b      	ldrb	r3, [r3, #1]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d165      	bne.n	8014f4e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	7d1b      	ldrb	r3, [r3, #20]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d002      	beq.n	8014e94 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8014e8e:	23fa      	movs	r3, #250	; 0xfa
 8014e90:	72fb      	strb	r3, [r7, #11]
 8014e92:	e06c      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8014e94:	23ff      	movs	r3, #255	; 0xff
 8014e96:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	f107 020b 	add.w	r2, r7, #11
 8014ea2:	7cf9      	ldrb	r1, [r7, #19]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f003 fc51 	bl	801874c <tcp_listen_with_backlog_and_err>
 8014eaa:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d05d      	beq.n	8014f6e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	3310      	adds	r3, #16
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f00c fb34 	bl	8021526 <sys_mbox_valid>
 8014ebe:	4603      	mov	r3, r0
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d00b      	beq.n	8014edc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	3310      	adds	r3, #16
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f00c faa4 	bl	8021418 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	3310      	adds	r3, #16
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f00c fb36 	bl	8021548 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8014edc:	2300      	movs	r3, #0
 8014ede:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	3314      	adds	r3, #20
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f00c fb1d 	bl	8021526 <sys_mbox_valid>
 8014eec:	4603      	mov	r3, r0
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d108      	bne.n	8014f04 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8014ef2:	697b      	ldr	r3, [r7, #20]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	3314      	adds	r3, #20
 8014ef8:	2106      	movs	r1, #6
 8014efa:	4618      	mov	r0, r3
 8014efc:	f00c fa6a 	bl	80213d4 <sys_mbox_new>
 8014f00:	4603      	mov	r3, r0
 8014f02:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8014f04:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d118      	bne.n	8014f3e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2202      	movs	r2, #2
 8014f12:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8014f14:	697b      	ldr	r3, [r7, #20]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	68fa      	ldr	r2, [r7, #12]
 8014f1a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	685a      	ldr	r2, [r3, #4]
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4619      	mov	r1, r3
 8014f28:	4610      	mov	r0, r2
 8014f2a:	f004 fc05 	bl	8019738 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	4912      	ldr	r1, [pc, #72]	; (8014f80 <lwip_netconn_do_listen+0x12c>)
 8014f36:	4618      	mov	r0, r3
 8014f38:	f004 fc76 	bl	8019828 <tcp_accept>
 8014f3c:	e017      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8014f3e:	68f8      	ldr	r0, [r7, #12]
 8014f40:	f003 f9e6 	bl	8018310 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	605a      	str	r2, [r3, #4]
 8014f4c:	e00f      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	785b      	ldrb	r3, [r3, #1]
 8014f54:	2b02      	cmp	r3, #2
 8014f56:	d102      	bne.n	8014f5e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8014f58:	2300      	movs	r3, #0
 8014f5a:	72fb      	strb	r3, [r7, #11]
 8014f5c:	e007      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8014f5e:	23f5      	movs	r3, #245	; 0xf5
 8014f60:	72fb      	strb	r3, [r7, #11]
 8014f62:	e004      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8014f64:	23f0      	movs	r3, #240	; 0xf0
 8014f66:	72fb      	strb	r3, [r7, #11]
 8014f68:	e001      	b.n	8014f6e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8014f6a:	23f5      	movs	r3, #245	; 0xf5
 8014f6c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8014f6e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8014f76:	bf00      	nop
 8014f78:	3718      	adds	r7, #24
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	08014455 	.word	0x08014455

08014f84 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	2200      	movs	r2, #0
 8014f94:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	681b      	ldr	r3, [r3, #0]
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d022      	beq.n	8014fe6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014faa:	2b10      	cmp	r3, #16
 8014fac:	d11b      	bne.n	8014fe6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8014fae:	693b      	ldr	r3, [r7, #16]
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014fba:	d202      	bcs.n	8014fc2 <lwip_netconn_do_recv+0x3e>
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	b29b      	uxth	r3, r3
 8014fc0:	e001      	b.n	8014fc6 <lwip_netconn_do_recv+0x42>
 8014fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014fc6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	685b      	ldr	r3, [r3, #4]
 8014fce:	89fa      	ldrh	r2, [r7, #14]
 8014fd0:	4611      	mov	r1, r2
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f003 fcde 	bl	8018994 <tcp_recved>
        remaining -= recved;
 8014fd8:	89fb      	ldrh	r3, [r7, #14]
 8014fda:	697a      	ldr	r2, [r7, #20]
 8014fdc:	1ad3      	subs	r3, r2, r3
 8014fde:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d1e6      	bne.n	8014fb4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8014fe6:	bf00      	nop
 8014fe8:	3718      	adds	r7, #24
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
	...

08014ff0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d106      	bne.n	8015014 <lwip_netconn_do_writemore+0x24>
 8015006:	4b61      	ldr	r3, [pc, #388]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 8015008:	f240 6273 	movw	r2, #1651	; 0x673
 801500c:	4960      	ldr	r1, [pc, #384]	; (8015190 <lwip_netconn_do_writemore+0x1a0>)
 801500e:	4861      	ldr	r0, [pc, #388]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015010:	f00e fc28 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	785b      	ldrb	r3, [r3, #1]
 8015018:	2b01      	cmp	r3, #1
 801501a:	d006      	beq.n	801502a <lwip_netconn_do_writemore+0x3a>
 801501c:	4b5b      	ldr	r3, [pc, #364]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 801501e:	f240 6274 	movw	r2, #1652	; 0x674
 8015022:	495d      	ldr	r1, [pc, #372]	; (8015198 <lwip_netconn_do_writemore+0x1a8>)
 8015024:	485b      	ldr	r0, [pc, #364]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015026:	f00e fc1d 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801502e:	2b00      	cmp	r3, #0
 8015030:	d106      	bne.n	8015040 <lwip_netconn_do_writemore+0x50>
 8015032:	4b56      	ldr	r3, [pc, #344]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 8015034:	f240 6275 	movw	r2, #1653	; 0x675
 8015038:	4958      	ldr	r1, [pc, #352]	; (801519c <lwip_netconn_do_writemore+0x1ac>)
 801503a:	4856      	ldr	r0, [pc, #344]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 801503c:	f00e fc12 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685b      	ldr	r3, [r3, #4]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d106      	bne.n	8015056 <lwip_netconn_do_writemore+0x66>
 8015048:	4b50      	ldr	r3, [pc, #320]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 801504a:	f240 6276 	movw	r2, #1654	; 0x676
 801504e:	4954      	ldr	r1, [pc, #336]	; (80151a0 <lwip_netconn_do_writemore+0x1b0>)
 8015050:	4850      	ldr	r0, [pc, #320]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015052:	f00e fc07 	bl	8023864 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801505a:	699a      	ldr	r2, [r3, #24]
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015060:	695b      	ldr	r3, [r3, #20]
 8015062:	429a      	cmp	r2, r3
 8015064:	d306      	bcc.n	8015074 <lwip_netconn_do_writemore+0x84>
 8015066:	4b49      	ldr	r3, [pc, #292]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 8015068:	f240 6277 	movw	r2, #1655	; 0x677
 801506c:	494d      	ldr	r1, [pc, #308]	; (80151a4 <lwip_netconn_do_writemore+0x1b4>)
 801506e:	4849      	ldr	r0, [pc, #292]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015070:	f00e fbf8 	bl	8023864 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015078:	899b      	ldrh	r3, [r3, #12]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d106      	bne.n	801508c <lwip_netconn_do_writemore+0x9c>
 801507e:	4b43      	ldr	r3, [pc, #268]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 8015080:	f240 6279 	movw	r2, #1657	; 0x679
 8015084:	4948      	ldr	r1, [pc, #288]	; (80151a8 <lwip_netconn_do_writemore+0x1b8>)
 8015086:	4843      	ldr	r0, [pc, #268]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015088:	f00e fbec 	bl	8023864 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015090:	7f1b      	ldrb	r3, [r3, #28]
 8015092:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f893 3020 	ldrb.w	r3, [r3, #32]
 801509a:	f003 0302 	and.w	r3, r3, #2
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d104      	bne.n	80150ac <lwip_netconn_do_writemore+0xbc>
 80150a2:	7ebb      	ldrb	r3, [r7, #26]
 80150a4:	f003 0304 	and.w	r3, r3, #4
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d001      	beq.n	80150b0 <lwip_netconn_do_writemore+0xc0>
 80150ac:	2301      	movs	r3, #1
 80150ae:	e000      	b.n	80150b2 <lwip_netconn_do_writemore+0xc2>
 80150b0:	2300      	movs	r3, #0
 80150b2:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b8:	689b      	ldr	r3, [r3, #8]
 80150ba:	681a      	ldr	r2, [r3, #0]
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150c0:	691b      	ldr	r3, [r3, #16]
 80150c2:	4413      	add	r3, r2
 80150c4:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ca:	689b      	ldr	r3, [r3, #8]
 80150cc:	685a      	ldr	r2, [r3, #4]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d2:	691b      	ldr	r3, [r3, #16]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80150d8:	693b      	ldr	r3, [r7, #16]
 80150da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150de:	d307      	bcc.n	80150f0 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 80150e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150e4:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80150e6:	7ebb      	ldrb	r3, [r7, #26]
 80150e8:	f043 0302 	orr.w	r3, r3, #2
 80150ec:	76bb      	strb	r3, [r7, #26]
 80150ee:	e001      	b.n	80150f4 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	685b      	ldr	r3, [r3, #4]
 80150f8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80150fc:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80150fe:	89fa      	ldrh	r2, [r7, #14]
 8015100:	8bbb      	ldrh	r3, [r7, #28]
 8015102:	429a      	cmp	r2, r3
 8015104:	d216      	bcs.n	8015134 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8015106:	89fb      	ldrh	r3, [r7, #14]
 8015108:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801510a:	7e3b      	ldrb	r3, [r7, #24]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d00d      	beq.n	801512c <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8015110:	8bbb      	ldrh	r3, [r7, #28]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10e      	bne.n	8015134 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801511a:	699b      	ldr	r3, [r3, #24]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d102      	bne.n	8015126 <lwip_netconn_do_writemore+0x136>
 8015120:	f06f 0306 	mvn.w	r3, #6
 8015124:	e000      	b.n	8015128 <lwip_netconn_do_writemore+0x138>
 8015126:	2300      	movs	r3, #0
 8015128:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801512a:	e08f      	b.n	801524c <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 801512c:	7ebb      	ldrb	r3, [r7, #26]
 801512e:	f043 0302 	orr.w	r3, r3, #2
 8015132:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015138:	691a      	ldr	r2, [r3, #16]
 801513a:	8bbb      	ldrh	r3, [r7, #28]
 801513c:	441a      	add	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015142:	689b      	ldr	r3, [r3, #8]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	429a      	cmp	r2, r3
 8015148:	d906      	bls.n	8015158 <lwip_netconn_do_writemore+0x168>
 801514a:	4b10      	ldr	r3, [pc, #64]	; (801518c <lwip_netconn_do_writemore+0x19c>)
 801514c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8015150:	4916      	ldr	r1, [pc, #88]	; (80151ac <lwip_netconn_do_writemore+0x1bc>)
 8015152:	4810      	ldr	r0, [pc, #64]	; (8015194 <lwip_netconn_do_writemore+0x1a4>)
 8015154:	f00e fb86 	bl	8023864 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8015158:	8bbb      	ldrh	r3, [r7, #28]
 801515a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801515e:	4293      	cmp	r3, r2
 8015160:	d103      	bne.n	801516a <lwip_netconn_do_writemore+0x17a>
 8015162:	693b      	ldr	r3, [r7, #16]
 8015164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015168:	d209      	bcs.n	801517e <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801516a:	693b      	ldr	r3, [r7, #16]
 801516c:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 801516e:	8bba      	ldrh	r2, [r7, #28]
 8015170:	429a      	cmp	r2, r3
 8015172:	d11d      	bne.n	80151b0 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015178:	899b      	ldrh	r3, [r3, #12]
 801517a:	2b01      	cmp	r3, #1
 801517c:	d918      	bls.n	80151b0 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 801517e:	2301      	movs	r3, #1
 8015180:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015182:	7ebb      	ldrb	r3, [r7, #26]
 8015184:	f043 0302 	orr.w	r3, r3, #2
 8015188:	76bb      	strb	r3, [r7, #26]
 801518a:	e013      	b.n	80151b4 <lwip_netconn_do_writemore+0x1c4>
 801518c:	08028e30 	.word	0x08028e30
 8015190:	08028f88 	.word	0x08028f88
 8015194:	08028e74 	.word	0x08028e74
 8015198:	08029290 	.word	0x08029290
 801519c:	08028f98 	.word	0x08028f98
 80151a0:	080292b0 	.word	0x080292b0
 80151a4:	080292c8 	.word	0x080292c8
 80151a8:	08029308 	.word	0x08029308
 80151ac:	08029330 	.word	0x08029330
      } else {
        write_more = 0;
 80151b0:	2300      	movs	r3, #0
 80151b2:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6858      	ldr	r0, [r3, #4]
 80151b8:	7ebb      	ldrb	r3, [r7, #26]
 80151ba:	8bba      	ldrh	r2, [r7, #28]
 80151bc:	6979      	ldr	r1, [r7, #20]
 80151be:	f007 fa0b 	bl	801c5d8 <tcp_write>
 80151c2:	4603      	mov	r3, r0
 80151c4:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80151c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d12c      	bne.n	8015228 <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151d2:	6999      	ldr	r1, [r3, #24]
 80151d4:	8bba      	ldrh	r2, [r7, #28]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151da:	440a      	add	r2, r1
 80151dc:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151e2:	6919      	ldr	r1, [r3, #16]
 80151e4:	8bba      	ldrh	r2, [r7, #28]
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ea:	440a      	add	r2, r1
 80151ec:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f2:	691a      	ldr	r2, [r3, #16]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f8:	689b      	ldr	r3, [r3, #8]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d113      	bne.n	8015228 <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015204:	899a      	ldrh	r2, [r3, #12]
 8015206:	3a01      	subs	r2, #1
 8015208:	b292      	uxth	r2, r2
 801520a:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015210:	899b      	ldrh	r3, [r3, #12]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d008      	beq.n	8015228 <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801521a:	689a      	ldr	r2, [r3, #8]
 801521c:	3208      	adds	r2, #8
 801521e:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015224:	2200      	movs	r2, #0
 8015226:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8015228:	7e7b      	ldrb	r3, [r7, #25]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d004      	beq.n	8015238 <lwip_netconn_do_writemore+0x248>
 801522e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015232:	2b00      	cmp	r3, #0
 8015234:	f43f af3e 	beq.w	80150b4 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8015238:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d004      	beq.n	801524a <lwip_netconn_do_writemore+0x25a>
 8015240:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015248:	d136      	bne.n	80152b8 <lwip_netconn_do_writemore+0x2c8>
err_mem:
 801524a:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 801524c:	7e3b      	ldrb	r3, [r7, #24]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d01b      	beq.n	801528a <lwip_netconn_do_writemore+0x29a>
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015256:	699a      	ldr	r2, [r3, #24]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801525c:	695b      	ldr	r3, [r3, #20]
 801525e:	429a      	cmp	r2, r3
 8015260:	d213      	bcs.n	801528a <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015266:	2b00      	cmp	r3, #0
 8015268:	d005      	beq.n	8015276 <lwip_netconn_do_writemore+0x286>
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801526e:	2200      	movs	r2, #0
 8015270:	2103      	movs	r1, #3
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	f893 3020 	ldrb.w	r3, [r3, #32]
 801527c:	f043 0310 	orr.w	r3, r3, #16
 8015280:	b2da      	uxtb	r2, r3
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	f883 2020 	strb.w	r2, [r3, #32]
 8015288:	e016      	b.n	80152b8 <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015292:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015296:	d305      	bcc.n	80152a4 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	685b      	ldr	r3, [r3, #4]
 801529c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80152a0:	2b04      	cmp	r3, #4
 80152a2:	d909      	bls.n	80152b8 <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d005      	beq.n	80152b8 <lwip_netconn_do_writemore+0x2c8>
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152b0:	2200      	movs	r2, #0
 80152b2:	2103      	movs	r1, #3
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80152b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d11d      	bne.n	80152fc <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c4:	699a      	ldr	r2, [r3, #24]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ca:	695b      	ldr	r3, [r3, #20]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d002      	beq.n	80152d6 <lwip_netconn_do_writemore+0x2e6>
 80152d0:	7e3b      	ldrb	r3, [r7, #24]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d001      	beq.n	80152da <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80152d6:	2301      	movs	r3, #1
 80152d8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	685b      	ldr	r3, [r3, #4]
 80152de:	4618      	mov	r0, r3
 80152e0:	f007 ff64 	bl	801d1ac <tcp_output>
 80152e4:	4603      	mov	r3, r0
 80152e6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80152e8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80152ec:	f113 0f04 	cmn.w	r3, #4
 80152f0:	d12c      	bne.n	801534c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80152f2:	7b3b      	ldrb	r3, [r7, #12]
 80152f4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80152f6:	2301      	movs	r3, #1
 80152f8:	76fb      	strb	r3, [r7, #27]
 80152fa:	e027      	b.n	801534c <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 80152fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015304:	d120      	bne.n	8015348 <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	4618      	mov	r0, r3
 801530c:	f007 ff4e 	bl	801d1ac <tcp_output>
 8015310:	4603      	mov	r3, r0
 8015312:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8015314:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8015318:	f113 0f04 	cmn.w	r3, #4
 801531c:	d104      	bne.n	8015328 <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 801531e:	7b7b      	ldrb	r3, [r7, #13]
 8015320:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8015322:	2301      	movs	r3, #1
 8015324:	76fb      	strb	r3, [r7, #27]
 8015326:	e011      	b.n	801534c <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 8015328:	7e3b      	ldrb	r3, [r7, #24]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d00e      	beq.n	801534c <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015332:	699b      	ldr	r3, [r3, #24]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d102      	bne.n	801533e <lwip_netconn_do_writemore+0x34e>
 8015338:	f06f 0306 	mvn.w	r3, #6
 801533c:	e000      	b.n	8015340 <lwip_netconn_do_writemore+0x350>
 801533e:	2300      	movs	r3, #0
 8015340:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8015342:	2301      	movs	r3, #1
 8015344:	76fb      	strb	r3, [r7, #27]
 8015346:	e001      	b.n	801534c <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8015348:	2301      	movs	r3, #1
 801534a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 801534c:	7efb      	ldrb	r3, [r7, #27]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d015      	beq.n	801537e <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	330c      	adds	r3, #12
 801535a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015360:	7ffa      	ldrb	r2, [r7, #31]
 8015362:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	2200      	movs	r2, #0
 8015368:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2200      	movs	r2, #0
 801536e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015370:	78fb      	ldrb	r3, [r7, #3]
 8015372:	2b00      	cmp	r3, #0
 8015374:	d006      	beq.n	8015384 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8015376:	68b8      	ldr	r0, [r7, #8]
 8015378:	f00c f94c 	bl	8021614 <sys_sem_signal>
 801537c:	e002      	b.n	8015384 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801537e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015382:	e000      	b.n	8015386 <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8015384:	2300      	movs	r3, #0
}
 8015386:	4618      	mov	r0, r3
 8015388:	3720      	adds	r7, #32
 801538a:	46bd      	mov	sp, r7
 801538c:	bd80      	pop	{r7, pc}
 801538e:	bf00      	nop

08015390 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7fe fd08 	bl	8013db6 <netconn_err>
 80153a6:	4603      	mov	r3, r0
 80153a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80153aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d166      	bne.n	8015480 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80153b2:	68bb      	ldr	r3, [r7, #8]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153bc:	2b10      	cmp	r3, #16
 80153be:	d15d      	bne.n	801547c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80153c0:	68bb      	ldr	r3, [r7, #8]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	785b      	ldrb	r3, [r3, #1]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d002      	beq.n	80153d0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80153ca:	23fb      	movs	r3, #251	; 0xfb
 80153cc:	73fb      	strb	r3, [r7, #15]
 80153ce:	e057      	b.n	8015480 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d04d      	beq.n	8015476 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80153da:	68bb      	ldr	r3, [r7, #8]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	2201      	movs	r2, #1
 80153e0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d006      	beq.n	80153fa <lwip_netconn_do_write+0x6a>
 80153ec:	4b28      	ldr	r3, [pc, #160]	; (8015490 <lwip_netconn_do_write+0x100>)
 80153ee:	f240 7223 	movw	r2, #1827	; 0x723
 80153f2:	4928      	ldr	r1, [pc, #160]	; (8015494 <lwip_netconn_do_write+0x104>)
 80153f4:	4828      	ldr	r0, [pc, #160]	; (8015498 <lwip_netconn_do_write+0x108>)
 80153f6:	f00e fa35 	bl	8023864 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80153fa:	68bb      	ldr	r3, [r7, #8]
 80153fc:	695b      	ldr	r3, [r3, #20]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d106      	bne.n	8015410 <lwip_netconn_do_write+0x80>
 8015402:	4b23      	ldr	r3, [pc, #140]	; (8015490 <lwip_netconn_do_write+0x100>)
 8015404:	f240 7224 	movw	r2, #1828	; 0x724
 8015408:	4924      	ldr	r1, [pc, #144]	; (801549c <lwip_netconn_do_write+0x10c>)
 801540a:	4823      	ldr	r0, [pc, #140]	; (8015498 <lwip_netconn_do_write+0x108>)
 801540c:	f00e fa2a 	bl	8023864 <iprintf>
        msg->conn->current_msg = msg;
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	68ba      	ldr	r2, [r7, #8]
 8015416:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8015418:	68bb      	ldr	r3, [r7, #8]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2100      	movs	r1, #0
 801541e:	4618      	mov	r0, r3
 8015420:	f7ff fde6 	bl	8014ff0 <lwip_netconn_do_writemore>
 8015424:	4603      	mov	r3, r0
 8015426:	2b00      	cmp	r3, #0
 8015428:	d02e      	beq.n	8015488 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	785b      	ldrb	r3, [r3, #1]
 8015430:	2b01      	cmp	r3, #1
 8015432:	d006      	beq.n	8015442 <lwip_netconn_do_write+0xb2>
 8015434:	4b16      	ldr	r3, [pc, #88]	; (8015490 <lwip_netconn_do_write+0x100>)
 8015436:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801543a:	4919      	ldr	r1, [pc, #100]	; (80154a0 <lwip_netconn_do_write+0x110>)
 801543c:	4816      	ldr	r0, [pc, #88]	; (8015498 <lwip_netconn_do_write+0x108>)
 801543e:	f00e fa11 	bl	8023864 <iprintf>
          UNLOCK_TCPIP_CORE();
 8015442:	4818      	ldr	r0, [pc, #96]	; (80154a4 <lwip_netconn_do_write+0x114>)
 8015444:	f00c f957 	bl	80216f6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015448:	68bb      	ldr	r3, [r7, #8]
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	330c      	adds	r3, #12
 801544e:	2100      	movs	r1, #0
 8015450:	4618      	mov	r0, r3
 8015452:	f00c f8ae 	bl	80215b2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8015456:	4813      	ldr	r0, [pc, #76]	; (80154a4 <lwip_netconn_do_write+0x114>)
 8015458:	f00c f93e 	bl	80216d8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	785b      	ldrb	r3, [r3, #1]
 8015462:	2b01      	cmp	r3, #1
 8015464:	d110      	bne.n	8015488 <lwip_netconn_do_write+0xf8>
 8015466:	4b0a      	ldr	r3, [pc, #40]	; (8015490 <lwip_netconn_do_write+0x100>)
 8015468:	f240 722c 	movw	r2, #1836	; 0x72c
 801546c:	490c      	ldr	r1, [pc, #48]	; (80154a0 <lwip_netconn_do_write+0x110>)
 801546e:	480a      	ldr	r0, [pc, #40]	; (8015498 <lwip_netconn_do_write+0x108>)
 8015470:	f00e f9f8 	bl	8023864 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8015474:	e008      	b.n	8015488 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8015476:	23f5      	movs	r3, #245	; 0xf5
 8015478:	73fb      	strb	r3, [r7, #15]
 801547a:	e001      	b.n	8015480 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801547c:	23fa      	movs	r3, #250	; 0xfa
 801547e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	7bfa      	ldrb	r2, [r7, #15]
 8015484:	711a      	strb	r2, [r3, #4]
 8015486:	e000      	b.n	801548a <lwip_netconn_do_write+0xfa>
        return;
 8015488:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801548a:	3710      	adds	r7, #16
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}
 8015490:	08028e30 	.word	0x08028e30
 8015494:	080291d4 	.word	0x080291d4
 8015498:	08028e74 	.word	0x08028e74
 801549c:	0802935c 	.word	0x0802935c
 80154a0:	080291f0 	.word	0x080291f0
 80154a4:	20011fb0 	.word	0x20011fb0

080154a8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b084      	sub	sp, #16
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	785b      	ldrb	r3, [r3, #1]
 80154ba:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d069      	beq.n	801559a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80154d0:	2b10      	cmp	r3, #16
 80154d2:	d162      	bne.n	801559a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80154d8:	2b03      	cmp	r3, #3
 80154da:	d002      	beq.n	80154e2 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80154dc:	7afb      	ldrb	r3, [r7, #11]
 80154de:	2b02      	cmp	r3, #2
 80154e0:	d05b      	beq.n	801559a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80154e2:	7afb      	ldrb	r3, [r7, #11]
 80154e4:	2b03      	cmp	r3, #3
 80154e6:	d103      	bne.n	80154f0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	22f5      	movs	r2, #245	; 0xf5
 80154ec:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80154ee:	e059      	b.n	80155a4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80154f0:	7afb      	ldrb	r3, [r7, #11]
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	d103      	bne.n	80154fe <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	22fb      	movs	r2, #251	; 0xfb
 80154fa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80154fc:	e052      	b.n	80155a4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	7a1b      	ldrb	r3, [r3, #8]
 8015502:	f003 0301 	and.w	r3, r3, #1
 8015506:	2b00      	cmp	r3, #0
 8015508:	d004      	beq.n	8015514 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	4618      	mov	r0, r3
 8015510:	f7ff f998 	bl	8014844 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801551a:	2b00      	cmp	r3, #0
 801551c:	d006      	beq.n	801552c <lwip_netconn_do_close+0x84>
 801551e:	4b23      	ldr	r3, [pc, #140]	; (80155ac <lwip_netconn_do_close+0x104>)
 8015520:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8015524:	4922      	ldr	r1, [pc, #136]	; (80155b0 <lwip_netconn_do_close+0x108>)
 8015526:	4823      	ldr	r0, [pc, #140]	; (80155b4 <lwip_netconn_do_close+0x10c>)
 8015528:	f00e f99c 	bl	8023864 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	2204      	movs	r2, #4
 8015532:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	68fa      	ldr	r2, [r7, #12]
 801553a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	2100      	movs	r1, #0
 8015542:	4618      	mov	r0, r3
 8015544:	f7ff f9fc 	bl	8014940 <lwip_netconn_do_close_internal>
 8015548:	4603      	mov	r3, r0
 801554a:	2b00      	cmp	r3, #0
 801554c:	d029      	beq.n	80155a2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	785b      	ldrb	r3, [r3, #1]
 8015554:	2b04      	cmp	r3, #4
 8015556:	d006      	beq.n	8015566 <lwip_netconn_do_close+0xbe>
 8015558:	4b14      	ldr	r3, [pc, #80]	; (80155ac <lwip_netconn_do_close+0x104>)
 801555a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801555e:	4916      	ldr	r1, [pc, #88]	; (80155b8 <lwip_netconn_do_close+0x110>)
 8015560:	4814      	ldr	r0, [pc, #80]	; (80155b4 <lwip_netconn_do_close+0x10c>)
 8015562:	f00e f97f 	bl	8023864 <iprintf>
        UNLOCK_TCPIP_CORE();
 8015566:	4815      	ldr	r0, [pc, #84]	; (80155bc <lwip_netconn_do_close+0x114>)
 8015568:	f00c f8c5 	bl	80216f6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	330c      	adds	r3, #12
 8015572:	2100      	movs	r1, #0
 8015574:	4618      	mov	r0, r3
 8015576:	f00c f81c 	bl	80215b2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801557a:	4810      	ldr	r0, [pc, #64]	; (80155bc <lwip_netconn_do_close+0x114>)
 801557c:	f00c f8ac 	bl	80216d8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	785b      	ldrb	r3, [r3, #1]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d00b      	beq.n	80155a2 <lwip_netconn_do_close+0xfa>
 801558a:	4b08      	ldr	r3, [pc, #32]	; (80155ac <lwip_netconn_do_close+0x104>)
 801558c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8015590:	4909      	ldr	r1, [pc, #36]	; (80155b8 <lwip_netconn_do_close+0x110>)
 8015592:	4808      	ldr	r0, [pc, #32]	; (80155b4 <lwip_netconn_do_close+0x10c>)
 8015594:	f00e f966 	bl	8023864 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8015598:	e003      	b.n	80155a2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	22f5      	movs	r2, #245	; 0xf5
 801559e:	711a      	strb	r2, [r3, #4]
 80155a0:	e000      	b.n	80155a4 <lwip_netconn_do_close+0xfc>
      return;
 80155a2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}
 80155aa:	bf00      	nop
 80155ac:	08028e30 	.word	0x08028e30
 80155b0:	080291d4 	.word	0x080291d4
 80155b4:	08028e74 	.word	0x08028e74
 80155b8:	080291f0 	.word	0x080291f0
 80155bc:	20011fb0 	.word	0x20011fb0

080155c0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b082      	sub	sp, #8
 80155c4:	af00      	add	r7, sp, #0
 80155c6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d013      	beq.n	80155f6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d00b      	beq.n	80155ee <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	4618      	mov	r0, r3
 80155dc:	f002 f884 	bl	80176e8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	2200      	movs	r2, #0
 80155e4:	605a      	str	r2, [r3, #4]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	685a      	ldr	r2, [r3, #4]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80155ee:	6879      	ldr	r1, [r7, #4]
 80155f0:	2006      	movs	r0, #6
 80155f2:	f001 f9d5 	bl	80169a0 <memp_free>
  }
}
 80155f6:	bf00      	nop
 80155f8:	3708      	adds	r7, #8
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}
	...

08015600 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b084      	sub	sp, #16
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
 8015608:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801560a:	f008 fe87 	bl	801e31c <sys_timeouts_sleeptime>
 801560e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015616:	d10b      	bne.n	8015630 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8015618:	4813      	ldr	r0, [pc, #76]	; (8015668 <tcpip_timeouts_mbox_fetch+0x68>)
 801561a:	f00c f86c 	bl	80216f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801561e:	2200      	movs	r2, #0
 8015620:	6839      	ldr	r1, [r7, #0]
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f00b ff24 	bl	8021470 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015628:	480f      	ldr	r0, [pc, #60]	; (8015668 <tcpip_timeouts_mbox_fetch+0x68>)
 801562a:	f00c f855 	bl	80216d8 <sys_mutex_lock>
    return;
 801562e:	e018      	b.n	8015662 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d102      	bne.n	801563c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8015636:	f008 fe37 	bl	801e2a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801563a:	e7e6      	b.n	801560a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801563c:	480a      	ldr	r0, [pc, #40]	; (8015668 <tcpip_timeouts_mbox_fetch+0x68>)
 801563e:	f00c f85a 	bl	80216f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015642:	68fa      	ldr	r2, [r7, #12]
 8015644:	6839      	ldr	r1, [r7, #0]
 8015646:	6878      	ldr	r0, [r7, #4]
 8015648:	f00b ff12 	bl	8021470 <sys_arch_mbox_fetch>
 801564c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801564e:	4806      	ldr	r0, [pc, #24]	; (8015668 <tcpip_timeouts_mbox_fetch+0x68>)
 8015650:	f00c f842 	bl	80216d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801565a:	d102      	bne.n	8015662 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801565c:	f008 fe24 	bl	801e2a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8015660:	e7d3      	b.n	801560a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}
 8015668:	20011fb0 	.word	0x20011fb0

0801566c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801566c:	b580      	push	{r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8015674:	4810      	ldr	r0, [pc, #64]	; (80156b8 <tcpip_thread+0x4c>)
 8015676:	f00c f82f 	bl	80216d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801567a:	4b10      	ldr	r3, [pc, #64]	; (80156bc <tcpip_thread+0x50>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d005      	beq.n	801568e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8015682:	4b0e      	ldr	r3, [pc, #56]	; (80156bc <tcpip_thread+0x50>)
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	4a0e      	ldr	r2, [pc, #56]	; (80156c0 <tcpip_thread+0x54>)
 8015688:	6812      	ldr	r2, [r2, #0]
 801568a:	4610      	mov	r0, r2
 801568c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801568e:	f107 030c 	add.w	r3, r7, #12
 8015692:	4619      	mov	r1, r3
 8015694:	480b      	ldr	r0, [pc, #44]	; (80156c4 <tcpip_thread+0x58>)
 8015696:	f7ff ffb3 	bl	8015600 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d106      	bne.n	80156ae <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80156a0:	4b09      	ldr	r3, [pc, #36]	; (80156c8 <tcpip_thread+0x5c>)
 80156a2:	2291      	movs	r2, #145	; 0x91
 80156a4:	4909      	ldr	r1, [pc, #36]	; (80156cc <tcpip_thread+0x60>)
 80156a6:	480a      	ldr	r0, [pc, #40]	; (80156d0 <tcpip_thread+0x64>)
 80156a8:	f00e f8dc 	bl	8023864 <iprintf>
      continue;
 80156ac:	e003      	b.n	80156b6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	4618      	mov	r0, r3
 80156b2:	f000 f80f 	bl	80156d4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80156b6:	e7ea      	b.n	801568e <tcpip_thread+0x22>
 80156b8:	20011fb0 	.word	0x20011fb0
 80156bc:	20011fa4 	.word	0x20011fa4
 80156c0:	20011fa8 	.word	0x20011fa8
 80156c4:	20011fac 	.word	0x20011fac
 80156c8:	080293b0 	.word	0x080293b0
 80156cc:	080293e0 	.word	0x080293e0
 80156d0:	08029400 	.word	0x08029400

080156d4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b082      	sub	sp, #8
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	781b      	ldrb	r3, [r3, #0]
 80156e0:	2b02      	cmp	r3, #2
 80156e2:	d026      	beq.n	8015732 <tcpip_thread_handle_msg+0x5e>
 80156e4:	2b02      	cmp	r3, #2
 80156e6:	dc2b      	bgt.n	8015740 <tcpip_thread_handle_msg+0x6c>
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d002      	beq.n	80156f2 <tcpip_thread_handle_msg+0x1e>
 80156ec:	2b01      	cmp	r3, #1
 80156ee:	d015      	beq.n	801571c <tcpip_thread_handle_msg+0x48>
 80156f0:	e026      	b.n	8015740 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	6850      	ldr	r0, [r2, #4]
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	6892      	ldr	r2, [r2, #8]
 80156fe:	4611      	mov	r1, r2
 8015700:	4798      	blx	r3
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d004      	beq.n	8015712 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	685b      	ldr	r3, [r3, #4]
 801570c:	4618      	mov	r0, r3
 801570e:	f001 ffeb 	bl	80176e8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015712:	6879      	ldr	r1, [r7, #4]
 8015714:	2009      	movs	r0, #9
 8015716:	f001 f943 	bl	80169a0 <memp_free>
      break;
 801571a:	e018      	b.n	801574e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	6892      	ldr	r2, [r2, #8]
 8015724:	4610      	mov	r0, r2
 8015726:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015728:	6879      	ldr	r1, [r7, #4]
 801572a:	2008      	movs	r0, #8
 801572c:	f001 f938 	bl	80169a0 <memp_free>
      break;
 8015730:	e00d      	b.n	801574e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	685b      	ldr	r3, [r3, #4]
 8015736:	687a      	ldr	r2, [r7, #4]
 8015738:	6892      	ldr	r2, [r2, #8]
 801573a:	4610      	mov	r0, r2
 801573c:	4798      	blx	r3
      break;
 801573e:	e006      	b.n	801574e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015740:	4b05      	ldr	r3, [pc, #20]	; (8015758 <tcpip_thread_handle_msg+0x84>)
 8015742:	22cf      	movs	r2, #207	; 0xcf
 8015744:	4905      	ldr	r1, [pc, #20]	; (801575c <tcpip_thread_handle_msg+0x88>)
 8015746:	4806      	ldr	r0, [pc, #24]	; (8015760 <tcpip_thread_handle_msg+0x8c>)
 8015748:	f00e f88c 	bl	8023864 <iprintf>
      break;
 801574c:	bf00      	nop
  }
}
 801574e:	bf00      	nop
 8015750:	3708      	adds	r7, #8
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop
 8015758:	080293b0 	.word	0x080293b0
 801575c:	080293e0 	.word	0x080293e0
 8015760:	08029400 	.word	0x08029400

08015764 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b086      	sub	sp, #24
 8015768:	af00      	add	r7, sp, #0
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015770:	481a      	ldr	r0, [pc, #104]	; (80157dc <tcpip_inpkt+0x78>)
 8015772:	f00b fed8 	bl	8021526 <sys_mbox_valid>
 8015776:	4603      	mov	r3, r0
 8015778:	2b00      	cmp	r3, #0
 801577a:	d105      	bne.n	8015788 <tcpip_inpkt+0x24>
 801577c:	4b18      	ldr	r3, [pc, #96]	; (80157e0 <tcpip_inpkt+0x7c>)
 801577e:	22fc      	movs	r2, #252	; 0xfc
 8015780:	4918      	ldr	r1, [pc, #96]	; (80157e4 <tcpip_inpkt+0x80>)
 8015782:	4819      	ldr	r0, [pc, #100]	; (80157e8 <tcpip_inpkt+0x84>)
 8015784:	f00e f86e 	bl	8023864 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015788:	2009      	movs	r0, #9
 801578a:	f001 f893 	bl	80168b4 <memp_malloc>
 801578e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d102      	bne.n	801579c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8015796:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801579a:	e01a      	b.n	80157d2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801579c:	697b      	ldr	r3, [r7, #20]
 801579e:	2200      	movs	r2, #0
 80157a0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	68fa      	ldr	r2, [r7, #12]
 80157a6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	68ba      	ldr	r2, [r7, #8]
 80157ac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	687a      	ldr	r2, [r7, #4]
 80157b2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80157b4:	6979      	ldr	r1, [r7, #20]
 80157b6:	4809      	ldr	r0, [pc, #36]	; (80157dc <tcpip_inpkt+0x78>)
 80157b8:	f00b fe40 	bl	802143c <sys_mbox_trypost>
 80157bc:	4603      	mov	r3, r0
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d006      	beq.n	80157d0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80157c2:	6979      	ldr	r1, [r7, #20]
 80157c4:	2009      	movs	r0, #9
 80157c6:	f001 f8eb 	bl	80169a0 <memp_free>
    return ERR_MEM;
 80157ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157ce:	e000      	b.n	80157d2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80157d0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3718      	adds	r7, #24
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	20011fac 	.word	0x20011fac
 80157e0:	080293b0 	.word	0x080293b0
 80157e4:	08029428 	.word	0x08029428
 80157e8:	08029400 	.word	0x08029400

080157ec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80157fc:	f003 0318 	and.w	r3, r3, #24
 8015800:	2b00      	cmp	r3, #0
 8015802:	d006      	beq.n	8015812 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015804:	4a08      	ldr	r2, [pc, #32]	; (8015828 <tcpip_input+0x3c>)
 8015806:	6839      	ldr	r1, [r7, #0]
 8015808:	6878      	ldr	r0, [r7, #4]
 801580a:	f7ff ffab 	bl	8015764 <tcpip_inpkt>
 801580e:	4603      	mov	r3, r0
 8015810:	e005      	b.n	801581e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8015812:	4a06      	ldr	r2, [pc, #24]	; (801582c <tcpip_input+0x40>)
 8015814:	6839      	ldr	r1, [r7, #0]
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f7ff ffa4 	bl	8015764 <tcpip_inpkt>
 801581c:	4603      	mov	r3, r0
}
 801581e:	4618      	mov	r0, r3
 8015820:	3708      	adds	r7, #8
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}
 8015826:	bf00      	nop
 8015828:	08021229 	.word	0x08021229
 801582c:	08020011 	.word	0x08020011

08015830 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801583a:	4819      	ldr	r0, [pc, #100]	; (80158a0 <tcpip_try_callback+0x70>)
 801583c:	f00b fe73 	bl	8021526 <sys_mbox_valid>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d106      	bne.n	8015854 <tcpip_try_callback+0x24>
 8015846:	4b17      	ldr	r3, [pc, #92]	; (80158a4 <tcpip_try_callback+0x74>)
 8015848:	f240 125d 	movw	r2, #349	; 0x15d
 801584c:	4916      	ldr	r1, [pc, #88]	; (80158a8 <tcpip_try_callback+0x78>)
 801584e:	4817      	ldr	r0, [pc, #92]	; (80158ac <tcpip_try_callback+0x7c>)
 8015850:	f00e f808 	bl	8023864 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015854:	2008      	movs	r0, #8
 8015856:	f001 f82d 	bl	80168b4 <memp_malloc>
 801585a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d102      	bne.n	8015868 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8015862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015866:	e017      	b.n	8015898 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	2201      	movs	r2, #1
 801586c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	683a      	ldr	r2, [r7, #0]
 8015878:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801587a:	68f9      	ldr	r1, [r7, #12]
 801587c:	4808      	ldr	r0, [pc, #32]	; (80158a0 <tcpip_try_callback+0x70>)
 801587e:	f00b fddd 	bl	802143c <sys_mbox_trypost>
 8015882:	4603      	mov	r3, r0
 8015884:	2b00      	cmp	r3, #0
 8015886:	d006      	beq.n	8015896 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015888:	68f9      	ldr	r1, [r7, #12]
 801588a:	2008      	movs	r0, #8
 801588c:	f001 f888 	bl	80169a0 <memp_free>
    return ERR_MEM;
 8015890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015894:	e000      	b.n	8015898 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8015896:	2300      	movs	r3, #0
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	20011fac 	.word	0x20011fac
 80158a4:	080293b0 	.word	0x080293b0
 80158a8:	08029428 	.word	0x08029428
 80158ac:	08029400 	.word	0x08029400

080158b0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80158b0:	b580      	push	{r7, lr}
 80158b2:	b084      	sub	sp, #16
 80158b4:	af00      	add	r7, sp, #0
 80158b6:	60f8      	str	r0, [r7, #12]
 80158b8:	60b9      	str	r1, [r7, #8]
 80158ba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80158bc:	4806      	ldr	r0, [pc, #24]	; (80158d8 <tcpip_send_msg_wait_sem+0x28>)
 80158be:	f00b ff0b 	bl	80216d8 <sys_mutex_lock>
  fn(apimsg);
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	68b8      	ldr	r0, [r7, #8]
 80158c6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80158c8:	4803      	ldr	r0, [pc, #12]	; (80158d8 <tcpip_send_msg_wait_sem+0x28>)
 80158ca:	f00b ff14 	bl	80216f6 <sys_mutex_unlock>
  return ERR_OK;
 80158ce:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3710      	adds	r7, #16
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bd80      	pop	{r7, pc}
 80158d8:	20011fb0 	.word	0x20011fb0

080158dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b084      	sub	sp, #16
 80158e0:	af02      	add	r7, sp, #8
 80158e2:	6078      	str	r0, [r7, #4]
 80158e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 80158e6:	f000 fb3a 	bl	8015f5e <lwip_init>

  tcpip_init_done = initfunc;
 80158ea:	4a17      	ldr	r2, [pc, #92]	; (8015948 <tcpip_init+0x6c>)
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80158f0:	4a16      	ldr	r2, [pc, #88]	; (801594c <tcpip_init+0x70>)
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80158f6:	2106      	movs	r1, #6
 80158f8:	4815      	ldr	r0, [pc, #84]	; (8015950 <tcpip_init+0x74>)
 80158fa:	f00b fd6b 	bl	80213d4 <sys_mbox_new>
 80158fe:	4603      	mov	r3, r0
 8015900:	2b00      	cmp	r3, #0
 8015902:	d006      	beq.n	8015912 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015904:	4b13      	ldr	r3, [pc, #76]	; (8015954 <tcpip_init+0x78>)
 8015906:	f240 2261 	movw	r2, #609	; 0x261
 801590a:	4913      	ldr	r1, [pc, #76]	; (8015958 <tcpip_init+0x7c>)
 801590c:	4813      	ldr	r0, [pc, #76]	; (801595c <tcpip_init+0x80>)
 801590e:	f00d ffa9 	bl	8023864 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015912:	4813      	ldr	r0, [pc, #76]	; (8015960 <tcpip_init+0x84>)
 8015914:	f00b fec4 	bl	80216a0 <sys_mutex_new>
 8015918:	4603      	mov	r3, r0
 801591a:	2b00      	cmp	r3, #0
 801591c:	d006      	beq.n	801592c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801591e:	4b0d      	ldr	r3, [pc, #52]	; (8015954 <tcpip_init+0x78>)
 8015920:	f240 2265 	movw	r2, #613	; 0x265
 8015924:	490f      	ldr	r1, [pc, #60]	; (8015964 <tcpip_init+0x88>)
 8015926:	480d      	ldr	r0, [pc, #52]	; (801595c <tcpip_init+0x80>)
 8015928:	f00d ff9c 	bl	8023864 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801592c:	2300      	movs	r3, #0
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015934:	2200      	movs	r2, #0
 8015936:	490c      	ldr	r1, [pc, #48]	; (8015968 <tcpip_init+0x8c>)
 8015938:	480c      	ldr	r0, [pc, #48]	; (801596c <tcpip_init+0x90>)
 801593a:	f00b fee9 	bl	8021710 <sys_thread_new>
}
 801593e:	bf00      	nop
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	20011fa4 	.word	0x20011fa4
 801594c:	20011fa8 	.word	0x20011fa8
 8015950:	20011fac 	.word	0x20011fac
 8015954:	080293b0 	.word	0x080293b0
 8015958:	08029438 	.word	0x08029438
 801595c:	08029400 	.word	0x08029400
 8015960:	20011fb0 	.word	0x20011fb0
 8015964:	0802945c 	.word	0x0802945c
 8015968:	0801566d 	.word	0x0801566d
 801596c:	08029480 	.word	0x08029480

08015970 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8015970:	b480      	push	{r7}
 8015972:	b083      	sub	sp, #12
 8015974:	af00      	add	r7, sp, #0
 8015976:	4603      	mov	r3, r0
 8015978:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801597a:	88fb      	ldrh	r3, [r7, #6]
 801597c:	021b      	lsls	r3, r3, #8
 801597e:	b21a      	sxth	r2, r3
 8015980:	88fb      	ldrh	r3, [r7, #6]
 8015982:	0a1b      	lsrs	r3, r3, #8
 8015984:	b29b      	uxth	r3, r3
 8015986:	b21b      	sxth	r3, r3
 8015988:	4313      	orrs	r3, r2
 801598a:	b21b      	sxth	r3, r3
 801598c:	b29b      	uxth	r3, r3
}
 801598e:	4618      	mov	r0, r3
 8015990:	370c      	adds	r7, #12
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801599a:	b480      	push	{r7}
 801599c:	b083      	sub	sp, #12
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	061a      	lsls	r2, r3, #24
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	021b      	lsls	r3, r3, #8
 80159aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80159ae:	431a      	orrs	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	0a1b      	lsrs	r3, r3, #8
 80159b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80159b8:	431a      	orrs	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	0e1b      	lsrs	r3, r3, #24
 80159be:	4313      	orrs	r3, r2
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	370c      	adds	r7, #12
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr

080159cc <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80159cc:	b480      	push	{r7}
 80159ce:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80159d0:	bf00      	nop
 80159d2:	46bd      	mov	sp, r7
 80159d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d8:	4770      	bx	lr

080159da <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80159da:	b580      	push	{r7, lr}
 80159dc:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80159de:	f000 faa9 	bl	8015f34 <dns_check_entries>
}
 80159e2:	bf00      	nop
 80159e4:	bd80      	pop	{r7, pc}
	...

080159e8 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b090      	sub	sp, #64	; 0x40
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	4603      	mov	r3, r0
 80159f0:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80159f2:	79fa      	ldrb	r2, [r7, #7]
 80159f4:	4613      	mov	r3, r2
 80159f6:	011b      	lsls	r3, r3, #4
 80159f8:	4413      	add	r3, r2
 80159fa:	011b      	lsls	r3, r3, #4
 80159fc:	4a6c      	ldr	r2, [pc, #432]	; (8015bb0 <dns_send+0x1c8>)
 80159fe:	4413      	add	r3, r2
 8015a00:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8015a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a04:	7adb      	ldrb	r3, [r3, #11]
 8015a06:	2b01      	cmp	r3, #1
 8015a08:	d906      	bls.n	8015a18 <dns_send+0x30>
 8015a0a:	4b6a      	ldr	r3, [pc, #424]	; (8015bb4 <dns_send+0x1cc>)
 8015a0c:	f240 22fa 	movw	r2, #762	; 0x2fa
 8015a10:	4969      	ldr	r1, [pc, #420]	; (8015bb8 <dns_send+0x1d0>)
 8015a12:	486a      	ldr	r0, [pc, #424]	; (8015bbc <dns_send+0x1d4>)
 8015a14:	f00d ff26 	bl	8023864 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8015a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1a:	7adb      	ldrb	r3, [r3, #11]
 8015a1c:	461a      	mov	r2, r3
 8015a1e:	4b68      	ldr	r3, [pc, #416]	; (8015bc0 <dns_send+0x1d8>)
 8015a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d109      	bne.n	8015a3c <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8015a28:	79fb      	ldrb	r3, [r7, #7]
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f000 f8cb 	bl	8015bc8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8015a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a34:	2200      	movs	r2, #0
 8015a36:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e0b4      	b.n	8015ba6 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a3e:	3310      	adds	r3, #16
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7ea fc25 	bl	8000290 <strlen>
 8015a46:	4603      	mov	r3, r0
 8015a48:	b29b      	uxth	r3, r3
 8015a4a:	3312      	adds	r3, #18
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a52:	4619      	mov	r1, r3
 8015a54:	2036      	movs	r0, #54	; 0x36
 8015a56:	f001 fb63 	bl	8017120 <pbuf_alloc>
 8015a5a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8015a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	f000 8095 	beq.w	8015b8e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8015a64:	f107 0310 	add.w	r3, r7, #16
 8015a68:	220c      	movs	r2, #12
 8015a6a:	2100      	movs	r1, #0
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f00e f8bf 	bl	8023bf0 <memset>
    hdr.id = lwip_htons(entry->txid);
 8015a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a74:	891b      	ldrh	r3, [r3, #8]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7ff ff7a 	bl	8015970 <lwip_htons>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8015a80:	2301      	movs	r3, #1
 8015a82:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8015a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015a88:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8015a8a:	f107 0310 	add.w	r3, r7, #16
 8015a8e:	220c      	movs	r2, #12
 8015a90:	4619      	mov	r1, r3
 8015a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015a94:	f002 f8dc 	bl	8017c50 <pbuf_take>
    hostname = entry->name;
 8015a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a9a:	3310      	adds	r3, #16
 8015a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8015a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa0:	3b01      	subs	r3, #1
 8015aa2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8015aa4:	230c      	movs	r3, #12
 8015aa6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8015aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aaa:	3301      	adds	r3, #1
 8015aac:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8015aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015ab8:	e007      	b.n	8015aca <dns_send+0xe2>
        ++n;
 8015aba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015abe:	3301      	adds	r3, #1
 8015ac0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	63bb      	str	r3, [r7, #56]	; 0x38
 8015aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	2b2e      	cmp	r3, #46	; 0x2e
 8015ad0:	d003      	beq.n	8015ada <dns_send+0xf2>
 8015ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d1ef      	bne.n	8015aba <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8015ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ade:	1ad3      	subs	r3, r2, r3
 8015ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8015ae2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8015ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015ae8:	4413      	add	r3, r2
 8015aea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015aee:	4293      	cmp	r3, r2
 8015af0:	dc53      	bgt.n	8015b9a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8015af2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8015af6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015af8:	4619      	mov	r1, r3
 8015afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015afc:	f002 f9d6 	bl	8017eac <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8015b00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b02:	3301      	adds	r3, #1
 8015b04:	b29b      	uxth	r3, r3
 8015b06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b0c:	f002 f932 	bl	8017d74 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8015b10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b18:	4413      	add	r3, r2
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8015b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b22:	781b      	ldrb	r3, [r3, #0]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d1bf      	bne.n	8015aa8 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8015b28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b30:	f002 f9bc 	bl	8017eac <pbuf_put_at>
    query_idx++;
 8015b34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b36:	3301      	adds	r3, #1
 8015b38:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8015b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015b3e:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8015b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015b44:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8015b46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015b48:	f107 010c 	add.w	r1, r7, #12
 8015b4c:	2204      	movs	r2, #4
 8015b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b50:	f002 f910 	bl	8017d74 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8015b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b56:	7bdb      	ldrb	r3, [r3, #15]
 8015b58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8015b5c:	2335      	movs	r3, #53	; 0x35
 8015b5e:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8015b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b62:	7adb      	ldrb	r3, [r3, #11]
 8015b64:	009b      	lsls	r3, r3, #2
 8015b66:	4a16      	ldr	r2, [pc, #88]	; (8015bc0 <dns_send+0x1d8>)
 8015b68:	4413      	add	r3, r2
 8015b6a:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8015b70:	4a14      	ldr	r2, [pc, #80]	; (8015bc4 <dns_send+0x1dc>)
 8015b72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015b78:	69fa      	ldr	r2, [r7, #28]
 8015b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015b7c:	f008 fdd4 	bl	801e728 <udp_sendto>
 8015b80:	4603      	mov	r3, r0
 8015b82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8015b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b88:	f001 fdae 	bl	80176e8 <pbuf_free>
 8015b8c:	e002      	b.n	8015b94 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8015b8e:	23ff      	movs	r3, #255	; 0xff
 8015b90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8015b94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015b98:	e005      	b.n	8015ba6 <dns_send+0x1be>
        goto overflow_return;
 8015b9a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8015b9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015b9e:	f001 fda3 	bl	80176e8 <pbuf_free>
  return ERR_VAL;
 8015ba2:	f06f 0305 	mvn.w	r3, #5
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3740      	adds	r7, #64	; 0x40
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	20011fc4 	.word	0x20011fc4
 8015bb4:	08029490 	.word	0x08029490
 8015bb8:	080294c0 	.word	0x080294c0
 8015bbc:	080294d8 	.word	0x080294d8
 8015bc0:	20012434 	.word	0x20012434
 8015bc4:	20011fb4 	.word	0x20011fb4

08015bc8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8015bc8:	b590      	push	{r4, r7, lr}
 8015bca:	b085      	sub	sp, #20
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	4603      	mov	r3, r0
 8015bd0:	6039      	str	r1, [r7, #0]
 8015bd2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	73fb      	strb	r3, [r7, #15]
 8015bd8:	e03d      	b.n	8015c56 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8015bda:	7bfa      	ldrb	r2, [r7, #15]
 8015bdc:	4957      	ldr	r1, [pc, #348]	; (8015d3c <dns_call_found+0x174>)
 8015bde:	4613      	mov	r3, r2
 8015be0:	005b      	lsls	r3, r3, #1
 8015be2:	4413      	add	r3, r2
 8015be4:	009b      	lsls	r3, r3, #2
 8015be6:	440b      	add	r3, r1
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d030      	beq.n	8015c50 <dns_call_found+0x88>
 8015bee:	7bfa      	ldrb	r2, [r7, #15]
 8015bf0:	4952      	ldr	r1, [pc, #328]	; (8015d3c <dns_call_found+0x174>)
 8015bf2:	4613      	mov	r3, r2
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	4413      	add	r3, r2
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	440b      	add	r3, r1
 8015bfc:	3308      	adds	r3, #8
 8015bfe:	781b      	ldrb	r3, [r3, #0]
 8015c00:	79fa      	ldrb	r2, [r7, #7]
 8015c02:	429a      	cmp	r2, r3
 8015c04:	d124      	bne.n	8015c50 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8015c06:	7bfa      	ldrb	r2, [r7, #15]
 8015c08:	494c      	ldr	r1, [pc, #304]	; (8015d3c <dns_call_found+0x174>)
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	005b      	lsls	r3, r3, #1
 8015c0e:	4413      	add	r3, r2
 8015c10:	009b      	lsls	r3, r3, #2
 8015c12:	440b      	add	r3, r1
 8015c14:	681c      	ldr	r4, [r3, #0]
 8015c16:	79fa      	ldrb	r2, [r7, #7]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	011b      	lsls	r3, r3, #4
 8015c1c:	4413      	add	r3, r2
 8015c1e:	011b      	lsls	r3, r3, #4
 8015c20:	3310      	adds	r3, #16
 8015c22:	4a47      	ldr	r2, [pc, #284]	; (8015d40 <dns_call_found+0x178>)
 8015c24:	1898      	adds	r0, r3, r2
 8015c26:	7bfa      	ldrb	r2, [r7, #15]
 8015c28:	4944      	ldr	r1, [pc, #272]	; (8015d3c <dns_call_found+0x174>)
 8015c2a:	4613      	mov	r3, r2
 8015c2c:	005b      	lsls	r3, r3, #1
 8015c2e:	4413      	add	r3, r2
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	440b      	add	r3, r1
 8015c34:	3304      	adds	r3, #4
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	461a      	mov	r2, r3
 8015c3a:	6839      	ldr	r1, [r7, #0]
 8015c3c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8015c3e:	7bfa      	ldrb	r2, [r7, #15]
 8015c40:	493e      	ldr	r1, [pc, #248]	; (8015d3c <dns_call_found+0x174>)
 8015c42:	4613      	mov	r3, r2
 8015c44:	005b      	lsls	r3, r3, #1
 8015c46:	4413      	add	r3, r2
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	440b      	add	r3, r1
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015c50:	7bfb      	ldrb	r3, [r7, #15]
 8015c52:	3301      	adds	r3, #1
 8015c54:	73fb      	strb	r3, [r7, #15]
 8015c56:	7bfb      	ldrb	r3, [r7, #15]
 8015c58:	2b03      	cmp	r3, #3
 8015c5a:	d9be      	bls.n	8015bda <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	73fb      	strb	r3, [r7, #15]
 8015c60:	e031      	b.n	8015cc6 <dns_call_found+0xfe>
    if (i == idx) {
 8015c62:	7bfa      	ldrb	r2, [r7, #15]
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d029      	beq.n	8015cbe <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8015c6a:	7bfa      	ldrb	r2, [r7, #15]
 8015c6c:	4934      	ldr	r1, [pc, #208]	; (8015d40 <dns_call_found+0x178>)
 8015c6e:	4613      	mov	r3, r2
 8015c70:	011b      	lsls	r3, r3, #4
 8015c72:	4413      	add	r3, r2
 8015c74:	011b      	lsls	r3, r3, #4
 8015c76:	440b      	add	r3, r1
 8015c78:	330a      	adds	r3, #10
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d11f      	bne.n	8015cc0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8015c80:	7bfa      	ldrb	r2, [r7, #15]
 8015c82:	492f      	ldr	r1, [pc, #188]	; (8015d40 <dns_call_found+0x178>)
 8015c84:	4613      	mov	r3, r2
 8015c86:	011b      	lsls	r3, r3, #4
 8015c88:	4413      	add	r3, r2
 8015c8a:	011b      	lsls	r3, r3, #4
 8015c8c:	440b      	add	r3, r1
 8015c8e:	330f      	adds	r3, #15
 8015c90:	7819      	ldrb	r1, [r3, #0]
 8015c92:	79fa      	ldrb	r2, [r7, #7]
 8015c94:	482a      	ldr	r0, [pc, #168]	; (8015d40 <dns_call_found+0x178>)
 8015c96:	4613      	mov	r3, r2
 8015c98:	011b      	lsls	r3, r3, #4
 8015c9a:	4413      	add	r3, r2
 8015c9c:	011b      	lsls	r3, r3, #4
 8015c9e:	4403      	add	r3, r0
 8015ca0:	330f      	adds	r3, #15
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	4299      	cmp	r1, r3
 8015ca6:	d10b      	bne.n	8015cc0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015ca8:	79fa      	ldrb	r2, [r7, #7]
 8015caa:	4925      	ldr	r1, [pc, #148]	; (8015d40 <dns_call_found+0x178>)
 8015cac:	4613      	mov	r3, r2
 8015cae:	011b      	lsls	r3, r3, #4
 8015cb0:	4413      	add	r3, r2
 8015cb2:	011b      	lsls	r3, r3, #4
 8015cb4:	440b      	add	r3, r1
 8015cb6:	330f      	adds	r3, #15
 8015cb8:	2204      	movs	r2, #4
 8015cba:	701a      	strb	r2, [r3, #0]
        break;
 8015cbc:	e006      	b.n	8015ccc <dns_call_found+0x104>
      continue; /* only check other requests */
 8015cbe:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015cc0:	7bfb      	ldrb	r3, [r7, #15]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	73fb      	strb	r3, [r7, #15]
 8015cc6:	7bfb      	ldrb	r3, [r7, #15]
 8015cc8:	2b03      	cmp	r3, #3
 8015cca:	d9ca      	bls.n	8015c62 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8015ccc:	79fa      	ldrb	r2, [r7, #7]
 8015cce:	491c      	ldr	r1, [pc, #112]	; (8015d40 <dns_call_found+0x178>)
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	011b      	lsls	r3, r3, #4
 8015cd4:	4413      	add	r3, r2
 8015cd6:	011b      	lsls	r3, r3, #4
 8015cd8:	440b      	add	r3, r1
 8015cda:	330f      	adds	r3, #15
 8015cdc:	781b      	ldrb	r3, [r3, #0]
 8015cde:	2b03      	cmp	r3, #3
 8015ce0:	d827      	bhi.n	8015d32 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8015ce2:	79fa      	ldrb	r2, [r7, #7]
 8015ce4:	4916      	ldr	r1, [pc, #88]	; (8015d40 <dns_call_found+0x178>)
 8015ce6:	4613      	mov	r3, r2
 8015ce8:	011b      	lsls	r3, r3, #4
 8015cea:	4413      	add	r3, r2
 8015cec:	011b      	lsls	r3, r3, #4
 8015cee:	440b      	add	r3, r1
 8015cf0:	330f      	adds	r3, #15
 8015cf2:	781b      	ldrb	r3, [r3, #0]
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	4b13      	ldr	r3, [pc, #76]	; (8015d44 <dns_call_found+0x17c>)
 8015cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f008 ff7d 	bl	801ebfc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015d02:	79fa      	ldrb	r2, [r7, #7]
 8015d04:	490e      	ldr	r1, [pc, #56]	; (8015d40 <dns_call_found+0x178>)
 8015d06:	4613      	mov	r3, r2
 8015d08:	011b      	lsls	r3, r3, #4
 8015d0a:	4413      	add	r3, r2
 8015d0c:	011b      	lsls	r3, r3, #4
 8015d0e:	440b      	add	r3, r1
 8015d10:	330f      	adds	r3, #15
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	4619      	mov	r1, r3
 8015d16:	4b0b      	ldr	r3, [pc, #44]	; (8015d44 <dns_call_found+0x17c>)
 8015d18:	2200      	movs	r2, #0
 8015d1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015d1e:	79fa      	ldrb	r2, [r7, #7]
 8015d20:	4907      	ldr	r1, [pc, #28]	; (8015d40 <dns_call_found+0x178>)
 8015d22:	4613      	mov	r3, r2
 8015d24:	011b      	lsls	r3, r3, #4
 8015d26:	4413      	add	r3, r2
 8015d28:	011b      	lsls	r3, r3, #4
 8015d2a:	440b      	add	r3, r1
 8015d2c:	330f      	adds	r3, #15
 8015d2e:	2204      	movs	r2, #4
 8015d30:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8015d32:	bf00      	nop
 8015d34:	3714      	adds	r7, #20
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd90      	pop	{r4, r7, pc}
 8015d3a:	bf00      	nop
 8015d3c:	20012404 	.word	0x20012404
 8015d40:	20011fc4 	.word	0x20011fc4
 8015d44:	20011fb4 	.word	0x20011fb4

08015d48 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8015d4e:	f00c ff8d 	bl	8022c6c <rand>
 8015d52:	4603      	mov	r3, r0
 8015d54:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015d56:	2300      	movs	r3, #0
 8015d58:	71fb      	strb	r3, [r7, #7]
 8015d5a:	e01a      	b.n	8015d92 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015d5c:	79fa      	ldrb	r2, [r7, #7]
 8015d5e:	4911      	ldr	r1, [pc, #68]	; (8015da4 <dns_create_txid+0x5c>)
 8015d60:	4613      	mov	r3, r2
 8015d62:	011b      	lsls	r3, r3, #4
 8015d64:	4413      	add	r3, r2
 8015d66:	011b      	lsls	r3, r3, #4
 8015d68:	440b      	add	r3, r1
 8015d6a:	330a      	adds	r3, #10
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b02      	cmp	r3, #2
 8015d70:	d10c      	bne.n	8015d8c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8015d72:	79fa      	ldrb	r2, [r7, #7]
 8015d74:	490b      	ldr	r1, [pc, #44]	; (8015da4 <dns_create_txid+0x5c>)
 8015d76:	4613      	mov	r3, r2
 8015d78:	011b      	lsls	r3, r3, #4
 8015d7a:	4413      	add	r3, r2
 8015d7c:	011b      	lsls	r3, r3, #4
 8015d7e:	440b      	add	r3, r1
 8015d80:	3308      	adds	r3, #8
 8015d82:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015d84:	88ba      	ldrh	r2, [r7, #4]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d100      	bne.n	8015d8c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8015d8a:	e7e0      	b.n	8015d4e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015d8c:	79fb      	ldrb	r3, [r7, #7]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	71fb      	strb	r3, [r7, #7]
 8015d92:	79fb      	ldrb	r3, [r7, #7]
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	d9e1      	bls.n	8015d5c <dns_create_txid+0x14>
    }
  }

  return txid;
 8015d98:	88bb      	ldrh	r3, [r7, #4]
}
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	3708      	adds	r7, #8
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	20011fc4 	.word	0x20011fc4

08015da8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8015da8:	b480      	push	{r7}
 8015daa:	b085      	sub	sp, #20
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8015db0:	2300      	movs	r3, #0
 8015db2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00d      	beq.n	8015dd6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7adb      	ldrb	r3, [r3, #11]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d109      	bne.n	8015dd6 <dns_backupserver_available+0x2e>
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	7adb      	ldrb	r3, [r3, #11]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	4a06      	ldr	r2, [pc, #24]	; (8015de4 <dns_backupserver_available+0x3c>)
 8015dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d001      	beq.n	8015dd6 <dns_backupserver_available+0x2e>
      ret = 1;
 8015dd2:	2301      	movs	r3, #1
 8015dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8015dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3714      	adds	r7, #20
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015de2:	4770      	bx	lr
 8015de4:	20012434 	.word	0x20012434

08015de8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b084      	sub	sp, #16
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	4603      	mov	r3, r0
 8015df0:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8015df2:	79fa      	ldrb	r2, [r7, #7]
 8015df4:	4613      	mov	r3, r2
 8015df6:	011b      	lsls	r3, r3, #4
 8015df8:	4413      	add	r3, r2
 8015dfa:	011b      	lsls	r3, r3, #4
 8015dfc:	4a48      	ldr	r2, [pc, #288]	; (8015f20 <dns_check_entry+0x138>)
 8015dfe:	4413      	add	r3, r2
 8015e00:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015e02:	79fb      	ldrb	r3, [r7, #7]
 8015e04:	2b03      	cmp	r3, #3
 8015e06:	d906      	bls.n	8015e16 <dns_check_entry+0x2e>
 8015e08:	4b46      	ldr	r3, [pc, #280]	; (8015f24 <dns_check_entry+0x13c>)
 8015e0a:	f240 421c 	movw	r2, #1052	; 0x41c
 8015e0e:	4946      	ldr	r1, [pc, #280]	; (8015f28 <dns_check_entry+0x140>)
 8015e10:	4846      	ldr	r0, [pc, #280]	; (8015f2c <dns_check_entry+0x144>)
 8015e12:	f00d fd27 	bl	8023864 <iprintf>

  switch (entry->state) {
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	7a9b      	ldrb	r3, [r3, #10]
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d86f      	bhi.n	8015efe <dns_check_entry+0x116>
 8015e1e:	a201      	add	r2, pc, #4	; (adr r2, 8015e24 <dns_check_entry+0x3c>)
 8015e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e24:	08015f0f 	.word	0x08015f0f
 8015e28:	08015e35 	.word	0x08015e35
 8015e2c:	08015e67 	.word	0x08015e67
 8015e30:	08015edd 	.word	0x08015edd
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8015e34:	f7ff ff88 	bl	8015d48 <dns_create_txid>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	2202      	movs	r2, #2
 8015e44:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	2201      	movs	r2, #1
 8015e50:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	2200      	movs	r2, #0
 8015e56:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8015e58:	79fb      	ldrb	r3, [r7, #7]
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f7ff fdc4 	bl	80159e8 <dns_send>
 8015e60:	4603      	mov	r3, r0
 8015e62:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8015e64:	e058      	b.n	8015f18 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	7b1b      	ldrb	r3, [r3, #12]
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	b2da      	uxtb	r2, r3
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	731a      	strb	r2, [r3, #12]
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	7b1b      	ldrb	r3, [r3, #12]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d14b      	bne.n	8015f12 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	7b5b      	ldrb	r3, [r3, #13]
 8015e7e:	3301      	adds	r3, #1
 8015e80:	b2da      	uxtb	r2, r3
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	735a      	strb	r2, [r3, #13]
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	7b5b      	ldrb	r3, [r3, #13]
 8015e8a:	2b04      	cmp	r3, #4
 8015e8c:	d11b      	bne.n	8015ec6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8015e8e:	68f8      	ldr	r0, [r7, #12]
 8015e90:	f7ff ff8a 	bl	8015da8 <dns_backupserver_available>
 8015e94:	4603      	mov	r3, r0
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d00c      	beq.n	8015eb4 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	7adb      	ldrb	r3, [r3, #11]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	b2da      	uxtb	r2, r3
 8015ea2:	68fb      	ldr	r3, [r7, #12]
 8015ea4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	2201      	movs	r2, #1
 8015eaa:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2200      	movs	r2, #0
 8015eb0:	735a      	strb	r2, [r3, #13]
 8015eb2:	e00c      	b.n	8015ece <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8015eb4:	79fb      	ldrb	r3, [r7, #7]
 8015eb6:	2100      	movs	r1, #0
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ff fe85 	bl	8015bc8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	729a      	strb	r2, [r3, #10]
            break;
 8015ec4:	e028      	b.n	8015f18 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	7b5a      	ldrb	r2, [r3, #13]
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8015ece:	79fb      	ldrb	r3, [r7, #7]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ff fd89 	bl	80159e8 <dns_send>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8015eda:	e01a      	b.n	8015f12 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	681b      	ldr	r3, [r3, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d008      	beq.n	8015ef6 <dns_check_entry+0x10e>
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	1e5a      	subs	r2, r3, #1
 8015eea:	68fb      	ldr	r3, [r7, #12]
 8015eec:	601a      	str	r2, [r3, #0]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d10f      	bne.n	8015f16 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	2200      	movs	r2, #0
 8015efa:	729a      	strb	r2, [r3, #10]
      }
      break;
 8015efc:	e00b      	b.n	8015f16 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8015efe:	4b09      	ldr	r3, [pc, #36]	; (8015f24 <dns_check_entry+0x13c>)
 8015f00:	f240 425b 	movw	r2, #1115	; 0x45b
 8015f04:	490a      	ldr	r1, [pc, #40]	; (8015f30 <dns_check_entry+0x148>)
 8015f06:	4809      	ldr	r0, [pc, #36]	; (8015f2c <dns_check_entry+0x144>)
 8015f08:	f00d fcac 	bl	8023864 <iprintf>
      break;
 8015f0c:	e004      	b.n	8015f18 <dns_check_entry+0x130>
      break;
 8015f0e:	bf00      	nop
 8015f10:	e002      	b.n	8015f18 <dns_check_entry+0x130>
      break;
 8015f12:	bf00      	nop
 8015f14:	e000      	b.n	8015f18 <dns_check_entry+0x130>
      break;
 8015f16:	bf00      	nop
  }
}
 8015f18:	bf00      	nop
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}
 8015f20:	20011fc4 	.word	0x20011fc4
 8015f24:	08029490 	.word	0x08029490
 8015f28:	08029500 	.word	0x08029500
 8015f2c:	080294d8 	.word	0x080294d8
 8015f30:	0802951c 	.word	0x0802951c

08015f34 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	71fb      	strb	r3, [r7, #7]
 8015f3e:	e006      	b.n	8015f4e <dns_check_entries+0x1a>
    dns_check_entry(i);
 8015f40:	79fb      	ldrb	r3, [r7, #7]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7ff ff50 	bl	8015de8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8015f48:	79fb      	ldrb	r3, [r7, #7]
 8015f4a:	3301      	adds	r3, #1
 8015f4c:	71fb      	strb	r3, [r7, #7]
 8015f4e:	79fb      	ldrb	r3, [r7, #7]
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d9f5      	bls.n	8015f40 <dns_check_entries+0xc>
  }
}
 8015f54:	bf00      	nop
 8015f56:	bf00      	nop
 8015f58:	3708      	adds	r7, #8
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}

08015f5e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015f5e:	b580      	push	{r7, lr}
 8015f60:	b082      	sub	sp, #8
 8015f62:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8015f64:	2300      	movs	r3, #0
 8015f66:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015f68:	f00b fb8c 	bl	8021684 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015f6c:	f000 f8d6 	bl	801611c <mem_init>
  memp_init();
 8015f70:	f000 fc32 	bl	80167d8 <memp_init>
  pbuf_init();
  netif_init();
 8015f74:	f000 fd3e 	bl	80169f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015f78:	f008 fa08 	bl	801e38c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015f7c:	f001 ffb8 	bl	8017ef0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8015f80:	f7ff fd24 	bl	80159cc <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015f84:	f008 f948 	bl	801e218 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015f88:	bf00      	nop
 8015f8a:	3708      	adds	r7, #8
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	4603      	mov	r3, r0
 8015f98:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015f9a:	4b05      	ldr	r3, [pc, #20]	; (8015fb0 <ptr_to_mem+0x20>)
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	88fb      	ldrh	r3, [r7, #6]
 8015fa0:	4413      	add	r3, r2
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	370c      	adds	r7, #12
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fac:	4770      	bx	lr
 8015fae:	bf00      	nop
 8015fb0:	20012c68 	.word	0x20012c68

08015fb4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b083      	sub	sp, #12
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015fbc:	4b05      	ldr	r3, [pc, #20]	; (8015fd4 <mem_to_ptr+0x20>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	687a      	ldr	r2, [r7, #4]
 8015fc2:	1ad3      	subs	r3, r2, r3
 8015fc4:	b29b      	uxth	r3, r3
}
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	370c      	adds	r7, #12
 8015fca:	46bd      	mov	sp, r7
 8015fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	20012c68 	.word	0x20012c68

08015fd8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015fd8:	b590      	push	{r4, r7, lr}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015fe0:	4b45      	ldr	r3, [pc, #276]	; (80160f8 <plug_holes+0x120>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	687a      	ldr	r2, [r7, #4]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d206      	bcs.n	8015ff8 <plug_holes+0x20>
 8015fea:	4b44      	ldr	r3, [pc, #272]	; (80160fc <plug_holes+0x124>)
 8015fec:	f240 12df 	movw	r2, #479	; 0x1df
 8015ff0:	4943      	ldr	r1, [pc, #268]	; (8016100 <plug_holes+0x128>)
 8015ff2:	4844      	ldr	r0, [pc, #272]	; (8016104 <plug_holes+0x12c>)
 8015ff4:	f00d fc36 	bl	8023864 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015ff8:	4b43      	ldr	r3, [pc, #268]	; (8016108 <plug_holes+0x130>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	429a      	cmp	r2, r3
 8016000:	d306      	bcc.n	8016010 <plug_holes+0x38>
 8016002:	4b3e      	ldr	r3, [pc, #248]	; (80160fc <plug_holes+0x124>)
 8016004:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016008:	4940      	ldr	r1, [pc, #256]	; (801610c <plug_holes+0x134>)
 801600a:	483e      	ldr	r0, [pc, #248]	; (8016104 <plug_holes+0x12c>)
 801600c:	f00d fc2a 	bl	8023864 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	791b      	ldrb	r3, [r3, #4]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d006      	beq.n	8016026 <plug_holes+0x4e>
 8016018:	4b38      	ldr	r3, [pc, #224]	; (80160fc <plug_holes+0x124>)
 801601a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801601e:	493c      	ldr	r1, [pc, #240]	; (8016110 <plug_holes+0x138>)
 8016020:	4838      	ldr	r0, [pc, #224]	; (8016104 <plug_holes+0x12c>)
 8016022:	f00d fc1f 	bl	8023864 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	881b      	ldrh	r3, [r3, #0]
 801602a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801602e:	d906      	bls.n	801603e <plug_holes+0x66>
 8016030:	4b32      	ldr	r3, [pc, #200]	; (80160fc <plug_holes+0x124>)
 8016032:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016036:	4937      	ldr	r1, [pc, #220]	; (8016114 <plug_holes+0x13c>)
 8016038:	4832      	ldr	r0, [pc, #200]	; (8016104 <plug_holes+0x12c>)
 801603a:	f00d fc13 	bl	8023864 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	881b      	ldrh	r3, [r3, #0]
 8016042:	4618      	mov	r0, r3
 8016044:	f7ff ffa4 	bl	8015f90 <ptr_to_mem>
 8016048:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	429a      	cmp	r2, r3
 8016050:	d024      	beq.n	801609c <plug_holes+0xc4>
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	791b      	ldrb	r3, [r3, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d120      	bne.n	801609c <plug_holes+0xc4>
 801605a:	4b2b      	ldr	r3, [pc, #172]	; (8016108 <plug_holes+0x130>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	68fa      	ldr	r2, [r7, #12]
 8016060:	429a      	cmp	r2, r3
 8016062:	d01b      	beq.n	801609c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016064:	4b2c      	ldr	r3, [pc, #176]	; (8016118 <plug_holes+0x140>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	68fa      	ldr	r2, [r7, #12]
 801606a:	429a      	cmp	r2, r3
 801606c:	d102      	bne.n	8016074 <plug_holes+0x9c>
      lfree = mem;
 801606e:	4a2a      	ldr	r2, [pc, #168]	; (8016118 <plug_holes+0x140>)
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	881a      	ldrh	r2, [r3, #0]
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	881b      	ldrh	r3, [r3, #0]
 8016080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016084:	d00a      	beq.n	801609c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	881b      	ldrh	r3, [r3, #0]
 801608a:	4618      	mov	r0, r3
 801608c:	f7ff ff80 	bl	8015f90 <ptr_to_mem>
 8016090:	4604      	mov	r4, r0
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7ff ff8e 	bl	8015fb4 <mem_to_ptr>
 8016098:	4603      	mov	r3, r0
 801609a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	885b      	ldrh	r3, [r3, #2]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ff ff75 	bl	8015f90 <ptr_to_mem>
 80160a6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80160a8:	68ba      	ldr	r2, [r7, #8]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d01f      	beq.n	80160f0 <plug_holes+0x118>
 80160b0:	68bb      	ldr	r3, [r7, #8]
 80160b2:	791b      	ldrb	r3, [r3, #4]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d11b      	bne.n	80160f0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80160b8:	4b17      	ldr	r3, [pc, #92]	; (8016118 <plug_holes+0x140>)
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	429a      	cmp	r2, r3
 80160c0:	d102      	bne.n	80160c8 <plug_holes+0xf0>
      lfree = pmem;
 80160c2:	4a15      	ldr	r2, [pc, #84]	; (8016118 <plug_holes+0x140>)
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	881a      	ldrh	r2, [r3, #0]
 80160cc:	68bb      	ldr	r3, [r7, #8]
 80160ce:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	881b      	ldrh	r3, [r3, #0]
 80160d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80160d8:	d00a      	beq.n	80160f0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	881b      	ldrh	r3, [r3, #0]
 80160de:	4618      	mov	r0, r3
 80160e0:	f7ff ff56 	bl	8015f90 <ptr_to_mem>
 80160e4:	4604      	mov	r4, r0
 80160e6:	68b8      	ldr	r0, [r7, #8]
 80160e8:	f7ff ff64 	bl	8015fb4 <mem_to_ptr>
 80160ec:	4603      	mov	r3, r0
 80160ee:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80160f0:	bf00      	nop
 80160f2:	3714      	adds	r7, #20
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd90      	pop	{r4, r7, pc}
 80160f8:	20012c68 	.word	0x20012c68
 80160fc:	0802953c 	.word	0x0802953c
 8016100:	0802956c 	.word	0x0802956c
 8016104:	08029584 	.word	0x08029584
 8016108:	20012c6c 	.word	0x20012c6c
 801610c:	080295ac 	.word	0x080295ac
 8016110:	080295c8 	.word	0x080295c8
 8016114:	080295e4 	.word	0x080295e4
 8016118:	20012c74 	.word	0x20012c74

0801611c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b082      	sub	sp, #8
 8016120:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016122:	4b1f      	ldr	r3, [pc, #124]	; (80161a0 <mem_init+0x84>)
 8016124:	3303      	adds	r3, #3
 8016126:	f023 0303 	bic.w	r3, r3, #3
 801612a:	461a      	mov	r2, r3
 801612c:	4b1d      	ldr	r3, [pc, #116]	; (80161a4 <mem_init+0x88>)
 801612e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016130:	4b1c      	ldr	r3, [pc, #112]	; (80161a4 <mem_init+0x88>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801613c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	2200      	movs	r2, #0
 8016142:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2200      	movs	r2, #0
 8016148:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801614a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801614e:	f7ff ff1f 	bl	8015f90 <ptr_to_mem>
 8016152:	4603      	mov	r3, r0
 8016154:	4a14      	ldr	r2, [pc, #80]	; (80161a8 <mem_init+0x8c>)
 8016156:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016158:	4b13      	ldr	r3, [pc, #76]	; (80161a8 <mem_init+0x8c>)
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	2201      	movs	r2, #1
 801615e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8016160:	4b11      	ldr	r3, [pc, #68]	; (80161a8 <mem_init+0x8c>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016168:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801616a:	4b0f      	ldr	r3, [pc, #60]	; (80161a8 <mem_init+0x8c>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016172:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016174:	4b0b      	ldr	r3, [pc, #44]	; (80161a4 <mem_init+0x88>)
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	4a0c      	ldr	r2, [pc, #48]	; (80161ac <mem_init+0x90>)
 801617a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801617c:	480c      	ldr	r0, [pc, #48]	; (80161b0 <mem_init+0x94>)
 801617e:	f00b fa8f 	bl	80216a0 <sys_mutex_new>
 8016182:	4603      	mov	r3, r0
 8016184:	2b00      	cmp	r3, #0
 8016186:	d006      	beq.n	8016196 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016188:	4b0a      	ldr	r3, [pc, #40]	; (80161b4 <mem_init+0x98>)
 801618a:	f240 221f 	movw	r2, #543	; 0x21f
 801618e:	490a      	ldr	r1, [pc, #40]	; (80161b8 <mem_init+0x9c>)
 8016190:	480a      	ldr	r0, [pc, #40]	; (80161bc <mem_init+0xa0>)
 8016192:	f00d fb67 	bl	8023864 <iprintf>
  }
}
 8016196:	bf00      	nop
 8016198:	3708      	adds	r7, #8
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	20012454 	.word	0x20012454
 80161a4:	20012c68 	.word	0x20012c68
 80161a8:	20012c6c 	.word	0x20012c6c
 80161ac:	20012c74 	.word	0x20012c74
 80161b0:	20012c70 	.word	0x20012c70
 80161b4:	0802953c 	.word	0x0802953c
 80161b8:	08029610 	.word	0x08029610
 80161bc:	08029584 	.word	0x08029584

080161c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b086      	sub	sp, #24
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f7ff fef3 	bl	8015fb4 <mem_to_ptr>
 80161ce:	4603      	mov	r3, r0
 80161d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	881b      	ldrh	r3, [r3, #0]
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7ff feda 	bl	8015f90 <ptr_to_mem>
 80161dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	885b      	ldrh	r3, [r3, #2]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ff fed4 	bl	8015f90 <ptr_to_mem>
 80161e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	881b      	ldrh	r3, [r3, #0]
 80161ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80161f2:	d818      	bhi.n	8016226 <mem_link_valid+0x66>
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	885b      	ldrh	r3, [r3, #2]
 80161f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80161fc:	d813      	bhi.n	8016226 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016202:	8afa      	ldrh	r2, [r7, #22]
 8016204:	429a      	cmp	r2, r3
 8016206:	d004      	beq.n	8016212 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	881b      	ldrh	r3, [r3, #0]
 801620c:	8afa      	ldrh	r2, [r7, #22]
 801620e:	429a      	cmp	r2, r3
 8016210:	d109      	bne.n	8016226 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016212:	4b08      	ldr	r3, [pc, #32]	; (8016234 <mem_link_valid+0x74>)
 8016214:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016216:	693a      	ldr	r2, [r7, #16]
 8016218:	429a      	cmp	r2, r3
 801621a:	d006      	beq.n	801622a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	885b      	ldrh	r3, [r3, #2]
 8016220:	8afa      	ldrh	r2, [r7, #22]
 8016222:	429a      	cmp	r2, r3
 8016224:	d001      	beq.n	801622a <mem_link_valid+0x6a>
    return 0;
 8016226:	2300      	movs	r3, #0
 8016228:	e000      	b.n	801622c <mem_link_valid+0x6c>
  }
  return 1;
 801622a:	2301      	movs	r3, #1
}
 801622c:	4618      	mov	r0, r3
 801622e:	3718      	adds	r7, #24
 8016230:	46bd      	mov	sp, r7
 8016232:	bd80      	pop	{r7, pc}
 8016234:	20012c6c 	.word	0x20012c6c

08016238 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b088      	sub	sp, #32
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d070      	beq.n	8016328 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	f003 0303 	and.w	r3, r3, #3
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00d      	beq.n	801626c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016250:	4b37      	ldr	r3, [pc, #220]	; (8016330 <mem_free+0xf8>)
 8016252:	f240 2273 	movw	r2, #627	; 0x273
 8016256:	4937      	ldr	r1, [pc, #220]	; (8016334 <mem_free+0xfc>)
 8016258:	4837      	ldr	r0, [pc, #220]	; (8016338 <mem_free+0x100>)
 801625a:	f00d fb03 	bl	8023864 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801625e:	f00b fa7d 	bl	802175c <sys_arch_protect>
 8016262:	60f8      	str	r0, [r7, #12]
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f00b fa87 	bl	8021778 <sys_arch_unprotect>
    return;
 801626a:	e05e      	b.n	801632a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	3b08      	subs	r3, #8
 8016270:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016272:	4b32      	ldr	r3, [pc, #200]	; (801633c <mem_free+0x104>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	69fa      	ldr	r2, [r7, #28]
 8016278:	429a      	cmp	r2, r3
 801627a:	d306      	bcc.n	801628a <mem_free+0x52>
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	f103 020c 	add.w	r2, r3, #12
 8016282:	4b2f      	ldr	r3, [pc, #188]	; (8016340 <mem_free+0x108>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	429a      	cmp	r2, r3
 8016288:	d90d      	bls.n	80162a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801628a:	4b29      	ldr	r3, [pc, #164]	; (8016330 <mem_free+0xf8>)
 801628c:	f240 227f 	movw	r2, #639	; 0x27f
 8016290:	492c      	ldr	r1, [pc, #176]	; (8016344 <mem_free+0x10c>)
 8016292:	4829      	ldr	r0, [pc, #164]	; (8016338 <mem_free+0x100>)
 8016294:	f00d fae6 	bl	8023864 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016298:	f00b fa60 	bl	802175c <sys_arch_protect>
 801629c:	6138      	str	r0, [r7, #16]
 801629e:	6938      	ldr	r0, [r7, #16]
 80162a0:	f00b fa6a 	bl	8021778 <sys_arch_unprotect>
    return;
 80162a4:	e041      	b.n	801632a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80162a6:	4828      	ldr	r0, [pc, #160]	; (8016348 <mem_free+0x110>)
 80162a8:	f00b fa16 	bl	80216d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80162ac:	69fb      	ldr	r3, [r7, #28]
 80162ae:	791b      	ldrb	r3, [r3, #4]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d110      	bne.n	80162d6 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80162b4:	4b1e      	ldr	r3, [pc, #120]	; (8016330 <mem_free+0xf8>)
 80162b6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80162ba:	4924      	ldr	r1, [pc, #144]	; (801634c <mem_free+0x114>)
 80162bc:	481e      	ldr	r0, [pc, #120]	; (8016338 <mem_free+0x100>)
 80162be:	f00d fad1 	bl	8023864 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80162c2:	4821      	ldr	r0, [pc, #132]	; (8016348 <mem_free+0x110>)
 80162c4:	f00b fa17 	bl	80216f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80162c8:	f00b fa48 	bl	802175c <sys_arch_protect>
 80162cc:	6178      	str	r0, [r7, #20]
 80162ce:	6978      	ldr	r0, [r7, #20]
 80162d0:	f00b fa52 	bl	8021778 <sys_arch_unprotect>
    return;
 80162d4:	e029      	b.n	801632a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80162d6:	69f8      	ldr	r0, [r7, #28]
 80162d8:	f7ff ff72 	bl	80161c0 <mem_link_valid>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d110      	bne.n	8016304 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80162e2:	4b13      	ldr	r3, [pc, #76]	; (8016330 <mem_free+0xf8>)
 80162e4:	f240 2295 	movw	r2, #661	; 0x295
 80162e8:	4919      	ldr	r1, [pc, #100]	; (8016350 <mem_free+0x118>)
 80162ea:	4813      	ldr	r0, [pc, #76]	; (8016338 <mem_free+0x100>)
 80162ec:	f00d faba 	bl	8023864 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80162f0:	4815      	ldr	r0, [pc, #84]	; (8016348 <mem_free+0x110>)
 80162f2:	f00b fa00 	bl	80216f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80162f6:	f00b fa31 	bl	802175c <sys_arch_protect>
 80162fa:	61b8      	str	r0, [r7, #24]
 80162fc:	69b8      	ldr	r0, [r7, #24]
 80162fe:	f00b fa3b 	bl	8021778 <sys_arch_unprotect>
    return;
 8016302:	e012      	b.n	801632a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016304:	69fb      	ldr	r3, [r7, #28]
 8016306:	2200      	movs	r2, #0
 8016308:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801630a:	4b12      	ldr	r3, [pc, #72]	; (8016354 <mem_free+0x11c>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	69fa      	ldr	r2, [r7, #28]
 8016310:	429a      	cmp	r2, r3
 8016312:	d202      	bcs.n	801631a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016314:	4a0f      	ldr	r2, [pc, #60]	; (8016354 <mem_free+0x11c>)
 8016316:	69fb      	ldr	r3, [r7, #28]
 8016318:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801631a:	69f8      	ldr	r0, [r7, #28]
 801631c:	f7ff fe5c 	bl	8015fd8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016320:	4809      	ldr	r0, [pc, #36]	; (8016348 <mem_free+0x110>)
 8016322:	f00b f9e8 	bl	80216f6 <sys_mutex_unlock>
 8016326:	e000      	b.n	801632a <mem_free+0xf2>
    return;
 8016328:	bf00      	nop
}
 801632a:	3720      	adds	r7, #32
 801632c:	46bd      	mov	sp, r7
 801632e:	bd80      	pop	{r7, pc}
 8016330:	0802953c 	.word	0x0802953c
 8016334:	0802962c 	.word	0x0802962c
 8016338:	08029584 	.word	0x08029584
 801633c:	20012c68 	.word	0x20012c68
 8016340:	20012c6c 	.word	0x20012c6c
 8016344:	08029650 	.word	0x08029650
 8016348:	20012c70 	.word	0x20012c70
 801634c:	0802966c 	.word	0x0802966c
 8016350:	08029694 	.word	0x08029694
 8016354:	20012c74 	.word	0x20012c74

08016358 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b088      	sub	sp, #32
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
 8016360:	460b      	mov	r3, r1
 8016362:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016364:	887b      	ldrh	r3, [r7, #2]
 8016366:	3303      	adds	r3, #3
 8016368:	b29b      	uxth	r3, r3
 801636a:	f023 0303 	bic.w	r3, r3, #3
 801636e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8016370:	8bfb      	ldrh	r3, [r7, #30]
 8016372:	2b0b      	cmp	r3, #11
 8016374:	d801      	bhi.n	801637a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8016376:	230c      	movs	r3, #12
 8016378:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801637a:	8bfb      	ldrh	r3, [r7, #30]
 801637c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016380:	d803      	bhi.n	801638a <mem_trim+0x32>
 8016382:	8bfa      	ldrh	r2, [r7, #30]
 8016384:	887b      	ldrh	r3, [r7, #2]
 8016386:	429a      	cmp	r2, r3
 8016388:	d201      	bcs.n	801638e <mem_trim+0x36>
    return NULL;
 801638a:	2300      	movs	r3, #0
 801638c:	e0d8      	b.n	8016540 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801638e:	4b6e      	ldr	r3, [pc, #440]	; (8016548 <mem_trim+0x1f0>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	687a      	ldr	r2, [r7, #4]
 8016394:	429a      	cmp	r2, r3
 8016396:	d304      	bcc.n	80163a2 <mem_trim+0x4a>
 8016398:	4b6c      	ldr	r3, [pc, #432]	; (801654c <mem_trim+0x1f4>)
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	687a      	ldr	r2, [r7, #4]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d306      	bcc.n	80163b0 <mem_trim+0x58>
 80163a2:	4b6b      	ldr	r3, [pc, #428]	; (8016550 <mem_trim+0x1f8>)
 80163a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80163a8:	496a      	ldr	r1, [pc, #424]	; (8016554 <mem_trim+0x1fc>)
 80163aa:	486b      	ldr	r0, [pc, #428]	; (8016558 <mem_trim+0x200>)
 80163ac:	f00d fa5a 	bl	8023864 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80163b0:	4b65      	ldr	r3, [pc, #404]	; (8016548 <mem_trim+0x1f0>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	687a      	ldr	r2, [r7, #4]
 80163b6:	429a      	cmp	r2, r3
 80163b8:	d304      	bcc.n	80163c4 <mem_trim+0x6c>
 80163ba:	4b64      	ldr	r3, [pc, #400]	; (801654c <mem_trim+0x1f4>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	687a      	ldr	r2, [r7, #4]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d307      	bcc.n	80163d4 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80163c4:	f00b f9ca 	bl	802175c <sys_arch_protect>
 80163c8:	60b8      	str	r0, [r7, #8]
 80163ca:	68b8      	ldr	r0, [r7, #8]
 80163cc:	f00b f9d4 	bl	8021778 <sys_arch_unprotect>
    return rmem;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	e0b5      	b.n	8016540 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	3b08      	subs	r3, #8
 80163d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80163da:	69b8      	ldr	r0, [r7, #24]
 80163dc:	f7ff fdea 	bl	8015fb4 <mem_to_ptr>
 80163e0:	4603      	mov	r3, r0
 80163e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80163e4:	69bb      	ldr	r3, [r7, #24]
 80163e6:	881a      	ldrh	r2, [r3, #0]
 80163e8:	8afb      	ldrh	r3, [r7, #22]
 80163ea:	1ad3      	subs	r3, r2, r3
 80163ec:	b29b      	uxth	r3, r3
 80163ee:	3b08      	subs	r3, #8
 80163f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80163f2:	8bfa      	ldrh	r2, [r7, #30]
 80163f4:	8abb      	ldrh	r3, [r7, #20]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d906      	bls.n	8016408 <mem_trim+0xb0>
 80163fa:	4b55      	ldr	r3, [pc, #340]	; (8016550 <mem_trim+0x1f8>)
 80163fc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016400:	4956      	ldr	r1, [pc, #344]	; (801655c <mem_trim+0x204>)
 8016402:	4855      	ldr	r0, [pc, #340]	; (8016558 <mem_trim+0x200>)
 8016404:	f00d fa2e 	bl	8023864 <iprintf>
  if (newsize > size) {
 8016408:	8bfa      	ldrh	r2, [r7, #30]
 801640a:	8abb      	ldrh	r3, [r7, #20]
 801640c:	429a      	cmp	r2, r3
 801640e:	d901      	bls.n	8016414 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8016410:	2300      	movs	r3, #0
 8016412:	e095      	b.n	8016540 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8016414:	8bfa      	ldrh	r2, [r7, #30]
 8016416:	8abb      	ldrh	r3, [r7, #20]
 8016418:	429a      	cmp	r2, r3
 801641a:	d101      	bne.n	8016420 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	e08f      	b.n	8016540 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016420:	484f      	ldr	r0, [pc, #316]	; (8016560 <mem_trim+0x208>)
 8016422:	f00b f959 	bl	80216d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8016426:	69bb      	ldr	r3, [r7, #24]
 8016428:	881b      	ldrh	r3, [r3, #0]
 801642a:	4618      	mov	r0, r3
 801642c:	f7ff fdb0 	bl	8015f90 <ptr_to_mem>
 8016430:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	791b      	ldrb	r3, [r3, #4]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d13f      	bne.n	80164ba <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801643a:	69bb      	ldr	r3, [r7, #24]
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016442:	d106      	bne.n	8016452 <mem_trim+0xfa>
 8016444:	4b42      	ldr	r3, [pc, #264]	; (8016550 <mem_trim+0x1f8>)
 8016446:	f240 22f5 	movw	r2, #757	; 0x2f5
 801644a:	4946      	ldr	r1, [pc, #280]	; (8016564 <mem_trim+0x20c>)
 801644c:	4842      	ldr	r0, [pc, #264]	; (8016558 <mem_trim+0x200>)
 801644e:	f00d fa09 	bl	8023864 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8016452:	693b      	ldr	r3, [r7, #16]
 8016454:	881b      	ldrh	r3, [r3, #0]
 8016456:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016458:	8afa      	ldrh	r2, [r7, #22]
 801645a:	8bfb      	ldrh	r3, [r7, #30]
 801645c:	4413      	add	r3, r2
 801645e:	b29b      	uxth	r3, r3
 8016460:	3308      	adds	r3, #8
 8016462:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8016464:	4b40      	ldr	r3, [pc, #256]	; (8016568 <mem_trim+0x210>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	693a      	ldr	r2, [r7, #16]
 801646a:	429a      	cmp	r2, r3
 801646c:	d106      	bne.n	801647c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801646e:	89fb      	ldrh	r3, [r7, #14]
 8016470:	4618      	mov	r0, r3
 8016472:	f7ff fd8d 	bl	8015f90 <ptr_to_mem>
 8016476:	4603      	mov	r3, r0
 8016478:	4a3b      	ldr	r2, [pc, #236]	; (8016568 <mem_trim+0x210>)
 801647a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801647c:	89fb      	ldrh	r3, [r7, #14]
 801647e:	4618      	mov	r0, r3
 8016480:	f7ff fd86 	bl	8015f90 <ptr_to_mem>
 8016484:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8016486:	693b      	ldr	r3, [r7, #16]
 8016488:	2200      	movs	r2, #0
 801648a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801648c:	693b      	ldr	r3, [r7, #16]
 801648e:	89ba      	ldrh	r2, [r7, #12]
 8016490:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	8afa      	ldrh	r2, [r7, #22]
 8016496:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	89fa      	ldrh	r2, [r7, #14]
 801649c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	881b      	ldrh	r3, [r3, #0]
 80164a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80164a6:	d047      	beq.n	8016538 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	881b      	ldrh	r3, [r3, #0]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f7ff fd6f 	bl	8015f90 <ptr_to_mem>
 80164b2:	4602      	mov	r2, r0
 80164b4:	89fb      	ldrh	r3, [r7, #14]
 80164b6:	8053      	strh	r3, [r2, #2]
 80164b8:	e03e      	b.n	8016538 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80164ba:	8bfb      	ldrh	r3, [r7, #30]
 80164bc:	f103 0214 	add.w	r2, r3, #20
 80164c0:	8abb      	ldrh	r3, [r7, #20]
 80164c2:	429a      	cmp	r2, r3
 80164c4:	d838      	bhi.n	8016538 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80164c6:	8afa      	ldrh	r2, [r7, #22]
 80164c8:	8bfb      	ldrh	r3, [r7, #30]
 80164ca:	4413      	add	r3, r2
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	3308      	adds	r3, #8
 80164d0:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80164d2:	69bb      	ldr	r3, [r7, #24]
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80164da:	d106      	bne.n	80164ea <mem_trim+0x192>
 80164dc:	4b1c      	ldr	r3, [pc, #112]	; (8016550 <mem_trim+0x1f8>)
 80164de:	f240 3216 	movw	r2, #790	; 0x316
 80164e2:	4920      	ldr	r1, [pc, #128]	; (8016564 <mem_trim+0x20c>)
 80164e4:	481c      	ldr	r0, [pc, #112]	; (8016558 <mem_trim+0x200>)
 80164e6:	f00d f9bd 	bl	8023864 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80164ea:	89fb      	ldrh	r3, [r7, #14]
 80164ec:	4618      	mov	r0, r3
 80164ee:	f7ff fd4f 	bl	8015f90 <ptr_to_mem>
 80164f2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80164f4:	4b1c      	ldr	r3, [pc, #112]	; (8016568 <mem_trim+0x210>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	693a      	ldr	r2, [r7, #16]
 80164fa:	429a      	cmp	r2, r3
 80164fc:	d202      	bcs.n	8016504 <mem_trim+0x1ac>
      lfree = mem2;
 80164fe:	4a1a      	ldr	r2, [pc, #104]	; (8016568 <mem_trim+0x210>)
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8016504:	693b      	ldr	r3, [r7, #16]
 8016506:	2200      	movs	r2, #0
 8016508:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801650a:	69bb      	ldr	r3, [r7, #24]
 801650c:	881a      	ldrh	r2, [r3, #0]
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8016512:	693b      	ldr	r3, [r7, #16]
 8016514:	8afa      	ldrh	r2, [r7, #22]
 8016516:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8016518:	69bb      	ldr	r3, [r7, #24]
 801651a:	89fa      	ldrh	r2, [r7, #14]
 801651c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	881b      	ldrh	r3, [r3, #0]
 8016522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016526:	d007      	beq.n	8016538 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016528:	693b      	ldr	r3, [r7, #16]
 801652a:	881b      	ldrh	r3, [r3, #0]
 801652c:	4618      	mov	r0, r3
 801652e:	f7ff fd2f 	bl	8015f90 <ptr_to_mem>
 8016532:	4602      	mov	r2, r0
 8016534:	89fb      	ldrh	r3, [r7, #14]
 8016536:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016538:	4809      	ldr	r0, [pc, #36]	; (8016560 <mem_trim+0x208>)
 801653a:	f00b f8dc 	bl	80216f6 <sys_mutex_unlock>
  return rmem;
 801653e:	687b      	ldr	r3, [r7, #4]
}
 8016540:	4618      	mov	r0, r3
 8016542:	3720      	adds	r7, #32
 8016544:	46bd      	mov	sp, r7
 8016546:	bd80      	pop	{r7, pc}
 8016548:	20012c68 	.word	0x20012c68
 801654c:	20012c6c 	.word	0x20012c6c
 8016550:	0802953c 	.word	0x0802953c
 8016554:	080296c8 	.word	0x080296c8
 8016558:	08029584 	.word	0x08029584
 801655c:	080296e0 	.word	0x080296e0
 8016560:	20012c70 	.word	0x20012c70
 8016564:	08029700 	.word	0x08029700
 8016568:	20012c74 	.word	0x20012c74

0801656c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b088      	sub	sp, #32
 8016570:	af00      	add	r7, sp, #0
 8016572:	4603      	mov	r3, r0
 8016574:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016576:	88fb      	ldrh	r3, [r7, #6]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d101      	bne.n	8016580 <mem_malloc+0x14>
    return NULL;
 801657c:	2300      	movs	r3, #0
 801657e:	e0e2      	b.n	8016746 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016580:	88fb      	ldrh	r3, [r7, #6]
 8016582:	3303      	adds	r3, #3
 8016584:	b29b      	uxth	r3, r3
 8016586:	f023 0303 	bic.w	r3, r3, #3
 801658a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801658c:	8bbb      	ldrh	r3, [r7, #28]
 801658e:	2b0b      	cmp	r3, #11
 8016590:	d801      	bhi.n	8016596 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8016592:	230c      	movs	r3, #12
 8016594:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016596:	8bbb      	ldrh	r3, [r7, #28]
 8016598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801659c:	d803      	bhi.n	80165a6 <mem_malloc+0x3a>
 801659e:	8bba      	ldrh	r2, [r7, #28]
 80165a0:	88fb      	ldrh	r3, [r7, #6]
 80165a2:	429a      	cmp	r2, r3
 80165a4:	d201      	bcs.n	80165aa <mem_malloc+0x3e>
    return NULL;
 80165a6:	2300      	movs	r3, #0
 80165a8:	e0cd      	b.n	8016746 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80165aa:	4869      	ldr	r0, [pc, #420]	; (8016750 <mem_malloc+0x1e4>)
 80165ac:	f00b f894 	bl	80216d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80165b0:	4b68      	ldr	r3, [pc, #416]	; (8016754 <mem_malloc+0x1e8>)
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7ff fcfd 	bl	8015fb4 <mem_to_ptr>
 80165ba:	4603      	mov	r3, r0
 80165bc:	83fb      	strh	r3, [r7, #30]
 80165be:	e0b7      	b.n	8016730 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80165c0:	8bfb      	ldrh	r3, [r7, #30]
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7ff fce4 	bl	8015f90 <ptr_to_mem>
 80165c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	791b      	ldrb	r3, [r3, #4]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	f040 80a7 	bne.w	8016722 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	461a      	mov	r2, r3
 80165da:	8bfb      	ldrh	r3, [r7, #30]
 80165dc:	1ad3      	subs	r3, r2, r3
 80165de:	f1a3 0208 	sub.w	r2, r3, #8
 80165e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80165e4:	429a      	cmp	r2, r3
 80165e6:	f0c0 809c 	bcc.w	8016722 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	881b      	ldrh	r3, [r3, #0]
 80165ee:	461a      	mov	r2, r3
 80165f0:	8bfb      	ldrh	r3, [r7, #30]
 80165f2:	1ad3      	subs	r3, r2, r3
 80165f4:	f1a3 0208 	sub.w	r2, r3, #8
 80165f8:	8bbb      	ldrh	r3, [r7, #28]
 80165fa:	3314      	adds	r3, #20
 80165fc:	429a      	cmp	r2, r3
 80165fe:	d333      	bcc.n	8016668 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016600:	8bfa      	ldrh	r2, [r7, #30]
 8016602:	8bbb      	ldrh	r3, [r7, #28]
 8016604:	4413      	add	r3, r2
 8016606:	b29b      	uxth	r3, r3
 8016608:	3308      	adds	r3, #8
 801660a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801660c:	8a7b      	ldrh	r3, [r7, #18]
 801660e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016612:	d106      	bne.n	8016622 <mem_malloc+0xb6>
 8016614:	4b50      	ldr	r3, [pc, #320]	; (8016758 <mem_malloc+0x1ec>)
 8016616:	f240 3287 	movw	r2, #903	; 0x387
 801661a:	4950      	ldr	r1, [pc, #320]	; (801675c <mem_malloc+0x1f0>)
 801661c:	4850      	ldr	r0, [pc, #320]	; (8016760 <mem_malloc+0x1f4>)
 801661e:	f00d f921 	bl	8023864 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8016622:	8a7b      	ldrh	r3, [r7, #18]
 8016624:	4618      	mov	r0, r3
 8016626:	f7ff fcb3 	bl	8015f90 <ptr_to_mem>
 801662a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	2200      	movs	r2, #0
 8016630:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8016632:	697b      	ldr	r3, [r7, #20]
 8016634:	881a      	ldrh	r2, [r3, #0]
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	8bfa      	ldrh	r2, [r7, #30]
 801663e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8016640:	697b      	ldr	r3, [r7, #20]
 8016642:	8a7a      	ldrh	r2, [r7, #18]
 8016644:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	2201      	movs	r2, #1
 801664a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	881b      	ldrh	r3, [r3, #0]
 8016650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016654:	d00b      	beq.n	801666e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016656:	68fb      	ldr	r3, [r7, #12]
 8016658:	881b      	ldrh	r3, [r3, #0]
 801665a:	4618      	mov	r0, r3
 801665c:	f7ff fc98 	bl	8015f90 <ptr_to_mem>
 8016660:	4602      	mov	r2, r0
 8016662:	8a7b      	ldrh	r3, [r7, #18]
 8016664:	8053      	strh	r3, [r2, #2]
 8016666:	e002      	b.n	801666e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016668:	697b      	ldr	r3, [r7, #20]
 801666a:	2201      	movs	r2, #1
 801666c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801666e:	4b39      	ldr	r3, [pc, #228]	; (8016754 <mem_malloc+0x1e8>)
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	697a      	ldr	r2, [r7, #20]
 8016674:	429a      	cmp	r2, r3
 8016676:	d127      	bne.n	80166c8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8016678:	4b36      	ldr	r3, [pc, #216]	; (8016754 <mem_malloc+0x1e8>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801667e:	e005      	b.n	801668c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8016680:	69bb      	ldr	r3, [r7, #24]
 8016682:	881b      	ldrh	r3, [r3, #0]
 8016684:	4618      	mov	r0, r3
 8016686:	f7ff fc83 	bl	8015f90 <ptr_to_mem>
 801668a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801668c:	69bb      	ldr	r3, [r7, #24]
 801668e:	791b      	ldrb	r3, [r3, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	d004      	beq.n	801669e <mem_malloc+0x132>
 8016694:	4b33      	ldr	r3, [pc, #204]	; (8016764 <mem_malloc+0x1f8>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	69ba      	ldr	r2, [r7, #24]
 801669a:	429a      	cmp	r2, r3
 801669c:	d1f0      	bne.n	8016680 <mem_malloc+0x114>
          }
          lfree = cur;
 801669e:	4a2d      	ldr	r2, [pc, #180]	; (8016754 <mem_malloc+0x1e8>)
 80166a0:	69bb      	ldr	r3, [r7, #24]
 80166a2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80166a4:	4b2b      	ldr	r3, [pc, #172]	; (8016754 <mem_malloc+0x1e8>)
 80166a6:	681a      	ldr	r2, [r3, #0]
 80166a8:	4b2e      	ldr	r3, [pc, #184]	; (8016764 <mem_malloc+0x1f8>)
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d00b      	beq.n	80166c8 <mem_malloc+0x15c>
 80166b0:	4b28      	ldr	r3, [pc, #160]	; (8016754 <mem_malloc+0x1e8>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	791b      	ldrb	r3, [r3, #4]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d006      	beq.n	80166c8 <mem_malloc+0x15c>
 80166ba:	4b27      	ldr	r3, [pc, #156]	; (8016758 <mem_malloc+0x1ec>)
 80166bc:	f240 32b5 	movw	r2, #949	; 0x3b5
 80166c0:	4929      	ldr	r1, [pc, #164]	; (8016768 <mem_malloc+0x1fc>)
 80166c2:	4827      	ldr	r0, [pc, #156]	; (8016760 <mem_malloc+0x1f4>)
 80166c4:	f00d f8ce 	bl	8023864 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80166c8:	4821      	ldr	r0, [pc, #132]	; (8016750 <mem_malloc+0x1e4>)
 80166ca:	f00b f814 	bl	80216f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80166ce:	8bba      	ldrh	r2, [r7, #28]
 80166d0:	697b      	ldr	r3, [r7, #20]
 80166d2:	4413      	add	r3, r2
 80166d4:	3308      	adds	r3, #8
 80166d6:	4a23      	ldr	r2, [pc, #140]	; (8016764 <mem_malloc+0x1f8>)
 80166d8:	6812      	ldr	r2, [r2, #0]
 80166da:	4293      	cmp	r3, r2
 80166dc:	d906      	bls.n	80166ec <mem_malloc+0x180>
 80166de:	4b1e      	ldr	r3, [pc, #120]	; (8016758 <mem_malloc+0x1ec>)
 80166e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 80166e4:	4921      	ldr	r1, [pc, #132]	; (801676c <mem_malloc+0x200>)
 80166e6:	481e      	ldr	r0, [pc, #120]	; (8016760 <mem_malloc+0x1f4>)
 80166e8:	f00d f8bc 	bl	8023864 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	f003 0303 	and.w	r3, r3, #3
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d006      	beq.n	8016704 <mem_malloc+0x198>
 80166f6:	4b18      	ldr	r3, [pc, #96]	; (8016758 <mem_malloc+0x1ec>)
 80166f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80166fc:	491c      	ldr	r1, [pc, #112]	; (8016770 <mem_malloc+0x204>)
 80166fe:	4818      	ldr	r0, [pc, #96]	; (8016760 <mem_malloc+0x1f4>)
 8016700:	f00d f8b0 	bl	8023864 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	f003 0303 	and.w	r3, r3, #3
 801670a:	2b00      	cmp	r3, #0
 801670c:	d006      	beq.n	801671c <mem_malloc+0x1b0>
 801670e:	4b12      	ldr	r3, [pc, #72]	; (8016758 <mem_malloc+0x1ec>)
 8016710:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016714:	4917      	ldr	r1, [pc, #92]	; (8016774 <mem_malloc+0x208>)
 8016716:	4812      	ldr	r0, [pc, #72]	; (8016760 <mem_malloc+0x1f4>)
 8016718:	f00d f8a4 	bl	8023864 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801671c:	697b      	ldr	r3, [r7, #20]
 801671e:	3308      	adds	r3, #8
 8016720:	e011      	b.n	8016746 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8016722:	8bfb      	ldrh	r3, [r7, #30]
 8016724:	4618      	mov	r0, r3
 8016726:	f7ff fc33 	bl	8015f90 <ptr_to_mem>
 801672a:	4603      	mov	r3, r0
 801672c:	881b      	ldrh	r3, [r3, #0]
 801672e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016730:	8bfa      	ldrh	r2, [r7, #30]
 8016732:	8bbb      	ldrh	r3, [r7, #28]
 8016734:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8016738:	429a      	cmp	r2, r3
 801673a:	f4ff af41 	bcc.w	80165c0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801673e:	4804      	ldr	r0, [pc, #16]	; (8016750 <mem_malloc+0x1e4>)
 8016740:	f00a ffd9 	bl	80216f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016744:	2300      	movs	r3, #0
}
 8016746:	4618      	mov	r0, r3
 8016748:	3720      	adds	r7, #32
 801674a:	46bd      	mov	sp, r7
 801674c:	bd80      	pop	{r7, pc}
 801674e:	bf00      	nop
 8016750:	20012c70 	.word	0x20012c70
 8016754:	20012c74 	.word	0x20012c74
 8016758:	0802953c 	.word	0x0802953c
 801675c:	08029700 	.word	0x08029700
 8016760:	08029584 	.word	0x08029584
 8016764:	20012c6c 	.word	0x20012c6c
 8016768:	08029714 	.word	0x08029714
 801676c:	08029730 	.word	0x08029730
 8016770:	08029760 	.word	0x08029760
 8016774:	08029790 	.word	0x08029790

08016778 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016778:	b480      	push	{r7}
 801677a:	b085      	sub	sp, #20
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	2200      	movs	r2, #0
 8016786:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	3303      	adds	r3, #3
 801678e:	f023 0303 	bic.w	r3, r3, #3
 8016792:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016794:	2300      	movs	r3, #0
 8016796:	60fb      	str	r3, [r7, #12]
 8016798:	e011      	b.n	80167be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	689b      	ldr	r3, [r3, #8]
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	68bb      	ldr	r3, [r7, #8]
 80167a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	689b      	ldr	r3, [r3, #8]
 80167a8:	68ba      	ldr	r2, [r7, #8]
 80167aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	881b      	ldrh	r3, [r3, #0]
 80167b0:	461a      	mov	r2, r3
 80167b2:	68bb      	ldr	r3, [r7, #8]
 80167b4:	4413      	add	r3, r2
 80167b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	3301      	adds	r3, #1
 80167bc:	60fb      	str	r3, [r7, #12]
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	885b      	ldrh	r3, [r3, #2]
 80167c2:	461a      	mov	r2, r3
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	4293      	cmp	r3, r2
 80167c8:	dbe7      	blt.n	801679a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80167ca:	bf00      	nop
 80167cc:	bf00      	nop
 80167ce:	3714      	adds	r7, #20
 80167d0:	46bd      	mov	sp, r7
 80167d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d6:	4770      	bx	lr

080167d8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80167de:	2300      	movs	r3, #0
 80167e0:	80fb      	strh	r3, [r7, #6]
 80167e2:	e009      	b.n	80167f8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80167e4:	88fb      	ldrh	r3, [r7, #6]
 80167e6:	4a08      	ldr	r2, [pc, #32]	; (8016808 <memp_init+0x30>)
 80167e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7ff ffc3 	bl	8016778 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80167f2:	88fb      	ldrh	r3, [r7, #6]
 80167f4:	3301      	adds	r3, #1
 80167f6:	80fb      	strh	r3, [r7, #6]
 80167f8:	88fb      	ldrh	r3, [r7, #6]
 80167fa:	2b0d      	cmp	r3, #13
 80167fc:	d9f2      	bls.n	80167e4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80167fe:	bf00      	nop
 8016800:	bf00      	nop
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}
 8016808:	0802c164 	.word	0x0802c164

0801680c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801680c:	b580      	push	{r7, lr}
 801680e:	b084      	sub	sp, #16
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016814:	f00a ffa2 	bl	802175c <sys_arch_protect>
 8016818:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	689b      	ldr	r3, [r3, #8]
 801681e:	681b      	ldr	r3, [r3, #0]
 8016820:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016822:	68bb      	ldr	r3, [r7, #8]
 8016824:	2b00      	cmp	r3, #0
 8016826:	d015      	beq.n	8016854 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	689b      	ldr	r3, [r3, #8]
 801682c:	68ba      	ldr	r2, [r7, #8]
 801682e:	6812      	ldr	r2, [r2, #0]
 8016830:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	f003 0303 	and.w	r3, r3, #3
 8016838:	2b00      	cmp	r3, #0
 801683a:	d006      	beq.n	801684a <do_memp_malloc_pool+0x3e>
 801683c:	4b09      	ldr	r3, [pc, #36]	; (8016864 <do_memp_malloc_pool+0x58>)
 801683e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8016842:	4909      	ldr	r1, [pc, #36]	; (8016868 <do_memp_malloc_pool+0x5c>)
 8016844:	4809      	ldr	r0, [pc, #36]	; (801686c <do_memp_malloc_pool+0x60>)
 8016846:	f00d f80d 	bl	8023864 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801684a:	68f8      	ldr	r0, [r7, #12]
 801684c:	f00a ff94 	bl	8021778 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	e003      	b.n	801685c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016854:	68f8      	ldr	r0, [r7, #12]
 8016856:	f00a ff8f 	bl	8021778 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801685a:	2300      	movs	r3, #0
}
 801685c:	4618      	mov	r0, r3
 801685e:	3710      	adds	r7, #16
 8016860:	46bd      	mov	sp, r7
 8016862:	bd80      	pop	{r7, pc}
 8016864:	080297b4 	.word	0x080297b4
 8016868:	080297e4 	.word	0x080297e4
 801686c:	08029808 	.word	0x08029808

08016870 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d106      	bne.n	801688c <memp_malloc_pool+0x1c>
 801687e:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <memp_malloc_pool+0x38>)
 8016880:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8016884:	4909      	ldr	r1, [pc, #36]	; (80168ac <memp_malloc_pool+0x3c>)
 8016886:	480a      	ldr	r0, [pc, #40]	; (80168b0 <memp_malloc_pool+0x40>)
 8016888:	f00c ffec 	bl	8023864 <iprintf>
  if (desc == NULL) {
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	2b00      	cmp	r3, #0
 8016890:	d101      	bne.n	8016896 <memp_malloc_pool+0x26>
    return NULL;
 8016892:	2300      	movs	r3, #0
 8016894:	e003      	b.n	801689e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7ff ffb8 	bl	801680c <do_memp_malloc_pool>
 801689c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3708      	adds	r7, #8
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	080297b4 	.word	0x080297b4
 80168ac:	08029830 	.word	0x08029830
 80168b0:	08029808 	.word	0x08029808

080168b4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	4603      	mov	r3, r0
 80168bc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80168be:	79fb      	ldrb	r3, [r7, #7]
 80168c0:	2b0d      	cmp	r3, #13
 80168c2:	d908      	bls.n	80168d6 <memp_malloc+0x22>
 80168c4:	4b0a      	ldr	r3, [pc, #40]	; (80168f0 <memp_malloc+0x3c>)
 80168c6:	f240 1257 	movw	r2, #343	; 0x157
 80168ca:	490a      	ldr	r1, [pc, #40]	; (80168f4 <memp_malloc+0x40>)
 80168cc:	480a      	ldr	r0, [pc, #40]	; (80168f8 <memp_malloc+0x44>)
 80168ce:	f00c ffc9 	bl	8023864 <iprintf>
 80168d2:	2300      	movs	r3, #0
 80168d4:	e008      	b.n	80168e8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80168d6:	79fb      	ldrb	r3, [r7, #7]
 80168d8:	4a08      	ldr	r2, [pc, #32]	; (80168fc <memp_malloc+0x48>)
 80168da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ff ff94 	bl	801680c <do_memp_malloc_pool>
 80168e4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80168e6:	68fb      	ldr	r3, [r7, #12]
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3710      	adds	r7, #16
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	080297b4 	.word	0x080297b4
 80168f4:	08029844 	.word	0x08029844
 80168f8:	08029808 	.word	0x08029808
 80168fc:	0802c164 	.word	0x0802c164

08016900 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801690a:	683b      	ldr	r3, [r7, #0]
 801690c:	f003 0303 	and.w	r3, r3, #3
 8016910:	2b00      	cmp	r3, #0
 8016912:	d006      	beq.n	8016922 <do_memp_free_pool+0x22>
 8016914:	4b0d      	ldr	r3, [pc, #52]	; (801694c <do_memp_free_pool+0x4c>)
 8016916:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801691a:	490d      	ldr	r1, [pc, #52]	; (8016950 <do_memp_free_pool+0x50>)
 801691c:	480d      	ldr	r0, [pc, #52]	; (8016954 <do_memp_free_pool+0x54>)
 801691e:	f00c ffa1 	bl	8023864 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8016926:	f00a ff19 	bl	802175c <sys_arch_protect>
 801692a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	689b      	ldr	r3, [r3, #8]
 801693a:	68fa      	ldr	r2, [r7, #12]
 801693c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801693e:	68b8      	ldr	r0, [r7, #8]
 8016940:	f00a ff1a 	bl	8021778 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8016944:	bf00      	nop
 8016946:	3710      	adds	r7, #16
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}
 801694c:	080297b4 	.word	0x080297b4
 8016950:	08029864 	.word	0x08029864
 8016954:	08029808 	.word	0x08029808

08016958 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d106      	bne.n	8016976 <memp_free_pool+0x1e>
 8016968:	4b0a      	ldr	r3, [pc, #40]	; (8016994 <memp_free_pool+0x3c>)
 801696a:	f240 1295 	movw	r2, #405	; 0x195
 801696e:	490a      	ldr	r1, [pc, #40]	; (8016998 <memp_free_pool+0x40>)
 8016970:	480a      	ldr	r0, [pc, #40]	; (801699c <memp_free_pool+0x44>)
 8016972:	f00c ff77 	bl	8023864 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d007      	beq.n	801698c <memp_free_pool+0x34>
 801697c:	683b      	ldr	r3, [r7, #0]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d004      	beq.n	801698c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f7ff ffbb 	bl	8016900 <do_memp_free_pool>
 801698a:	e000      	b.n	801698e <memp_free_pool+0x36>
    return;
 801698c:	bf00      	nop
}
 801698e:	3708      	adds	r7, #8
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}
 8016994:	080297b4 	.word	0x080297b4
 8016998:	08029830 	.word	0x08029830
 801699c:	08029808 	.word	0x08029808

080169a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	4603      	mov	r3, r0
 80169a8:	6039      	str	r1, [r7, #0]
 80169aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80169ac:	79fb      	ldrb	r3, [r7, #7]
 80169ae:	2b0d      	cmp	r3, #13
 80169b0:	d907      	bls.n	80169c2 <memp_free+0x22>
 80169b2:	4b0c      	ldr	r3, [pc, #48]	; (80169e4 <memp_free+0x44>)
 80169b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80169b8:	490b      	ldr	r1, [pc, #44]	; (80169e8 <memp_free+0x48>)
 80169ba:	480c      	ldr	r0, [pc, #48]	; (80169ec <memp_free+0x4c>)
 80169bc:	f00c ff52 	bl	8023864 <iprintf>
 80169c0:	e00c      	b.n	80169dc <memp_free+0x3c>

  if (mem == NULL) {
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d008      	beq.n	80169da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80169c8:	79fb      	ldrb	r3, [r7, #7]
 80169ca:	4a09      	ldr	r2, [pc, #36]	; (80169f0 <memp_free+0x50>)
 80169cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80169d0:	6839      	ldr	r1, [r7, #0]
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7ff ff94 	bl	8016900 <do_memp_free_pool>
 80169d8:	e000      	b.n	80169dc <memp_free+0x3c>
    return;
 80169da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80169dc:	3708      	adds	r7, #8
 80169de:	46bd      	mov	sp, r7
 80169e0:	bd80      	pop	{r7, pc}
 80169e2:	bf00      	nop
 80169e4:	080297b4 	.word	0x080297b4
 80169e8:	08029884 	.word	0x08029884
 80169ec:	08029808 	.word	0x08029808
 80169f0:	0802c164 	.word	0x0802c164

080169f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80169f4:	b480      	push	{r7}
 80169f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80169f8:	bf00      	nop
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr
	...

08016a04 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b086      	sub	sp, #24
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	60f8      	str	r0, [r7, #12]
 8016a0c:	60b9      	str	r1, [r7, #8]
 8016a0e:	607a      	str	r2, [r7, #4]
 8016a10:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d108      	bne.n	8016a2a <netif_add+0x26>
 8016a18:	4b57      	ldr	r3, [pc, #348]	; (8016b78 <netif_add+0x174>)
 8016a1a:	f240 1227 	movw	r2, #295	; 0x127
 8016a1e:	4957      	ldr	r1, [pc, #348]	; (8016b7c <netif_add+0x178>)
 8016a20:	4857      	ldr	r0, [pc, #348]	; (8016b80 <netif_add+0x17c>)
 8016a22:	f00c ff1f 	bl	8023864 <iprintf>
 8016a26:	2300      	movs	r3, #0
 8016a28:	e0a2      	b.n	8016b70 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d108      	bne.n	8016a42 <netif_add+0x3e>
 8016a30:	4b51      	ldr	r3, [pc, #324]	; (8016b78 <netif_add+0x174>)
 8016a32:	f44f 7294 	mov.w	r2, #296	; 0x128
 8016a36:	4953      	ldr	r1, [pc, #332]	; (8016b84 <netif_add+0x180>)
 8016a38:	4851      	ldr	r0, [pc, #324]	; (8016b80 <netif_add+0x17c>)
 8016a3a:	f00c ff13 	bl	8023864 <iprintf>
 8016a3e:	2300      	movs	r3, #0
 8016a40:	e096      	b.n	8016b70 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d101      	bne.n	8016a4c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8016a48:	4b4f      	ldr	r3, [pc, #316]	; (8016b88 <netif_add+0x184>)
 8016a4a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d101      	bne.n	8016a56 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8016a52:	4b4d      	ldr	r3, [pc, #308]	; (8016b88 <netif_add+0x184>)
 8016a54:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016a56:	683b      	ldr	r3, [r7, #0]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d101      	bne.n	8016a60 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8016a5c:	4b4a      	ldr	r3, [pc, #296]	; (8016b88 <netif_add+0x184>)
 8016a5e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	2200      	movs	r2, #0
 8016a64:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8016a6c:	68fb      	ldr	r3, [r7, #12]
 8016a6e:	2200      	movs	r2, #0
 8016a70:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	4a45      	ldr	r2, [pc, #276]	; (8016b8c <netif_add+0x188>)
 8016a76:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	2200      	movs	r2, #0
 8016a82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	2200      	movs	r2, #0
 8016a8a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	6a3a      	ldr	r2, [r7, #32]
 8016a90:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8016a92:	4b3f      	ldr	r3, [pc, #252]	; (8016b90 <netif_add+0x18c>)
 8016a94:	781a      	ldrb	r2, [r3, #0]
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016aa0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	68b9      	ldr	r1, [r7, #8]
 8016aa8:	68f8      	ldr	r0, [r7, #12]
 8016aaa:	f000 f913 	bl	8016cd4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	4798      	blx	r3
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d001      	beq.n	8016abe <netif_add+0xba>
    return NULL;
 8016aba:	2300      	movs	r3, #0
 8016abc:	e058      	b.n	8016b70 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ac4:	2bff      	cmp	r3, #255	; 0xff
 8016ac6:	d103      	bne.n	8016ad0 <netif_add+0xcc>
        netif->num = 0;
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	2200      	movs	r2, #0
 8016acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016ad4:	4b2f      	ldr	r3, [pc, #188]	; (8016b94 <netif_add+0x190>)
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	617b      	str	r3, [r7, #20]
 8016ada:	e02b      	b.n	8016b34 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016adc:	697a      	ldr	r2, [r7, #20]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d106      	bne.n	8016af2 <netif_add+0xee>
 8016ae4:	4b24      	ldr	r3, [pc, #144]	; (8016b78 <netif_add+0x174>)
 8016ae6:	f240 128b 	movw	r2, #395	; 0x18b
 8016aea:	492b      	ldr	r1, [pc, #172]	; (8016b98 <netif_add+0x194>)
 8016aec:	4824      	ldr	r0, [pc, #144]	; (8016b80 <netif_add+0x17c>)
 8016aee:	f00c feb9 	bl	8023864 <iprintf>
        num_netifs++;
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	3301      	adds	r3, #1
 8016af6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016af8:	693b      	ldr	r3, [r7, #16]
 8016afa:	2bff      	cmp	r3, #255	; 0xff
 8016afc:	dd06      	ble.n	8016b0c <netif_add+0x108>
 8016afe:	4b1e      	ldr	r3, [pc, #120]	; (8016b78 <netif_add+0x174>)
 8016b00:	f240 128d 	movw	r2, #397	; 0x18d
 8016b04:	4925      	ldr	r1, [pc, #148]	; (8016b9c <netif_add+0x198>)
 8016b06:	481e      	ldr	r0, [pc, #120]	; (8016b80 <netif_add+0x17c>)
 8016b08:	f00c feac 	bl	8023864 <iprintf>
        if (netif2->num == netif->num) {
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	d108      	bne.n	8016b2e <netif_add+0x12a>
          netif->num++;
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b22:	3301      	adds	r3, #1
 8016b24:	b2da      	uxtb	r2, r3
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016b2c:	e005      	b.n	8016b3a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	617b      	str	r3, [r7, #20]
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d1d0      	bne.n	8016adc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8016b3a:	697b      	ldr	r3, [r7, #20]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d1be      	bne.n	8016abe <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b46:	2bfe      	cmp	r3, #254	; 0xfe
 8016b48:	d103      	bne.n	8016b52 <netif_add+0x14e>
    netif_num = 0;
 8016b4a:	4b11      	ldr	r3, [pc, #68]	; (8016b90 <netif_add+0x18c>)
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	701a      	strb	r2, [r3, #0]
 8016b50:	e006      	b.n	8016b60 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016b58:	3301      	adds	r3, #1
 8016b5a:	b2da      	uxtb	r2, r3
 8016b5c:	4b0c      	ldr	r3, [pc, #48]	; (8016b90 <netif_add+0x18c>)
 8016b5e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016b60:	4b0c      	ldr	r3, [pc, #48]	; (8016b94 <netif_add+0x190>)
 8016b62:	681a      	ldr	r2, [r3, #0]
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016b68:	4a0a      	ldr	r2, [pc, #40]	; (8016b94 <netif_add+0x190>)
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3718      	adds	r7, #24
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}
 8016b78:	080298a0 	.word	0x080298a0
 8016b7c:	08029934 	.word	0x08029934
 8016b80:	080298f0 	.word	0x080298f0
 8016b84:	08029950 	.word	0x08029950
 8016b88:	0802c1e4 	.word	0x0802c1e4
 8016b8c:	08016faf 	.word	0x08016faf
 8016b90:	20015fb4 	.word	0x20015fb4
 8016b94:	20015fac 	.word	0x20015fac
 8016b98:	08029974 	.word	0x08029974
 8016b9c:	08029988 	.word	0x08029988

08016ba0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016ba0:	b580      	push	{r7, lr}
 8016ba2:	b082      	sub	sp, #8
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]
 8016ba8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016baa:	6839      	ldr	r1, [r7, #0]
 8016bac:	6878      	ldr	r0, [r7, #4]
 8016bae:	f002 fff9 	bl	8019ba4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016bb2:	6839      	ldr	r1, [r7, #0]
 8016bb4:	6878      	ldr	r0, [r7, #4]
 8016bb6:	f008 f887 	bl	801ecc8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016bba:	bf00      	nop
 8016bbc:	3708      	adds	r7, #8
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}
	...

08016bc4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b086      	sub	sp, #24
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d106      	bne.n	8016be4 <netif_do_set_ipaddr+0x20>
 8016bd6:	4b1d      	ldr	r3, [pc, #116]	; (8016c4c <netif_do_set_ipaddr+0x88>)
 8016bd8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016bdc:	491c      	ldr	r1, [pc, #112]	; (8016c50 <netif_do_set_ipaddr+0x8c>)
 8016bde:	481d      	ldr	r0, [pc, #116]	; (8016c54 <netif_do_set_ipaddr+0x90>)
 8016be0:	f00c fe40 	bl	8023864 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d106      	bne.n	8016bf8 <netif_do_set_ipaddr+0x34>
 8016bea:	4b18      	ldr	r3, [pc, #96]	; (8016c4c <netif_do_set_ipaddr+0x88>)
 8016bec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016bf0:	4917      	ldr	r1, [pc, #92]	; (8016c50 <netif_do_set_ipaddr+0x8c>)
 8016bf2:	4818      	ldr	r0, [pc, #96]	; (8016c54 <netif_do_set_ipaddr+0x90>)
 8016bf4:	f00c fe36 	bl	8023864 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8016bf8:	68bb      	ldr	r3, [r7, #8]
 8016bfa:	681a      	ldr	r2, [r3, #0]
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	3304      	adds	r3, #4
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d01c      	beq.n	8016c40 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	3304      	adds	r3, #4
 8016c10:	681a      	ldr	r2, [r3, #0]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8016c16:	f107 0314 	add.w	r3, r7, #20
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	6878      	ldr	r0, [r7, #4]
 8016c1e:	f7ff ffbf 	bl	8016ba0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d002      	beq.n	8016c2e <netif_do_set_ipaddr+0x6a>
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	e000      	b.n	8016c30 <netif_do_set_ipaddr+0x6c>
 8016c2e:	2300      	movs	r3, #0
 8016c30:	68fa      	ldr	r2, [r7, #12]
 8016c32:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016c34:	2101      	movs	r1, #1
 8016c36:	68f8      	ldr	r0, [r7, #12]
 8016c38:	f000 f8d2 	bl	8016de0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016c3c:	2301      	movs	r3, #1
 8016c3e:	e000      	b.n	8016c42 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016c40:	2300      	movs	r3, #0
}
 8016c42:	4618      	mov	r0, r3
 8016c44:	3718      	adds	r7, #24
 8016c46:	46bd      	mov	sp, r7
 8016c48:	bd80      	pop	{r7, pc}
 8016c4a:	bf00      	nop
 8016c4c:	080298a0 	.word	0x080298a0
 8016c50:	080299b8 	.word	0x080299b8
 8016c54:	080298f0 	.word	0x080298f0

08016c58 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016c58:	b480      	push	{r7}
 8016c5a:	b085      	sub	sp, #20
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	60f8      	str	r0, [r7, #12]
 8016c60:	60b9      	str	r1, [r7, #8]
 8016c62:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016c64:	68bb      	ldr	r3, [r7, #8]
 8016c66:	681a      	ldr	r2, [r3, #0]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	3308      	adds	r3, #8
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	429a      	cmp	r2, r3
 8016c70:	d00a      	beq.n	8016c88 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016c72:	68bb      	ldr	r3, [r7, #8]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d002      	beq.n	8016c7e <netif_do_set_netmask+0x26>
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	e000      	b.n	8016c80 <netif_do_set_netmask+0x28>
 8016c7e:	2300      	movs	r3, #0
 8016c80:	68fa      	ldr	r2, [r7, #12]
 8016c82:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016c84:	2301      	movs	r3, #1
 8016c86:	e000      	b.n	8016c8a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016c88:	2300      	movs	r3, #0
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	3714      	adds	r7, #20
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c94:	4770      	bx	lr

08016c96 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8016c96:	b480      	push	{r7}
 8016c98:	b085      	sub	sp, #20
 8016c9a:	af00      	add	r7, sp, #0
 8016c9c:	60f8      	str	r0, [r7, #12]
 8016c9e:	60b9      	str	r1, [r7, #8]
 8016ca0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	681a      	ldr	r2, [r3, #0]
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	330c      	adds	r3, #12
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d00a      	beq.n	8016cc6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d002      	beq.n	8016cbc <netif_do_set_gw+0x26>
 8016cb6:	68bb      	ldr	r3, [r7, #8]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	e000      	b.n	8016cbe <netif_do_set_gw+0x28>
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	68fa      	ldr	r2, [r7, #12]
 8016cc0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	e000      	b.n	8016cc8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8016cc6:	2300      	movs	r3, #0
}
 8016cc8:	4618      	mov	r0, r3
 8016cca:	3714      	adds	r7, #20
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr

08016cd4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	b088      	sub	sp, #32
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	60f8      	str	r0, [r7, #12]
 8016cdc:	60b9      	str	r1, [r7, #8]
 8016cde:	607a      	str	r2, [r7, #4]
 8016ce0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d101      	bne.n	8016cf4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016cf0:	4b1c      	ldr	r3, [pc, #112]	; (8016d64 <netif_set_addr+0x90>)
 8016cf2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d101      	bne.n	8016cfe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8016cfa:	4b1a      	ldr	r3, [pc, #104]	; (8016d64 <netif_set_addr+0x90>)
 8016cfc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016cfe:	683b      	ldr	r3, [r7, #0]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d101      	bne.n	8016d08 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8016d04:	4b17      	ldr	r3, [pc, #92]	; (8016d64 <netif_set_addr+0x90>)
 8016d06:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d003      	beq.n	8016d16 <netif_set_addr+0x42>
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d101      	bne.n	8016d1a <netif_set_addr+0x46>
 8016d16:	2301      	movs	r3, #1
 8016d18:	e000      	b.n	8016d1c <netif_set_addr+0x48>
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d006      	beq.n	8016d32 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016d24:	f107 0310 	add.w	r3, r7, #16
 8016d28:	461a      	mov	r2, r3
 8016d2a:	68b9      	ldr	r1, [r7, #8]
 8016d2c:	68f8      	ldr	r0, [r7, #12]
 8016d2e:	f7ff ff49 	bl	8016bc4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016d32:	69fa      	ldr	r2, [r7, #28]
 8016d34:	6879      	ldr	r1, [r7, #4]
 8016d36:	68f8      	ldr	r0, [r7, #12]
 8016d38:	f7ff ff8e 	bl	8016c58 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016d3c:	69ba      	ldr	r2, [r7, #24]
 8016d3e:	6839      	ldr	r1, [r7, #0]
 8016d40:	68f8      	ldr	r0, [r7, #12]
 8016d42:	f7ff ffa8 	bl	8016c96 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8016d46:	697b      	ldr	r3, [r7, #20]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d106      	bne.n	8016d5a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016d4c:	f107 0310 	add.w	r3, r7, #16
 8016d50:	461a      	mov	r2, r3
 8016d52:	68b9      	ldr	r1, [r7, #8]
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	f7ff ff35 	bl	8016bc4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8016d5a:	bf00      	nop
 8016d5c:	3720      	adds	r7, #32
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	0802c1e4 	.word	0x0802c1e4

08016d68 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016d70:	4a04      	ldr	r2, [pc, #16]	; (8016d84 <netif_set_default+0x1c>)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8016d76:	bf00      	nop
 8016d78:	370c      	adds	r7, #12
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d80:	4770      	bx	lr
 8016d82:	bf00      	nop
 8016d84:	20015fb0 	.word	0x20015fb0

08016d88 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b082      	sub	sp, #8
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d107      	bne.n	8016da6 <netif_set_up+0x1e>
 8016d96:	4b0f      	ldr	r3, [pc, #60]	; (8016dd4 <netif_set_up+0x4c>)
 8016d98:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016d9c:	490e      	ldr	r1, [pc, #56]	; (8016dd8 <netif_set_up+0x50>)
 8016d9e:	480f      	ldr	r0, [pc, #60]	; (8016ddc <netif_set_up+0x54>)
 8016da0:	f00c fd60 	bl	8023864 <iprintf>
 8016da4:	e013      	b.n	8016dce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016dac:	f003 0301 	and.w	r3, r3, #1
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d10c      	bne.n	8016dce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016dba:	f043 0301 	orr.w	r3, r3, #1
 8016dbe:	b2da      	uxtb	r2, r3
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016dc6:	2103      	movs	r1, #3
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f000 f809 	bl	8016de0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016dce:	3708      	adds	r7, #8
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	080298a0 	.word	0x080298a0
 8016dd8:	08029a28 	.word	0x08029a28
 8016ddc:	080298f0 	.word	0x080298f0

08016de0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	460b      	mov	r3, r1
 8016dea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d106      	bne.n	8016e00 <netif_issue_reports+0x20>
 8016df2:	4b18      	ldr	r3, [pc, #96]	; (8016e54 <netif_issue_reports+0x74>)
 8016df4:	f240 326d 	movw	r2, #877	; 0x36d
 8016df8:	4917      	ldr	r1, [pc, #92]	; (8016e58 <netif_issue_reports+0x78>)
 8016dfa:	4818      	ldr	r0, [pc, #96]	; (8016e5c <netif_issue_reports+0x7c>)
 8016dfc:	f00c fd32 	bl	8023864 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e06:	f003 0304 	and.w	r3, r3, #4
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d01e      	beq.n	8016e4c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e14:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d017      	beq.n	8016e4c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016e1c:	78fb      	ldrb	r3, [r7, #3]
 8016e1e:	f003 0301 	and.w	r3, r3, #1
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d013      	beq.n	8016e4e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	3304      	adds	r3, #4
 8016e2a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d00e      	beq.n	8016e4e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e36:	f003 0308 	and.w	r3, r3, #8
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d007      	beq.n	8016e4e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	3304      	adds	r3, #4
 8016e42:	4619      	mov	r1, r3
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f008 fea9 	bl	801fb9c <etharp_request>
 8016e4a:	e000      	b.n	8016e4e <netif_issue_reports+0x6e>
    return;
 8016e4c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016e4e:	3708      	adds	r7, #8
 8016e50:	46bd      	mov	sp, r7
 8016e52:	bd80      	pop	{r7, pc}
 8016e54:	080298a0 	.word	0x080298a0
 8016e58:	08029a44 	.word	0x08029a44
 8016e5c:	080298f0 	.word	0x080298f0

08016e60 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	b082      	sub	sp, #8
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d107      	bne.n	8016e7e <netif_set_down+0x1e>
 8016e6e:	4b12      	ldr	r3, [pc, #72]	; (8016eb8 <netif_set_down+0x58>)
 8016e70:	f240 329b 	movw	r2, #923	; 0x39b
 8016e74:	4911      	ldr	r1, [pc, #68]	; (8016ebc <netif_set_down+0x5c>)
 8016e76:	4812      	ldr	r0, [pc, #72]	; (8016ec0 <netif_set_down+0x60>)
 8016e78:	f00c fcf4 	bl	8023864 <iprintf>
 8016e7c:	e019      	b.n	8016eb2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e84:	f003 0301 	and.w	r3, r3, #1
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d012      	beq.n	8016eb2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e92:	f023 0301 	bic.w	r3, r3, #1
 8016e96:	b2da      	uxtb	r2, r3
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ea4:	f003 0308 	and.w	r3, r3, #8
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d002      	beq.n	8016eb2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f008 fa33 	bl	801f318 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016eb2:	3708      	adds	r7, #8
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	080298a0 	.word	0x080298a0
 8016ebc:	08029a68 	.word	0x08029a68
 8016ec0:	080298f0 	.word	0x080298f0

08016ec4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016ec4:	b580      	push	{r7, lr}
 8016ec6:	b082      	sub	sp, #8
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d107      	bne.n	8016ee2 <netif_set_link_up+0x1e>
 8016ed2:	4b13      	ldr	r3, [pc, #76]	; (8016f20 <netif_set_link_up+0x5c>)
 8016ed4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016ed8:	4912      	ldr	r1, [pc, #72]	; (8016f24 <netif_set_link_up+0x60>)
 8016eda:	4813      	ldr	r0, [pc, #76]	; (8016f28 <netif_set_link_up+0x64>)
 8016edc:	f00c fcc2 	bl	8023864 <iprintf>
 8016ee0:	e01b      	b.n	8016f1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ee8:	f003 0304 	and.w	r3, r3, #4
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d114      	bne.n	8016f1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ef6:	f043 0304 	orr.w	r3, r3, #4
 8016efa:	b2da      	uxtb	r2, r3
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016f02:	2103      	movs	r1, #3
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	f7ff ff6b 	bl	8016de0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	69db      	ldr	r3, [r3, #28]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d003      	beq.n	8016f1a <netif_set_link_up+0x56>
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	69db      	ldr	r3, [r3, #28]
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016f1a:	3708      	adds	r7, #8
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}
 8016f20:	080298a0 	.word	0x080298a0
 8016f24:	08029a88 	.word	0x08029a88
 8016f28:	080298f0 	.word	0x080298f0

08016f2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b082      	sub	sp, #8
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d107      	bne.n	8016f4a <netif_set_link_down+0x1e>
 8016f3a:	4b11      	ldr	r3, [pc, #68]	; (8016f80 <netif_set_link_down+0x54>)
 8016f3c:	f240 4206 	movw	r2, #1030	; 0x406
 8016f40:	4910      	ldr	r1, [pc, #64]	; (8016f84 <netif_set_link_down+0x58>)
 8016f42:	4811      	ldr	r0, [pc, #68]	; (8016f88 <netif_set_link_down+0x5c>)
 8016f44:	f00c fc8e 	bl	8023864 <iprintf>
 8016f48:	e017      	b.n	8016f7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f50:	f003 0304 	and.w	r3, r3, #4
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d010      	beq.n	8016f7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f5e:	f023 0304 	bic.w	r3, r3, #4
 8016f62:	b2da      	uxtb	r2, r3
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	69db      	ldr	r3, [r3, #28]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d003      	beq.n	8016f7a <netif_set_link_down+0x4e>
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	69db      	ldr	r3, [r3, #28]
 8016f76:	6878      	ldr	r0, [r7, #4]
 8016f78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	080298a0 	.word	0x080298a0
 8016f84:	08029aac 	.word	0x08029aac
 8016f88:	080298f0 	.word	0x080298f0

08016f8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016f8c:	b480      	push	{r7}
 8016f8e:	b083      	sub	sp, #12
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
 8016f94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d002      	beq.n	8016fa2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	683a      	ldr	r2, [r7, #0]
 8016fa0:	61da      	str	r2, [r3, #28]
  }
}
 8016fa2:	bf00      	nop
 8016fa4:	370c      	adds	r7, #12
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fac:	4770      	bx	lr

08016fae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016fae:	b480      	push	{r7}
 8016fb0:	b085      	sub	sp, #20
 8016fb2:	af00      	add	r7, sp, #0
 8016fb4:	60f8      	str	r0, [r7, #12]
 8016fb6:	60b9      	str	r1, [r7, #8]
 8016fb8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016fba:	f06f 030b 	mvn.w	r3, #11
}
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	3714      	adds	r7, #20
 8016fc2:	46bd      	mov	sp, r7
 8016fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc8:	4770      	bx	lr
	...

08016fcc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016fcc:	b480      	push	{r7}
 8016fce:	b085      	sub	sp, #20
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016fd6:	79fb      	ldrb	r3, [r7, #7]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d013      	beq.n	8017004 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016fdc:	4b0d      	ldr	r3, [pc, #52]	; (8017014 <netif_get_by_index+0x48>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	60fb      	str	r3, [r7, #12]
 8016fe2:	e00c      	b.n	8016ffe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016fea:	3301      	adds	r3, #1
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	79fa      	ldrb	r2, [r7, #7]
 8016ff0:	429a      	cmp	r2, r3
 8016ff2:	d101      	bne.n	8016ff8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	e006      	b.n	8017006 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	60fb      	str	r3, [r7, #12]
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d1ef      	bne.n	8016fe4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8017004:	2300      	movs	r3, #0
}
 8017006:	4618      	mov	r0, r3
 8017008:	3714      	adds	r7, #20
 801700a:	46bd      	mov	sp, r7
 801700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017010:	4770      	bx	lr
 8017012:	bf00      	nop
 8017014:	20015fac 	.word	0x20015fac

08017018 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017018:	b580      	push	{r7, lr}
 801701a:	b082      	sub	sp, #8
 801701c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801701e:	f00a fb9d 	bl	802175c <sys_arch_protect>
 8017022:	6038      	str	r0, [r7, #0]
 8017024:	4b0d      	ldr	r3, [pc, #52]	; (801705c <pbuf_free_ooseq+0x44>)
 8017026:	2200      	movs	r2, #0
 8017028:	701a      	strb	r2, [r3, #0]
 801702a:	6838      	ldr	r0, [r7, #0]
 801702c:	f00a fba4 	bl	8021778 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017030:	4b0b      	ldr	r3, [pc, #44]	; (8017060 <pbuf_free_ooseq+0x48>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	607b      	str	r3, [r7, #4]
 8017036:	e00a      	b.n	801704e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801703c:	2b00      	cmp	r3, #0
 801703e:	d003      	beq.n	8017048 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f002 fded 	bl	8019c20 <tcp_free_ooseq>
      return;
 8017046:	e005      	b.n	8017054 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	68db      	ldr	r3, [r3, #12]
 801704c:	607b      	str	r3, [r7, #4]
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d1f1      	bne.n	8017038 <pbuf_free_ooseq+0x20>
    }
  }
}
 8017054:	3708      	adds	r7, #8
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}
 801705a:	bf00      	nop
 801705c:	20015fb5 	.word	0x20015fb5
 8017060:	20015fc4 	.word	0x20015fc4

08017064 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801706c:	f7ff ffd4 	bl	8017018 <pbuf_free_ooseq>
}
 8017070:	bf00      	nop
 8017072:	3708      	adds	r7, #8
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}

08017078 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b082      	sub	sp, #8
 801707c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801707e:	f00a fb6d 	bl	802175c <sys_arch_protect>
 8017082:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017084:	4b0f      	ldr	r3, [pc, #60]	; (80170c4 <pbuf_pool_is_empty+0x4c>)
 8017086:	781b      	ldrb	r3, [r3, #0]
 8017088:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801708a:	4b0e      	ldr	r3, [pc, #56]	; (80170c4 <pbuf_pool_is_empty+0x4c>)
 801708c:	2201      	movs	r2, #1
 801708e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017090:	6878      	ldr	r0, [r7, #4]
 8017092:	f00a fb71 	bl	8021778 <sys_arch_unprotect>

  if (!queued) {
 8017096:	78fb      	ldrb	r3, [r7, #3]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d10f      	bne.n	80170bc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801709c:	2100      	movs	r1, #0
 801709e:	480a      	ldr	r0, [pc, #40]	; (80170c8 <pbuf_pool_is_empty+0x50>)
 80170a0:	f7fe fbc6 	bl	8015830 <tcpip_try_callback>
 80170a4:	4603      	mov	r3, r0
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d008      	beq.n	80170bc <pbuf_pool_is_empty+0x44>
 80170aa:	f00a fb57 	bl	802175c <sys_arch_protect>
 80170ae:	6078      	str	r0, [r7, #4]
 80170b0:	4b04      	ldr	r3, [pc, #16]	; (80170c4 <pbuf_pool_is_empty+0x4c>)
 80170b2:	2200      	movs	r2, #0
 80170b4:	701a      	strb	r2, [r3, #0]
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f00a fb5e 	bl	8021778 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}
 80170c4:	20015fb5 	.word	0x20015fb5
 80170c8:	08017065 	.word	0x08017065

080170cc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	60b9      	str	r1, [r7, #8]
 80170d6:	4611      	mov	r1, r2
 80170d8:	461a      	mov	r2, r3
 80170da:	460b      	mov	r3, r1
 80170dc:	80fb      	strh	r3, [r7, #6]
 80170de:	4613      	mov	r3, r2
 80170e0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	2200      	movs	r2, #0
 80170e6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	68ba      	ldr	r2, [r7, #8]
 80170ec:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	88fa      	ldrh	r2, [r7, #6]
 80170f2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	88ba      	ldrh	r2, [r7, #4]
 80170f8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80170fa:	8b3b      	ldrh	r3, [r7, #24]
 80170fc:	b2da      	uxtb	r2, r3
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	7f3a      	ldrb	r2, [r7, #28]
 8017106:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	2201      	movs	r2, #1
 801710c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2200      	movs	r2, #0
 8017112:	73da      	strb	r2, [r3, #15]
}
 8017114:	bf00      	nop
 8017116:	3714      	adds	r7, #20
 8017118:	46bd      	mov	sp, r7
 801711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711e:	4770      	bx	lr

08017120 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b08c      	sub	sp, #48	; 0x30
 8017124:	af02      	add	r7, sp, #8
 8017126:	4603      	mov	r3, r0
 8017128:	71fb      	strb	r3, [r7, #7]
 801712a:	460b      	mov	r3, r1
 801712c:	80bb      	strh	r3, [r7, #4]
 801712e:	4613      	mov	r3, r2
 8017130:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8017132:	79fb      	ldrb	r3, [r7, #7]
 8017134:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8017136:	887b      	ldrh	r3, [r7, #2]
 8017138:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801713c:	d07f      	beq.n	801723e <pbuf_alloc+0x11e>
 801713e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017142:	f300 80c8 	bgt.w	80172d6 <pbuf_alloc+0x1b6>
 8017146:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801714a:	d010      	beq.n	801716e <pbuf_alloc+0x4e>
 801714c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017150:	f300 80c1 	bgt.w	80172d6 <pbuf_alloc+0x1b6>
 8017154:	2b01      	cmp	r3, #1
 8017156:	d002      	beq.n	801715e <pbuf_alloc+0x3e>
 8017158:	2b41      	cmp	r3, #65	; 0x41
 801715a:	f040 80bc 	bne.w	80172d6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801715e:	887a      	ldrh	r2, [r7, #2]
 8017160:	88bb      	ldrh	r3, [r7, #4]
 8017162:	4619      	mov	r1, r3
 8017164:	2000      	movs	r0, #0
 8017166:	f000 f8d1 	bl	801730c <pbuf_alloc_reference>
 801716a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801716c:	e0bd      	b.n	80172ea <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801716e:	2300      	movs	r3, #0
 8017170:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017172:	2300      	movs	r3, #0
 8017174:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017176:	88bb      	ldrh	r3, [r7, #4]
 8017178:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801717a:	200d      	movs	r0, #13
 801717c:	f7ff fb9a 	bl	80168b4 <memp_malloc>
 8017180:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d109      	bne.n	801719c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8017188:	f7ff ff76 	bl	8017078 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718e:	2b00      	cmp	r3, #0
 8017190:	d002      	beq.n	8017198 <pbuf_alloc+0x78>
            pbuf_free(p);
 8017192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017194:	f000 faa8 	bl	80176e8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017198:	2300      	movs	r3, #0
 801719a:	e0a7      	b.n	80172ec <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801719c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801719e:	3303      	adds	r3, #3
 80171a0:	b29b      	uxth	r3, r3
 80171a2:	f023 0303 	bic.w	r3, r3, #3
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	8b7a      	ldrh	r2, [r7, #26]
 80171b0:	4293      	cmp	r3, r2
 80171b2:	bf28      	it	cs
 80171b4:	4613      	movcs	r3, r2
 80171b6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80171b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171ba:	3310      	adds	r3, #16
 80171bc:	693a      	ldr	r2, [r7, #16]
 80171be:	4413      	add	r3, r2
 80171c0:	3303      	adds	r3, #3
 80171c2:	f023 0303 	bic.w	r3, r3, #3
 80171c6:	4618      	mov	r0, r3
 80171c8:	89f9      	ldrh	r1, [r7, #14]
 80171ca:	8b7a      	ldrh	r2, [r7, #26]
 80171cc:	2300      	movs	r3, #0
 80171ce:	9301      	str	r3, [sp, #4]
 80171d0:	887b      	ldrh	r3, [r7, #2]
 80171d2:	9300      	str	r3, [sp, #0]
 80171d4:	460b      	mov	r3, r1
 80171d6:	4601      	mov	r1, r0
 80171d8:	6938      	ldr	r0, [r7, #16]
 80171da:	f7ff ff77 	bl	80170cc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	f003 0303 	and.w	r3, r3, #3
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d006      	beq.n	80171f8 <pbuf_alloc+0xd8>
 80171ea:	4b42      	ldr	r3, [pc, #264]	; (80172f4 <pbuf_alloc+0x1d4>)
 80171ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80171f0:	4941      	ldr	r1, [pc, #260]	; (80172f8 <pbuf_alloc+0x1d8>)
 80171f2:	4842      	ldr	r0, [pc, #264]	; (80172fc <pbuf_alloc+0x1dc>)
 80171f4:	f00c fb36 	bl	8023864 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80171f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171fa:	3303      	adds	r3, #3
 80171fc:	f023 0303 	bic.w	r3, r3, #3
 8017200:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017204:	d106      	bne.n	8017214 <pbuf_alloc+0xf4>
 8017206:	4b3b      	ldr	r3, [pc, #236]	; (80172f4 <pbuf_alloc+0x1d4>)
 8017208:	f44f 7281 	mov.w	r2, #258	; 0x102
 801720c:	493c      	ldr	r1, [pc, #240]	; (8017300 <pbuf_alloc+0x1e0>)
 801720e:	483b      	ldr	r0, [pc, #236]	; (80172fc <pbuf_alloc+0x1dc>)
 8017210:	f00c fb28 	bl	8023864 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017216:	2b00      	cmp	r3, #0
 8017218:	d102      	bne.n	8017220 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	627b      	str	r3, [r7, #36]	; 0x24
 801721e:	e002      	b.n	8017226 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8017220:	69fb      	ldr	r3, [r7, #28]
 8017222:	693a      	ldr	r2, [r7, #16]
 8017224:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801722a:	8b7a      	ldrh	r2, [r7, #26]
 801722c:	89fb      	ldrh	r3, [r7, #14]
 801722e:	1ad3      	subs	r3, r2, r3
 8017230:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017232:	2300      	movs	r3, #0
 8017234:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017236:	8b7b      	ldrh	r3, [r7, #26]
 8017238:	2b00      	cmp	r3, #0
 801723a:	d19e      	bne.n	801717a <pbuf_alloc+0x5a>
      break;
 801723c:	e055      	b.n	80172ea <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801723e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017240:	3303      	adds	r3, #3
 8017242:	b29b      	uxth	r3, r3
 8017244:	f023 0303 	bic.w	r3, r3, #3
 8017248:	b29a      	uxth	r2, r3
 801724a:	88bb      	ldrh	r3, [r7, #4]
 801724c:	3303      	adds	r3, #3
 801724e:	b29b      	uxth	r3, r3
 8017250:	f023 0303 	bic.w	r3, r3, #3
 8017254:	b29b      	uxth	r3, r3
 8017256:	4413      	add	r3, r2
 8017258:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801725a:	8b3b      	ldrh	r3, [r7, #24]
 801725c:	3310      	adds	r3, #16
 801725e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017260:	8b3a      	ldrh	r2, [r7, #24]
 8017262:	88bb      	ldrh	r3, [r7, #4]
 8017264:	3303      	adds	r3, #3
 8017266:	f023 0303 	bic.w	r3, r3, #3
 801726a:	429a      	cmp	r2, r3
 801726c:	d306      	bcc.n	801727c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801726e:	8afa      	ldrh	r2, [r7, #22]
 8017270:	88bb      	ldrh	r3, [r7, #4]
 8017272:	3303      	adds	r3, #3
 8017274:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017278:	429a      	cmp	r2, r3
 801727a:	d201      	bcs.n	8017280 <pbuf_alloc+0x160>
        return NULL;
 801727c:	2300      	movs	r3, #0
 801727e:	e035      	b.n	80172ec <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017280:	8afb      	ldrh	r3, [r7, #22]
 8017282:	4618      	mov	r0, r3
 8017284:	f7ff f972 	bl	801656c <mem_malloc>
 8017288:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801728a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801728c:	2b00      	cmp	r3, #0
 801728e:	d101      	bne.n	8017294 <pbuf_alloc+0x174>
        return NULL;
 8017290:	2300      	movs	r3, #0
 8017292:	e02b      	b.n	80172ec <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017294:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017296:	3310      	adds	r3, #16
 8017298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801729a:	4413      	add	r3, r2
 801729c:	3303      	adds	r3, #3
 801729e:	f023 0303 	bic.w	r3, r3, #3
 80172a2:	4618      	mov	r0, r3
 80172a4:	88b9      	ldrh	r1, [r7, #4]
 80172a6:	88ba      	ldrh	r2, [r7, #4]
 80172a8:	2300      	movs	r3, #0
 80172aa:	9301      	str	r3, [sp, #4]
 80172ac:	887b      	ldrh	r3, [r7, #2]
 80172ae:	9300      	str	r3, [sp, #0]
 80172b0:	460b      	mov	r3, r1
 80172b2:	4601      	mov	r1, r0
 80172b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172b6:	f7ff ff09 	bl	80170cc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80172ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	f003 0303 	and.w	r3, r3, #3
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d010      	beq.n	80172e8 <pbuf_alloc+0x1c8>
 80172c6:	4b0b      	ldr	r3, [pc, #44]	; (80172f4 <pbuf_alloc+0x1d4>)
 80172c8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80172cc:	490d      	ldr	r1, [pc, #52]	; (8017304 <pbuf_alloc+0x1e4>)
 80172ce:	480b      	ldr	r0, [pc, #44]	; (80172fc <pbuf_alloc+0x1dc>)
 80172d0:	f00c fac8 	bl	8023864 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80172d4:	e008      	b.n	80172e8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80172d6:	4b07      	ldr	r3, [pc, #28]	; (80172f4 <pbuf_alloc+0x1d4>)
 80172d8:	f240 1227 	movw	r2, #295	; 0x127
 80172dc:	490a      	ldr	r1, [pc, #40]	; (8017308 <pbuf_alloc+0x1e8>)
 80172de:	4807      	ldr	r0, [pc, #28]	; (80172fc <pbuf_alloc+0x1dc>)
 80172e0:	f00c fac0 	bl	8023864 <iprintf>
      return NULL;
 80172e4:	2300      	movs	r3, #0
 80172e6:	e001      	b.n	80172ec <pbuf_alloc+0x1cc>
      break;
 80172e8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80172ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3728      	adds	r7, #40	; 0x28
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	08029ad0 	.word	0x08029ad0
 80172f8:	08029b00 	.word	0x08029b00
 80172fc:	08029b30 	.word	0x08029b30
 8017300:	08029b58 	.word	0x08029b58
 8017304:	08029b8c 	.word	0x08029b8c
 8017308:	08029bb8 	.word	0x08029bb8

0801730c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b086      	sub	sp, #24
 8017310:	af02      	add	r7, sp, #8
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	460b      	mov	r3, r1
 8017316:	807b      	strh	r3, [r7, #2]
 8017318:	4613      	mov	r3, r2
 801731a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801731c:	883b      	ldrh	r3, [r7, #0]
 801731e:	2b41      	cmp	r3, #65	; 0x41
 8017320:	d009      	beq.n	8017336 <pbuf_alloc_reference+0x2a>
 8017322:	883b      	ldrh	r3, [r7, #0]
 8017324:	2b01      	cmp	r3, #1
 8017326:	d006      	beq.n	8017336 <pbuf_alloc_reference+0x2a>
 8017328:	4b0f      	ldr	r3, [pc, #60]	; (8017368 <pbuf_alloc_reference+0x5c>)
 801732a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801732e:	490f      	ldr	r1, [pc, #60]	; (801736c <pbuf_alloc_reference+0x60>)
 8017330:	480f      	ldr	r0, [pc, #60]	; (8017370 <pbuf_alloc_reference+0x64>)
 8017332:	f00c fa97 	bl	8023864 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8017336:	200c      	movs	r0, #12
 8017338:	f7ff fabc 	bl	80168b4 <memp_malloc>
 801733c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	2b00      	cmp	r3, #0
 8017342:	d101      	bne.n	8017348 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8017344:	2300      	movs	r3, #0
 8017346:	e00b      	b.n	8017360 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8017348:	8879      	ldrh	r1, [r7, #2]
 801734a:	887a      	ldrh	r2, [r7, #2]
 801734c:	2300      	movs	r3, #0
 801734e:	9301      	str	r3, [sp, #4]
 8017350:	883b      	ldrh	r3, [r7, #0]
 8017352:	9300      	str	r3, [sp, #0]
 8017354:	460b      	mov	r3, r1
 8017356:	6879      	ldr	r1, [r7, #4]
 8017358:	68f8      	ldr	r0, [r7, #12]
 801735a:	f7ff feb7 	bl	80170cc <pbuf_init_alloced_pbuf>
  return p;
 801735e:	68fb      	ldr	r3, [r7, #12]
}
 8017360:	4618      	mov	r0, r3
 8017362:	3710      	adds	r7, #16
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	08029ad0 	.word	0x08029ad0
 801736c:	08029bd4 	.word	0x08029bd4
 8017370:	08029b30 	.word	0x08029b30

08017374 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b088      	sub	sp, #32
 8017378:	af02      	add	r7, sp, #8
 801737a:	607b      	str	r3, [r7, #4]
 801737c:	4603      	mov	r3, r0
 801737e:	73fb      	strb	r3, [r7, #15]
 8017380:	460b      	mov	r3, r1
 8017382:	81bb      	strh	r3, [r7, #12]
 8017384:	4613      	mov	r3, r2
 8017386:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8017388:	7bfb      	ldrb	r3, [r7, #15]
 801738a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801738c:	8a7b      	ldrh	r3, [r7, #18]
 801738e:	3303      	adds	r3, #3
 8017390:	f023 0203 	bic.w	r2, r3, #3
 8017394:	89bb      	ldrh	r3, [r7, #12]
 8017396:	441a      	add	r2, r3
 8017398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801739a:	429a      	cmp	r2, r3
 801739c:	d901      	bls.n	80173a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801739e:	2300      	movs	r3, #0
 80173a0:	e018      	b.n	80173d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80173a2:	6a3b      	ldr	r3, [r7, #32]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d007      	beq.n	80173b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80173a8:	8a7b      	ldrh	r3, [r7, #18]
 80173aa:	3303      	adds	r3, #3
 80173ac:	f023 0303 	bic.w	r3, r3, #3
 80173b0:	6a3a      	ldr	r2, [r7, #32]
 80173b2:	4413      	add	r3, r2
 80173b4:	617b      	str	r3, [r7, #20]
 80173b6:	e001      	b.n	80173bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80173b8:	2300      	movs	r3, #0
 80173ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80173bc:	6878      	ldr	r0, [r7, #4]
 80173be:	89b9      	ldrh	r1, [r7, #12]
 80173c0:	89ba      	ldrh	r2, [r7, #12]
 80173c2:	2302      	movs	r3, #2
 80173c4:	9301      	str	r3, [sp, #4]
 80173c6:	897b      	ldrh	r3, [r7, #10]
 80173c8:	9300      	str	r3, [sp, #0]
 80173ca:	460b      	mov	r3, r1
 80173cc:	6979      	ldr	r1, [r7, #20]
 80173ce:	f7ff fe7d 	bl	80170cc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80173d2:	687b      	ldr	r3, [r7, #4]
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	3718      	adds	r7, #24
 80173d8:	46bd      	mov	sp, r7
 80173da:	bd80      	pop	{r7, pc}

080173dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80173dc:	b580      	push	{r7, lr}
 80173de:	b084      	sub	sp, #16
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
 80173e4:	460b      	mov	r3, r1
 80173e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d106      	bne.n	80173fc <pbuf_realloc+0x20>
 80173ee:	4b3a      	ldr	r3, [pc, #232]	; (80174d8 <pbuf_realloc+0xfc>)
 80173f0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80173f4:	4939      	ldr	r1, [pc, #228]	; (80174dc <pbuf_realloc+0x100>)
 80173f6:	483a      	ldr	r0, [pc, #232]	; (80174e0 <pbuf_realloc+0x104>)
 80173f8:	f00c fa34 	bl	8023864 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	891b      	ldrh	r3, [r3, #8]
 8017400:	887a      	ldrh	r2, [r7, #2]
 8017402:	429a      	cmp	r2, r3
 8017404:	d263      	bcs.n	80174ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	891a      	ldrh	r2, [r3, #8]
 801740a:	887b      	ldrh	r3, [r7, #2]
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017410:	887b      	ldrh	r3, [r7, #2]
 8017412:	817b      	strh	r3, [r7, #10]
  q = p;
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8017418:	e018      	b.n	801744c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	895b      	ldrh	r3, [r3, #10]
 801741e:	897a      	ldrh	r2, [r7, #10]
 8017420:	1ad3      	subs	r3, r2, r3
 8017422:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	891a      	ldrh	r2, [r3, #8]
 8017428:	893b      	ldrh	r3, [r7, #8]
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	b29a      	uxth	r2, r3
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8017432:	68fb      	ldr	r3, [r7, #12]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d106      	bne.n	801744c <pbuf_realloc+0x70>
 801743e:	4b26      	ldr	r3, [pc, #152]	; (80174d8 <pbuf_realloc+0xfc>)
 8017440:	f240 12af 	movw	r2, #431	; 0x1af
 8017444:	4927      	ldr	r1, [pc, #156]	; (80174e4 <pbuf_realloc+0x108>)
 8017446:	4826      	ldr	r0, [pc, #152]	; (80174e0 <pbuf_realloc+0x104>)
 8017448:	f00c fa0c 	bl	8023864 <iprintf>
  while (rem_len > q->len) {
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	895b      	ldrh	r3, [r3, #10]
 8017450:	897a      	ldrh	r2, [r7, #10]
 8017452:	429a      	cmp	r2, r3
 8017454:	d8e1      	bhi.n	801741a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	7b1b      	ldrb	r3, [r3, #12]
 801745a:	f003 030f 	and.w	r3, r3, #15
 801745e:	2b00      	cmp	r3, #0
 8017460:	d121      	bne.n	80174a6 <pbuf_realloc+0xca>
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	895b      	ldrh	r3, [r3, #10]
 8017466:	897a      	ldrh	r2, [r7, #10]
 8017468:	429a      	cmp	r2, r3
 801746a:	d01c      	beq.n	80174a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	7b5b      	ldrb	r3, [r3, #13]
 8017470:	f003 0302 	and.w	r3, r3, #2
 8017474:	2b00      	cmp	r3, #0
 8017476:	d116      	bne.n	80174a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	685a      	ldr	r2, [r3, #4]
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	b29a      	uxth	r2, r3
 8017482:	897b      	ldrh	r3, [r7, #10]
 8017484:	4413      	add	r3, r2
 8017486:	b29b      	uxth	r3, r3
 8017488:	4619      	mov	r1, r3
 801748a:	68f8      	ldr	r0, [r7, #12]
 801748c:	f7fe ff64 	bl	8016358 <mem_trim>
 8017490:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d106      	bne.n	80174a6 <pbuf_realloc+0xca>
 8017498:	4b0f      	ldr	r3, [pc, #60]	; (80174d8 <pbuf_realloc+0xfc>)
 801749a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801749e:	4912      	ldr	r1, [pc, #72]	; (80174e8 <pbuf_realloc+0x10c>)
 80174a0:	480f      	ldr	r0, [pc, #60]	; (80174e0 <pbuf_realloc+0x104>)
 80174a2:	f00c f9df 	bl	8023864 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	897a      	ldrh	r2, [r7, #10]
 80174aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	895a      	ldrh	r2, [r3, #10]
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80174b4:	68fb      	ldr	r3, [r7, #12]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d004      	beq.n	80174c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	4618      	mov	r0, r3
 80174c2:	f000 f911 	bl	80176e8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	2200      	movs	r2, #0
 80174ca:	601a      	str	r2, [r3, #0]
 80174cc:	e000      	b.n	80174d0 <pbuf_realloc+0xf4>
    return;
 80174ce:	bf00      	nop

}
 80174d0:	3710      	adds	r7, #16
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	08029ad0 	.word	0x08029ad0
 80174dc:	08029be8 	.word	0x08029be8
 80174e0:	08029b30 	.word	0x08029b30
 80174e4:	08029c00 	.word	0x08029c00
 80174e8:	08029c18 	.word	0x08029c18

080174ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80174ec:	b580      	push	{r7, lr}
 80174ee:	b086      	sub	sp, #24
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	60f8      	str	r0, [r7, #12]
 80174f4:	60b9      	str	r1, [r7, #8]
 80174f6:	4613      	mov	r3, r2
 80174f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d106      	bne.n	801750e <pbuf_add_header_impl+0x22>
 8017500:	4b2b      	ldr	r3, [pc, #172]	; (80175b0 <pbuf_add_header_impl+0xc4>)
 8017502:	f240 12df 	movw	r2, #479	; 0x1df
 8017506:	492b      	ldr	r1, [pc, #172]	; (80175b4 <pbuf_add_header_impl+0xc8>)
 8017508:	482b      	ldr	r0, [pc, #172]	; (80175b8 <pbuf_add_header_impl+0xcc>)
 801750a:	f00c f9ab 	bl	8023864 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d003      	beq.n	801751c <pbuf_add_header_impl+0x30>
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801751a:	d301      	bcc.n	8017520 <pbuf_add_header_impl+0x34>
    return 1;
 801751c:	2301      	movs	r3, #1
 801751e:	e043      	b.n	80175a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8017520:	68bb      	ldr	r3, [r7, #8]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d101      	bne.n	801752a <pbuf_add_header_impl+0x3e>
    return 0;
 8017526:	2300      	movs	r3, #0
 8017528:	e03e      	b.n	80175a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	891a      	ldrh	r2, [r3, #8]
 8017532:	8a7b      	ldrh	r3, [r7, #18]
 8017534:	4413      	add	r3, r2
 8017536:	b29b      	uxth	r3, r3
 8017538:	8a7a      	ldrh	r2, [r7, #18]
 801753a:	429a      	cmp	r2, r3
 801753c:	d901      	bls.n	8017542 <pbuf_add_header_impl+0x56>
    return 1;
 801753e:	2301      	movs	r3, #1
 8017540:	e032      	b.n	80175a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	7b1b      	ldrb	r3, [r3, #12]
 8017546:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8017548:	8a3b      	ldrh	r3, [r7, #16]
 801754a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801754e:	2b00      	cmp	r3, #0
 8017550:	d00c      	beq.n	801756c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	685a      	ldr	r2, [r3, #4]
 8017556:	68bb      	ldr	r3, [r7, #8]
 8017558:	425b      	negs	r3, r3
 801755a:	4413      	add	r3, r2
 801755c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	3310      	adds	r3, #16
 8017562:	697a      	ldr	r2, [r7, #20]
 8017564:	429a      	cmp	r2, r3
 8017566:	d20d      	bcs.n	8017584 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8017568:	2301      	movs	r3, #1
 801756a:	e01d      	b.n	80175a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801756c:	79fb      	ldrb	r3, [r7, #7]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d006      	beq.n	8017580 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	685a      	ldr	r2, [r3, #4]
 8017576:	68bb      	ldr	r3, [r7, #8]
 8017578:	425b      	negs	r3, r3
 801757a:	4413      	add	r3, r2
 801757c:	617b      	str	r3, [r7, #20]
 801757e:	e001      	b.n	8017584 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8017580:	2301      	movs	r3, #1
 8017582:	e011      	b.n	80175a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	697a      	ldr	r2, [r7, #20]
 8017588:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801758a:	68fb      	ldr	r3, [r7, #12]
 801758c:	895a      	ldrh	r2, [r3, #10]
 801758e:	8a7b      	ldrh	r3, [r7, #18]
 8017590:	4413      	add	r3, r2
 8017592:	b29a      	uxth	r2, r3
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	891a      	ldrh	r2, [r3, #8]
 801759c:	8a7b      	ldrh	r3, [r7, #18]
 801759e:	4413      	add	r3, r2
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	68fb      	ldr	r3, [r7, #12]
 80175a4:	811a      	strh	r2, [r3, #8]


  return 0;
 80175a6:	2300      	movs	r3, #0
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3718      	adds	r7, #24
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}
 80175b0:	08029ad0 	.word	0x08029ad0
 80175b4:	08029c34 	.word	0x08029c34
 80175b8:	08029b30 	.word	0x08029b30

080175bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80175c6:	2200      	movs	r2, #0
 80175c8:	6839      	ldr	r1, [r7, #0]
 80175ca:	6878      	ldr	r0, [r7, #4]
 80175cc:	f7ff ff8e 	bl	80174ec <pbuf_add_header_impl>
 80175d0:	4603      	mov	r3, r0
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3708      	adds	r7, #8
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
	...

080175dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d106      	bne.n	80175fa <pbuf_remove_header+0x1e>
 80175ec:	4b20      	ldr	r3, [pc, #128]	; (8017670 <pbuf_remove_header+0x94>)
 80175ee:	f240 224b 	movw	r2, #587	; 0x24b
 80175f2:	4920      	ldr	r1, [pc, #128]	; (8017674 <pbuf_remove_header+0x98>)
 80175f4:	4820      	ldr	r0, [pc, #128]	; (8017678 <pbuf_remove_header+0x9c>)
 80175f6:	f00c f935 	bl	8023864 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d003      	beq.n	8017608 <pbuf_remove_header+0x2c>
 8017600:	683b      	ldr	r3, [r7, #0]
 8017602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017606:	d301      	bcc.n	801760c <pbuf_remove_header+0x30>
    return 1;
 8017608:	2301      	movs	r3, #1
 801760a:	e02c      	b.n	8017666 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	2b00      	cmp	r3, #0
 8017610:	d101      	bne.n	8017616 <pbuf_remove_header+0x3a>
    return 0;
 8017612:	2300      	movs	r3, #0
 8017614:	e027      	b.n	8017666 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8017616:	683b      	ldr	r3, [r7, #0]
 8017618:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	895b      	ldrh	r3, [r3, #10]
 801761e:	89fa      	ldrh	r2, [r7, #14]
 8017620:	429a      	cmp	r2, r3
 8017622:	d908      	bls.n	8017636 <pbuf_remove_header+0x5a>
 8017624:	4b12      	ldr	r3, [pc, #72]	; (8017670 <pbuf_remove_header+0x94>)
 8017626:	f240 2255 	movw	r2, #597	; 0x255
 801762a:	4914      	ldr	r1, [pc, #80]	; (801767c <pbuf_remove_header+0xa0>)
 801762c:	4812      	ldr	r0, [pc, #72]	; (8017678 <pbuf_remove_header+0x9c>)
 801762e:	f00c f919 	bl	8023864 <iprintf>
 8017632:	2301      	movs	r3, #1
 8017634:	e017      	b.n	8017666 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	685a      	ldr	r2, [r3, #4]
 8017640:	683b      	ldr	r3, [r7, #0]
 8017642:	441a      	add	r2, r3
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	895a      	ldrh	r2, [r3, #10]
 801764c:	89fb      	ldrh	r3, [r7, #14]
 801764e:	1ad3      	subs	r3, r2, r3
 8017650:	b29a      	uxth	r2, r3
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	891a      	ldrh	r2, [r3, #8]
 801765a:	89fb      	ldrh	r3, [r7, #14]
 801765c:	1ad3      	subs	r3, r2, r3
 801765e:	b29a      	uxth	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8017664:	2300      	movs	r3, #0
}
 8017666:	4618      	mov	r0, r3
 8017668:	3710      	adds	r7, #16
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
 801766e:	bf00      	nop
 8017670:	08029ad0 	.word	0x08029ad0
 8017674:	08029c34 	.word	0x08029c34
 8017678:	08029b30 	.word	0x08029b30
 801767c:	08029c40 	.word	0x08029c40

08017680 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b082      	sub	sp, #8
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	460b      	mov	r3, r1
 801768a:	807b      	strh	r3, [r7, #2]
 801768c:	4613      	mov	r3, r2
 801768e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8017690:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017694:	2b00      	cmp	r3, #0
 8017696:	da08      	bge.n	80176aa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017698:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801769c:	425b      	negs	r3, r3
 801769e:	4619      	mov	r1, r3
 80176a0:	6878      	ldr	r0, [r7, #4]
 80176a2:	f7ff ff9b 	bl	80175dc <pbuf_remove_header>
 80176a6:	4603      	mov	r3, r0
 80176a8:	e007      	b.n	80176ba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80176aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80176ae:	787a      	ldrb	r2, [r7, #1]
 80176b0:	4619      	mov	r1, r3
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f7ff ff1a 	bl	80174ec <pbuf_add_header_impl>
 80176b8:	4603      	mov	r3, r0
  }
}
 80176ba:	4618      	mov	r0, r3
 80176bc:	3708      	adds	r7, #8
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}

080176c2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80176c2:	b580      	push	{r7, lr}
 80176c4:	b082      	sub	sp, #8
 80176c6:	af00      	add	r7, sp, #0
 80176c8:	6078      	str	r0, [r7, #4]
 80176ca:	460b      	mov	r3, r1
 80176cc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80176ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80176d2:	2201      	movs	r2, #1
 80176d4:	4619      	mov	r1, r3
 80176d6:	6878      	ldr	r0, [r7, #4]
 80176d8:	f7ff ffd2 	bl	8017680 <pbuf_header_impl>
 80176dc:	4603      	mov	r3, r0
}
 80176de:	4618      	mov	r0, r3
 80176e0:	3708      	adds	r7, #8
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}
	...

080176e8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b088      	sub	sp, #32
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d10b      	bne.n	801770e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d106      	bne.n	801770a <pbuf_free+0x22>
 80176fc:	4b3b      	ldr	r3, [pc, #236]	; (80177ec <pbuf_free+0x104>)
 80176fe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8017702:	493b      	ldr	r1, [pc, #236]	; (80177f0 <pbuf_free+0x108>)
 8017704:	483b      	ldr	r0, [pc, #236]	; (80177f4 <pbuf_free+0x10c>)
 8017706:	f00c f8ad 	bl	8023864 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801770a:	2300      	movs	r3, #0
 801770c:	e069      	b.n	80177e2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801770e:	2300      	movs	r3, #0
 8017710:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8017712:	e062      	b.n	80177da <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8017714:	f00a f822 	bl	802175c <sys_arch_protect>
 8017718:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	7b9b      	ldrb	r3, [r3, #14]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d106      	bne.n	8017730 <pbuf_free+0x48>
 8017722:	4b32      	ldr	r3, [pc, #200]	; (80177ec <pbuf_free+0x104>)
 8017724:	f240 22f1 	movw	r2, #753	; 0x2f1
 8017728:	4933      	ldr	r1, [pc, #204]	; (80177f8 <pbuf_free+0x110>)
 801772a:	4832      	ldr	r0, [pc, #200]	; (80177f4 <pbuf_free+0x10c>)
 801772c:	f00c f89a 	bl	8023864 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	7b9b      	ldrb	r3, [r3, #14]
 8017734:	3b01      	subs	r3, #1
 8017736:	b2da      	uxtb	r2, r3
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	739a      	strb	r2, [r3, #14]
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	7b9b      	ldrb	r3, [r3, #14]
 8017740:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8017742:	69b8      	ldr	r0, [r7, #24]
 8017744:	f00a f818 	bl	8021778 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8017748:	7dfb      	ldrb	r3, [r7, #23]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d143      	bne.n	80177d6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	7b1b      	ldrb	r3, [r3, #12]
 8017758:	f003 030f 	and.w	r3, r3, #15
 801775c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	7b5b      	ldrb	r3, [r3, #13]
 8017762:	f003 0302 	and.w	r3, r3, #2
 8017766:	2b00      	cmp	r3, #0
 8017768:	d011      	beq.n	801778e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	691b      	ldr	r3, [r3, #16]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d106      	bne.n	8017784 <pbuf_free+0x9c>
 8017776:	4b1d      	ldr	r3, [pc, #116]	; (80177ec <pbuf_free+0x104>)
 8017778:	f240 22ff 	movw	r2, #767	; 0x2ff
 801777c:	491f      	ldr	r1, [pc, #124]	; (80177fc <pbuf_free+0x114>)
 801777e:	481d      	ldr	r0, [pc, #116]	; (80177f4 <pbuf_free+0x10c>)
 8017780:	f00c f870 	bl	8023864 <iprintf>
        pc->custom_free_function(p);
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	691b      	ldr	r3, [r3, #16]
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	4798      	blx	r3
 801778c:	e01d      	b.n	80177ca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801778e:	7bfb      	ldrb	r3, [r7, #15]
 8017790:	2b02      	cmp	r3, #2
 8017792:	d104      	bne.n	801779e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017794:	6879      	ldr	r1, [r7, #4]
 8017796:	200d      	movs	r0, #13
 8017798:	f7ff f902 	bl	80169a0 <memp_free>
 801779c:	e015      	b.n	80177ca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801779e:	7bfb      	ldrb	r3, [r7, #15]
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	d104      	bne.n	80177ae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80177a4:	6879      	ldr	r1, [r7, #4]
 80177a6:	200c      	movs	r0, #12
 80177a8:	f7ff f8fa 	bl	80169a0 <memp_free>
 80177ac:	e00d      	b.n	80177ca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80177ae:	7bfb      	ldrb	r3, [r7, #15]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d103      	bne.n	80177bc <pbuf_free+0xd4>
          mem_free(p);
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7fe fd3f 	bl	8016238 <mem_free>
 80177ba:	e006      	b.n	80177ca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80177bc:	4b0b      	ldr	r3, [pc, #44]	; (80177ec <pbuf_free+0x104>)
 80177be:	f240 320f 	movw	r2, #783	; 0x30f
 80177c2:	490f      	ldr	r1, [pc, #60]	; (8017800 <pbuf_free+0x118>)
 80177c4:	480b      	ldr	r0, [pc, #44]	; (80177f4 <pbuf_free+0x10c>)
 80177c6:	f00c f84d 	bl	8023864 <iprintf>
        }
      }
      count++;
 80177ca:	7ffb      	ldrb	r3, [r7, #31]
 80177cc:	3301      	adds	r3, #1
 80177ce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80177d0:	693b      	ldr	r3, [r7, #16]
 80177d2:	607b      	str	r3, [r7, #4]
 80177d4:	e001      	b.n	80177da <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80177d6:	2300      	movs	r3, #0
 80177d8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d199      	bne.n	8017714 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80177e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80177e2:	4618      	mov	r0, r3
 80177e4:	3720      	adds	r7, #32
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}
 80177ea:	bf00      	nop
 80177ec:	08029ad0 	.word	0x08029ad0
 80177f0:	08029c34 	.word	0x08029c34
 80177f4:	08029b30 	.word	0x08029b30
 80177f8:	08029c60 	.word	0x08029c60
 80177fc:	08029c78 	.word	0x08029c78
 8017800:	08029c9c 	.word	0x08029c9c

08017804 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017804:	b480      	push	{r7}
 8017806:	b085      	sub	sp, #20
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801780c:	2300      	movs	r3, #0
 801780e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017810:	e005      	b.n	801781e <pbuf_clen+0x1a>
    ++len;
 8017812:	89fb      	ldrh	r3, [r7, #14]
 8017814:	3301      	adds	r3, #1
 8017816:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d1f6      	bne.n	8017812 <pbuf_clen+0xe>
  }
  return len;
 8017824:	89fb      	ldrh	r3, [r7, #14]
}
 8017826:	4618      	mov	r0, r3
 8017828:	3714      	adds	r7, #20
 801782a:	46bd      	mov	sp, r7
 801782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017830:	4770      	bx	lr
	...

08017834 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b084      	sub	sp, #16
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	2b00      	cmp	r3, #0
 8017840:	d016      	beq.n	8017870 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8017842:	f009 ff8b 	bl	802175c <sys_arch_protect>
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	7b9b      	ldrb	r3, [r3, #14]
 801784c:	3301      	adds	r3, #1
 801784e:	b2da      	uxtb	r2, r3
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	739a      	strb	r2, [r3, #14]
 8017854:	68f8      	ldr	r0, [r7, #12]
 8017856:	f009 ff8f 	bl	8021778 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	7b9b      	ldrb	r3, [r3, #14]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d106      	bne.n	8017870 <pbuf_ref+0x3c>
 8017862:	4b05      	ldr	r3, [pc, #20]	; (8017878 <pbuf_ref+0x44>)
 8017864:	f240 3242 	movw	r2, #834	; 0x342
 8017868:	4904      	ldr	r1, [pc, #16]	; (801787c <pbuf_ref+0x48>)
 801786a:	4805      	ldr	r0, [pc, #20]	; (8017880 <pbuf_ref+0x4c>)
 801786c:	f00b fffa 	bl	8023864 <iprintf>
  }
}
 8017870:	bf00      	nop
 8017872:	3710      	adds	r7, #16
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}
 8017878:	08029ad0 	.word	0x08029ad0
 801787c:	08029cb0 	.word	0x08029cb0
 8017880:	08029b30 	.word	0x08029b30

08017884 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b084      	sub	sp, #16
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d002      	beq.n	801789a <pbuf_cat+0x16>
 8017894:	683b      	ldr	r3, [r7, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d107      	bne.n	80178aa <pbuf_cat+0x26>
 801789a:	4b20      	ldr	r3, [pc, #128]	; (801791c <pbuf_cat+0x98>)
 801789c:	f240 3259 	movw	r2, #857	; 0x359
 80178a0:	491f      	ldr	r1, [pc, #124]	; (8017920 <pbuf_cat+0x9c>)
 80178a2:	4820      	ldr	r0, [pc, #128]	; (8017924 <pbuf_cat+0xa0>)
 80178a4:	f00b ffde 	bl	8023864 <iprintf>
 80178a8:	e034      	b.n	8017914 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	60fb      	str	r3, [r7, #12]
 80178ae:	e00a      	b.n	80178c6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	891a      	ldrh	r2, [r3, #8]
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	891b      	ldrh	r3, [r3, #8]
 80178b8:	4413      	add	r3, r2
 80178ba:	b29a      	uxth	r2, r3
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	60fb      	str	r3, [r7, #12]
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d1f0      	bne.n	80178b0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	891a      	ldrh	r2, [r3, #8]
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	895b      	ldrh	r3, [r3, #10]
 80178d6:	429a      	cmp	r2, r3
 80178d8:	d006      	beq.n	80178e8 <pbuf_cat+0x64>
 80178da:	4b10      	ldr	r3, [pc, #64]	; (801791c <pbuf_cat+0x98>)
 80178dc:	f240 3262 	movw	r2, #866	; 0x362
 80178e0:	4911      	ldr	r1, [pc, #68]	; (8017928 <pbuf_cat+0xa4>)
 80178e2:	4810      	ldr	r0, [pc, #64]	; (8017924 <pbuf_cat+0xa0>)
 80178e4:	f00b ffbe 	bl	8023864 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d006      	beq.n	80178fe <pbuf_cat+0x7a>
 80178f0:	4b0a      	ldr	r3, [pc, #40]	; (801791c <pbuf_cat+0x98>)
 80178f2:	f240 3263 	movw	r2, #867	; 0x363
 80178f6:	490d      	ldr	r1, [pc, #52]	; (801792c <pbuf_cat+0xa8>)
 80178f8:	480a      	ldr	r0, [pc, #40]	; (8017924 <pbuf_cat+0xa0>)
 80178fa:	f00b ffb3 	bl	8023864 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	891a      	ldrh	r2, [r3, #8]
 8017902:	683b      	ldr	r3, [r7, #0]
 8017904:	891b      	ldrh	r3, [r3, #8]
 8017906:	4413      	add	r3, r2
 8017908:	b29a      	uxth	r2, r3
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	683a      	ldr	r2, [r7, #0]
 8017912:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	08029ad0 	.word	0x08029ad0
 8017920:	08029cc4 	.word	0x08029cc4
 8017924:	08029b30 	.word	0x08029b30
 8017928:	08029cfc 	.word	0x08029cfc
 801792c:	08029d2c 	.word	0x08029d2c

08017930 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8017930:	b580      	push	{r7, lr}
 8017932:	b082      	sub	sp, #8
 8017934:	af00      	add	r7, sp, #0
 8017936:	6078      	str	r0, [r7, #4]
 8017938:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801793a:	6839      	ldr	r1, [r7, #0]
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f7ff ffa1 	bl	8017884 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8017942:	6838      	ldr	r0, [r7, #0]
 8017944:	f7ff ff76 	bl	8017834 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}

08017950 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b086      	sub	sp, #24
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801795a:	2300      	movs	r3, #0
 801795c:	617b      	str	r3, [r7, #20]
 801795e:	2300      	movs	r3, #0
 8017960:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d008      	beq.n	801797a <pbuf_copy+0x2a>
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d005      	beq.n	801797a <pbuf_copy+0x2a>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	891a      	ldrh	r2, [r3, #8]
 8017972:	683b      	ldr	r3, [r7, #0]
 8017974:	891b      	ldrh	r3, [r3, #8]
 8017976:	429a      	cmp	r2, r3
 8017978:	d209      	bcs.n	801798e <pbuf_copy+0x3e>
 801797a:	4b57      	ldr	r3, [pc, #348]	; (8017ad8 <pbuf_copy+0x188>)
 801797c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017980:	4956      	ldr	r1, [pc, #344]	; (8017adc <pbuf_copy+0x18c>)
 8017982:	4857      	ldr	r0, [pc, #348]	; (8017ae0 <pbuf_copy+0x190>)
 8017984:	f00b ff6e 	bl	8023864 <iprintf>
 8017988:	f06f 030f 	mvn.w	r3, #15
 801798c:	e09f      	b.n	8017ace <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	895b      	ldrh	r3, [r3, #10]
 8017992:	461a      	mov	r2, r3
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	1ad2      	subs	r2, r2, r3
 8017998:	683b      	ldr	r3, [r7, #0]
 801799a:	895b      	ldrh	r3, [r3, #10]
 801799c:	4619      	mov	r1, r3
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	1acb      	subs	r3, r1, r3
 80179a2:	429a      	cmp	r2, r3
 80179a4:	d306      	bcc.n	80179b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	895b      	ldrh	r3, [r3, #10]
 80179aa:	461a      	mov	r2, r3
 80179ac:	693b      	ldr	r3, [r7, #16]
 80179ae:	1ad3      	subs	r3, r2, r3
 80179b0:	60fb      	str	r3, [r7, #12]
 80179b2:	e005      	b.n	80179c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	895b      	ldrh	r3, [r3, #10]
 80179b8:	461a      	mov	r2, r3
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	1ad3      	subs	r3, r2, r3
 80179be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	685a      	ldr	r2, [r3, #4]
 80179c4:	697b      	ldr	r3, [r7, #20]
 80179c6:	18d0      	adds	r0, r2, r3
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	685a      	ldr	r2, [r3, #4]
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	4413      	add	r3, r2
 80179d0:	68fa      	ldr	r2, [r7, #12]
 80179d2:	4619      	mov	r1, r3
 80179d4:	f00d fa69 	bl	8024eaa <memcpy>
    offset_to += len;
 80179d8:	697a      	ldr	r2, [r7, #20]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	4413      	add	r3, r2
 80179de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80179e0:	693a      	ldr	r2, [r7, #16]
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	4413      	add	r3, r2
 80179e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	895b      	ldrh	r3, [r3, #10]
 80179ec:	461a      	mov	r2, r3
 80179ee:	697b      	ldr	r3, [r7, #20]
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d906      	bls.n	8017a02 <pbuf_copy+0xb2>
 80179f4:	4b38      	ldr	r3, [pc, #224]	; (8017ad8 <pbuf_copy+0x188>)
 80179f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80179fa:	493a      	ldr	r1, [pc, #232]	; (8017ae4 <pbuf_copy+0x194>)
 80179fc:	4838      	ldr	r0, [pc, #224]	; (8017ae0 <pbuf_copy+0x190>)
 80179fe:	f00b ff31 	bl	8023864 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017a02:	683b      	ldr	r3, [r7, #0]
 8017a04:	895b      	ldrh	r3, [r3, #10]
 8017a06:	461a      	mov	r2, r3
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	4293      	cmp	r3, r2
 8017a0c:	d906      	bls.n	8017a1c <pbuf_copy+0xcc>
 8017a0e:	4b32      	ldr	r3, [pc, #200]	; (8017ad8 <pbuf_copy+0x188>)
 8017a10:	f240 32da 	movw	r2, #986	; 0x3da
 8017a14:	4934      	ldr	r1, [pc, #208]	; (8017ae8 <pbuf_copy+0x198>)
 8017a16:	4832      	ldr	r0, [pc, #200]	; (8017ae0 <pbuf_copy+0x190>)
 8017a18:	f00b ff24 	bl	8023864 <iprintf>
    if (offset_from >= p_from->len) {
 8017a1c:	683b      	ldr	r3, [r7, #0]
 8017a1e:	895b      	ldrh	r3, [r3, #10]
 8017a20:	461a      	mov	r2, r3
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d304      	bcc.n	8017a32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017a28:	2300      	movs	r3, #0
 8017a2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	895b      	ldrh	r3, [r3, #10]
 8017a36:	461a      	mov	r2, r3
 8017a38:	697b      	ldr	r3, [r7, #20]
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d114      	bne.n	8017a68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d10c      	bne.n	8017a68 <pbuf_copy+0x118>
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d009      	beq.n	8017a68 <pbuf_copy+0x118>
 8017a54:	4b20      	ldr	r3, [pc, #128]	; (8017ad8 <pbuf_copy+0x188>)
 8017a56:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8017a5a:	4924      	ldr	r1, [pc, #144]	; (8017aec <pbuf_copy+0x19c>)
 8017a5c:	4820      	ldr	r0, [pc, #128]	; (8017ae0 <pbuf_copy+0x190>)
 8017a5e:	f00b ff01 	bl	8023864 <iprintf>
 8017a62:	f06f 030f 	mvn.w	r3, #15
 8017a66:	e032      	b.n	8017ace <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d013      	beq.n	8017a96 <pbuf_copy+0x146>
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	895a      	ldrh	r2, [r3, #10]
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	891b      	ldrh	r3, [r3, #8]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d10d      	bne.n	8017a96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d009      	beq.n	8017a96 <pbuf_copy+0x146>
 8017a82:	4b15      	ldr	r3, [pc, #84]	; (8017ad8 <pbuf_copy+0x188>)
 8017a84:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8017a88:	4919      	ldr	r1, [pc, #100]	; (8017af0 <pbuf_copy+0x1a0>)
 8017a8a:	4815      	ldr	r0, [pc, #84]	; (8017ae0 <pbuf_copy+0x190>)
 8017a8c:	f00b feea 	bl	8023864 <iprintf>
 8017a90:	f06f 0305 	mvn.w	r3, #5
 8017a94:	e01b      	b.n	8017ace <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d013      	beq.n	8017ac4 <pbuf_copy+0x174>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	895a      	ldrh	r2, [r3, #10]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	891b      	ldrh	r3, [r3, #8]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d10d      	bne.n	8017ac4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d009      	beq.n	8017ac4 <pbuf_copy+0x174>
 8017ab0:	4b09      	ldr	r3, [pc, #36]	; (8017ad8 <pbuf_copy+0x188>)
 8017ab2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8017ab6:	490e      	ldr	r1, [pc, #56]	; (8017af0 <pbuf_copy+0x1a0>)
 8017ab8:	4809      	ldr	r0, [pc, #36]	; (8017ae0 <pbuf_copy+0x190>)
 8017aba:	f00b fed3 	bl	8023864 <iprintf>
 8017abe:	f06f 0305 	mvn.w	r3, #5
 8017ac2:	e004      	b.n	8017ace <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	f47f af61 	bne.w	801798e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017acc:	2300      	movs	r3, #0
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3718      	adds	r7, #24
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	08029ad0 	.word	0x08029ad0
 8017adc:	08029d78 	.word	0x08029d78
 8017ae0:	08029b30 	.word	0x08029b30
 8017ae4:	08029da8 	.word	0x08029da8
 8017ae8:	08029dc0 	.word	0x08029dc0
 8017aec:	08029ddc 	.word	0x08029ddc
 8017af0:	08029dec 	.word	0x08029dec

08017af4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b088      	sub	sp, #32
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	4611      	mov	r1, r2
 8017b00:	461a      	mov	r2, r3
 8017b02:	460b      	mov	r3, r1
 8017b04:	80fb      	strh	r3, [r7, #6]
 8017b06:	4613      	mov	r3, r2
 8017b08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017b12:	68fb      	ldr	r3, [r7, #12]
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d108      	bne.n	8017b2a <pbuf_copy_partial+0x36>
 8017b18:	4b2b      	ldr	r3, [pc, #172]	; (8017bc8 <pbuf_copy_partial+0xd4>)
 8017b1a:	f240 420a 	movw	r2, #1034	; 0x40a
 8017b1e:	492b      	ldr	r1, [pc, #172]	; (8017bcc <pbuf_copy_partial+0xd8>)
 8017b20:	482b      	ldr	r0, [pc, #172]	; (8017bd0 <pbuf_copy_partial+0xdc>)
 8017b22:	f00b fe9f 	bl	8023864 <iprintf>
 8017b26:	2300      	movs	r3, #0
 8017b28:	e04a      	b.n	8017bc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d108      	bne.n	8017b42 <pbuf_copy_partial+0x4e>
 8017b30:	4b25      	ldr	r3, [pc, #148]	; (8017bc8 <pbuf_copy_partial+0xd4>)
 8017b32:	f240 420b 	movw	r2, #1035	; 0x40b
 8017b36:	4927      	ldr	r1, [pc, #156]	; (8017bd4 <pbuf_copy_partial+0xe0>)
 8017b38:	4825      	ldr	r0, [pc, #148]	; (8017bd0 <pbuf_copy_partial+0xdc>)
 8017b3a:	f00b fe93 	bl	8023864 <iprintf>
 8017b3e:	2300      	movs	r3, #0
 8017b40:	e03e      	b.n	8017bc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	61fb      	str	r3, [r7, #28]
 8017b46:	e034      	b.n	8017bb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017b48:	88bb      	ldrh	r3, [r7, #4]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d00a      	beq.n	8017b64 <pbuf_copy_partial+0x70>
 8017b4e:	69fb      	ldr	r3, [r7, #28]
 8017b50:	895b      	ldrh	r3, [r3, #10]
 8017b52:	88ba      	ldrh	r2, [r7, #4]
 8017b54:	429a      	cmp	r2, r3
 8017b56:	d305      	bcc.n	8017b64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017b58:	69fb      	ldr	r3, [r7, #28]
 8017b5a:	895b      	ldrh	r3, [r3, #10]
 8017b5c:	88ba      	ldrh	r2, [r7, #4]
 8017b5e:	1ad3      	subs	r3, r2, r3
 8017b60:	80bb      	strh	r3, [r7, #4]
 8017b62:	e023      	b.n	8017bac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017b64:	69fb      	ldr	r3, [r7, #28]
 8017b66:	895a      	ldrh	r2, [r3, #10]
 8017b68:	88bb      	ldrh	r3, [r7, #4]
 8017b6a:	1ad3      	subs	r3, r2, r3
 8017b6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8017b6e:	8b3a      	ldrh	r2, [r7, #24]
 8017b70:	88fb      	ldrh	r3, [r7, #6]
 8017b72:	429a      	cmp	r2, r3
 8017b74:	d901      	bls.n	8017b7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017b76:	88fb      	ldrh	r3, [r7, #6]
 8017b78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017b7a:	8b7b      	ldrh	r3, [r7, #26]
 8017b7c:	68ba      	ldr	r2, [r7, #8]
 8017b7e:	18d0      	adds	r0, r2, r3
 8017b80:	69fb      	ldr	r3, [r7, #28]
 8017b82:	685a      	ldr	r2, [r3, #4]
 8017b84:	88bb      	ldrh	r3, [r7, #4]
 8017b86:	4413      	add	r3, r2
 8017b88:	8b3a      	ldrh	r2, [r7, #24]
 8017b8a:	4619      	mov	r1, r3
 8017b8c:	f00d f98d 	bl	8024eaa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017b90:	8afa      	ldrh	r2, [r7, #22]
 8017b92:	8b3b      	ldrh	r3, [r7, #24]
 8017b94:	4413      	add	r3, r2
 8017b96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017b98:	8b7a      	ldrh	r2, [r7, #26]
 8017b9a:	8b3b      	ldrh	r3, [r7, #24]
 8017b9c:	4413      	add	r3, r2
 8017b9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017ba0:	88fa      	ldrh	r2, [r7, #6]
 8017ba2:	8b3b      	ldrh	r3, [r7, #24]
 8017ba4:	1ad3      	subs	r3, r2, r3
 8017ba6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017bac:	69fb      	ldr	r3, [r7, #28]
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	61fb      	str	r3, [r7, #28]
 8017bb2:	88fb      	ldrh	r3, [r7, #6]
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d002      	beq.n	8017bbe <pbuf_copy_partial+0xca>
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d1c4      	bne.n	8017b48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017bbe:	8afb      	ldrh	r3, [r7, #22]
}
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	3720      	adds	r7, #32
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	08029ad0 	.word	0x08029ad0
 8017bcc:	08029e18 	.word	0x08029e18
 8017bd0:	08029b30 	.word	0x08029b30
 8017bd4:	08029e38 	.word	0x08029e38

08017bd8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8017bd8:	b480      	push	{r7}
 8017bda:	b087      	sub	sp, #28
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	60f8      	str	r0, [r7, #12]
 8017be0:	460b      	mov	r3, r1
 8017be2:	607a      	str	r2, [r7, #4]
 8017be4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8017be6:	897b      	ldrh	r3, [r7, #10]
 8017be8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8017bea:	68fb      	ldr	r3, [r7, #12]
 8017bec:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8017bee:	e007      	b.n	8017c00 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	895b      	ldrh	r3, [r3, #10]
 8017bf4:	8afa      	ldrh	r2, [r7, #22]
 8017bf6:	1ad3      	subs	r3, r2, r3
 8017bf8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8017bfa:	693b      	ldr	r3, [r7, #16]
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d004      	beq.n	8017c10 <pbuf_skip_const+0x38>
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	895b      	ldrh	r3, [r3, #10]
 8017c0a:	8afa      	ldrh	r2, [r7, #22]
 8017c0c:	429a      	cmp	r2, r3
 8017c0e:	d2ef      	bcs.n	8017bf0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d002      	beq.n	8017c1c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	8afa      	ldrh	r2, [r7, #22]
 8017c1a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8017c1c:	693b      	ldr	r3, [r7, #16]
}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	371c      	adds	r7, #28
 8017c22:	46bd      	mov	sp, r7
 8017c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c28:	4770      	bx	lr

08017c2a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8017c2a:	b580      	push	{r7, lr}
 8017c2c:	b086      	sub	sp, #24
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	60f8      	str	r0, [r7, #12]
 8017c32:	460b      	mov	r3, r1
 8017c34:	607a      	str	r2, [r7, #4]
 8017c36:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8017c38:	897b      	ldrh	r3, [r7, #10]
 8017c3a:	687a      	ldr	r2, [r7, #4]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	68f8      	ldr	r0, [r7, #12]
 8017c40:	f7ff ffca 	bl	8017bd8 <pbuf_skip_const>
 8017c44:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8017c46:	697b      	ldr	r3, [r7, #20]
}
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3718      	adds	r7, #24
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b088      	sub	sp, #32
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	60f8      	str	r0, [r7, #12]
 8017c58:	60b9      	str	r1, [r7, #8]
 8017c5a:	4613      	mov	r3, r2
 8017c5c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8017c5e:	88fb      	ldrh	r3, [r7, #6]
 8017c60:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8017c62:	2300      	movs	r3, #0
 8017c64:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d109      	bne.n	8017c80 <pbuf_take+0x30>
 8017c6c:	4b3a      	ldr	r3, [pc, #232]	; (8017d58 <pbuf_take+0x108>)
 8017c6e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8017c72:	493a      	ldr	r1, [pc, #232]	; (8017d5c <pbuf_take+0x10c>)
 8017c74:	483a      	ldr	r0, [pc, #232]	; (8017d60 <pbuf_take+0x110>)
 8017c76:	f00b fdf5 	bl	8023864 <iprintf>
 8017c7a:	f06f 030f 	mvn.w	r3, #15
 8017c7e:	e067      	b.n	8017d50 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d109      	bne.n	8017c9a <pbuf_take+0x4a>
 8017c86:	4b34      	ldr	r3, [pc, #208]	; (8017d58 <pbuf_take+0x108>)
 8017c88:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8017c8c:	4935      	ldr	r1, [pc, #212]	; (8017d64 <pbuf_take+0x114>)
 8017c8e:	4834      	ldr	r0, [pc, #208]	; (8017d60 <pbuf_take+0x110>)
 8017c90:	f00b fde8 	bl	8023864 <iprintf>
 8017c94:	f06f 030f 	mvn.w	r3, #15
 8017c98:	e05a      	b.n	8017d50 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8017c9a:	68fb      	ldr	r3, [r7, #12]
 8017c9c:	891b      	ldrh	r3, [r3, #8]
 8017c9e:	88fa      	ldrh	r2, [r7, #6]
 8017ca0:	429a      	cmp	r2, r3
 8017ca2:	d909      	bls.n	8017cb8 <pbuf_take+0x68>
 8017ca4:	4b2c      	ldr	r3, [pc, #176]	; (8017d58 <pbuf_take+0x108>)
 8017ca6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8017caa:	492f      	ldr	r1, [pc, #188]	; (8017d68 <pbuf_take+0x118>)
 8017cac:	482c      	ldr	r0, [pc, #176]	; (8017d60 <pbuf_take+0x110>)
 8017cae:	f00b fdd9 	bl	8023864 <iprintf>
 8017cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cb6:	e04b      	b.n	8017d50 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8017cb8:	68fb      	ldr	r3, [r7, #12]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d007      	beq.n	8017cce <pbuf_take+0x7e>
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d004      	beq.n	8017cce <pbuf_take+0x7e>
 8017cc4:	68fb      	ldr	r3, [r7, #12]
 8017cc6:	891b      	ldrh	r3, [r3, #8]
 8017cc8:	88fa      	ldrh	r2, [r7, #6]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d902      	bls.n	8017cd4 <pbuf_take+0x84>
    return ERR_ARG;
 8017cce:	f06f 030f 	mvn.w	r3, #15
 8017cd2:	e03d      	b.n	8017d50 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	61fb      	str	r3, [r7, #28]
 8017cd8:	e028      	b.n	8017d2c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d106      	bne.n	8017cee <pbuf_take+0x9e>
 8017ce0:	4b1d      	ldr	r3, [pc, #116]	; (8017d58 <pbuf_take+0x108>)
 8017ce2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8017ce6:	4921      	ldr	r1, [pc, #132]	; (8017d6c <pbuf_take+0x11c>)
 8017ce8:	481d      	ldr	r0, [pc, #116]	; (8017d60 <pbuf_take+0x110>)
 8017cea:	f00b fdbb 	bl	8023864 <iprintf>
    buf_copy_len = total_copy_len;
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8017cf2:	69fb      	ldr	r3, [r7, #28]
 8017cf4:	895b      	ldrh	r3, [r3, #10]
 8017cf6:	461a      	mov	r2, r3
 8017cf8:	69bb      	ldr	r3, [r7, #24]
 8017cfa:	4293      	cmp	r3, r2
 8017cfc:	d902      	bls.n	8017d04 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	895b      	ldrh	r3, [r3, #10]
 8017d02:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8017d04:	69fb      	ldr	r3, [r7, #28]
 8017d06:	6858      	ldr	r0, [r3, #4]
 8017d08:	68ba      	ldr	r2, [r7, #8]
 8017d0a:	693b      	ldr	r3, [r7, #16]
 8017d0c:	4413      	add	r3, r2
 8017d0e:	69ba      	ldr	r2, [r7, #24]
 8017d10:	4619      	mov	r1, r3
 8017d12:	f00d f8ca 	bl	8024eaa <memcpy>
    total_copy_len -= buf_copy_len;
 8017d16:	697a      	ldr	r2, [r7, #20]
 8017d18:	69bb      	ldr	r3, [r7, #24]
 8017d1a:	1ad3      	subs	r3, r2, r3
 8017d1c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8017d1e:	693a      	ldr	r2, [r7, #16]
 8017d20:	69bb      	ldr	r3, [r7, #24]
 8017d22:	4413      	add	r3, r2
 8017d24:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017d26:	69fb      	ldr	r3, [r7, #28]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	61fb      	str	r3, [r7, #28]
 8017d2c:	697b      	ldr	r3, [r7, #20]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d1d3      	bne.n	8017cda <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8017d32:	697b      	ldr	r3, [r7, #20]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d103      	bne.n	8017d40 <pbuf_take+0xf0>
 8017d38:	88fb      	ldrh	r3, [r7, #6]
 8017d3a:	693a      	ldr	r2, [r7, #16]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d006      	beq.n	8017d4e <pbuf_take+0xfe>
 8017d40:	4b05      	ldr	r3, [pc, #20]	; (8017d58 <pbuf_take+0x108>)
 8017d42:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8017d46:	490a      	ldr	r1, [pc, #40]	; (8017d70 <pbuf_take+0x120>)
 8017d48:	4805      	ldr	r0, [pc, #20]	; (8017d60 <pbuf_take+0x110>)
 8017d4a:	f00b fd8b 	bl	8023864 <iprintf>
  return ERR_OK;
 8017d4e:	2300      	movs	r3, #0
}
 8017d50:	4618      	mov	r0, r3
 8017d52:	3720      	adds	r7, #32
 8017d54:	46bd      	mov	sp, r7
 8017d56:	bd80      	pop	{r7, pc}
 8017d58:	08029ad0 	.word	0x08029ad0
 8017d5c:	08029ea8 	.word	0x08029ea8
 8017d60:	08029b30 	.word	0x08029b30
 8017d64:	08029ec0 	.word	0x08029ec0
 8017d68:	08029edc 	.word	0x08029edc
 8017d6c:	08029efc 	.word	0x08029efc
 8017d70:	08029f14 	.word	0x08029f14

08017d74 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b088      	sub	sp, #32
 8017d78:	af00      	add	r7, sp, #0
 8017d7a:	60f8      	str	r0, [r7, #12]
 8017d7c:	60b9      	str	r1, [r7, #8]
 8017d7e:	4611      	mov	r1, r2
 8017d80:	461a      	mov	r2, r3
 8017d82:	460b      	mov	r3, r1
 8017d84:	80fb      	strh	r3, [r7, #6]
 8017d86:	4613      	mov	r3, r2
 8017d88:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8017d8a:	f107 0210 	add.w	r2, r7, #16
 8017d8e:	88bb      	ldrh	r3, [r7, #4]
 8017d90:	4619      	mov	r1, r3
 8017d92:	68f8      	ldr	r0, [r7, #12]
 8017d94:	f7ff ff49 	bl	8017c2a <pbuf_skip>
 8017d98:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8017d9a:	69fb      	ldr	r3, [r7, #28]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d047      	beq.n	8017e30 <pbuf_take_at+0xbc>
 8017da0:	69fb      	ldr	r3, [r7, #28]
 8017da2:	891b      	ldrh	r3, [r3, #8]
 8017da4:	461a      	mov	r2, r3
 8017da6:	8a3b      	ldrh	r3, [r7, #16]
 8017da8:	4619      	mov	r1, r3
 8017daa:	88fb      	ldrh	r3, [r7, #6]
 8017dac:	440b      	add	r3, r1
 8017dae:	429a      	cmp	r2, r3
 8017db0:	db3e      	blt.n	8017e30 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8017db2:	88fb      	ldrh	r3, [r7, #6]
 8017db4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8017dba:	69fb      	ldr	r3, [r7, #28]
 8017dbc:	895a      	ldrh	r2, [r3, #10]
 8017dbe:	8a3b      	ldrh	r3, [r7, #16]
 8017dc0:	429a      	cmp	r2, r3
 8017dc2:	d806      	bhi.n	8017dd2 <pbuf_take_at+0x5e>
 8017dc4:	4b1d      	ldr	r3, [pc, #116]	; (8017e3c <pbuf_take_at+0xc8>)
 8017dc6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017dca:	491d      	ldr	r1, [pc, #116]	; (8017e40 <pbuf_take_at+0xcc>)
 8017dcc:	481d      	ldr	r0, [pc, #116]	; (8017e44 <pbuf_take_at+0xd0>)
 8017dce:	f00b fd49 	bl	8023864 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8017dd2:	69fb      	ldr	r3, [r7, #28]
 8017dd4:	895b      	ldrh	r3, [r3, #10]
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	8a3b      	ldrh	r3, [r7, #16]
 8017dda:	1ad2      	subs	r2, r2, r3
 8017ddc:	88fb      	ldrh	r3, [r7, #6]
 8017dde:	429a      	cmp	r2, r3
 8017de0:	da05      	bge.n	8017dee <pbuf_take_at+0x7a>
 8017de2:	69fb      	ldr	r3, [r7, #28]
 8017de4:	895a      	ldrh	r2, [r3, #10]
 8017de6:	8a3b      	ldrh	r3, [r7, #16]
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	e000      	b.n	8017df0 <pbuf_take_at+0x7c>
 8017dee:	88fb      	ldrh	r3, [r7, #6]
 8017df0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8017df2:	69fb      	ldr	r3, [r7, #28]
 8017df4:	685b      	ldr	r3, [r3, #4]
 8017df6:	8a3a      	ldrh	r2, [r7, #16]
 8017df8:	4413      	add	r3, r2
 8017dfa:	8a7a      	ldrh	r2, [r7, #18]
 8017dfc:	68b9      	ldr	r1, [r7, #8]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f00d f853 	bl	8024eaa <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8017e04:	8b7a      	ldrh	r2, [r7, #26]
 8017e06:	8a7b      	ldrh	r3, [r7, #18]
 8017e08:	1ad3      	subs	r3, r2, r3
 8017e0a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8017e0c:	8a7b      	ldrh	r3, [r7, #18]
 8017e0e:	697a      	ldr	r2, [r7, #20]
 8017e10:	4413      	add	r3, r2
 8017e12:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8017e14:	8b7b      	ldrh	r3, [r7, #26]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d008      	beq.n	8017e2c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	8b7a      	ldrh	r2, [r7, #26]
 8017e20:	6979      	ldr	r1, [r7, #20]
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7ff ff14 	bl	8017c50 <pbuf_take>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	e003      	b.n	8017e34 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	e001      	b.n	8017e34 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8017e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017e34:	4618      	mov	r0, r3
 8017e36:	3720      	adds	r7, #32
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	bd80      	pop	{r7, pc}
 8017e3c:	08029ad0 	.word	0x08029ad0
 8017e40:	08029f2c 	.word	0x08029f2c
 8017e44:	08029b30 	.word	0x08029b30

08017e48 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	4603      	mov	r3, r0
 8017e50:	603a      	str	r2, [r7, #0]
 8017e52:	71fb      	strb	r3, [r7, #7]
 8017e54:	460b      	mov	r3, r1
 8017e56:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017e58:	683b      	ldr	r3, [r7, #0]
 8017e5a:	8919      	ldrh	r1, [r3, #8]
 8017e5c:	88ba      	ldrh	r2, [r7, #4]
 8017e5e:	79fb      	ldrb	r3, [r7, #7]
 8017e60:	4618      	mov	r0, r3
 8017e62:	f7ff f95d 	bl	8017120 <pbuf_alloc>
 8017e66:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d101      	bne.n	8017e72 <pbuf_clone+0x2a>
    return NULL;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e011      	b.n	8017e96 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017e72:	6839      	ldr	r1, [r7, #0]
 8017e74:	68f8      	ldr	r0, [r7, #12]
 8017e76:	f7ff fd6b 	bl	8017950 <pbuf_copy>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017e7e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d006      	beq.n	8017e94 <pbuf_clone+0x4c>
 8017e86:	4b06      	ldr	r3, [pc, #24]	; (8017ea0 <pbuf_clone+0x58>)
 8017e88:	f240 5224 	movw	r2, #1316	; 0x524
 8017e8c:	4905      	ldr	r1, [pc, #20]	; (8017ea4 <pbuf_clone+0x5c>)
 8017e8e:	4806      	ldr	r0, [pc, #24]	; (8017ea8 <pbuf_clone+0x60>)
 8017e90:	f00b fce8 	bl	8023864 <iprintf>
  return q;
 8017e94:	68fb      	ldr	r3, [r7, #12]
}
 8017e96:	4618      	mov	r0, r3
 8017e98:	3710      	adds	r7, #16
 8017e9a:	46bd      	mov	sp, r7
 8017e9c:	bd80      	pop	{r7, pc}
 8017e9e:	bf00      	nop
 8017ea0:	08029ad0 	.word	0x08029ad0
 8017ea4:	08029f44 	.word	0x08029f44
 8017ea8:	08029b30 	.word	0x08029b30

08017eac <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	807b      	strh	r3, [r7, #2]
 8017eb8:	4613      	mov	r3, r2
 8017eba:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8017ebc:	f107 020a 	add.w	r2, r7, #10
 8017ec0:	887b      	ldrh	r3, [r7, #2]
 8017ec2:	4619      	mov	r1, r3
 8017ec4:	6878      	ldr	r0, [r7, #4]
 8017ec6:	f7ff feb0 	bl	8017c2a <pbuf_skip>
 8017eca:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d00a      	beq.n	8017ee8 <pbuf_put_at+0x3c>
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	895a      	ldrh	r2, [r3, #10]
 8017ed6:	897b      	ldrh	r3, [r7, #10]
 8017ed8:	429a      	cmp	r2, r3
 8017eda:	d905      	bls.n	8017ee8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	685b      	ldr	r3, [r3, #4]
 8017ee0:	897a      	ldrh	r2, [r7, #10]
 8017ee2:	4413      	add	r3, r2
 8017ee4:	787a      	ldrb	r2, [r7, #1]
 8017ee6:	701a      	strb	r2, [r3, #0]
  }
}
 8017ee8:	bf00      	nop
 8017eea:	3710      	adds	r7, #16
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017ef4:	f00a feba 	bl	8022c6c <rand>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017f06:	b29a      	uxth	r2, r3
 8017f08:	4b01      	ldr	r3, [pc, #4]	; (8017f10 <tcp_init+0x20>)
 8017f0a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017f0c:	bf00      	nop
 8017f0e:	bd80      	pop	{r7, pc}
 8017f10:	2000002c 	.word	0x2000002c

08017f14 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b082      	sub	sp, #8
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	7d1b      	ldrb	r3, [r3, #20]
 8017f20:	2b01      	cmp	r3, #1
 8017f22:	d105      	bne.n	8017f30 <tcp_free+0x1c>
 8017f24:	4b06      	ldr	r3, [pc, #24]	; (8017f40 <tcp_free+0x2c>)
 8017f26:	22d4      	movs	r2, #212	; 0xd4
 8017f28:	4906      	ldr	r1, [pc, #24]	; (8017f44 <tcp_free+0x30>)
 8017f2a:	4807      	ldr	r0, [pc, #28]	; (8017f48 <tcp_free+0x34>)
 8017f2c:	f00b fc9a 	bl	8023864 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8017f30:	6879      	ldr	r1, [r7, #4]
 8017f32:	2001      	movs	r0, #1
 8017f34:	f7fe fd34 	bl	80169a0 <memp_free>
}
 8017f38:	bf00      	nop
 8017f3a:	3708      	adds	r7, #8
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	08029fd0 	.word	0x08029fd0
 8017f44:	0802a000 	.word	0x0802a000
 8017f48:	0802a014 	.word	0x0802a014

08017f4c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	7d1b      	ldrb	r3, [r3, #20]
 8017f58:	2b01      	cmp	r3, #1
 8017f5a:	d105      	bne.n	8017f68 <tcp_free_listen+0x1c>
 8017f5c:	4b06      	ldr	r3, [pc, #24]	; (8017f78 <tcp_free_listen+0x2c>)
 8017f5e:	22df      	movs	r2, #223	; 0xdf
 8017f60:	4906      	ldr	r1, [pc, #24]	; (8017f7c <tcp_free_listen+0x30>)
 8017f62:	4807      	ldr	r0, [pc, #28]	; (8017f80 <tcp_free_listen+0x34>)
 8017f64:	f00b fc7e 	bl	8023864 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017f68:	6879      	ldr	r1, [r7, #4]
 8017f6a:	2002      	movs	r0, #2
 8017f6c:	f7fe fd18 	bl	80169a0 <memp_free>
}
 8017f70:	bf00      	nop
 8017f72:	3708      	adds	r7, #8
 8017f74:	46bd      	mov	sp, r7
 8017f76:	bd80      	pop	{r7, pc}
 8017f78:	08029fd0 	.word	0x08029fd0
 8017f7c:	0802a03c 	.word	0x0802a03c
 8017f80:	0802a014 	.word	0x0802a014

08017f84 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017f88:	f001 f8dc 	bl	8019144 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017f8c:	4b07      	ldr	r3, [pc, #28]	; (8017fac <tcp_tmr+0x28>)
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	3301      	adds	r3, #1
 8017f92:	b2da      	uxtb	r2, r3
 8017f94:	4b05      	ldr	r3, [pc, #20]	; (8017fac <tcp_tmr+0x28>)
 8017f96:	701a      	strb	r2, [r3, #0]
 8017f98:	4b04      	ldr	r3, [pc, #16]	; (8017fac <tcp_tmr+0x28>)
 8017f9a:	781b      	ldrb	r3, [r3, #0]
 8017f9c:	f003 0301 	and.w	r3, r3, #1
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d001      	beq.n	8017fa8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017fa4:	f000 fd8c 	bl	8018ac0 <tcp_slowtmr>
  }
}
 8017fa8:	bf00      	nop
 8017faa:	bd80      	pop	{r7, pc}
 8017fac:	20015fcd 	.word	0x20015fcd

08017fb0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8017fb0:	b580      	push	{r7, lr}
 8017fb2:	b084      	sub	sp, #16
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d105      	bne.n	8017fcc <tcp_remove_listener+0x1c>
 8017fc0:	4b0d      	ldr	r3, [pc, #52]	; (8017ff8 <tcp_remove_listener+0x48>)
 8017fc2:	22ff      	movs	r2, #255	; 0xff
 8017fc4:	490d      	ldr	r1, [pc, #52]	; (8017ffc <tcp_remove_listener+0x4c>)
 8017fc6:	480e      	ldr	r0, [pc, #56]	; (8018000 <tcp_remove_listener+0x50>)
 8017fc8:	f00b fc4c 	bl	8023864 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	60fb      	str	r3, [r7, #12]
 8017fd0:	e00a      	b.n	8017fe8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017fd6:	683a      	ldr	r2, [r7, #0]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	d102      	bne.n	8017fe2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	68db      	ldr	r3, [r3, #12]
 8017fe6:	60fb      	str	r3, [r7, #12]
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d1f1      	bne.n	8017fd2 <tcp_remove_listener+0x22>
    }
  }
}
 8017fee:	bf00      	nop
 8017ff0:	bf00      	nop
 8017ff2:	3710      	adds	r7, #16
 8017ff4:	46bd      	mov	sp, r7
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	08029fd0 	.word	0x08029fd0
 8017ffc:	0802a058 	.word	0x0802a058
 8018000:	0802a014 	.word	0x0802a014

08018004 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b084      	sub	sp, #16
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d106      	bne.n	8018020 <tcp_listen_closed+0x1c>
 8018012:	4b14      	ldr	r3, [pc, #80]	; (8018064 <tcp_listen_closed+0x60>)
 8018014:	f240 1211 	movw	r2, #273	; 0x111
 8018018:	4913      	ldr	r1, [pc, #76]	; (8018068 <tcp_listen_closed+0x64>)
 801801a:	4814      	ldr	r0, [pc, #80]	; (801806c <tcp_listen_closed+0x68>)
 801801c:	f00b fc22 	bl	8023864 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	7d1b      	ldrb	r3, [r3, #20]
 8018024:	2b01      	cmp	r3, #1
 8018026:	d006      	beq.n	8018036 <tcp_listen_closed+0x32>
 8018028:	4b0e      	ldr	r3, [pc, #56]	; (8018064 <tcp_listen_closed+0x60>)
 801802a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801802e:	4910      	ldr	r1, [pc, #64]	; (8018070 <tcp_listen_closed+0x6c>)
 8018030:	480e      	ldr	r0, [pc, #56]	; (801806c <tcp_listen_closed+0x68>)
 8018032:	f00b fc17 	bl	8023864 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018036:	2301      	movs	r3, #1
 8018038:	60fb      	str	r3, [r7, #12]
 801803a:	e00b      	b.n	8018054 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801803c:	4a0d      	ldr	r2, [pc, #52]	; (8018074 <tcp_listen_closed+0x70>)
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	6879      	ldr	r1, [r7, #4]
 8018048:	4618      	mov	r0, r3
 801804a:	f7ff ffb1 	bl	8017fb0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	3301      	adds	r3, #1
 8018052:	60fb      	str	r3, [r7, #12]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	2b03      	cmp	r3, #3
 8018058:	d9f0      	bls.n	801803c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801805a:	bf00      	nop
 801805c:	bf00      	nop
 801805e:	3710      	adds	r7, #16
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}
 8018064:	08029fd0 	.word	0x08029fd0
 8018068:	0802a080 	.word	0x0802a080
 801806c:	0802a014 	.word	0x0802a014
 8018070:	0802a08c 	.word	0x0802a08c
 8018074:	0802c1b4 	.word	0x0802c1b4

08018078 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018078:	b5b0      	push	{r4, r5, r7, lr}
 801807a:	b088      	sub	sp, #32
 801807c:	af04      	add	r7, sp, #16
 801807e:	6078      	str	r0, [r7, #4]
 8018080:	460b      	mov	r3, r1
 8018082:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d106      	bne.n	8018098 <tcp_close_shutdown+0x20>
 801808a:	4b63      	ldr	r3, [pc, #396]	; (8018218 <tcp_close_shutdown+0x1a0>)
 801808c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018090:	4962      	ldr	r1, [pc, #392]	; (801821c <tcp_close_shutdown+0x1a4>)
 8018092:	4863      	ldr	r0, [pc, #396]	; (8018220 <tcp_close_shutdown+0x1a8>)
 8018094:	f00b fbe6 	bl	8023864 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018098:	78fb      	ldrb	r3, [r7, #3]
 801809a:	2b00      	cmp	r3, #0
 801809c:	d066      	beq.n	801816c <tcp_close_shutdown+0xf4>
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	7d1b      	ldrb	r3, [r3, #20]
 80180a2:	2b04      	cmp	r3, #4
 80180a4:	d003      	beq.n	80180ae <tcp_close_shutdown+0x36>
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	7d1b      	ldrb	r3, [r3, #20]
 80180aa:	2b07      	cmp	r3, #7
 80180ac:	d15e      	bne.n	801816c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d104      	bne.n	80180c0 <tcp_close_shutdown+0x48>
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80180ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80180be:	d055      	beq.n	801816c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	8b5b      	ldrh	r3, [r3, #26]
 80180c4:	f003 0310 	and.w	r3, r3, #16
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d106      	bne.n	80180da <tcp_close_shutdown+0x62>
 80180cc:	4b52      	ldr	r3, [pc, #328]	; (8018218 <tcp_close_shutdown+0x1a0>)
 80180ce:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80180d2:	4954      	ldr	r1, [pc, #336]	; (8018224 <tcp_close_shutdown+0x1ac>)
 80180d4:	4852      	ldr	r0, [pc, #328]	; (8018220 <tcp_close_shutdown+0x1a8>)
 80180d6:	f00b fbc5 	bl	8023864 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80180e2:	687d      	ldr	r5, [r7, #4]
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	3304      	adds	r3, #4
 80180e8:	687a      	ldr	r2, [r7, #4]
 80180ea:	8ad2      	ldrh	r2, [r2, #22]
 80180ec:	6879      	ldr	r1, [r7, #4]
 80180ee:	8b09      	ldrh	r1, [r1, #24]
 80180f0:	9102      	str	r1, [sp, #8]
 80180f2:	9201      	str	r2, [sp, #4]
 80180f4:	9300      	str	r3, [sp, #0]
 80180f6:	462b      	mov	r3, r5
 80180f8:	4622      	mov	r2, r4
 80180fa:	4601      	mov	r1, r0
 80180fc:	6878      	ldr	r0, [r7, #4]
 80180fe:	f005 fe09 	bl	801dd14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8018102:	6878      	ldr	r0, [r7, #4]
 8018104:	f001 fbd8 	bl	80198b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018108:	4b47      	ldr	r3, [pc, #284]	; (8018228 <tcp_close_shutdown+0x1b0>)
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	687a      	ldr	r2, [r7, #4]
 801810e:	429a      	cmp	r2, r3
 8018110:	d105      	bne.n	801811e <tcp_close_shutdown+0xa6>
 8018112:	4b45      	ldr	r3, [pc, #276]	; (8018228 <tcp_close_shutdown+0x1b0>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	68db      	ldr	r3, [r3, #12]
 8018118:	4a43      	ldr	r2, [pc, #268]	; (8018228 <tcp_close_shutdown+0x1b0>)
 801811a:	6013      	str	r3, [r2, #0]
 801811c:	e013      	b.n	8018146 <tcp_close_shutdown+0xce>
 801811e:	4b42      	ldr	r3, [pc, #264]	; (8018228 <tcp_close_shutdown+0x1b0>)
 8018120:	681b      	ldr	r3, [r3, #0]
 8018122:	60fb      	str	r3, [r7, #12]
 8018124:	e00c      	b.n	8018140 <tcp_close_shutdown+0xc8>
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	68db      	ldr	r3, [r3, #12]
 801812a:	687a      	ldr	r2, [r7, #4]
 801812c:	429a      	cmp	r2, r3
 801812e:	d104      	bne.n	801813a <tcp_close_shutdown+0xc2>
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	68da      	ldr	r2, [r3, #12]
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	60da      	str	r2, [r3, #12]
 8018138:	e005      	b.n	8018146 <tcp_close_shutdown+0xce>
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	68db      	ldr	r3, [r3, #12]
 801813e:	60fb      	str	r3, [r7, #12]
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	2b00      	cmp	r3, #0
 8018144:	d1ef      	bne.n	8018126 <tcp_close_shutdown+0xae>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	2200      	movs	r2, #0
 801814a:	60da      	str	r2, [r3, #12]
 801814c:	4b37      	ldr	r3, [pc, #220]	; (801822c <tcp_close_shutdown+0x1b4>)
 801814e:	2201      	movs	r2, #1
 8018150:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018152:	4b37      	ldr	r3, [pc, #220]	; (8018230 <tcp_close_shutdown+0x1b8>)
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	687a      	ldr	r2, [r7, #4]
 8018158:	429a      	cmp	r2, r3
 801815a:	d102      	bne.n	8018162 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801815c:	f004 f87e 	bl	801c25c <tcp_trigger_input_pcb_close>
 8018160:	e002      	b.n	8018168 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8018162:	6878      	ldr	r0, [r7, #4]
 8018164:	f7ff fed6 	bl	8017f14 <tcp_free>
      }
      return ERR_OK;
 8018168:	2300      	movs	r3, #0
 801816a:	e050      	b.n	801820e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	7d1b      	ldrb	r3, [r3, #20]
 8018170:	2b02      	cmp	r3, #2
 8018172:	d03b      	beq.n	80181ec <tcp_close_shutdown+0x174>
 8018174:	2b02      	cmp	r3, #2
 8018176:	dc44      	bgt.n	8018202 <tcp_close_shutdown+0x18a>
 8018178:	2b00      	cmp	r3, #0
 801817a:	d002      	beq.n	8018182 <tcp_close_shutdown+0x10a>
 801817c:	2b01      	cmp	r3, #1
 801817e:	d02a      	beq.n	80181d6 <tcp_close_shutdown+0x15e>
 8018180:	e03f      	b.n	8018202 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	8adb      	ldrh	r3, [r3, #22]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d021      	beq.n	80181ce <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801818a:	4b2a      	ldr	r3, [pc, #168]	; (8018234 <tcp_close_shutdown+0x1bc>)
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	429a      	cmp	r2, r3
 8018192:	d105      	bne.n	80181a0 <tcp_close_shutdown+0x128>
 8018194:	4b27      	ldr	r3, [pc, #156]	; (8018234 <tcp_close_shutdown+0x1bc>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	68db      	ldr	r3, [r3, #12]
 801819a:	4a26      	ldr	r2, [pc, #152]	; (8018234 <tcp_close_shutdown+0x1bc>)
 801819c:	6013      	str	r3, [r2, #0]
 801819e:	e013      	b.n	80181c8 <tcp_close_shutdown+0x150>
 80181a0:	4b24      	ldr	r3, [pc, #144]	; (8018234 <tcp_close_shutdown+0x1bc>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	60bb      	str	r3, [r7, #8]
 80181a6:	e00c      	b.n	80181c2 <tcp_close_shutdown+0x14a>
 80181a8:	68bb      	ldr	r3, [r7, #8]
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d104      	bne.n	80181bc <tcp_close_shutdown+0x144>
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	68da      	ldr	r2, [r3, #12]
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	60da      	str	r2, [r3, #12]
 80181ba:	e005      	b.n	80181c8 <tcp_close_shutdown+0x150>
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	68db      	ldr	r3, [r3, #12]
 80181c0:	60bb      	str	r3, [r7, #8]
 80181c2:	68bb      	ldr	r3, [r7, #8]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d1ef      	bne.n	80181a8 <tcp_close_shutdown+0x130>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	2200      	movs	r2, #0
 80181cc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80181ce:	6878      	ldr	r0, [r7, #4]
 80181d0:	f7ff fea0 	bl	8017f14 <tcp_free>
      break;
 80181d4:	e01a      	b.n	801820c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80181d6:	6878      	ldr	r0, [r7, #4]
 80181d8:	f7ff ff14 	bl	8018004 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	4816      	ldr	r0, [pc, #88]	; (8018238 <tcp_close_shutdown+0x1c0>)
 80181e0:	f001 fbba 	bl	8019958 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80181e4:	6878      	ldr	r0, [r7, #4]
 80181e6:	f7ff feb1 	bl	8017f4c <tcp_free_listen>
      break;
 80181ea:	e00f      	b.n	801820c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80181ec:	6879      	ldr	r1, [r7, #4]
 80181ee:	480e      	ldr	r0, [pc, #56]	; (8018228 <tcp_close_shutdown+0x1b0>)
 80181f0:	f001 fbb2 	bl	8019958 <tcp_pcb_remove>
 80181f4:	4b0d      	ldr	r3, [pc, #52]	; (801822c <tcp_close_shutdown+0x1b4>)
 80181f6:	2201      	movs	r2, #1
 80181f8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	f7ff fe8a 	bl	8017f14 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8018200:	e004      	b.n	801820c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f000 f81a 	bl	801823c <tcp_close_shutdown_fin>
 8018208:	4603      	mov	r3, r0
 801820a:	e000      	b.n	801820e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801820c:	2300      	movs	r3, #0
}
 801820e:	4618      	mov	r0, r3
 8018210:	3710      	adds	r7, #16
 8018212:	46bd      	mov	sp, r7
 8018214:	bdb0      	pop	{r4, r5, r7, pc}
 8018216:	bf00      	nop
 8018218:	08029fd0 	.word	0x08029fd0
 801821c:	0802a0a4 	.word	0x0802a0a4
 8018220:	0802a014 	.word	0x0802a014
 8018224:	0802a0c4 	.word	0x0802a0c4
 8018228:	20015fc4 	.word	0x20015fc4
 801822c:	20015fcc 	.word	0x20015fcc
 8018230:	20016004 	.word	0x20016004
 8018234:	20015fbc 	.word	0x20015fbc
 8018238:	20015fc0 	.word	0x20015fc0

0801823c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801823c:	b580      	push	{r7, lr}
 801823e:	b084      	sub	sp, #16
 8018240:	af00      	add	r7, sp, #0
 8018242:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <tcp_close_shutdown_fin+0x1c>
 801824a:	4b2e      	ldr	r3, [pc, #184]	; (8018304 <tcp_close_shutdown_fin+0xc8>)
 801824c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8018250:	492d      	ldr	r1, [pc, #180]	; (8018308 <tcp_close_shutdown_fin+0xcc>)
 8018252:	482e      	ldr	r0, [pc, #184]	; (801830c <tcp_close_shutdown_fin+0xd0>)
 8018254:	f00b fb06 	bl	8023864 <iprintf>

  switch (pcb->state) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	7d1b      	ldrb	r3, [r3, #20]
 801825c:	2b07      	cmp	r3, #7
 801825e:	d020      	beq.n	80182a2 <tcp_close_shutdown_fin+0x66>
 8018260:	2b07      	cmp	r3, #7
 8018262:	dc2b      	bgt.n	80182bc <tcp_close_shutdown_fin+0x80>
 8018264:	2b03      	cmp	r3, #3
 8018266:	d002      	beq.n	801826e <tcp_close_shutdown_fin+0x32>
 8018268:	2b04      	cmp	r3, #4
 801826a:	d00d      	beq.n	8018288 <tcp_close_shutdown_fin+0x4c>
 801826c:	e026      	b.n	80182bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801826e:	6878      	ldr	r0, [r7, #4]
 8018270:	f004 fe5e 	bl	801cf30 <tcp_send_fin>
 8018274:	4603      	mov	r3, r0
 8018276:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d11f      	bne.n	80182c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2205      	movs	r2, #5
 8018284:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018286:	e01b      	b.n	80182c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8018288:	6878      	ldr	r0, [r7, #4]
 801828a:	f004 fe51 	bl	801cf30 <tcp_send_fin>
 801828e:	4603      	mov	r3, r0
 8018290:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8018292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d114      	bne.n	80182c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	2205      	movs	r2, #5
 801829e:	751a      	strb	r2, [r3, #20]
      }
      break;
 80182a0:	e010      	b.n	80182c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	f004 fe44 	bl	801cf30 <tcp_send_fin>
 80182a8:	4603      	mov	r3, r0
 80182aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80182ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d109      	bne.n	80182c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2209      	movs	r2, #9
 80182b8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80182ba:	e005      	b.n	80182c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80182bc:	2300      	movs	r3, #0
 80182be:	e01c      	b.n	80182fa <tcp_close_shutdown_fin+0xbe>
      break;
 80182c0:	bf00      	nop
 80182c2:	e002      	b.n	80182ca <tcp_close_shutdown_fin+0x8e>
      break;
 80182c4:	bf00      	nop
 80182c6:	e000      	b.n	80182ca <tcp_close_shutdown_fin+0x8e>
      break;
 80182c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80182ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d103      	bne.n	80182da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80182d2:	6878      	ldr	r0, [r7, #4]
 80182d4:	f004 ff6a 	bl	801d1ac <tcp_output>
 80182d8:	e00d      	b.n	80182f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80182da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80182de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80182e2:	d108      	bne.n	80182f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	8b5b      	ldrh	r3, [r3, #26]
 80182e8:	f043 0308 	orr.w	r3, r3, #8
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80182f2:	2300      	movs	r3, #0
 80182f4:	e001      	b.n	80182fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80182f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3710      	adds	r7, #16
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	08029fd0 	.word	0x08029fd0
 8018308:	0802a080 	.word	0x0802a080
 801830c:	0802a014 	.word	0x0802a014

08018310 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8018310:	b580      	push	{r7, lr}
 8018312:	b082      	sub	sp, #8
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d109      	bne.n	8018332 <tcp_close+0x22>
 801831e:	4b0f      	ldr	r3, [pc, #60]	; (801835c <tcp_close+0x4c>)
 8018320:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018324:	490e      	ldr	r1, [pc, #56]	; (8018360 <tcp_close+0x50>)
 8018326:	480f      	ldr	r0, [pc, #60]	; (8018364 <tcp_close+0x54>)
 8018328:	f00b fa9c 	bl	8023864 <iprintf>
 801832c:	f06f 030f 	mvn.w	r3, #15
 8018330:	e00f      	b.n	8018352 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	7d1b      	ldrb	r3, [r3, #20]
 8018336:	2b01      	cmp	r3, #1
 8018338:	d006      	beq.n	8018348 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	8b5b      	ldrh	r3, [r3, #26]
 801833e:	f043 0310 	orr.w	r3, r3, #16
 8018342:	b29a      	uxth	r2, r3
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8018348:	2101      	movs	r1, #1
 801834a:	6878      	ldr	r0, [r7, #4]
 801834c:	f7ff fe94 	bl	8018078 <tcp_close_shutdown>
 8018350:	4603      	mov	r3, r0
}
 8018352:	4618      	mov	r0, r3
 8018354:	3708      	adds	r7, #8
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	08029fd0 	.word	0x08029fd0
 8018360:	0802a0e0 	.word	0x0802a0e0
 8018364:	0802a014 	.word	0x0802a014

08018368 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b084      	sub	sp, #16
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d109      	bne.n	801838e <tcp_shutdown+0x26>
 801837a:	4b26      	ldr	r3, [pc, #152]	; (8018414 <tcp_shutdown+0xac>)
 801837c:	f240 2207 	movw	r2, #519	; 0x207
 8018380:	4925      	ldr	r1, [pc, #148]	; (8018418 <tcp_shutdown+0xb0>)
 8018382:	4826      	ldr	r0, [pc, #152]	; (801841c <tcp_shutdown+0xb4>)
 8018384:	f00b fa6e 	bl	8023864 <iprintf>
 8018388:	f06f 030f 	mvn.w	r3, #15
 801838c:	e03d      	b.n	801840a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	7d1b      	ldrb	r3, [r3, #20]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d102      	bne.n	801839c <tcp_shutdown+0x34>
    return ERR_CONN;
 8018396:	f06f 030a 	mvn.w	r3, #10
 801839a:	e036      	b.n	801840a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	2b00      	cmp	r3, #0
 80183a0:	d01b      	beq.n	80183da <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	8b5b      	ldrh	r3, [r3, #26]
 80183a6:	f043 0310 	orr.w	r3, r3, #16
 80183aa:	b29a      	uxth	r2, r3
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d005      	beq.n	80183c2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80183b6:	2101      	movs	r1, #1
 80183b8:	68f8      	ldr	r0, [r7, #12]
 80183ba:	f7ff fe5d 	bl	8018078 <tcp_close_shutdown>
 80183be:	4603      	mov	r3, r0
 80183c0:	e023      	b.n	801840a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d007      	beq.n	80183da <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80183ce:	4618      	mov	r0, r3
 80183d0:	f7ff f98a 	bl	80176e8 <pbuf_free>
      pcb->refused_data = NULL;
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	2200      	movs	r2, #0
 80183d8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d013      	beq.n	8018408 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	7d1b      	ldrb	r3, [r3, #20]
 80183e4:	2b04      	cmp	r3, #4
 80183e6:	dc02      	bgt.n	80183ee <tcp_shutdown+0x86>
 80183e8:	2b03      	cmp	r3, #3
 80183ea:	da02      	bge.n	80183f2 <tcp_shutdown+0x8a>
 80183ec:	e009      	b.n	8018402 <tcp_shutdown+0x9a>
 80183ee:	2b07      	cmp	r3, #7
 80183f0:	d107      	bne.n	8018402 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	b2db      	uxtb	r3, r3
 80183f6:	4619      	mov	r1, r3
 80183f8:	68f8      	ldr	r0, [r7, #12]
 80183fa:	f7ff fe3d 	bl	8018078 <tcp_close_shutdown>
 80183fe:	4603      	mov	r3, r0
 8018400:	e003      	b.n	801840a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8018402:	f06f 030a 	mvn.w	r3, #10
 8018406:	e000      	b.n	801840a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8018408:	2300      	movs	r3, #0
}
 801840a:	4618      	mov	r0, r3
 801840c:	3710      	adds	r7, #16
 801840e:	46bd      	mov	sp, r7
 8018410:	bd80      	pop	{r7, pc}
 8018412:	bf00      	nop
 8018414:	08029fd0 	.word	0x08029fd0
 8018418:	0802a0f8 	.word	0x0802a0f8
 801841c:	0802a014 	.word	0x0802a014

08018420 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b08e      	sub	sp, #56	; 0x38
 8018424:	af04      	add	r7, sp, #16
 8018426:	6078      	str	r0, [r7, #4]
 8018428:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d107      	bne.n	8018440 <tcp_abandon+0x20>
 8018430:	4b52      	ldr	r3, [pc, #328]	; (801857c <tcp_abandon+0x15c>)
 8018432:	f240 223d 	movw	r2, #573	; 0x23d
 8018436:	4952      	ldr	r1, [pc, #328]	; (8018580 <tcp_abandon+0x160>)
 8018438:	4852      	ldr	r0, [pc, #328]	; (8018584 <tcp_abandon+0x164>)
 801843a:	f00b fa13 	bl	8023864 <iprintf>
 801843e:	e099      	b.n	8018574 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	7d1b      	ldrb	r3, [r3, #20]
 8018444:	2b01      	cmp	r3, #1
 8018446:	d106      	bne.n	8018456 <tcp_abandon+0x36>
 8018448:	4b4c      	ldr	r3, [pc, #304]	; (801857c <tcp_abandon+0x15c>)
 801844a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801844e:	494e      	ldr	r1, [pc, #312]	; (8018588 <tcp_abandon+0x168>)
 8018450:	484c      	ldr	r0, [pc, #304]	; (8018584 <tcp_abandon+0x164>)
 8018452:	f00b fa07 	bl	8023864 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	7d1b      	ldrb	r3, [r3, #20]
 801845a:	2b0a      	cmp	r3, #10
 801845c:	d107      	bne.n	801846e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801845e:	6879      	ldr	r1, [r7, #4]
 8018460:	484a      	ldr	r0, [pc, #296]	; (801858c <tcp_abandon+0x16c>)
 8018462:	f001 fa79 	bl	8019958 <tcp_pcb_remove>
    tcp_free(pcb);
 8018466:	6878      	ldr	r0, [r7, #4]
 8018468:	f7ff fd54 	bl	8017f14 <tcp_free>
 801846c:	e082      	b.n	8018574 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801846e:	2300      	movs	r3, #0
 8018470:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8018472:	2300      	movs	r3, #0
 8018474:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801847a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018480:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018488:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	691b      	ldr	r3, [r3, #16]
 801848e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	7d1b      	ldrb	r3, [r3, #20]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d126      	bne.n	80184e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	8adb      	ldrh	r3, [r3, #22]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d02e      	beq.n	80184fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80184a0:	4b3b      	ldr	r3, [pc, #236]	; (8018590 <tcp_abandon+0x170>)
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	687a      	ldr	r2, [r7, #4]
 80184a6:	429a      	cmp	r2, r3
 80184a8:	d105      	bne.n	80184b6 <tcp_abandon+0x96>
 80184aa:	4b39      	ldr	r3, [pc, #228]	; (8018590 <tcp_abandon+0x170>)
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	68db      	ldr	r3, [r3, #12]
 80184b0:	4a37      	ldr	r2, [pc, #220]	; (8018590 <tcp_abandon+0x170>)
 80184b2:	6013      	str	r3, [r2, #0]
 80184b4:	e013      	b.n	80184de <tcp_abandon+0xbe>
 80184b6:	4b36      	ldr	r3, [pc, #216]	; (8018590 <tcp_abandon+0x170>)
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	61fb      	str	r3, [r7, #28]
 80184bc:	e00c      	b.n	80184d8 <tcp_abandon+0xb8>
 80184be:	69fb      	ldr	r3, [r7, #28]
 80184c0:	68db      	ldr	r3, [r3, #12]
 80184c2:	687a      	ldr	r2, [r7, #4]
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d104      	bne.n	80184d2 <tcp_abandon+0xb2>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	68da      	ldr	r2, [r3, #12]
 80184cc:	69fb      	ldr	r3, [r7, #28]
 80184ce:	60da      	str	r2, [r3, #12]
 80184d0:	e005      	b.n	80184de <tcp_abandon+0xbe>
 80184d2:	69fb      	ldr	r3, [r7, #28]
 80184d4:	68db      	ldr	r3, [r3, #12]
 80184d6:	61fb      	str	r3, [r7, #28]
 80184d8:	69fb      	ldr	r3, [r7, #28]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d1ef      	bne.n	80184be <tcp_abandon+0x9e>
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	2200      	movs	r2, #0
 80184e2:	60da      	str	r2, [r3, #12]
 80184e4:	e00b      	b.n	80184fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80184e6:	683b      	ldr	r3, [r7, #0]
 80184e8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	8adb      	ldrh	r3, [r3, #22]
 80184ee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80184f0:	6879      	ldr	r1, [r7, #4]
 80184f2:	4828      	ldr	r0, [pc, #160]	; (8018594 <tcp_abandon+0x174>)
 80184f4:	f001 fa30 	bl	8019958 <tcp_pcb_remove>
 80184f8:	4b27      	ldr	r3, [pc, #156]	; (8018598 <tcp_abandon+0x178>)
 80184fa:	2201      	movs	r2, #1
 80184fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018502:	2b00      	cmp	r3, #0
 8018504:	d004      	beq.n	8018510 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801850a:	4618      	mov	r0, r3
 801850c:	f000 fefa 	bl	8019304 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018514:	2b00      	cmp	r3, #0
 8018516:	d004      	beq.n	8018522 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801851c:	4618      	mov	r0, r3
 801851e:	f000 fef1 	bl	8019304 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018526:	2b00      	cmp	r3, #0
 8018528:	d004      	beq.n	8018534 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801852e:	4618      	mov	r0, r3
 8018530:	f000 fee8 	bl	8019304 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8018534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018536:	2b00      	cmp	r3, #0
 8018538:	d00e      	beq.n	8018558 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801853a:	6879      	ldr	r1, [r7, #4]
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	3304      	adds	r3, #4
 8018540:	687a      	ldr	r2, [r7, #4]
 8018542:	8b12      	ldrh	r2, [r2, #24]
 8018544:	9202      	str	r2, [sp, #8]
 8018546:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018548:	9201      	str	r2, [sp, #4]
 801854a:	9300      	str	r3, [sp, #0]
 801854c:	460b      	mov	r3, r1
 801854e:	697a      	ldr	r2, [r7, #20]
 8018550:	69b9      	ldr	r1, [r7, #24]
 8018552:	6878      	ldr	r0, [r7, #4]
 8018554:	f005 fbde 	bl	801dd14 <tcp_rst>
    }
    last_state = pcb->state;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	7d1b      	ldrb	r3, [r3, #20]
 801855c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f7ff fcd8 	bl	8017f14 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018564:	693b      	ldr	r3, [r7, #16]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d004      	beq.n	8018574 <tcp_abandon+0x154>
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	f06f 010c 	mvn.w	r1, #12
 8018570:	68f8      	ldr	r0, [r7, #12]
 8018572:	4798      	blx	r3
  }
}
 8018574:	3728      	adds	r7, #40	; 0x28
 8018576:	46bd      	mov	sp, r7
 8018578:	bd80      	pop	{r7, pc}
 801857a:	bf00      	nop
 801857c:	08029fd0 	.word	0x08029fd0
 8018580:	0802a114 	.word	0x0802a114
 8018584:	0802a014 	.word	0x0802a014
 8018588:	0802a130 	.word	0x0802a130
 801858c:	20015fc8 	.word	0x20015fc8
 8018590:	20015fbc 	.word	0x20015fbc
 8018594:	20015fc4 	.word	0x20015fc4
 8018598:	20015fcc 	.word	0x20015fcc

0801859c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b082      	sub	sp, #8
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80185a4:	2101      	movs	r1, #1
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f7ff ff3a 	bl	8018420 <tcp_abandon>
}
 80185ac:	bf00      	nop
 80185ae:	3708      	adds	r7, #8
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}

080185b4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80185b4:	b580      	push	{r7, lr}
 80185b6:	b088      	sub	sp, #32
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	60f8      	str	r0, [r7, #12]
 80185bc:	60b9      	str	r1, [r7, #8]
 80185be:	4613      	mov	r3, r2
 80185c0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80185c2:	2304      	movs	r3, #4
 80185c4:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d101      	bne.n	80185d0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80185cc:	4b48      	ldr	r3, [pc, #288]	; (80186f0 <tcp_bind+0x13c>)
 80185ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d109      	bne.n	80185ea <tcp_bind+0x36>
 80185d6:	4b47      	ldr	r3, [pc, #284]	; (80186f4 <tcp_bind+0x140>)
 80185d8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80185dc:	4946      	ldr	r1, [pc, #280]	; (80186f8 <tcp_bind+0x144>)
 80185de:	4847      	ldr	r0, [pc, #284]	; (80186fc <tcp_bind+0x148>)
 80185e0:	f00b f940 	bl	8023864 <iprintf>
 80185e4:	f06f 030f 	mvn.w	r3, #15
 80185e8:	e07e      	b.n	80186e8 <tcp_bind+0x134>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80185ea:	68fb      	ldr	r3, [r7, #12]
 80185ec:	7d1b      	ldrb	r3, [r3, #20]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d009      	beq.n	8018606 <tcp_bind+0x52>
 80185f2:	4b40      	ldr	r3, [pc, #256]	; (80186f4 <tcp_bind+0x140>)
 80185f4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80185f8:	4941      	ldr	r1, [pc, #260]	; (8018700 <tcp_bind+0x14c>)
 80185fa:	4840      	ldr	r0, [pc, #256]	; (80186fc <tcp_bind+0x148>)
 80185fc:	f00b f932 	bl	8023864 <iprintf>
 8018600:	f06f 0305 	mvn.w	r3, #5
 8018604:	e070      	b.n	80186e8 <tcp_bind+0x134>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	7a5b      	ldrb	r3, [r3, #9]
 801860a:	f003 0304 	and.w	r3, r3, #4
 801860e:	2b00      	cmp	r3, #0
 8018610:	d001      	beq.n	8018616 <tcp_bind+0x62>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 8018612:	2303      	movs	r3, #3
 8018614:	61bb      	str	r3, [r7, #24]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8018616:	88fb      	ldrh	r3, [r7, #6]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d109      	bne.n	8018630 <tcp_bind+0x7c>
    port = tcp_new_port();
 801861c:	f000 fa0a 	bl	8018a34 <tcp_new_port>
 8018620:	4603      	mov	r3, r0
 8018622:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018624:	88fb      	ldrh	r3, [r7, #6]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d141      	bne.n	80186ae <tcp_bind+0xfa>
      return ERR_BUF;
 801862a:	f06f 0301 	mvn.w	r3, #1
 801862e:	e05b      	b.n	80186e8 <tcp_bind+0x134>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8018630:	2300      	movs	r3, #0
 8018632:	61fb      	str	r3, [r7, #28]
 8018634:	e037      	b.n	80186a6 <tcp_bind+0xf2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018636:	4a33      	ldr	r2, [pc, #204]	; (8018704 <tcp_bind+0x150>)
 8018638:	69fb      	ldr	r3, [r7, #28]
 801863a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	617b      	str	r3, [r7, #20]
 8018642:	e02a      	b.n	801869a <tcp_bind+0xe6>
        if (cpcb->local_port == port) {
 8018644:	697b      	ldr	r3, [r7, #20]
 8018646:	8adb      	ldrh	r3, [r3, #22]
 8018648:	88fa      	ldrh	r2, [r7, #6]
 801864a:	429a      	cmp	r2, r3
 801864c:	d122      	bne.n	8018694 <tcp_bind+0xe0>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	7a5b      	ldrb	r3, [r3, #9]
 8018652:	f003 0304 	and.w	r3, r3, #4
 8018656:	2b00      	cmp	r3, #0
 8018658:	d005      	beq.n	8018666 <tcp_bind+0xb2>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 801865a:	697b      	ldr	r3, [r7, #20]
 801865c:	7a5b      	ldrb	r3, [r3, #9]
 801865e:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8018662:	2b00      	cmp	r3, #0
 8018664:	d116      	bne.n	8018694 <tcp_bind+0xe0>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8018666:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018668:	2b00      	cmp	r3, #0
 801866a:	d010      	beq.n	801868e <tcp_bind+0xda>
                (ip_addr_isany(&cpcb->local_ip) ||
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d00c      	beq.n	801868e <tcp_bind+0xda>
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d009      	beq.n	801868e <tcp_bind+0xda>
                 ip_addr_isany(ipaddr) ||
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d005      	beq.n	801868e <tcp_bind+0xda>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	681a      	ldr	r2, [r3, #0]
 8018686:	68bb      	ldr	r3, [r7, #8]
 8018688:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801868a:	429a      	cmp	r2, r3
 801868c:	d102      	bne.n	8018694 <tcp_bind+0xe0>
              return ERR_USE;
 801868e:	f06f 0307 	mvn.w	r3, #7
 8018692:	e029      	b.n	80186e8 <tcp_bind+0x134>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	68db      	ldr	r3, [r3, #12]
 8018698:	617b      	str	r3, [r7, #20]
 801869a:	697b      	ldr	r3, [r7, #20]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d1d1      	bne.n	8018644 <tcp_bind+0x90>
    for (i = 0; i < max_pcb_list; i++) {
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	3301      	adds	r3, #1
 80186a4:	61fb      	str	r3, [r7, #28]
 80186a6:	69fa      	ldr	r2, [r7, #28]
 80186a8:	69bb      	ldr	r3, [r7, #24]
 80186aa:	429a      	cmp	r2, r3
 80186ac:	dbc3      	blt.n	8018636 <tcp_bind+0x82>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d00c      	beq.n	80186ce <tcp_bind+0x11a>
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d008      	beq.n	80186ce <tcp_bind+0x11a>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d002      	beq.n	80186c8 <tcp_bind+0x114>
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	e000      	b.n	80186ca <tcp_bind+0x116>
 80186c8:	2300      	movs	r3, #0
 80186ca:	68fa      	ldr	r2, [r7, #12]
 80186cc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80186ce:	68fb      	ldr	r3, [r7, #12]
 80186d0:	88fa      	ldrh	r2, [r7, #6]
 80186d2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80186d4:	4b0c      	ldr	r3, [pc, #48]	; (8018708 <tcp_bind+0x154>)
 80186d6:	681a      	ldr	r2, [r3, #0]
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	60da      	str	r2, [r3, #12]
 80186dc:	4a0a      	ldr	r2, [pc, #40]	; (8018708 <tcp_bind+0x154>)
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	6013      	str	r3, [r2, #0]
 80186e2:	f005 fcd9 	bl	801e098 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80186e6:	2300      	movs	r3, #0
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3720      	adds	r7, #32
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}
 80186f0:	0802c1e4 	.word	0x0802c1e4
 80186f4:	08029fd0 	.word	0x08029fd0
 80186f8:	0802a164 	.word	0x0802a164
 80186fc:	0802a014 	.word	0x0802a014
 8018700:	0802a17c 	.word	0x0802a17c
 8018704:	0802c1b4 	.word	0x0802c1b4
 8018708:	20015fbc 	.word	0x20015fbc

0801870c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	60f8      	str	r0, [r7, #12]
 8018714:	60b9      	str	r1, [r7, #8]
 8018716:	4613      	mov	r3, r2
 8018718:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801871a:	68bb      	ldr	r3, [r7, #8]
 801871c:	2b00      	cmp	r3, #0
 801871e:	d106      	bne.n	801872e <tcp_accept_null+0x22>
 8018720:	4b07      	ldr	r3, [pc, #28]	; (8018740 <tcp_accept_null+0x34>)
 8018722:	f240 320f 	movw	r2, #783	; 0x30f
 8018726:	4907      	ldr	r1, [pc, #28]	; (8018744 <tcp_accept_null+0x38>)
 8018728:	4807      	ldr	r0, [pc, #28]	; (8018748 <tcp_accept_null+0x3c>)
 801872a:	f00b f89b 	bl	8023864 <iprintf>

  tcp_abort(pcb);
 801872e:	68b8      	ldr	r0, [r7, #8]
 8018730:	f7ff ff34 	bl	801859c <tcp_abort>

  return ERR_ABRT;
 8018734:	f06f 030c 	mvn.w	r3, #12
}
 8018738:	4618      	mov	r0, r3
 801873a:	3710      	adds	r7, #16
 801873c:	46bd      	mov	sp, r7
 801873e:	bd80      	pop	{r7, pc}
 8018740:	08029fd0 	.word	0x08029fd0
 8018744:	0802a1a4 	.word	0x0802a1a4
 8018748:	0802a014 	.word	0x0802a014

0801874c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b088      	sub	sp, #32
 8018750:	af00      	add	r7, sp, #0
 8018752:	60f8      	str	r0, [r7, #12]
 8018754:	460b      	mov	r3, r1
 8018756:	607a      	str	r2, [r7, #4]
 8018758:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801875a:	2300      	movs	r3, #0
 801875c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	2b00      	cmp	r3, #0
 8018762:	d109      	bne.n	8018778 <tcp_listen_with_backlog_and_err+0x2c>
 8018764:	4b57      	ldr	r3, [pc, #348]	; (80188c4 <tcp_listen_with_backlog_and_err+0x178>)
 8018766:	f240 3259 	movw	r2, #857	; 0x359
 801876a:	4957      	ldr	r1, [pc, #348]	; (80188c8 <tcp_listen_with_backlog_and_err+0x17c>)
 801876c:	4857      	ldr	r0, [pc, #348]	; (80188cc <tcp_listen_with_backlog_and_err+0x180>)
 801876e:	f00b f879 	bl	8023864 <iprintf>
 8018772:	23f0      	movs	r3, #240	; 0xf0
 8018774:	76fb      	strb	r3, [r7, #27]
 8018776:	e09a      	b.n	80188ae <tcp_listen_with_backlog_and_err+0x162>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	7d1b      	ldrb	r3, [r3, #20]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d009      	beq.n	8018794 <tcp_listen_with_backlog_and_err+0x48>
 8018780:	4b50      	ldr	r3, [pc, #320]	; (80188c4 <tcp_listen_with_backlog_and_err+0x178>)
 8018782:	f240 325a 	movw	r2, #858	; 0x35a
 8018786:	4952      	ldr	r1, [pc, #328]	; (80188d0 <tcp_listen_with_backlog_and_err+0x184>)
 8018788:	4850      	ldr	r0, [pc, #320]	; (80188cc <tcp_listen_with_backlog_and_err+0x180>)
 801878a:	f00b f86b 	bl	8023864 <iprintf>
 801878e:	23f1      	movs	r3, #241	; 0xf1
 8018790:	76fb      	strb	r3, [r7, #27]
 8018792:	e08c      	b.n	80188ae <tcp_listen_with_backlog_and_err+0x162>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	7d1b      	ldrb	r3, [r3, #20]
 8018798:	2b01      	cmp	r3, #1
 801879a:	d104      	bne.n	80187a6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80187a0:	23f7      	movs	r3, #247	; 0xf7
 80187a2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80187a4:	e083      	b.n	80188ae <tcp_listen_with_backlog_and_err+0x162>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	7a5b      	ldrb	r3, [r3, #9]
 80187aa:	f003 0304 	and.w	r3, r3, #4
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d01a      	beq.n	80187e8 <tcp_listen_with_backlog_and_err+0x9c>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80187b2:	4b48      	ldr	r3, [pc, #288]	; (80188d4 <tcp_listen_with_backlog_and_err+0x188>)
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	61fb      	str	r3, [r7, #28]
 80187b8:	e013      	b.n	80187e2 <tcp_listen_with_backlog_and_err+0x96>
      if ((lpcb->local_port == pcb->local_port) &&
 80187ba:	69fb      	ldr	r3, [r7, #28]
 80187bc:	8ada      	ldrh	r2, [r3, #22]
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	8adb      	ldrh	r3, [r3, #22]
 80187c2:	429a      	cmp	r2, r3
 80187c4:	d10a      	bne.n	80187dc <tcp_listen_with_backlog_and_err+0x90>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	681a      	ldr	r2, [r3, #0]
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 80187ce:	429a      	cmp	r2, r3
 80187d0:	d104      	bne.n	80187dc <tcp_listen_with_backlog_and_err+0x90>
        /* this address/port is already used */
        lpcb = NULL;
 80187d2:	2300      	movs	r3, #0
 80187d4:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 80187d6:	23f8      	movs	r3, #248	; 0xf8
 80187d8:	76fb      	strb	r3, [r7, #27]
        goto done;
 80187da:	e068      	b.n	80188ae <tcp_listen_with_backlog_and_err+0x162>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80187dc:	69fb      	ldr	r3, [r7, #28]
 80187de:	68db      	ldr	r3, [r3, #12]
 80187e0:	61fb      	str	r3, [r7, #28]
 80187e2:	69fb      	ldr	r3, [r7, #28]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d1e8      	bne.n	80187ba <tcp_listen_with_backlog_and_err+0x6e>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80187e8:	2002      	movs	r0, #2
 80187ea:	f7fe f863 	bl	80168b4 <memp_malloc>
 80187ee:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80187f0:	69fb      	ldr	r3, [r7, #28]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d102      	bne.n	80187fc <tcp_listen_with_backlog_and_err+0xb0>
    res = ERR_MEM;
 80187f6:	23ff      	movs	r3, #255	; 0xff
 80187f8:	76fb      	strb	r3, [r7, #27]
    goto done;
 80187fa:	e058      	b.n	80188ae <tcp_listen_with_backlog_and_err+0x162>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	691a      	ldr	r2, [r3, #16]
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	8ada      	ldrh	r2, [r3, #22]
 8018808:	69fb      	ldr	r3, [r7, #28]
 801880a:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801880c:	69fb      	ldr	r3, [r7, #28]
 801880e:	2201      	movs	r2, #1
 8018810:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	7d5a      	ldrb	r2, [r3, #21]
 8018816:	69fb      	ldr	r3, [r7, #28]
 8018818:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	7a5a      	ldrb	r2, [r3, #9]
 801881e:	69fb      	ldr	r3, [r7, #28]
 8018820:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018822:	69fb      	ldr	r3, [r7, #28]
 8018824:	2200      	movs	r2, #0
 8018826:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8018828:	68fb      	ldr	r3, [r7, #12]
 801882a:	7ada      	ldrb	r2, [r3, #11]
 801882c:	69fb      	ldr	r3, [r7, #28]
 801882e:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	7a9a      	ldrb	r2, [r3, #10]
 8018834:	69fb      	ldr	r3, [r7, #28]
 8018836:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	681a      	ldr	r2, [r3, #0]
 801883c:	69fb      	ldr	r3, [r7, #28]
 801883e:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	8adb      	ldrh	r3, [r3, #22]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d021      	beq.n	801888c <tcp_listen_with_backlog_and_err+0x140>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8018848:	4b23      	ldr	r3, [pc, #140]	; (80188d8 <tcp_listen_with_backlog_and_err+0x18c>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	68fa      	ldr	r2, [r7, #12]
 801884e:	429a      	cmp	r2, r3
 8018850:	d105      	bne.n	801885e <tcp_listen_with_backlog_and_err+0x112>
 8018852:	4b21      	ldr	r3, [pc, #132]	; (80188d8 <tcp_listen_with_backlog_and_err+0x18c>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	68db      	ldr	r3, [r3, #12]
 8018858:	4a1f      	ldr	r2, [pc, #124]	; (80188d8 <tcp_listen_with_backlog_and_err+0x18c>)
 801885a:	6013      	str	r3, [r2, #0]
 801885c:	e013      	b.n	8018886 <tcp_listen_with_backlog_and_err+0x13a>
 801885e:	4b1e      	ldr	r3, [pc, #120]	; (80188d8 <tcp_listen_with_backlog_and_err+0x18c>)
 8018860:	681b      	ldr	r3, [r3, #0]
 8018862:	617b      	str	r3, [r7, #20]
 8018864:	e00c      	b.n	8018880 <tcp_listen_with_backlog_and_err+0x134>
 8018866:	697b      	ldr	r3, [r7, #20]
 8018868:	68db      	ldr	r3, [r3, #12]
 801886a:	68fa      	ldr	r2, [r7, #12]
 801886c:	429a      	cmp	r2, r3
 801886e:	d104      	bne.n	801887a <tcp_listen_with_backlog_and_err+0x12e>
 8018870:	68fb      	ldr	r3, [r7, #12]
 8018872:	68da      	ldr	r2, [r3, #12]
 8018874:	697b      	ldr	r3, [r7, #20]
 8018876:	60da      	str	r2, [r3, #12]
 8018878:	e005      	b.n	8018886 <tcp_listen_with_backlog_and_err+0x13a>
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	617b      	str	r3, [r7, #20]
 8018880:	697b      	ldr	r3, [r7, #20]
 8018882:	2b00      	cmp	r3, #0
 8018884:	d1ef      	bne.n	8018866 <tcp_listen_with_backlog_and_err+0x11a>
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	2200      	movs	r2, #0
 801888a:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801888c:	68f8      	ldr	r0, [r7, #12]
 801888e:	f7ff fb41 	bl	8017f14 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018892:	69fb      	ldr	r3, [r7, #28]
 8018894:	4a11      	ldr	r2, [pc, #68]	; (80188dc <tcp_listen_with_backlog_and_err+0x190>)
 8018896:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018898:	4b0e      	ldr	r3, [pc, #56]	; (80188d4 <tcp_listen_with_backlog_and_err+0x188>)
 801889a:	681a      	ldr	r2, [r3, #0]
 801889c:	69fb      	ldr	r3, [r7, #28]
 801889e:	60da      	str	r2, [r3, #12]
 80188a0:	4a0c      	ldr	r2, [pc, #48]	; (80188d4 <tcp_listen_with_backlog_and_err+0x188>)
 80188a2:	69fb      	ldr	r3, [r7, #28]
 80188a4:	6013      	str	r3, [r2, #0]
 80188a6:	f005 fbf7 	bl	801e098 <tcp_timer_needed>
  res = ERR_OK;
 80188aa:	2300      	movs	r3, #0
 80188ac:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d002      	beq.n	80188ba <tcp_listen_with_backlog_and_err+0x16e>
    *err = res;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	7efa      	ldrb	r2, [r7, #27]
 80188b8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80188ba:	69fb      	ldr	r3, [r7, #28]
}
 80188bc:	4618      	mov	r0, r3
 80188be:	3720      	adds	r7, #32
 80188c0:	46bd      	mov	sp, r7
 80188c2:	bd80      	pop	{r7, pc}
 80188c4:	08029fd0 	.word	0x08029fd0
 80188c8:	0802a1c4 	.word	0x0802a1c4
 80188cc:	0802a014 	.word	0x0802a014
 80188d0:	0802a1f4 	.word	0x0802a1f4
 80188d4:	20015fc0 	.word	0x20015fc0
 80188d8:	20015fbc 	.word	0x20015fbc
 80188dc:	0801870d 	.word	0x0801870d

080188e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b084      	sub	sp, #16
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d106      	bne.n	80188fc <tcp_update_rcv_ann_wnd+0x1c>
 80188ee:	4b25      	ldr	r3, [pc, #148]	; (8018984 <tcp_update_rcv_ann_wnd+0xa4>)
 80188f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80188f4:	4924      	ldr	r1, [pc, #144]	; (8018988 <tcp_update_rcv_ann_wnd+0xa8>)
 80188f6:	4825      	ldr	r0, [pc, #148]	; (801898c <tcp_update_rcv_ann_wnd+0xac>)
 80188f8:	f00a ffb4 	bl	8023864 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018900:	687a      	ldr	r2, [r7, #4]
 8018902:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8018904:	4413      	add	r3, r2
 8018906:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801890c:	687a      	ldr	r2, [r7, #4]
 801890e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8018910:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8018914:	bf28      	it	cs
 8018916:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801891a:	b292      	uxth	r2, r2
 801891c:	4413      	add	r3, r2
 801891e:	68fa      	ldr	r2, [r7, #12]
 8018920:	1ad3      	subs	r3, r2, r3
 8018922:	2b00      	cmp	r3, #0
 8018924:	db08      	blt.n	8018938 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018932:	68fa      	ldr	r2, [r7, #12]
 8018934:	1ad3      	subs	r3, r2, r3
 8018936:	e020      	b.n	801897a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018940:	1ad3      	subs	r3, r2, r3
 8018942:	2b00      	cmp	r3, #0
 8018944:	dd03      	ble.n	801894e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	2200      	movs	r2, #0
 801894a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801894c:	e014      	b.n	8018978 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018956:	1ad3      	subs	r3, r2, r3
 8018958:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018960:	d306      	bcc.n	8018970 <tcp_update_rcv_ann_wnd+0x90>
 8018962:	4b08      	ldr	r3, [pc, #32]	; (8018984 <tcp_update_rcv_ann_wnd+0xa4>)
 8018964:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018968:	4909      	ldr	r1, [pc, #36]	; (8018990 <tcp_update_rcv_ann_wnd+0xb0>)
 801896a:	4808      	ldr	r0, [pc, #32]	; (801898c <tcp_update_rcv_ann_wnd+0xac>)
 801896c:	f00a ff7a 	bl	8023864 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018970:	68bb      	ldr	r3, [r7, #8]
 8018972:	b29a      	uxth	r2, r3
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8018978:	2300      	movs	r3, #0
  }
}
 801897a:	4618      	mov	r0, r3
 801897c:	3710      	adds	r7, #16
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}
 8018982:	bf00      	nop
 8018984:	08029fd0 	.word	0x08029fd0
 8018988:	0802a22c 	.word	0x0802a22c
 801898c:	0802a014 	.word	0x0802a014
 8018990:	0802a250 	.word	0x0802a250

08018994 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8018994:	b580      	push	{r7, lr}
 8018996:	b084      	sub	sp, #16
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	460b      	mov	r3, r1
 801899e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d107      	bne.n	80189b6 <tcp_recved+0x22>
 80189a6:	4b1f      	ldr	r3, [pc, #124]	; (8018a24 <tcp_recved+0x90>)
 80189a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80189ac:	491e      	ldr	r1, [pc, #120]	; (8018a28 <tcp_recved+0x94>)
 80189ae:	481f      	ldr	r0, [pc, #124]	; (8018a2c <tcp_recved+0x98>)
 80189b0:	f00a ff58 	bl	8023864 <iprintf>
 80189b4:	e032      	b.n	8018a1c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	7d1b      	ldrb	r3, [r3, #20]
 80189ba:	2b01      	cmp	r3, #1
 80189bc:	d106      	bne.n	80189cc <tcp_recved+0x38>
 80189be:	4b19      	ldr	r3, [pc, #100]	; (8018a24 <tcp_recved+0x90>)
 80189c0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80189c4:	491a      	ldr	r1, [pc, #104]	; (8018a30 <tcp_recved+0x9c>)
 80189c6:	4819      	ldr	r0, [pc, #100]	; (8018a2c <tcp_recved+0x98>)
 80189c8:	f00a ff4c 	bl	8023864 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80189d0:	887b      	ldrh	r3, [r7, #2]
 80189d2:	4413      	add	r3, r2
 80189d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80189d6:	89fb      	ldrh	r3, [r7, #14]
 80189d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80189dc:	d804      	bhi.n	80189e8 <tcp_recved+0x54>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189e2:	89fa      	ldrh	r2, [r7, #14]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d204      	bcs.n	80189f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80189ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80189f0:	e002      	b.n	80189f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	89fa      	ldrh	r2, [r7, #14]
 80189f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80189f8:	6878      	ldr	r0, [r7, #4]
 80189fa:	f7ff ff71 	bl	80188e0 <tcp_update_rcv_ann_wnd>
 80189fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018a06:	d309      	bcc.n	8018a1c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	8b5b      	ldrh	r3, [r3, #26]
 8018a0c:	f043 0302 	orr.w	r3, r3, #2
 8018a10:	b29a      	uxth	r2, r3
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f004 fbc8 	bl	801d1ac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8018a1c:	3710      	adds	r7, #16
 8018a1e:	46bd      	mov	sp, r7
 8018a20:	bd80      	pop	{r7, pc}
 8018a22:	bf00      	nop
 8018a24:	08029fd0 	.word	0x08029fd0
 8018a28:	0802a26c 	.word	0x0802a26c
 8018a2c:	0802a014 	.word	0x0802a014
 8018a30:	0802a284 	.word	0x0802a284

08018a34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8018a34:	b480      	push	{r7}
 8018a36:	b083      	sub	sp, #12
 8018a38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8018a3e:	4b1e      	ldr	r3, [pc, #120]	; (8018ab8 <tcp_new_port+0x84>)
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	3301      	adds	r3, #1
 8018a44:	b29a      	uxth	r2, r3
 8018a46:	4b1c      	ldr	r3, [pc, #112]	; (8018ab8 <tcp_new_port+0x84>)
 8018a48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8018a4a:	4b1b      	ldr	r3, [pc, #108]	; (8018ab8 <tcp_new_port+0x84>)
 8018a4c:	881b      	ldrh	r3, [r3, #0]
 8018a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d103      	bne.n	8018a5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8018a56:	4b18      	ldr	r3, [pc, #96]	; (8018ab8 <tcp_new_port+0x84>)
 8018a58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018a5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018a5e:	2300      	movs	r3, #0
 8018a60:	71fb      	strb	r3, [r7, #7]
 8018a62:	e01e      	b.n	8018aa2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018a64:	79fb      	ldrb	r3, [r7, #7]
 8018a66:	4a15      	ldr	r2, [pc, #84]	; (8018abc <tcp_new_port+0x88>)
 8018a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	603b      	str	r3, [r7, #0]
 8018a70:	e011      	b.n	8018a96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018a72:	683b      	ldr	r3, [r7, #0]
 8018a74:	8ada      	ldrh	r2, [r3, #22]
 8018a76:	4b10      	ldr	r3, [pc, #64]	; (8018ab8 <tcp_new_port+0x84>)
 8018a78:	881b      	ldrh	r3, [r3, #0]
 8018a7a:	429a      	cmp	r2, r3
 8018a7c:	d108      	bne.n	8018a90 <tcp_new_port+0x5c>
        n++;
 8018a7e:	88bb      	ldrh	r3, [r7, #4]
 8018a80:	3301      	adds	r3, #1
 8018a82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018a84:	88bb      	ldrh	r3, [r7, #4]
 8018a86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018a8a:	d3d8      	bcc.n	8018a3e <tcp_new_port+0xa>
          return 0;
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	e00d      	b.n	8018aac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018a90:	683b      	ldr	r3, [r7, #0]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	603b      	str	r3, [r7, #0]
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d1ea      	bne.n	8018a72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8018a9c:	79fb      	ldrb	r3, [r7, #7]
 8018a9e:	3301      	adds	r3, #1
 8018aa0:	71fb      	strb	r3, [r7, #7]
 8018aa2:	79fb      	ldrb	r3, [r7, #7]
 8018aa4:	2b03      	cmp	r3, #3
 8018aa6:	d9dd      	bls.n	8018a64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018aa8:	4b03      	ldr	r3, [pc, #12]	; (8018ab8 <tcp_new_port+0x84>)
 8018aaa:	881b      	ldrh	r3, [r3, #0]
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	370c      	adds	r7, #12
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab6:	4770      	bx	lr
 8018ab8:	2000002c 	.word	0x2000002c
 8018abc:	0802c1b4 	.word	0x0802c1b4

08018ac0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8018ac0:	b5b0      	push	{r4, r5, r7, lr}
 8018ac2:	b090      	sub	sp, #64	; 0x40
 8018ac4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8018acc:	4b94      	ldr	r3, [pc, #592]	; (8018d20 <tcp_slowtmr+0x260>)
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	4a93      	ldr	r2, [pc, #588]	; (8018d20 <tcp_slowtmr+0x260>)
 8018ad4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018ad6:	4b93      	ldr	r3, [pc, #588]	; (8018d24 <tcp_slowtmr+0x264>)
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	3301      	adds	r3, #1
 8018adc:	b2da      	uxtb	r2, r3
 8018ade:	4b91      	ldr	r3, [pc, #580]	; (8018d24 <tcp_slowtmr+0x264>)
 8018ae0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8018ae6:	4b90      	ldr	r3, [pc, #576]	; (8018d28 <tcp_slowtmr+0x268>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8018aec:	e2b7      	b.n	801905e <tcp_slowtmr+0x59e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018af0:	7d1b      	ldrb	r3, [r3, #20]
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d106      	bne.n	8018b04 <tcp_slowtmr+0x44>
 8018af6:	4b8d      	ldr	r3, [pc, #564]	; (8018d2c <tcp_slowtmr+0x26c>)
 8018af8:	f240 42be 	movw	r2, #1214	; 0x4be
 8018afc:	498c      	ldr	r1, [pc, #560]	; (8018d30 <tcp_slowtmr+0x270>)
 8018afe:	488d      	ldr	r0, [pc, #564]	; (8018d34 <tcp_slowtmr+0x274>)
 8018b00:	f00a feb0 	bl	8023864 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b06:	7d1b      	ldrb	r3, [r3, #20]
 8018b08:	2b01      	cmp	r3, #1
 8018b0a:	d106      	bne.n	8018b1a <tcp_slowtmr+0x5a>
 8018b0c:	4b87      	ldr	r3, [pc, #540]	; (8018d2c <tcp_slowtmr+0x26c>)
 8018b0e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8018b12:	4989      	ldr	r1, [pc, #548]	; (8018d38 <tcp_slowtmr+0x278>)
 8018b14:	4887      	ldr	r0, [pc, #540]	; (8018d34 <tcp_slowtmr+0x274>)
 8018b16:	f00a fea5 	bl	8023864 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8018b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b1c:	7d1b      	ldrb	r3, [r3, #20]
 8018b1e:	2b0a      	cmp	r3, #10
 8018b20:	d106      	bne.n	8018b30 <tcp_slowtmr+0x70>
 8018b22:	4b82      	ldr	r3, [pc, #520]	; (8018d2c <tcp_slowtmr+0x26c>)
 8018b24:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018b28:	4984      	ldr	r1, [pc, #528]	; (8018d3c <tcp_slowtmr+0x27c>)
 8018b2a:	4882      	ldr	r0, [pc, #520]	; (8018d34 <tcp_slowtmr+0x274>)
 8018b2c:	f00a fe9a 	bl	8023864 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b32:	7f9a      	ldrb	r2, [r3, #30]
 8018b34:	4b7b      	ldr	r3, [pc, #492]	; (8018d24 <tcp_slowtmr+0x264>)
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d105      	bne.n	8018b48 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8018b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b3e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8018b46:	e28a      	b.n	801905e <tcp_slowtmr+0x59e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8018b48:	4b76      	ldr	r3, [pc, #472]	; (8018d24 <tcp_slowtmr+0x264>)
 8018b4a:	781a      	ldrb	r2, [r3, #0]
 8018b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b4e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8018b50:	2300      	movs	r3, #0
 8018b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8018b56:	2300      	movs	r3, #0
 8018b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5e:	7d1b      	ldrb	r3, [r3, #20]
 8018b60:	2b02      	cmp	r3, #2
 8018b62:	d10a      	bne.n	8018b7a <tcp_slowtmr+0xba>
 8018b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b6a:	2b05      	cmp	r3, #5
 8018b6c:	d905      	bls.n	8018b7a <tcp_slowtmr+0xba>
      ++pcb_remove;
 8018b6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b72:	3301      	adds	r3, #1
 8018b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b78:	e11e      	b.n	8018db8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8018b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b80:	2b0b      	cmp	r3, #11
 8018b82:	d905      	bls.n	8018b90 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018b88:	3301      	adds	r3, #1
 8018b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018b8e:	e113      	b.n	8018db8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b92:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d075      	beq.n	8018c86 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8018b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d006      	beq.n	8018bb0 <tcp_slowtmr+0xf0>
 8018ba2:	4b62      	ldr	r3, [pc, #392]	; (8018d2c <tcp_slowtmr+0x26c>)
 8018ba4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018ba8:	4965      	ldr	r1, [pc, #404]	; (8018d40 <tcp_slowtmr+0x280>)
 8018baa:	4862      	ldr	r0, [pc, #392]	; (8018d34 <tcp_slowtmr+0x274>)
 8018bac:	f00a fe5a 	bl	8023864 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d106      	bne.n	8018bc6 <tcp_slowtmr+0x106>
 8018bb8:	4b5c      	ldr	r3, [pc, #368]	; (8018d2c <tcp_slowtmr+0x26c>)
 8018bba:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8018bbe:	4961      	ldr	r1, [pc, #388]	; (8018d44 <tcp_slowtmr+0x284>)
 8018bc0:	485c      	ldr	r0, [pc, #368]	; (8018d34 <tcp_slowtmr+0x274>)
 8018bc2:	f00a fe4f 	bl	8023864 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bc8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8018bcc:	2b0b      	cmp	r3, #11
 8018bce:	d905      	bls.n	8018bdc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bd4:	3301      	adds	r3, #1
 8018bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018bda:	e0ed      	b.n	8018db8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8018bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bde:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8018be2:	3b01      	subs	r3, #1
 8018be4:	4a58      	ldr	r2, [pc, #352]	; (8018d48 <tcp_slowtmr+0x288>)
 8018be6:	5cd3      	ldrb	r3, [r2, r3]
 8018be8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8018bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bec:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8018bf0:	7c7a      	ldrb	r2, [r7, #17]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d907      	bls.n	8018c06 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bf8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	b2da      	uxtb	r2, r3
 8018c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8018c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c08:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8018c0c:	7c7a      	ldrb	r2, [r7, #17]
 8018c0e:	429a      	cmp	r2, r3
 8018c10:	f200 80d2 	bhi.w	8018db8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8018c14:	2301      	movs	r3, #1
 8018c16:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8018c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d108      	bne.n	8018c34 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8018c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c24:	f005 f96a 	bl	801defc <tcp_zero_window_probe>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d014      	beq.n	8018c58 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8018c2e:	2300      	movs	r3, #0
 8018c30:	623b      	str	r3, [r7, #32]
 8018c32:	e011      	b.n	8018c58 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8018c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018c3a:	4619      	mov	r1, r3
 8018c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c3e:	f004 f82f 	bl	801cca0 <tcp_split_unsent_seg>
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d107      	bne.n	8018c58 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8018c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c4a:	f004 faaf 	bl	801d1ac <tcp_output>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d101      	bne.n	8018c58 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8018c54:	2300      	movs	r3, #0
 8018c56:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8018c58:	6a3b      	ldr	r3, [r7, #32]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	f000 80ac 	beq.w	8018db8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c62:	2200      	movs	r2, #0
 8018c64:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c6a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8018c6e:	2b06      	cmp	r3, #6
 8018c70:	f200 80a2 	bhi.w	8018db8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c76:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8018c7a:	3301      	adds	r3, #1
 8018c7c:	b2da      	uxtb	r2, r3
 8018c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8018c84:	e098      	b.n	8018db8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	db0f      	blt.n	8018cb0 <tcp_slowtmr+0x1f0>
 8018c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c92:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018c96:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018c9a:	4293      	cmp	r3, r2
 8018c9c:	d008      	beq.n	8018cb0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8018c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ca0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	3301      	adds	r3, #1
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	b21a      	sxth	r2, r3
 8018cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cae:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8018cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	db7b      	blt.n	8018db8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018cc2:	f004 fd67 	bl	801d794 <tcp_rexmit_rto_prepare>
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d007      	beq.n	8018cdc <tcp_slowtmr+0x21c>
 8018ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d171      	bne.n	8018db8 <tcp_slowtmr+0x2f8>
 8018cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d06d      	beq.n	8018db8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8018cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cde:	7d1b      	ldrb	r3, [r3, #20]
 8018ce0:	2b02      	cmp	r3, #2
 8018ce2:	d03a      	beq.n	8018d5a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018cea:	2b0c      	cmp	r3, #12
 8018cec:	bf28      	it	cs
 8018cee:	230c      	movcs	r3, #12
 8018cf0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cf4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018cf8:	10db      	asrs	r3, r3, #3
 8018cfa:	b21b      	sxth	r3, r3
 8018cfc:	461a      	mov	r2, r3
 8018cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d00:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018d04:	4413      	add	r3, r2
 8018d06:	7efa      	ldrb	r2, [r7, #27]
 8018d08:	4910      	ldr	r1, [pc, #64]	; (8018d4c <tcp_slowtmr+0x28c>)
 8018d0a:	5c8a      	ldrb	r2, [r1, r2]
 8018d0c:	4093      	lsls	r3, r2
 8018d0e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8018d16:	4293      	cmp	r3, r2
 8018d18:	dc1a      	bgt.n	8018d50 <tcp_slowtmr+0x290>
 8018d1a:	697b      	ldr	r3, [r7, #20]
 8018d1c:	b21a      	sxth	r2, r3
 8018d1e:	e019      	b.n	8018d54 <tcp_slowtmr+0x294>
 8018d20:	20015fb8 	.word	0x20015fb8
 8018d24:	20015fce 	.word	0x20015fce
 8018d28:	20015fc4 	.word	0x20015fc4
 8018d2c:	08029fd0 	.word	0x08029fd0
 8018d30:	0802a314 	.word	0x0802a314
 8018d34:	0802a014 	.word	0x0802a014
 8018d38:	0802a340 	.word	0x0802a340
 8018d3c:	0802a36c 	.word	0x0802a36c
 8018d40:	0802a39c 	.word	0x0802a39c
 8018d44:	0802a3d0 	.word	0x0802a3d0
 8018d48:	0802c1ac 	.word	0x0802c1ac
 8018d4c:	0802c19c 	.word	0x0802c19c
 8018d50:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8018d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d5c:	2200      	movs	r2, #0
 8018d5e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d68:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018d6c:	4293      	cmp	r3, r2
 8018d6e:	bf28      	it	cs
 8018d70:	4613      	movcs	r3, r2
 8018d72:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018d74:	8a7b      	ldrh	r3, [r7, #18]
 8018d76:	085b      	lsrs	r3, r3, #1
 8018d78:	b29a      	uxth	r2, r3
 8018d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	b29b      	uxth	r3, r3
 8018d8e:	429a      	cmp	r2, r3
 8018d90:	d206      	bcs.n	8018da0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018d96:	005b      	lsls	r3, r3, #1
 8018d98:	b29a      	uxth	r2, r3
 8018d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d9c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8018da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018da2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018da6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8018daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dac:	2200      	movs	r2, #0
 8018dae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8018db2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018db4:	f004 fd5e 	bl	801d874 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8018db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dba:	7d1b      	ldrb	r3, [r3, #20]
 8018dbc:	2b06      	cmp	r3, #6
 8018dbe:	d111      	bne.n	8018de4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8018dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dc2:	8b5b      	ldrh	r3, [r3, #26]
 8018dc4:	f003 0310 	and.w	r3, r3, #16
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d00b      	beq.n	8018de4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018dcc:	4b98      	ldr	r3, [pc, #608]	; (8019030 <tcp_slowtmr+0x570>)
 8018dce:	681a      	ldr	r2, [r3, #0]
 8018dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dd2:	6a1b      	ldr	r3, [r3, #32]
 8018dd4:	1ad3      	subs	r3, r2, r3
 8018dd6:	2b28      	cmp	r3, #40	; 0x28
 8018dd8:	d904      	bls.n	8018de4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8018dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dde:	3301      	adds	r3, #1
 8018de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018de6:	7a5b      	ldrb	r3, [r3, #9]
 8018de8:	f003 0308 	and.w	r3, r3, #8
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d053      	beq.n	8018e98 <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 8018df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018df2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018df4:	2b04      	cmp	r3, #4
 8018df6:	d003      	beq.n	8018e00 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8018df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dfa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8018dfc:	2b07      	cmp	r3, #7
 8018dfe:	d14b      	bne.n	8018e98 <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018e00:	4b8b      	ldr	r3, [pc, #556]	; (8019030 <tcp_slowtmr+0x570>)
 8018e02:	681a      	ldr	r2, [r3, #0]
 8018e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e06:	6a1b      	ldr	r3, [r3, #32]
 8018e08:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8018e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e0c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8018e16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e18:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8018e1c:	fb00 f303 	mul.w	r3, r0, r3
 8018e20:	440b      	add	r3, r1
 8018e22:	4984      	ldr	r1, [pc, #528]	; (8019034 <tcp_slowtmr+0x574>)
 8018e24:	fba1 1303 	umull	r1, r3, r1, r3
 8018e28:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018e2a:	429a      	cmp	r2, r3
 8018e2c:	d90a      	bls.n	8018e44 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8018e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e32:	3301      	adds	r3, #1
 8018e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8018e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e42:	e029      	b.n	8018e98 <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018e44:	4b7a      	ldr	r3, [pc, #488]	; (8019030 <tcp_slowtmr+0x570>)
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e4a:	6a1b      	ldr	r3, [r3, #32]
 8018e4c:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8018e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e50:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8018e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e56:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8018e62:	fb00 f303 	mul.w	r3, r0, r3
 8018e66:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8018e68:	4972      	ldr	r1, [pc, #456]	; (8019034 <tcp_slowtmr+0x574>)
 8018e6a:	fba1 1303 	umull	r1, r3, r1, r3
 8018e6e:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018e70:	429a      	cmp	r2, r3
 8018e72:	d911      	bls.n	8018e98 <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 8018e74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018e76:	f005 f801 	bl	801de7c <tcp_keepalive>
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8018e80:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d107      	bne.n	8018e98 <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 8018e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e8a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8018e8e:	3301      	adds	r3, #1
 8018e90:	b2da      	uxtb	r2, r3
 8018e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e94:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8018e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d011      	beq.n	8018ec4 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8018ea0:	4b63      	ldr	r3, [pc, #396]	; (8019030 <tcp_slowtmr+0x570>)
 8018ea2:	681a      	ldr	r2, [r3, #0]
 8018ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ea6:	6a1b      	ldr	r3, [r3, #32]
 8018ea8:	1ad2      	subs	r2, r2, r3
 8018eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eac:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	460b      	mov	r3, r1
 8018eb4:	005b      	lsls	r3, r3, #1
 8018eb6:	440b      	add	r3, r1
 8018eb8:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d302      	bcc.n	8018ec4 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8018ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018ec0:	f000 feae 	bl	8019c20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8018ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec6:	7d1b      	ldrb	r3, [r3, #20]
 8018ec8:	2b03      	cmp	r3, #3
 8018eca:	d10b      	bne.n	8018ee4 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018ecc:	4b58      	ldr	r3, [pc, #352]	; (8019030 <tcp_slowtmr+0x570>)
 8018ece:	681a      	ldr	r2, [r3, #0]
 8018ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ed2:	6a1b      	ldr	r3, [r3, #32]
 8018ed4:	1ad3      	subs	r3, r2, r3
 8018ed6:	2b28      	cmp	r3, #40	; 0x28
 8018ed8:	d904      	bls.n	8018ee4 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8018eda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ede:	3301      	adds	r3, #1
 8018ee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8018ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee6:	7d1b      	ldrb	r3, [r3, #20]
 8018ee8:	2b09      	cmp	r3, #9
 8018eea:	d10b      	bne.n	8018f04 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018eec:	4b50      	ldr	r3, [pc, #320]	; (8019030 <tcp_slowtmr+0x570>)
 8018eee:	681a      	ldr	r2, [r3, #0]
 8018ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ef2:	6a1b      	ldr	r3, [r3, #32]
 8018ef4:	1ad3      	subs	r3, r2, r3
 8018ef6:	2bf0      	cmp	r3, #240	; 0xf0
 8018ef8:	d904      	bls.n	8018f04 <tcp_slowtmr+0x444>
        ++pcb_remove;
 8018efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018efe:	3301      	adds	r3, #1
 8018f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d060      	beq.n	8018fce <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8018f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018f12:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8018f14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f16:	f000 fccf 	bl	80198b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8018f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d010      	beq.n	8018f42 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018f20:	4b45      	ldr	r3, [pc, #276]	; (8019038 <tcp_slowtmr+0x578>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d106      	bne.n	8018f38 <tcp_slowtmr+0x478>
 8018f2a:	4b44      	ldr	r3, [pc, #272]	; (801903c <tcp_slowtmr+0x57c>)
 8018f2c:	f240 526d 	movw	r2, #1389	; 0x56d
 8018f30:	4943      	ldr	r1, [pc, #268]	; (8019040 <tcp_slowtmr+0x580>)
 8018f32:	4844      	ldr	r0, [pc, #272]	; (8019044 <tcp_slowtmr+0x584>)
 8018f34:	f00a fc96 	bl	8023864 <iprintf>
        prev->next = pcb->next;
 8018f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3a:	68da      	ldr	r2, [r3, #12]
 8018f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f3e:	60da      	str	r2, [r3, #12]
 8018f40:	e00f      	b.n	8018f62 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8018f42:	4b3d      	ldr	r3, [pc, #244]	; (8019038 <tcp_slowtmr+0x578>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f48:	429a      	cmp	r2, r3
 8018f4a:	d006      	beq.n	8018f5a <tcp_slowtmr+0x49a>
 8018f4c:	4b3b      	ldr	r3, [pc, #236]	; (801903c <tcp_slowtmr+0x57c>)
 8018f4e:	f240 5271 	movw	r2, #1393	; 0x571
 8018f52:	493d      	ldr	r1, [pc, #244]	; (8019048 <tcp_slowtmr+0x588>)
 8018f54:	483b      	ldr	r0, [pc, #236]	; (8019044 <tcp_slowtmr+0x584>)
 8018f56:	f00a fc85 	bl	8023864 <iprintf>
        tcp_active_pcbs = pcb->next;
 8018f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f5c:	68db      	ldr	r3, [r3, #12]
 8018f5e:	4a36      	ldr	r2, [pc, #216]	; (8019038 <tcp_slowtmr+0x578>)
 8018f60:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018f62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d013      	beq.n	8018f92 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018f72:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f76:	3304      	adds	r3, #4
 8018f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f7a:	8ad2      	ldrh	r2, [r2, #22]
 8018f7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f7e:	8b09      	ldrh	r1, [r1, #24]
 8018f80:	9102      	str	r1, [sp, #8]
 8018f82:	9201      	str	r2, [sp, #4]
 8018f84:	9300      	str	r3, [sp, #0]
 8018f86:	462b      	mov	r3, r5
 8018f88:	4622      	mov	r2, r4
 8018f8a:	4601      	mov	r1, r0
 8018f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f8e:	f004 fec1 	bl	801dd14 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f94:	691b      	ldr	r3, [r3, #16]
 8018f96:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f9a:	7d1b      	ldrb	r3, [r3, #20]
 8018f9c:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8018f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa0:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa4:	68db      	ldr	r3, [r3, #12]
 8018fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018fa8:	6838      	ldr	r0, [r7, #0]
 8018faa:	f7fe ffb3 	bl	8017f14 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8018fae:	4b27      	ldr	r3, [pc, #156]	; (801904c <tcp_slowtmr+0x58c>)
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d004      	beq.n	8018fc4 <tcp_slowtmr+0x504>
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	f06f 010c 	mvn.w	r1, #12
 8018fc0:	68b8      	ldr	r0, [r7, #8]
 8018fc2:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8018fc4:	4b21      	ldr	r3, [pc, #132]	; (801904c <tcp_slowtmr+0x58c>)
 8018fc6:	781b      	ldrb	r3, [r3, #0]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d048      	beq.n	801905e <tcp_slowtmr+0x59e>
        goto tcp_slowtmr_start;
 8018fcc:	e589      	b.n	8018ae2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8018fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd0:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fd4:	68db      	ldr	r3, [r3, #12]
 8018fd6:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8018fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fda:	7f1b      	ldrb	r3, [r3, #28]
 8018fdc:	3301      	adds	r3, #1
 8018fde:	b2da      	uxtb	r2, r3
 8018fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe2:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8018fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fe6:	7f1a      	ldrb	r2, [r3, #28]
 8018fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fea:	7f5b      	ldrb	r3, [r3, #29]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d336      	bcc.n	801905e <tcp_slowtmr+0x59e>
        prev->polltmr = 0;
 8018ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ff2:	2200      	movs	r2, #0
 8018ff4:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8018ff6:	4b15      	ldr	r3, [pc, #84]	; (801904c <tcp_slowtmr+0x58c>)
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8018ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019002:	2b00      	cmp	r3, #0
 8019004:	d00b      	beq.n	801901e <tcp_slowtmr+0x55e>
 8019006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801900c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801900e:	6912      	ldr	r2, [r2, #16]
 8019010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019012:	4610      	mov	r0, r2
 8019014:	4798      	blx	r3
 8019016:	4603      	mov	r3, r0
 8019018:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801901c:	e002      	b.n	8019024 <tcp_slowtmr+0x564>
 801901e:	2300      	movs	r3, #0
 8019020:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8019024:	4b09      	ldr	r3, [pc, #36]	; (801904c <tcp_slowtmr+0x58c>)
 8019026:	781b      	ldrb	r3, [r3, #0]
 8019028:	2b00      	cmp	r3, #0
 801902a:	d011      	beq.n	8019050 <tcp_slowtmr+0x590>
          goto tcp_slowtmr_start;
 801902c:	e559      	b.n	8018ae2 <tcp_slowtmr+0x22>
 801902e:	bf00      	nop
 8019030:	20015fb8 	.word	0x20015fb8
 8019034:	10624dd3 	.word	0x10624dd3
 8019038:	20015fc4 	.word	0x20015fc4
 801903c:	08029fd0 	.word	0x08029fd0
 8019040:	0802a408 	.word	0x0802a408
 8019044:	0802a014 	.word	0x0802a014
 8019048:	0802a434 	.word	0x0802a434
 801904c:	20015fcc 	.word	0x20015fcc
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019050:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019054:	2b00      	cmp	r3, #0
 8019056:	d102      	bne.n	801905e <tcp_slowtmr+0x59e>
          tcp_output(prev);
 8019058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801905a:	f004 f8a7 	bl	801d1ac <tcp_output>
  while (pcb != NULL) {
 801905e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019060:	2b00      	cmp	r3, #0
 8019062:	f47f ad44 	bne.w	8018aee <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8019066:	2300      	movs	r3, #0
 8019068:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801906a:	4b2f      	ldr	r3, [pc, #188]	; (8019128 <tcp_slowtmr+0x668>)
 801906c:	681b      	ldr	r3, [r3, #0]
 801906e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019070:	e052      	b.n	8019118 <tcp_slowtmr+0x658>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019074:	7d1b      	ldrb	r3, [r3, #20]
 8019076:	2b0a      	cmp	r3, #10
 8019078:	d006      	beq.n	8019088 <tcp_slowtmr+0x5c8>
 801907a:	4b2c      	ldr	r3, [pc, #176]	; (801912c <tcp_slowtmr+0x66c>)
 801907c:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8019080:	492b      	ldr	r1, [pc, #172]	; (8019130 <tcp_slowtmr+0x670>)
 8019082:	482c      	ldr	r0, [pc, #176]	; (8019134 <tcp_slowtmr+0x674>)
 8019084:	f00a fbee 	bl	8023864 <iprintf>
    pcb_remove = 0;
 8019088:	2300      	movs	r3, #0
 801908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801908e:	4b2a      	ldr	r3, [pc, #168]	; (8019138 <tcp_slowtmr+0x678>)
 8019090:	681a      	ldr	r2, [r3, #0]
 8019092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019094:	6a1b      	ldr	r3, [r3, #32]
 8019096:	1ad3      	subs	r3, r2, r3
 8019098:	2bf0      	cmp	r3, #240	; 0xf0
 801909a:	d904      	bls.n	80190a6 <tcp_slowtmr+0x5e6>
      ++pcb_remove;
 801909c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190a0:	3301      	adds	r3, #1
 80190a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80190a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d02f      	beq.n	801910e <tcp_slowtmr+0x64e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80190ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80190b0:	f000 fc02 	bl	80198b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80190b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d010      	beq.n	80190dc <tcp_slowtmr+0x61c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80190ba:	4b1b      	ldr	r3, [pc, #108]	; (8019128 <tcp_slowtmr+0x668>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d106      	bne.n	80190d2 <tcp_slowtmr+0x612>
 80190c4:	4b19      	ldr	r3, [pc, #100]	; (801912c <tcp_slowtmr+0x66c>)
 80190c6:	f240 52af 	movw	r2, #1455	; 0x5af
 80190ca:	491c      	ldr	r1, [pc, #112]	; (801913c <tcp_slowtmr+0x67c>)
 80190cc:	4819      	ldr	r0, [pc, #100]	; (8019134 <tcp_slowtmr+0x674>)
 80190ce:	f00a fbc9 	bl	8023864 <iprintf>
        prev->next = pcb->next;
 80190d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190d4:	68da      	ldr	r2, [r3, #12]
 80190d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d8:	60da      	str	r2, [r3, #12]
 80190da:	e00f      	b.n	80190fc <tcp_slowtmr+0x63c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80190dc:	4b12      	ldr	r3, [pc, #72]	; (8019128 <tcp_slowtmr+0x668>)
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d006      	beq.n	80190f4 <tcp_slowtmr+0x634>
 80190e6:	4b11      	ldr	r3, [pc, #68]	; (801912c <tcp_slowtmr+0x66c>)
 80190e8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80190ec:	4914      	ldr	r1, [pc, #80]	; (8019140 <tcp_slowtmr+0x680>)
 80190ee:	4811      	ldr	r0, [pc, #68]	; (8019134 <tcp_slowtmr+0x674>)
 80190f0:	f00a fbb8 	bl	8023864 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80190f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f6:	68db      	ldr	r3, [r3, #12]
 80190f8:	4a0b      	ldr	r2, [pc, #44]	; (8019128 <tcp_slowtmr+0x668>)
 80190fa:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80190fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fe:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8019100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019102:	68db      	ldr	r3, [r3, #12]
 8019104:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019106:	69f8      	ldr	r0, [r7, #28]
 8019108:	f7fe ff04 	bl	8017f14 <tcp_free>
 801910c:	e004      	b.n	8019118 <tcp_slowtmr+0x658>
    } else {
      prev = pcb;
 801910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019110:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019114:	68db      	ldr	r3, [r3, #12]
 8019116:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801911a:	2b00      	cmp	r3, #0
 801911c:	d1a9      	bne.n	8019072 <tcp_slowtmr+0x5b2>
    }
  }
}
 801911e:	bf00      	nop
 8019120:	bf00      	nop
 8019122:	3730      	adds	r7, #48	; 0x30
 8019124:	46bd      	mov	sp, r7
 8019126:	bdb0      	pop	{r4, r5, r7, pc}
 8019128:	20015fc8 	.word	0x20015fc8
 801912c:	08029fd0 	.word	0x08029fd0
 8019130:	0802a460 	.word	0x0802a460
 8019134:	0802a014 	.word	0x0802a014
 8019138:	20015fb8 	.word	0x20015fb8
 801913c:	0802a490 	.word	0x0802a490
 8019140:	0802a4b8 	.word	0x0802a4b8

08019144 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019144:	b580      	push	{r7, lr}
 8019146:	b082      	sub	sp, #8
 8019148:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801914a:	4b2d      	ldr	r3, [pc, #180]	; (8019200 <tcp_fasttmr+0xbc>)
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	3301      	adds	r3, #1
 8019150:	b2da      	uxtb	r2, r3
 8019152:	4b2b      	ldr	r3, [pc, #172]	; (8019200 <tcp_fasttmr+0xbc>)
 8019154:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8019156:	4b2b      	ldr	r3, [pc, #172]	; (8019204 <tcp_fasttmr+0xc0>)
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801915c:	e048      	b.n	80191f0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	7f9a      	ldrb	r2, [r3, #30]
 8019162:	4b27      	ldr	r3, [pc, #156]	; (8019200 <tcp_fasttmr+0xbc>)
 8019164:	781b      	ldrb	r3, [r3, #0]
 8019166:	429a      	cmp	r2, r3
 8019168:	d03f      	beq.n	80191ea <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801916a:	4b25      	ldr	r3, [pc, #148]	; (8019200 <tcp_fasttmr+0xbc>)
 801916c:	781a      	ldrb	r2, [r3, #0]
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	8b5b      	ldrh	r3, [r3, #26]
 8019176:	f003 0301 	and.w	r3, r3, #1
 801917a:	2b00      	cmp	r3, #0
 801917c:	d010      	beq.n	80191a0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	8b5b      	ldrh	r3, [r3, #26]
 8019182:	f043 0302 	orr.w	r3, r3, #2
 8019186:	b29a      	uxth	r2, r3
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801918c:	6878      	ldr	r0, [r7, #4]
 801918e:	f004 f80d 	bl	801d1ac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	8b5b      	ldrh	r3, [r3, #26]
 8019196:	f023 0303 	bic.w	r3, r3, #3
 801919a:	b29a      	uxth	r2, r3
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	8b5b      	ldrh	r3, [r3, #26]
 80191a4:	f003 0308 	and.w	r3, r3, #8
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d009      	beq.n	80191c0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	8b5b      	ldrh	r3, [r3, #26]
 80191b0:	f023 0308 	bic.w	r3, r3, #8
 80191b4:	b29a      	uxth	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80191ba:	6878      	ldr	r0, [r7, #4]
 80191bc:	f7ff f83e 	bl	801823c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	68db      	ldr	r3, [r3, #12]
 80191c4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d00a      	beq.n	80191e4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80191ce:	4b0e      	ldr	r3, [pc, #56]	; (8019208 <tcp_fasttmr+0xc4>)
 80191d0:	2200      	movs	r2, #0
 80191d2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80191d4:	6878      	ldr	r0, [r7, #4]
 80191d6:	f000 f819 	bl	801920c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80191da:	4b0b      	ldr	r3, [pc, #44]	; (8019208 <tcp_fasttmr+0xc4>)
 80191dc:	781b      	ldrb	r3, [r3, #0]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d000      	beq.n	80191e4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80191e2:	e7b8      	b.n	8019156 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	607b      	str	r3, [r7, #4]
 80191e8:	e002      	b.n	80191f0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	68db      	ldr	r3, [r3, #12]
 80191ee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d1b3      	bne.n	801915e <tcp_fasttmr+0x1a>
    }
  }
}
 80191f6:	bf00      	nop
 80191f8:	bf00      	nop
 80191fa:	3708      	adds	r7, #8
 80191fc:	46bd      	mov	sp, r7
 80191fe:	bd80      	pop	{r7, pc}
 8019200:	20015fce 	.word	0x20015fce
 8019204:	20015fc4 	.word	0x20015fc4
 8019208:	20015fcc 	.word	0x20015fcc

0801920c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801920c:	b590      	push	{r4, r7, lr}
 801920e:	b085      	sub	sp, #20
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d109      	bne.n	801922e <tcp_process_refused_data+0x22>
 801921a:	4b37      	ldr	r3, [pc, #220]	; (80192f8 <tcp_process_refused_data+0xec>)
 801921c:	f240 6209 	movw	r2, #1545	; 0x609
 8019220:	4936      	ldr	r1, [pc, #216]	; (80192fc <tcp_process_refused_data+0xf0>)
 8019222:	4837      	ldr	r0, [pc, #220]	; (8019300 <tcp_process_refused_data+0xf4>)
 8019224:	f00a fb1e 	bl	8023864 <iprintf>
 8019228:	f06f 030f 	mvn.w	r3, #15
 801922c:	e060      	b.n	80192f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019232:	7b5b      	ldrb	r3, [r3, #13]
 8019234:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801923a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	2200      	movs	r2, #0
 8019240:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019248:	2b00      	cmp	r3, #0
 801924a:	d00b      	beq.n	8019264 <tcp_process_refused_data+0x58>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6918      	ldr	r0, [r3, #16]
 8019256:	2300      	movs	r3, #0
 8019258:	68ba      	ldr	r2, [r7, #8]
 801925a:	6879      	ldr	r1, [r7, #4]
 801925c:	47a0      	blx	r4
 801925e:	4603      	mov	r3, r0
 8019260:	73fb      	strb	r3, [r7, #15]
 8019262:	e007      	b.n	8019274 <tcp_process_refused_data+0x68>
 8019264:	2300      	movs	r3, #0
 8019266:	68ba      	ldr	r2, [r7, #8]
 8019268:	6879      	ldr	r1, [r7, #4]
 801926a:	2000      	movs	r0, #0
 801926c:	f000 f8a4 	bl	80193b8 <tcp_recv_null>
 8019270:	4603      	mov	r3, r0
 8019272:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8019274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d12a      	bne.n	80192d2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801927c:	7bbb      	ldrb	r3, [r7, #14]
 801927e:	f003 0320 	and.w	r3, r3, #32
 8019282:	2b00      	cmp	r3, #0
 8019284:	d033      	beq.n	80192ee <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801928a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801928e:	d005      	beq.n	801929c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019294:	3301      	adds	r3, #1
 8019296:	b29a      	uxth	r2, r3
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d00b      	beq.n	80192be <tcp_process_refused_data+0xb2>
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	6918      	ldr	r0, [r3, #16]
 80192b0:	2300      	movs	r3, #0
 80192b2:	2200      	movs	r2, #0
 80192b4:	6879      	ldr	r1, [r7, #4]
 80192b6:	47a0      	blx	r4
 80192b8:	4603      	mov	r3, r0
 80192ba:	73fb      	strb	r3, [r7, #15]
 80192bc:	e001      	b.n	80192c2 <tcp_process_refused_data+0xb6>
 80192be:	2300      	movs	r3, #0
 80192c0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80192c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192c6:	f113 0f0d 	cmn.w	r3, #13
 80192ca:	d110      	bne.n	80192ee <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80192cc:	f06f 030c 	mvn.w	r3, #12
 80192d0:	e00e      	b.n	80192f0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80192d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192d6:	f113 0f0d 	cmn.w	r3, #13
 80192da:	d102      	bne.n	80192e2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80192dc:	f06f 030c 	mvn.w	r3, #12
 80192e0:	e006      	b.n	80192f0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	68ba      	ldr	r2, [r7, #8]
 80192e6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80192e8:	f06f 0304 	mvn.w	r3, #4
 80192ec:	e000      	b.n	80192f0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80192ee:	2300      	movs	r3, #0
}
 80192f0:	4618      	mov	r0, r3
 80192f2:	3714      	adds	r7, #20
 80192f4:	46bd      	mov	sp, r7
 80192f6:	bd90      	pop	{r4, r7, pc}
 80192f8:	08029fd0 	.word	0x08029fd0
 80192fc:	0802a4e0 	.word	0x0802a4e0
 8019300:	0802a014 	.word	0x0802a014

08019304 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801930c:	e007      	b.n	801931e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f000 f80a 	bl	801932e <tcp_seg_free>
    seg = next;
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	2b00      	cmp	r3, #0
 8019322:	d1f4      	bne.n	801930e <tcp_segs_free+0xa>
  }
}
 8019324:	bf00      	nop
 8019326:	bf00      	nop
 8019328:	3710      	adds	r7, #16
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801932e:	b580      	push	{r7, lr}
 8019330:	b082      	sub	sp, #8
 8019332:	af00      	add	r7, sp, #0
 8019334:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d00c      	beq.n	8019356 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	685b      	ldr	r3, [r3, #4]
 8019340:	2b00      	cmp	r3, #0
 8019342:	d004      	beq.n	801934e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	685b      	ldr	r3, [r3, #4]
 8019348:	4618      	mov	r0, r3
 801934a:	f7fe f9cd 	bl	80176e8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801934e:	6879      	ldr	r1, [r7, #4]
 8019350:	2003      	movs	r0, #3
 8019352:	f7fd fb25 	bl	80169a0 <memp_free>
  }
}
 8019356:	bf00      	nop
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
	...

08019360 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d106      	bne.n	801937c <tcp_seg_copy+0x1c>
 801936e:	4b0f      	ldr	r3, [pc, #60]	; (80193ac <tcp_seg_copy+0x4c>)
 8019370:	f240 6282 	movw	r2, #1666	; 0x682
 8019374:	490e      	ldr	r1, [pc, #56]	; (80193b0 <tcp_seg_copy+0x50>)
 8019376:	480f      	ldr	r0, [pc, #60]	; (80193b4 <tcp_seg_copy+0x54>)
 8019378:	f00a fa74 	bl	8023864 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801937c:	2003      	movs	r0, #3
 801937e:	f7fd fa99 	bl	80168b4 <memp_malloc>
 8019382:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d101      	bne.n	801938e <tcp_seg_copy+0x2e>
    return NULL;
 801938a:	2300      	movs	r3, #0
 801938c:	e00a      	b.n	80193a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801938e:	2210      	movs	r2, #16
 8019390:	6879      	ldr	r1, [r7, #4]
 8019392:	68f8      	ldr	r0, [r7, #12]
 8019394:	f00b fd89 	bl	8024eaa <memcpy>
  pbuf_ref(cseg->p);
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	685b      	ldr	r3, [r3, #4]
 801939c:	4618      	mov	r0, r3
 801939e:	f7fe fa49 	bl	8017834 <pbuf_ref>
  return cseg;
 80193a2:	68fb      	ldr	r3, [r7, #12]
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3710      	adds	r7, #16
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}
 80193ac:	08029fd0 	.word	0x08029fd0
 80193b0:	0802a524 	.word	0x0802a524
 80193b4:	0802a014 	.word	0x0802a014

080193b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b084      	sub	sp, #16
 80193bc:	af00      	add	r7, sp, #0
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	60b9      	str	r1, [r7, #8]
 80193c2:	607a      	str	r2, [r7, #4]
 80193c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80193c6:	68bb      	ldr	r3, [r7, #8]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d109      	bne.n	80193e0 <tcp_recv_null+0x28>
 80193cc:	4b12      	ldr	r3, [pc, #72]	; (8019418 <tcp_recv_null+0x60>)
 80193ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80193d2:	4912      	ldr	r1, [pc, #72]	; (801941c <tcp_recv_null+0x64>)
 80193d4:	4812      	ldr	r0, [pc, #72]	; (8019420 <tcp_recv_null+0x68>)
 80193d6:	f00a fa45 	bl	8023864 <iprintf>
 80193da:	f06f 030f 	mvn.w	r3, #15
 80193de:	e016      	b.n	801940e <tcp_recv_null+0x56>

  if (p != NULL) {
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d009      	beq.n	80193fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	891b      	ldrh	r3, [r3, #8]
 80193ea:	4619      	mov	r1, r3
 80193ec:	68b8      	ldr	r0, [r7, #8]
 80193ee:	f7ff fad1 	bl	8018994 <tcp_recved>
    pbuf_free(p);
 80193f2:	6878      	ldr	r0, [r7, #4]
 80193f4:	f7fe f978 	bl	80176e8 <pbuf_free>
 80193f8:	e008      	b.n	801940c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80193fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d104      	bne.n	801940c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8019402:	68b8      	ldr	r0, [r7, #8]
 8019404:	f7fe ff84 	bl	8018310 <tcp_close>
 8019408:	4603      	mov	r3, r0
 801940a:	e000      	b.n	801940e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801940c:	2300      	movs	r3, #0
}
 801940e:	4618      	mov	r0, r3
 8019410:	3710      	adds	r7, #16
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	08029fd0 	.word	0x08029fd0
 801941c:	0802a540 	.word	0x0802a540
 8019420:	0802a014 	.word	0x0802a014

08019424 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8019424:	b580      	push	{r7, lr}
 8019426:	b086      	sub	sp, #24
 8019428:	af00      	add	r7, sp, #0
 801942a:	4603      	mov	r3, r0
 801942c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801942e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019432:	2b00      	cmp	r3, #0
 8019434:	db01      	blt.n	801943a <tcp_kill_prio+0x16>
 8019436:	79fb      	ldrb	r3, [r7, #7]
 8019438:	e000      	b.n	801943c <tcp_kill_prio+0x18>
 801943a:	237f      	movs	r3, #127	; 0x7f
 801943c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801943e:	7afb      	ldrb	r3, [r7, #11]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d034      	beq.n	80194ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8019444:	7afb      	ldrb	r3, [r7, #11]
 8019446:	3b01      	subs	r3, #1
 8019448:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801944a:	2300      	movs	r3, #0
 801944c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801944e:	2300      	movs	r3, #0
 8019450:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019452:	4b19      	ldr	r3, [pc, #100]	; (80194b8 <tcp_kill_prio+0x94>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	617b      	str	r3, [r7, #20]
 8019458:	e01f      	b.n	801949a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801945a:	697b      	ldr	r3, [r7, #20]
 801945c:	7d5b      	ldrb	r3, [r3, #21]
 801945e:	7afa      	ldrb	r2, [r7, #11]
 8019460:	429a      	cmp	r2, r3
 8019462:	d80c      	bhi.n	801947e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019464:	697b      	ldr	r3, [r7, #20]
 8019466:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8019468:	7afa      	ldrb	r2, [r7, #11]
 801946a:	429a      	cmp	r2, r3
 801946c:	d112      	bne.n	8019494 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801946e:	4b13      	ldr	r3, [pc, #76]	; (80194bc <tcp_kill_prio+0x98>)
 8019470:	681a      	ldr	r2, [r3, #0]
 8019472:	697b      	ldr	r3, [r7, #20]
 8019474:	6a1b      	ldr	r3, [r3, #32]
 8019476:	1ad3      	subs	r3, r2, r3
 8019478:	68fa      	ldr	r2, [r7, #12]
 801947a:	429a      	cmp	r2, r3
 801947c:	d80a      	bhi.n	8019494 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801947e:	4b0f      	ldr	r3, [pc, #60]	; (80194bc <tcp_kill_prio+0x98>)
 8019480:	681a      	ldr	r2, [r3, #0]
 8019482:	697b      	ldr	r3, [r7, #20]
 8019484:	6a1b      	ldr	r3, [r3, #32]
 8019486:	1ad3      	subs	r3, r2, r3
 8019488:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801948e:	697b      	ldr	r3, [r7, #20]
 8019490:	7d5b      	ldrb	r3, [r3, #21]
 8019492:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019494:	697b      	ldr	r3, [r7, #20]
 8019496:	68db      	ldr	r3, [r3, #12]
 8019498:	617b      	str	r3, [r7, #20]
 801949a:	697b      	ldr	r3, [r7, #20]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d1dc      	bne.n	801945a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80194a0:	693b      	ldr	r3, [r7, #16]
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d004      	beq.n	80194b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80194a6:	6938      	ldr	r0, [r7, #16]
 80194a8:	f7ff f878 	bl	801859c <tcp_abort>
 80194ac:	e000      	b.n	80194b0 <tcp_kill_prio+0x8c>
    return;
 80194ae:	bf00      	nop
  }
}
 80194b0:	3718      	adds	r7, #24
 80194b2:	46bd      	mov	sp, r7
 80194b4:	bd80      	pop	{r7, pc}
 80194b6:	bf00      	nop
 80194b8:	20015fc4 	.word	0x20015fc4
 80194bc:	20015fb8 	.word	0x20015fb8

080194c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	b086      	sub	sp, #24
 80194c4:	af00      	add	r7, sp, #0
 80194c6:	4603      	mov	r3, r0
 80194c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80194ca:	79fb      	ldrb	r3, [r7, #7]
 80194cc:	2b08      	cmp	r3, #8
 80194ce:	d009      	beq.n	80194e4 <tcp_kill_state+0x24>
 80194d0:	79fb      	ldrb	r3, [r7, #7]
 80194d2:	2b09      	cmp	r3, #9
 80194d4:	d006      	beq.n	80194e4 <tcp_kill_state+0x24>
 80194d6:	4b1a      	ldr	r3, [pc, #104]	; (8019540 <tcp_kill_state+0x80>)
 80194d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80194dc:	4919      	ldr	r1, [pc, #100]	; (8019544 <tcp_kill_state+0x84>)
 80194de:	481a      	ldr	r0, [pc, #104]	; (8019548 <tcp_kill_state+0x88>)
 80194e0:	f00a f9c0 	bl	8023864 <iprintf>

  inactivity = 0;
 80194e4:	2300      	movs	r3, #0
 80194e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80194e8:	2300      	movs	r3, #0
 80194ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80194ec:	4b17      	ldr	r3, [pc, #92]	; (801954c <tcp_kill_state+0x8c>)
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	617b      	str	r3, [r7, #20]
 80194f2:	e017      	b.n	8019524 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80194f4:	697b      	ldr	r3, [r7, #20]
 80194f6:	7d1b      	ldrb	r3, [r3, #20]
 80194f8:	79fa      	ldrb	r2, [r7, #7]
 80194fa:	429a      	cmp	r2, r3
 80194fc:	d10f      	bne.n	801951e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80194fe:	4b14      	ldr	r3, [pc, #80]	; (8019550 <tcp_kill_state+0x90>)
 8019500:	681a      	ldr	r2, [r3, #0]
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	6a1b      	ldr	r3, [r3, #32]
 8019506:	1ad3      	subs	r3, r2, r3
 8019508:	68fa      	ldr	r2, [r7, #12]
 801950a:	429a      	cmp	r2, r3
 801950c:	d807      	bhi.n	801951e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801950e:	4b10      	ldr	r3, [pc, #64]	; (8019550 <tcp_kill_state+0x90>)
 8019510:	681a      	ldr	r2, [r3, #0]
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	6a1b      	ldr	r3, [r3, #32]
 8019516:	1ad3      	subs	r3, r2, r3
 8019518:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801951e:	697b      	ldr	r3, [r7, #20]
 8019520:	68db      	ldr	r3, [r3, #12]
 8019522:	617b      	str	r3, [r7, #20]
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d1e4      	bne.n	80194f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801952a:	693b      	ldr	r3, [r7, #16]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d003      	beq.n	8019538 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019530:	2100      	movs	r1, #0
 8019532:	6938      	ldr	r0, [r7, #16]
 8019534:	f7fe ff74 	bl	8018420 <tcp_abandon>
  }
}
 8019538:	bf00      	nop
 801953a:	3718      	adds	r7, #24
 801953c:	46bd      	mov	sp, r7
 801953e:	bd80      	pop	{r7, pc}
 8019540:	08029fd0 	.word	0x08029fd0
 8019544:	0802a55c 	.word	0x0802a55c
 8019548:	0802a014 	.word	0x0802a014
 801954c:	20015fc4 	.word	0x20015fc4
 8019550:	20015fb8 	.word	0x20015fb8

08019554 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	b084      	sub	sp, #16
 8019558:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801955a:	2300      	movs	r3, #0
 801955c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801955e:	2300      	movs	r3, #0
 8019560:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019562:	4b12      	ldr	r3, [pc, #72]	; (80195ac <tcp_kill_timewait+0x58>)
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	60fb      	str	r3, [r7, #12]
 8019568:	e012      	b.n	8019590 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801956a:	4b11      	ldr	r3, [pc, #68]	; (80195b0 <tcp_kill_timewait+0x5c>)
 801956c:	681a      	ldr	r2, [r3, #0]
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	6a1b      	ldr	r3, [r3, #32]
 8019572:	1ad3      	subs	r3, r2, r3
 8019574:	687a      	ldr	r2, [r7, #4]
 8019576:	429a      	cmp	r2, r3
 8019578:	d807      	bhi.n	801958a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801957a:	4b0d      	ldr	r3, [pc, #52]	; (80195b0 <tcp_kill_timewait+0x5c>)
 801957c:	681a      	ldr	r2, [r3, #0]
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	6a1b      	ldr	r3, [r3, #32]
 8019582:	1ad3      	subs	r3, r2, r3
 8019584:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	68db      	ldr	r3, [r3, #12]
 801958e:	60fb      	str	r3, [r7, #12]
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d1e9      	bne.n	801956a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8019596:	68bb      	ldr	r3, [r7, #8]
 8019598:	2b00      	cmp	r3, #0
 801959a:	d002      	beq.n	80195a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801959c:	68b8      	ldr	r0, [r7, #8]
 801959e:	f7fe fffd 	bl	801859c <tcp_abort>
  }
}
 80195a2:	bf00      	nop
 80195a4:	3710      	adds	r7, #16
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}
 80195aa:	bf00      	nop
 80195ac:	20015fc8 	.word	0x20015fc8
 80195b0:	20015fb8 	.word	0x20015fb8

080195b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80195ba:	4b10      	ldr	r3, [pc, #64]	; (80195fc <tcp_handle_closepend+0x48>)
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80195c0:	e014      	b.n	80195ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	68db      	ldr	r3, [r3, #12]
 80195c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	8b5b      	ldrh	r3, [r3, #26]
 80195cc:	f003 0308 	and.w	r3, r3, #8
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d009      	beq.n	80195e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	8b5b      	ldrh	r3, [r3, #26]
 80195d8:	f023 0308 	bic.w	r3, r3, #8
 80195dc:	b29a      	uxth	r2, r3
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80195e2:	6878      	ldr	r0, [r7, #4]
 80195e4:	f7fe fe2a 	bl	801823c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80195e8:	683b      	ldr	r3, [r7, #0]
 80195ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d1e7      	bne.n	80195c2 <tcp_handle_closepend+0xe>
  }
}
 80195f2:	bf00      	nop
 80195f4:	bf00      	nop
 80195f6:	3708      	adds	r7, #8
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd80      	pop	{r7, pc}
 80195fc:	20015fc4 	.word	0x20015fc4

08019600 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	4603      	mov	r3, r0
 8019608:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801960a:	2001      	movs	r0, #1
 801960c:	f7fd f952 	bl	80168b4 <memp_malloc>
 8019610:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	2b00      	cmp	r3, #0
 8019616:	d126      	bne.n	8019666 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8019618:	f7ff ffcc 	bl	80195b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801961c:	f7ff ff9a 	bl	8019554 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019620:	2001      	movs	r0, #1
 8019622:	f7fd f947 	bl	80168b4 <memp_malloc>
 8019626:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	2b00      	cmp	r3, #0
 801962c:	d11b      	bne.n	8019666 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801962e:	2009      	movs	r0, #9
 8019630:	f7ff ff46 	bl	80194c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019634:	2001      	movs	r0, #1
 8019636:	f7fd f93d 	bl	80168b4 <memp_malloc>
 801963a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	2b00      	cmp	r3, #0
 8019640:	d111      	bne.n	8019666 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8019642:	2008      	movs	r0, #8
 8019644:	f7ff ff3c 	bl	80194c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019648:	2001      	movs	r0, #1
 801964a:	f7fd f933 	bl	80168b4 <memp_malloc>
 801964e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8019650:	68fb      	ldr	r3, [r7, #12]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d107      	bne.n	8019666 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8019656:	79fb      	ldrb	r3, [r7, #7]
 8019658:	4618      	mov	r0, r3
 801965a:	f7ff fee3 	bl	8019424 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801965e:	2001      	movs	r0, #1
 8019660:	f7fd f928 	bl	80168b4 <memp_malloc>
 8019664:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d047      	beq.n	80196fc <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801966c:	22a4      	movs	r2, #164	; 0xa4
 801966e:	2100      	movs	r1, #0
 8019670:	68f8      	ldr	r0, [r7, #12]
 8019672:	f00a fabd 	bl	8023bf0 <memset>
    pcb->prio = prio;
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	79fa      	ldrb	r2, [r7, #7]
 801967a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8019682:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801968c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8019696:	68fb      	ldr	r3, [r7, #12]
 8019698:	22ff      	movs	r2, #255	; 0xff
 801969a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80196a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	2206      	movs	r2, #6
 80196a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	2206      	movs	r2, #6
 80196b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80196b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	2201      	movs	r2, #1
 80196be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80196c2:	4b11      	ldr	r3, [pc, #68]	; (8019708 <tcp_alloc+0x108>)
 80196c4:	681a      	ldr	r2, [r3, #0]
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80196ca:	4b10      	ldr	r3, [pc, #64]	; (801970c <tcp_alloc+0x10c>)
 80196cc:	781a      	ldrb	r2, [r3, #0]
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80196d2:	68fb      	ldr	r3, [r7, #12]
 80196d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80196d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	4a0c      	ldr	r2, [pc, #48]	; (8019710 <tcp_alloc+0x110>)
 80196e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	4a0b      	ldr	r2, [pc, #44]	; (8019714 <tcp_alloc+0x114>)
 80196e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	4a0a      	ldr	r2, [pc, #40]	; (8019718 <tcp_alloc+0x118>)
 80196f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	2209      	movs	r2, #9
 80196f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80196fc:	68fb      	ldr	r3, [r7, #12]
}
 80196fe:	4618      	mov	r0, r3
 8019700:	3710      	adds	r7, #16
 8019702:	46bd      	mov	sp, r7
 8019704:	bd80      	pop	{r7, pc}
 8019706:	bf00      	nop
 8019708:	20015fb8 	.word	0x20015fb8
 801970c:	20015fce 	.word	0x20015fce
 8019710:	080193b9 	.word	0x080193b9
 8019714:	006ddd00 	.word	0x006ddd00
 8019718:	000124f8 	.word	0x000124f8

0801971c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b084      	sub	sp, #16
 8019720:	af00      	add	r7, sp, #0
 8019722:	4603      	mov	r3, r0
 8019724:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8019726:	2040      	movs	r0, #64	; 0x40
 8019728:	f7ff ff6a 	bl	8019600 <tcp_alloc>
 801972c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801972e:	68fb      	ldr	r3, [r7, #12]
}
 8019730:	4618      	mov	r0, r3
 8019732:	3710      	adds	r7, #16
 8019734:	46bd      	mov	sp, r7
 8019736:	bd80      	pop	{r7, pc}

08019738 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8019738:	b480      	push	{r7}
 801973a:	b083      	sub	sp, #12
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
 8019740:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d002      	beq.n	801974e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	683a      	ldr	r2, [r7, #0]
 801974c:	611a      	str	r2, [r3, #16]
  }
}
 801974e:	bf00      	nop
 8019750:	370c      	adds	r7, #12
 8019752:	46bd      	mov	sp, r7
 8019754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019758:	4770      	bx	lr
	...

0801975c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801975c:	b580      	push	{r7, lr}
 801975e:	b082      	sub	sp, #8
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
 8019764:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d00e      	beq.n	801978a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	7d1b      	ldrb	r3, [r3, #20]
 8019770:	2b01      	cmp	r3, #1
 8019772:	d106      	bne.n	8019782 <tcp_recv+0x26>
 8019774:	4b07      	ldr	r3, [pc, #28]	; (8019794 <tcp_recv+0x38>)
 8019776:	f240 72df 	movw	r2, #2015	; 0x7df
 801977a:	4907      	ldr	r1, [pc, #28]	; (8019798 <tcp_recv+0x3c>)
 801977c:	4807      	ldr	r0, [pc, #28]	; (801979c <tcp_recv+0x40>)
 801977e:	f00a f871 	bl	8023864 <iprintf>
    pcb->recv = recv;
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	683a      	ldr	r2, [r7, #0]
 8019786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801978a:	bf00      	nop
 801978c:	3708      	adds	r7, #8
 801978e:	46bd      	mov	sp, r7
 8019790:	bd80      	pop	{r7, pc}
 8019792:	bf00      	nop
 8019794:	08029fd0 	.word	0x08029fd0
 8019798:	0802a56c 	.word	0x0802a56c
 801979c:	0802a014 	.word	0x0802a014

080197a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80197a0:	b580      	push	{r7, lr}
 80197a2:	b082      	sub	sp, #8
 80197a4:	af00      	add	r7, sp, #0
 80197a6:	6078      	str	r0, [r7, #4]
 80197a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d00e      	beq.n	80197ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	7d1b      	ldrb	r3, [r3, #20]
 80197b4:	2b01      	cmp	r3, #1
 80197b6:	d106      	bne.n	80197c6 <tcp_sent+0x26>
 80197b8:	4b07      	ldr	r3, [pc, #28]	; (80197d8 <tcp_sent+0x38>)
 80197ba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80197be:	4907      	ldr	r1, [pc, #28]	; (80197dc <tcp_sent+0x3c>)
 80197c0:	4807      	ldr	r0, [pc, #28]	; (80197e0 <tcp_sent+0x40>)
 80197c2:	f00a f84f 	bl	8023864 <iprintf>
    pcb->sent = sent;
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	683a      	ldr	r2, [r7, #0]
 80197ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80197ce:	bf00      	nop
 80197d0:	3708      	adds	r7, #8
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	08029fd0 	.word	0x08029fd0
 80197dc:	0802a594 	.word	0x0802a594
 80197e0:	0802a014 	.word	0x0802a014

080197e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
 80197ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d00e      	beq.n	8019812 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	7d1b      	ldrb	r3, [r3, #20]
 80197f8:	2b01      	cmp	r3, #1
 80197fa:	d106      	bne.n	801980a <tcp_err+0x26>
 80197fc:	4b07      	ldr	r3, [pc, #28]	; (801981c <tcp_err+0x38>)
 80197fe:	f640 020d 	movw	r2, #2061	; 0x80d
 8019802:	4907      	ldr	r1, [pc, #28]	; (8019820 <tcp_err+0x3c>)
 8019804:	4807      	ldr	r0, [pc, #28]	; (8019824 <tcp_err+0x40>)
 8019806:	f00a f82d 	bl	8023864 <iprintf>
    pcb->errf = err;
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	683a      	ldr	r2, [r7, #0]
 801980e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8019812:	bf00      	nop
 8019814:	3708      	adds	r7, #8
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}
 801981a:	bf00      	nop
 801981c:	08029fd0 	.word	0x08029fd0
 8019820:	0802a5bc 	.word	0x0802a5bc
 8019824:	0802a014 	.word	0x0802a014

08019828 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8019828:	b480      	push	{r7}
 801982a:	b085      	sub	sp, #20
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
 8019830:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	2b00      	cmp	r3, #0
 8019836:	d008      	beq.n	801984a <tcp_accept+0x22>
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	7d1b      	ldrb	r3, [r3, #20]
 801983c:	2b01      	cmp	r3, #1
 801983e:	d104      	bne.n	801984a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	683a      	ldr	r2, [r7, #0]
 8019848:	619a      	str	r2, [r3, #24]
  }
}
 801984a:	bf00      	nop
 801984c:	3714      	adds	r7, #20
 801984e:	46bd      	mov	sp, r7
 8019850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019854:	4770      	bx	lr
	...

08019858 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	60f8      	str	r0, [r7, #12]
 8019860:	60b9      	str	r1, [r7, #8]
 8019862:	4613      	mov	r3, r2
 8019864:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d107      	bne.n	801987c <tcp_poll+0x24>
 801986c:	4b0e      	ldr	r3, [pc, #56]	; (80198a8 <tcp_poll+0x50>)
 801986e:	f640 023d 	movw	r2, #2109	; 0x83d
 8019872:	490e      	ldr	r1, [pc, #56]	; (80198ac <tcp_poll+0x54>)
 8019874:	480e      	ldr	r0, [pc, #56]	; (80198b0 <tcp_poll+0x58>)
 8019876:	f009 fff5 	bl	8023864 <iprintf>
 801987a:	e011      	b.n	80198a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	7d1b      	ldrb	r3, [r3, #20]
 8019880:	2b01      	cmp	r3, #1
 8019882:	d106      	bne.n	8019892 <tcp_poll+0x3a>
 8019884:	4b08      	ldr	r3, [pc, #32]	; (80198a8 <tcp_poll+0x50>)
 8019886:	f640 023e 	movw	r2, #2110	; 0x83e
 801988a:	490a      	ldr	r1, [pc, #40]	; (80198b4 <tcp_poll+0x5c>)
 801988c:	4808      	ldr	r0, [pc, #32]	; (80198b0 <tcp_poll+0x58>)
 801988e:	f009 ffe9 	bl	8023864 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	68ba      	ldr	r2, [r7, #8]
 8019896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801989a:	68fb      	ldr	r3, [r7, #12]
 801989c:	79fa      	ldrb	r2, [r7, #7]
 801989e:	775a      	strb	r2, [r3, #29]
}
 80198a0:	3710      	adds	r7, #16
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}
 80198a6:	bf00      	nop
 80198a8:	08029fd0 	.word	0x08029fd0
 80198ac:	0802a5e4 	.word	0x0802a5e4
 80198b0:	0802a014 	.word	0x0802a014
 80198b4:	0802a5fc 	.word	0x0802a5fc

080198b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80198b8:	b580      	push	{r7, lr}
 80198ba:	b082      	sub	sp, #8
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d107      	bne.n	80198d6 <tcp_pcb_purge+0x1e>
 80198c6:	4b21      	ldr	r3, [pc, #132]	; (801994c <tcp_pcb_purge+0x94>)
 80198c8:	f640 0251 	movw	r2, #2129	; 0x851
 80198cc:	4920      	ldr	r1, [pc, #128]	; (8019950 <tcp_pcb_purge+0x98>)
 80198ce:	4821      	ldr	r0, [pc, #132]	; (8019954 <tcp_pcb_purge+0x9c>)
 80198d0:	f009 ffc8 	bl	8023864 <iprintf>
 80198d4:	e037      	b.n	8019946 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	7d1b      	ldrb	r3, [r3, #20]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d033      	beq.n	8019946 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80198e2:	2b0a      	cmp	r3, #10
 80198e4:	d02f      	beq.n	8019946 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80198ea:	2b01      	cmp	r3, #1
 80198ec:	d02b      	beq.n	8019946 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d007      	beq.n	8019906 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80198fa:	4618      	mov	r0, r3
 80198fc:	f7fd fef4 	bl	80176e8 <pbuf_free>
      pcb->refused_data = NULL;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	2200      	movs	r2, #0
 8019904:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801990a:	2b00      	cmp	r3, #0
 801990c:	d002      	beq.n	8019914 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801990e:	6878      	ldr	r0, [r7, #4]
 8019910:	f000 f986 	bl	8019c20 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801991a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019920:	4618      	mov	r0, r3
 8019922:	f7ff fcef 	bl	8019304 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801992a:	4618      	mov	r0, r3
 801992c:	f7ff fcea 	bl	8019304 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	2200      	movs	r2, #0
 8019934:	66da      	str	r2, [r3, #108]	; 0x6c
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	2200      	movs	r2, #0
 8019942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8019946:	3708      	adds	r7, #8
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	08029fd0 	.word	0x08029fd0
 8019950:	0802a61c 	.word	0x0802a61c
 8019954:	0802a014 	.word	0x0802a014

08019958 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
 8019960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8019962:	683b      	ldr	r3, [r7, #0]
 8019964:	2b00      	cmp	r3, #0
 8019966:	d106      	bne.n	8019976 <tcp_pcb_remove+0x1e>
 8019968:	4b3e      	ldr	r3, [pc, #248]	; (8019a64 <tcp_pcb_remove+0x10c>)
 801996a:	f640 0283 	movw	r2, #2179	; 0x883
 801996e:	493e      	ldr	r1, [pc, #248]	; (8019a68 <tcp_pcb_remove+0x110>)
 8019970:	483e      	ldr	r0, [pc, #248]	; (8019a6c <tcp_pcb_remove+0x114>)
 8019972:	f009 ff77 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	2b00      	cmp	r3, #0
 801997a:	d106      	bne.n	801998a <tcp_pcb_remove+0x32>
 801997c:	4b39      	ldr	r3, [pc, #228]	; (8019a64 <tcp_pcb_remove+0x10c>)
 801997e:	f640 0284 	movw	r2, #2180	; 0x884
 8019982:	493b      	ldr	r1, [pc, #236]	; (8019a70 <tcp_pcb_remove+0x118>)
 8019984:	4839      	ldr	r0, [pc, #228]	; (8019a6c <tcp_pcb_remove+0x114>)
 8019986:	f009 ff6d 	bl	8023864 <iprintf>

  TCP_RMV(pcblist, pcb);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	683a      	ldr	r2, [r7, #0]
 8019990:	429a      	cmp	r2, r3
 8019992:	d105      	bne.n	80199a0 <tcp_pcb_remove+0x48>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	68da      	ldr	r2, [r3, #12]
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	601a      	str	r2, [r3, #0]
 801999e:	e013      	b.n	80199c8 <tcp_pcb_remove+0x70>
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	60fb      	str	r3, [r7, #12]
 80199a6:	e00c      	b.n	80199c2 <tcp_pcb_remove+0x6a>
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	68db      	ldr	r3, [r3, #12]
 80199ac:	683a      	ldr	r2, [r7, #0]
 80199ae:	429a      	cmp	r2, r3
 80199b0:	d104      	bne.n	80199bc <tcp_pcb_remove+0x64>
 80199b2:	683b      	ldr	r3, [r7, #0]
 80199b4:	68da      	ldr	r2, [r3, #12]
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	60da      	str	r2, [r3, #12]
 80199ba:	e005      	b.n	80199c8 <tcp_pcb_remove+0x70>
 80199bc:	68fb      	ldr	r3, [r7, #12]
 80199be:	68db      	ldr	r3, [r3, #12]
 80199c0:	60fb      	str	r3, [r7, #12]
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d1ef      	bne.n	80199a8 <tcp_pcb_remove+0x50>
 80199c8:	683b      	ldr	r3, [r7, #0]
 80199ca:	2200      	movs	r2, #0
 80199cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80199ce:	6838      	ldr	r0, [r7, #0]
 80199d0:	f7ff ff72 	bl	80198b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	7d1b      	ldrb	r3, [r3, #20]
 80199d8:	2b0a      	cmp	r3, #10
 80199da:	d013      	beq.n	8019a04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80199dc:	683b      	ldr	r3, [r7, #0]
 80199de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80199e0:	2b01      	cmp	r3, #1
 80199e2:	d00f      	beq.n	8019a04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	8b5b      	ldrh	r3, [r3, #26]
 80199e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d009      	beq.n	8019a04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80199f0:	683b      	ldr	r3, [r7, #0]
 80199f2:	8b5b      	ldrh	r3, [r3, #26]
 80199f4:	f043 0302 	orr.w	r3, r3, #2
 80199f8:	b29a      	uxth	r2, r3
 80199fa:	683b      	ldr	r3, [r7, #0]
 80199fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80199fe:	6838      	ldr	r0, [r7, #0]
 8019a00:	f003 fbd4 	bl	801d1ac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	7d1b      	ldrb	r3, [r3, #20]
 8019a08:	2b01      	cmp	r3, #1
 8019a0a:	d020      	beq.n	8019a4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d006      	beq.n	8019a22 <tcp_pcb_remove+0xca>
 8019a14:	4b13      	ldr	r3, [pc, #76]	; (8019a64 <tcp_pcb_remove+0x10c>)
 8019a16:	f640 0293 	movw	r2, #2195	; 0x893
 8019a1a:	4916      	ldr	r1, [pc, #88]	; (8019a74 <tcp_pcb_remove+0x11c>)
 8019a1c:	4813      	ldr	r0, [pc, #76]	; (8019a6c <tcp_pcb_remove+0x114>)
 8019a1e:	f009 ff21 	bl	8023864 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8019a22:	683b      	ldr	r3, [r7, #0]
 8019a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d006      	beq.n	8019a38 <tcp_pcb_remove+0xe0>
 8019a2a:	4b0e      	ldr	r3, [pc, #56]	; (8019a64 <tcp_pcb_remove+0x10c>)
 8019a2c:	f640 0294 	movw	r2, #2196	; 0x894
 8019a30:	4911      	ldr	r1, [pc, #68]	; (8019a78 <tcp_pcb_remove+0x120>)
 8019a32:	480e      	ldr	r0, [pc, #56]	; (8019a6c <tcp_pcb_remove+0x114>)
 8019a34:	f009 ff16 	bl	8023864 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d006      	beq.n	8019a4e <tcp_pcb_remove+0xf6>
 8019a40:	4b08      	ldr	r3, [pc, #32]	; (8019a64 <tcp_pcb_remove+0x10c>)
 8019a42:	f640 0296 	movw	r2, #2198	; 0x896
 8019a46:	490d      	ldr	r1, [pc, #52]	; (8019a7c <tcp_pcb_remove+0x124>)
 8019a48:	4808      	ldr	r0, [pc, #32]	; (8019a6c <tcp_pcb_remove+0x114>)
 8019a4a:	f009 ff0b 	bl	8023864 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019a4e:	683b      	ldr	r3, [r7, #0]
 8019a50:	2200      	movs	r2, #0
 8019a52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	2200      	movs	r2, #0
 8019a58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8019a5a:	bf00      	nop
 8019a5c:	3710      	adds	r7, #16
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	bf00      	nop
 8019a64:	08029fd0 	.word	0x08029fd0
 8019a68:	0802a638 	.word	0x0802a638
 8019a6c:	0802a014 	.word	0x0802a014
 8019a70:	0802a654 	.word	0x0802a654
 8019a74:	0802a674 	.word	0x0802a674
 8019a78:	0802a68c 	.word	0x0802a68c
 8019a7c:	0802a6a8 	.word	0x0802a6a8

08019a80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8019a80:	b580      	push	{r7, lr}
 8019a82:	b082      	sub	sp, #8
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d106      	bne.n	8019a9c <tcp_next_iss+0x1c>
 8019a8e:	4b0a      	ldr	r3, [pc, #40]	; (8019ab8 <tcp_next_iss+0x38>)
 8019a90:	f640 02af 	movw	r2, #2223	; 0x8af
 8019a94:	4909      	ldr	r1, [pc, #36]	; (8019abc <tcp_next_iss+0x3c>)
 8019a96:	480a      	ldr	r0, [pc, #40]	; (8019ac0 <tcp_next_iss+0x40>)
 8019a98:	f009 fee4 	bl	8023864 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019a9c:	4b09      	ldr	r3, [pc, #36]	; (8019ac4 <tcp_next_iss+0x44>)
 8019a9e:	681a      	ldr	r2, [r3, #0]
 8019aa0:	4b09      	ldr	r3, [pc, #36]	; (8019ac8 <tcp_next_iss+0x48>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	4413      	add	r3, r2
 8019aa6:	4a07      	ldr	r2, [pc, #28]	; (8019ac4 <tcp_next_iss+0x44>)
 8019aa8:	6013      	str	r3, [r2, #0]
  return iss;
 8019aaa:	4b06      	ldr	r3, [pc, #24]	; (8019ac4 <tcp_next_iss+0x44>)
 8019aac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	3708      	adds	r7, #8
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	08029fd0 	.word	0x08029fd0
 8019abc:	0802a6c0 	.word	0x0802a6c0
 8019ac0:	0802a014 	.word	0x0802a014
 8019ac4:	20000030 	.word	0x20000030
 8019ac8:	20015fb8 	.word	0x20015fb8

08019acc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b086      	sub	sp, #24
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	60b9      	str	r1, [r7, #8]
 8019ad6:	607a      	str	r2, [r7, #4]
 8019ad8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	d106      	bne.n	8019aee <tcp_eff_send_mss_netif+0x22>
 8019ae0:	4b14      	ldr	r3, [pc, #80]	; (8019b34 <tcp_eff_send_mss_netif+0x68>)
 8019ae2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8019ae6:	4914      	ldr	r1, [pc, #80]	; (8019b38 <tcp_eff_send_mss_netif+0x6c>)
 8019ae8:	4814      	ldr	r0, [pc, #80]	; (8019b3c <tcp_eff_send_mss_netif+0x70>)
 8019aea:	f009 febb 	bl	8023864 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8019aee:	68bb      	ldr	r3, [r7, #8]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d101      	bne.n	8019af8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8019af4:	89fb      	ldrh	r3, [r7, #14]
 8019af6:	e019      	b.n	8019b2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019afc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8019afe:	8afb      	ldrh	r3, [r7, #22]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d012      	beq.n	8019b2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8019b04:	2328      	movs	r3, #40	; 0x28
 8019b06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8019b08:	8afa      	ldrh	r2, [r7, #22]
 8019b0a:	8abb      	ldrh	r3, [r7, #20]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d904      	bls.n	8019b1a <tcp_eff_send_mss_netif+0x4e>
 8019b10:	8afa      	ldrh	r2, [r7, #22]
 8019b12:	8abb      	ldrh	r3, [r7, #20]
 8019b14:	1ad3      	subs	r3, r2, r3
 8019b16:	b29b      	uxth	r3, r3
 8019b18:	e000      	b.n	8019b1c <tcp_eff_send_mss_netif+0x50>
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8019b1e:	8a7a      	ldrh	r2, [r7, #18]
 8019b20:	89fb      	ldrh	r3, [r7, #14]
 8019b22:	4293      	cmp	r3, r2
 8019b24:	bf28      	it	cs
 8019b26:	4613      	movcs	r3, r2
 8019b28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8019b2a:	89fb      	ldrh	r3, [r7, #14]
}
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	3718      	adds	r7, #24
 8019b30:	46bd      	mov	sp, r7
 8019b32:	bd80      	pop	{r7, pc}
 8019b34:	08029fd0 	.word	0x08029fd0
 8019b38:	0802a6dc 	.word	0x0802a6dc
 8019b3c:	0802a014 	.word	0x0802a014

08019b40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b084      	sub	sp, #16
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
 8019b48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d119      	bne.n	8019b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8019b54:	4b10      	ldr	r3, [pc, #64]	; (8019b98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8019b56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8019b5a:	4910      	ldr	r1, [pc, #64]	; (8019b9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019b5c:	4810      	ldr	r0, [pc, #64]	; (8019ba0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8019b5e:	f009 fe81 	bl	8023864 <iprintf>

  while (pcb != NULL) {
 8019b62:	e011      	b.n	8019b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	681a      	ldr	r2, [r3, #0]
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d108      	bne.n	8019b82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019b70:	68fb      	ldr	r3, [r7, #12]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8019b76:	68f8      	ldr	r0, [r7, #12]
 8019b78:	f7fe fd10 	bl	801859c <tcp_abort>
      pcb = next;
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	60fb      	str	r3, [r7, #12]
 8019b80:	e002      	b.n	8019b88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	68db      	ldr	r3, [r3, #12]
 8019b86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8019b88:	68fb      	ldr	r3, [r7, #12]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d1ea      	bne.n	8019b64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019b8e:	bf00      	nop
 8019b90:	bf00      	nop
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}
 8019b98:	08029fd0 	.word	0x08029fd0
 8019b9c:	0802a704 	.word	0x0802a704
 8019ba0:	0802a014 	.word	0x0802a014

08019ba4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b084      	sub	sp, #16
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	6078      	str	r0, [r7, #4]
 8019bac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d02a      	beq.n	8019c0a <tcp_netif_ip_addr_changed+0x66>
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d026      	beq.n	8019c0a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019bbc:	4b15      	ldr	r3, [pc, #84]	; (8019c14 <tcp_netif_ip_addr_changed+0x70>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4619      	mov	r1, r3
 8019bc2:	6878      	ldr	r0, [r7, #4]
 8019bc4:	f7ff ffbc 	bl	8019b40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8019bc8:	4b13      	ldr	r3, [pc, #76]	; (8019c18 <tcp_netif_ip_addr_changed+0x74>)
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	4619      	mov	r1, r3
 8019bce:	6878      	ldr	r0, [r7, #4]
 8019bd0:	f7ff ffb6 	bl	8019b40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d017      	beq.n	8019c0a <tcp_netif_ip_addr_changed+0x66>
 8019bda:	683b      	ldr	r3, [r7, #0]
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d013      	beq.n	8019c0a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019be2:	4b0e      	ldr	r3, [pc, #56]	; (8019c1c <tcp_netif_ip_addr_changed+0x78>)
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	60fb      	str	r3, [r7, #12]
 8019be8:	e00c      	b.n	8019c04 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	681a      	ldr	r2, [r3, #0]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d103      	bne.n	8019bfe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019bf6:	683b      	ldr	r3, [r7, #0]
 8019bf8:	681a      	ldr	r2, [r3, #0]
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019bfe:	68fb      	ldr	r3, [r7, #12]
 8019c00:	68db      	ldr	r3, [r3, #12]
 8019c02:	60fb      	str	r3, [r7, #12]
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d1ef      	bne.n	8019bea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8019c0a:	bf00      	nop
 8019c0c:	3710      	adds	r7, #16
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	bd80      	pop	{r7, pc}
 8019c12:	bf00      	nop
 8019c14:	20015fc4 	.word	0x20015fc4
 8019c18:	20015fbc 	.word	0x20015fbc
 8019c1c:	20015fc0 	.word	0x20015fc0

08019c20 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b082      	sub	sp, #8
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d007      	beq.n	8019c40 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c34:	4618      	mov	r0, r3
 8019c36:	f7ff fb65 	bl	8019304 <tcp_segs_free>
    pcb->ooseq = NULL;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019c40:	bf00      	nop
 8019c42:	3708      	adds	r7, #8
 8019c44:	46bd      	mov	sp, r7
 8019c46:	bd80      	pop	{r7, pc}

08019c48 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8019c48:	b590      	push	{r4, r7, lr}
 8019c4a:	b08f      	sub	sp, #60	; 0x3c
 8019c4c:	af04      	add	r7, sp, #16
 8019c4e:	6078      	str	r0, [r7, #4]
 8019c50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 8019c52:	2300      	movs	r3, #0
 8019c54:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 8019c56:	2300      	movs	r3, #0
 8019c58:	617b      	str	r3, [r7, #20]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d105      	bne.n	8019c6c <tcp_input+0x24>
 8019c60:	4b9b      	ldr	r3, [pc, #620]	; (8019ed0 <tcp_input+0x288>)
 8019c62:	2283      	movs	r2, #131	; 0x83
 8019c64:	499b      	ldr	r1, [pc, #620]	; (8019ed4 <tcp_input+0x28c>)
 8019c66:	489c      	ldr	r0, [pc, #624]	; (8019ed8 <tcp_input+0x290>)
 8019c68:	f009 fdfc 	bl	8023864 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	685b      	ldr	r3, [r3, #4]
 8019c70:	4a9a      	ldr	r2, [pc, #616]	; (8019edc <tcp_input+0x294>)
 8019c72:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	895b      	ldrh	r3, [r3, #10]
 8019c78:	2b13      	cmp	r3, #19
 8019c7a:	f240 83db 	bls.w	801a434 <tcp_input+0x7ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019c7e:	4b98      	ldr	r3, [pc, #608]	; (8019ee0 <tcp_input+0x298>)
 8019c80:	695b      	ldr	r3, [r3, #20]
 8019c82:	4a97      	ldr	r2, [pc, #604]	; (8019ee0 <tcp_input+0x298>)
 8019c84:	6812      	ldr	r2, [r2, #0]
 8019c86:	4611      	mov	r1, r2
 8019c88:	4618      	mov	r0, r3
 8019c8a:	f006 fbbd 	bl	8020408 <ip4_addr_isbroadcast_u32>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	f040 83d1 	bne.w	801a438 <tcp_input+0x7f0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019c96:	4b92      	ldr	r3, [pc, #584]	; (8019ee0 <tcp_input+0x298>)
 8019c98:	695b      	ldr	r3, [r3, #20]
 8019c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8019c9e:	2be0      	cmp	r3, #224	; 0xe0
 8019ca0:	f000 83ca 	beq.w	801a438 <tcp_input+0x7f0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019ca4:	4b8d      	ldr	r3, [pc, #564]	; (8019edc <tcp_input+0x294>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	899b      	ldrh	r3, [r3, #12]
 8019caa:	b29b      	uxth	r3, r3
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7fb fe5f 	bl	8015970 <lwip_htons>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	0b1b      	lsrs	r3, r3, #12
 8019cb6:	b29b      	uxth	r3, r3
 8019cb8:	b2db      	uxtb	r3, r3
 8019cba:	009b      	lsls	r3, r3, #2
 8019cbc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8019cbe:	7cbb      	ldrb	r3, [r7, #18]
 8019cc0:	2b13      	cmp	r3, #19
 8019cc2:	f240 83bb 	bls.w	801a43c <tcp_input+0x7f4>
 8019cc6:	7cbb      	ldrb	r3, [r7, #18]
 8019cc8:	b29a      	uxth	r2, r3
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	891b      	ldrh	r3, [r3, #8]
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	f200 83b4 	bhi.w	801a43c <tcp_input+0x7f4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019cd4:	7cbb      	ldrb	r3, [r7, #18]
 8019cd6:	b29b      	uxth	r3, r3
 8019cd8:	3b14      	subs	r3, #20
 8019cda:	b29a      	uxth	r2, r3
 8019cdc:	4b81      	ldr	r3, [pc, #516]	; (8019ee4 <tcp_input+0x29c>)
 8019cde:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8019ce0:	4b81      	ldr	r3, [pc, #516]	; (8019ee8 <tcp_input+0x2a0>)
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	895a      	ldrh	r2, [r3, #10]
 8019cea:	7cbb      	ldrb	r3, [r7, #18]
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	429a      	cmp	r2, r3
 8019cf0:	d309      	bcc.n	8019d06 <tcp_input+0xbe>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8019cf2:	4b7c      	ldr	r3, [pc, #496]	; (8019ee4 <tcp_input+0x29c>)
 8019cf4:	881a      	ldrh	r2, [r3, #0]
 8019cf6:	4b7d      	ldr	r3, [pc, #500]	; (8019eec <tcp_input+0x2a4>)
 8019cf8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8019cfa:	7cbb      	ldrb	r3, [r7, #18]
 8019cfc:	4619      	mov	r1, r3
 8019cfe:	6878      	ldr	r0, [r7, #4]
 8019d00:	f7fd fc6c 	bl	80175dc <pbuf_remove_header>
 8019d04:	e04e      	b.n	8019da4 <tcp_input+0x15c>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d105      	bne.n	8019d1a <tcp_input+0xd2>
 8019d0e:	4b70      	ldr	r3, [pc, #448]	; (8019ed0 <tcp_input+0x288>)
 8019d10:	22c2      	movs	r2, #194	; 0xc2
 8019d12:	4977      	ldr	r1, [pc, #476]	; (8019ef0 <tcp_input+0x2a8>)
 8019d14:	4870      	ldr	r0, [pc, #448]	; (8019ed8 <tcp_input+0x290>)
 8019d16:	f009 fda5 	bl	8023864 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8019d1a:	2114      	movs	r1, #20
 8019d1c:	6878      	ldr	r0, [r7, #4]
 8019d1e:	f7fd fc5d 	bl	80175dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	895a      	ldrh	r2, [r3, #10]
 8019d26:	4b71      	ldr	r3, [pc, #452]	; (8019eec <tcp_input+0x2a4>)
 8019d28:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8019d2a:	4b6e      	ldr	r3, [pc, #440]	; (8019ee4 <tcp_input+0x29c>)
 8019d2c:	881a      	ldrh	r2, [r3, #0]
 8019d2e:	4b6f      	ldr	r3, [pc, #444]	; (8019eec <tcp_input+0x2a4>)
 8019d30:	881b      	ldrh	r3, [r3, #0]
 8019d32:	1ad3      	subs	r3, r2, r3
 8019d34:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8019d36:	4b6d      	ldr	r3, [pc, #436]	; (8019eec <tcp_input+0x2a4>)
 8019d38:	881b      	ldrh	r3, [r3, #0]
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	6878      	ldr	r0, [r7, #4]
 8019d3e:	f7fd fc4d 	bl	80175dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	895b      	ldrh	r3, [r3, #10]
 8019d48:	8a3a      	ldrh	r2, [r7, #16]
 8019d4a:	429a      	cmp	r2, r3
 8019d4c:	f200 8378 	bhi.w	801a440 <tcp_input+0x7f8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	685b      	ldr	r3, [r3, #4]
 8019d56:	4a64      	ldr	r2, [pc, #400]	; (8019ee8 <tcp_input+0x2a0>)
 8019d58:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	8a3a      	ldrh	r2, [r7, #16]
 8019d60:	4611      	mov	r1, r2
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7fd fc3a 	bl	80175dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	891a      	ldrh	r2, [r3, #8]
 8019d6c:	8a3b      	ldrh	r3, [r7, #16]
 8019d6e:	1ad3      	subs	r3, r2, r3
 8019d70:	b29a      	uxth	r2, r3
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	895b      	ldrh	r3, [r3, #10]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d005      	beq.n	8019d8a <tcp_input+0x142>
 8019d7e:	4b54      	ldr	r3, [pc, #336]	; (8019ed0 <tcp_input+0x288>)
 8019d80:	22df      	movs	r2, #223	; 0xdf
 8019d82:	495c      	ldr	r1, [pc, #368]	; (8019ef4 <tcp_input+0x2ac>)
 8019d84:	4854      	ldr	r0, [pc, #336]	; (8019ed8 <tcp_input+0x290>)
 8019d86:	f009 fd6d 	bl	8023864 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	891a      	ldrh	r2, [r3, #8]
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	891b      	ldrh	r3, [r3, #8]
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d005      	beq.n	8019da4 <tcp_input+0x15c>
 8019d98:	4b4d      	ldr	r3, [pc, #308]	; (8019ed0 <tcp_input+0x288>)
 8019d9a:	22e0      	movs	r2, #224	; 0xe0
 8019d9c:	4956      	ldr	r1, [pc, #344]	; (8019ef8 <tcp_input+0x2b0>)
 8019d9e:	484e      	ldr	r0, [pc, #312]	; (8019ed8 <tcp_input+0x290>)
 8019da0:	f009 fd60 	bl	8023864 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019da4:	4b4d      	ldr	r3, [pc, #308]	; (8019edc <tcp_input+0x294>)
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	881b      	ldrh	r3, [r3, #0]
 8019daa:	b29b      	uxth	r3, r3
 8019dac:	4a4b      	ldr	r2, [pc, #300]	; (8019edc <tcp_input+0x294>)
 8019dae:	6814      	ldr	r4, [r2, #0]
 8019db0:	4618      	mov	r0, r3
 8019db2:	f7fb fddd 	bl	8015970 <lwip_htons>
 8019db6:	4603      	mov	r3, r0
 8019db8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8019dba:	4b48      	ldr	r3, [pc, #288]	; (8019edc <tcp_input+0x294>)
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	885b      	ldrh	r3, [r3, #2]
 8019dc0:	b29b      	uxth	r3, r3
 8019dc2:	4a46      	ldr	r2, [pc, #280]	; (8019edc <tcp_input+0x294>)
 8019dc4:	6814      	ldr	r4, [r2, #0]
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7fb fdd2 	bl	8015970 <lwip_htons>
 8019dcc:	4603      	mov	r3, r0
 8019dce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8019dd0:	4b42      	ldr	r3, [pc, #264]	; (8019edc <tcp_input+0x294>)
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	685b      	ldr	r3, [r3, #4]
 8019dd6:	4a41      	ldr	r2, [pc, #260]	; (8019edc <tcp_input+0x294>)
 8019dd8:	6814      	ldr	r4, [r2, #0]
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7fb fddd 	bl	801599a <lwip_htonl>
 8019de0:	4603      	mov	r3, r0
 8019de2:	6063      	str	r3, [r4, #4]
 8019de4:	6863      	ldr	r3, [r4, #4]
 8019de6:	4a45      	ldr	r2, [pc, #276]	; (8019efc <tcp_input+0x2b4>)
 8019de8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8019dea:	4b3c      	ldr	r3, [pc, #240]	; (8019edc <tcp_input+0x294>)
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	689b      	ldr	r3, [r3, #8]
 8019df0:	4a3a      	ldr	r2, [pc, #232]	; (8019edc <tcp_input+0x294>)
 8019df2:	6814      	ldr	r4, [r2, #0]
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7fb fdd0 	bl	801599a <lwip_htonl>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	60a3      	str	r3, [r4, #8]
 8019dfe:	68a3      	ldr	r3, [r4, #8]
 8019e00:	4a3f      	ldr	r2, [pc, #252]	; (8019f00 <tcp_input+0x2b8>)
 8019e02:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8019e04:	4b35      	ldr	r3, [pc, #212]	; (8019edc <tcp_input+0x294>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	89db      	ldrh	r3, [r3, #14]
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4a33      	ldr	r2, [pc, #204]	; (8019edc <tcp_input+0x294>)
 8019e0e:	6814      	ldr	r4, [r2, #0]
 8019e10:	4618      	mov	r0, r3
 8019e12:	f7fb fdad 	bl	8015970 <lwip_htons>
 8019e16:	4603      	mov	r3, r0
 8019e18:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8019e1a:	4b30      	ldr	r3, [pc, #192]	; (8019edc <tcp_input+0x294>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	899b      	ldrh	r3, [r3, #12]
 8019e20:	b29b      	uxth	r3, r3
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7fb fda4 	bl	8015970 <lwip_htons>
 8019e28:	4603      	mov	r3, r0
 8019e2a:	b2db      	uxtb	r3, r3
 8019e2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e30:	b2da      	uxtb	r2, r3
 8019e32:	4b34      	ldr	r3, [pc, #208]	; (8019f04 <tcp_input+0x2bc>)
 8019e34:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	891a      	ldrh	r2, [r3, #8]
 8019e3a:	4b33      	ldr	r3, [pc, #204]	; (8019f08 <tcp_input+0x2c0>)
 8019e3c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8019e3e:	4b31      	ldr	r3, [pc, #196]	; (8019f04 <tcp_input+0x2bc>)
 8019e40:	781b      	ldrb	r3, [r3, #0]
 8019e42:	f003 0303 	and.w	r3, r3, #3
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d00c      	beq.n	8019e64 <tcp_input+0x21c>
    tcplen++;
 8019e4a:	4b2f      	ldr	r3, [pc, #188]	; (8019f08 <tcp_input+0x2c0>)
 8019e4c:	881b      	ldrh	r3, [r3, #0]
 8019e4e:	3301      	adds	r3, #1
 8019e50:	b29a      	uxth	r2, r3
 8019e52:	4b2d      	ldr	r3, [pc, #180]	; (8019f08 <tcp_input+0x2c0>)
 8019e54:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	891a      	ldrh	r2, [r3, #8]
 8019e5a:	4b2b      	ldr	r3, [pc, #172]	; (8019f08 <tcp_input+0x2c0>)
 8019e5c:	881b      	ldrh	r3, [r3, #0]
 8019e5e:	429a      	cmp	r2, r3
 8019e60:	f200 82f0 	bhi.w	801a444 <tcp_input+0x7fc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8019e64:	2300      	movs	r3, #0
 8019e66:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019e68:	4b28      	ldr	r3, [pc, #160]	; (8019f0c <tcp_input+0x2c4>)
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8019e6e:	e09d      	b.n	8019fac <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8019e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e72:	7d1b      	ldrb	r3, [r3, #20]
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d105      	bne.n	8019e84 <tcp_input+0x23c>
 8019e78:	4b15      	ldr	r3, [pc, #84]	; (8019ed0 <tcp_input+0x288>)
 8019e7a:	22fb      	movs	r2, #251	; 0xfb
 8019e7c:	4924      	ldr	r1, [pc, #144]	; (8019f10 <tcp_input+0x2c8>)
 8019e7e:	4816      	ldr	r0, [pc, #88]	; (8019ed8 <tcp_input+0x290>)
 8019e80:	f009 fcf0 	bl	8023864 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e86:	7d1b      	ldrb	r3, [r3, #20]
 8019e88:	2b0a      	cmp	r3, #10
 8019e8a:	d105      	bne.n	8019e98 <tcp_input+0x250>
 8019e8c:	4b10      	ldr	r3, [pc, #64]	; (8019ed0 <tcp_input+0x288>)
 8019e8e:	22fc      	movs	r2, #252	; 0xfc
 8019e90:	4920      	ldr	r1, [pc, #128]	; (8019f14 <tcp_input+0x2cc>)
 8019e92:	4811      	ldr	r0, [pc, #68]	; (8019ed8 <tcp_input+0x290>)
 8019e94:	f009 fce6 	bl	8023864 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9a:	7d1b      	ldrb	r3, [r3, #20]
 8019e9c:	2b01      	cmp	r3, #1
 8019e9e:	d105      	bne.n	8019eac <tcp_input+0x264>
 8019ea0:	4b0b      	ldr	r3, [pc, #44]	; (8019ed0 <tcp_input+0x288>)
 8019ea2:	22fd      	movs	r2, #253	; 0xfd
 8019ea4:	491c      	ldr	r1, [pc, #112]	; (8019f18 <tcp_input+0x2d0>)
 8019ea6:	480c      	ldr	r0, [pc, #48]	; (8019ed8 <tcp_input+0x290>)
 8019ea8:	f009 fcdc 	bl	8023864 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eae:	7a1b      	ldrb	r3, [r3, #8]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d033      	beq.n	8019f1c <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb6:	7a1a      	ldrb	r2, [r3, #8]
 8019eb8:	4b09      	ldr	r3, [pc, #36]	; (8019ee0 <tcp_input+0x298>)
 8019eba:	685b      	ldr	r3, [r3, #4]
 8019ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ec0:	3301      	adds	r3, #1
 8019ec2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019ec4:	429a      	cmp	r2, r3
 8019ec6:	d029      	beq.n	8019f1c <tcp_input+0x2d4>
      prev = pcb;
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eca:	623b      	str	r3, [r7, #32]
      continue;
 8019ecc:	e06b      	b.n	8019fa6 <tcp_input+0x35e>
 8019ece:	bf00      	nop
 8019ed0:	0802a738 	.word	0x0802a738
 8019ed4:	0802a76c 	.word	0x0802a76c
 8019ed8:	0802a784 	.word	0x0802a784
 8019edc:	20015fe0 	.word	0x20015fe0
 8019ee0:	2001243c 	.word	0x2001243c
 8019ee4:	20015fe4 	.word	0x20015fe4
 8019ee8:	20015fe8 	.word	0x20015fe8
 8019eec:	20015fe6 	.word	0x20015fe6
 8019ef0:	0802a7ac 	.word	0x0802a7ac
 8019ef4:	0802a7bc 	.word	0x0802a7bc
 8019ef8:	0802a7c8 	.word	0x0802a7c8
 8019efc:	20015ff0 	.word	0x20015ff0
 8019f00:	20015ff4 	.word	0x20015ff4
 8019f04:	20015ffc 	.word	0x20015ffc
 8019f08:	20015ffa 	.word	0x20015ffa
 8019f0c:	20015fc4 	.word	0x20015fc4
 8019f10:	0802a7e8 	.word	0x0802a7e8
 8019f14:	0802a810 	.word	0x0802a810
 8019f18:	0802a83c 	.word	0x0802a83c
    }

    if (pcb->remote_port == tcphdr->src &&
 8019f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f1e:	8b1a      	ldrh	r2, [r3, #24]
 8019f20:	4b77      	ldr	r3, [pc, #476]	; (801a100 <tcp_input+0x4b8>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	881b      	ldrh	r3, [r3, #0]
 8019f26:	b29b      	uxth	r3, r3
 8019f28:	429a      	cmp	r2, r3
 8019f2a:	d13a      	bne.n	8019fa2 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 8019f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f2e:	8ada      	ldrh	r2, [r3, #22]
 8019f30:	4b73      	ldr	r3, [pc, #460]	; (801a100 <tcp_input+0x4b8>)
 8019f32:	681b      	ldr	r3, [r3, #0]
 8019f34:	885b      	ldrh	r3, [r3, #2]
 8019f36:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d132      	bne.n	8019fa2 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f3e:	685a      	ldr	r2, [r3, #4]
 8019f40:	4b70      	ldr	r3, [pc, #448]	; (801a104 <tcp_input+0x4bc>)
 8019f42:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019f44:	429a      	cmp	r2, r3
 8019f46:	d12c      	bne.n	8019fa2 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f4a:	681a      	ldr	r2, [r3, #0]
 8019f4c:	4b6d      	ldr	r3, [pc, #436]	; (801a104 <tcp_input+0x4bc>)
 8019f4e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019f50:	429a      	cmp	r2, r3
 8019f52:	d126      	bne.n	8019fa2 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f56:	68db      	ldr	r3, [r3, #12]
 8019f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f5a:	429a      	cmp	r2, r3
 8019f5c:	d106      	bne.n	8019f6c <tcp_input+0x324>
 8019f5e:	4b6a      	ldr	r3, [pc, #424]	; (801a108 <tcp_input+0x4c0>)
 8019f60:	f240 120d 	movw	r2, #269	; 0x10d
 8019f64:	4969      	ldr	r1, [pc, #420]	; (801a10c <tcp_input+0x4c4>)
 8019f66:	486a      	ldr	r0, [pc, #424]	; (801a110 <tcp_input+0x4c8>)
 8019f68:	f009 fc7c 	bl	8023864 <iprintf>
      if (prev != NULL) {
 8019f6c:	6a3b      	ldr	r3, [r7, #32]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d00a      	beq.n	8019f88 <tcp_input+0x340>
        prev->next = pcb->next;
 8019f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f74:	68da      	ldr	r2, [r3, #12]
 8019f76:	6a3b      	ldr	r3, [r7, #32]
 8019f78:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8019f7a:	4b66      	ldr	r3, [pc, #408]	; (801a114 <tcp_input+0x4cc>)
 8019f7c:	681a      	ldr	r2, [r3, #0]
 8019f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f80:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019f82:	4a64      	ldr	r2, [pc, #400]	; (801a114 <tcp_input+0x4cc>)
 8019f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f86:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f8a:	68db      	ldr	r3, [r3, #12]
 8019f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f8e:	429a      	cmp	r2, r3
 8019f90:	d111      	bne.n	8019fb6 <tcp_input+0x36e>
 8019f92:	4b5d      	ldr	r3, [pc, #372]	; (801a108 <tcp_input+0x4c0>)
 8019f94:	f240 1215 	movw	r2, #277	; 0x115
 8019f98:	495f      	ldr	r1, [pc, #380]	; (801a118 <tcp_input+0x4d0>)
 8019f9a:	485d      	ldr	r0, [pc, #372]	; (801a110 <tcp_input+0x4c8>)
 8019f9c:	f009 fc62 	bl	8023864 <iprintf>
      break;
 8019fa0:	e009      	b.n	8019fb6 <tcp_input+0x36e>
    }
    prev = pcb;
 8019fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa4:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa8:	68db      	ldr	r3, [r3, #12]
 8019faa:	627b      	str	r3, [r7, #36]	; 0x24
 8019fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	f47f af5e 	bne.w	8019e70 <tcp_input+0x228>
 8019fb4:	e000      	b.n	8019fb8 <tcp_input+0x370>
      break;
 8019fb6:	bf00      	nop
  }

  if (pcb == NULL) {
 8019fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	f040 80b4 	bne.w	801a128 <tcp_input+0x4e0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019fc0:	4b56      	ldr	r3, [pc, #344]	; (801a11c <tcp_input+0x4d4>)
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8019fc6:	e03f      	b.n	801a048 <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fca:	7d1b      	ldrb	r3, [r3, #20]
 8019fcc:	2b0a      	cmp	r3, #10
 8019fce:	d006      	beq.n	8019fde <tcp_input+0x396>
 8019fd0:	4b4d      	ldr	r3, [pc, #308]	; (801a108 <tcp_input+0x4c0>)
 8019fd2:	f240 121f 	movw	r2, #287	; 0x11f
 8019fd6:	4952      	ldr	r1, [pc, #328]	; (801a120 <tcp_input+0x4d8>)
 8019fd8:	484d      	ldr	r0, [pc, #308]	; (801a110 <tcp_input+0x4c8>)
 8019fda:	f009 fc43 	bl	8023864 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe0:	7a1b      	ldrb	r3, [r3, #8]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d009      	beq.n	8019ffa <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fe8:	7a1a      	ldrb	r2, [r3, #8]
 8019fea:	4b46      	ldr	r3, [pc, #280]	; (801a104 <tcp_input+0x4bc>)
 8019fec:	685b      	ldr	r3, [r3, #4]
 8019fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ff2:	3301      	adds	r3, #1
 8019ff4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019ff6:	429a      	cmp	r2, r3
 8019ff8:	d122      	bne.n	801a040 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8019ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ffc:	8b1a      	ldrh	r2, [r3, #24]
 8019ffe:	4b40      	ldr	r3, [pc, #256]	; (801a100 <tcp_input+0x4b8>)
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	881b      	ldrh	r3, [r3, #0]
 801a004:	b29b      	uxth	r3, r3
 801a006:	429a      	cmp	r2, r3
 801a008:	d11b      	bne.n	801a042 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 801a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a00c:	8ada      	ldrh	r2, [r3, #22]
 801a00e:	4b3c      	ldr	r3, [pc, #240]	; (801a100 <tcp_input+0x4b8>)
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	885b      	ldrh	r3, [r3, #2]
 801a014:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801a016:	429a      	cmp	r2, r3
 801a018:	d113      	bne.n	801a042 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a01c:	685a      	ldr	r2, [r3, #4]
 801a01e:	4b39      	ldr	r3, [pc, #228]	; (801a104 <tcp_input+0x4bc>)
 801a020:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801a022:	429a      	cmp	r2, r3
 801a024:	d10d      	bne.n	801a042 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a028:	681a      	ldr	r2, [r3, #0]
 801a02a:	4b36      	ldr	r3, [pc, #216]	; (801a104 <tcp_input+0x4bc>)
 801a02c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a02e:	429a      	cmp	r2, r3
 801a030:	d107      	bne.n	801a042 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801a032:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a034:	f000 fb60 	bl	801a6f8 <tcp_timewait_input>
        }
        pbuf_free(p);
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f7fd fb55 	bl	80176e8 <pbuf_free>
        return;
 801a03e:	e207      	b.n	801a450 <tcp_input+0x808>
        continue;
 801a040:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	627b      	str	r3, [r7, #36]	; 0x24
 801a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a04a:	2b00      	cmp	r3, #0
 801a04c:	d1bc      	bne.n	8019fc8 <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801a04e:	2300      	movs	r3, #0
 801a050:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a052:	4b34      	ldr	r3, [pc, #208]	; (801a124 <tcp_input+0x4dc>)
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	61fb      	str	r3, [r7, #28]
 801a058:	e02e      	b.n	801a0b8 <tcp_input+0x470>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a05a:	69fb      	ldr	r3, [r7, #28]
 801a05c:	7a1b      	ldrb	r3, [r3, #8]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d00c      	beq.n	801a07c <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a062:	69fb      	ldr	r3, [r7, #28]
 801a064:	7a1a      	ldrb	r2, [r3, #8]
 801a066:	4b27      	ldr	r3, [pc, #156]	; (801a104 <tcp_input+0x4bc>)
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a06e:	3301      	adds	r3, #1
 801a070:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a072:	429a      	cmp	r2, r3
 801a074:	d002      	beq.n	801a07c <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 801a076:	69fb      	ldr	r3, [r7, #28]
 801a078:	623b      	str	r3, [r7, #32]
        continue;
 801a07a:	e01a      	b.n	801a0b2 <tcp_input+0x46a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801a07c:	69fb      	ldr	r3, [r7, #28]
 801a07e:	8ada      	ldrh	r2, [r3, #22]
 801a080:	4b1f      	ldr	r3, [pc, #124]	; (801a100 <tcp_input+0x4b8>)
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	885b      	ldrh	r3, [r3, #2]
 801a086:	b29b      	uxth	r3, r3
 801a088:	429a      	cmp	r2, r3
 801a08a:	d110      	bne.n	801a0ae <tcp_input+0x466>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a08c:	69fb      	ldr	r3, [r7, #28]
 801a08e:	681a      	ldr	r2, [r3, #0]
 801a090:	4b1c      	ldr	r3, [pc, #112]	; (801a104 <tcp_input+0x4bc>)
 801a092:	695b      	ldr	r3, [r3, #20]
 801a094:	429a      	cmp	r2, r3
 801a096:	d013      	beq.n	801a0c0 <tcp_input+0x478>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a098:	69fb      	ldr	r3, [r7, #28]
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d003      	beq.n	801a0a6 <tcp_input+0x45e>
 801a09e:	69fb      	ldr	r3, [r7, #28]
 801a0a0:	681b      	ldr	r3, [r3, #0]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d103      	bne.n	801a0ae <tcp_input+0x466>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 801a0a6:	69fb      	ldr	r3, [r7, #28]
 801a0a8:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 801a0aa:	6a3b      	ldr	r3, [r7, #32]
 801a0ac:	61bb      	str	r3, [r7, #24]
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801a0ae:	69fb      	ldr	r3, [r7, #28]
 801a0b0:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a0b2:	69fb      	ldr	r3, [r7, #28]
 801a0b4:	68db      	ldr	r3, [r3, #12]
 801a0b6:	61fb      	str	r3, [r7, #28]
 801a0b8:	69fb      	ldr	r3, [r7, #28]
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d1cd      	bne.n	801a05a <tcp_input+0x412>
 801a0be:	e000      	b.n	801a0c2 <tcp_input+0x47a>
            break;
 801a0c0:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 801a0c2:	69fb      	ldr	r3, [r7, #28]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d103      	bne.n	801a0d0 <tcp_input+0x488>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 801a0c8:	697b      	ldr	r3, [r7, #20]
 801a0ca:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 801a0cc:	69bb      	ldr	r3, [r7, #24]
 801a0ce:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801a0d0:	69fb      	ldr	r3, [r7, #28]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d028      	beq.n	801a128 <tcp_input+0x4e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801a0d6:	6a3b      	ldr	r3, [r7, #32]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d00a      	beq.n	801a0f2 <tcp_input+0x4aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a0dc:	69fb      	ldr	r3, [r7, #28]
 801a0de:	68da      	ldr	r2, [r3, #12]
 801a0e0:	6a3b      	ldr	r3, [r7, #32]
 801a0e2:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a0e4:	4b0f      	ldr	r3, [pc, #60]	; (801a124 <tcp_input+0x4dc>)
 801a0e6:	681a      	ldr	r2, [r3, #0]
 801a0e8:	69fb      	ldr	r3, [r7, #28]
 801a0ea:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a0ec:	4a0d      	ldr	r2, [pc, #52]	; (801a124 <tcp_input+0x4dc>)
 801a0ee:	69fb      	ldr	r3, [r7, #28]
 801a0f0:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801a0f2:	69f8      	ldr	r0, [r7, #28]
 801a0f4:	f000 fa02 	bl	801a4fc <tcp_listen_input>
      }
      pbuf_free(p);
 801a0f8:	6878      	ldr	r0, [r7, #4]
 801a0fa:	f7fd faf5 	bl	80176e8 <pbuf_free>
      return;
 801a0fe:	e1a7      	b.n	801a450 <tcp_input+0x808>
 801a100:	20015fe0 	.word	0x20015fe0
 801a104:	2001243c 	.word	0x2001243c
 801a108:	0802a738 	.word	0x0802a738
 801a10c:	0802a864 	.word	0x0802a864
 801a110:	0802a784 	.word	0x0802a784
 801a114:	20015fc4 	.word	0x20015fc4
 801a118:	0802a890 	.word	0x0802a890
 801a11c:	20015fc8 	.word	0x20015fc8
 801a120:	0802a8bc 	.word	0x0802a8bc
 801a124:	20015fc0 	.word	0x20015fc0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	f000 8158 	beq.w	801a3e0 <tcp_input+0x798>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801a130:	4b95      	ldr	r3, [pc, #596]	; (801a388 <tcp_input+0x740>)
 801a132:	2200      	movs	r2, #0
 801a134:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	891a      	ldrh	r2, [r3, #8]
 801a13a:	4b93      	ldr	r3, [pc, #588]	; (801a388 <tcp_input+0x740>)
 801a13c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801a13e:	4a92      	ldr	r2, [pc, #584]	; (801a388 <tcp_input+0x740>)
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801a144:	4b91      	ldr	r3, [pc, #580]	; (801a38c <tcp_input+0x744>)
 801a146:	681b      	ldr	r3, [r3, #0]
 801a148:	4a8f      	ldr	r2, [pc, #572]	; (801a388 <tcp_input+0x740>)
 801a14a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801a14c:	4b90      	ldr	r3, [pc, #576]	; (801a390 <tcp_input+0x748>)
 801a14e:	2200      	movs	r2, #0
 801a150:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801a152:	4b90      	ldr	r3, [pc, #576]	; (801a394 <tcp_input+0x74c>)
 801a154:	2200      	movs	r2, #0
 801a156:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801a158:	4b8f      	ldr	r3, [pc, #572]	; (801a398 <tcp_input+0x750>)
 801a15a:	2200      	movs	r2, #0
 801a15c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801a15e:	4b8f      	ldr	r3, [pc, #572]	; (801a39c <tcp_input+0x754>)
 801a160:	781b      	ldrb	r3, [r3, #0]
 801a162:	f003 0308 	and.w	r3, r3, #8
 801a166:	2b00      	cmp	r3, #0
 801a168:	d006      	beq.n	801a178 <tcp_input+0x530>
      p->flags |= PBUF_FLAG_PUSH;
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	7b5b      	ldrb	r3, [r3, #13]
 801a16e:	f043 0301 	orr.w	r3, r3, #1
 801a172:	b2da      	uxtb	r2, r3
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a17a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	d017      	beq.n	801a1b0 <tcp_input+0x568>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a180:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a182:	f7ff f843 	bl	801920c <tcp_process_refused_data>
 801a186:	4603      	mov	r3, r0
 801a188:	f113 0f0d 	cmn.w	r3, #13
 801a18c:	d007      	beq.n	801a19e <tcp_input+0x556>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a192:	2b00      	cmp	r3, #0
 801a194:	d00c      	beq.n	801a1b0 <tcp_input+0x568>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a196:	4b82      	ldr	r3, [pc, #520]	; (801a3a0 <tcp_input+0x758>)
 801a198:	881b      	ldrh	r3, [r3, #0]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d008      	beq.n	801a1b0 <tcp_input+0x568>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	f040 80e3 	bne.w	801a36e <tcp_input+0x726>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801a1a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1aa:	f003 fe05 	bl	801ddb8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801a1ae:	e0de      	b.n	801a36e <tcp_input+0x726>
      }
    }
    tcp_input_pcb = pcb;
 801a1b0:	4a7c      	ldr	r2, [pc, #496]	; (801a3a4 <tcp_input+0x75c>)
 801a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801a1b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1b8:	f000 fb18 	bl	801a7ec <tcp_process>
 801a1bc:	4603      	mov	r3, r0
 801a1be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801a1c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a1c4:	f113 0f0d 	cmn.w	r3, #13
 801a1c8:	f000 80d3 	beq.w	801a372 <tcp_input+0x72a>
      if (recv_flags & TF_RESET) {
 801a1cc:	4b71      	ldr	r3, [pc, #452]	; (801a394 <tcp_input+0x74c>)
 801a1ce:	781b      	ldrb	r3, [r3, #0]
 801a1d0:	f003 0308 	and.w	r3, r3, #8
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d015      	beq.n	801a204 <tcp_input+0x5bc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d008      	beq.n	801a1f4 <tcp_input+0x5ac>
 801a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1ea:	6912      	ldr	r2, [r2, #16]
 801a1ec:	f06f 010d 	mvn.w	r1, #13
 801a1f0:	4610      	mov	r0, r2
 801a1f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a1f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a1f6:	486c      	ldr	r0, [pc, #432]	; (801a3a8 <tcp_input+0x760>)
 801a1f8:	f7ff fbae 	bl	8019958 <tcp_pcb_remove>
        tcp_free(pcb);
 801a1fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1fe:	f7fd fe89 	bl	8017f14 <tcp_free>
 801a202:	e0da      	b.n	801a3ba <tcp_input+0x772>
      } else {
        err = ERR_OK;
 801a204:	2300      	movs	r3, #0
 801a206:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801a208:	4b63      	ldr	r3, [pc, #396]	; (801a398 <tcp_input+0x750>)
 801a20a:	881b      	ldrh	r3, [r3, #0]
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d01d      	beq.n	801a24c <tcp_input+0x604>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801a210:	4b61      	ldr	r3, [pc, #388]	; (801a398 <tcp_input+0x750>)
 801a212:	881b      	ldrh	r3, [r3, #0]
 801a214:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d00a      	beq.n	801a236 <tcp_input+0x5ee>
 801a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a222:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a228:	6910      	ldr	r0, [r2, #16]
 801a22a:	89fa      	ldrh	r2, [r7, #14]
 801a22c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a22e:	4798      	blx	r3
 801a230:	4603      	mov	r3, r0
 801a232:	74fb      	strb	r3, [r7, #19]
 801a234:	e001      	b.n	801a23a <tcp_input+0x5f2>
 801a236:	2300      	movs	r3, #0
 801a238:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a23a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a23e:	f113 0f0d 	cmn.w	r3, #13
 801a242:	f000 8098 	beq.w	801a376 <tcp_input+0x72e>
              goto aborted;
            }
          }
          recv_acked = 0;
 801a246:	4b54      	ldr	r3, [pc, #336]	; (801a398 <tcp_input+0x750>)
 801a248:	2200      	movs	r2, #0
 801a24a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801a24c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a24e:	f000 f915 	bl	801a47c <tcp_input_delayed_close>
 801a252:	4603      	mov	r3, r0
 801a254:	2b00      	cmp	r3, #0
 801a256:	f040 8090 	bne.w	801a37a <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801a25a:	4b4d      	ldr	r3, [pc, #308]	; (801a390 <tcp_input+0x748>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d041      	beq.n	801a2e6 <tcp_input+0x69e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a266:	2b00      	cmp	r3, #0
 801a268:	d006      	beq.n	801a278 <tcp_input+0x630>
 801a26a:	4b50      	ldr	r3, [pc, #320]	; (801a3ac <tcp_input+0x764>)
 801a26c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a270:	494f      	ldr	r1, [pc, #316]	; (801a3b0 <tcp_input+0x768>)
 801a272:	4850      	ldr	r0, [pc, #320]	; (801a3b4 <tcp_input+0x76c>)
 801a274:	f009 faf6 	bl	8023864 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a27a:	8b5b      	ldrh	r3, [r3, #26]
 801a27c:	f003 0310 	and.w	r3, r3, #16
 801a280:	2b00      	cmp	r3, #0
 801a282:	d008      	beq.n	801a296 <tcp_input+0x64e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801a284:	4b42      	ldr	r3, [pc, #264]	; (801a390 <tcp_input+0x748>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4618      	mov	r0, r3
 801a28a:	f7fd fa2d 	bl	80176e8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801a28e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a290:	f7fe f984 	bl	801859c <tcp_abort>
            goto aborted;
 801a294:	e091      	b.n	801a3ba <tcp_input+0x772>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d00c      	beq.n	801a2ba <tcp_input+0x672>
 801a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2a8:	6918      	ldr	r0, [r3, #16]
 801a2aa:	4b39      	ldr	r3, [pc, #228]	; (801a390 <tcp_input+0x748>)
 801a2ac:	681a      	ldr	r2, [r3, #0]
 801a2ae:	2300      	movs	r3, #0
 801a2b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a2b2:	47a0      	blx	r4
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	74fb      	strb	r3, [r7, #19]
 801a2b8:	e008      	b.n	801a2cc <tcp_input+0x684>
 801a2ba:	4b35      	ldr	r3, [pc, #212]	; (801a390 <tcp_input+0x748>)
 801a2bc:	681a      	ldr	r2, [r3, #0]
 801a2be:	2300      	movs	r3, #0
 801a2c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a2c2:	2000      	movs	r0, #0
 801a2c4:	f7ff f878 	bl	80193b8 <tcp_recv_null>
 801a2c8:	4603      	mov	r3, r0
 801a2ca:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801a2cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a2d0:	f113 0f0d 	cmn.w	r3, #13
 801a2d4:	d053      	beq.n	801a37e <tcp_input+0x736>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801a2d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d003      	beq.n	801a2e6 <tcp_input+0x69e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801a2de:	4b2c      	ldr	r3, [pc, #176]	; (801a390 <tcp_input+0x748>)
 801a2e0:	681a      	ldr	r2, [r3, #0]
 801a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2e4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801a2e6:	4b2b      	ldr	r3, [pc, #172]	; (801a394 <tcp_input+0x74c>)
 801a2e8:	781b      	ldrb	r3, [r3, #0]
 801a2ea:	f003 0320 	and.w	r3, r3, #32
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d030      	beq.n	801a354 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 801a2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d009      	beq.n	801a30e <tcp_input+0x6c6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a2fe:	7b5a      	ldrb	r2, [r3, #13]
 801a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a302:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a304:	f042 0220 	orr.w	r2, r2, #32
 801a308:	b2d2      	uxtb	r2, r2
 801a30a:	735a      	strb	r2, [r3, #13]
 801a30c:	e022      	b.n	801a354 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a312:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a316:	d005      	beq.n	801a324 <tcp_input+0x6dc>
              pcb->rcv_wnd++;
 801a318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a31a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a31c:	3301      	adds	r3, #1
 801a31e:	b29a      	uxth	r2, r3
 801a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a322:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d00b      	beq.n	801a346 <tcp_input+0x6fe>
 801a32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a330:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a336:	6918      	ldr	r0, [r3, #16]
 801a338:	2300      	movs	r3, #0
 801a33a:	2200      	movs	r2, #0
 801a33c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a33e:	47a0      	blx	r4
 801a340:	4603      	mov	r3, r0
 801a342:	74fb      	strb	r3, [r7, #19]
 801a344:	e001      	b.n	801a34a <tcp_input+0x702>
 801a346:	2300      	movs	r3, #0
 801a348:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801a34a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a34e:	f113 0f0d 	cmn.w	r3, #13
 801a352:	d016      	beq.n	801a382 <tcp_input+0x73a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801a354:	4b13      	ldr	r3, [pc, #76]	; (801a3a4 <tcp_input+0x75c>)
 801a356:	2200      	movs	r2, #0
 801a358:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801a35a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a35c:	f000 f88e 	bl	801a47c <tcp_input_delayed_close>
 801a360:	4603      	mov	r3, r0
 801a362:	2b00      	cmp	r3, #0
 801a364:	d128      	bne.n	801a3b8 <tcp_input+0x770>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801a366:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a368:	f002 ff20 	bl	801d1ac <tcp_output>
 801a36c:	e025      	b.n	801a3ba <tcp_input+0x772>
        goto aborted;
 801a36e:	bf00      	nop
 801a370:	e023      	b.n	801a3ba <tcp_input+0x772>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801a372:	bf00      	nop
 801a374:	e021      	b.n	801a3ba <tcp_input+0x772>
              goto aborted;
 801a376:	bf00      	nop
 801a378:	e01f      	b.n	801a3ba <tcp_input+0x772>
          goto aborted;
 801a37a:	bf00      	nop
 801a37c:	e01d      	b.n	801a3ba <tcp_input+0x772>
            goto aborted;
 801a37e:	bf00      	nop
 801a380:	e01b      	b.n	801a3ba <tcp_input+0x772>
              goto aborted;
 801a382:	bf00      	nop
 801a384:	e019      	b.n	801a3ba <tcp_input+0x772>
 801a386:	bf00      	nop
 801a388:	20015fd0 	.word	0x20015fd0
 801a38c:	20015fe0 	.word	0x20015fe0
 801a390:	20016000 	.word	0x20016000
 801a394:	20015ffd 	.word	0x20015ffd
 801a398:	20015ff8 	.word	0x20015ff8
 801a39c:	20015ffc 	.word	0x20015ffc
 801a3a0:	20015ffa 	.word	0x20015ffa
 801a3a4:	20016004 	.word	0x20016004
 801a3a8:	20015fc4 	.word	0x20015fc4
 801a3ac:	0802a738 	.word	0x0802a738
 801a3b0:	0802a8ec 	.word	0x0802a8ec
 801a3b4:	0802a784 	.word	0x0802a784
          goto aborted;
 801a3b8:	bf00      	nop
    tcp_input_pcb = NULL;
 801a3ba:	4b27      	ldr	r3, [pc, #156]	; (801a458 <tcp_input+0x810>)
 801a3bc:	2200      	movs	r2, #0
 801a3be:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801a3c0:	4b26      	ldr	r3, [pc, #152]	; (801a45c <tcp_input+0x814>)
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801a3c6:	4b26      	ldr	r3, [pc, #152]	; (801a460 <tcp_input+0x818>)
 801a3c8:	685b      	ldr	r3, [r3, #4]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d03f      	beq.n	801a44e <tcp_input+0x806>
      pbuf_free(inseg.p);
 801a3ce:	4b24      	ldr	r3, [pc, #144]	; (801a460 <tcp_input+0x818>)
 801a3d0:	685b      	ldr	r3, [r3, #4]
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	f7fd f988 	bl	80176e8 <pbuf_free>
      inseg.p = NULL;
 801a3d8:	4b21      	ldr	r3, [pc, #132]	; (801a460 <tcp_input+0x818>)
 801a3da:	2200      	movs	r2, #0
 801a3dc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801a3de:	e036      	b.n	801a44e <tcp_input+0x806>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801a3e0:	4b20      	ldr	r3, [pc, #128]	; (801a464 <tcp_input+0x81c>)
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	899b      	ldrh	r3, [r3, #12]
 801a3e6:	b29b      	uxth	r3, r3
 801a3e8:	4618      	mov	r0, r3
 801a3ea:	f7fb fac1 	bl	8015970 <lwip_htons>
 801a3ee:	4603      	mov	r3, r0
 801a3f0:	b2db      	uxtb	r3, r3
 801a3f2:	f003 0304 	and.w	r3, r3, #4
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d118      	bne.n	801a42c <tcp_input+0x7e4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a3fa:	4b1b      	ldr	r3, [pc, #108]	; (801a468 <tcp_input+0x820>)
 801a3fc:	6819      	ldr	r1, [r3, #0]
 801a3fe:	4b1b      	ldr	r3, [pc, #108]	; (801a46c <tcp_input+0x824>)
 801a400:	881b      	ldrh	r3, [r3, #0]
 801a402:	461a      	mov	r2, r3
 801a404:	4b1a      	ldr	r3, [pc, #104]	; (801a470 <tcp_input+0x828>)
 801a406:	681b      	ldr	r3, [r3, #0]
 801a408:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a40a:	4b16      	ldr	r3, [pc, #88]	; (801a464 <tcp_input+0x81c>)
 801a40c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a40e:	885b      	ldrh	r3, [r3, #2]
 801a410:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a412:	4a14      	ldr	r2, [pc, #80]	; (801a464 <tcp_input+0x81c>)
 801a414:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a416:	8812      	ldrh	r2, [r2, #0]
 801a418:	b292      	uxth	r2, r2
 801a41a:	9202      	str	r2, [sp, #8]
 801a41c:	9301      	str	r3, [sp, #4]
 801a41e:	4b15      	ldr	r3, [pc, #84]	; (801a474 <tcp_input+0x82c>)
 801a420:	9300      	str	r3, [sp, #0]
 801a422:	4b15      	ldr	r3, [pc, #84]	; (801a478 <tcp_input+0x830>)
 801a424:	4602      	mov	r2, r0
 801a426:	2000      	movs	r0, #0
 801a428:	f003 fc74 	bl	801dd14 <tcp_rst>
    pbuf_free(p);
 801a42c:	6878      	ldr	r0, [r7, #4]
 801a42e:	f7fd f95b 	bl	80176e8 <pbuf_free>
  return;
 801a432:	e00c      	b.n	801a44e <tcp_input+0x806>
    goto dropped;
 801a434:	bf00      	nop
 801a436:	e006      	b.n	801a446 <tcp_input+0x7fe>
    goto dropped;
 801a438:	bf00      	nop
 801a43a:	e004      	b.n	801a446 <tcp_input+0x7fe>
    goto dropped;
 801a43c:	bf00      	nop
 801a43e:	e002      	b.n	801a446 <tcp_input+0x7fe>
      goto dropped;
 801a440:	bf00      	nop
 801a442:	e000      	b.n	801a446 <tcp_input+0x7fe>
      goto dropped;
 801a444:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801a446:	6878      	ldr	r0, [r7, #4]
 801a448:	f7fd f94e 	bl	80176e8 <pbuf_free>
 801a44c:	e000      	b.n	801a450 <tcp_input+0x808>
  return;
 801a44e:	bf00      	nop
}
 801a450:	372c      	adds	r7, #44	; 0x2c
 801a452:	46bd      	mov	sp, r7
 801a454:	bd90      	pop	{r4, r7, pc}
 801a456:	bf00      	nop
 801a458:	20016004 	.word	0x20016004
 801a45c:	20016000 	.word	0x20016000
 801a460:	20015fd0 	.word	0x20015fd0
 801a464:	20015fe0 	.word	0x20015fe0
 801a468:	20015ff4 	.word	0x20015ff4
 801a46c:	20015ffa 	.word	0x20015ffa
 801a470:	20015ff0 	.word	0x20015ff0
 801a474:	2001244c 	.word	0x2001244c
 801a478:	20012450 	.word	0x20012450

0801a47c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b082      	sub	sp, #8
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	2b00      	cmp	r3, #0
 801a488:	d106      	bne.n	801a498 <tcp_input_delayed_close+0x1c>
 801a48a:	4b17      	ldr	r3, [pc, #92]	; (801a4e8 <tcp_input_delayed_close+0x6c>)
 801a48c:	f240 225a 	movw	r2, #602	; 0x25a
 801a490:	4916      	ldr	r1, [pc, #88]	; (801a4ec <tcp_input_delayed_close+0x70>)
 801a492:	4817      	ldr	r0, [pc, #92]	; (801a4f0 <tcp_input_delayed_close+0x74>)
 801a494:	f009 f9e6 	bl	8023864 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801a498:	4b16      	ldr	r3, [pc, #88]	; (801a4f4 <tcp_input_delayed_close+0x78>)
 801a49a:	781b      	ldrb	r3, [r3, #0]
 801a49c:	f003 0310 	and.w	r3, r3, #16
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d01c      	beq.n	801a4de <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	8b5b      	ldrh	r3, [r3, #26]
 801a4a8:	f003 0310 	and.w	r3, r3, #16
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d10d      	bne.n	801a4cc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d008      	beq.n	801a4cc <tcp_input_delayed_close+0x50>
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a4c0:	687a      	ldr	r2, [r7, #4]
 801a4c2:	6912      	ldr	r2, [r2, #16]
 801a4c4:	f06f 010e 	mvn.w	r1, #14
 801a4c8:	4610      	mov	r0, r2
 801a4ca:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a4cc:	6879      	ldr	r1, [r7, #4]
 801a4ce:	480a      	ldr	r0, [pc, #40]	; (801a4f8 <tcp_input_delayed_close+0x7c>)
 801a4d0:	f7ff fa42 	bl	8019958 <tcp_pcb_remove>
    tcp_free(pcb);
 801a4d4:	6878      	ldr	r0, [r7, #4]
 801a4d6:	f7fd fd1d 	bl	8017f14 <tcp_free>
    return 1;
 801a4da:	2301      	movs	r3, #1
 801a4dc:	e000      	b.n	801a4e0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801a4de:	2300      	movs	r3, #0
}
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	3708      	adds	r7, #8
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	bd80      	pop	{r7, pc}
 801a4e8:	0802a738 	.word	0x0802a738
 801a4ec:	0802a908 	.word	0x0802a908
 801a4f0:	0802a784 	.word	0x0802a784
 801a4f4:	20015ffd 	.word	0x20015ffd
 801a4f8:	20015fc4 	.word	0x20015fc4

0801a4fc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801a4fc:	b590      	push	{r4, r7, lr}
 801a4fe:	b08b      	sub	sp, #44	; 0x2c
 801a500:	af04      	add	r7, sp, #16
 801a502:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801a504:	4b6f      	ldr	r3, [pc, #444]	; (801a6c4 <tcp_listen_input+0x1c8>)
 801a506:	781b      	ldrb	r3, [r3, #0]
 801a508:	f003 0304 	and.w	r3, r3, #4
 801a50c:	2b00      	cmp	r3, #0
 801a50e:	f040 80d2 	bne.w	801a6b6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d106      	bne.n	801a526 <tcp_listen_input+0x2a>
 801a518:	4b6b      	ldr	r3, [pc, #428]	; (801a6c8 <tcp_listen_input+0x1cc>)
 801a51a:	f240 2281 	movw	r2, #641	; 0x281
 801a51e:	496b      	ldr	r1, [pc, #428]	; (801a6cc <tcp_listen_input+0x1d0>)
 801a520:	486b      	ldr	r0, [pc, #428]	; (801a6d0 <tcp_listen_input+0x1d4>)
 801a522:	f009 f99f 	bl	8023864 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801a526:	4b67      	ldr	r3, [pc, #412]	; (801a6c4 <tcp_listen_input+0x1c8>)
 801a528:	781b      	ldrb	r3, [r3, #0]
 801a52a:	f003 0310 	and.w	r3, r3, #16
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d019      	beq.n	801a566 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a532:	4b68      	ldr	r3, [pc, #416]	; (801a6d4 <tcp_listen_input+0x1d8>)
 801a534:	6819      	ldr	r1, [r3, #0]
 801a536:	4b68      	ldr	r3, [pc, #416]	; (801a6d8 <tcp_listen_input+0x1dc>)
 801a538:	881b      	ldrh	r3, [r3, #0]
 801a53a:	461a      	mov	r2, r3
 801a53c:	4b67      	ldr	r3, [pc, #412]	; (801a6dc <tcp_listen_input+0x1e0>)
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a542:	4b67      	ldr	r3, [pc, #412]	; (801a6e0 <tcp_listen_input+0x1e4>)
 801a544:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a546:	885b      	ldrh	r3, [r3, #2]
 801a548:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a54a:	4a65      	ldr	r2, [pc, #404]	; (801a6e0 <tcp_listen_input+0x1e4>)
 801a54c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a54e:	8812      	ldrh	r2, [r2, #0]
 801a550:	b292      	uxth	r2, r2
 801a552:	9202      	str	r2, [sp, #8]
 801a554:	9301      	str	r3, [sp, #4]
 801a556:	4b63      	ldr	r3, [pc, #396]	; (801a6e4 <tcp_listen_input+0x1e8>)
 801a558:	9300      	str	r3, [sp, #0]
 801a55a:	4b63      	ldr	r3, [pc, #396]	; (801a6e8 <tcp_listen_input+0x1ec>)
 801a55c:	4602      	mov	r2, r0
 801a55e:	6878      	ldr	r0, [r7, #4]
 801a560:	f003 fbd8 	bl	801dd14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801a564:	e0a9      	b.n	801a6ba <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801a566:	4b57      	ldr	r3, [pc, #348]	; (801a6c4 <tcp_listen_input+0x1c8>)
 801a568:	781b      	ldrb	r3, [r3, #0]
 801a56a:	f003 0302 	and.w	r3, r3, #2
 801a56e:	2b00      	cmp	r3, #0
 801a570:	f000 80a3 	beq.w	801a6ba <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	7d5b      	ldrb	r3, [r3, #21]
 801a578:	4618      	mov	r0, r3
 801a57a:	f7ff f841 	bl	8019600 <tcp_alloc>
 801a57e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801a580:	697b      	ldr	r3, [r7, #20]
 801a582:	2b00      	cmp	r3, #0
 801a584:	d111      	bne.n	801a5aa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	699b      	ldr	r3, [r3, #24]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d00a      	beq.n	801a5a4 <tcp_listen_input+0xa8>
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	699b      	ldr	r3, [r3, #24]
 801a592:	687a      	ldr	r2, [r7, #4]
 801a594:	6910      	ldr	r0, [r2, #16]
 801a596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a59a:	2100      	movs	r1, #0
 801a59c:	4798      	blx	r3
 801a59e:	4603      	mov	r3, r0
 801a5a0:	73bb      	strb	r3, [r7, #14]
      return;
 801a5a2:	e08b      	b.n	801a6bc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a5a4:	23f0      	movs	r3, #240	; 0xf0
 801a5a6:	73bb      	strb	r3, [r7, #14]
      return;
 801a5a8:	e088      	b.n	801a6bc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a5aa:	4b50      	ldr	r3, [pc, #320]	; (801a6ec <tcp_listen_input+0x1f0>)
 801a5ac:	695a      	ldr	r2, [r3, #20]
 801a5ae:	697b      	ldr	r3, [r7, #20]
 801a5b0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a5b2:	4b4e      	ldr	r3, [pc, #312]	; (801a6ec <tcp_listen_input+0x1f0>)
 801a5b4:	691a      	ldr	r2, [r3, #16]
 801a5b6:	697b      	ldr	r3, [r7, #20]
 801a5b8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	8ada      	ldrh	r2, [r3, #22]
 801a5be:	697b      	ldr	r3, [r7, #20]
 801a5c0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801a5c2:	4b47      	ldr	r3, [pc, #284]	; (801a6e0 <tcp_listen_input+0x1e4>)
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	881b      	ldrh	r3, [r3, #0]
 801a5c8:	b29a      	uxth	r2, r3
 801a5ca:	697b      	ldr	r3, [r7, #20]
 801a5cc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801a5ce:	697b      	ldr	r3, [r7, #20]
 801a5d0:	2203      	movs	r2, #3
 801a5d2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801a5d4:	4b41      	ldr	r3, [pc, #260]	; (801a6dc <tcp_listen_input+0x1e0>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	1c5a      	adds	r2, r3, #1
 801a5da:	697b      	ldr	r3, [r7, #20]
 801a5dc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a5de:	697b      	ldr	r3, [r7, #20]
 801a5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a5e2:	697b      	ldr	r3, [r7, #20]
 801a5e4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801a5e6:	6978      	ldr	r0, [r7, #20]
 801a5e8:	f7ff fa4a 	bl	8019a80 <tcp_next_iss>
 801a5ec:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801a5ee:	697b      	ldr	r3, [r7, #20]
 801a5f0:	693a      	ldr	r2, [r7, #16]
 801a5f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a5f4:	697b      	ldr	r3, [r7, #20]
 801a5f6:	693a      	ldr	r2, [r7, #16]
 801a5f8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801a5fa:	697b      	ldr	r3, [r7, #20]
 801a5fc:	693a      	ldr	r2, [r7, #16]
 801a5fe:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	693a      	ldr	r2, [r7, #16]
 801a604:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a606:	4b35      	ldr	r3, [pc, #212]	; (801a6dc <tcp_listen_input+0x1e0>)
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	1e5a      	subs	r2, r3, #1
 801a60c:	697b      	ldr	r3, [r7, #20]
 801a60e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	691a      	ldr	r2, [r3, #16]
 801a614:	697b      	ldr	r3, [r7, #20]
 801a616:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801a618:	697b      	ldr	r3, [r7, #20]
 801a61a:	687a      	ldr	r2, [r7, #4]
 801a61c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	7a5b      	ldrb	r3, [r3, #9]
 801a622:	f003 030c 	and.w	r3, r3, #12
 801a626:	b2da      	uxtb	r2, r3
 801a628:	697b      	ldr	r3, [r7, #20]
 801a62a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	7a1a      	ldrb	r2, [r3, #8]
 801a630:	697b      	ldr	r3, [r7, #20]
 801a632:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a634:	4b2e      	ldr	r3, [pc, #184]	; (801a6f0 <tcp_listen_input+0x1f4>)
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	697b      	ldr	r3, [r7, #20]
 801a63a:	60da      	str	r2, [r3, #12]
 801a63c:	4a2c      	ldr	r2, [pc, #176]	; (801a6f0 <tcp_listen_input+0x1f4>)
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	6013      	str	r3, [r2, #0]
 801a642:	f003 fd29 	bl	801e098 <tcp_timer_needed>
 801a646:	4b2b      	ldr	r3, [pc, #172]	; (801a6f4 <tcp_listen_input+0x1f8>)
 801a648:	2201      	movs	r2, #1
 801a64a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a64c:	6978      	ldr	r0, [r7, #20]
 801a64e:	f001 fd8f 	bl	801c170 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a652:	4b23      	ldr	r3, [pc, #140]	; (801a6e0 <tcp_listen_input+0x1e4>)
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	89db      	ldrh	r3, [r3, #14]
 801a658:	b29a      	uxth	r2, r3
 801a65a:	697b      	ldr	r3, [r7, #20]
 801a65c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a660:	697b      	ldr	r3, [r7, #20]
 801a662:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a666:	697b      	ldr	r3, [r7, #20]
 801a668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a66c:	697b      	ldr	r3, [r7, #20]
 801a66e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a670:	697b      	ldr	r3, [r7, #20]
 801a672:	3304      	adds	r3, #4
 801a674:	4618      	mov	r0, r3
 801a676:	f005 fc31 	bl	801fedc <ip4_route>
 801a67a:	4601      	mov	r1, r0
 801a67c:	697b      	ldr	r3, [r7, #20]
 801a67e:	3304      	adds	r3, #4
 801a680:	461a      	mov	r2, r3
 801a682:	4620      	mov	r0, r4
 801a684:	f7ff fa22 	bl	8019acc <tcp_eff_send_mss_netif>
 801a688:	4603      	mov	r3, r0
 801a68a:	461a      	mov	r2, r3
 801a68c:	697b      	ldr	r3, [r7, #20]
 801a68e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a690:	2112      	movs	r1, #18
 801a692:	6978      	ldr	r0, [r7, #20]
 801a694:	f002 fc9c 	bl	801cfd0 <tcp_enqueue_flags>
 801a698:	4603      	mov	r3, r0
 801a69a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a69c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d004      	beq.n	801a6ae <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a6a4:	2100      	movs	r1, #0
 801a6a6:	6978      	ldr	r0, [r7, #20]
 801a6a8:	f7fd feba 	bl	8018420 <tcp_abandon>
      return;
 801a6ac:	e006      	b.n	801a6bc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a6ae:	6978      	ldr	r0, [r7, #20]
 801a6b0:	f002 fd7c 	bl	801d1ac <tcp_output>
  return;
 801a6b4:	e001      	b.n	801a6ba <tcp_listen_input+0x1be>
    return;
 801a6b6:	bf00      	nop
 801a6b8:	e000      	b.n	801a6bc <tcp_listen_input+0x1c0>
  return;
 801a6ba:	bf00      	nop
}
 801a6bc:	371c      	adds	r7, #28
 801a6be:	46bd      	mov	sp, r7
 801a6c0:	bd90      	pop	{r4, r7, pc}
 801a6c2:	bf00      	nop
 801a6c4:	20015ffc 	.word	0x20015ffc
 801a6c8:	0802a738 	.word	0x0802a738
 801a6cc:	0802a930 	.word	0x0802a930
 801a6d0:	0802a784 	.word	0x0802a784
 801a6d4:	20015ff4 	.word	0x20015ff4
 801a6d8:	20015ffa 	.word	0x20015ffa
 801a6dc:	20015ff0 	.word	0x20015ff0
 801a6e0:	20015fe0 	.word	0x20015fe0
 801a6e4:	2001244c 	.word	0x2001244c
 801a6e8:	20012450 	.word	0x20012450
 801a6ec:	2001243c 	.word	0x2001243c
 801a6f0:	20015fc4 	.word	0x20015fc4
 801a6f4:	20015fcc 	.word	0x20015fcc

0801a6f8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801a6f8:	b580      	push	{r7, lr}
 801a6fa:	b086      	sub	sp, #24
 801a6fc:	af04      	add	r7, sp, #16
 801a6fe:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801a700:	4b2f      	ldr	r3, [pc, #188]	; (801a7c0 <tcp_timewait_input+0xc8>)
 801a702:	781b      	ldrb	r3, [r3, #0]
 801a704:	f003 0304 	and.w	r3, r3, #4
 801a708:	2b00      	cmp	r3, #0
 801a70a:	d153      	bne.n	801a7b4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d106      	bne.n	801a720 <tcp_timewait_input+0x28>
 801a712:	4b2c      	ldr	r3, [pc, #176]	; (801a7c4 <tcp_timewait_input+0xcc>)
 801a714:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a718:	492b      	ldr	r1, [pc, #172]	; (801a7c8 <tcp_timewait_input+0xd0>)
 801a71a:	482c      	ldr	r0, [pc, #176]	; (801a7cc <tcp_timewait_input+0xd4>)
 801a71c:	f009 f8a2 	bl	8023864 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801a720:	4b27      	ldr	r3, [pc, #156]	; (801a7c0 <tcp_timewait_input+0xc8>)
 801a722:	781b      	ldrb	r3, [r3, #0]
 801a724:	f003 0302 	and.w	r3, r3, #2
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d02a      	beq.n	801a782 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a72c:	4b28      	ldr	r3, [pc, #160]	; (801a7d0 <tcp_timewait_input+0xd8>)
 801a72e:	681a      	ldr	r2, [r3, #0]
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a734:	1ad3      	subs	r3, r2, r3
 801a736:	2b00      	cmp	r3, #0
 801a738:	db2d      	blt.n	801a796 <tcp_timewait_input+0x9e>
 801a73a:	4b25      	ldr	r3, [pc, #148]	; (801a7d0 <tcp_timewait_input+0xd8>)
 801a73c:	681a      	ldr	r2, [r3, #0]
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a742:	6879      	ldr	r1, [r7, #4]
 801a744:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a746:	440b      	add	r3, r1
 801a748:	1ad3      	subs	r3, r2, r3
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	dc23      	bgt.n	801a796 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a74e:	4b21      	ldr	r3, [pc, #132]	; (801a7d4 <tcp_timewait_input+0xdc>)
 801a750:	6819      	ldr	r1, [r3, #0]
 801a752:	4b21      	ldr	r3, [pc, #132]	; (801a7d8 <tcp_timewait_input+0xe0>)
 801a754:	881b      	ldrh	r3, [r3, #0]
 801a756:	461a      	mov	r2, r3
 801a758:	4b1d      	ldr	r3, [pc, #116]	; (801a7d0 <tcp_timewait_input+0xd8>)
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a75e:	4b1f      	ldr	r3, [pc, #124]	; (801a7dc <tcp_timewait_input+0xe4>)
 801a760:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a762:	885b      	ldrh	r3, [r3, #2]
 801a764:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a766:	4a1d      	ldr	r2, [pc, #116]	; (801a7dc <tcp_timewait_input+0xe4>)
 801a768:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a76a:	8812      	ldrh	r2, [r2, #0]
 801a76c:	b292      	uxth	r2, r2
 801a76e:	9202      	str	r2, [sp, #8]
 801a770:	9301      	str	r3, [sp, #4]
 801a772:	4b1b      	ldr	r3, [pc, #108]	; (801a7e0 <tcp_timewait_input+0xe8>)
 801a774:	9300      	str	r3, [sp, #0]
 801a776:	4b1b      	ldr	r3, [pc, #108]	; (801a7e4 <tcp_timewait_input+0xec>)
 801a778:	4602      	mov	r2, r0
 801a77a:	6878      	ldr	r0, [r7, #4]
 801a77c:	f003 faca 	bl	801dd14 <tcp_rst>
      return;
 801a780:	e01b      	b.n	801a7ba <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801a782:	4b0f      	ldr	r3, [pc, #60]	; (801a7c0 <tcp_timewait_input+0xc8>)
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	f003 0301 	and.w	r3, r3, #1
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d003      	beq.n	801a796 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801a78e:	4b16      	ldr	r3, [pc, #88]	; (801a7e8 <tcp_timewait_input+0xf0>)
 801a790:	681a      	ldr	r2, [r3, #0]
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801a796:	4b10      	ldr	r3, [pc, #64]	; (801a7d8 <tcp_timewait_input+0xe0>)
 801a798:	881b      	ldrh	r3, [r3, #0]
 801a79a:	2b00      	cmp	r3, #0
 801a79c:	d00c      	beq.n	801a7b8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	8b5b      	ldrh	r3, [r3, #26]
 801a7a2:	f043 0302 	orr.w	r3, r3, #2
 801a7a6:	b29a      	uxth	r2, r3
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a7ac:	6878      	ldr	r0, [r7, #4]
 801a7ae:	f002 fcfd 	bl	801d1ac <tcp_output>
  }
  return;
 801a7b2:	e001      	b.n	801a7b8 <tcp_timewait_input+0xc0>
    return;
 801a7b4:	bf00      	nop
 801a7b6:	e000      	b.n	801a7ba <tcp_timewait_input+0xc2>
  return;
 801a7b8:	bf00      	nop
}
 801a7ba:	3708      	adds	r7, #8
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	20015ffc 	.word	0x20015ffc
 801a7c4:	0802a738 	.word	0x0802a738
 801a7c8:	0802a950 	.word	0x0802a950
 801a7cc:	0802a784 	.word	0x0802a784
 801a7d0:	20015ff0 	.word	0x20015ff0
 801a7d4:	20015ff4 	.word	0x20015ff4
 801a7d8:	20015ffa 	.word	0x20015ffa
 801a7dc:	20015fe0 	.word	0x20015fe0
 801a7e0:	2001244c 	.word	0x2001244c
 801a7e4:	20012450 	.word	0x20012450
 801a7e8:	20015fb8 	.word	0x20015fb8

0801a7ec <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801a7ec:	b590      	push	{r4, r7, lr}
 801a7ee:	b08d      	sub	sp, #52	; 0x34
 801a7f0:	af04      	add	r7, sp, #16
 801a7f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d106      	bne.n	801a810 <tcp_process+0x24>
 801a802:	4b9d      	ldr	r3, [pc, #628]	; (801aa78 <tcp_process+0x28c>)
 801a804:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801a808:	499c      	ldr	r1, [pc, #624]	; (801aa7c <tcp_process+0x290>)
 801a80a:	489d      	ldr	r0, [pc, #628]	; (801aa80 <tcp_process+0x294>)
 801a80c:	f009 f82a 	bl	8023864 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801a810:	4b9c      	ldr	r3, [pc, #624]	; (801aa84 <tcp_process+0x298>)
 801a812:	781b      	ldrb	r3, [r3, #0]
 801a814:	f003 0304 	and.w	r3, r3, #4
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d04e      	beq.n	801a8ba <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	7d1b      	ldrb	r3, [r3, #20]
 801a820:	2b02      	cmp	r3, #2
 801a822:	d108      	bne.n	801a836 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a828:	4b97      	ldr	r3, [pc, #604]	; (801aa88 <tcp_process+0x29c>)
 801a82a:	681b      	ldr	r3, [r3, #0]
 801a82c:	429a      	cmp	r2, r3
 801a82e:	d123      	bne.n	801a878 <tcp_process+0x8c>
        acceptable = 1;
 801a830:	2301      	movs	r3, #1
 801a832:	76fb      	strb	r3, [r7, #27]
 801a834:	e020      	b.n	801a878 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a83a:	4b94      	ldr	r3, [pc, #592]	; (801aa8c <tcp_process+0x2a0>)
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	429a      	cmp	r2, r3
 801a840:	d102      	bne.n	801a848 <tcp_process+0x5c>
        acceptable = 1;
 801a842:	2301      	movs	r3, #1
 801a844:	76fb      	strb	r3, [r7, #27]
 801a846:	e017      	b.n	801a878 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a848:	4b90      	ldr	r3, [pc, #576]	; (801aa8c <tcp_process+0x2a0>)
 801a84a:	681a      	ldr	r2, [r3, #0]
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a850:	1ad3      	subs	r3, r2, r3
 801a852:	2b00      	cmp	r3, #0
 801a854:	db10      	blt.n	801a878 <tcp_process+0x8c>
 801a856:	4b8d      	ldr	r3, [pc, #564]	; (801aa8c <tcp_process+0x2a0>)
 801a858:	681a      	ldr	r2, [r3, #0]
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a85e:	6879      	ldr	r1, [r7, #4]
 801a860:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a862:	440b      	add	r3, r1
 801a864:	1ad3      	subs	r3, r2, r3
 801a866:	2b00      	cmp	r3, #0
 801a868:	dc06      	bgt.n	801a878 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	8b5b      	ldrh	r3, [r3, #26]
 801a86e:	f043 0302 	orr.w	r3, r3, #2
 801a872:	b29a      	uxth	r2, r3
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801a878:	7efb      	ldrb	r3, [r7, #27]
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	d01b      	beq.n	801a8b6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	7d1b      	ldrb	r3, [r3, #20]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d106      	bne.n	801a894 <tcp_process+0xa8>
 801a886:	4b7c      	ldr	r3, [pc, #496]	; (801aa78 <tcp_process+0x28c>)
 801a888:	f44f 724e 	mov.w	r2, #824	; 0x338
 801a88c:	4980      	ldr	r1, [pc, #512]	; (801aa90 <tcp_process+0x2a4>)
 801a88e:	487c      	ldr	r0, [pc, #496]	; (801aa80 <tcp_process+0x294>)
 801a890:	f008 ffe8 	bl	8023864 <iprintf>
      recv_flags |= TF_RESET;
 801a894:	4b7f      	ldr	r3, [pc, #508]	; (801aa94 <tcp_process+0x2a8>)
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	f043 0308 	orr.w	r3, r3, #8
 801a89c:	b2da      	uxtb	r2, r3
 801a89e:	4b7d      	ldr	r3, [pc, #500]	; (801aa94 <tcp_process+0x2a8>)
 801a8a0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	8b5b      	ldrh	r3, [r3, #26]
 801a8a6:	f023 0301 	bic.w	r3, r3, #1
 801a8aa:	b29a      	uxth	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801a8b0:	f06f 030d 	mvn.w	r3, #13
 801a8b4:	e37a      	b.n	801afac <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	e378      	b.n	801afac <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a8ba:	4b72      	ldr	r3, [pc, #456]	; (801aa84 <tcp_process+0x298>)
 801a8bc:	781b      	ldrb	r3, [r3, #0]
 801a8be:	f003 0302 	and.w	r3, r3, #2
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d010      	beq.n	801a8e8 <tcp_process+0xfc>
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	7d1b      	ldrb	r3, [r3, #20]
 801a8ca:	2b02      	cmp	r3, #2
 801a8cc:	d00c      	beq.n	801a8e8 <tcp_process+0xfc>
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	7d1b      	ldrb	r3, [r3, #20]
 801a8d2:	2b03      	cmp	r3, #3
 801a8d4:	d008      	beq.n	801a8e8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	8b5b      	ldrh	r3, [r3, #26]
 801a8da:	f043 0302 	orr.w	r3, r3, #2
 801a8de:	b29a      	uxth	r2, r3
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801a8e4:	2300      	movs	r3, #0
 801a8e6:	e361      	b.n	801afac <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	8b5b      	ldrh	r3, [r3, #26]
 801a8ec:	f003 0310 	and.w	r3, r3, #16
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d103      	bne.n	801a8fc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801a8f4:	4b68      	ldr	r3, [pc, #416]	; (801aa98 <tcp_process+0x2ac>)
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	2200      	movs	r2, #0
 801a900:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	2200      	movs	r2, #0
 801a908:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 801a90c:	6878      	ldr	r0, [r7, #4]
 801a90e:	f001 fc2f 	bl	801c170 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	7d1b      	ldrb	r3, [r3, #20]
 801a916:	3b02      	subs	r3, #2
 801a918:	2b07      	cmp	r3, #7
 801a91a:	f200 8337 	bhi.w	801af8c <tcp_process+0x7a0>
 801a91e:	a201      	add	r2, pc, #4	; (adr r2, 801a924 <tcp_process+0x138>)
 801a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a924:	0801a945 	.word	0x0801a945
 801a928:	0801ab75 	.word	0x0801ab75
 801a92c:	0801aced 	.word	0x0801aced
 801a930:	0801ad17 	.word	0x0801ad17
 801a934:	0801ae3b 	.word	0x0801ae3b
 801a938:	0801aced 	.word	0x0801aced
 801a93c:	0801aec7 	.word	0x0801aec7
 801a940:	0801af57 	.word	0x0801af57
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a944:	4b4f      	ldr	r3, [pc, #316]	; (801aa84 <tcp_process+0x298>)
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	f003 0310 	and.w	r3, r3, #16
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	f000 80e4 	beq.w	801ab1a <tcp_process+0x32e>
 801a952:	4b4c      	ldr	r3, [pc, #304]	; (801aa84 <tcp_process+0x298>)
 801a954:	781b      	ldrb	r3, [r3, #0]
 801a956:	f003 0302 	and.w	r3, r3, #2
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	f000 80dd 	beq.w	801ab1a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a964:	1c5a      	adds	r2, r3, #1
 801a966:	4b48      	ldr	r3, [pc, #288]	; (801aa88 <tcp_process+0x29c>)
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	429a      	cmp	r2, r3
 801a96c:	f040 80d5 	bne.w	801ab1a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801a970:	4b46      	ldr	r3, [pc, #280]	; (801aa8c <tcp_process+0x2a0>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	1c5a      	adds	r2, r3, #1
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801a982:	4b41      	ldr	r3, [pc, #260]	; (801aa88 <tcp_process+0x29c>)
 801a984:	681a      	ldr	r2, [r3, #0]
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801a98a:	4b44      	ldr	r3, [pc, #272]	; (801aa9c <tcp_process+0x2b0>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	89db      	ldrh	r3, [r3, #14]
 801a990:	b29a      	uxth	r2, r3
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a9a4:	4b39      	ldr	r3, [pc, #228]	; (801aa8c <tcp_process+0x2a0>)
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	1e5a      	subs	r2, r3, #1
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2204      	movs	r2, #4
 801a9b2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	3304      	adds	r3, #4
 801a9bc:	4618      	mov	r0, r3
 801a9be:	f005 fa8d 	bl	801fedc <ip4_route>
 801a9c2:	4601      	mov	r1, r0
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	3304      	adds	r3, #4
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	4620      	mov	r0, r4
 801a9cc:	f7ff f87e 	bl	8019acc <tcp_eff_send_mss_netif>
 801a9d0:	4603      	mov	r3, r0
 801a9d2:	461a      	mov	r2, r3
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9dc:	009a      	lsls	r2, r3, #2
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9e2:	005b      	lsls	r3, r3, #1
 801a9e4:	f241 111c 	movw	r1, #4380	; 0x111c
 801a9e8:	428b      	cmp	r3, r1
 801a9ea:	bf38      	it	cc
 801a9ec:	460b      	movcc	r3, r1
 801a9ee:	429a      	cmp	r2, r3
 801a9f0:	d204      	bcs.n	801a9fc <tcp_process+0x210>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	e00d      	b.n	801aa18 <tcp_process+0x22c>
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa00:	005b      	lsls	r3, r3, #1
 801aa02:	f241 121c 	movw	r2, #4380	; 0x111c
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d904      	bls.n	801aa14 <tcp_process+0x228>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aa0e:	005b      	lsls	r3, r3, #1
 801aa10:	b29b      	uxth	r3, r3
 801aa12:	e001      	b.n	801aa18 <tcp_process+0x22c>
 801aa14:	f241 131c 	movw	r3, #4380	; 0x111c
 801aa18:	687a      	ldr	r2, [r7, #4]
 801aa1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d106      	bne.n	801aa36 <tcp_process+0x24a>
 801aa28:	4b13      	ldr	r3, [pc, #76]	; (801aa78 <tcp_process+0x28c>)
 801aa2a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801aa2e:	491c      	ldr	r1, [pc, #112]	; (801aaa0 <tcp_process+0x2b4>)
 801aa30:	4813      	ldr	r0, [pc, #76]	; (801aa80 <tcp_process+0x294>)
 801aa32:	f008 ff17 	bl	8023864 <iprintf>
        --pcb->snd_queuelen;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801aa3c:	3b01      	subs	r3, #1
 801aa3e:	b29a      	uxth	r2, r3
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa4a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801aa4c:	69fb      	ldr	r3, [r7, #28]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d12a      	bne.n	801aaa8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa56:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801aa58:	69fb      	ldr	r3, [r7, #28]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d106      	bne.n	801aa6c <tcp_process+0x280>
 801aa5e:	4b06      	ldr	r3, [pc, #24]	; (801aa78 <tcp_process+0x28c>)
 801aa60:	f44f 725d 	mov.w	r2, #884	; 0x374
 801aa64:	490f      	ldr	r1, [pc, #60]	; (801aaa4 <tcp_process+0x2b8>)
 801aa66:	4806      	ldr	r0, [pc, #24]	; (801aa80 <tcp_process+0x294>)
 801aa68:	f008 fefc 	bl	8023864 <iprintf>
          pcb->unsent = rseg->next;
 801aa6c:	69fb      	ldr	r3, [r7, #28]
 801aa6e:	681a      	ldr	r2, [r3, #0]
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	66da      	str	r2, [r3, #108]	; 0x6c
 801aa74:	e01c      	b.n	801aab0 <tcp_process+0x2c4>
 801aa76:	bf00      	nop
 801aa78:	0802a738 	.word	0x0802a738
 801aa7c:	0802a970 	.word	0x0802a970
 801aa80:	0802a784 	.word	0x0802a784
 801aa84:	20015ffc 	.word	0x20015ffc
 801aa88:	20015ff4 	.word	0x20015ff4
 801aa8c:	20015ff0 	.word	0x20015ff0
 801aa90:	0802a98c 	.word	0x0802a98c
 801aa94:	20015ffd 	.word	0x20015ffd
 801aa98:	20015fb8 	.word	0x20015fb8
 801aa9c:	20015fe0 	.word	0x20015fe0
 801aaa0:	0802a9ac 	.word	0x0802a9ac
 801aaa4:	0802a9c4 	.word	0x0802a9c4
        } else {
          pcb->unacked = rseg->next;
 801aaa8:	69fb      	ldr	r3, [r7, #28]
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801aab0:	69f8      	ldr	r0, [r7, #28]
 801aab2:	f7fe fc3c 	bl	801932e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d104      	bne.n	801aac8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aac4:	861a      	strh	r2, [r3, #48]	; 0x30
 801aac6:	e006      	b.n	801aad6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	2200      	movs	r2, #0
 801aacc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	2200      	movs	r2, #0
 801aad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d00a      	beq.n	801aaf6 <tcp_process+0x30a>
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801aae6:	687a      	ldr	r2, [r7, #4]
 801aae8:	6910      	ldr	r0, [r2, #16]
 801aaea:	2200      	movs	r2, #0
 801aaec:	6879      	ldr	r1, [r7, #4]
 801aaee:	4798      	blx	r3
 801aaf0:	4603      	mov	r3, r0
 801aaf2:	76bb      	strb	r3, [r7, #26]
 801aaf4:	e001      	b.n	801aafa <tcp_process+0x30e>
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801aafa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801aafe:	f113 0f0d 	cmn.w	r3, #13
 801ab02:	d102      	bne.n	801ab0a <tcp_process+0x31e>
          return ERR_ABRT;
 801ab04:	f06f 030c 	mvn.w	r3, #12
 801ab08:	e250      	b.n	801afac <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	8b5b      	ldrh	r3, [r3, #26]
 801ab0e:	f043 0302 	orr.w	r3, r3, #2
 801ab12:	b29a      	uxth	r2, r3
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801ab18:	e23a      	b.n	801af90 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801ab1a:	4b98      	ldr	r3, [pc, #608]	; (801ad7c <tcp_process+0x590>)
 801ab1c:	781b      	ldrb	r3, [r3, #0]
 801ab1e:	f003 0310 	and.w	r3, r3, #16
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	f000 8234 	beq.w	801af90 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab28:	4b95      	ldr	r3, [pc, #596]	; (801ad80 <tcp_process+0x594>)
 801ab2a:	6819      	ldr	r1, [r3, #0]
 801ab2c:	4b95      	ldr	r3, [pc, #596]	; (801ad84 <tcp_process+0x598>)
 801ab2e:	881b      	ldrh	r3, [r3, #0]
 801ab30:	461a      	mov	r2, r3
 801ab32:	4b95      	ldr	r3, [pc, #596]	; (801ad88 <tcp_process+0x59c>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ab38:	4b94      	ldr	r3, [pc, #592]	; (801ad8c <tcp_process+0x5a0>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab3c:	885b      	ldrh	r3, [r3, #2]
 801ab3e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ab40:	4a92      	ldr	r2, [pc, #584]	; (801ad8c <tcp_process+0x5a0>)
 801ab42:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ab44:	8812      	ldrh	r2, [r2, #0]
 801ab46:	b292      	uxth	r2, r2
 801ab48:	9202      	str	r2, [sp, #8]
 801ab4a:	9301      	str	r3, [sp, #4]
 801ab4c:	4b90      	ldr	r3, [pc, #576]	; (801ad90 <tcp_process+0x5a4>)
 801ab4e:	9300      	str	r3, [sp, #0]
 801ab50:	4b90      	ldr	r3, [pc, #576]	; (801ad94 <tcp_process+0x5a8>)
 801ab52:	4602      	mov	r2, r0
 801ab54:	6878      	ldr	r0, [r7, #4]
 801ab56:	f003 f8dd 	bl	801dd14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ab60:	2b05      	cmp	r3, #5
 801ab62:	f200 8215 	bhi.w	801af90 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	2200      	movs	r2, #0
 801ab6a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801ab6c:	6878      	ldr	r0, [r7, #4]
 801ab6e:	f002 fea9 	bl	801d8c4 <tcp_rexmit_rto>
      break;
 801ab72:	e20d      	b.n	801af90 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801ab74:	4b81      	ldr	r3, [pc, #516]	; (801ad7c <tcp_process+0x590>)
 801ab76:	781b      	ldrb	r3, [r3, #0]
 801ab78:	f003 0310 	and.w	r3, r3, #16
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	f000 80a1 	beq.w	801acc4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801ab82:	4b7f      	ldr	r3, [pc, #508]	; (801ad80 <tcp_process+0x594>)
 801ab84:	681a      	ldr	r2, [r3, #0]
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ab8a:	1ad3      	subs	r3, r2, r3
 801ab8c:	3b01      	subs	r3, #1
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	db7e      	blt.n	801ac90 <tcp_process+0x4a4>
 801ab92:	4b7b      	ldr	r3, [pc, #492]	; (801ad80 <tcp_process+0x594>)
 801ab94:	681a      	ldr	r2, [r3, #0]
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ab9a:	1ad3      	subs	r3, r2, r3
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	dc77      	bgt.n	801ac90 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2204      	movs	r2, #4
 801aba4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d102      	bne.n	801abb4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801abae:	23fa      	movs	r3, #250	; 0xfa
 801abb0:	76bb      	strb	r3, [r7, #26]
 801abb2:	e01d      	b.n	801abf0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801abb8:	699b      	ldr	r3, [r3, #24]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d106      	bne.n	801abcc <tcp_process+0x3e0>
 801abbe:	4b76      	ldr	r3, [pc, #472]	; (801ad98 <tcp_process+0x5ac>)
 801abc0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801abc4:	4975      	ldr	r1, [pc, #468]	; (801ad9c <tcp_process+0x5b0>)
 801abc6:	4876      	ldr	r0, [pc, #472]	; (801ada0 <tcp_process+0x5b4>)
 801abc8:	f008 fe4c 	bl	8023864 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801abd0:	699b      	ldr	r3, [r3, #24]
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00a      	beq.n	801abec <tcp_process+0x400>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801abda:	699b      	ldr	r3, [r3, #24]
 801abdc:	687a      	ldr	r2, [r7, #4]
 801abde:	6910      	ldr	r0, [r2, #16]
 801abe0:	2200      	movs	r2, #0
 801abe2:	6879      	ldr	r1, [r7, #4]
 801abe4:	4798      	blx	r3
 801abe6:	4603      	mov	r3, r0
 801abe8:	76bb      	strb	r3, [r7, #26]
 801abea:	e001      	b.n	801abf0 <tcp_process+0x404>
 801abec:	23f0      	movs	r3, #240	; 0xf0
 801abee:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801abf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d00a      	beq.n	801ac0e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801abf8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801abfc:	f113 0f0d 	cmn.w	r3, #13
 801ac00:	d002      	beq.n	801ac08 <tcp_process+0x41c>
              tcp_abort(pcb);
 801ac02:	6878      	ldr	r0, [r7, #4]
 801ac04:	f7fd fcca 	bl	801859c <tcp_abort>
            }
            return ERR_ABRT;
 801ac08:	f06f 030c 	mvn.w	r3, #12
 801ac0c:	e1ce      	b.n	801afac <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801ac0e:	6878      	ldr	r0, [r7, #4]
 801ac10:	f000 fae0 	bl	801b1d4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801ac14:	4b63      	ldr	r3, [pc, #396]	; (801ada4 <tcp_process+0x5b8>)
 801ac16:	881b      	ldrh	r3, [r3, #0]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d005      	beq.n	801ac28 <tcp_process+0x43c>
            recv_acked--;
 801ac1c:	4b61      	ldr	r3, [pc, #388]	; (801ada4 <tcp_process+0x5b8>)
 801ac1e:	881b      	ldrh	r3, [r3, #0]
 801ac20:	3b01      	subs	r3, #1
 801ac22:	b29a      	uxth	r2, r3
 801ac24:	4b5f      	ldr	r3, [pc, #380]	; (801ada4 <tcp_process+0x5b8>)
 801ac26:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac2c:	009a      	lsls	r2, r3, #2
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac32:	005b      	lsls	r3, r3, #1
 801ac34:	f241 111c 	movw	r1, #4380	; 0x111c
 801ac38:	428b      	cmp	r3, r1
 801ac3a:	bf38      	it	cc
 801ac3c:	460b      	movcc	r3, r1
 801ac3e:	429a      	cmp	r2, r3
 801ac40:	d204      	bcs.n	801ac4c <tcp_process+0x460>
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac46:	009b      	lsls	r3, r3, #2
 801ac48:	b29b      	uxth	r3, r3
 801ac4a:	e00d      	b.n	801ac68 <tcp_process+0x47c>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	f241 121c 	movw	r2, #4380	; 0x111c
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d904      	bls.n	801ac64 <tcp_process+0x478>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ac5e:	005b      	lsls	r3, r3, #1
 801ac60:	b29b      	uxth	r3, r3
 801ac62:	e001      	b.n	801ac68 <tcp_process+0x47c>
 801ac64:	f241 131c 	movw	r3, #4380	; 0x111c
 801ac68:	687a      	ldr	r2, [r7, #4]
 801ac6a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801ac6e:	4b4e      	ldr	r3, [pc, #312]	; (801ada8 <tcp_process+0x5bc>)
 801ac70:	781b      	ldrb	r3, [r3, #0]
 801ac72:	f003 0320 	and.w	r3, r3, #32
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d037      	beq.n	801acea <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	8b5b      	ldrh	r3, [r3, #26]
 801ac7e:	f043 0302 	orr.w	r3, r3, #2
 801ac82:	b29a      	uxth	r2, r3
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	2207      	movs	r2, #7
 801ac8c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801ac8e:	e02c      	b.n	801acea <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ac90:	4b3b      	ldr	r3, [pc, #236]	; (801ad80 <tcp_process+0x594>)
 801ac92:	6819      	ldr	r1, [r3, #0]
 801ac94:	4b3b      	ldr	r3, [pc, #236]	; (801ad84 <tcp_process+0x598>)
 801ac96:	881b      	ldrh	r3, [r3, #0]
 801ac98:	461a      	mov	r2, r3
 801ac9a:	4b3b      	ldr	r3, [pc, #236]	; (801ad88 <tcp_process+0x59c>)
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aca0:	4b3a      	ldr	r3, [pc, #232]	; (801ad8c <tcp_process+0x5a0>)
 801aca2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801aca4:	885b      	ldrh	r3, [r3, #2]
 801aca6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801aca8:	4a38      	ldr	r2, [pc, #224]	; (801ad8c <tcp_process+0x5a0>)
 801acaa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801acac:	8812      	ldrh	r2, [r2, #0]
 801acae:	b292      	uxth	r2, r2
 801acb0:	9202      	str	r2, [sp, #8]
 801acb2:	9301      	str	r3, [sp, #4]
 801acb4:	4b36      	ldr	r3, [pc, #216]	; (801ad90 <tcp_process+0x5a4>)
 801acb6:	9300      	str	r3, [sp, #0]
 801acb8:	4b36      	ldr	r3, [pc, #216]	; (801ad94 <tcp_process+0x5a8>)
 801acba:	4602      	mov	r2, r0
 801acbc:	6878      	ldr	r0, [r7, #4]
 801acbe:	f003 f829 	bl	801dd14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801acc2:	e167      	b.n	801af94 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801acc4:	4b2d      	ldr	r3, [pc, #180]	; (801ad7c <tcp_process+0x590>)
 801acc6:	781b      	ldrb	r3, [r3, #0]
 801acc8:	f003 0302 	and.w	r3, r3, #2
 801accc:	2b00      	cmp	r3, #0
 801acce:	f000 8161 	beq.w	801af94 <tcp_process+0x7a8>
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801acd6:	1e5a      	subs	r2, r3, #1
 801acd8:	4b2b      	ldr	r3, [pc, #172]	; (801ad88 <tcp_process+0x59c>)
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	429a      	cmp	r2, r3
 801acde:	f040 8159 	bne.w	801af94 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801ace2:	6878      	ldr	r0, [r7, #4]
 801ace4:	f002 fe10 	bl	801d908 <tcp_rexmit>
      break;
 801ace8:	e154      	b.n	801af94 <tcp_process+0x7a8>
 801acea:	e153      	b.n	801af94 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801acec:	6878      	ldr	r0, [r7, #4]
 801acee:	f000 fa71 	bl	801b1d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801acf2:	4b2d      	ldr	r3, [pc, #180]	; (801ada8 <tcp_process+0x5bc>)
 801acf4:	781b      	ldrb	r3, [r3, #0]
 801acf6:	f003 0320 	and.w	r3, r3, #32
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	f000 814c 	beq.w	801af98 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	8b5b      	ldrh	r3, [r3, #26]
 801ad04:	f043 0302 	orr.w	r3, r3, #2
 801ad08:	b29a      	uxth	r2, r3
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	2207      	movs	r2, #7
 801ad12:	751a      	strb	r2, [r3, #20]
      }
      break;
 801ad14:	e140      	b.n	801af98 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	f000 fa5c 	bl	801b1d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801ad1c:	4b22      	ldr	r3, [pc, #136]	; (801ada8 <tcp_process+0x5bc>)
 801ad1e:	781b      	ldrb	r3, [r3, #0]
 801ad20:	f003 0320 	and.w	r3, r3, #32
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d071      	beq.n	801ae0c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ad28:	4b14      	ldr	r3, [pc, #80]	; (801ad7c <tcp_process+0x590>)
 801ad2a:	781b      	ldrb	r3, [r3, #0]
 801ad2c:	f003 0310 	and.w	r3, r3, #16
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d060      	beq.n	801adf6 <tcp_process+0x60a>
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ad38:	4b11      	ldr	r3, [pc, #68]	; (801ad80 <tcp_process+0x594>)
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	429a      	cmp	r2, r3
 801ad3e:	d15a      	bne.n	801adf6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ad44:	2b00      	cmp	r3, #0
 801ad46:	d156      	bne.n	801adf6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	8b5b      	ldrh	r3, [r3, #26]
 801ad4c:	f043 0302 	orr.w	r3, r3, #2
 801ad50:	b29a      	uxth	r2, r3
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801ad56:	6878      	ldr	r0, [r7, #4]
 801ad58:	f7fe fdae 	bl	80198b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801ad5c:	4b13      	ldr	r3, [pc, #76]	; (801adac <tcp_process+0x5c0>)
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	687a      	ldr	r2, [r7, #4]
 801ad62:	429a      	cmp	r2, r3
 801ad64:	d105      	bne.n	801ad72 <tcp_process+0x586>
 801ad66:	4b11      	ldr	r3, [pc, #68]	; (801adac <tcp_process+0x5c0>)
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	68db      	ldr	r3, [r3, #12]
 801ad6c:	4a0f      	ldr	r2, [pc, #60]	; (801adac <tcp_process+0x5c0>)
 801ad6e:	6013      	str	r3, [r2, #0]
 801ad70:	e02e      	b.n	801add0 <tcp_process+0x5e4>
 801ad72:	4b0e      	ldr	r3, [pc, #56]	; (801adac <tcp_process+0x5c0>)
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	617b      	str	r3, [r7, #20]
 801ad78:	e027      	b.n	801adca <tcp_process+0x5de>
 801ad7a:	bf00      	nop
 801ad7c:	20015ffc 	.word	0x20015ffc
 801ad80:	20015ff4 	.word	0x20015ff4
 801ad84:	20015ffa 	.word	0x20015ffa
 801ad88:	20015ff0 	.word	0x20015ff0
 801ad8c:	20015fe0 	.word	0x20015fe0
 801ad90:	2001244c 	.word	0x2001244c
 801ad94:	20012450 	.word	0x20012450
 801ad98:	0802a738 	.word	0x0802a738
 801ad9c:	0802a9d8 	.word	0x0802a9d8
 801ada0:	0802a784 	.word	0x0802a784
 801ada4:	20015ff8 	.word	0x20015ff8
 801ada8:	20015ffd 	.word	0x20015ffd
 801adac:	20015fc4 	.word	0x20015fc4
 801adb0:	697b      	ldr	r3, [r7, #20]
 801adb2:	68db      	ldr	r3, [r3, #12]
 801adb4:	687a      	ldr	r2, [r7, #4]
 801adb6:	429a      	cmp	r2, r3
 801adb8:	d104      	bne.n	801adc4 <tcp_process+0x5d8>
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	68da      	ldr	r2, [r3, #12]
 801adbe:	697b      	ldr	r3, [r7, #20]
 801adc0:	60da      	str	r2, [r3, #12]
 801adc2:	e005      	b.n	801add0 <tcp_process+0x5e4>
 801adc4:	697b      	ldr	r3, [r7, #20]
 801adc6:	68db      	ldr	r3, [r3, #12]
 801adc8:	617b      	str	r3, [r7, #20]
 801adca:	697b      	ldr	r3, [r7, #20]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	d1ef      	bne.n	801adb0 <tcp_process+0x5c4>
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2200      	movs	r2, #0
 801add4:	60da      	str	r2, [r3, #12]
 801add6:	4b77      	ldr	r3, [pc, #476]	; (801afb4 <tcp_process+0x7c8>)
 801add8:	2201      	movs	r2, #1
 801adda:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	220a      	movs	r2, #10
 801ade0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801ade2:	4b75      	ldr	r3, [pc, #468]	; (801afb8 <tcp_process+0x7cc>)
 801ade4:	681a      	ldr	r2, [r3, #0]
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	60da      	str	r2, [r3, #12]
 801adea:	4a73      	ldr	r2, [pc, #460]	; (801afb8 <tcp_process+0x7cc>)
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	6013      	str	r3, [r2, #0]
 801adf0:	f003 f952 	bl	801e098 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801adf4:	e0d2      	b.n	801af9c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	8b5b      	ldrh	r3, [r3, #26]
 801adfa:	f043 0302 	orr.w	r3, r3, #2
 801adfe:	b29a      	uxth	r2, r3
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	2208      	movs	r2, #8
 801ae08:	751a      	strb	r2, [r3, #20]
      break;
 801ae0a:	e0c7      	b.n	801af9c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ae0c:	4b6b      	ldr	r3, [pc, #428]	; (801afbc <tcp_process+0x7d0>)
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	f003 0310 	and.w	r3, r3, #16
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	f000 80c1 	beq.w	801af9c <tcp_process+0x7b0>
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ae1e:	4b68      	ldr	r3, [pc, #416]	; (801afc0 <tcp_process+0x7d4>)
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	429a      	cmp	r2, r3
 801ae24:	f040 80ba 	bne.w	801af9c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801ae2c:	2b00      	cmp	r3, #0
 801ae2e:	f040 80b5 	bne.w	801af9c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	2206      	movs	r2, #6
 801ae36:	751a      	strb	r2, [r3, #20]
      break;
 801ae38:	e0b0      	b.n	801af9c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801ae3a:	6878      	ldr	r0, [r7, #4]
 801ae3c:	f000 f9ca 	bl	801b1d4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801ae40:	4b60      	ldr	r3, [pc, #384]	; (801afc4 <tcp_process+0x7d8>)
 801ae42:	781b      	ldrb	r3, [r3, #0]
 801ae44:	f003 0320 	and.w	r3, r3, #32
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	f000 80a9 	beq.w	801afa0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	8b5b      	ldrh	r3, [r3, #26]
 801ae52:	f043 0302 	orr.w	r3, r3, #2
 801ae56:	b29a      	uxth	r2, r3
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801ae5c:	6878      	ldr	r0, [r7, #4]
 801ae5e:	f7fe fd2b 	bl	80198b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801ae62:	4b59      	ldr	r3, [pc, #356]	; (801afc8 <tcp_process+0x7dc>)
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	687a      	ldr	r2, [r7, #4]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d105      	bne.n	801ae78 <tcp_process+0x68c>
 801ae6c:	4b56      	ldr	r3, [pc, #344]	; (801afc8 <tcp_process+0x7dc>)
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	68db      	ldr	r3, [r3, #12]
 801ae72:	4a55      	ldr	r2, [pc, #340]	; (801afc8 <tcp_process+0x7dc>)
 801ae74:	6013      	str	r3, [r2, #0]
 801ae76:	e013      	b.n	801aea0 <tcp_process+0x6b4>
 801ae78:	4b53      	ldr	r3, [pc, #332]	; (801afc8 <tcp_process+0x7dc>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	613b      	str	r3, [r7, #16]
 801ae7e:	e00c      	b.n	801ae9a <tcp_process+0x6ae>
 801ae80:	693b      	ldr	r3, [r7, #16]
 801ae82:	68db      	ldr	r3, [r3, #12]
 801ae84:	687a      	ldr	r2, [r7, #4]
 801ae86:	429a      	cmp	r2, r3
 801ae88:	d104      	bne.n	801ae94 <tcp_process+0x6a8>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	68da      	ldr	r2, [r3, #12]
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	60da      	str	r2, [r3, #12]
 801ae92:	e005      	b.n	801aea0 <tcp_process+0x6b4>
 801ae94:	693b      	ldr	r3, [r7, #16]
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	613b      	str	r3, [r7, #16]
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d1ef      	bne.n	801ae80 <tcp_process+0x694>
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2200      	movs	r2, #0
 801aea4:	60da      	str	r2, [r3, #12]
 801aea6:	4b43      	ldr	r3, [pc, #268]	; (801afb4 <tcp_process+0x7c8>)
 801aea8:	2201      	movs	r2, #1
 801aeaa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	220a      	movs	r2, #10
 801aeb0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801aeb2:	4b41      	ldr	r3, [pc, #260]	; (801afb8 <tcp_process+0x7cc>)
 801aeb4:	681a      	ldr	r2, [r3, #0]
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	60da      	str	r2, [r3, #12]
 801aeba:	4a3f      	ldr	r2, [pc, #252]	; (801afb8 <tcp_process+0x7cc>)
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	6013      	str	r3, [r2, #0]
 801aec0:	f003 f8ea 	bl	801e098 <tcp_timer_needed>
      }
      break;
 801aec4:	e06c      	b.n	801afa0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801aec6:	6878      	ldr	r0, [r7, #4]
 801aec8:	f000 f984 	bl	801b1d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aecc:	4b3b      	ldr	r3, [pc, #236]	; (801afbc <tcp_process+0x7d0>)
 801aece:	781b      	ldrb	r3, [r3, #0]
 801aed0:	f003 0310 	and.w	r3, r3, #16
 801aed4:	2b00      	cmp	r3, #0
 801aed6:	d065      	beq.n	801afa4 <tcp_process+0x7b8>
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aedc:	4b38      	ldr	r3, [pc, #224]	; (801afc0 <tcp_process+0x7d4>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	429a      	cmp	r2, r3
 801aee2:	d15f      	bne.n	801afa4 <tcp_process+0x7b8>
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d15b      	bne.n	801afa4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801aeec:	6878      	ldr	r0, [r7, #4]
 801aeee:	f7fe fce3 	bl	80198b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801aef2:	4b35      	ldr	r3, [pc, #212]	; (801afc8 <tcp_process+0x7dc>)
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	687a      	ldr	r2, [r7, #4]
 801aef8:	429a      	cmp	r2, r3
 801aefa:	d105      	bne.n	801af08 <tcp_process+0x71c>
 801aefc:	4b32      	ldr	r3, [pc, #200]	; (801afc8 <tcp_process+0x7dc>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	68db      	ldr	r3, [r3, #12]
 801af02:	4a31      	ldr	r2, [pc, #196]	; (801afc8 <tcp_process+0x7dc>)
 801af04:	6013      	str	r3, [r2, #0]
 801af06:	e013      	b.n	801af30 <tcp_process+0x744>
 801af08:	4b2f      	ldr	r3, [pc, #188]	; (801afc8 <tcp_process+0x7dc>)
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	60fb      	str	r3, [r7, #12]
 801af0e:	e00c      	b.n	801af2a <tcp_process+0x73e>
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	68db      	ldr	r3, [r3, #12]
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	429a      	cmp	r2, r3
 801af18:	d104      	bne.n	801af24 <tcp_process+0x738>
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	68da      	ldr	r2, [r3, #12]
 801af1e:	68fb      	ldr	r3, [r7, #12]
 801af20:	60da      	str	r2, [r3, #12]
 801af22:	e005      	b.n	801af30 <tcp_process+0x744>
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	68db      	ldr	r3, [r3, #12]
 801af28:	60fb      	str	r3, [r7, #12]
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d1ef      	bne.n	801af10 <tcp_process+0x724>
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	2200      	movs	r2, #0
 801af34:	60da      	str	r2, [r3, #12]
 801af36:	4b1f      	ldr	r3, [pc, #124]	; (801afb4 <tcp_process+0x7c8>)
 801af38:	2201      	movs	r2, #1
 801af3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	220a      	movs	r2, #10
 801af40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801af42:	4b1d      	ldr	r3, [pc, #116]	; (801afb8 <tcp_process+0x7cc>)
 801af44:	681a      	ldr	r2, [r3, #0]
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	60da      	str	r2, [r3, #12]
 801af4a:	4a1b      	ldr	r2, [pc, #108]	; (801afb8 <tcp_process+0x7cc>)
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	6013      	str	r3, [r2, #0]
 801af50:	f003 f8a2 	bl	801e098 <tcp_timer_needed>
      }
      break;
 801af54:	e026      	b.n	801afa4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801af56:	6878      	ldr	r0, [r7, #4]
 801af58:	f000 f93c 	bl	801b1d4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801af5c:	4b17      	ldr	r3, [pc, #92]	; (801afbc <tcp_process+0x7d0>)
 801af5e:	781b      	ldrb	r3, [r3, #0]
 801af60:	f003 0310 	and.w	r3, r3, #16
 801af64:	2b00      	cmp	r3, #0
 801af66:	d01f      	beq.n	801afa8 <tcp_process+0x7bc>
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801af6c:	4b14      	ldr	r3, [pc, #80]	; (801afc0 <tcp_process+0x7d4>)
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	429a      	cmp	r2, r3
 801af72:	d119      	bne.n	801afa8 <tcp_process+0x7bc>
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d115      	bne.n	801afa8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801af7c:	4b11      	ldr	r3, [pc, #68]	; (801afc4 <tcp_process+0x7d8>)
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	f043 0310 	orr.w	r3, r3, #16
 801af84:	b2da      	uxtb	r2, r3
 801af86:	4b0f      	ldr	r3, [pc, #60]	; (801afc4 <tcp_process+0x7d8>)
 801af88:	701a      	strb	r2, [r3, #0]
      }
      break;
 801af8a:	e00d      	b.n	801afa8 <tcp_process+0x7bc>
    default:
      break;
 801af8c:	bf00      	nop
 801af8e:	e00c      	b.n	801afaa <tcp_process+0x7be>
      break;
 801af90:	bf00      	nop
 801af92:	e00a      	b.n	801afaa <tcp_process+0x7be>
      break;
 801af94:	bf00      	nop
 801af96:	e008      	b.n	801afaa <tcp_process+0x7be>
      break;
 801af98:	bf00      	nop
 801af9a:	e006      	b.n	801afaa <tcp_process+0x7be>
      break;
 801af9c:	bf00      	nop
 801af9e:	e004      	b.n	801afaa <tcp_process+0x7be>
      break;
 801afa0:	bf00      	nop
 801afa2:	e002      	b.n	801afaa <tcp_process+0x7be>
      break;
 801afa4:	bf00      	nop
 801afa6:	e000      	b.n	801afaa <tcp_process+0x7be>
      break;
 801afa8:	bf00      	nop
  }
  return ERR_OK;
 801afaa:	2300      	movs	r3, #0
}
 801afac:	4618      	mov	r0, r3
 801afae:	3724      	adds	r7, #36	; 0x24
 801afb0:	46bd      	mov	sp, r7
 801afb2:	bd90      	pop	{r4, r7, pc}
 801afb4:	20015fcc 	.word	0x20015fcc
 801afb8:	20015fc8 	.word	0x20015fc8
 801afbc:	20015ffc 	.word	0x20015ffc
 801afc0:	20015ff4 	.word	0x20015ff4
 801afc4:	20015ffd 	.word	0x20015ffd
 801afc8:	20015fc4 	.word	0x20015fc4

0801afcc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801afcc:	b590      	push	{r4, r7, lr}
 801afce:	b085      	sub	sp, #20
 801afd0:	af00      	add	r7, sp, #0
 801afd2:	6078      	str	r0, [r7, #4]
 801afd4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d106      	bne.n	801afea <tcp_oos_insert_segment+0x1e>
 801afdc:	4b3b      	ldr	r3, [pc, #236]	; (801b0cc <tcp_oos_insert_segment+0x100>)
 801afde:	f240 421f 	movw	r2, #1055	; 0x41f
 801afe2:	493b      	ldr	r1, [pc, #236]	; (801b0d0 <tcp_oos_insert_segment+0x104>)
 801afe4:	483b      	ldr	r0, [pc, #236]	; (801b0d4 <tcp_oos_insert_segment+0x108>)
 801afe6:	f008 fc3d 	bl	8023864 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	68db      	ldr	r3, [r3, #12]
 801afee:	899b      	ldrh	r3, [r3, #12]
 801aff0:	b29b      	uxth	r3, r3
 801aff2:	4618      	mov	r0, r3
 801aff4:	f7fa fcbc 	bl	8015970 <lwip_htons>
 801aff8:	4603      	mov	r3, r0
 801affa:	b2db      	uxtb	r3, r3
 801affc:	f003 0301 	and.w	r3, r3, #1
 801b000:	2b00      	cmp	r3, #0
 801b002:	d028      	beq.n	801b056 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801b004:	6838      	ldr	r0, [r7, #0]
 801b006:	f7fe f97d 	bl	8019304 <tcp_segs_free>
    next = NULL;
 801b00a:	2300      	movs	r3, #0
 801b00c:	603b      	str	r3, [r7, #0]
 801b00e:	e056      	b.n	801b0be <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	68db      	ldr	r3, [r3, #12]
 801b014:	899b      	ldrh	r3, [r3, #12]
 801b016:	b29b      	uxth	r3, r3
 801b018:	4618      	mov	r0, r3
 801b01a:	f7fa fca9 	bl	8015970 <lwip_htons>
 801b01e:	4603      	mov	r3, r0
 801b020:	b2db      	uxtb	r3, r3
 801b022:	f003 0301 	and.w	r3, r3, #1
 801b026:	2b00      	cmp	r3, #0
 801b028:	d00d      	beq.n	801b046 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	68db      	ldr	r3, [r3, #12]
 801b02e:	899b      	ldrh	r3, [r3, #12]
 801b030:	b29c      	uxth	r4, r3
 801b032:	2001      	movs	r0, #1
 801b034:	f7fa fc9c 	bl	8015970 <lwip_htons>
 801b038:	4603      	mov	r3, r0
 801b03a:	461a      	mov	r2, r3
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	68db      	ldr	r3, [r3, #12]
 801b040:	4322      	orrs	r2, r4
 801b042:	b292      	uxth	r2, r2
 801b044:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801b04a:	683b      	ldr	r3, [r7, #0]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801b050:	68f8      	ldr	r0, [r7, #12]
 801b052:	f7fe f96c 	bl	801932e <tcp_seg_free>
    while (next &&
 801b056:	683b      	ldr	r3, [r7, #0]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d00e      	beq.n	801b07a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	891b      	ldrh	r3, [r3, #8]
 801b060:	461a      	mov	r2, r3
 801b062:	4b1d      	ldr	r3, [pc, #116]	; (801b0d8 <tcp_oos_insert_segment+0x10c>)
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	441a      	add	r2, r3
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	68db      	ldr	r3, [r3, #12]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	6839      	ldr	r1, [r7, #0]
 801b070:	8909      	ldrh	r1, [r1, #8]
 801b072:	440b      	add	r3, r1
 801b074:	1ad3      	subs	r3, r2, r3
    while (next &&
 801b076:	2b00      	cmp	r3, #0
 801b078:	daca      	bge.n	801b010 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801b07a:	683b      	ldr	r3, [r7, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d01e      	beq.n	801b0be <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	891b      	ldrh	r3, [r3, #8]
 801b084:	461a      	mov	r2, r3
 801b086:	4b14      	ldr	r3, [pc, #80]	; (801b0d8 <tcp_oos_insert_segment+0x10c>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	441a      	add	r2, r3
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	685b      	ldr	r3, [r3, #4]
 801b092:	1ad3      	subs	r3, r2, r3
    if (next &&
 801b094:	2b00      	cmp	r3, #0
 801b096:	dd12      	ble.n	801b0be <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	68db      	ldr	r3, [r3, #12]
 801b09c:	685b      	ldr	r3, [r3, #4]
 801b09e:	b29a      	uxth	r2, r3
 801b0a0:	4b0d      	ldr	r3, [pc, #52]	; (801b0d8 <tcp_oos_insert_segment+0x10c>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	b29b      	uxth	r3, r3
 801b0a6:	1ad3      	subs	r3, r2, r3
 801b0a8:	b29a      	uxth	r2, r3
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	685a      	ldr	r2, [r3, #4]
 801b0b2:	687b      	ldr	r3, [r7, #4]
 801b0b4:	891b      	ldrh	r3, [r3, #8]
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	4610      	mov	r0, r2
 801b0ba:	f7fc f98f 	bl	80173dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	683a      	ldr	r2, [r7, #0]
 801b0c2:	601a      	str	r2, [r3, #0]
}
 801b0c4:	bf00      	nop
 801b0c6:	3714      	adds	r7, #20
 801b0c8:	46bd      	mov	sp, r7
 801b0ca:	bd90      	pop	{r4, r7, pc}
 801b0cc:	0802a738 	.word	0x0802a738
 801b0d0:	0802a9f8 	.word	0x0802a9f8
 801b0d4:	0802a784 	.word	0x0802a784
 801b0d8:	20015ff0 	.word	0x20015ff0

0801b0dc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801b0dc:	b5b0      	push	{r4, r5, r7, lr}
 801b0de:	b086      	sub	sp, #24
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	60f8      	str	r0, [r7, #12]
 801b0e4:	60b9      	str	r1, [r7, #8]
 801b0e6:	607a      	str	r2, [r7, #4]
 801b0e8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801b0ea:	e03e      	b.n	801b16a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801b0ec:	68bb      	ldr	r3, [r7, #8]
 801b0ee:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801b0f0:	68bb      	ldr	r3, [r7, #8]
 801b0f2:	681b      	ldr	r3, [r3, #0]
 801b0f4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801b0f6:	697b      	ldr	r3, [r7, #20]
 801b0f8:	685b      	ldr	r3, [r3, #4]
 801b0fa:	4618      	mov	r0, r3
 801b0fc:	f7fc fb82 	bl	8017804 <pbuf_clen>
 801b100:	4603      	mov	r3, r0
 801b102:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b10a:	8a7a      	ldrh	r2, [r7, #18]
 801b10c:	429a      	cmp	r2, r3
 801b10e:	d906      	bls.n	801b11e <tcp_free_acked_segments+0x42>
 801b110:	4b2a      	ldr	r3, [pc, #168]	; (801b1bc <tcp_free_acked_segments+0xe0>)
 801b112:	f240 4257 	movw	r2, #1111	; 0x457
 801b116:	492a      	ldr	r1, [pc, #168]	; (801b1c0 <tcp_free_acked_segments+0xe4>)
 801b118:	482a      	ldr	r0, [pc, #168]	; (801b1c4 <tcp_free_acked_segments+0xe8>)
 801b11a:	f008 fba3 	bl	8023864 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801b124:	8a7b      	ldrh	r3, [r7, #18]
 801b126:	1ad3      	subs	r3, r2, r3
 801b128:	b29a      	uxth	r2, r3
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801b130:	697b      	ldr	r3, [r7, #20]
 801b132:	891a      	ldrh	r2, [r3, #8]
 801b134:	4b24      	ldr	r3, [pc, #144]	; (801b1c8 <tcp_free_acked_segments+0xec>)
 801b136:	881b      	ldrh	r3, [r3, #0]
 801b138:	4413      	add	r3, r2
 801b13a:	b29a      	uxth	r2, r3
 801b13c:	4b22      	ldr	r3, [pc, #136]	; (801b1c8 <tcp_free_acked_segments+0xec>)
 801b13e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801b140:	6978      	ldr	r0, [r7, #20]
 801b142:	f7fe f8f4 	bl	801932e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801b146:	68fb      	ldr	r3, [r7, #12]
 801b148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d00c      	beq.n	801b16a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801b150:	68bb      	ldr	r3, [r7, #8]
 801b152:	2b00      	cmp	r3, #0
 801b154:	d109      	bne.n	801b16a <tcp_free_acked_segments+0x8e>
 801b156:	683b      	ldr	r3, [r7, #0]
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d106      	bne.n	801b16a <tcp_free_acked_segments+0x8e>
 801b15c:	4b17      	ldr	r3, [pc, #92]	; (801b1bc <tcp_free_acked_segments+0xe0>)
 801b15e:	f240 4261 	movw	r2, #1121	; 0x461
 801b162:	491a      	ldr	r1, [pc, #104]	; (801b1cc <tcp_free_acked_segments+0xf0>)
 801b164:	4817      	ldr	r0, [pc, #92]	; (801b1c4 <tcp_free_acked_segments+0xe8>)
 801b166:	f008 fb7d 	bl	8023864 <iprintf>
  while (seg_list != NULL &&
 801b16a:	68bb      	ldr	r3, [r7, #8]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d020      	beq.n	801b1b2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801b170:	68bb      	ldr	r3, [r7, #8]
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	4618      	mov	r0, r3
 801b178:	f7fa fc0f 	bl	801599a <lwip_htonl>
 801b17c:	4604      	mov	r4, r0
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	891b      	ldrh	r3, [r3, #8]
 801b182:	461d      	mov	r5, r3
 801b184:	68bb      	ldr	r3, [r7, #8]
 801b186:	68db      	ldr	r3, [r3, #12]
 801b188:	899b      	ldrh	r3, [r3, #12]
 801b18a:	b29b      	uxth	r3, r3
 801b18c:	4618      	mov	r0, r3
 801b18e:	f7fa fbef 	bl	8015970 <lwip_htons>
 801b192:	4603      	mov	r3, r0
 801b194:	b2db      	uxtb	r3, r3
 801b196:	f003 0303 	and.w	r3, r3, #3
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d001      	beq.n	801b1a2 <tcp_free_acked_segments+0xc6>
 801b19e:	2301      	movs	r3, #1
 801b1a0:	e000      	b.n	801b1a4 <tcp_free_acked_segments+0xc8>
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	442b      	add	r3, r5
 801b1a6:	18e2      	adds	r2, r4, r3
 801b1a8:	4b09      	ldr	r3, [pc, #36]	; (801b1d0 <tcp_free_acked_segments+0xf4>)
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	dd9c      	ble.n	801b0ec <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801b1b2:	68bb      	ldr	r3, [r7, #8]
}
 801b1b4:	4618      	mov	r0, r3
 801b1b6:	3718      	adds	r7, #24
 801b1b8:	46bd      	mov	sp, r7
 801b1ba:	bdb0      	pop	{r4, r5, r7, pc}
 801b1bc:	0802a738 	.word	0x0802a738
 801b1c0:	0802aa20 	.word	0x0802aa20
 801b1c4:	0802a784 	.word	0x0802a784
 801b1c8:	20015ff8 	.word	0x20015ff8
 801b1cc:	0802aa48 	.word	0x0802aa48
 801b1d0:	20015ff4 	.word	0x20015ff4

0801b1d4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801b1d4:	b5b0      	push	{r4, r5, r7, lr}
 801b1d6:	b094      	sub	sp, #80	; 0x50
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801b1dc:	2300      	movs	r3, #0
 801b1de:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d106      	bne.n	801b1f4 <tcp_receive+0x20>
 801b1e6:	4b91      	ldr	r3, [pc, #580]	; (801b42c <tcp_receive+0x258>)
 801b1e8:	f240 427b 	movw	r2, #1147	; 0x47b
 801b1ec:	4990      	ldr	r1, [pc, #576]	; (801b430 <tcp_receive+0x25c>)
 801b1ee:	4891      	ldr	r0, [pc, #580]	; (801b434 <tcp_receive+0x260>)
 801b1f0:	f008 fb38 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	7d1b      	ldrb	r3, [r3, #20]
 801b1f8:	2b03      	cmp	r3, #3
 801b1fa:	d806      	bhi.n	801b20a <tcp_receive+0x36>
 801b1fc:	4b8b      	ldr	r3, [pc, #556]	; (801b42c <tcp_receive+0x258>)
 801b1fe:	f240 427c 	movw	r2, #1148	; 0x47c
 801b202:	498d      	ldr	r1, [pc, #564]	; (801b438 <tcp_receive+0x264>)
 801b204:	488b      	ldr	r0, [pc, #556]	; (801b434 <tcp_receive+0x260>)
 801b206:	f008 fb2d 	bl	8023864 <iprintf>

  if (flags & TCP_ACK) {
 801b20a:	4b8c      	ldr	r3, [pc, #560]	; (801b43c <tcp_receive+0x268>)
 801b20c:	781b      	ldrb	r3, [r3, #0]
 801b20e:	f003 0310 	and.w	r3, r3, #16
 801b212:	2b00      	cmp	r3, #0
 801b214:	f000 8264 	beq.w	801b6e0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b21e:	461a      	mov	r2, r3
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b224:	4413      	add	r3, r2
 801b226:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b22c:	4b84      	ldr	r3, [pc, #528]	; (801b440 <tcp_receive+0x26c>)
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	1ad3      	subs	r3, r2, r3
 801b232:	2b00      	cmp	r3, #0
 801b234:	db1b      	blt.n	801b26e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801b23a:	4b81      	ldr	r3, [pc, #516]	; (801b440 <tcp_receive+0x26c>)
 801b23c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b23e:	429a      	cmp	r2, r3
 801b240:	d106      	bne.n	801b250 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b246:	4b7f      	ldr	r3, [pc, #508]	; (801b444 <tcp_receive+0x270>)
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	1ad3      	subs	r3, r2, r3
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	db0e      	blt.n	801b26e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b254:	4b7b      	ldr	r3, [pc, #492]	; (801b444 <tcp_receive+0x270>)
 801b256:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b258:	429a      	cmp	r2, r3
 801b25a:	d125      	bne.n	801b2a8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b25c:	4b7a      	ldr	r3, [pc, #488]	; (801b448 <tcp_receive+0x274>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	89db      	ldrh	r3, [r3, #14]
 801b262:	b29a      	uxth	r2, r3
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d91c      	bls.n	801b2a8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b26e:	4b76      	ldr	r3, [pc, #472]	; (801b448 <tcp_receive+0x274>)
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	89db      	ldrh	r3, [r3, #14]
 801b274:	b29a      	uxth	r2, r3
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801b288:	429a      	cmp	r2, r3
 801b28a:	d205      	bcs.n	801b298 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801b298:	4b69      	ldr	r3, [pc, #420]	; (801b440 <tcp_receive+0x26c>)
 801b29a:	681a      	ldr	r2, [r3, #0]
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801b2a0:	4b68      	ldr	r3, [pc, #416]	; (801b444 <tcp_receive+0x270>)
 801b2a2:	681a      	ldr	r2, [r3, #0]
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b2a8:	4b66      	ldr	r3, [pc, #408]	; (801b444 <tcp_receive+0x270>)
 801b2aa:	681a      	ldr	r2, [r3, #0]
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2b0:	1ad3      	subs	r3, r2, r3
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	dc58      	bgt.n	801b368 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801b2b6:	4b65      	ldr	r3, [pc, #404]	; (801b44c <tcp_receive+0x278>)
 801b2b8:	881b      	ldrh	r3, [r3, #0]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d14b      	bne.n	801b356 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b2c2:	687a      	ldr	r2, [r7, #4]
 801b2c4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801b2c8:	4413      	add	r3, r2
 801b2ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b2cc:	429a      	cmp	r2, r3
 801b2ce:	d142      	bne.n	801b356 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	db3d      	blt.n	801b356 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801b2de:	4b59      	ldr	r3, [pc, #356]	; (801b444 <tcp_receive+0x270>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	429a      	cmp	r2, r3
 801b2e4:	d137      	bne.n	801b356 <tcp_receive+0x182>
              found_dupack = 1;
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b2f0:	2bff      	cmp	r3, #255	; 0xff
 801b2f2:	d007      	beq.n	801b304 <tcp_receive+0x130>
                ++pcb->dupacks;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b2fa:	3301      	adds	r3, #1
 801b2fc:	b2da      	uxtb	r2, r3
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b30a:	2b03      	cmp	r3, #3
 801b30c:	d91b      	bls.n	801b346 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b318:	4413      	add	r3, r2
 801b31a:	b29a      	uxth	r2, r3
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b322:	429a      	cmp	r2, r3
 801b324:	d30a      	bcc.n	801b33c <tcp_receive+0x168>
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b330:	4413      	add	r3, r2
 801b332:	b29a      	uxth	r2, r3
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b33a:	e004      	b.n	801b346 <tcp_receive+0x172>
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b342:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801b34c:	2b02      	cmp	r3, #2
 801b34e:	d902      	bls.n	801b356 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	f002 fb45 	bl	801d9e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801b356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b358:	2b00      	cmp	r3, #0
 801b35a:	f040 8161 	bne.w	801b620 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	2200      	movs	r2, #0
 801b362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801b366:	e15b      	b.n	801b620 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b368:	4b36      	ldr	r3, [pc, #216]	; (801b444 <tcp_receive+0x270>)
 801b36a:	681a      	ldr	r2, [r3, #0]
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b370:	1ad3      	subs	r3, r2, r3
 801b372:	3b01      	subs	r3, #1
 801b374:	2b00      	cmp	r3, #0
 801b376:	f2c0 814e 	blt.w	801b616 <tcp_receive+0x442>
 801b37a:	4b32      	ldr	r3, [pc, #200]	; (801b444 <tcp_receive+0x270>)
 801b37c:	681a      	ldr	r2, [r3, #0]
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b382:	1ad3      	subs	r3, r2, r3
 801b384:	2b00      	cmp	r3, #0
 801b386:	f300 8146 	bgt.w	801b616 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	8b5b      	ldrh	r3, [r3, #26]
 801b38e:	f003 0304 	and.w	r3, r3, #4
 801b392:	2b00      	cmp	r3, #0
 801b394:	d010      	beq.n	801b3b8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	8b5b      	ldrh	r3, [r3, #26]
 801b39a:	f023 0304 	bic.w	r3, r3, #4
 801b39e:	b29a      	uxth	r2, r3
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	2200      	movs	r2, #0
 801b3b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b3c6:	10db      	asrs	r3, r3, #3
 801b3c8:	b21b      	sxth	r3, r3
 801b3ca:	b29a      	uxth	r2, r3
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b3d2:	b29b      	uxth	r3, r3
 801b3d4:	4413      	add	r3, r2
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	b21a      	sxth	r2, r3
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801b3e0:	4b18      	ldr	r3, [pc, #96]	; (801b444 <tcp_receive+0x270>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	b29a      	uxth	r2, r3
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3ea:	b29b      	uxth	r3, r3
 801b3ec:	1ad3      	subs	r3, r2, r3
 801b3ee:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	2200      	movs	r2, #0
 801b3f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801b3f8:	4b12      	ldr	r3, [pc, #72]	; (801b444 <tcp_receive+0x270>)
 801b3fa:	681a      	ldr	r2, [r3, #0]
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	7d1b      	ldrb	r3, [r3, #20]
 801b404:	2b03      	cmp	r3, #3
 801b406:	f240 8097 	bls.w	801b538 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801b416:	429a      	cmp	r2, r3
 801b418:	d245      	bcs.n	801b4a6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	8b5b      	ldrh	r3, [r3, #26]
 801b41e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b422:	2b00      	cmp	r3, #0
 801b424:	d014      	beq.n	801b450 <tcp_receive+0x27c>
 801b426:	2301      	movs	r3, #1
 801b428:	e013      	b.n	801b452 <tcp_receive+0x27e>
 801b42a:	bf00      	nop
 801b42c:	0802a738 	.word	0x0802a738
 801b430:	0802aa68 	.word	0x0802aa68
 801b434:	0802a784 	.word	0x0802a784
 801b438:	0802aa84 	.word	0x0802aa84
 801b43c:	20015ffc 	.word	0x20015ffc
 801b440:	20015ff0 	.word	0x20015ff0
 801b444:	20015ff4 	.word	0x20015ff4
 801b448:	20015fe0 	.word	0x20015fe0
 801b44c:	20015ffa 	.word	0x20015ffa
 801b450:	2302      	movs	r3, #2
 801b452:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801b456:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801b45a:	b29a      	uxth	r2, r3
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b460:	fb12 f303 	smulbb	r3, r2, r3
 801b464:	b29b      	uxth	r3, r3
 801b466:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801b468:	4293      	cmp	r3, r2
 801b46a:	bf28      	it	cs
 801b46c:	4613      	movcs	r3, r2
 801b46e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b476:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b478:	4413      	add	r3, r2
 801b47a:	b29a      	uxth	r2, r3
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b482:	429a      	cmp	r2, r3
 801b484:	d309      	bcc.n	801b49a <tcp_receive+0x2c6>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b48c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b48e:	4413      	add	r3, r2
 801b490:	b29a      	uxth	r2, r3
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b498:	e04e      	b.n	801b538 <tcp_receive+0x364>
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b4a4:	e048      	b.n	801b538 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b4ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b4ae:	4413      	add	r3, r2
 801b4b0:	b29a      	uxth	r2, r3
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801b4b8:	429a      	cmp	r2, r3
 801b4ba:	d309      	bcc.n	801b4d0 <tcp_receive+0x2fc>
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b4c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b4c4:	4413      	add	r3, r2
 801b4c6:	b29a      	uxth	r2, r3
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801b4ce:	e004      	b.n	801b4da <tcp_receive+0x306>
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b4d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b4e6:	429a      	cmp	r2, r3
 801b4e8:	d326      	bcc.n	801b538 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b4f6:	1ad3      	subs	r3, r2, r3
 801b4f8:	b29a      	uxth	r2, r3
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b50a:	4413      	add	r3, r2
 801b50c:	b29a      	uxth	r2, r3
 801b50e:	687b      	ldr	r3, [r7, #4]
 801b510:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b514:	429a      	cmp	r2, r3
 801b516:	d30a      	bcc.n	801b52e <tcp_receive+0x35a>
 801b518:	687b      	ldr	r3, [r7, #4]
 801b51a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b522:	4413      	add	r3, r2
 801b524:	b29a      	uxth	r2, r3
 801b526:	687b      	ldr	r3, [r7, #4]
 801b528:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b52c:	e004      	b.n	801b538 <tcp_receive+0x364>
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b534:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b540:	4a98      	ldr	r2, [pc, #608]	; (801b7a4 <tcp_receive+0x5d0>)
 801b542:	6878      	ldr	r0, [r7, #4]
 801b544:	f7ff fdca 	bl	801b0dc <tcp_free_acked_segments>
 801b548:	4602      	mov	r2, r0
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b54e:	687b      	ldr	r3, [r7, #4]
 801b550:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b556:	4a94      	ldr	r2, [pc, #592]	; (801b7a8 <tcp_receive+0x5d4>)
 801b558:	6878      	ldr	r0, [r7, #4]
 801b55a:	f7ff fdbf 	bl	801b0dc <tcp_free_acked_segments>
 801b55e:	4602      	mov	r2, r0
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d104      	bne.n	801b576 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b572:	861a      	strh	r2, [r3, #48]	; 0x30
 801b574:	e002      	b.n	801b57c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2200      	movs	r2, #0
 801b57a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	2200      	movs	r2, #0
 801b580:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b586:	2b00      	cmp	r3, #0
 801b588:	d103      	bne.n	801b592 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	2200      	movs	r2, #0
 801b58e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b598:	4b84      	ldr	r3, [pc, #528]	; (801b7ac <tcp_receive+0x5d8>)
 801b59a:	881b      	ldrh	r3, [r3, #0]
 801b59c:	4413      	add	r3, r2
 801b59e:	b29a      	uxth	r2, r3
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	8b5b      	ldrh	r3, [r3, #26]
 801b5aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d035      	beq.n	801b61e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d118      	bne.n	801b5ec <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d00c      	beq.n	801b5dc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b5ca:	68db      	ldr	r3, [r3, #12]
 801b5cc:	685b      	ldr	r3, [r3, #4]
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7fa f9e3 	bl	801599a <lwip_htonl>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801b5d8:	2b00      	cmp	r3, #0
 801b5da:	dc20      	bgt.n	801b61e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	8b5b      	ldrh	r3, [r3, #26]
 801b5e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b5e4:	b29a      	uxth	r2, r3
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b5ea:	e018      	b.n	801b61e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b5f4:	68db      	ldr	r3, [r3, #12]
 801b5f6:	685b      	ldr	r3, [r3, #4]
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	f7fa f9ce 	bl	801599a <lwip_htonl>
 801b5fe:	4603      	mov	r3, r0
 801b600:	1ae3      	subs	r3, r4, r3
 801b602:	2b00      	cmp	r3, #0
 801b604:	dc0b      	bgt.n	801b61e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	8b5b      	ldrh	r3, [r3, #26]
 801b60a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b60e:	b29a      	uxth	r2, r3
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b614:	e003      	b.n	801b61e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f002 fbce 	bl	801ddb8 <tcp_send_empty_ack>
 801b61c:	e000      	b.n	801b620 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b61e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b624:	2b00      	cmp	r3, #0
 801b626:	d05b      	beq.n	801b6e0 <tcp_receive+0x50c>
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b62c:	4b60      	ldr	r3, [pc, #384]	; (801b7b0 <tcp_receive+0x5dc>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	1ad3      	subs	r3, r2, r3
 801b632:	2b00      	cmp	r3, #0
 801b634:	da54      	bge.n	801b6e0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b636:	4b5f      	ldr	r3, [pc, #380]	; (801b7b4 <tcp_receive+0x5e0>)
 801b638:	681b      	ldr	r3, [r3, #0]
 801b63a:	b29a      	uxth	r2, r3
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b640:	b29b      	uxth	r3, r3
 801b642:	1ad3      	subs	r3, r2, r3
 801b644:	b29b      	uxth	r3, r3
 801b646:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b64a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b654:	10db      	asrs	r3, r3, #3
 801b656:	b21b      	sxth	r3, r3
 801b658:	b29b      	uxth	r3, r3
 801b65a:	1ad3      	subs	r3, r2, r3
 801b65c:	b29b      	uxth	r3, r3
 801b65e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b668:	b29a      	uxth	r2, r3
 801b66a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b66e:	4413      	add	r3, r2
 801b670:	b29b      	uxth	r3, r3
 801b672:	b21a      	sxth	r2, r3
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b678:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	da05      	bge.n	801b68c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801b680:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b684:	425b      	negs	r3, r3
 801b686:	b29b      	uxth	r3, r3
 801b688:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b68c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b696:	109b      	asrs	r3, r3, #2
 801b698:	b21b      	sxth	r3, r3
 801b69a:	b29b      	uxth	r3, r3
 801b69c:	1ad3      	subs	r3, r2, r3
 801b69e:	b29b      	uxth	r3, r3
 801b6a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b6aa:	b29a      	uxth	r2, r3
 801b6ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b6b0:	4413      	add	r3, r2
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	b21a      	sxth	r2, r3
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b6c0:	10db      	asrs	r3, r3, #3
 801b6c2:	b21b      	sxth	r3, r3
 801b6c4:	b29a      	uxth	r2, r3
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b6cc:	b29b      	uxth	r3, r3
 801b6ce:	4413      	add	r3, r2
 801b6d0:	b29b      	uxth	r3, r3
 801b6d2:	b21a      	sxth	r2, r3
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	2200      	movs	r2, #0
 801b6de:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801b6e0:	4b35      	ldr	r3, [pc, #212]	; (801b7b8 <tcp_receive+0x5e4>)
 801b6e2:	881b      	ldrh	r3, [r3, #0]
 801b6e4:	2b00      	cmp	r3, #0
 801b6e6:	f000 84e2 	beq.w	801c0ae <tcp_receive+0xeda>
 801b6ea:	687b      	ldr	r3, [r7, #4]
 801b6ec:	7d1b      	ldrb	r3, [r3, #20]
 801b6ee:	2b06      	cmp	r3, #6
 801b6f0:	f200 84dd 	bhi.w	801c0ae <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b6f8:	4b30      	ldr	r3, [pc, #192]	; (801b7bc <tcp_receive+0x5e8>)
 801b6fa:	681b      	ldr	r3, [r3, #0]
 801b6fc:	1ad3      	subs	r3, r2, r3
 801b6fe:	3b01      	subs	r3, #1
 801b700:	2b00      	cmp	r3, #0
 801b702:	f2c0 808f 	blt.w	801b824 <tcp_receive+0x650>
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b70a:	4b2b      	ldr	r3, [pc, #172]	; (801b7b8 <tcp_receive+0x5e4>)
 801b70c:	881b      	ldrh	r3, [r3, #0]
 801b70e:	4619      	mov	r1, r3
 801b710:	4b2a      	ldr	r3, [pc, #168]	; (801b7bc <tcp_receive+0x5e8>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	440b      	add	r3, r1
 801b716:	1ad3      	subs	r3, r2, r3
 801b718:	3301      	adds	r3, #1
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	f300 8082 	bgt.w	801b824 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801b720:	4b27      	ldr	r3, [pc, #156]	; (801b7c0 <tcp_receive+0x5ec>)
 801b722:	685b      	ldr	r3, [r3, #4]
 801b724:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b72a:	4b24      	ldr	r3, [pc, #144]	; (801b7bc <tcp_receive+0x5e8>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	1ad3      	subs	r3, r2, r3
 801b730:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b732:	4b23      	ldr	r3, [pc, #140]	; (801b7c0 <tcp_receive+0x5ec>)
 801b734:	685b      	ldr	r3, [r3, #4]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d106      	bne.n	801b748 <tcp_receive+0x574>
 801b73a:	4b22      	ldr	r3, [pc, #136]	; (801b7c4 <tcp_receive+0x5f0>)
 801b73c:	f240 5294 	movw	r2, #1428	; 0x594
 801b740:	4921      	ldr	r1, [pc, #132]	; (801b7c8 <tcp_receive+0x5f4>)
 801b742:	4822      	ldr	r0, [pc, #136]	; (801b7cc <tcp_receive+0x5f8>)
 801b744:	f008 f88e 	bl	8023864 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b74a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b74e:	4293      	cmp	r3, r2
 801b750:	d906      	bls.n	801b760 <tcp_receive+0x58c>
 801b752:	4b1c      	ldr	r3, [pc, #112]	; (801b7c4 <tcp_receive+0x5f0>)
 801b754:	f240 5295 	movw	r2, #1429	; 0x595
 801b758:	491d      	ldr	r1, [pc, #116]	; (801b7d0 <tcp_receive+0x5fc>)
 801b75a:	481c      	ldr	r0, [pc, #112]	; (801b7cc <tcp_receive+0x5f8>)
 801b75c:	f008 f882 	bl	8023864 <iprintf>
      off = (u16_t)off32;
 801b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b766:	4b16      	ldr	r3, [pc, #88]	; (801b7c0 <tcp_receive+0x5ec>)
 801b768:	685b      	ldr	r3, [r3, #4]
 801b76a:	891b      	ldrh	r3, [r3, #8]
 801b76c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b770:	429a      	cmp	r2, r3
 801b772:	d906      	bls.n	801b782 <tcp_receive+0x5ae>
 801b774:	4b13      	ldr	r3, [pc, #76]	; (801b7c4 <tcp_receive+0x5f0>)
 801b776:	f240 5297 	movw	r2, #1431	; 0x597
 801b77a:	4916      	ldr	r1, [pc, #88]	; (801b7d4 <tcp_receive+0x600>)
 801b77c:	4813      	ldr	r0, [pc, #76]	; (801b7cc <tcp_receive+0x5f8>)
 801b77e:	f008 f871 	bl	8023864 <iprintf>
      inseg.len -= off;
 801b782:	4b0f      	ldr	r3, [pc, #60]	; (801b7c0 <tcp_receive+0x5ec>)
 801b784:	891a      	ldrh	r2, [r3, #8]
 801b786:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b78a:	1ad3      	subs	r3, r2, r3
 801b78c:	b29a      	uxth	r2, r3
 801b78e:	4b0c      	ldr	r3, [pc, #48]	; (801b7c0 <tcp_receive+0x5ec>)
 801b790:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b792:	4b0b      	ldr	r3, [pc, #44]	; (801b7c0 <tcp_receive+0x5ec>)
 801b794:	685b      	ldr	r3, [r3, #4]
 801b796:	891a      	ldrh	r2, [r3, #8]
 801b798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b79c:	1ad3      	subs	r3, r2, r3
 801b79e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801b7a0:	e02a      	b.n	801b7f8 <tcp_receive+0x624>
 801b7a2:	bf00      	nop
 801b7a4:	0802aaa0 	.word	0x0802aaa0
 801b7a8:	0802aaa8 	.word	0x0802aaa8
 801b7ac:	20015ff8 	.word	0x20015ff8
 801b7b0:	20015ff4 	.word	0x20015ff4
 801b7b4:	20015fb8 	.word	0x20015fb8
 801b7b8:	20015ffa 	.word	0x20015ffa
 801b7bc:	20015ff0 	.word	0x20015ff0
 801b7c0:	20015fd0 	.word	0x20015fd0
 801b7c4:	0802a738 	.word	0x0802a738
 801b7c8:	0802aab0 	.word	0x0802aab0
 801b7cc:	0802a784 	.word	0x0802a784
 801b7d0:	0802aac0 	.word	0x0802aac0
 801b7d4:	0802aad0 	.word	0x0802aad0
        off -= p->len;
 801b7d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7da:	895b      	ldrh	r3, [r3, #10]
 801b7dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b7e0:	1ad3      	subs	r3, r2, r3
 801b7e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801b7e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b7ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801b7ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801b7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7f4:	681b      	ldr	r3, [r3, #0]
 801b7f6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801b7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b7fa:	895b      	ldrh	r3, [r3, #10]
 801b7fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b800:	429a      	cmp	r2, r3
 801b802:	d8e9      	bhi.n	801b7d8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801b804:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b808:	4619      	mov	r1, r3
 801b80a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b80c:	f7fb fee6 	bl	80175dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b814:	4a91      	ldr	r2, [pc, #580]	; (801ba5c <tcp_receive+0x888>)
 801b816:	6013      	str	r3, [r2, #0]
 801b818:	4b91      	ldr	r3, [pc, #580]	; (801ba60 <tcp_receive+0x88c>)
 801b81a:	68db      	ldr	r3, [r3, #12]
 801b81c:	4a8f      	ldr	r2, [pc, #572]	; (801ba5c <tcp_receive+0x888>)
 801b81e:	6812      	ldr	r2, [r2, #0]
 801b820:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b822:	e00d      	b.n	801b840 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801b824:	4b8d      	ldr	r3, [pc, #564]	; (801ba5c <tcp_receive+0x888>)
 801b826:	681a      	ldr	r2, [r3, #0]
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b82c:	1ad3      	subs	r3, r2, r3
 801b82e:	2b00      	cmp	r3, #0
 801b830:	da06      	bge.n	801b840 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	8b5b      	ldrh	r3, [r3, #26]
 801b836:	f043 0302 	orr.w	r3, r3, #2
 801b83a:	b29a      	uxth	r2, r3
 801b83c:	687b      	ldr	r3, [r7, #4]
 801b83e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b840:	4b86      	ldr	r3, [pc, #536]	; (801ba5c <tcp_receive+0x888>)
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	f2c0 842a 	blt.w	801c0a4 <tcp_receive+0xed0>
 801b850:	4b82      	ldr	r3, [pc, #520]	; (801ba5c <tcp_receive+0x888>)
 801b852:	681a      	ldr	r2, [r3, #0]
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b858:	6879      	ldr	r1, [r7, #4]
 801b85a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b85c:	440b      	add	r3, r1
 801b85e:	1ad3      	subs	r3, r2, r3
 801b860:	3301      	adds	r3, #1
 801b862:	2b00      	cmp	r3, #0
 801b864:	f300 841e 	bgt.w	801c0a4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b86c:	4b7b      	ldr	r3, [pc, #492]	; (801ba5c <tcp_receive+0x888>)
 801b86e:	681b      	ldr	r3, [r3, #0]
 801b870:	429a      	cmp	r2, r3
 801b872:	f040 829a 	bne.w	801bdaa <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801b876:	4b7a      	ldr	r3, [pc, #488]	; (801ba60 <tcp_receive+0x88c>)
 801b878:	891c      	ldrh	r4, [r3, #8]
 801b87a:	4b79      	ldr	r3, [pc, #484]	; (801ba60 <tcp_receive+0x88c>)
 801b87c:	68db      	ldr	r3, [r3, #12]
 801b87e:	899b      	ldrh	r3, [r3, #12]
 801b880:	b29b      	uxth	r3, r3
 801b882:	4618      	mov	r0, r3
 801b884:	f7fa f874 	bl	8015970 <lwip_htons>
 801b888:	4603      	mov	r3, r0
 801b88a:	b2db      	uxtb	r3, r3
 801b88c:	f003 0303 	and.w	r3, r3, #3
 801b890:	2b00      	cmp	r3, #0
 801b892:	d001      	beq.n	801b898 <tcp_receive+0x6c4>
 801b894:	2301      	movs	r3, #1
 801b896:	e000      	b.n	801b89a <tcp_receive+0x6c6>
 801b898:	2300      	movs	r3, #0
 801b89a:	4423      	add	r3, r4
 801b89c:	b29a      	uxth	r2, r3
 801b89e:	4b71      	ldr	r3, [pc, #452]	; (801ba64 <tcp_receive+0x890>)
 801b8a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b8a6:	4b6f      	ldr	r3, [pc, #444]	; (801ba64 <tcp_receive+0x890>)
 801b8a8:	881b      	ldrh	r3, [r3, #0]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d275      	bcs.n	801b99a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b8ae:	4b6c      	ldr	r3, [pc, #432]	; (801ba60 <tcp_receive+0x88c>)
 801b8b0:	68db      	ldr	r3, [r3, #12]
 801b8b2:	899b      	ldrh	r3, [r3, #12]
 801b8b4:	b29b      	uxth	r3, r3
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7fa f85a 	bl	8015970 <lwip_htons>
 801b8bc:	4603      	mov	r3, r0
 801b8be:	b2db      	uxtb	r3, r3
 801b8c0:	f003 0301 	and.w	r3, r3, #1
 801b8c4:	2b00      	cmp	r3, #0
 801b8c6:	d01f      	beq.n	801b908 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b8c8:	4b65      	ldr	r3, [pc, #404]	; (801ba60 <tcp_receive+0x88c>)
 801b8ca:	68db      	ldr	r3, [r3, #12]
 801b8cc:	899b      	ldrh	r3, [r3, #12]
 801b8ce:	b29b      	uxth	r3, r3
 801b8d0:	b21b      	sxth	r3, r3
 801b8d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b8d6:	b21c      	sxth	r4, r3
 801b8d8:	4b61      	ldr	r3, [pc, #388]	; (801ba60 <tcp_receive+0x88c>)
 801b8da:	68db      	ldr	r3, [r3, #12]
 801b8dc:	899b      	ldrh	r3, [r3, #12]
 801b8de:	b29b      	uxth	r3, r3
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f7fa f845 	bl	8015970 <lwip_htons>
 801b8e6:	4603      	mov	r3, r0
 801b8e8:	b2db      	uxtb	r3, r3
 801b8ea:	b29b      	uxth	r3, r3
 801b8ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b8f0:	b29b      	uxth	r3, r3
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7fa f83c 	bl	8015970 <lwip_htons>
 801b8f8:	4603      	mov	r3, r0
 801b8fa:	b21b      	sxth	r3, r3
 801b8fc:	4323      	orrs	r3, r4
 801b8fe:	b21a      	sxth	r2, r3
 801b900:	4b57      	ldr	r3, [pc, #348]	; (801ba60 <tcp_receive+0x88c>)
 801b902:	68db      	ldr	r3, [r3, #12]
 801b904:	b292      	uxth	r2, r2
 801b906:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b90c:	4b54      	ldr	r3, [pc, #336]	; (801ba60 <tcp_receive+0x88c>)
 801b90e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b910:	4b53      	ldr	r3, [pc, #332]	; (801ba60 <tcp_receive+0x88c>)
 801b912:	68db      	ldr	r3, [r3, #12]
 801b914:	899b      	ldrh	r3, [r3, #12]
 801b916:	b29b      	uxth	r3, r3
 801b918:	4618      	mov	r0, r3
 801b91a:	f7fa f829 	bl	8015970 <lwip_htons>
 801b91e:	4603      	mov	r3, r0
 801b920:	b2db      	uxtb	r3, r3
 801b922:	f003 0302 	and.w	r3, r3, #2
 801b926:	2b00      	cmp	r3, #0
 801b928:	d005      	beq.n	801b936 <tcp_receive+0x762>
            inseg.len -= 1;
 801b92a:	4b4d      	ldr	r3, [pc, #308]	; (801ba60 <tcp_receive+0x88c>)
 801b92c:	891b      	ldrh	r3, [r3, #8]
 801b92e:	3b01      	subs	r3, #1
 801b930:	b29a      	uxth	r2, r3
 801b932:	4b4b      	ldr	r3, [pc, #300]	; (801ba60 <tcp_receive+0x88c>)
 801b934:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801b936:	4b4a      	ldr	r3, [pc, #296]	; (801ba60 <tcp_receive+0x88c>)
 801b938:	685b      	ldr	r3, [r3, #4]
 801b93a:	4a49      	ldr	r2, [pc, #292]	; (801ba60 <tcp_receive+0x88c>)
 801b93c:	8912      	ldrh	r2, [r2, #8]
 801b93e:	4611      	mov	r1, r2
 801b940:	4618      	mov	r0, r3
 801b942:	f7fb fd4b 	bl	80173dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801b946:	4b46      	ldr	r3, [pc, #280]	; (801ba60 <tcp_receive+0x88c>)
 801b948:	891c      	ldrh	r4, [r3, #8]
 801b94a:	4b45      	ldr	r3, [pc, #276]	; (801ba60 <tcp_receive+0x88c>)
 801b94c:	68db      	ldr	r3, [r3, #12]
 801b94e:	899b      	ldrh	r3, [r3, #12]
 801b950:	b29b      	uxth	r3, r3
 801b952:	4618      	mov	r0, r3
 801b954:	f7fa f80c 	bl	8015970 <lwip_htons>
 801b958:	4603      	mov	r3, r0
 801b95a:	b2db      	uxtb	r3, r3
 801b95c:	f003 0303 	and.w	r3, r3, #3
 801b960:	2b00      	cmp	r3, #0
 801b962:	d001      	beq.n	801b968 <tcp_receive+0x794>
 801b964:	2301      	movs	r3, #1
 801b966:	e000      	b.n	801b96a <tcp_receive+0x796>
 801b968:	2300      	movs	r3, #0
 801b96a:	4423      	add	r3, r4
 801b96c:	b29a      	uxth	r2, r3
 801b96e:	4b3d      	ldr	r3, [pc, #244]	; (801ba64 <tcp_receive+0x890>)
 801b970:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b972:	4b3c      	ldr	r3, [pc, #240]	; (801ba64 <tcp_receive+0x890>)
 801b974:	881b      	ldrh	r3, [r3, #0]
 801b976:	461a      	mov	r2, r3
 801b978:	4b38      	ldr	r3, [pc, #224]	; (801ba5c <tcp_receive+0x888>)
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	441a      	add	r2, r3
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b982:	6879      	ldr	r1, [r7, #4]
 801b984:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b986:	440b      	add	r3, r1
 801b988:	429a      	cmp	r2, r3
 801b98a:	d006      	beq.n	801b99a <tcp_receive+0x7c6>
 801b98c:	4b36      	ldr	r3, [pc, #216]	; (801ba68 <tcp_receive+0x894>)
 801b98e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801b992:	4936      	ldr	r1, [pc, #216]	; (801ba6c <tcp_receive+0x898>)
 801b994:	4836      	ldr	r0, [pc, #216]	; (801ba70 <tcp_receive+0x89c>)
 801b996:	f007 ff65 	bl	8023864 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b99e:	2b00      	cmp	r3, #0
 801b9a0:	f000 80e7 	beq.w	801bb72 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b9a4:	4b2e      	ldr	r3, [pc, #184]	; (801ba60 <tcp_receive+0x88c>)
 801b9a6:	68db      	ldr	r3, [r3, #12]
 801b9a8:	899b      	ldrh	r3, [r3, #12]
 801b9aa:	b29b      	uxth	r3, r3
 801b9ac:	4618      	mov	r0, r3
 801b9ae:	f7f9 ffdf 	bl	8015970 <lwip_htons>
 801b9b2:	4603      	mov	r3, r0
 801b9b4:	b2db      	uxtb	r3, r3
 801b9b6:	f003 0301 	and.w	r3, r3, #1
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	d010      	beq.n	801b9e0 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801b9be:	e00a      	b.n	801b9d6 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9ca:	681a      	ldr	r2, [r3, #0]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801b9d0:	68f8      	ldr	r0, [r7, #12]
 801b9d2:	f7fd fcac 	bl	801932e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d1f0      	bne.n	801b9c0 <tcp_receive+0x7ec>
 801b9de:	e0c8      	b.n	801bb72 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801b9e0:	687b      	ldr	r3, [r7, #4]
 801b9e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801b9e6:	e052      	b.n	801ba8e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b9e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b9ea:	68db      	ldr	r3, [r3, #12]
 801b9ec:	899b      	ldrh	r3, [r3, #12]
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	4618      	mov	r0, r3
 801b9f2:	f7f9 ffbd 	bl	8015970 <lwip_htons>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	b2db      	uxtb	r3, r3
 801b9fa:	f003 0301 	and.w	r3, r3, #1
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d03d      	beq.n	801ba7e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801ba02:	4b17      	ldr	r3, [pc, #92]	; (801ba60 <tcp_receive+0x88c>)
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	899b      	ldrh	r3, [r3, #12]
 801ba08:	b29b      	uxth	r3, r3
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	f7f9 ffb0 	bl	8015970 <lwip_htons>
 801ba10:	4603      	mov	r3, r0
 801ba12:	b2db      	uxtb	r3, r3
 801ba14:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d130      	bne.n	801ba7e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801ba1c:	4b10      	ldr	r3, [pc, #64]	; (801ba60 <tcp_receive+0x88c>)
 801ba1e:	68db      	ldr	r3, [r3, #12]
 801ba20:	899b      	ldrh	r3, [r3, #12]
 801ba22:	b29c      	uxth	r4, r3
 801ba24:	2001      	movs	r0, #1
 801ba26:	f7f9 ffa3 	bl	8015970 <lwip_htons>
 801ba2a:	4603      	mov	r3, r0
 801ba2c:	461a      	mov	r2, r3
 801ba2e:	4b0c      	ldr	r3, [pc, #48]	; (801ba60 <tcp_receive+0x88c>)
 801ba30:	68db      	ldr	r3, [r3, #12]
 801ba32:	4322      	orrs	r2, r4
 801ba34:	b292      	uxth	r2, r2
 801ba36:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801ba38:	4b09      	ldr	r3, [pc, #36]	; (801ba60 <tcp_receive+0x88c>)
 801ba3a:	891c      	ldrh	r4, [r3, #8]
 801ba3c:	4b08      	ldr	r3, [pc, #32]	; (801ba60 <tcp_receive+0x88c>)
 801ba3e:	68db      	ldr	r3, [r3, #12]
 801ba40:	899b      	ldrh	r3, [r3, #12]
 801ba42:	b29b      	uxth	r3, r3
 801ba44:	4618      	mov	r0, r3
 801ba46:	f7f9 ff93 	bl	8015970 <lwip_htons>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	b2db      	uxtb	r3, r3
 801ba4e:	f003 0303 	and.w	r3, r3, #3
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d00e      	beq.n	801ba74 <tcp_receive+0x8a0>
 801ba56:	2301      	movs	r3, #1
 801ba58:	e00d      	b.n	801ba76 <tcp_receive+0x8a2>
 801ba5a:	bf00      	nop
 801ba5c:	20015ff0 	.word	0x20015ff0
 801ba60:	20015fd0 	.word	0x20015fd0
 801ba64:	20015ffa 	.word	0x20015ffa
 801ba68:	0802a738 	.word	0x0802a738
 801ba6c:	0802aae0 	.word	0x0802aae0
 801ba70:	0802a784 	.word	0x0802a784
 801ba74:	2300      	movs	r3, #0
 801ba76:	4423      	add	r3, r4
 801ba78:	b29a      	uxth	r2, r3
 801ba7a:	4b98      	ldr	r3, [pc, #608]	; (801bcdc <tcp_receive+0xb08>)
 801ba7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ba7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ba80:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ba82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801ba88:	6938      	ldr	r0, [r7, #16]
 801ba8a:	f7fd fc50 	bl	801932e <tcp_seg_free>
            while (next &&
 801ba8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d00e      	beq.n	801bab2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ba94:	4b91      	ldr	r3, [pc, #580]	; (801bcdc <tcp_receive+0xb08>)
 801ba96:	881b      	ldrh	r3, [r3, #0]
 801ba98:	461a      	mov	r2, r3
 801ba9a:	4b91      	ldr	r3, [pc, #580]	; (801bce0 <tcp_receive+0xb0c>)
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	441a      	add	r2, r3
 801baa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801baa2:	68db      	ldr	r3, [r3, #12]
 801baa4:	685b      	ldr	r3, [r3, #4]
 801baa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801baa8:	8909      	ldrh	r1, [r1, #8]
 801baaa:	440b      	add	r3, r1
 801baac:	1ad3      	subs	r3, r2, r3
            while (next &&
 801baae:	2b00      	cmp	r3, #0
 801bab0:	da9a      	bge.n	801b9e8 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801bab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d059      	beq.n	801bb6c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801bab8:	4b88      	ldr	r3, [pc, #544]	; (801bcdc <tcp_receive+0xb08>)
 801baba:	881b      	ldrh	r3, [r3, #0]
 801babc:	461a      	mov	r2, r3
 801babe:	4b88      	ldr	r3, [pc, #544]	; (801bce0 <tcp_receive+0xb0c>)
 801bac0:	681b      	ldr	r3, [r3, #0]
 801bac2:	441a      	add	r2, r3
 801bac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bac6:	68db      	ldr	r3, [r3, #12]
 801bac8:	685b      	ldr	r3, [r3, #4]
 801baca:	1ad3      	subs	r3, r2, r3
            if (next &&
 801bacc:	2b00      	cmp	r3, #0
 801bace:	dd4d      	ble.n	801bb6c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801bad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bad2:	68db      	ldr	r3, [r3, #12]
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	b29a      	uxth	r2, r3
 801bad8:	4b81      	ldr	r3, [pc, #516]	; (801bce0 <tcp_receive+0xb0c>)
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	b29b      	uxth	r3, r3
 801bade:	1ad3      	subs	r3, r2, r3
 801bae0:	b29a      	uxth	r2, r3
 801bae2:	4b80      	ldr	r3, [pc, #512]	; (801bce4 <tcp_receive+0xb10>)
 801bae4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801bae6:	4b7f      	ldr	r3, [pc, #508]	; (801bce4 <tcp_receive+0xb10>)
 801bae8:	68db      	ldr	r3, [r3, #12]
 801baea:	899b      	ldrh	r3, [r3, #12]
 801baec:	b29b      	uxth	r3, r3
 801baee:	4618      	mov	r0, r3
 801baf0:	f7f9 ff3e 	bl	8015970 <lwip_htons>
 801baf4:	4603      	mov	r3, r0
 801baf6:	b2db      	uxtb	r3, r3
 801baf8:	f003 0302 	and.w	r3, r3, #2
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d005      	beq.n	801bb0c <tcp_receive+0x938>
                inseg.len -= 1;
 801bb00:	4b78      	ldr	r3, [pc, #480]	; (801bce4 <tcp_receive+0xb10>)
 801bb02:	891b      	ldrh	r3, [r3, #8]
 801bb04:	3b01      	subs	r3, #1
 801bb06:	b29a      	uxth	r2, r3
 801bb08:	4b76      	ldr	r3, [pc, #472]	; (801bce4 <tcp_receive+0xb10>)
 801bb0a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801bb0c:	4b75      	ldr	r3, [pc, #468]	; (801bce4 <tcp_receive+0xb10>)
 801bb0e:	685b      	ldr	r3, [r3, #4]
 801bb10:	4a74      	ldr	r2, [pc, #464]	; (801bce4 <tcp_receive+0xb10>)
 801bb12:	8912      	ldrh	r2, [r2, #8]
 801bb14:	4611      	mov	r1, r2
 801bb16:	4618      	mov	r0, r3
 801bb18:	f7fb fc60 	bl	80173dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801bb1c:	4b71      	ldr	r3, [pc, #452]	; (801bce4 <tcp_receive+0xb10>)
 801bb1e:	891c      	ldrh	r4, [r3, #8]
 801bb20:	4b70      	ldr	r3, [pc, #448]	; (801bce4 <tcp_receive+0xb10>)
 801bb22:	68db      	ldr	r3, [r3, #12]
 801bb24:	899b      	ldrh	r3, [r3, #12]
 801bb26:	b29b      	uxth	r3, r3
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7f9 ff21 	bl	8015970 <lwip_htons>
 801bb2e:	4603      	mov	r3, r0
 801bb30:	b2db      	uxtb	r3, r3
 801bb32:	f003 0303 	and.w	r3, r3, #3
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d001      	beq.n	801bb3e <tcp_receive+0x96a>
 801bb3a:	2301      	movs	r3, #1
 801bb3c:	e000      	b.n	801bb40 <tcp_receive+0x96c>
 801bb3e:	2300      	movs	r3, #0
 801bb40:	4423      	add	r3, r4
 801bb42:	b29a      	uxth	r2, r3
 801bb44:	4b65      	ldr	r3, [pc, #404]	; (801bcdc <tcp_receive+0xb08>)
 801bb46:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801bb48:	4b64      	ldr	r3, [pc, #400]	; (801bcdc <tcp_receive+0xb08>)
 801bb4a:	881b      	ldrh	r3, [r3, #0]
 801bb4c:	461a      	mov	r2, r3
 801bb4e:	4b64      	ldr	r3, [pc, #400]	; (801bce0 <tcp_receive+0xb0c>)
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	441a      	add	r2, r3
 801bb54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bb56:	68db      	ldr	r3, [r3, #12]
 801bb58:	685b      	ldr	r3, [r3, #4]
 801bb5a:	429a      	cmp	r2, r3
 801bb5c:	d006      	beq.n	801bb6c <tcp_receive+0x998>
 801bb5e:	4b62      	ldr	r3, [pc, #392]	; (801bce8 <tcp_receive+0xb14>)
 801bb60:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801bb64:	4961      	ldr	r1, [pc, #388]	; (801bcec <tcp_receive+0xb18>)
 801bb66:	4862      	ldr	r0, [pc, #392]	; (801bcf0 <tcp_receive+0xb1c>)
 801bb68:	f007 fe7c 	bl	8023864 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bb70:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801bb72:	4b5a      	ldr	r3, [pc, #360]	; (801bcdc <tcp_receive+0xb08>)
 801bb74:	881b      	ldrh	r3, [r3, #0]
 801bb76:	461a      	mov	r2, r3
 801bb78:	4b59      	ldr	r3, [pc, #356]	; (801bce0 <tcp_receive+0xb0c>)
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	441a      	add	r2, r3
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bb86:	4b55      	ldr	r3, [pc, #340]	; (801bcdc <tcp_receive+0xb08>)
 801bb88:	881b      	ldrh	r3, [r3, #0]
 801bb8a:	429a      	cmp	r2, r3
 801bb8c:	d206      	bcs.n	801bb9c <tcp_receive+0x9c8>
 801bb8e:	4b56      	ldr	r3, [pc, #344]	; (801bce8 <tcp_receive+0xb14>)
 801bb90:	f240 6207 	movw	r2, #1543	; 0x607
 801bb94:	4957      	ldr	r1, [pc, #348]	; (801bcf4 <tcp_receive+0xb20>)
 801bb96:	4856      	ldr	r0, [pc, #344]	; (801bcf0 <tcp_receive+0xb1c>)
 801bb98:	f007 fe64 	bl	8023864 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801bb9c:	687b      	ldr	r3, [r7, #4]
 801bb9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bba0:	4b4e      	ldr	r3, [pc, #312]	; (801bcdc <tcp_receive+0xb08>)
 801bba2:	881b      	ldrh	r3, [r3, #0]
 801bba4:	1ad3      	subs	r3, r2, r3
 801bba6:	b29a      	uxth	r2, r3
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801bbac:	6878      	ldr	r0, [r7, #4]
 801bbae:	f7fc fe97 	bl	80188e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801bbb2:	4b4c      	ldr	r3, [pc, #304]	; (801bce4 <tcp_receive+0xb10>)
 801bbb4:	685b      	ldr	r3, [r3, #4]
 801bbb6:	891b      	ldrh	r3, [r3, #8]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d006      	beq.n	801bbca <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801bbbc:	4b49      	ldr	r3, [pc, #292]	; (801bce4 <tcp_receive+0xb10>)
 801bbbe:	685b      	ldr	r3, [r3, #4]
 801bbc0:	4a4d      	ldr	r2, [pc, #308]	; (801bcf8 <tcp_receive+0xb24>)
 801bbc2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801bbc4:	4b47      	ldr	r3, [pc, #284]	; (801bce4 <tcp_receive+0xb10>)
 801bbc6:	2200      	movs	r2, #0
 801bbc8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801bbca:	4b46      	ldr	r3, [pc, #280]	; (801bce4 <tcp_receive+0xb10>)
 801bbcc:	68db      	ldr	r3, [r3, #12]
 801bbce:	899b      	ldrh	r3, [r3, #12]
 801bbd0:	b29b      	uxth	r3, r3
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7f9 fecc 	bl	8015970 <lwip_htons>
 801bbd8:	4603      	mov	r3, r0
 801bbda:	b2db      	uxtb	r3, r3
 801bbdc:	f003 0301 	and.w	r3, r3, #1
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	f000 80b8 	beq.w	801bd56 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801bbe6:	4b45      	ldr	r3, [pc, #276]	; (801bcfc <tcp_receive+0xb28>)
 801bbe8:	781b      	ldrb	r3, [r3, #0]
 801bbea:	f043 0320 	orr.w	r3, r3, #32
 801bbee:	b2da      	uxtb	r2, r3
 801bbf0:	4b42      	ldr	r3, [pc, #264]	; (801bcfc <tcp_receive+0xb28>)
 801bbf2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801bbf4:	e0af      	b.n	801bd56 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbfa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bc00:	68db      	ldr	r3, [r3, #12]
 801bc02:	685b      	ldr	r3, [r3, #4]
 801bc04:	4a36      	ldr	r2, [pc, #216]	; (801bce0 <tcp_receive+0xb0c>)
 801bc06:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801bc08:	68bb      	ldr	r3, [r7, #8]
 801bc0a:	891b      	ldrh	r3, [r3, #8]
 801bc0c:	461c      	mov	r4, r3
 801bc0e:	68bb      	ldr	r3, [r7, #8]
 801bc10:	68db      	ldr	r3, [r3, #12]
 801bc12:	899b      	ldrh	r3, [r3, #12]
 801bc14:	b29b      	uxth	r3, r3
 801bc16:	4618      	mov	r0, r3
 801bc18:	f7f9 feaa 	bl	8015970 <lwip_htons>
 801bc1c:	4603      	mov	r3, r0
 801bc1e:	b2db      	uxtb	r3, r3
 801bc20:	f003 0303 	and.w	r3, r3, #3
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d001      	beq.n	801bc2c <tcp_receive+0xa58>
 801bc28:	2301      	movs	r3, #1
 801bc2a:	e000      	b.n	801bc2e <tcp_receive+0xa5a>
 801bc2c:	2300      	movs	r3, #0
 801bc2e:	191a      	adds	r2, r3, r4
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc34:	441a      	add	r2, r3
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801bc3a:	687b      	ldr	r3, [r7, #4]
 801bc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc3e:	461c      	mov	r4, r3
 801bc40:	68bb      	ldr	r3, [r7, #8]
 801bc42:	891b      	ldrh	r3, [r3, #8]
 801bc44:	461d      	mov	r5, r3
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	68db      	ldr	r3, [r3, #12]
 801bc4a:	899b      	ldrh	r3, [r3, #12]
 801bc4c:	b29b      	uxth	r3, r3
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7f9 fe8e 	bl	8015970 <lwip_htons>
 801bc54:	4603      	mov	r3, r0
 801bc56:	b2db      	uxtb	r3, r3
 801bc58:	f003 0303 	and.w	r3, r3, #3
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d001      	beq.n	801bc64 <tcp_receive+0xa90>
 801bc60:	2301      	movs	r3, #1
 801bc62:	e000      	b.n	801bc66 <tcp_receive+0xa92>
 801bc64:	2300      	movs	r3, #0
 801bc66:	442b      	add	r3, r5
 801bc68:	429c      	cmp	r4, r3
 801bc6a:	d206      	bcs.n	801bc7a <tcp_receive+0xaa6>
 801bc6c:	4b1e      	ldr	r3, [pc, #120]	; (801bce8 <tcp_receive+0xb14>)
 801bc6e:	f240 622b 	movw	r2, #1579	; 0x62b
 801bc72:	4923      	ldr	r1, [pc, #140]	; (801bd00 <tcp_receive+0xb2c>)
 801bc74:	481e      	ldr	r0, [pc, #120]	; (801bcf0 <tcp_receive+0xb1c>)
 801bc76:	f007 fdf5 	bl	8023864 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	891b      	ldrh	r3, [r3, #8]
 801bc7e:	461c      	mov	r4, r3
 801bc80:	68bb      	ldr	r3, [r7, #8]
 801bc82:	68db      	ldr	r3, [r3, #12]
 801bc84:	899b      	ldrh	r3, [r3, #12]
 801bc86:	b29b      	uxth	r3, r3
 801bc88:	4618      	mov	r0, r3
 801bc8a:	f7f9 fe71 	bl	8015970 <lwip_htons>
 801bc8e:	4603      	mov	r3, r0
 801bc90:	b2db      	uxtb	r3, r3
 801bc92:	f003 0303 	and.w	r3, r3, #3
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	d001      	beq.n	801bc9e <tcp_receive+0xaca>
 801bc9a:	2301      	movs	r3, #1
 801bc9c:	e000      	b.n	801bca0 <tcp_receive+0xacc>
 801bc9e:	2300      	movs	r3, #0
 801bca0:	1919      	adds	r1, r3, r4
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801bca6:	b28b      	uxth	r3, r1
 801bca8:	1ad3      	subs	r3, r2, r3
 801bcaa:	b29a      	uxth	r2, r3
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801bcb0:	6878      	ldr	r0, [r7, #4]
 801bcb2:	f7fc fe15 	bl	80188e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801bcb6:	68bb      	ldr	r3, [r7, #8]
 801bcb8:	685b      	ldr	r3, [r3, #4]
 801bcba:	891b      	ldrh	r3, [r3, #8]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d028      	beq.n	801bd12 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801bcc0:	4b0d      	ldr	r3, [pc, #52]	; (801bcf8 <tcp_receive+0xb24>)
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	d01d      	beq.n	801bd04 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801bcc8:	4b0b      	ldr	r3, [pc, #44]	; (801bcf8 <tcp_receive+0xb24>)
 801bcca:	681a      	ldr	r2, [r3, #0]
 801bccc:	68bb      	ldr	r3, [r7, #8]
 801bcce:	685b      	ldr	r3, [r3, #4]
 801bcd0:	4619      	mov	r1, r3
 801bcd2:	4610      	mov	r0, r2
 801bcd4:	f7fb fdd6 	bl	8017884 <pbuf_cat>
 801bcd8:	e018      	b.n	801bd0c <tcp_receive+0xb38>
 801bcda:	bf00      	nop
 801bcdc:	20015ffa 	.word	0x20015ffa
 801bce0:	20015ff0 	.word	0x20015ff0
 801bce4:	20015fd0 	.word	0x20015fd0
 801bce8:	0802a738 	.word	0x0802a738
 801bcec:	0802ab18 	.word	0x0802ab18
 801bcf0:	0802a784 	.word	0x0802a784
 801bcf4:	0802ab54 	.word	0x0802ab54
 801bcf8:	20016000 	.word	0x20016000
 801bcfc:	20015ffd 	.word	0x20015ffd
 801bd00:	0802ab74 	.word	0x0802ab74
            } else {
              recv_data = cseg->p;
 801bd04:	68bb      	ldr	r3, [r7, #8]
 801bd06:	685b      	ldr	r3, [r3, #4]
 801bd08:	4a70      	ldr	r2, [pc, #448]	; (801becc <tcp_receive+0xcf8>)
 801bd0a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801bd0c:	68bb      	ldr	r3, [r7, #8]
 801bd0e:	2200      	movs	r2, #0
 801bd10:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bd12:	68bb      	ldr	r3, [r7, #8]
 801bd14:	68db      	ldr	r3, [r3, #12]
 801bd16:	899b      	ldrh	r3, [r3, #12]
 801bd18:	b29b      	uxth	r3, r3
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	f7f9 fe28 	bl	8015970 <lwip_htons>
 801bd20:	4603      	mov	r3, r0
 801bd22:	b2db      	uxtb	r3, r3
 801bd24:	f003 0301 	and.w	r3, r3, #1
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	d00d      	beq.n	801bd48 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801bd2c:	4b68      	ldr	r3, [pc, #416]	; (801bed0 <tcp_receive+0xcfc>)
 801bd2e:	781b      	ldrb	r3, [r3, #0]
 801bd30:	f043 0320 	orr.w	r3, r3, #32
 801bd34:	b2da      	uxtb	r2, r3
 801bd36:	4b66      	ldr	r3, [pc, #408]	; (801bed0 <tcp_receive+0xcfc>)
 801bd38:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	7d1b      	ldrb	r3, [r3, #20]
 801bd3e:	2b04      	cmp	r3, #4
 801bd40:	d102      	bne.n	801bd48 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	2207      	movs	r2, #7
 801bd46:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	681a      	ldr	r2, [r3, #0]
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801bd50:	68b8      	ldr	r0, [r7, #8]
 801bd52:	f7fd faec 	bl	801932e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d008      	beq.n	801bd70 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	685a      	ldr	r2, [r3, #4]
 801bd66:	687b      	ldr	r3, [r7, #4]
 801bd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801bd6a:	429a      	cmp	r2, r3
 801bd6c:	f43f af43 	beq.w	801bbf6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	8b5b      	ldrh	r3, [r3, #26]
 801bd74:	f003 0301 	and.w	r3, r3, #1
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d00e      	beq.n	801bd9a <tcp_receive+0xbc6>
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	8b5b      	ldrh	r3, [r3, #26]
 801bd80:	f023 0301 	bic.w	r3, r3, #1
 801bd84:	b29a      	uxth	r2, r3
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	835a      	strh	r2, [r3, #26]
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	8b5b      	ldrh	r3, [r3, #26]
 801bd8e:	f043 0302 	orr.w	r3, r3, #2
 801bd92:	b29a      	uxth	r2, r3
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801bd98:	e188      	b.n	801c0ac <tcp_receive+0xed8>
        tcp_ack(pcb);
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	8b5b      	ldrh	r3, [r3, #26]
 801bd9e:	f043 0301 	orr.w	r3, r3, #1
 801bda2:	b29a      	uxth	r2, r3
 801bda4:	687b      	ldr	r3, [r7, #4]
 801bda6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801bda8:	e180      	b.n	801c0ac <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d106      	bne.n	801bdc0 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801bdb2:	4848      	ldr	r0, [pc, #288]	; (801bed4 <tcp_receive+0xd00>)
 801bdb4:	f7fd fad4 	bl	8019360 <tcp_seg_copy>
 801bdb8:	4602      	mov	r2, r0
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	675a      	str	r2, [r3, #116]	; 0x74
 801bdbe:	e16d      	b.n	801c09c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801bdc0:	2300      	movs	r3, #0
 801bdc2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bdc8:	63bb      	str	r3, [r7, #56]	; 0x38
 801bdca:	e157      	b.n	801c07c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bdce:	68db      	ldr	r3, [r3, #12]
 801bdd0:	685a      	ldr	r2, [r3, #4]
 801bdd2:	4b41      	ldr	r3, [pc, #260]	; (801bed8 <tcp_receive+0xd04>)
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	429a      	cmp	r2, r3
 801bdd8:	d11d      	bne.n	801be16 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801bdda:	4b3e      	ldr	r3, [pc, #248]	; (801bed4 <tcp_receive+0xd00>)
 801bddc:	891a      	ldrh	r2, [r3, #8]
 801bdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bde0:	891b      	ldrh	r3, [r3, #8]
 801bde2:	429a      	cmp	r2, r3
 801bde4:	f240 814f 	bls.w	801c086 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801bde8:	483a      	ldr	r0, [pc, #232]	; (801bed4 <tcp_receive+0xd00>)
 801bdea:	f7fd fab9 	bl	8019360 <tcp_seg_copy>
 801bdee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801bdf0:	697b      	ldr	r3, [r7, #20]
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	f000 8149 	beq.w	801c08a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801bdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	d003      	beq.n	801be06 <tcp_receive+0xc32>
                    prev->next = cseg;
 801bdfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be00:	697a      	ldr	r2, [r7, #20]
 801be02:	601a      	str	r2, [r3, #0]
 801be04:	e002      	b.n	801be0c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801be06:	687b      	ldr	r3, [r7, #4]
 801be08:	697a      	ldr	r2, [r7, #20]
 801be0a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801be0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801be0e:	6978      	ldr	r0, [r7, #20]
 801be10:	f7ff f8dc 	bl	801afcc <tcp_oos_insert_segment>
                }
                break;
 801be14:	e139      	b.n	801c08a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801be16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d117      	bne.n	801be4c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801be1c:	4b2e      	ldr	r3, [pc, #184]	; (801bed8 <tcp_receive+0xd04>)
 801be1e:	681a      	ldr	r2, [r3, #0]
 801be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be22:	68db      	ldr	r3, [r3, #12]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	1ad3      	subs	r3, r2, r3
 801be28:	2b00      	cmp	r3, #0
 801be2a:	da57      	bge.n	801bedc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801be2c:	4829      	ldr	r0, [pc, #164]	; (801bed4 <tcp_receive+0xd00>)
 801be2e:	f7fd fa97 	bl	8019360 <tcp_seg_copy>
 801be32:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801be34:	69bb      	ldr	r3, [r7, #24]
 801be36:	2b00      	cmp	r3, #0
 801be38:	f000 8129 	beq.w	801c08e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	69ba      	ldr	r2, [r7, #24]
 801be40:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801be42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801be44:	69b8      	ldr	r0, [r7, #24]
 801be46:	f7ff f8c1 	bl	801afcc <tcp_oos_insert_segment>
                  }
                  break;
 801be4a:	e120      	b.n	801c08e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801be4c:	4b22      	ldr	r3, [pc, #136]	; (801bed8 <tcp_receive+0xd04>)
 801be4e:	681a      	ldr	r2, [r3, #0]
 801be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be52:	68db      	ldr	r3, [r3, #12]
 801be54:	685b      	ldr	r3, [r3, #4]
 801be56:	1ad3      	subs	r3, r2, r3
 801be58:	3b01      	subs	r3, #1
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	db3e      	blt.n	801bedc <tcp_receive+0xd08>
 801be5e:	4b1e      	ldr	r3, [pc, #120]	; (801bed8 <tcp_receive+0xd04>)
 801be60:	681a      	ldr	r2, [r3, #0]
 801be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801be64:	68db      	ldr	r3, [r3, #12]
 801be66:	685b      	ldr	r3, [r3, #4]
 801be68:	1ad3      	subs	r3, r2, r3
 801be6a:	3301      	adds	r3, #1
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	dc35      	bgt.n	801bedc <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801be70:	4818      	ldr	r0, [pc, #96]	; (801bed4 <tcp_receive+0xd00>)
 801be72:	f7fd fa75 	bl	8019360 <tcp_seg_copy>
 801be76:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801be78:	69fb      	ldr	r3, [r7, #28]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	f000 8109 	beq.w	801c092 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be82:	68db      	ldr	r3, [r3, #12]
 801be84:	685b      	ldr	r3, [r3, #4]
 801be86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801be88:	8912      	ldrh	r2, [r2, #8]
 801be8a:	441a      	add	r2, r3
 801be8c:	4b12      	ldr	r3, [pc, #72]	; (801bed8 <tcp_receive+0xd04>)
 801be8e:	681b      	ldr	r3, [r3, #0]
 801be90:	1ad3      	subs	r3, r2, r3
 801be92:	2b00      	cmp	r3, #0
 801be94:	dd12      	ble.n	801bebc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801be96:	4b10      	ldr	r3, [pc, #64]	; (801bed8 <tcp_receive+0xd04>)
 801be98:	681b      	ldr	r3, [r3, #0]
 801be9a:	b29a      	uxth	r2, r3
 801be9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	685b      	ldr	r3, [r3, #4]
 801bea2:	b29b      	uxth	r3, r3
 801bea4:	1ad3      	subs	r3, r2, r3
 801bea6:	b29a      	uxth	r2, r3
 801bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beaa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801beac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beae:	685a      	ldr	r2, [r3, #4]
 801beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801beb2:	891b      	ldrh	r3, [r3, #8]
 801beb4:	4619      	mov	r1, r3
 801beb6:	4610      	mov	r0, r2
 801beb8:	f7fb fa90 	bl	80173dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801bebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bebe:	69fa      	ldr	r2, [r7, #28]
 801bec0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801bec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801bec4:	69f8      	ldr	r0, [r7, #28]
 801bec6:	f7ff f881 	bl	801afcc <tcp_oos_insert_segment>
                  }
                  break;
 801beca:	e0e2      	b.n	801c092 <tcp_receive+0xebe>
 801becc:	20016000 	.word	0x20016000
 801bed0:	20015ffd 	.word	0x20015ffd
 801bed4:	20015fd0 	.word	0x20015fd0
 801bed8:	20015ff0 	.word	0x20015ff0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bede:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	f040 80c6 	bne.w	801c076 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801beea:	4b80      	ldr	r3, [pc, #512]	; (801c0ec <tcp_receive+0xf18>)
 801beec:	681a      	ldr	r2, [r3, #0]
 801beee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bef0:	68db      	ldr	r3, [r3, #12]
 801bef2:	685b      	ldr	r3, [r3, #4]
 801bef4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	f340 80bd 	ble.w	801c076 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801befe:	68db      	ldr	r3, [r3, #12]
 801bf00:	899b      	ldrh	r3, [r3, #12]
 801bf02:	b29b      	uxth	r3, r3
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7f9 fd33 	bl	8015970 <lwip_htons>
 801bf0a:	4603      	mov	r3, r0
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	f003 0301 	and.w	r3, r3, #1
 801bf12:	2b00      	cmp	r3, #0
 801bf14:	f040 80bf 	bne.w	801c096 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801bf18:	4875      	ldr	r0, [pc, #468]	; (801c0f0 <tcp_receive+0xf1c>)
 801bf1a:	f7fd fa21 	bl	8019360 <tcp_seg_copy>
 801bf1e:	4602      	mov	r2, r0
 801bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf22:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf26:	681b      	ldr	r3, [r3, #0]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	f000 80b6 	beq.w	801c09a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf30:	68db      	ldr	r3, [r3, #12]
 801bf32:	685b      	ldr	r3, [r3, #4]
 801bf34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bf36:	8912      	ldrh	r2, [r2, #8]
 801bf38:	441a      	add	r2, r3
 801bf3a:	4b6c      	ldr	r3, [pc, #432]	; (801c0ec <tcp_receive+0xf18>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	1ad3      	subs	r3, r2, r3
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	dd12      	ble.n	801bf6a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801bf44:	4b69      	ldr	r3, [pc, #420]	; (801c0ec <tcp_receive+0xf18>)
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	b29a      	uxth	r2, r3
 801bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf4c:	68db      	ldr	r3, [r3, #12]
 801bf4e:	685b      	ldr	r3, [r3, #4]
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	1ad3      	subs	r3, r2, r3
 801bf54:	b29a      	uxth	r2, r3
 801bf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf58:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf5c:	685a      	ldr	r2, [r3, #4]
 801bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf60:	891b      	ldrh	r3, [r3, #8]
 801bf62:	4619      	mov	r1, r3
 801bf64:	4610      	mov	r0, r2
 801bf66:	f7fb fa39 	bl	80173dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801bf6a:	4b62      	ldr	r3, [pc, #392]	; (801c0f4 <tcp_receive+0xf20>)
 801bf6c:	881b      	ldrh	r3, [r3, #0]
 801bf6e:	461a      	mov	r2, r3
 801bf70:	4b5e      	ldr	r3, [pc, #376]	; (801c0ec <tcp_receive+0xf18>)
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	441a      	add	r2, r3
 801bf76:	687b      	ldr	r3, [r7, #4]
 801bf78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf7a:	6879      	ldr	r1, [r7, #4]
 801bf7c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bf7e:	440b      	add	r3, r1
 801bf80:	1ad3      	subs	r3, r2, r3
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	f340 8089 	ble.w	801c09a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	68db      	ldr	r3, [r3, #12]
 801bf8e:	899b      	ldrh	r3, [r3, #12]
 801bf90:	b29b      	uxth	r3, r3
 801bf92:	4618      	mov	r0, r3
 801bf94:	f7f9 fcec 	bl	8015970 <lwip_htons>
 801bf98:	4603      	mov	r3, r0
 801bf9a:	b2db      	uxtb	r3, r3
 801bf9c:	f003 0301 	and.w	r3, r3, #1
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	d022      	beq.n	801bfea <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801bfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	68db      	ldr	r3, [r3, #12]
 801bfaa:	899b      	ldrh	r3, [r3, #12]
 801bfac:	b29b      	uxth	r3, r3
 801bfae:	b21b      	sxth	r3, r3
 801bfb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bfb4:	b21c      	sxth	r4, r3
 801bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	68db      	ldr	r3, [r3, #12]
 801bfbc:	899b      	ldrh	r3, [r3, #12]
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	4618      	mov	r0, r3
 801bfc2:	f7f9 fcd5 	bl	8015970 <lwip_htons>
 801bfc6:	4603      	mov	r3, r0
 801bfc8:	b2db      	uxtb	r3, r3
 801bfca:	b29b      	uxth	r3, r3
 801bfcc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f7f9 fccc 	bl	8015970 <lwip_htons>
 801bfd8:	4603      	mov	r3, r0
 801bfda:	b21b      	sxth	r3, r3
 801bfdc:	4323      	orrs	r3, r4
 801bfde:	b21a      	sxth	r2, r3
 801bfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	68db      	ldr	r3, [r3, #12]
 801bfe6:	b292      	uxth	r2, r2
 801bfe8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bfee:	b29a      	uxth	r2, r3
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bff4:	4413      	add	r3, r2
 801bff6:	b299      	uxth	r1, r3
 801bff8:	4b3c      	ldr	r3, [pc, #240]	; (801c0ec <tcp_receive+0xf18>)
 801bffa:	681b      	ldr	r3, [r3, #0]
 801bffc:	b29a      	uxth	r2, r3
 801bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	1a8a      	subs	r2, r1, r2
 801c004:	b292      	uxth	r2, r2
 801c006:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801c008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	685a      	ldr	r2, [r3, #4]
 801c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	891b      	ldrh	r3, [r3, #8]
 801c014:	4619      	mov	r1, r3
 801c016:	4610      	mov	r0, r2
 801c018:	f7fb f9e0 	bl	80173dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801c01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	891c      	ldrh	r4, [r3, #8]
 801c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	68db      	ldr	r3, [r3, #12]
 801c028:	899b      	ldrh	r3, [r3, #12]
 801c02a:	b29b      	uxth	r3, r3
 801c02c:	4618      	mov	r0, r3
 801c02e:	f7f9 fc9f 	bl	8015970 <lwip_htons>
 801c032:	4603      	mov	r3, r0
 801c034:	b2db      	uxtb	r3, r3
 801c036:	f003 0303 	and.w	r3, r3, #3
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d001      	beq.n	801c042 <tcp_receive+0xe6e>
 801c03e:	2301      	movs	r3, #1
 801c040:	e000      	b.n	801c044 <tcp_receive+0xe70>
 801c042:	2300      	movs	r3, #0
 801c044:	4423      	add	r3, r4
 801c046:	b29a      	uxth	r2, r3
 801c048:	4b2a      	ldr	r3, [pc, #168]	; (801c0f4 <tcp_receive+0xf20>)
 801c04a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c04c:	4b29      	ldr	r3, [pc, #164]	; (801c0f4 <tcp_receive+0xf20>)
 801c04e:	881b      	ldrh	r3, [r3, #0]
 801c050:	461a      	mov	r2, r3
 801c052:	4b26      	ldr	r3, [pc, #152]	; (801c0ec <tcp_receive+0xf18>)
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	441a      	add	r2, r3
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c05c:	6879      	ldr	r1, [r7, #4]
 801c05e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c060:	440b      	add	r3, r1
 801c062:	429a      	cmp	r2, r3
 801c064:	d019      	beq.n	801c09a <tcp_receive+0xec6>
 801c066:	4b24      	ldr	r3, [pc, #144]	; (801c0f8 <tcp_receive+0xf24>)
 801c068:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801c06c:	4923      	ldr	r1, [pc, #140]	; (801c0fc <tcp_receive+0xf28>)
 801c06e:	4824      	ldr	r0, [pc, #144]	; (801c100 <tcp_receive+0xf2c>)
 801c070:	f007 fbf8 	bl	8023864 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801c074:	e011      	b.n	801c09a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	63bb      	str	r3, [r7, #56]	; 0x38
 801c07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c07e:	2b00      	cmp	r3, #0
 801c080:	f47f aea4 	bne.w	801bdcc <tcp_receive+0xbf8>
 801c084:	e00a      	b.n	801c09c <tcp_receive+0xec8>
                break;
 801c086:	bf00      	nop
 801c088:	e008      	b.n	801c09c <tcp_receive+0xec8>
                break;
 801c08a:	bf00      	nop
 801c08c:	e006      	b.n	801c09c <tcp_receive+0xec8>
                  break;
 801c08e:	bf00      	nop
 801c090:	e004      	b.n	801c09c <tcp_receive+0xec8>
                  break;
 801c092:	bf00      	nop
 801c094:	e002      	b.n	801c09c <tcp_receive+0xec8>
                  break;
 801c096:	bf00      	nop
 801c098:	e000      	b.n	801c09c <tcp_receive+0xec8>
                break;
 801c09a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801c09c:	6878      	ldr	r0, [r7, #4]
 801c09e:	f001 fe8b 	bl	801ddb8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801c0a2:	e003      	b.n	801c0ac <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801c0a4:	6878      	ldr	r0, [r7, #4]
 801c0a6:	f001 fe87 	bl	801ddb8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c0aa:	e01a      	b.n	801c0e2 <tcp_receive+0xf0e>
 801c0ac:	e019      	b.n	801c0e2 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801c0ae:	4b0f      	ldr	r3, [pc, #60]	; (801c0ec <tcp_receive+0xf18>)
 801c0b0:	681a      	ldr	r2, [r3, #0]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b6:	1ad3      	subs	r3, r2, r3
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	db0a      	blt.n	801c0d2 <tcp_receive+0xefe>
 801c0bc:	4b0b      	ldr	r3, [pc, #44]	; (801c0ec <tcp_receive+0xf18>)
 801c0be:	681a      	ldr	r2, [r3, #0]
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0c4:	6879      	ldr	r1, [r7, #4]
 801c0c6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c0c8:	440b      	add	r3, r1
 801c0ca:	1ad3      	subs	r3, r2, r3
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	dd07      	ble.n	801c0e2 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	8b5b      	ldrh	r3, [r3, #26]
 801c0d6:	f043 0302 	orr.w	r3, r3, #2
 801c0da:	b29a      	uxth	r2, r3
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801c0e0:	e7ff      	b.n	801c0e2 <tcp_receive+0xf0e>
 801c0e2:	bf00      	nop
 801c0e4:	3750      	adds	r7, #80	; 0x50
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	bdb0      	pop	{r4, r5, r7, pc}
 801c0ea:	bf00      	nop
 801c0ec:	20015ff0 	.word	0x20015ff0
 801c0f0:	20015fd0 	.word	0x20015fd0
 801c0f4:	20015ffa 	.word	0x20015ffa
 801c0f8:	0802a738 	.word	0x0802a738
 801c0fc:	0802aae0 	.word	0x0802aae0
 801c100:	0802a784 	.word	0x0802a784

0801c104 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801c104:	b480      	push	{r7}
 801c106:	b083      	sub	sp, #12
 801c108:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801c10a:	4b15      	ldr	r3, [pc, #84]	; (801c160 <tcp_get_next_optbyte+0x5c>)
 801c10c:	881b      	ldrh	r3, [r3, #0]
 801c10e:	1c5a      	adds	r2, r3, #1
 801c110:	b291      	uxth	r1, r2
 801c112:	4a13      	ldr	r2, [pc, #76]	; (801c160 <tcp_get_next_optbyte+0x5c>)
 801c114:	8011      	strh	r1, [r2, #0]
 801c116:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801c118:	4b12      	ldr	r3, [pc, #72]	; (801c164 <tcp_get_next_optbyte+0x60>)
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	2b00      	cmp	r3, #0
 801c11e:	d004      	beq.n	801c12a <tcp_get_next_optbyte+0x26>
 801c120:	4b11      	ldr	r3, [pc, #68]	; (801c168 <tcp_get_next_optbyte+0x64>)
 801c122:	881b      	ldrh	r3, [r3, #0]
 801c124:	88fa      	ldrh	r2, [r7, #6]
 801c126:	429a      	cmp	r2, r3
 801c128:	d208      	bcs.n	801c13c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801c12a:	4b10      	ldr	r3, [pc, #64]	; (801c16c <tcp_get_next_optbyte+0x68>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	3314      	adds	r3, #20
 801c130:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801c132:	88fb      	ldrh	r3, [r7, #6]
 801c134:	683a      	ldr	r2, [r7, #0]
 801c136:	4413      	add	r3, r2
 801c138:	781b      	ldrb	r3, [r3, #0]
 801c13a:	e00b      	b.n	801c154 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801c13c:	88fb      	ldrh	r3, [r7, #6]
 801c13e:	b2da      	uxtb	r2, r3
 801c140:	4b09      	ldr	r3, [pc, #36]	; (801c168 <tcp_get_next_optbyte+0x64>)
 801c142:	881b      	ldrh	r3, [r3, #0]
 801c144:	b2db      	uxtb	r3, r3
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801c14a:	4b06      	ldr	r3, [pc, #24]	; (801c164 <tcp_get_next_optbyte+0x60>)
 801c14c:	681a      	ldr	r2, [r3, #0]
 801c14e:	797b      	ldrb	r3, [r7, #5]
 801c150:	4413      	add	r3, r2
 801c152:	781b      	ldrb	r3, [r3, #0]
  }
}
 801c154:	4618      	mov	r0, r3
 801c156:	370c      	adds	r7, #12
 801c158:	46bd      	mov	sp, r7
 801c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c15e:	4770      	bx	lr
 801c160:	20015fec 	.word	0x20015fec
 801c164:	20015fe8 	.word	0x20015fe8
 801c168:	20015fe6 	.word	0x20015fe6
 801c16c:	20015fe0 	.word	0x20015fe0

0801c170 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801c170:	b580      	push	{r7, lr}
 801c172:	b084      	sub	sp, #16
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d106      	bne.n	801c18c <tcp_parseopt+0x1c>
 801c17e:	4b32      	ldr	r3, [pc, #200]	; (801c248 <tcp_parseopt+0xd8>)
 801c180:	f240 727d 	movw	r2, #1917	; 0x77d
 801c184:	4931      	ldr	r1, [pc, #196]	; (801c24c <tcp_parseopt+0xdc>)
 801c186:	4832      	ldr	r0, [pc, #200]	; (801c250 <tcp_parseopt+0xe0>)
 801c188:	f007 fb6c 	bl	8023864 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801c18c:	4b31      	ldr	r3, [pc, #196]	; (801c254 <tcp_parseopt+0xe4>)
 801c18e:	881b      	ldrh	r3, [r3, #0]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d055      	beq.n	801c240 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c194:	4b30      	ldr	r3, [pc, #192]	; (801c258 <tcp_parseopt+0xe8>)
 801c196:	2200      	movs	r2, #0
 801c198:	801a      	strh	r2, [r3, #0]
 801c19a:	e045      	b.n	801c228 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801c19c:	f7ff ffb2 	bl	801c104 <tcp_get_next_optbyte>
 801c1a0:	4603      	mov	r3, r0
 801c1a2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801c1a4:	7bfb      	ldrb	r3, [r7, #15]
 801c1a6:	2b02      	cmp	r3, #2
 801c1a8:	d006      	beq.n	801c1b8 <tcp_parseopt+0x48>
 801c1aa:	2b02      	cmp	r3, #2
 801c1ac:	dc2b      	bgt.n	801c206 <tcp_parseopt+0x96>
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d041      	beq.n	801c236 <tcp_parseopt+0xc6>
 801c1b2:	2b01      	cmp	r3, #1
 801c1b4:	d127      	bne.n	801c206 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801c1b6:	e037      	b.n	801c228 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801c1b8:	f7ff ffa4 	bl	801c104 <tcp_get_next_optbyte>
 801c1bc:	4603      	mov	r3, r0
 801c1be:	2b04      	cmp	r3, #4
 801c1c0:	d13b      	bne.n	801c23a <tcp_parseopt+0xca>
 801c1c2:	4b25      	ldr	r3, [pc, #148]	; (801c258 <tcp_parseopt+0xe8>)
 801c1c4:	881b      	ldrh	r3, [r3, #0]
 801c1c6:	3301      	adds	r3, #1
 801c1c8:	4a22      	ldr	r2, [pc, #136]	; (801c254 <tcp_parseopt+0xe4>)
 801c1ca:	8812      	ldrh	r2, [r2, #0]
 801c1cc:	4293      	cmp	r3, r2
 801c1ce:	da34      	bge.n	801c23a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801c1d0:	f7ff ff98 	bl	801c104 <tcp_get_next_optbyte>
 801c1d4:	4603      	mov	r3, r0
 801c1d6:	b29b      	uxth	r3, r3
 801c1d8:	021b      	lsls	r3, r3, #8
 801c1da:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801c1dc:	f7ff ff92 	bl	801c104 <tcp_get_next_optbyte>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	b29a      	uxth	r2, r3
 801c1e4:	89bb      	ldrh	r3, [r7, #12]
 801c1e6:	4313      	orrs	r3, r2
 801c1e8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801c1ea:	89bb      	ldrh	r3, [r7, #12]
 801c1ec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801c1f0:	d804      	bhi.n	801c1fc <tcp_parseopt+0x8c>
 801c1f2:	89bb      	ldrh	r3, [r7, #12]
 801c1f4:	2b00      	cmp	r3, #0
 801c1f6:	d001      	beq.n	801c1fc <tcp_parseopt+0x8c>
 801c1f8:	89ba      	ldrh	r2, [r7, #12]
 801c1fa:	e001      	b.n	801c200 <tcp_parseopt+0x90>
 801c1fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801c204:	e010      	b.n	801c228 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801c206:	f7ff ff7d 	bl	801c104 <tcp_get_next_optbyte>
 801c20a:	4603      	mov	r3, r0
 801c20c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801c20e:	7afb      	ldrb	r3, [r7, #11]
 801c210:	2b01      	cmp	r3, #1
 801c212:	d914      	bls.n	801c23e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801c214:	7afb      	ldrb	r3, [r7, #11]
 801c216:	b29a      	uxth	r2, r3
 801c218:	4b0f      	ldr	r3, [pc, #60]	; (801c258 <tcp_parseopt+0xe8>)
 801c21a:	881b      	ldrh	r3, [r3, #0]
 801c21c:	4413      	add	r3, r2
 801c21e:	b29b      	uxth	r3, r3
 801c220:	3b02      	subs	r3, #2
 801c222:	b29a      	uxth	r2, r3
 801c224:	4b0c      	ldr	r3, [pc, #48]	; (801c258 <tcp_parseopt+0xe8>)
 801c226:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801c228:	4b0b      	ldr	r3, [pc, #44]	; (801c258 <tcp_parseopt+0xe8>)
 801c22a:	881a      	ldrh	r2, [r3, #0]
 801c22c:	4b09      	ldr	r3, [pc, #36]	; (801c254 <tcp_parseopt+0xe4>)
 801c22e:	881b      	ldrh	r3, [r3, #0]
 801c230:	429a      	cmp	r2, r3
 801c232:	d3b3      	bcc.n	801c19c <tcp_parseopt+0x2c>
 801c234:	e004      	b.n	801c240 <tcp_parseopt+0xd0>
          return;
 801c236:	bf00      	nop
 801c238:	e002      	b.n	801c240 <tcp_parseopt+0xd0>
            return;
 801c23a:	bf00      	nop
 801c23c:	e000      	b.n	801c240 <tcp_parseopt+0xd0>
            return;
 801c23e:	bf00      	nop
      }
    }
  }
}
 801c240:	3710      	adds	r7, #16
 801c242:	46bd      	mov	sp, r7
 801c244:	bd80      	pop	{r7, pc}
 801c246:	bf00      	nop
 801c248:	0802a738 	.word	0x0802a738
 801c24c:	0802ab9c 	.word	0x0802ab9c
 801c250:	0802a784 	.word	0x0802a784
 801c254:	20015fe4 	.word	0x20015fe4
 801c258:	20015fec 	.word	0x20015fec

0801c25c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801c25c:	b480      	push	{r7}
 801c25e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801c260:	4b05      	ldr	r3, [pc, #20]	; (801c278 <tcp_trigger_input_pcb_close+0x1c>)
 801c262:	781b      	ldrb	r3, [r3, #0]
 801c264:	f043 0310 	orr.w	r3, r3, #16
 801c268:	b2da      	uxtb	r2, r3
 801c26a:	4b03      	ldr	r3, [pc, #12]	; (801c278 <tcp_trigger_input_pcb_close+0x1c>)
 801c26c:	701a      	strb	r2, [r3, #0]
}
 801c26e:	bf00      	nop
 801c270:	46bd      	mov	sp, r7
 801c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c276:	4770      	bx	lr
 801c278:	20015ffd 	.word	0x20015ffd

0801c27c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b084      	sub	sp, #16
 801c280:	af00      	add	r7, sp, #0
 801c282:	60f8      	str	r0, [r7, #12]
 801c284:	60b9      	str	r1, [r7, #8]
 801c286:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c288:	68fb      	ldr	r3, [r7, #12]
 801c28a:	2b00      	cmp	r3, #0
 801c28c:	d00a      	beq.n	801c2a4 <tcp_route+0x28>
 801c28e:	68fb      	ldr	r3, [r7, #12]
 801c290:	7a1b      	ldrb	r3, [r3, #8]
 801c292:	2b00      	cmp	r3, #0
 801c294:	d006      	beq.n	801c2a4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	7a1b      	ldrb	r3, [r3, #8]
 801c29a:	4618      	mov	r0, r3
 801c29c:	f7fa fe96 	bl	8016fcc <netif_get_by_index>
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	e003      	b.n	801c2ac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801c2a4:	6878      	ldr	r0, [r7, #4]
 801c2a6:	f003 fe19 	bl	801fedc <ip4_route>
 801c2aa:	4603      	mov	r3, r0
  }
}
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	3710      	adds	r7, #16
 801c2b0:	46bd      	mov	sp, r7
 801c2b2:	bd80      	pop	{r7, pc}

0801c2b4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801c2b4:	b590      	push	{r4, r7, lr}
 801c2b6:	b087      	sub	sp, #28
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	60f8      	str	r0, [r7, #12]
 801c2bc:	60b9      	str	r1, [r7, #8]
 801c2be:	603b      	str	r3, [r7, #0]
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d105      	bne.n	801c2d6 <tcp_create_segment+0x22>
 801c2ca:	4b44      	ldr	r3, [pc, #272]	; (801c3dc <tcp_create_segment+0x128>)
 801c2cc:	22a3      	movs	r2, #163	; 0xa3
 801c2ce:	4944      	ldr	r1, [pc, #272]	; (801c3e0 <tcp_create_segment+0x12c>)
 801c2d0:	4844      	ldr	r0, [pc, #272]	; (801c3e4 <tcp_create_segment+0x130>)
 801c2d2:	f007 fac7 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d105      	bne.n	801c2e8 <tcp_create_segment+0x34>
 801c2dc:	4b3f      	ldr	r3, [pc, #252]	; (801c3dc <tcp_create_segment+0x128>)
 801c2de:	22a4      	movs	r2, #164	; 0xa4
 801c2e0:	4941      	ldr	r1, [pc, #260]	; (801c3e8 <tcp_create_segment+0x134>)
 801c2e2:	4840      	ldr	r0, [pc, #256]	; (801c3e4 <tcp_create_segment+0x130>)
 801c2e4:	f007 fabe 	bl	8023864 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c2e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c2ec:	009b      	lsls	r3, r3, #2
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	f003 0304 	and.w	r3, r3, #4
 801c2f4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c2f6:	2003      	movs	r0, #3
 801c2f8:	f7fa fadc 	bl	80168b4 <memp_malloc>
 801c2fc:	6138      	str	r0, [r7, #16]
 801c2fe:	693b      	ldr	r3, [r7, #16]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d104      	bne.n	801c30e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801c304:	68b8      	ldr	r0, [r7, #8]
 801c306:	f7fb f9ef 	bl	80176e8 <pbuf_free>
    return NULL;
 801c30a:	2300      	movs	r3, #0
 801c30c:	e061      	b.n	801c3d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801c30e:	693b      	ldr	r3, [r7, #16]
 801c310:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801c314:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801c316:	693b      	ldr	r3, [r7, #16]
 801c318:	2200      	movs	r2, #0
 801c31a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801c31c:	693b      	ldr	r3, [r7, #16]
 801c31e:	68ba      	ldr	r2, [r7, #8]
 801c320:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c322:	68bb      	ldr	r3, [r7, #8]
 801c324:	891a      	ldrh	r2, [r3, #8]
 801c326:	7dfb      	ldrb	r3, [r7, #23]
 801c328:	b29b      	uxth	r3, r3
 801c32a:	429a      	cmp	r2, r3
 801c32c:	d205      	bcs.n	801c33a <tcp_create_segment+0x86>
 801c32e:	4b2b      	ldr	r3, [pc, #172]	; (801c3dc <tcp_create_segment+0x128>)
 801c330:	22b0      	movs	r2, #176	; 0xb0
 801c332:	492e      	ldr	r1, [pc, #184]	; (801c3ec <tcp_create_segment+0x138>)
 801c334:	482b      	ldr	r0, [pc, #172]	; (801c3e4 <tcp_create_segment+0x130>)
 801c336:	f007 fa95 	bl	8023864 <iprintf>
  seg->len = p->tot_len - optlen;
 801c33a:	68bb      	ldr	r3, [r7, #8]
 801c33c:	891a      	ldrh	r2, [r3, #8]
 801c33e:	7dfb      	ldrb	r3, [r7, #23]
 801c340:	b29b      	uxth	r3, r3
 801c342:	1ad3      	subs	r3, r2, r3
 801c344:	b29a      	uxth	r2, r3
 801c346:	693b      	ldr	r3, [r7, #16]
 801c348:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c34a:	2114      	movs	r1, #20
 801c34c:	68b8      	ldr	r0, [r7, #8]
 801c34e:	f7fb f935 	bl	80175bc <pbuf_add_header>
 801c352:	4603      	mov	r3, r0
 801c354:	2b00      	cmp	r3, #0
 801c356:	d004      	beq.n	801c362 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801c358:	6938      	ldr	r0, [r7, #16]
 801c35a:	f7fc ffe8 	bl	801932e <tcp_seg_free>
    return NULL;
 801c35e:	2300      	movs	r3, #0
 801c360:	e037      	b.n	801c3d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c362:	693b      	ldr	r3, [r7, #16]
 801c364:	685b      	ldr	r3, [r3, #4]
 801c366:	685a      	ldr	r2, [r3, #4]
 801c368:	693b      	ldr	r3, [r7, #16]
 801c36a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	8ada      	ldrh	r2, [r3, #22]
 801c370:	693b      	ldr	r3, [r7, #16]
 801c372:	68dc      	ldr	r4, [r3, #12]
 801c374:	4610      	mov	r0, r2
 801c376:	f7f9 fafb 	bl	8015970 <lwip_htons>
 801c37a:	4603      	mov	r3, r0
 801c37c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	8b1a      	ldrh	r2, [r3, #24]
 801c382:	693b      	ldr	r3, [r7, #16]
 801c384:	68dc      	ldr	r4, [r3, #12]
 801c386:	4610      	mov	r0, r2
 801c388:	f7f9 faf2 	bl	8015970 <lwip_htons>
 801c38c:	4603      	mov	r3, r0
 801c38e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	68dc      	ldr	r4, [r3, #12]
 801c394:	6838      	ldr	r0, [r7, #0]
 801c396:	f7f9 fb00 	bl	801599a <lwip_htonl>
 801c39a:	4603      	mov	r3, r0
 801c39c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c39e:	7dfb      	ldrb	r3, [r7, #23]
 801c3a0:	089b      	lsrs	r3, r3, #2
 801c3a2:	b2db      	uxtb	r3, r3
 801c3a4:	b29b      	uxth	r3, r3
 801c3a6:	3305      	adds	r3, #5
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	031b      	lsls	r3, r3, #12
 801c3ac:	b29a      	uxth	r2, r3
 801c3ae:	79fb      	ldrb	r3, [r7, #7]
 801c3b0:	b29b      	uxth	r3, r3
 801c3b2:	4313      	orrs	r3, r2
 801c3b4:	b29a      	uxth	r2, r3
 801c3b6:	693b      	ldr	r3, [r7, #16]
 801c3b8:	68dc      	ldr	r4, [r3, #12]
 801c3ba:	4610      	mov	r0, r2
 801c3bc:	f7f9 fad8 	bl	8015970 <lwip_htons>
 801c3c0:	4603      	mov	r3, r0
 801c3c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801c3c4:	693b      	ldr	r3, [r7, #16]
 801c3c6:	68db      	ldr	r3, [r3, #12]
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	749a      	strb	r2, [r3, #18]
 801c3cc:	2200      	movs	r2, #0
 801c3ce:	74da      	strb	r2, [r3, #19]
  return seg;
 801c3d0:	693b      	ldr	r3, [r7, #16]
}
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	371c      	adds	r7, #28
 801c3d6:	46bd      	mov	sp, r7
 801c3d8:	bd90      	pop	{r4, r7, pc}
 801c3da:	bf00      	nop
 801c3dc:	0802abb8 	.word	0x0802abb8
 801c3e0:	0802abec 	.word	0x0802abec
 801c3e4:	0802ac0c 	.word	0x0802ac0c
 801c3e8:	0802ac34 	.word	0x0802ac34
 801c3ec:	0802ac58 	.word	0x0802ac58

0801c3f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801c3f0:	b580      	push	{r7, lr}
 801c3f2:	b086      	sub	sp, #24
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	607b      	str	r3, [r7, #4]
 801c3f8:	4603      	mov	r3, r0
 801c3fa:	73fb      	strb	r3, [r7, #15]
 801c3fc:	460b      	mov	r3, r1
 801c3fe:	81bb      	strh	r3, [r7, #12]
 801c400:	4613      	mov	r3, r2
 801c402:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801c404:	89bb      	ldrh	r3, [r7, #12]
 801c406:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d105      	bne.n	801c41a <tcp_pbuf_prealloc+0x2a>
 801c40e:	4b30      	ldr	r3, [pc, #192]	; (801c4d0 <tcp_pbuf_prealloc+0xe0>)
 801c410:	22e8      	movs	r2, #232	; 0xe8
 801c412:	4930      	ldr	r1, [pc, #192]	; (801c4d4 <tcp_pbuf_prealloc+0xe4>)
 801c414:	4830      	ldr	r0, [pc, #192]	; (801c4d8 <tcp_pbuf_prealloc+0xe8>)
 801c416:	f007 fa25 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801c41a:	6a3b      	ldr	r3, [r7, #32]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d105      	bne.n	801c42c <tcp_pbuf_prealloc+0x3c>
 801c420:	4b2b      	ldr	r3, [pc, #172]	; (801c4d0 <tcp_pbuf_prealloc+0xe0>)
 801c422:	22e9      	movs	r2, #233	; 0xe9
 801c424:	492d      	ldr	r1, [pc, #180]	; (801c4dc <tcp_pbuf_prealloc+0xec>)
 801c426:	482c      	ldr	r0, [pc, #176]	; (801c4d8 <tcp_pbuf_prealloc+0xe8>)
 801c428:	f007 fa1c 	bl	8023864 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801c42c:	89ba      	ldrh	r2, [r7, #12]
 801c42e:	897b      	ldrh	r3, [r7, #10]
 801c430:	429a      	cmp	r2, r3
 801c432:	d221      	bcs.n	801c478 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801c438:	f003 0302 	and.w	r3, r3, #2
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d111      	bne.n	801c464 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801c440:	6a3b      	ldr	r3, [r7, #32]
 801c442:	8b5b      	ldrh	r3, [r3, #26]
 801c444:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d115      	bne.n	801c478 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801c44c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c450:	2b00      	cmp	r3, #0
 801c452:	d007      	beq.n	801c464 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801c454:	6a3b      	ldr	r3, [r7, #32]
 801c456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d103      	bne.n	801c464 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801c45c:	6a3b      	ldr	r3, [r7, #32]
 801c45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801c460:	2b00      	cmp	r3, #0
 801c462:	d009      	beq.n	801c478 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801c464:	89bb      	ldrh	r3, [r7, #12]
 801c466:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801c46a:	f023 0203 	bic.w	r2, r3, #3
 801c46e:	897b      	ldrh	r3, [r7, #10]
 801c470:	4293      	cmp	r3, r2
 801c472:	bf28      	it	cs
 801c474:	4613      	movcs	r3, r2
 801c476:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801c478:	8af9      	ldrh	r1, [r7, #22]
 801c47a:	7bfb      	ldrb	r3, [r7, #15]
 801c47c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c480:	4618      	mov	r0, r3
 801c482:	f7fa fe4d 	bl	8017120 <pbuf_alloc>
 801c486:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d101      	bne.n	801c492 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801c48e:	2300      	movs	r3, #0
 801c490:	e019      	b.n	801c4c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801c492:	693b      	ldr	r3, [r7, #16]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	2b00      	cmp	r3, #0
 801c498:	d006      	beq.n	801c4a8 <tcp_pbuf_prealloc+0xb8>
 801c49a:	4b0d      	ldr	r3, [pc, #52]	; (801c4d0 <tcp_pbuf_prealloc+0xe0>)
 801c49c:	f240 120b 	movw	r2, #267	; 0x10b
 801c4a0:	490f      	ldr	r1, [pc, #60]	; (801c4e0 <tcp_pbuf_prealloc+0xf0>)
 801c4a2:	480d      	ldr	r0, [pc, #52]	; (801c4d8 <tcp_pbuf_prealloc+0xe8>)
 801c4a4:	f007 f9de 	bl	8023864 <iprintf>
  *oversize = p->len - length;
 801c4a8:	693b      	ldr	r3, [r7, #16]
 801c4aa:	895a      	ldrh	r2, [r3, #10]
 801c4ac:	89bb      	ldrh	r3, [r7, #12]
 801c4ae:	1ad3      	subs	r3, r2, r3
 801c4b0:	b29a      	uxth	r2, r3
 801c4b2:	687b      	ldr	r3, [r7, #4]
 801c4b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801c4b6:	693b      	ldr	r3, [r7, #16]
 801c4b8:	89ba      	ldrh	r2, [r7, #12]
 801c4ba:	811a      	strh	r2, [r3, #8]
 801c4bc:	693b      	ldr	r3, [r7, #16]
 801c4be:	891a      	ldrh	r2, [r3, #8]
 801c4c0:	693b      	ldr	r3, [r7, #16]
 801c4c2:	815a      	strh	r2, [r3, #10]
  return p;
 801c4c4:	693b      	ldr	r3, [r7, #16]
}
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	3718      	adds	r7, #24
 801c4ca:	46bd      	mov	sp, r7
 801c4cc:	bd80      	pop	{r7, pc}
 801c4ce:	bf00      	nop
 801c4d0:	0802abb8 	.word	0x0802abb8
 801c4d4:	0802ac70 	.word	0x0802ac70
 801c4d8:	0802ac0c 	.word	0x0802ac0c
 801c4dc:	0802ac94 	.word	0x0802ac94
 801c4e0:	0802acb4 	.word	0x0802acb4

0801c4e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801c4e4:	b580      	push	{r7, lr}
 801c4e6:	b082      	sub	sp, #8
 801c4e8:	af00      	add	r7, sp, #0
 801c4ea:	6078      	str	r0, [r7, #4]
 801c4ec:	460b      	mov	r3, r1
 801c4ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d106      	bne.n	801c504 <tcp_write_checks+0x20>
 801c4f6:	4b33      	ldr	r3, [pc, #204]	; (801c5c4 <tcp_write_checks+0xe0>)
 801c4f8:	f240 1233 	movw	r2, #307	; 0x133
 801c4fc:	4932      	ldr	r1, [pc, #200]	; (801c5c8 <tcp_write_checks+0xe4>)
 801c4fe:	4833      	ldr	r0, [pc, #204]	; (801c5cc <tcp_write_checks+0xe8>)
 801c500:	f007 f9b0 	bl	8023864 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	7d1b      	ldrb	r3, [r3, #20]
 801c508:	2b04      	cmp	r3, #4
 801c50a:	d00e      	beq.n	801c52a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801c50c:	687b      	ldr	r3, [r7, #4]
 801c50e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801c510:	2b07      	cmp	r3, #7
 801c512:	d00a      	beq.n	801c52a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c518:	2b02      	cmp	r3, #2
 801c51a:	d006      	beq.n	801c52a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801c520:	2b03      	cmp	r3, #3
 801c522:	d002      	beq.n	801c52a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801c524:	f06f 030a 	mvn.w	r3, #10
 801c528:	e048      	b.n	801c5bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801c52a:	887b      	ldrh	r3, [r7, #2]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d101      	bne.n	801c534 <tcp_write_checks+0x50>
    return ERR_OK;
 801c530:	2300      	movs	r3, #0
 801c532:	e043      	b.n	801c5bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c53a:	887a      	ldrh	r2, [r7, #2]
 801c53c:	429a      	cmp	r2, r3
 801c53e:	d909      	bls.n	801c554 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	8b5b      	ldrh	r3, [r3, #26]
 801c544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c548:	b29a      	uxth	r2, r3
 801c54a:	687b      	ldr	r3, [r7, #4]
 801c54c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c54e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c552:	e033      	b.n	801c5bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c55a:	2b08      	cmp	r3, #8
 801c55c:	d909      	bls.n	801c572 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	8b5b      	ldrh	r3, [r3, #26]
 801c562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c566:	b29a      	uxth	r2, r3
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c56c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c570:	e024      	b.n	801c5bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d00f      	beq.n	801c59c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c580:	2b00      	cmp	r3, #0
 801c582:	d11a      	bne.n	801c5ba <tcp_write_checks+0xd6>
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d116      	bne.n	801c5ba <tcp_write_checks+0xd6>
 801c58c:	4b0d      	ldr	r3, [pc, #52]	; (801c5c4 <tcp_write_checks+0xe0>)
 801c58e:	f240 1255 	movw	r2, #341	; 0x155
 801c592:	490f      	ldr	r1, [pc, #60]	; (801c5d0 <tcp_write_checks+0xec>)
 801c594:	480d      	ldr	r0, [pc, #52]	; (801c5cc <tcp_write_checks+0xe8>)
 801c596:	f007 f965 	bl	8023864 <iprintf>
 801c59a:	e00e      	b.n	801c5ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	d103      	bne.n	801c5ac <tcp_write_checks+0xc8>
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c5a8:	2b00      	cmp	r3, #0
 801c5aa:	d006      	beq.n	801c5ba <tcp_write_checks+0xd6>
 801c5ac:	4b05      	ldr	r3, [pc, #20]	; (801c5c4 <tcp_write_checks+0xe0>)
 801c5ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801c5b2:	4908      	ldr	r1, [pc, #32]	; (801c5d4 <tcp_write_checks+0xf0>)
 801c5b4:	4805      	ldr	r0, [pc, #20]	; (801c5cc <tcp_write_checks+0xe8>)
 801c5b6:	f007 f955 	bl	8023864 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801c5ba:	2300      	movs	r3, #0
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3708      	adds	r7, #8
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	0802abb8 	.word	0x0802abb8
 801c5c8:	0802acc8 	.word	0x0802acc8
 801c5cc:	0802ac0c 	.word	0x0802ac0c
 801c5d0:	0802ace8 	.word	0x0802ace8
 801c5d4:	0802ad24 	.word	0x0802ad24

0801c5d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801c5d8:	b590      	push	{r4, r7, lr}
 801c5da:	b09b      	sub	sp, #108	; 0x6c
 801c5dc:	af04      	add	r7, sp, #16
 801c5de:	60f8      	str	r0, [r7, #12]
 801c5e0:	60b9      	str	r1, [r7, #8]
 801c5e2:	4611      	mov	r1, r2
 801c5e4:	461a      	mov	r2, r3
 801c5e6:	460b      	mov	r3, r1
 801c5e8:	80fb      	strh	r3, [r7, #6]
 801c5ea:	4613      	mov	r3, r2
 801c5ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801c5f2:	2300      	movs	r3, #0
 801c5f4:	653b      	str	r3, [r7, #80]	; 0x50
 801c5f6:	2300      	movs	r3, #0
 801c5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	64bb      	str	r3, [r7, #72]	; 0x48
 801c5fe:	2300      	movs	r3, #0
 801c600:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801c602:	2300      	movs	r3, #0
 801c604:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801c608:	2300      	movs	r3, #0
 801c60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801c60e:	2300      	movs	r3, #0
 801c610:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801c612:	2300      	movs	r3, #0
 801c614:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801c616:	2300      	movs	r3, #0
 801c618:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d109      	bne.n	801c634 <tcp_write+0x5c>
 801c620:	4ba4      	ldr	r3, [pc, #656]	; (801c8b4 <tcp_write+0x2dc>)
 801c622:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c626:	49a4      	ldr	r1, [pc, #656]	; (801c8b8 <tcp_write+0x2e0>)
 801c628:	48a4      	ldr	r0, [pc, #656]	; (801c8bc <tcp_write+0x2e4>)
 801c62a:	f007 f91b 	bl	8023864 <iprintf>
 801c62e:	f06f 030f 	mvn.w	r3, #15
 801c632:	e32a      	b.n	801cc8a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c634:	68fb      	ldr	r3, [r7, #12]
 801c636:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c63a:	085b      	lsrs	r3, r3, #1
 801c63c:	b29a      	uxth	r2, r3
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c642:	4293      	cmp	r3, r2
 801c644:	bf28      	it	cs
 801c646:	4613      	movcs	r3, r2
 801c648:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c64a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d102      	bne.n	801c656 <tcp_write+0x7e>
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c654:	e000      	b.n	801c658 <tcp_write+0x80>
 801c656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c658:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c65a:	68bb      	ldr	r3, [r7, #8]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	d109      	bne.n	801c674 <tcp_write+0x9c>
 801c660:	4b94      	ldr	r3, [pc, #592]	; (801c8b4 <tcp_write+0x2dc>)
 801c662:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c666:	4996      	ldr	r1, [pc, #600]	; (801c8c0 <tcp_write+0x2e8>)
 801c668:	4894      	ldr	r0, [pc, #592]	; (801c8bc <tcp_write+0x2e4>)
 801c66a:	f007 f8fb 	bl	8023864 <iprintf>
 801c66e:	f06f 030f 	mvn.w	r3, #15
 801c672:	e30a      	b.n	801cc8a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c674:	88fb      	ldrh	r3, [r7, #6]
 801c676:	4619      	mov	r1, r3
 801c678:	68f8      	ldr	r0, [r7, #12]
 801c67a:	f7ff ff33 	bl	801c4e4 <tcp_write_checks>
 801c67e:	4603      	mov	r3, r0
 801c680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c684:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d002      	beq.n	801c692 <tcp_write+0xba>
    return err;
 801c68c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c690:	e2fb      	b.n	801cc8a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c692:	68fb      	ldr	r3, [r7, #12]
 801c694:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c698:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c69c:	2300      	movs	r3, #0
 801c69e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	f000 80f6 	beq.w	801c898 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6b0:	653b      	str	r3, [r7, #80]	; 0x50
 801c6b2:	e002      	b.n	801c6ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6b6:	681b      	ldr	r3, [r3, #0]
 801c6b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d1f8      	bne.n	801c6b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6c4:	7a9b      	ldrb	r3, [r3, #10]
 801c6c6:	009b      	lsls	r3, r3, #2
 801c6c8:	b29b      	uxth	r3, r3
 801c6ca:	f003 0304 	and.w	r3, r3, #4
 801c6ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c6d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6d4:	891b      	ldrh	r3, [r3, #8]
 801c6d6:	4619      	mov	r1, r3
 801c6d8:	8c3b      	ldrh	r3, [r7, #32]
 801c6da:	440b      	add	r3, r1
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	da06      	bge.n	801c6ee <tcp_write+0x116>
 801c6e0:	4b74      	ldr	r3, [pc, #464]	; (801c8b4 <tcp_write+0x2dc>)
 801c6e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c6e6:	4977      	ldr	r1, [pc, #476]	; (801c8c4 <tcp_write+0x2ec>)
 801c6e8:	4874      	ldr	r0, [pc, #464]	; (801c8bc <tcp_write+0x2e4>)
 801c6ea:	f007 f8bb 	bl	8023864 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6f0:	891a      	ldrh	r2, [r3, #8]
 801c6f2:	8c3b      	ldrh	r3, [r7, #32]
 801c6f4:	4413      	add	r3, r2
 801c6f6:	b29b      	uxth	r3, r3
 801c6f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c6fa:	1ad3      	subs	r3, r2, r3
 801c6fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801c6fe:	68fb      	ldr	r3, [r7, #12]
 801c700:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c704:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801c706:	8a7b      	ldrh	r3, [r7, #18]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d026      	beq.n	801c75a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c70c:	8a7b      	ldrh	r3, [r7, #18]
 801c70e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c710:	429a      	cmp	r2, r3
 801c712:	d206      	bcs.n	801c722 <tcp_write+0x14a>
 801c714:	4b67      	ldr	r3, [pc, #412]	; (801c8b4 <tcp_write+0x2dc>)
 801c716:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c71a:	496b      	ldr	r1, [pc, #428]	; (801c8c8 <tcp_write+0x2f0>)
 801c71c:	4867      	ldr	r0, [pc, #412]	; (801c8bc <tcp_write+0x2e4>)
 801c71e:	f007 f8a1 	bl	8023864 <iprintf>
      seg = last_unsent;
 801c722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c724:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c726:	8a7b      	ldrh	r3, [r7, #18]
 801c728:	88fa      	ldrh	r2, [r7, #6]
 801c72a:	4293      	cmp	r3, r2
 801c72c:	bf28      	it	cs
 801c72e:	4613      	movcs	r3, r2
 801c730:	b29b      	uxth	r3, r3
 801c732:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c734:	4293      	cmp	r3, r2
 801c736:	bf28      	it	cs
 801c738:	4613      	movcs	r3, r2
 801c73a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801c73c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c740:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c742:	4413      	add	r3, r2
 801c744:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801c748:	8a7a      	ldrh	r2, [r7, #18]
 801c74a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	b29b      	uxth	r3, r3
 801c750:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801c752:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c754:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c756:	1ad3      	subs	r3, r2, r3
 801c758:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c75a:	8a7b      	ldrh	r3, [r7, #18]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d00b      	beq.n	801c778 <tcp_write+0x1a0>
 801c760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c764:	88fb      	ldrh	r3, [r7, #6]
 801c766:	429a      	cmp	r2, r3
 801c768:	d006      	beq.n	801c778 <tcp_write+0x1a0>
 801c76a:	4b52      	ldr	r3, [pc, #328]	; (801c8b4 <tcp_write+0x2dc>)
 801c76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c770:	4956      	ldr	r1, [pc, #344]	; (801c8cc <tcp_write+0x2f4>)
 801c772:	4852      	ldr	r0, [pc, #328]	; (801c8bc <tcp_write+0x2e4>)
 801c774:	f007 f876 	bl	8023864 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c778:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c77c:	88fb      	ldrh	r3, [r7, #6]
 801c77e:	429a      	cmp	r2, r3
 801c780:	f080 8167 	bcs.w	801ca52 <tcp_write+0x47a>
 801c784:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c786:	2b00      	cmp	r3, #0
 801c788:	f000 8163 	beq.w	801ca52 <tcp_write+0x47a>
 801c78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c78e:	891b      	ldrh	r3, [r3, #8]
 801c790:	2b00      	cmp	r3, #0
 801c792:	f000 815e 	beq.w	801ca52 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801c796:	88fa      	ldrh	r2, [r7, #6]
 801c798:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c79c:	1ad2      	subs	r2, r2, r3
 801c79e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c7a0:	4293      	cmp	r3, r2
 801c7a2:	bfa8      	it	ge
 801c7a4:	4613      	movge	r3, r2
 801c7a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801c7a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c7aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c7ac:	797b      	ldrb	r3, [r7, #5]
 801c7ae:	f003 0301 	and.w	r3, r3, #1
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d027      	beq.n	801c806 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c7b6:	f107 0012 	add.w	r0, r7, #18
 801c7ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c7bc:	8bf9      	ldrh	r1, [r7, #30]
 801c7be:	2301      	movs	r3, #1
 801c7c0:	9302      	str	r3, [sp, #8]
 801c7c2:	797b      	ldrb	r3, [r7, #5]
 801c7c4:	9301      	str	r3, [sp, #4]
 801c7c6:	68fb      	ldr	r3, [r7, #12]
 801c7c8:	9300      	str	r3, [sp, #0]
 801c7ca:	4603      	mov	r3, r0
 801c7cc:	2000      	movs	r0, #0
 801c7ce:	f7ff fe0f 	bl	801c3f0 <tcp_pbuf_prealloc>
 801c7d2:	6578      	str	r0, [r7, #84]	; 0x54
 801c7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	f000 8225 	beq.w	801cc26 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c7dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c7de:	6858      	ldr	r0, [r3, #4]
 801c7e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c7e4:	68ba      	ldr	r2, [r7, #8]
 801c7e6:	4413      	add	r3, r2
 801c7e8:	8bfa      	ldrh	r2, [r7, #30]
 801c7ea:	4619      	mov	r1, r3
 801c7ec:	f008 fb5d 	bl	8024eaa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801c7f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c7f2:	f7fb f807 	bl	8017804 <pbuf_clen>
 801c7f6:	4603      	mov	r3, r0
 801c7f8:	461a      	mov	r2, r3
 801c7fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c7fe:	4413      	add	r3, r2
 801c800:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801c804:	e041      	b.n	801c88a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801c806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c808:	685b      	ldr	r3, [r3, #4]
 801c80a:	637b      	str	r3, [r7, #52]	; 0x34
 801c80c:	e002      	b.n	801c814 <tcp_write+0x23c>
 801c80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	637b      	str	r3, [r7, #52]	; 0x34
 801c814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d1f8      	bne.n	801c80e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c81e:	7b1b      	ldrb	r3, [r3, #12]
 801c820:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c824:	2b00      	cmp	r3, #0
 801c826:	d115      	bne.n	801c854 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801c828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c82e:	8952      	ldrh	r2, [r2, #10]
 801c830:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c832:	68ba      	ldr	r2, [r7, #8]
 801c834:	429a      	cmp	r2, r3
 801c836:	d10d      	bne.n	801c854 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c838:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c83c:	2b00      	cmp	r3, #0
 801c83e:	d006      	beq.n	801c84e <tcp_write+0x276>
 801c840:	4b1c      	ldr	r3, [pc, #112]	; (801c8b4 <tcp_write+0x2dc>)
 801c842:	f240 2231 	movw	r2, #561	; 0x231
 801c846:	4922      	ldr	r1, [pc, #136]	; (801c8d0 <tcp_write+0x2f8>)
 801c848:	481c      	ldr	r0, [pc, #112]	; (801c8bc <tcp_write+0x2e4>)
 801c84a:	f007 f80b 	bl	8023864 <iprintf>
          extendlen = seglen;
 801c84e:	8bfb      	ldrh	r3, [r7, #30]
 801c850:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801c852:	e01a      	b.n	801c88a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801c854:	8bfb      	ldrh	r3, [r7, #30]
 801c856:	2201      	movs	r2, #1
 801c858:	4619      	mov	r1, r3
 801c85a:	2000      	movs	r0, #0
 801c85c:	f7fa fc60 	bl	8017120 <pbuf_alloc>
 801c860:	6578      	str	r0, [r7, #84]	; 0x54
 801c862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c864:	2b00      	cmp	r3, #0
 801c866:	f000 81e0 	beq.w	801cc2a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801c86a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c86e:	68ba      	ldr	r2, [r7, #8]
 801c870:	441a      	add	r2, r3
 801c872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c874:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801c876:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c878:	f7fa ffc4 	bl	8017804 <pbuf_clen>
 801c87c:	4603      	mov	r3, r0
 801c87e:	461a      	mov	r2, r3
 801c880:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c884:	4413      	add	r3, r2
 801c886:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801c88a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c88e:	8bfb      	ldrh	r3, [r7, #30]
 801c890:	4413      	add	r3, r2
 801c892:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801c896:	e0dc      	b.n	801ca52 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801c898:	68fb      	ldr	r3, [r7, #12]
 801c89a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	f000 80d7 	beq.w	801ca52 <tcp_write+0x47a>
 801c8a4:	4b03      	ldr	r3, [pc, #12]	; (801c8b4 <tcp_write+0x2dc>)
 801c8a6:	f240 224a 	movw	r2, #586	; 0x24a
 801c8aa:	490a      	ldr	r1, [pc, #40]	; (801c8d4 <tcp_write+0x2fc>)
 801c8ac:	4803      	ldr	r0, [pc, #12]	; (801c8bc <tcp_write+0x2e4>)
 801c8ae:	f006 ffd9 	bl	8023864 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801c8b2:	e0ce      	b.n	801ca52 <tcp_write+0x47a>
 801c8b4:	0802abb8 	.word	0x0802abb8
 801c8b8:	0802ad58 	.word	0x0802ad58
 801c8bc:	0802ac0c 	.word	0x0802ac0c
 801c8c0:	0802ad70 	.word	0x0802ad70
 801c8c4:	0802ada4 	.word	0x0802ada4
 801c8c8:	0802adbc 	.word	0x0802adbc
 801c8cc:	0802addc 	.word	0x0802addc
 801c8d0:	0802adfc 	.word	0x0802adfc
 801c8d4:	0802ae28 	.word	0x0802ae28
    struct pbuf *p;
    u16_t left = len - pos;
 801c8d8:	88fa      	ldrh	r2, [r7, #6]
 801c8da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c8de:	1ad3      	subs	r3, r2, r3
 801c8e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801c8e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c8e6:	b29b      	uxth	r3, r3
 801c8e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c8ea:	1ad3      	subs	r3, r2, r3
 801c8ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801c8ee:	8b7a      	ldrh	r2, [r7, #26]
 801c8f0:	8bbb      	ldrh	r3, [r7, #28]
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	bf28      	it	cs
 801c8f6:	4613      	movcs	r3, r2
 801c8f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c8fa:	797b      	ldrb	r3, [r7, #5]
 801c8fc:	f003 0301 	and.w	r3, r3, #1
 801c900:	2b00      	cmp	r3, #0
 801c902:	d036      	beq.n	801c972 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801c904:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c908:	b29a      	uxth	r2, r3
 801c90a:	8b3b      	ldrh	r3, [r7, #24]
 801c90c:	4413      	add	r3, r2
 801c90e:	b299      	uxth	r1, r3
 801c910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c912:	2b00      	cmp	r3, #0
 801c914:	bf0c      	ite	eq
 801c916:	2301      	moveq	r3, #1
 801c918:	2300      	movne	r3, #0
 801c91a:	b2db      	uxtb	r3, r3
 801c91c:	f107 0012 	add.w	r0, r7, #18
 801c920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c922:	9302      	str	r3, [sp, #8]
 801c924:	797b      	ldrb	r3, [r7, #5]
 801c926:	9301      	str	r3, [sp, #4]
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	9300      	str	r3, [sp, #0]
 801c92c:	4603      	mov	r3, r0
 801c92e:	2036      	movs	r0, #54	; 0x36
 801c930:	f7ff fd5e 	bl	801c3f0 <tcp_pbuf_prealloc>
 801c934:	6338      	str	r0, [r7, #48]	; 0x30
 801c936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c938:	2b00      	cmp	r3, #0
 801c93a:	f000 8178 	beq.w	801cc2e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801c93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c940:	895b      	ldrh	r3, [r3, #10]
 801c942:	8b3a      	ldrh	r2, [r7, #24]
 801c944:	429a      	cmp	r2, r3
 801c946:	d906      	bls.n	801c956 <tcp_write+0x37e>
 801c948:	4b8c      	ldr	r3, [pc, #560]	; (801cb7c <tcp_write+0x5a4>)
 801c94a:	f240 2266 	movw	r2, #614	; 0x266
 801c94e:	498c      	ldr	r1, [pc, #560]	; (801cb80 <tcp_write+0x5a8>)
 801c950:	488c      	ldr	r0, [pc, #560]	; (801cb84 <tcp_write+0x5ac>)
 801c952:	f006 ff87 	bl	8023864 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c958:	685a      	ldr	r2, [r3, #4]
 801c95a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c95e:	18d0      	adds	r0, r2, r3
 801c960:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c964:	68ba      	ldr	r2, [r7, #8]
 801c966:	4413      	add	r3, r2
 801c968:	8b3a      	ldrh	r2, [r7, #24]
 801c96a:	4619      	mov	r1, r3
 801c96c:	f008 fa9d 	bl	8024eaa <memcpy>
 801c970:	e02f      	b.n	801c9d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801c972:	8a7b      	ldrh	r3, [r7, #18]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d006      	beq.n	801c986 <tcp_write+0x3ae>
 801c978:	4b80      	ldr	r3, [pc, #512]	; (801cb7c <tcp_write+0x5a4>)
 801c97a:	f240 2271 	movw	r2, #625	; 0x271
 801c97e:	4982      	ldr	r1, [pc, #520]	; (801cb88 <tcp_write+0x5b0>)
 801c980:	4880      	ldr	r0, [pc, #512]	; (801cb84 <tcp_write+0x5ac>)
 801c982:	f006 ff6f 	bl	8023864 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801c986:	8b3b      	ldrh	r3, [r7, #24]
 801c988:	2201      	movs	r2, #1
 801c98a:	4619      	mov	r1, r3
 801c98c:	2036      	movs	r0, #54	; 0x36
 801c98e:	f7fa fbc7 	bl	8017120 <pbuf_alloc>
 801c992:	6178      	str	r0, [r7, #20]
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	2b00      	cmp	r3, #0
 801c998:	f000 814b 	beq.w	801cc32 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801c99c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c9a0:	68ba      	ldr	r2, [r7, #8]
 801c9a2:	441a      	add	r2, r3
 801c9a4:	697b      	ldr	r3, [r7, #20]
 801c9a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c9a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c9ac:	b29b      	uxth	r3, r3
 801c9ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c9b2:	4619      	mov	r1, r3
 801c9b4:	2036      	movs	r0, #54	; 0x36
 801c9b6:	f7fa fbb3 	bl	8017120 <pbuf_alloc>
 801c9ba:	6338      	str	r0, [r7, #48]	; 0x30
 801c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d103      	bne.n	801c9ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801c9c2:	6978      	ldr	r0, [r7, #20]
 801c9c4:	f7fa fe90 	bl	80176e8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801c9c8:	e136      	b.n	801cc38 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801c9ca:	6979      	ldr	r1, [r7, #20]
 801c9cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c9ce:	f7fa ff59 	bl	8017884 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801c9d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c9d4:	f7fa ff16 	bl	8017804 <pbuf_clen>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	461a      	mov	r2, r3
 801c9dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c9e0:	4413      	add	r3, r2
 801c9e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801c9e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c9ea:	2b09      	cmp	r3, #9
 801c9ec:	d903      	bls.n	801c9f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801c9ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c9f0:	f7fa fe7a 	bl	80176e8 <pbuf_free>
      goto memerr;
 801c9f4:	e120      	b.n	801cc38 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801c9f6:	68fb      	ldr	r3, [r7, #12]
 801c9f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c9fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c9fe:	441a      	add	r2, r3
 801ca00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca04:	9300      	str	r3, [sp, #0]
 801ca06:	4613      	mov	r3, r2
 801ca08:	2200      	movs	r2, #0
 801ca0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ca0c:	68f8      	ldr	r0, [r7, #12]
 801ca0e:	f7ff fc51 	bl	801c2b4 <tcp_create_segment>
 801ca12:	64f8      	str	r0, [r7, #76]	; 0x4c
 801ca14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	f000 810d 	beq.w	801cc36 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801ca1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d102      	bne.n	801ca28 <tcp_write+0x450>
      queue = seg;
 801ca22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca24:	647b      	str	r3, [r7, #68]	; 0x44
 801ca26:	e00c      	b.n	801ca42 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ca28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d106      	bne.n	801ca3c <tcp_write+0x464>
 801ca2e:	4b53      	ldr	r3, [pc, #332]	; (801cb7c <tcp_write+0x5a4>)
 801ca30:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ca34:	4955      	ldr	r1, [pc, #340]	; (801cb8c <tcp_write+0x5b4>)
 801ca36:	4853      	ldr	r0, [pc, #332]	; (801cb84 <tcp_write+0x5ac>)
 801ca38:	f006 ff14 	bl	8023864 <iprintf>
      prev_seg->next = seg;
 801ca3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ca3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ca40:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801ca42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ca44:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801ca46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca4a:	8b3b      	ldrh	r3, [r7, #24]
 801ca4c:	4413      	add	r3, r2
 801ca4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801ca52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ca56:	88fb      	ldrh	r3, [r7, #6]
 801ca58:	429a      	cmp	r2, r3
 801ca5a:	f4ff af3d 	bcc.w	801c8d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801ca5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	d02c      	beq.n	801cabe <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801ca64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca66:	685b      	ldr	r3, [r3, #4]
 801ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ca6a:	e01e      	b.n	801caaa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca6e:	891a      	ldrh	r2, [r3, #8]
 801ca70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca72:	4413      	add	r3, r2
 801ca74:	b29a      	uxth	r2, r3
 801ca76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca78:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d110      	bne.n	801caa4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ca82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca84:	685b      	ldr	r3, [r3, #4]
 801ca86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ca88:	8952      	ldrh	r2, [r2, #10]
 801ca8a:	4413      	add	r3, r2
 801ca8c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ca8e:	68b9      	ldr	r1, [r7, #8]
 801ca90:	4618      	mov	r0, r3
 801ca92:	f008 fa0a 	bl	8024eaa <memcpy>
        p->len += oversize_used;
 801ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ca98:	895a      	ldrh	r2, [r3, #10]
 801ca9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ca9c:	4413      	add	r3, r2
 801ca9e:	b29a      	uxth	r2, r3
 801caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caa2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801caa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caa6:	681b      	ldr	r3, [r3, #0]
 801caa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801caac:	2b00      	cmp	r3, #0
 801caae:	d1dd      	bne.n	801ca6c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801cab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cab2:	891a      	ldrh	r2, [r3, #8]
 801cab4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801cab6:	4413      	add	r3, r2
 801cab8:	b29a      	uxth	r2, r3
 801caba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cabc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801cabe:	8a7a      	ldrh	r2, [r7, #18]
 801cac0:	68fb      	ldr	r3, [r7, #12]
 801cac2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801cac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cac8:	2b00      	cmp	r3, #0
 801caca:	d018      	beq.n	801cafe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801cacc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d106      	bne.n	801cae0 <tcp_write+0x508>
 801cad2:	4b2a      	ldr	r3, [pc, #168]	; (801cb7c <tcp_write+0x5a4>)
 801cad4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801cad8:	492d      	ldr	r1, [pc, #180]	; (801cb90 <tcp_write+0x5b8>)
 801cada:	482a      	ldr	r0, [pc, #168]	; (801cb84 <tcp_write+0x5ac>)
 801cadc:	f006 fec2 	bl	8023864 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801cae0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cae2:	685b      	ldr	r3, [r3, #4]
 801cae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801cae6:	4618      	mov	r0, r3
 801cae8:	f7fa fecc 	bl	8017884 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801caec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801caee:	891a      	ldrh	r2, [r3, #8]
 801caf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801caf2:	891b      	ldrh	r3, [r3, #8]
 801caf4:	4413      	add	r3, r2
 801caf6:	b29a      	uxth	r2, r3
 801caf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cafa:	811a      	strh	r2, [r3, #8]
 801cafc:	e037      	b.n	801cb6e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801cafe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d034      	beq.n	801cb6e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801cb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d003      	beq.n	801cb12 <tcp_write+0x53a>
 801cb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb0c:	685b      	ldr	r3, [r3, #4]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d106      	bne.n	801cb20 <tcp_write+0x548>
 801cb12:	4b1a      	ldr	r3, [pc, #104]	; (801cb7c <tcp_write+0x5a4>)
 801cb14:	f240 22e6 	movw	r2, #742	; 0x2e6
 801cb18:	491e      	ldr	r1, [pc, #120]	; (801cb94 <tcp_write+0x5bc>)
 801cb1a:	481a      	ldr	r0, [pc, #104]	; (801cb84 <tcp_write+0x5ac>)
 801cb1c:	f006 fea2 	bl	8023864 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801cb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb22:	685b      	ldr	r3, [r3, #4]
 801cb24:	62bb      	str	r3, [r7, #40]	; 0x28
 801cb26:	e009      	b.n	801cb3c <tcp_write+0x564>
      p->tot_len += extendlen;
 801cb28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb2a:	891a      	ldrh	r2, [r3, #8]
 801cb2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cb2e:	4413      	add	r3, r2
 801cb30:	b29a      	uxth	r2, r3
 801cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb34:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	62bb      	str	r3, [r7, #40]	; 0x28
 801cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d1f1      	bne.n	801cb28 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb46:	891a      	ldrh	r2, [r3, #8]
 801cb48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cb4a:	4413      	add	r3, r2
 801cb4c:	b29a      	uxth	r2, r3
 801cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb50:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb54:	895a      	ldrh	r2, [r3, #10]
 801cb56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cb58:	4413      	add	r3, r2
 801cb5a:	b29a      	uxth	r2, r3
 801cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cb5e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801cb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb62:	891a      	ldrh	r2, [r3, #8]
 801cb64:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801cb66:	4413      	add	r3, r2
 801cb68:	b29a      	uxth	r2, r3
 801cb6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb6c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801cb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb70:	2b00      	cmp	r3, #0
 801cb72:	d111      	bne.n	801cb98 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801cb74:	68fb      	ldr	r3, [r7, #12]
 801cb76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cb78:	66da      	str	r2, [r3, #108]	; 0x6c
 801cb7a:	e010      	b.n	801cb9e <tcp_write+0x5c6>
 801cb7c:	0802abb8 	.word	0x0802abb8
 801cb80:	0802ae58 	.word	0x0802ae58
 801cb84:	0802ac0c 	.word	0x0802ac0c
 801cb88:	0802ae98 	.word	0x0802ae98
 801cb8c:	0802aea8 	.word	0x0802aea8
 801cb90:	0802aebc 	.word	0x0802aebc
 801cb94:	0802aef4 	.word	0x0802aef4
  } else {
    last_unsent->next = queue;
 801cb98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cb9c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801cba2:	88fb      	ldrh	r3, [r7, #6]
 801cba4:	441a      	add	r2, r3
 801cba6:	68fb      	ldr	r3, [r7, #12]
 801cba8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801cbb0:	88fb      	ldrh	r3, [r7, #6]
 801cbb2:	1ad3      	subs	r3, r2, r3
 801cbb4:	b29a      	uxth	r2, r3
 801cbb6:	68fb      	ldr	r3, [r7, #12]
 801cbb8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801cbc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801cbc6:	68fb      	ldr	r3, [r7, #12]
 801cbc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d00e      	beq.n	801cbee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801cbd0:	68fb      	ldr	r3, [r7, #12]
 801cbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d10a      	bne.n	801cbee <tcp_write+0x616>
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d106      	bne.n	801cbee <tcp_write+0x616>
 801cbe0:	4b2c      	ldr	r3, [pc, #176]	; (801cc94 <tcp_write+0x6bc>)
 801cbe2:	f240 3212 	movw	r2, #786	; 0x312
 801cbe6:	492c      	ldr	r1, [pc, #176]	; (801cc98 <tcp_write+0x6c0>)
 801cbe8:	482c      	ldr	r0, [pc, #176]	; (801cc9c <tcp_write+0x6c4>)
 801cbea:	f006 fe3b 	bl	8023864 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801cbee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d016      	beq.n	801cc22 <tcp_write+0x64a>
 801cbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cbf6:	68db      	ldr	r3, [r3, #12]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d012      	beq.n	801cc22 <tcp_write+0x64a>
 801cbfc:	797b      	ldrb	r3, [r7, #5]
 801cbfe:	f003 0302 	and.w	r3, r3, #2
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d10d      	bne.n	801cc22 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801cc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc08:	68db      	ldr	r3, [r3, #12]
 801cc0a:	899b      	ldrh	r3, [r3, #12]
 801cc0c:	b29c      	uxth	r4, r3
 801cc0e:	2008      	movs	r0, #8
 801cc10:	f7f8 feae 	bl	8015970 <lwip_htons>
 801cc14:	4603      	mov	r3, r0
 801cc16:	461a      	mov	r2, r3
 801cc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cc1a:	68db      	ldr	r3, [r3, #12]
 801cc1c:	4322      	orrs	r2, r4
 801cc1e:	b292      	uxth	r2, r2
 801cc20:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801cc22:	2300      	movs	r3, #0
 801cc24:	e031      	b.n	801cc8a <tcp_write+0x6b2>
          goto memerr;
 801cc26:	bf00      	nop
 801cc28:	e006      	b.n	801cc38 <tcp_write+0x660>
            goto memerr;
 801cc2a:	bf00      	nop
 801cc2c:	e004      	b.n	801cc38 <tcp_write+0x660>
        goto memerr;
 801cc2e:	bf00      	nop
 801cc30:	e002      	b.n	801cc38 <tcp_write+0x660>
        goto memerr;
 801cc32:	bf00      	nop
 801cc34:	e000      	b.n	801cc38 <tcp_write+0x660>
      goto memerr;
 801cc36:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	8b5b      	ldrh	r3, [r3, #26]
 801cc3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc40:	b29a      	uxth	r2, r3
 801cc42:	68fb      	ldr	r3, [r7, #12]
 801cc44:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801cc46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d002      	beq.n	801cc52 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801cc4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801cc4e:	f7fa fd4b 	bl	80176e8 <pbuf_free>
  }
  if (queue != NULL) {
 801cc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d002      	beq.n	801cc5e <tcp_write+0x686>
    tcp_segs_free(queue);
 801cc58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801cc5a:	f7fc fb53 	bl	8019304 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d00e      	beq.n	801cc86 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801cc68:	68fb      	ldr	r3, [r7, #12]
 801cc6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d10a      	bne.n	801cc86 <tcp_write+0x6ae>
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d106      	bne.n	801cc86 <tcp_write+0x6ae>
 801cc78:	4b06      	ldr	r3, [pc, #24]	; (801cc94 <tcp_write+0x6bc>)
 801cc7a:	f240 3227 	movw	r2, #807	; 0x327
 801cc7e:	4906      	ldr	r1, [pc, #24]	; (801cc98 <tcp_write+0x6c0>)
 801cc80:	4806      	ldr	r0, [pc, #24]	; (801cc9c <tcp_write+0x6c4>)
 801cc82:	f006 fdef 	bl	8023864 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801cc86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	375c      	adds	r7, #92	; 0x5c
 801cc8e:	46bd      	mov	sp, r7
 801cc90:	bd90      	pop	{r4, r7, pc}
 801cc92:	bf00      	nop
 801cc94:	0802abb8 	.word	0x0802abb8
 801cc98:	0802af2c 	.word	0x0802af2c
 801cc9c:	0802ac0c 	.word	0x0802ac0c

0801cca0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801cca0:	b590      	push	{r4, r7, lr}
 801cca2:	b08b      	sub	sp, #44	; 0x2c
 801cca4:	af02      	add	r7, sp, #8
 801cca6:	6078      	str	r0, [r7, #4]
 801cca8:	460b      	mov	r3, r1
 801ccaa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801ccac:	2300      	movs	r3, #0
 801ccae:	61fb      	str	r3, [r7, #28]
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801ccb4:	2300      	movs	r3, #0
 801ccb6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d106      	bne.n	801cccc <tcp_split_unsent_seg+0x2c>
 801ccbe:	4b95      	ldr	r3, [pc, #596]	; (801cf14 <tcp_split_unsent_seg+0x274>)
 801ccc0:	f240 324b 	movw	r2, #843	; 0x34b
 801ccc4:	4994      	ldr	r1, [pc, #592]	; (801cf18 <tcp_split_unsent_seg+0x278>)
 801ccc6:	4895      	ldr	r0, [pc, #596]	; (801cf1c <tcp_split_unsent_seg+0x27c>)
 801ccc8:	f006 fdcc 	bl	8023864 <iprintf>

  useg = pcb->unsent;
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ccd0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801ccd2:	697b      	ldr	r3, [r7, #20]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	d102      	bne.n	801ccde <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801ccd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ccdc:	e116      	b.n	801cf0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801ccde:	887b      	ldrh	r3, [r7, #2]
 801cce0:	2b00      	cmp	r3, #0
 801cce2:	d109      	bne.n	801ccf8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801cce4:	4b8b      	ldr	r3, [pc, #556]	; (801cf14 <tcp_split_unsent_seg+0x274>)
 801cce6:	f240 3253 	movw	r2, #851	; 0x353
 801ccea:	498d      	ldr	r1, [pc, #564]	; (801cf20 <tcp_split_unsent_seg+0x280>)
 801ccec:	488b      	ldr	r0, [pc, #556]	; (801cf1c <tcp_split_unsent_seg+0x27c>)
 801ccee:	f006 fdb9 	bl	8023864 <iprintf>
    return ERR_VAL;
 801ccf2:	f06f 0305 	mvn.w	r3, #5
 801ccf6:	e109      	b.n	801cf0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801ccf8:	697b      	ldr	r3, [r7, #20]
 801ccfa:	891b      	ldrh	r3, [r3, #8]
 801ccfc:	887a      	ldrh	r2, [r7, #2]
 801ccfe:	429a      	cmp	r2, r3
 801cd00:	d301      	bcc.n	801cd06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801cd02:	2300      	movs	r3, #0
 801cd04:	e102      	b.n	801cf0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cd0a:	887a      	ldrh	r2, [r7, #2]
 801cd0c:	429a      	cmp	r2, r3
 801cd0e:	d906      	bls.n	801cd1e <tcp_split_unsent_seg+0x7e>
 801cd10:	4b80      	ldr	r3, [pc, #512]	; (801cf14 <tcp_split_unsent_seg+0x274>)
 801cd12:	f240 325b 	movw	r2, #859	; 0x35b
 801cd16:	4983      	ldr	r1, [pc, #524]	; (801cf24 <tcp_split_unsent_seg+0x284>)
 801cd18:	4880      	ldr	r0, [pc, #512]	; (801cf1c <tcp_split_unsent_seg+0x27c>)
 801cd1a:	f006 fda3 	bl	8023864 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801cd1e:	697b      	ldr	r3, [r7, #20]
 801cd20:	891b      	ldrh	r3, [r3, #8]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d106      	bne.n	801cd34 <tcp_split_unsent_seg+0x94>
 801cd26:	4b7b      	ldr	r3, [pc, #492]	; (801cf14 <tcp_split_unsent_seg+0x274>)
 801cd28:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801cd2c:	497e      	ldr	r1, [pc, #504]	; (801cf28 <tcp_split_unsent_seg+0x288>)
 801cd2e:	487b      	ldr	r0, [pc, #492]	; (801cf1c <tcp_split_unsent_seg+0x27c>)
 801cd30:	f006 fd98 	bl	8023864 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801cd34:	697b      	ldr	r3, [r7, #20]
 801cd36:	7a9b      	ldrb	r3, [r3, #10]
 801cd38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801cd3a:	7bfb      	ldrb	r3, [r7, #15]
 801cd3c:	009b      	lsls	r3, r3, #2
 801cd3e:	b2db      	uxtb	r3, r3
 801cd40:	f003 0304 	and.w	r3, r3, #4
 801cd44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801cd46:	697b      	ldr	r3, [r7, #20]
 801cd48:	891a      	ldrh	r2, [r3, #8]
 801cd4a:	887b      	ldrh	r3, [r7, #2]
 801cd4c:	1ad3      	subs	r3, r2, r3
 801cd4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801cd50:	7bbb      	ldrb	r3, [r7, #14]
 801cd52:	b29a      	uxth	r2, r3
 801cd54:	89bb      	ldrh	r3, [r7, #12]
 801cd56:	4413      	add	r3, r2
 801cd58:	b29b      	uxth	r3, r3
 801cd5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cd5e:	4619      	mov	r1, r3
 801cd60:	2036      	movs	r0, #54	; 0x36
 801cd62:	f7fa f9dd 	bl	8017120 <pbuf_alloc>
 801cd66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801cd68:	693b      	ldr	r3, [r7, #16]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	f000 80b7 	beq.w	801cede <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801cd70:	697b      	ldr	r3, [r7, #20]
 801cd72:	685b      	ldr	r3, [r3, #4]
 801cd74:	891a      	ldrh	r2, [r3, #8]
 801cd76:	697b      	ldr	r3, [r7, #20]
 801cd78:	891b      	ldrh	r3, [r3, #8]
 801cd7a:	1ad3      	subs	r3, r2, r3
 801cd7c:	b29a      	uxth	r2, r3
 801cd7e:	887b      	ldrh	r3, [r7, #2]
 801cd80:	4413      	add	r3, r2
 801cd82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801cd84:	697b      	ldr	r3, [r7, #20]
 801cd86:	6858      	ldr	r0, [r3, #4]
 801cd88:	693b      	ldr	r3, [r7, #16]
 801cd8a:	685a      	ldr	r2, [r3, #4]
 801cd8c:	7bbb      	ldrb	r3, [r7, #14]
 801cd8e:	18d1      	adds	r1, r2, r3
 801cd90:	897b      	ldrh	r3, [r7, #10]
 801cd92:	89ba      	ldrh	r2, [r7, #12]
 801cd94:	f7fa feae 	bl	8017af4 <pbuf_copy_partial>
 801cd98:	4603      	mov	r3, r0
 801cd9a:	461a      	mov	r2, r3
 801cd9c:	89bb      	ldrh	r3, [r7, #12]
 801cd9e:	4293      	cmp	r3, r2
 801cda0:	f040 809f 	bne.w	801cee2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801cda4:	697b      	ldr	r3, [r7, #20]
 801cda6:	68db      	ldr	r3, [r3, #12]
 801cda8:	899b      	ldrh	r3, [r3, #12]
 801cdaa:	b29b      	uxth	r3, r3
 801cdac:	4618      	mov	r0, r3
 801cdae:	f7f8 fddf 	bl	8015970 <lwip_htons>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	b2db      	uxtb	r3, r3
 801cdb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801cdba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801cdc0:	7efb      	ldrb	r3, [r7, #27]
 801cdc2:	f003 0308 	and.w	r3, r3, #8
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d007      	beq.n	801cdda <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801cdca:	7efb      	ldrb	r3, [r7, #27]
 801cdcc:	f023 0308 	bic.w	r3, r3, #8
 801cdd0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801cdd2:	7ebb      	ldrb	r3, [r7, #26]
 801cdd4:	f043 0308 	orr.w	r3, r3, #8
 801cdd8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801cdda:	7efb      	ldrb	r3, [r7, #27]
 801cddc:	f003 0301 	and.w	r3, r3, #1
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d007      	beq.n	801cdf4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801cde4:	7efb      	ldrb	r3, [r7, #27]
 801cde6:	f023 0301 	bic.w	r3, r3, #1
 801cdea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801cdec:	7ebb      	ldrb	r3, [r7, #26]
 801cdee:	f043 0301 	orr.w	r3, r3, #1
 801cdf2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801cdf4:	697b      	ldr	r3, [r7, #20]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	685b      	ldr	r3, [r3, #4]
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	f7f8 fdcd 	bl	801599a <lwip_htonl>
 801ce00:	4602      	mov	r2, r0
 801ce02:	887b      	ldrh	r3, [r7, #2]
 801ce04:	18d1      	adds	r1, r2, r3
 801ce06:	7eba      	ldrb	r2, [r7, #26]
 801ce08:	7bfb      	ldrb	r3, [r7, #15]
 801ce0a:	9300      	str	r3, [sp, #0]
 801ce0c:	460b      	mov	r3, r1
 801ce0e:	6939      	ldr	r1, [r7, #16]
 801ce10:	6878      	ldr	r0, [r7, #4]
 801ce12:	f7ff fa4f 	bl	801c2b4 <tcp_create_segment>
 801ce16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801ce18:	69fb      	ldr	r3, [r7, #28]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	d063      	beq.n	801cee6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ce1e:	697b      	ldr	r3, [r7, #20]
 801ce20:	685b      	ldr	r3, [r3, #4]
 801ce22:	4618      	mov	r0, r3
 801ce24:	f7fa fcee 	bl	8017804 <pbuf_clen>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	461a      	mov	r2, r3
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ce32:	1a9b      	subs	r3, r3, r2
 801ce34:	b29a      	uxth	r2, r3
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801ce3c:	697b      	ldr	r3, [r7, #20]
 801ce3e:	6858      	ldr	r0, [r3, #4]
 801ce40:	697b      	ldr	r3, [r7, #20]
 801ce42:	685b      	ldr	r3, [r3, #4]
 801ce44:	891a      	ldrh	r2, [r3, #8]
 801ce46:	89bb      	ldrh	r3, [r7, #12]
 801ce48:	1ad3      	subs	r3, r2, r3
 801ce4a:	b29b      	uxth	r3, r3
 801ce4c:	4619      	mov	r1, r3
 801ce4e:	f7fa fac5 	bl	80173dc <pbuf_realloc>
  useg->len -= remainder;
 801ce52:	697b      	ldr	r3, [r7, #20]
 801ce54:	891a      	ldrh	r2, [r3, #8]
 801ce56:	89bb      	ldrh	r3, [r7, #12]
 801ce58:	1ad3      	subs	r3, r2, r3
 801ce5a:	b29a      	uxth	r2, r3
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ce60:	697b      	ldr	r3, [r7, #20]
 801ce62:	68db      	ldr	r3, [r3, #12]
 801ce64:	899b      	ldrh	r3, [r3, #12]
 801ce66:	b29c      	uxth	r4, r3
 801ce68:	7efb      	ldrb	r3, [r7, #27]
 801ce6a:	b29b      	uxth	r3, r3
 801ce6c:	4618      	mov	r0, r3
 801ce6e:	f7f8 fd7f 	bl	8015970 <lwip_htons>
 801ce72:	4603      	mov	r3, r0
 801ce74:	461a      	mov	r2, r3
 801ce76:	697b      	ldr	r3, [r7, #20]
 801ce78:	68db      	ldr	r3, [r3, #12]
 801ce7a:	4322      	orrs	r2, r4
 801ce7c:	b292      	uxth	r2, r2
 801ce7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ce80:	697b      	ldr	r3, [r7, #20]
 801ce82:	685b      	ldr	r3, [r3, #4]
 801ce84:	4618      	mov	r0, r3
 801ce86:	f7fa fcbd 	bl	8017804 <pbuf_clen>
 801ce8a:	4603      	mov	r3, r0
 801ce8c:	461a      	mov	r2, r3
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ce94:	4413      	add	r3, r2
 801ce96:	b29a      	uxth	r2, r3
 801ce98:	687b      	ldr	r3, [r7, #4]
 801ce9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ce9e:	69fb      	ldr	r3, [r7, #28]
 801cea0:	685b      	ldr	r3, [r3, #4]
 801cea2:	4618      	mov	r0, r3
 801cea4:	f7fa fcae 	bl	8017804 <pbuf_clen>
 801cea8:	4603      	mov	r3, r0
 801ceaa:	461a      	mov	r2, r3
 801ceac:	687b      	ldr	r3, [r7, #4]
 801ceae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ceb2:	4413      	add	r3, r2
 801ceb4:	b29a      	uxth	r2, r3
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801cebc:	697b      	ldr	r3, [r7, #20]
 801cebe:	681a      	ldr	r2, [r3, #0]
 801cec0:	69fb      	ldr	r3, [r7, #28]
 801cec2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801cec4:	697b      	ldr	r3, [r7, #20]
 801cec6:	69fa      	ldr	r2, [r7, #28]
 801cec8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ceca:	69fb      	ldr	r3, [r7, #28]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d103      	bne.n	801ceda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	2200      	movs	r2, #0
 801ced6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801ceda:	2300      	movs	r3, #0
 801cedc:	e016      	b.n	801cf0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801cede:	bf00      	nop
 801cee0:	e002      	b.n	801cee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801cee2:	bf00      	nop
 801cee4:	e000      	b.n	801cee8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801cee6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d006      	beq.n	801cefc <tcp_split_unsent_seg+0x25c>
 801ceee:	4b09      	ldr	r3, [pc, #36]	; (801cf14 <tcp_split_unsent_seg+0x274>)
 801cef0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801cef4:	490d      	ldr	r1, [pc, #52]	; (801cf2c <tcp_split_unsent_seg+0x28c>)
 801cef6:	4809      	ldr	r0, [pc, #36]	; (801cf1c <tcp_split_unsent_seg+0x27c>)
 801cef8:	f006 fcb4 	bl	8023864 <iprintf>
  if (p != NULL) {
 801cefc:	693b      	ldr	r3, [r7, #16]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d002      	beq.n	801cf08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801cf02:	6938      	ldr	r0, [r7, #16]
 801cf04:	f7fa fbf0 	bl	80176e8 <pbuf_free>
  }

  return ERR_MEM;
 801cf08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801cf0c:	4618      	mov	r0, r3
 801cf0e:	3724      	adds	r7, #36	; 0x24
 801cf10:	46bd      	mov	sp, r7
 801cf12:	bd90      	pop	{r4, r7, pc}
 801cf14:	0802abb8 	.word	0x0802abb8
 801cf18:	0802af4c 	.word	0x0802af4c
 801cf1c:	0802ac0c 	.word	0x0802ac0c
 801cf20:	0802af70 	.word	0x0802af70
 801cf24:	0802af94 	.word	0x0802af94
 801cf28:	0802afa4 	.word	0x0802afa4
 801cf2c:	0802afb4 	.word	0x0802afb4

0801cf30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801cf30:	b590      	push	{r4, r7, lr}
 801cf32:	b085      	sub	sp, #20
 801cf34:	af00      	add	r7, sp, #0
 801cf36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	2b00      	cmp	r3, #0
 801cf3c:	d106      	bne.n	801cf4c <tcp_send_fin+0x1c>
 801cf3e:	4b21      	ldr	r3, [pc, #132]	; (801cfc4 <tcp_send_fin+0x94>)
 801cf40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801cf44:	4920      	ldr	r1, [pc, #128]	; (801cfc8 <tcp_send_fin+0x98>)
 801cf46:	4821      	ldr	r0, [pc, #132]	; (801cfcc <tcp_send_fin+0x9c>)
 801cf48:	f006 fc8c 	bl	8023864 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d02e      	beq.n	801cfb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cf58:	60fb      	str	r3, [r7, #12]
 801cf5a:	e002      	b.n	801cf62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cf62:	68fb      	ldr	r3, [r7, #12]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d1f8      	bne.n	801cf5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801cf6a:	68fb      	ldr	r3, [r7, #12]
 801cf6c:	68db      	ldr	r3, [r3, #12]
 801cf6e:	899b      	ldrh	r3, [r3, #12]
 801cf70:	b29b      	uxth	r3, r3
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7f8 fcfc 	bl	8015970 <lwip_htons>
 801cf78:	4603      	mov	r3, r0
 801cf7a:	b2db      	uxtb	r3, r3
 801cf7c:	f003 0307 	and.w	r3, r3, #7
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d116      	bne.n	801cfb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	68db      	ldr	r3, [r3, #12]
 801cf88:	899b      	ldrh	r3, [r3, #12]
 801cf8a:	b29c      	uxth	r4, r3
 801cf8c:	2001      	movs	r0, #1
 801cf8e:	f7f8 fcef 	bl	8015970 <lwip_htons>
 801cf92:	4603      	mov	r3, r0
 801cf94:	461a      	mov	r2, r3
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	68db      	ldr	r3, [r3, #12]
 801cf9a:	4322      	orrs	r2, r4
 801cf9c:	b292      	uxth	r2, r2
 801cf9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	8b5b      	ldrh	r3, [r3, #26]
 801cfa4:	f043 0320 	orr.w	r3, r3, #32
 801cfa8:	b29a      	uxth	r2, r3
 801cfaa:	687b      	ldr	r3, [r7, #4]
 801cfac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801cfae:	2300      	movs	r3, #0
 801cfb0:	e004      	b.n	801cfbc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801cfb2:	2101      	movs	r1, #1
 801cfb4:	6878      	ldr	r0, [r7, #4]
 801cfb6:	f000 f80b 	bl	801cfd0 <tcp_enqueue_flags>
 801cfba:	4603      	mov	r3, r0
}
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	3714      	adds	r7, #20
 801cfc0:	46bd      	mov	sp, r7
 801cfc2:	bd90      	pop	{r4, r7, pc}
 801cfc4:	0802abb8 	.word	0x0802abb8
 801cfc8:	0802afc0 	.word	0x0802afc0
 801cfcc:	0802ac0c 	.word	0x0802ac0c

0801cfd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b08a      	sub	sp, #40	; 0x28
 801cfd4:	af02      	add	r7, sp, #8
 801cfd6:	6078      	str	r0, [r7, #4]
 801cfd8:	460b      	mov	r3, r1
 801cfda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801cfdc:	2300      	movs	r3, #0
 801cfde:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801cfe0:	2300      	movs	r3, #0
 801cfe2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801cfe4:	78fb      	ldrb	r3, [r7, #3]
 801cfe6:	f003 0303 	and.w	r3, r3, #3
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d106      	bne.n	801cffc <tcp_enqueue_flags+0x2c>
 801cfee:	4b67      	ldr	r3, [pc, #412]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801cff0:	f240 4211 	movw	r2, #1041	; 0x411
 801cff4:	4966      	ldr	r1, [pc, #408]	; (801d190 <tcp_enqueue_flags+0x1c0>)
 801cff6:	4867      	ldr	r0, [pc, #412]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801cff8:	f006 fc34 	bl	8023864 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d106      	bne.n	801d010 <tcp_enqueue_flags+0x40>
 801d002:	4b62      	ldr	r3, [pc, #392]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801d004:	f240 4213 	movw	r2, #1043	; 0x413
 801d008:	4963      	ldr	r1, [pc, #396]	; (801d198 <tcp_enqueue_flags+0x1c8>)
 801d00a:	4862      	ldr	r0, [pc, #392]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801d00c:	f006 fc2a 	bl	8023864 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801d010:	78fb      	ldrb	r3, [r7, #3]
 801d012:	f003 0302 	and.w	r3, r3, #2
 801d016:	2b00      	cmp	r3, #0
 801d018:	d001      	beq.n	801d01e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801d01a:	2301      	movs	r3, #1
 801d01c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d01e:	7ffb      	ldrb	r3, [r7, #31]
 801d020:	009b      	lsls	r3, r3, #2
 801d022:	b2db      	uxtb	r3, r3
 801d024:	f003 0304 	and.w	r3, r3, #4
 801d028:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d02a:	7dfb      	ldrb	r3, [r7, #23]
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d032:	4619      	mov	r1, r3
 801d034:	2036      	movs	r0, #54	; 0x36
 801d036:	f7fa f873 	bl	8017120 <pbuf_alloc>
 801d03a:	6138      	str	r0, [r7, #16]
 801d03c:	693b      	ldr	r3, [r7, #16]
 801d03e:	2b00      	cmp	r3, #0
 801d040:	d109      	bne.n	801d056 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	8b5b      	ldrh	r3, [r3, #26]
 801d046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d04a:	b29a      	uxth	r2, r3
 801d04c:	687b      	ldr	r3, [r7, #4]
 801d04e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d054:	e095      	b.n	801d182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d056:	693b      	ldr	r3, [r7, #16]
 801d058:	895a      	ldrh	r2, [r3, #10]
 801d05a:	7dfb      	ldrb	r3, [r7, #23]
 801d05c:	b29b      	uxth	r3, r3
 801d05e:	429a      	cmp	r2, r3
 801d060:	d206      	bcs.n	801d070 <tcp_enqueue_flags+0xa0>
 801d062:	4b4a      	ldr	r3, [pc, #296]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801d064:	f240 4239 	movw	r2, #1081	; 0x439
 801d068:	494c      	ldr	r1, [pc, #304]	; (801d19c <tcp_enqueue_flags+0x1cc>)
 801d06a:	484a      	ldr	r0, [pc, #296]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801d06c:	f006 fbfa 	bl	8023864 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d070:	687b      	ldr	r3, [r7, #4]
 801d072:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801d074:	78fa      	ldrb	r2, [r7, #3]
 801d076:	7ffb      	ldrb	r3, [r7, #31]
 801d078:	9300      	str	r3, [sp, #0]
 801d07a:	460b      	mov	r3, r1
 801d07c:	6939      	ldr	r1, [r7, #16]
 801d07e:	6878      	ldr	r0, [r7, #4]
 801d080:	f7ff f918 	bl	801c2b4 <tcp_create_segment>
 801d084:	60f8      	str	r0, [r7, #12]
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d109      	bne.n	801d0a0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	8b5b      	ldrh	r3, [r3, #26]
 801d090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d094:	b29a      	uxth	r2, r3
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801d09a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d09e:	e070      	b.n	801d182 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d0a0:	68fb      	ldr	r3, [r7, #12]
 801d0a2:	68db      	ldr	r3, [r3, #12]
 801d0a4:	f003 0303 	and.w	r3, r3, #3
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d006      	beq.n	801d0ba <tcp_enqueue_flags+0xea>
 801d0ac:	4b37      	ldr	r3, [pc, #220]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801d0ae:	f240 4242 	movw	r2, #1090	; 0x442
 801d0b2:	493b      	ldr	r1, [pc, #236]	; (801d1a0 <tcp_enqueue_flags+0x1d0>)
 801d0b4:	4837      	ldr	r0, [pc, #220]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801d0b6:	f006 fbd5 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d0ba:	68fb      	ldr	r3, [r7, #12]
 801d0bc:	891b      	ldrh	r3, [r3, #8]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	d006      	beq.n	801d0d0 <tcp_enqueue_flags+0x100>
 801d0c2:	4b32      	ldr	r3, [pc, #200]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801d0c4:	f240 4243 	movw	r2, #1091	; 0x443
 801d0c8:	4936      	ldr	r1, [pc, #216]	; (801d1a4 <tcp_enqueue_flags+0x1d4>)
 801d0ca:	4832      	ldr	r0, [pc, #200]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801d0cc:	f006 fbca 	bl	8023864 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801d0d0:	687b      	ldr	r3, [r7, #4]
 801d0d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d103      	bne.n	801d0e0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	68fa      	ldr	r2, [r7, #12]
 801d0dc:	66da      	str	r2, [r3, #108]	; 0x6c
 801d0de:	e00d      	b.n	801d0fc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0e4:	61bb      	str	r3, [r7, #24]
 801d0e6:	e002      	b.n	801d0ee <tcp_enqueue_flags+0x11e>
 801d0e8:	69bb      	ldr	r3, [r7, #24]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	61bb      	str	r3, [r7, #24]
 801d0ee:	69bb      	ldr	r3, [r7, #24]
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d1f8      	bne.n	801d0e8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801d0f6:	69bb      	ldr	r3, [r7, #24]
 801d0f8:	68fa      	ldr	r2, [r7, #12]
 801d0fa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801d0fc:	687b      	ldr	r3, [r7, #4]
 801d0fe:	2200      	movs	r2, #0
 801d100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d104:	78fb      	ldrb	r3, [r7, #3]
 801d106:	f003 0302 	and.w	r3, r3, #2
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	d104      	bne.n	801d118 <tcp_enqueue_flags+0x148>
 801d10e:	78fb      	ldrb	r3, [r7, #3]
 801d110:	f003 0301 	and.w	r3, r3, #1
 801d114:	2b00      	cmp	r3, #0
 801d116:	d004      	beq.n	801d122 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d11c:	1c5a      	adds	r2, r3, #1
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801d122:	78fb      	ldrb	r3, [r7, #3]
 801d124:	f003 0301 	and.w	r3, r3, #1
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d006      	beq.n	801d13a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	8b5b      	ldrh	r3, [r3, #26]
 801d130:	f043 0320 	orr.w	r3, r3, #32
 801d134:	b29a      	uxth	r2, r3
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	685b      	ldr	r3, [r3, #4]
 801d13e:	4618      	mov	r0, r3
 801d140:	f7fa fb60 	bl	8017804 <pbuf_clen>
 801d144:	4603      	mov	r3, r0
 801d146:	461a      	mov	r2, r3
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d14e:	4413      	add	r3, r2
 801d150:	b29a      	uxth	r2, r3
 801d152:	687b      	ldr	r3, [r7, #4]
 801d154:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d00e      	beq.n	801d180 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d166:	2b00      	cmp	r3, #0
 801d168:	d10a      	bne.n	801d180 <tcp_enqueue_flags+0x1b0>
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d106      	bne.n	801d180 <tcp_enqueue_flags+0x1b0>
 801d172:	4b06      	ldr	r3, [pc, #24]	; (801d18c <tcp_enqueue_flags+0x1bc>)
 801d174:	f240 4265 	movw	r2, #1125	; 0x465
 801d178:	490b      	ldr	r1, [pc, #44]	; (801d1a8 <tcp_enqueue_flags+0x1d8>)
 801d17a:	4806      	ldr	r0, [pc, #24]	; (801d194 <tcp_enqueue_flags+0x1c4>)
 801d17c:	f006 fb72 	bl	8023864 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801d180:	2300      	movs	r3, #0
}
 801d182:	4618      	mov	r0, r3
 801d184:	3720      	adds	r7, #32
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	0802abb8 	.word	0x0802abb8
 801d190:	0802afdc 	.word	0x0802afdc
 801d194:	0802ac0c 	.word	0x0802ac0c
 801d198:	0802b034 	.word	0x0802b034
 801d19c:	0802b054 	.word	0x0802b054
 801d1a0:	0802b090 	.word	0x0802b090
 801d1a4:	0802b0a8 	.word	0x0802b0a8
 801d1a8:	0802b0d4 	.word	0x0802b0d4

0801d1ac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801d1ac:	b5b0      	push	{r4, r5, r7, lr}
 801d1ae:	b08a      	sub	sp, #40	; 0x28
 801d1b0:	af00      	add	r7, sp, #0
 801d1b2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	2b00      	cmp	r3, #0
 801d1b8:	d106      	bne.n	801d1c8 <tcp_output+0x1c>
 801d1ba:	4b8a      	ldr	r3, [pc, #552]	; (801d3e4 <tcp_output+0x238>)
 801d1bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d1c0:	4989      	ldr	r1, [pc, #548]	; (801d3e8 <tcp_output+0x23c>)
 801d1c2:	488a      	ldr	r0, [pc, #552]	; (801d3ec <tcp_output+0x240>)
 801d1c4:	f006 fb4e 	bl	8023864 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d1c8:	687b      	ldr	r3, [r7, #4]
 801d1ca:	7d1b      	ldrb	r3, [r3, #20]
 801d1cc:	2b01      	cmp	r3, #1
 801d1ce:	d106      	bne.n	801d1de <tcp_output+0x32>
 801d1d0:	4b84      	ldr	r3, [pc, #528]	; (801d3e4 <tcp_output+0x238>)
 801d1d2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801d1d6:	4986      	ldr	r1, [pc, #536]	; (801d3f0 <tcp_output+0x244>)
 801d1d8:	4884      	ldr	r0, [pc, #528]	; (801d3ec <tcp_output+0x240>)
 801d1da:	f006 fb43 	bl	8023864 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801d1de:	4b85      	ldr	r3, [pc, #532]	; (801d3f4 <tcp_output+0x248>)
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	687a      	ldr	r2, [r7, #4]
 801d1e4:	429a      	cmp	r2, r3
 801d1e6:	d101      	bne.n	801d1ec <tcp_output+0x40>
    return ERR_OK;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	e1ce      	b.n	801d58a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801d1f2:	687b      	ldr	r3, [r7, #4]
 801d1f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d1f8:	4293      	cmp	r3, r2
 801d1fa:	bf28      	it	cs
 801d1fc:	4613      	movcs	r3, r2
 801d1fe:	b29b      	uxth	r3, r3
 801d200:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d206:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801d208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d20a:	2b00      	cmp	r3, #0
 801d20c:	d10b      	bne.n	801d226 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	8b5b      	ldrh	r3, [r3, #26]
 801d212:	f003 0302 	and.w	r3, r3, #2
 801d216:	2b00      	cmp	r3, #0
 801d218:	f000 81aa 	beq.w	801d570 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801d21c:	6878      	ldr	r0, [r7, #4]
 801d21e:	f000 fdcb 	bl	801ddb8 <tcp_send_empty_ack>
 801d222:	4603      	mov	r3, r0
 801d224:	e1b1      	b.n	801d58a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d226:	6879      	ldr	r1, [r7, #4]
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	3304      	adds	r3, #4
 801d22c:	461a      	mov	r2, r3
 801d22e:	6878      	ldr	r0, [r7, #4]
 801d230:	f7ff f824 	bl	801c27c <tcp_route>
 801d234:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801d236:	697b      	ldr	r3, [r7, #20]
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d102      	bne.n	801d242 <tcp_output+0x96>
    return ERR_RTE;
 801d23c:	f06f 0303 	mvn.w	r3, #3
 801d240:	e1a3      	b.n	801d58a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	2b00      	cmp	r3, #0
 801d246:	d003      	beq.n	801d250 <tcp_output+0xa4>
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d111      	bne.n	801d274 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801d250:	697b      	ldr	r3, [r7, #20]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d002      	beq.n	801d25c <tcp_output+0xb0>
 801d256:	697b      	ldr	r3, [r7, #20]
 801d258:	3304      	adds	r3, #4
 801d25a:	e000      	b.n	801d25e <tcp_output+0xb2>
 801d25c:	2300      	movs	r3, #0
 801d25e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801d260:	693b      	ldr	r3, [r7, #16]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d102      	bne.n	801d26c <tcp_output+0xc0>
      return ERR_RTE;
 801d266:	f06f 0303 	mvn.w	r3, #3
 801d26a:	e18e      	b.n	801d58a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d26c:	693b      	ldr	r3, [r7, #16]
 801d26e:	681a      	ldr	r2, [r3, #0]
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d276:	68db      	ldr	r3, [r3, #12]
 801d278:	685b      	ldr	r3, [r3, #4]
 801d27a:	4618      	mov	r0, r3
 801d27c:	f7f8 fb8d 	bl	801599a <lwip_htonl>
 801d280:	4602      	mov	r2, r0
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d286:	1ad3      	subs	r3, r2, r3
 801d288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d28a:	8912      	ldrh	r2, [r2, #8]
 801d28c:	4413      	add	r3, r2
 801d28e:	69ba      	ldr	r2, [r7, #24]
 801d290:	429a      	cmp	r2, r3
 801d292:	d227      	bcs.n	801d2e4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801d29a:	461a      	mov	r2, r3
 801d29c:	69bb      	ldr	r3, [r7, #24]
 801d29e:	4293      	cmp	r3, r2
 801d2a0:	d114      	bne.n	801d2cc <tcp_output+0x120>
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d110      	bne.n	801d2cc <tcp_output+0x120>
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801d2b0:	2b00      	cmp	r3, #0
 801d2b2:	d10b      	bne.n	801d2cc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	2200      	movs	r2, #0
 801d2b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 801d2bc:	687b      	ldr	r3, [r7, #4]
 801d2be:	2201      	movs	r2, #1
 801d2c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	8b5b      	ldrh	r3, [r3, #26]
 801d2d0:	f003 0302 	and.w	r3, r3, #2
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	f000 814d 	beq.w	801d574 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801d2da:	6878      	ldr	r0, [r7, #4]
 801d2dc:	f000 fd6c 	bl	801ddb8 <tcp_send_empty_ack>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	e152      	b.n	801d58a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	2200      	movs	r2, #0
 801d2e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d2f0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801d2f2:	6a3b      	ldr	r3, [r7, #32]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	f000 811c 	beq.w	801d532 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801d2fa:	e002      	b.n	801d302 <tcp_output+0x156>
 801d2fc:	6a3b      	ldr	r3, [r7, #32]
 801d2fe:	681b      	ldr	r3, [r3, #0]
 801d300:	623b      	str	r3, [r7, #32]
 801d302:	6a3b      	ldr	r3, [r7, #32]
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d1f8      	bne.n	801d2fc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801d30a:	e112      	b.n	801d532 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801d30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d30e:	68db      	ldr	r3, [r3, #12]
 801d310:	899b      	ldrh	r3, [r3, #12]
 801d312:	b29b      	uxth	r3, r3
 801d314:	4618      	mov	r0, r3
 801d316:	f7f8 fb2b 	bl	8015970 <lwip_htons>
 801d31a:	4603      	mov	r3, r0
 801d31c:	b2db      	uxtb	r3, r3
 801d31e:	f003 0304 	and.w	r3, r3, #4
 801d322:	2b00      	cmp	r3, #0
 801d324:	d006      	beq.n	801d334 <tcp_output+0x188>
 801d326:	4b2f      	ldr	r3, [pc, #188]	; (801d3e4 <tcp_output+0x238>)
 801d328:	f240 5236 	movw	r2, #1334	; 0x536
 801d32c:	4932      	ldr	r1, [pc, #200]	; (801d3f8 <tcp_output+0x24c>)
 801d32e:	482f      	ldr	r0, [pc, #188]	; (801d3ec <tcp_output+0x240>)
 801d330:	f006 fa98 	bl	8023864 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d01f      	beq.n	801d37c <tcp_output+0x1d0>
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	8b5b      	ldrh	r3, [r3, #26]
 801d340:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801d344:	2b00      	cmp	r3, #0
 801d346:	d119      	bne.n	801d37c <tcp_output+0x1d0>
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	d00b      	beq.n	801d368 <tcp_output+0x1bc>
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d110      	bne.n	801d37c <tcp_output+0x1d0>
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d35e:	891a      	ldrh	r2, [r3, #8]
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d364:	429a      	cmp	r2, r3
 801d366:	d209      	bcs.n	801d37c <tcp_output+0x1d0>
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d36e:	2b00      	cmp	r3, #0
 801d370:	d004      	beq.n	801d37c <tcp_output+0x1d0>
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d378:	2b08      	cmp	r3, #8
 801d37a:	d901      	bls.n	801d380 <tcp_output+0x1d4>
 801d37c:	2301      	movs	r3, #1
 801d37e:	e000      	b.n	801d382 <tcp_output+0x1d6>
 801d380:	2300      	movs	r3, #0
 801d382:	2b00      	cmp	r3, #0
 801d384:	d106      	bne.n	801d394 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	8b5b      	ldrh	r3, [r3, #26]
 801d38a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d38e:	2b00      	cmp	r3, #0
 801d390:	f000 80e4 	beq.w	801d55c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	7d1b      	ldrb	r3, [r3, #20]
 801d398:	2b02      	cmp	r3, #2
 801d39a:	d00d      	beq.n	801d3b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d39e:	68db      	ldr	r3, [r3, #12]
 801d3a0:	899b      	ldrh	r3, [r3, #12]
 801d3a2:	b29c      	uxth	r4, r3
 801d3a4:	2010      	movs	r0, #16
 801d3a6:	f7f8 fae3 	bl	8015970 <lwip_htons>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	461a      	mov	r2, r3
 801d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3b0:	68db      	ldr	r3, [r3, #12]
 801d3b2:	4322      	orrs	r2, r4
 801d3b4:	b292      	uxth	r2, r2
 801d3b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801d3b8:	697a      	ldr	r2, [r7, #20]
 801d3ba:	6879      	ldr	r1, [r7, #4]
 801d3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d3be:	f000 f909 	bl	801d5d4 <tcp_output_segment>
 801d3c2:	4603      	mov	r3, r0
 801d3c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801d3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d016      	beq.n	801d3fc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	8b5b      	ldrh	r3, [r3, #26]
 801d3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d3d6:	b29a      	uxth	r2, r3
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	835a      	strh	r2, [r3, #26]
      return err;
 801d3dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d3e0:	e0d3      	b.n	801d58a <tcp_output+0x3de>
 801d3e2:	bf00      	nop
 801d3e4:	0802abb8 	.word	0x0802abb8
 801d3e8:	0802b0fc 	.word	0x0802b0fc
 801d3ec:	0802ac0c 	.word	0x0802ac0c
 801d3f0:	0802b114 	.word	0x0802b114
 801d3f4:	20016004 	.word	0x20016004
 801d3f8:	0802b13c 	.word	0x0802b13c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801d3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3fe:	681a      	ldr	r2, [r3, #0]
 801d400:	687b      	ldr	r3, [r7, #4]
 801d402:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	7d1b      	ldrb	r3, [r3, #20]
 801d408:	2b02      	cmp	r3, #2
 801d40a:	d006      	beq.n	801d41a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	8b5b      	ldrh	r3, [r3, #26]
 801d410:	f023 0303 	bic.w	r3, r3, #3
 801d414:	b29a      	uxth	r2, r3
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d41c:	68db      	ldr	r3, [r3, #12]
 801d41e:	685b      	ldr	r3, [r3, #4]
 801d420:	4618      	mov	r0, r3
 801d422:	f7f8 faba 	bl	801599a <lwip_htonl>
 801d426:	4604      	mov	r4, r0
 801d428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d42a:	891b      	ldrh	r3, [r3, #8]
 801d42c:	461d      	mov	r5, r3
 801d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d430:	68db      	ldr	r3, [r3, #12]
 801d432:	899b      	ldrh	r3, [r3, #12]
 801d434:	b29b      	uxth	r3, r3
 801d436:	4618      	mov	r0, r3
 801d438:	f7f8 fa9a 	bl	8015970 <lwip_htons>
 801d43c:	4603      	mov	r3, r0
 801d43e:	b2db      	uxtb	r3, r3
 801d440:	f003 0303 	and.w	r3, r3, #3
 801d444:	2b00      	cmp	r3, #0
 801d446:	d001      	beq.n	801d44c <tcp_output+0x2a0>
 801d448:	2301      	movs	r3, #1
 801d44a:	e000      	b.n	801d44e <tcp_output+0x2a2>
 801d44c:	2300      	movs	r3, #0
 801d44e:	442b      	add	r3, r5
 801d450:	4423      	add	r3, r4
 801d452:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d458:	68bb      	ldr	r3, [r7, #8]
 801d45a:	1ad3      	subs	r3, r2, r3
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	da02      	bge.n	801d466 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	68ba      	ldr	r2, [r7, #8]
 801d464:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801d466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d468:	891b      	ldrh	r3, [r3, #8]
 801d46a:	461c      	mov	r4, r3
 801d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d46e:	68db      	ldr	r3, [r3, #12]
 801d470:	899b      	ldrh	r3, [r3, #12]
 801d472:	b29b      	uxth	r3, r3
 801d474:	4618      	mov	r0, r3
 801d476:	f7f8 fa7b 	bl	8015970 <lwip_htons>
 801d47a:	4603      	mov	r3, r0
 801d47c:	b2db      	uxtb	r3, r3
 801d47e:	f003 0303 	and.w	r3, r3, #3
 801d482:	2b00      	cmp	r3, #0
 801d484:	d001      	beq.n	801d48a <tcp_output+0x2de>
 801d486:	2301      	movs	r3, #1
 801d488:	e000      	b.n	801d48c <tcp_output+0x2e0>
 801d48a:	2300      	movs	r3, #0
 801d48c:	4423      	add	r3, r4
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d049      	beq.n	801d526 <tcp_output+0x37a>
      seg->next = NULL;
 801d492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d494:	2200      	movs	r2, #0
 801d496:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d105      	bne.n	801d4ac <tcp_output+0x300>
        pcb->unacked = seg;
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d4a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4a8:	623b      	str	r3, [r7, #32]
 801d4aa:	e03f      	b.n	801d52c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801d4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4ae:	68db      	ldr	r3, [r3, #12]
 801d4b0:	685b      	ldr	r3, [r3, #4]
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7f8 fa71 	bl	801599a <lwip_htonl>
 801d4b8:	4604      	mov	r4, r0
 801d4ba:	6a3b      	ldr	r3, [r7, #32]
 801d4bc:	68db      	ldr	r3, [r3, #12]
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	4618      	mov	r0, r3
 801d4c2:	f7f8 fa6a 	bl	801599a <lwip_htonl>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	1ae3      	subs	r3, r4, r3
 801d4ca:	2b00      	cmp	r3, #0
 801d4cc:	da24      	bge.n	801d518 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	3370      	adds	r3, #112	; 0x70
 801d4d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d4d4:	e002      	b.n	801d4dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801d4d6:	69fb      	ldr	r3, [r7, #28]
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d4dc:	69fb      	ldr	r3, [r7, #28]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	2b00      	cmp	r3, #0
 801d4e2:	d011      	beq.n	801d508 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d4e4:	69fb      	ldr	r3, [r7, #28]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	68db      	ldr	r3, [r3, #12]
 801d4ea:	685b      	ldr	r3, [r3, #4]
 801d4ec:	4618      	mov	r0, r3
 801d4ee:	f7f8 fa54 	bl	801599a <lwip_htonl>
 801d4f2:	4604      	mov	r4, r0
 801d4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4f6:	68db      	ldr	r3, [r3, #12]
 801d4f8:	685b      	ldr	r3, [r3, #4]
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7f8 fa4d 	bl	801599a <lwip_htonl>
 801d500:	4603      	mov	r3, r0
 801d502:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801d504:	2b00      	cmp	r3, #0
 801d506:	dbe6      	blt.n	801d4d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801d508:	69fb      	ldr	r3, [r7, #28]
 801d50a:	681a      	ldr	r2, [r3, #0]
 801d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d50e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801d510:	69fb      	ldr	r3, [r7, #28]
 801d512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d514:	601a      	str	r2, [r3, #0]
 801d516:	e009      	b.n	801d52c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801d518:	6a3b      	ldr	r3, [r7, #32]
 801d51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d51c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801d51e:	6a3b      	ldr	r3, [r7, #32]
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	623b      	str	r3, [r7, #32]
 801d524:	e002      	b.n	801d52c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801d526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d528:	f7fb ff01 	bl	801932e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d530:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801d532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d534:	2b00      	cmp	r3, #0
 801d536:	d012      	beq.n	801d55e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d53a:	68db      	ldr	r3, [r3, #12]
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	4618      	mov	r0, r3
 801d540:	f7f8 fa2b 	bl	801599a <lwip_htonl>
 801d544:	4602      	mov	r2, r0
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d54a:	1ad3      	subs	r3, r2, r3
 801d54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d54e:	8912      	ldrh	r2, [r2, #8]
 801d550:	4413      	add	r3, r2
  while (seg != NULL &&
 801d552:	69ba      	ldr	r2, [r7, #24]
 801d554:	429a      	cmp	r2, r3
 801d556:	f4bf aed9 	bcs.w	801d30c <tcp_output+0x160>
 801d55a:	e000      	b.n	801d55e <tcp_output+0x3b2>
      break;
 801d55c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d562:	2b00      	cmp	r3, #0
 801d564:	d108      	bne.n	801d578 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d566:	687b      	ldr	r3, [r7, #4]
 801d568:	2200      	movs	r2, #0
 801d56a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801d56e:	e004      	b.n	801d57a <tcp_output+0x3ce>
    goto output_done;
 801d570:	bf00      	nop
 801d572:	e002      	b.n	801d57a <tcp_output+0x3ce>
    goto output_done;
 801d574:	bf00      	nop
 801d576:	e000      	b.n	801d57a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801d578:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	8b5b      	ldrh	r3, [r3, #26]
 801d57e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d582:	b29a      	uxth	r2, r3
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801d588:	2300      	movs	r3, #0
}
 801d58a:	4618      	mov	r0, r3
 801d58c:	3728      	adds	r7, #40	; 0x28
 801d58e:	46bd      	mov	sp, r7
 801d590:	bdb0      	pop	{r4, r5, r7, pc}
 801d592:	bf00      	nop

0801d594 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801d594:	b580      	push	{r7, lr}
 801d596:	b082      	sub	sp, #8
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801d59c:	687b      	ldr	r3, [r7, #4]
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d106      	bne.n	801d5b0 <tcp_output_segment_busy+0x1c>
 801d5a2:	4b09      	ldr	r3, [pc, #36]	; (801d5c8 <tcp_output_segment_busy+0x34>)
 801d5a4:	f240 529a 	movw	r2, #1434	; 0x59a
 801d5a8:	4908      	ldr	r1, [pc, #32]	; (801d5cc <tcp_output_segment_busy+0x38>)
 801d5aa:	4809      	ldr	r0, [pc, #36]	; (801d5d0 <tcp_output_segment_busy+0x3c>)
 801d5ac:	f006 f95a 	bl	8023864 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	685b      	ldr	r3, [r3, #4]
 801d5b4:	7b9b      	ldrb	r3, [r3, #14]
 801d5b6:	2b01      	cmp	r3, #1
 801d5b8:	d001      	beq.n	801d5be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	e000      	b.n	801d5c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801d5be:	2300      	movs	r3, #0
}
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	3708      	adds	r7, #8
 801d5c4:	46bd      	mov	sp, r7
 801d5c6:	bd80      	pop	{r7, pc}
 801d5c8:	0802abb8 	.word	0x0802abb8
 801d5cc:	0802b154 	.word	0x0802b154
 801d5d0:	0802ac0c 	.word	0x0802ac0c

0801d5d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801d5d4:	b5b0      	push	{r4, r5, r7, lr}
 801d5d6:	b08c      	sub	sp, #48	; 0x30
 801d5d8:	af04      	add	r7, sp, #16
 801d5da:	60f8      	str	r0, [r7, #12]
 801d5dc:	60b9      	str	r1, [r7, #8]
 801d5de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	2b00      	cmp	r3, #0
 801d5e4:	d106      	bne.n	801d5f4 <tcp_output_segment+0x20>
 801d5e6:	4b64      	ldr	r3, [pc, #400]	; (801d778 <tcp_output_segment+0x1a4>)
 801d5e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801d5ec:	4963      	ldr	r1, [pc, #396]	; (801d77c <tcp_output_segment+0x1a8>)
 801d5ee:	4864      	ldr	r0, [pc, #400]	; (801d780 <tcp_output_segment+0x1ac>)
 801d5f0:	f006 f938 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801d5f4:	68bb      	ldr	r3, [r7, #8]
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d106      	bne.n	801d608 <tcp_output_segment+0x34>
 801d5fa:	4b5f      	ldr	r3, [pc, #380]	; (801d778 <tcp_output_segment+0x1a4>)
 801d5fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801d600:	4960      	ldr	r1, [pc, #384]	; (801d784 <tcp_output_segment+0x1b0>)
 801d602:	485f      	ldr	r0, [pc, #380]	; (801d780 <tcp_output_segment+0x1ac>)
 801d604:	f006 f92e 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d106      	bne.n	801d61c <tcp_output_segment+0x48>
 801d60e:	4b5a      	ldr	r3, [pc, #360]	; (801d778 <tcp_output_segment+0x1a4>)
 801d610:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801d614:	495c      	ldr	r1, [pc, #368]	; (801d788 <tcp_output_segment+0x1b4>)
 801d616:	485a      	ldr	r0, [pc, #360]	; (801d780 <tcp_output_segment+0x1ac>)
 801d618:	f006 f924 	bl	8023864 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801d61c:	68f8      	ldr	r0, [r7, #12]
 801d61e:	f7ff ffb9 	bl	801d594 <tcp_output_segment_busy>
 801d622:	4603      	mov	r3, r0
 801d624:	2b00      	cmp	r3, #0
 801d626:	d001      	beq.n	801d62c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801d628:	2300      	movs	r3, #0
 801d62a:	e0a1      	b.n	801d770 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d62c:	68bb      	ldr	r3, [r7, #8]
 801d62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d630:	68fb      	ldr	r3, [r7, #12]
 801d632:	68dc      	ldr	r4, [r3, #12]
 801d634:	4610      	mov	r0, r2
 801d636:	f7f8 f9b0 	bl	801599a <lwip_htonl>
 801d63a:	4603      	mov	r3, r0
 801d63c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d63e:	68bb      	ldr	r3, [r7, #8]
 801d640:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	68dc      	ldr	r4, [r3, #12]
 801d646:	4610      	mov	r0, r2
 801d648:	f7f8 f992 	bl	8015970 <lwip_htons>
 801d64c:	4603      	mov	r3, r0
 801d64e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d650:	68bb      	ldr	r3, [r7, #8]
 801d652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d654:	68ba      	ldr	r2, [r7, #8]
 801d656:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d658:	441a      	add	r2, r3
 801d65a:	68bb      	ldr	r3, [r7, #8]
 801d65c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	68db      	ldr	r3, [r3, #12]
 801d662:	3314      	adds	r3, #20
 801d664:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	7a9b      	ldrb	r3, [r3, #10]
 801d66a:	f003 0301 	and.w	r3, r3, #1
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d015      	beq.n	801d69e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d672:	68bb      	ldr	r3, [r7, #8]
 801d674:	3304      	adds	r3, #4
 801d676:	461a      	mov	r2, r3
 801d678:	6879      	ldr	r1, [r7, #4]
 801d67a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801d67e:	f7fc fa25 	bl	8019acc <tcp_eff_send_mss_netif>
 801d682:	4603      	mov	r3, r0
 801d684:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d686:	8b7b      	ldrh	r3, [r7, #26]
 801d688:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d68c:	4618      	mov	r0, r3
 801d68e:	f7f8 f984 	bl	801599a <lwip_htonl>
 801d692:	4602      	mov	r2, r0
 801d694:	69fb      	ldr	r3, [r7, #28]
 801d696:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d698:	69fb      	ldr	r3, [r7, #28]
 801d69a:	3304      	adds	r3, #4
 801d69c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d69e:	68bb      	ldr	r3, [r7, #8]
 801d6a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d6a4:	2b00      	cmp	r3, #0
 801d6a6:	da02      	bge.n	801d6ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d6a8:	68bb      	ldr	r3, [r7, #8]
 801d6aa:	2200      	movs	r2, #0
 801d6ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d6ae:	68bb      	ldr	r3, [r7, #8]
 801d6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d10c      	bne.n	801d6d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d6b6:	4b35      	ldr	r3, [pc, #212]	; (801d78c <tcp_output_segment+0x1b8>)
 801d6b8:	681a      	ldr	r2, [r3, #0]
 801d6ba:	68bb      	ldr	r3, [r7, #8]
 801d6bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	68db      	ldr	r3, [r3, #12]
 801d6c2:	685b      	ldr	r3, [r3, #4]
 801d6c4:	4618      	mov	r0, r3
 801d6c6:	f7f8 f968 	bl	801599a <lwip_htonl>
 801d6ca:	4602      	mov	r2, r0
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d6d0:	68fb      	ldr	r3, [r7, #12]
 801d6d2:	68da      	ldr	r2, [r3, #12]
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	685b      	ldr	r3, [r3, #4]
 801d6d8:	685b      	ldr	r3, [r3, #4]
 801d6da:	1ad3      	subs	r3, r2, r3
 801d6dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	685b      	ldr	r3, [r3, #4]
 801d6e2:	8959      	ldrh	r1, [r3, #10]
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	685b      	ldr	r3, [r3, #4]
 801d6e8:	8b3a      	ldrh	r2, [r7, #24]
 801d6ea:	1a8a      	subs	r2, r1, r2
 801d6ec:	b292      	uxth	r2, r2
 801d6ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	685b      	ldr	r3, [r3, #4]
 801d6f4:	8919      	ldrh	r1, [r3, #8]
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	685b      	ldr	r3, [r3, #4]
 801d6fa:	8b3a      	ldrh	r2, [r7, #24]
 801d6fc:	1a8a      	subs	r2, r1, r2
 801d6fe:	b292      	uxth	r2, r2
 801d700:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	685b      	ldr	r3, [r3, #4]
 801d706:	68fa      	ldr	r2, [r7, #12]
 801d708:	68d2      	ldr	r2, [r2, #12]
 801d70a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	68db      	ldr	r3, [r3, #12]
 801d710:	2200      	movs	r2, #0
 801d712:	741a      	strb	r2, [r3, #16]
 801d714:	2200      	movs	r2, #0
 801d716:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	68da      	ldr	r2, [r3, #12]
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	7a9b      	ldrb	r3, [r3, #10]
 801d720:	f003 0301 	and.w	r3, r3, #1
 801d724:	2b00      	cmp	r3, #0
 801d726:	d001      	beq.n	801d72c <tcp_output_segment+0x158>
 801d728:	2318      	movs	r3, #24
 801d72a:	e000      	b.n	801d72e <tcp_output_segment+0x15a>
 801d72c:	2314      	movs	r3, #20
 801d72e:	4413      	add	r3, r2
 801d730:	69fa      	ldr	r2, [r7, #28]
 801d732:	429a      	cmp	r2, r3
 801d734:	d006      	beq.n	801d744 <tcp_output_segment+0x170>
 801d736:	4b10      	ldr	r3, [pc, #64]	; (801d778 <tcp_output_segment+0x1a4>)
 801d738:	f240 621c 	movw	r2, #1564	; 0x61c
 801d73c:	4914      	ldr	r1, [pc, #80]	; (801d790 <tcp_output_segment+0x1bc>)
 801d73e:	4810      	ldr	r0, [pc, #64]	; (801d780 <tcp_output_segment+0x1ac>)
 801d740:	f006 f890 	bl	8023864 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	6858      	ldr	r0, [r3, #4]
 801d748:	68b9      	ldr	r1, [r7, #8]
 801d74a:	68bb      	ldr	r3, [r7, #8]
 801d74c:	1d1c      	adds	r4, r3, #4
 801d74e:	68bb      	ldr	r3, [r7, #8]
 801d750:	7add      	ldrb	r5, [r3, #11]
 801d752:	68bb      	ldr	r3, [r7, #8]
 801d754:	7a9b      	ldrb	r3, [r3, #10]
 801d756:	687a      	ldr	r2, [r7, #4]
 801d758:	9202      	str	r2, [sp, #8]
 801d75a:	2206      	movs	r2, #6
 801d75c:	9201      	str	r2, [sp, #4]
 801d75e:	9300      	str	r3, [sp, #0]
 801d760:	462b      	mov	r3, r5
 801d762:	4622      	mov	r2, r4
 801d764:	f002 fd78 	bl	8020258 <ip4_output_if>
 801d768:	4603      	mov	r3, r0
 801d76a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801d76c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d770:	4618      	mov	r0, r3
 801d772:	3720      	adds	r7, #32
 801d774:	46bd      	mov	sp, r7
 801d776:	bdb0      	pop	{r4, r5, r7, pc}
 801d778:	0802abb8 	.word	0x0802abb8
 801d77c:	0802b17c 	.word	0x0802b17c
 801d780:	0802ac0c 	.word	0x0802ac0c
 801d784:	0802b19c 	.word	0x0802b19c
 801d788:	0802b1bc 	.word	0x0802b1bc
 801d78c:	20015fb8 	.word	0x20015fb8
 801d790:	0802b1e0 	.word	0x0802b1e0

0801d794 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801d794:	b5b0      	push	{r4, r5, r7, lr}
 801d796:	b084      	sub	sp, #16
 801d798:	af00      	add	r7, sp, #0
 801d79a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	2b00      	cmp	r3, #0
 801d7a0:	d106      	bne.n	801d7b0 <tcp_rexmit_rto_prepare+0x1c>
 801d7a2:	4b31      	ldr	r3, [pc, #196]	; (801d868 <tcp_rexmit_rto_prepare+0xd4>)
 801d7a4:	f240 6263 	movw	r2, #1635	; 0x663
 801d7a8:	4930      	ldr	r1, [pc, #192]	; (801d86c <tcp_rexmit_rto_prepare+0xd8>)
 801d7aa:	4831      	ldr	r0, [pc, #196]	; (801d870 <tcp_rexmit_rto_prepare+0xdc>)
 801d7ac:	f006 f85a 	bl	8023864 <iprintf>

  if (pcb->unacked == NULL) {
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d102      	bne.n	801d7be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801d7b8:	f06f 0305 	mvn.w	r3, #5
 801d7bc:	e050      	b.n	801d860 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d7c2:	60fb      	str	r3, [r7, #12]
 801d7c4:	e00b      	b.n	801d7de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801d7c6:	68f8      	ldr	r0, [r7, #12]
 801d7c8:	f7ff fee4 	bl	801d594 <tcp_output_segment_busy>
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d002      	beq.n	801d7d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801d7d2:	f06f 0305 	mvn.w	r3, #5
 801d7d6:	e043      	b.n	801d860 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d7d8:	68fb      	ldr	r3, [r7, #12]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	60fb      	str	r3, [r7, #12]
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	681b      	ldr	r3, [r3, #0]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d1ef      	bne.n	801d7c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801d7e6:	68f8      	ldr	r0, [r7, #12]
 801d7e8:	f7ff fed4 	bl	801d594 <tcp_output_segment_busy>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d002      	beq.n	801d7f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801d7f2:	f06f 0305 	mvn.w	r3, #5
 801d7f6:	e033      	b.n	801d860 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801d800:	687b      	ldr	r3, [r7, #4]
 801d802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d804:	687b      	ldr	r3, [r7, #4]
 801d806:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801d808:	687b      	ldr	r3, [r7, #4]
 801d80a:	2200      	movs	r2, #0
 801d80c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	8b5b      	ldrh	r3, [r3, #26]
 801d812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801d816:	b29a      	uxth	r2, r3
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	68db      	ldr	r3, [r3, #12]
 801d820:	685b      	ldr	r3, [r3, #4]
 801d822:	4618      	mov	r0, r3
 801d824:	f7f8 f8b9 	bl	801599a <lwip_htonl>
 801d828:	4604      	mov	r4, r0
 801d82a:	68fb      	ldr	r3, [r7, #12]
 801d82c:	891b      	ldrh	r3, [r3, #8]
 801d82e:	461d      	mov	r5, r3
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	68db      	ldr	r3, [r3, #12]
 801d834:	899b      	ldrh	r3, [r3, #12]
 801d836:	b29b      	uxth	r3, r3
 801d838:	4618      	mov	r0, r3
 801d83a:	f7f8 f899 	bl	8015970 <lwip_htons>
 801d83e:	4603      	mov	r3, r0
 801d840:	b2db      	uxtb	r3, r3
 801d842:	f003 0303 	and.w	r3, r3, #3
 801d846:	2b00      	cmp	r3, #0
 801d848:	d001      	beq.n	801d84e <tcp_rexmit_rto_prepare+0xba>
 801d84a:	2301      	movs	r3, #1
 801d84c:	e000      	b.n	801d850 <tcp_rexmit_rto_prepare+0xbc>
 801d84e:	2300      	movs	r3, #0
 801d850:	442b      	add	r3, r5
 801d852:	18e2      	adds	r2, r4, r3
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801d858:	687b      	ldr	r3, [r7, #4]
 801d85a:	2200      	movs	r2, #0
 801d85c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801d85e:	2300      	movs	r3, #0
}
 801d860:	4618      	mov	r0, r3
 801d862:	3710      	adds	r7, #16
 801d864:	46bd      	mov	sp, r7
 801d866:	bdb0      	pop	{r4, r5, r7, pc}
 801d868:	0802abb8 	.word	0x0802abb8
 801d86c:	0802b1f4 	.word	0x0802b1f4
 801d870:	0802ac0c 	.word	0x0802ac0c

0801d874 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801d874:	b580      	push	{r7, lr}
 801d876:	b082      	sub	sp, #8
 801d878:	af00      	add	r7, sp, #0
 801d87a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d87c:	687b      	ldr	r3, [r7, #4]
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d106      	bne.n	801d890 <tcp_rexmit_rto_commit+0x1c>
 801d882:	4b0d      	ldr	r3, [pc, #52]	; (801d8b8 <tcp_rexmit_rto_commit+0x44>)
 801d884:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d888:	490c      	ldr	r1, [pc, #48]	; (801d8bc <tcp_rexmit_rto_commit+0x48>)
 801d88a:	480d      	ldr	r0, [pc, #52]	; (801d8c0 <tcp_rexmit_rto_commit+0x4c>)
 801d88c:	f005 ffea 	bl	8023864 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d896:	2bff      	cmp	r3, #255	; 0xff
 801d898:	d007      	beq.n	801d8aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d8a0:	3301      	adds	r3, #1
 801d8a2:	b2da      	uxtb	r2, r3
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801d8aa:	6878      	ldr	r0, [r7, #4]
 801d8ac:	f7ff fc7e 	bl	801d1ac <tcp_output>
}
 801d8b0:	bf00      	nop
 801d8b2:	3708      	adds	r7, #8
 801d8b4:	46bd      	mov	sp, r7
 801d8b6:	bd80      	pop	{r7, pc}
 801d8b8:	0802abb8 	.word	0x0802abb8
 801d8bc:	0802b218 	.word	0x0802b218
 801d8c0:	0802ac0c 	.word	0x0802ac0c

0801d8c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b082      	sub	sp, #8
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d106      	bne.n	801d8e0 <tcp_rexmit_rto+0x1c>
 801d8d2:	4b0a      	ldr	r3, [pc, #40]	; (801d8fc <tcp_rexmit_rto+0x38>)
 801d8d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801d8d8:	4909      	ldr	r1, [pc, #36]	; (801d900 <tcp_rexmit_rto+0x3c>)
 801d8da:	480a      	ldr	r0, [pc, #40]	; (801d904 <tcp_rexmit_rto+0x40>)
 801d8dc:	f005 ffc2 	bl	8023864 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801d8e0:	6878      	ldr	r0, [r7, #4]
 801d8e2:	f7ff ff57 	bl	801d794 <tcp_rexmit_rto_prepare>
 801d8e6:	4603      	mov	r3, r0
 801d8e8:	2b00      	cmp	r3, #0
 801d8ea:	d102      	bne.n	801d8f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801d8ec:	6878      	ldr	r0, [r7, #4]
 801d8ee:	f7ff ffc1 	bl	801d874 <tcp_rexmit_rto_commit>
  }
}
 801d8f2:	bf00      	nop
 801d8f4:	3708      	adds	r7, #8
 801d8f6:	46bd      	mov	sp, r7
 801d8f8:	bd80      	pop	{r7, pc}
 801d8fa:	bf00      	nop
 801d8fc:	0802abb8 	.word	0x0802abb8
 801d900:	0802b23c 	.word	0x0802b23c
 801d904:	0802ac0c 	.word	0x0802ac0c

0801d908 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801d908:	b590      	push	{r4, r7, lr}
 801d90a:	b085      	sub	sp, #20
 801d90c:	af00      	add	r7, sp, #0
 801d90e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d910:	687b      	ldr	r3, [r7, #4]
 801d912:	2b00      	cmp	r3, #0
 801d914:	d106      	bne.n	801d924 <tcp_rexmit+0x1c>
 801d916:	4b2f      	ldr	r3, [pc, #188]	; (801d9d4 <tcp_rexmit+0xcc>)
 801d918:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801d91c:	492e      	ldr	r1, [pc, #184]	; (801d9d8 <tcp_rexmit+0xd0>)
 801d91e:	482f      	ldr	r0, [pc, #188]	; (801d9dc <tcp_rexmit+0xd4>)
 801d920:	f005 ffa0 	bl	8023864 <iprintf>

  if (pcb->unacked == NULL) {
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d928:	2b00      	cmp	r3, #0
 801d92a:	d102      	bne.n	801d932 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801d92c:	f06f 0305 	mvn.w	r3, #5
 801d930:	e04c      	b.n	801d9cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d936:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801d938:	68b8      	ldr	r0, [r7, #8]
 801d93a:	f7ff fe2b 	bl	801d594 <tcp_output_segment_busy>
 801d93e:	4603      	mov	r3, r0
 801d940:	2b00      	cmp	r3, #0
 801d942:	d002      	beq.n	801d94a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801d944:	f06f 0305 	mvn.w	r3, #5
 801d948:	e040      	b.n	801d9cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801d94a:	68bb      	ldr	r3, [r7, #8]
 801d94c:	681a      	ldr	r2, [r3, #0]
 801d94e:	687b      	ldr	r3, [r7, #4]
 801d950:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	336c      	adds	r3, #108	; 0x6c
 801d956:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d958:	e002      	b.n	801d960 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	2b00      	cmp	r3, #0
 801d966:	d011      	beq.n	801d98c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	68db      	ldr	r3, [r3, #12]
 801d96e:	685b      	ldr	r3, [r3, #4]
 801d970:	4618      	mov	r0, r3
 801d972:	f7f8 f812 	bl	801599a <lwip_htonl>
 801d976:	4604      	mov	r4, r0
 801d978:	68bb      	ldr	r3, [r7, #8]
 801d97a:	68db      	ldr	r3, [r3, #12]
 801d97c:	685b      	ldr	r3, [r3, #4]
 801d97e:	4618      	mov	r0, r3
 801d980:	f7f8 f80b 	bl	801599a <lwip_htonl>
 801d984:	4603      	mov	r3, r0
 801d986:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801d988:	2b00      	cmp	r3, #0
 801d98a:	dbe6      	blt.n	801d95a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801d98c:	68fb      	ldr	r3, [r7, #12]
 801d98e:	681a      	ldr	r2, [r3, #0]
 801d990:	68bb      	ldr	r3, [r7, #8]
 801d992:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	68ba      	ldr	r2, [r7, #8]
 801d998:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801d99a:	68bb      	ldr	r3, [r7, #8]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d103      	bne.n	801d9aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	2200      	movs	r2, #0
 801d9a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d9b0:	2bff      	cmp	r3, #255	; 0xff
 801d9b2:	d007      	beq.n	801d9c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d9ba:	3301      	adds	r3, #1
 801d9bc:	b2da      	uxtb	r2, r3
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801d9c4:	687b      	ldr	r3, [r7, #4]
 801d9c6:	2200      	movs	r2, #0
 801d9c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801d9ca:	2300      	movs	r3, #0
}
 801d9cc:	4618      	mov	r0, r3
 801d9ce:	3714      	adds	r7, #20
 801d9d0:	46bd      	mov	sp, r7
 801d9d2:	bd90      	pop	{r4, r7, pc}
 801d9d4:	0802abb8 	.word	0x0802abb8
 801d9d8:	0802b258 	.word	0x0802b258
 801d9dc:	0802ac0c 	.word	0x0802ac0c

0801d9e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801d9e0:	b580      	push	{r7, lr}
 801d9e2:	b082      	sub	sp, #8
 801d9e4:	af00      	add	r7, sp, #0
 801d9e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d9e8:	687b      	ldr	r3, [r7, #4]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d106      	bne.n	801d9fc <tcp_rexmit_fast+0x1c>
 801d9ee:	4b2a      	ldr	r3, [pc, #168]	; (801da98 <tcp_rexmit_fast+0xb8>)
 801d9f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801d9f4:	4929      	ldr	r1, [pc, #164]	; (801da9c <tcp_rexmit_fast+0xbc>)
 801d9f6:	482a      	ldr	r0, [pc, #168]	; (801daa0 <tcp_rexmit_fast+0xc0>)
 801d9f8:	f005 ff34 	bl	8023864 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801d9fc:	687b      	ldr	r3, [r7, #4]
 801d9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801da00:	2b00      	cmp	r3, #0
 801da02:	d044      	beq.n	801da8e <tcp_rexmit_fast+0xae>
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	8b5b      	ldrh	r3, [r3, #26]
 801da08:	f003 0304 	and.w	r3, r3, #4
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	d13e      	bne.n	801da8e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801da10:	6878      	ldr	r0, [r7, #4]
 801da12:	f7ff ff79 	bl	801d908 <tcp_rexmit>
 801da16:	4603      	mov	r3, r0
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d138      	bne.n	801da8e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801da28:	4293      	cmp	r3, r2
 801da2a:	bf28      	it	cs
 801da2c:	4613      	movcs	r3, r2
 801da2e:	b29b      	uxth	r3, r3
 801da30:	0fda      	lsrs	r2, r3, #31
 801da32:	4413      	add	r3, r2
 801da34:	105b      	asrs	r3, r3, #1
 801da36:	b29a      	uxth	r2, r3
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801da44:	461a      	mov	r2, r3
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801da4a:	005b      	lsls	r3, r3, #1
 801da4c:	429a      	cmp	r2, r3
 801da4e:	d206      	bcs.n	801da5e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801da54:	005b      	lsls	r3, r3, #1
 801da56:	b29a      	uxth	r2, r3
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801da68:	4619      	mov	r1, r3
 801da6a:	0049      	lsls	r1, r1, #1
 801da6c:	440b      	add	r3, r1
 801da6e:	b29b      	uxth	r3, r3
 801da70:	4413      	add	r3, r2
 801da72:	b29a      	uxth	r2, r3
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801da7a:	687b      	ldr	r3, [r7, #4]
 801da7c:	8b5b      	ldrh	r3, [r3, #26]
 801da7e:	f043 0304 	orr.w	r3, r3, #4
 801da82:	b29a      	uxth	r2, r3
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	2200      	movs	r2, #0
 801da8c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801da8e:	bf00      	nop
 801da90:	3708      	adds	r7, #8
 801da92:	46bd      	mov	sp, r7
 801da94:	bd80      	pop	{r7, pc}
 801da96:	bf00      	nop
 801da98:	0802abb8 	.word	0x0802abb8
 801da9c:	0802b270 	.word	0x0802b270
 801daa0:	0802ac0c 	.word	0x0802ac0c

0801daa4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801daa4:	b580      	push	{r7, lr}
 801daa6:	b086      	sub	sp, #24
 801daa8:	af00      	add	r7, sp, #0
 801daaa:	60f8      	str	r0, [r7, #12]
 801daac:	607b      	str	r3, [r7, #4]
 801daae:	460b      	mov	r3, r1
 801dab0:	817b      	strh	r3, [r7, #10]
 801dab2:	4613      	mov	r3, r2
 801dab4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801dab6:	897a      	ldrh	r2, [r7, #10]
 801dab8:	893b      	ldrh	r3, [r7, #8]
 801daba:	4413      	add	r3, r2
 801dabc:	b29b      	uxth	r3, r3
 801dabe:	3314      	adds	r3, #20
 801dac0:	b29b      	uxth	r3, r3
 801dac2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dac6:	4619      	mov	r1, r3
 801dac8:	2022      	movs	r0, #34	; 0x22
 801daca:	f7f9 fb29 	bl	8017120 <pbuf_alloc>
 801dace:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801dad0:	697b      	ldr	r3, [r7, #20]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d04d      	beq.n	801db72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801dad6:	897b      	ldrh	r3, [r7, #10]
 801dad8:	3313      	adds	r3, #19
 801dada:	697a      	ldr	r2, [r7, #20]
 801dadc:	8952      	ldrh	r2, [r2, #10]
 801dade:	4293      	cmp	r3, r2
 801dae0:	db06      	blt.n	801daf0 <tcp_output_alloc_header_common+0x4c>
 801dae2:	4b26      	ldr	r3, [pc, #152]	; (801db7c <tcp_output_alloc_header_common+0xd8>)
 801dae4:	f240 7223 	movw	r2, #1827	; 0x723
 801dae8:	4925      	ldr	r1, [pc, #148]	; (801db80 <tcp_output_alloc_header_common+0xdc>)
 801daea:	4826      	ldr	r0, [pc, #152]	; (801db84 <tcp_output_alloc_header_common+0xe0>)
 801daec:	f005 feba 	bl	8023864 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801daf0:	697b      	ldr	r3, [r7, #20]
 801daf2:	685b      	ldr	r3, [r3, #4]
 801daf4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801daf6:	8c3b      	ldrh	r3, [r7, #32]
 801daf8:	4618      	mov	r0, r3
 801dafa:	f7f7 ff39 	bl	8015970 <lwip_htons>
 801dafe:	4603      	mov	r3, r0
 801db00:	461a      	mov	r2, r3
 801db02:	693b      	ldr	r3, [r7, #16]
 801db04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801db06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f7 ff31 	bl	8015970 <lwip_htons>
 801db0e:	4603      	mov	r3, r0
 801db10:	461a      	mov	r2, r3
 801db12:	693b      	ldr	r3, [r7, #16]
 801db14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801db16:	693b      	ldr	r3, [r7, #16]
 801db18:	687a      	ldr	r2, [r7, #4]
 801db1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801db1c:	68f8      	ldr	r0, [r7, #12]
 801db1e:	f7f7 ff3c 	bl	801599a <lwip_htonl>
 801db22:	4602      	mov	r2, r0
 801db24:	693b      	ldr	r3, [r7, #16]
 801db26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801db28:	897b      	ldrh	r3, [r7, #10]
 801db2a:	089b      	lsrs	r3, r3, #2
 801db2c:	b29b      	uxth	r3, r3
 801db2e:	3305      	adds	r3, #5
 801db30:	b29b      	uxth	r3, r3
 801db32:	031b      	lsls	r3, r3, #12
 801db34:	b29a      	uxth	r2, r3
 801db36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801db3a:	b29b      	uxth	r3, r3
 801db3c:	4313      	orrs	r3, r2
 801db3e:	b29b      	uxth	r3, r3
 801db40:	4618      	mov	r0, r3
 801db42:	f7f7 ff15 	bl	8015970 <lwip_htons>
 801db46:	4603      	mov	r3, r0
 801db48:	461a      	mov	r2, r3
 801db4a:	693b      	ldr	r3, [r7, #16]
 801db4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801db4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801db50:	4618      	mov	r0, r3
 801db52:	f7f7 ff0d 	bl	8015970 <lwip_htons>
 801db56:	4603      	mov	r3, r0
 801db58:	461a      	mov	r2, r3
 801db5a:	693b      	ldr	r3, [r7, #16]
 801db5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801db5e:	693b      	ldr	r3, [r7, #16]
 801db60:	2200      	movs	r2, #0
 801db62:	741a      	strb	r2, [r3, #16]
 801db64:	2200      	movs	r2, #0
 801db66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801db68:	693b      	ldr	r3, [r7, #16]
 801db6a:	2200      	movs	r2, #0
 801db6c:	749a      	strb	r2, [r3, #18]
 801db6e:	2200      	movs	r2, #0
 801db70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801db72:	697b      	ldr	r3, [r7, #20]
}
 801db74:	4618      	mov	r0, r3
 801db76:	3718      	adds	r7, #24
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd80      	pop	{r7, pc}
 801db7c:	0802abb8 	.word	0x0802abb8
 801db80:	0802b290 	.word	0x0802b290
 801db84:	0802ac0c 	.word	0x0802ac0c

0801db88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801db88:	b5b0      	push	{r4, r5, r7, lr}
 801db8a:	b08a      	sub	sp, #40	; 0x28
 801db8c:	af04      	add	r7, sp, #16
 801db8e:	60f8      	str	r0, [r7, #12]
 801db90:	607b      	str	r3, [r7, #4]
 801db92:	460b      	mov	r3, r1
 801db94:	817b      	strh	r3, [r7, #10]
 801db96:	4613      	mov	r3, r2
 801db98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801db9a:	68fb      	ldr	r3, [r7, #12]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d106      	bne.n	801dbae <tcp_output_alloc_header+0x26>
 801dba0:	4b15      	ldr	r3, [pc, #84]	; (801dbf8 <tcp_output_alloc_header+0x70>)
 801dba2:	f240 7242 	movw	r2, #1858	; 0x742
 801dba6:	4915      	ldr	r1, [pc, #84]	; (801dbfc <tcp_output_alloc_header+0x74>)
 801dba8:	4815      	ldr	r0, [pc, #84]	; (801dc00 <tcp_output_alloc_header+0x78>)
 801dbaa:	f005 fe5b 	bl	8023864 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	8adb      	ldrh	r3, [r3, #22]
 801dbb6:	68fa      	ldr	r2, [r7, #12]
 801dbb8:	8b12      	ldrh	r2, [r2, #24]
 801dbba:	68f9      	ldr	r1, [r7, #12]
 801dbbc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801dbbe:	893d      	ldrh	r5, [r7, #8]
 801dbc0:	897c      	ldrh	r4, [r7, #10]
 801dbc2:	9103      	str	r1, [sp, #12]
 801dbc4:	2110      	movs	r1, #16
 801dbc6:	9102      	str	r1, [sp, #8]
 801dbc8:	9201      	str	r2, [sp, #4]
 801dbca:	9300      	str	r3, [sp, #0]
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	462a      	mov	r2, r5
 801dbd0:	4621      	mov	r1, r4
 801dbd2:	f7ff ff67 	bl	801daa4 <tcp_output_alloc_header_common>
 801dbd6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d006      	beq.n	801dbec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801dbe2:	68fa      	ldr	r2, [r7, #12]
 801dbe4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801dbe6:	441a      	add	r2, r3
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801dbec:	697b      	ldr	r3, [r7, #20]
}
 801dbee:	4618      	mov	r0, r3
 801dbf0:	3718      	adds	r7, #24
 801dbf2:	46bd      	mov	sp, r7
 801dbf4:	bdb0      	pop	{r4, r5, r7, pc}
 801dbf6:	bf00      	nop
 801dbf8:	0802abb8 	.word	0x0802abb8
 801dbfc:	0802b2c0 	.word	0x0802b2c0
 801dc00:	0802ac0c 	.word	0x0802ac0c

0801dc04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b088      	sub	sp, #32
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	60f8      	str	r0, [r7, #12]
 801dc0c:	60b9      	str	r1, [r7, #8]
 801dc0e:	4611      	mov	r1, r2
 801dc10:	461a      	mov	r2, r3
 801dc12:	460b      	mov	r3, r1
 801dc14:	71fb      	strb	r3, [r7, #7]
 801dc16:	4613      	mov	r3, r2
 801dc18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801dc1e:	68bb      	ldr	r3, [r7, #8]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d106      	bne.n	801dc32 <tcp_output_fill_options+0x2e>
 801dc24:	4b12      	ldr	r3, [pc, #72]	; (801dc70 <tcp_output_fill_options+0x6c>)
 801dc26:	f240 7256 	movw	r2, #1878	; 0x756
 801dc2a:	4912      	ldr	r1, [pc, #72]	; (801dc74 <tcp_output_fill_options+0x70>)
 801dc2c:	4812      	ldr	r0, [pc, #72]	; (801dc78 <tcp_output_fill_options+0x74>)
 801dc2e:	f005 fe19 	bl	8023864 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801dc32:	68bb      	ldr	r3, [r7, #8]
 801dc34:	685b      	ldr	r3, [r3, #4]
 801dc36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801dc38:	69bb      	ldr	r3, [r7, #24]
 801dc3a:	3314      	adds	r3, #20
 801dc3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801dc3e:	8bfb      	ldrh	r3, [r7, #30]
 801dc40:	009b      	lsls	r3, r3, #2
 801dc42:	461a      	mov	r2, r3
 801dc44:	79fb      	ldrb	r3, [r7, #7]
 801dc46:	009b      	lsls	r3, r3, #2
 801dc48:	f003 0304 	and.w	r3, r3, #4
 801dc4c:	4413      	add	r3, r2
 801dc4e:	3314      	adds	r3, #20
 801dc50:	69ba      	ldr	r2, [r7, #24]
 801dc52:	4413      	add	r3, r2
 801dc54:	697a      	ldr	r2, [r7, #20]
 801dc56:	429a      	cmp	r2, r3
 801dc58:	d006      	beq.n	801dc68 <tcp_output_fill_options+0x64>
 801dc5a:	4b05      	ldr	r3, [pc, #20]	; (801dc70 <tcp_output_fill_options+0x6c>)
 801dc5c:	f240 7275 	movw	r2, #1909	; 0x775
 801dc60:	4906      	ldr	r1, [pc, #24]	; (801dc7c <tcp_output_fill_options+0x78>)
 801dc62:	4805      	ldr	r0, [pc, #20]	; (801dc78 <tcp_output_fill_options+0x74>)
 801dc64:	f005 fdfe 	bl	8023864 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801dc68:	bf00      	nop
 801dc6a:	3720      	adds	r7, #32
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}
 801dc70:	0802abb8 	.word	0x0802abb8
 801dc74:	0802b2e8 	.word	0x0802b2e8
 801dc78:	0802ac0c 	.word	0x0802ac0c
 801dc7c:	0802b1e0 	.word	0x0802b1e0

0801dc80 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801dc80:	b580      	push	{r7, lr}
 801dc82:	b08a      	sub	sp, #40	; 0x28
 801dc84:	af04      	add	r7, sp, #16
 801dc86:	60f8      	str	r0, [r7, #12]
 801dc88:	60b9      	str	r1, [r7, #8]
 801dc8a:	607a      	str	r2, [r7, #4]
 801dc8c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801dc8e:	68bb      	ldr	r3, [r7, #8]
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d106      	bne.n	801dca2 <tcp_output_control_segment+0x22>
 801dc94:	4b1c      	ldr	r3, [pc, #112]	; (801dd08 <tcp_output_control_segment+0x88>)
 801dc96:	f240 7287 	movw	r2, #1927	; 0x787
 801dc9a:	491c      	ldr	r1, [pc, #112]	; (801dd0c <tcp_output_control_segment+0x8c>)
 801dc9c:	481c      	ldr	r0, [pc, #112]	; (801dd10 <tcp_output_control_segment+0x90>)
 801dc9e:	f005 fde1 	bl	8023864 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801dca2:	683a      	ldr	r2, [r7, #0]
 801dca4:	6879      	ldr	r1, [r7, #4]
 801dca6:	68f8      	ldr	r0, [r7, #12]
 801dca8:	f7fe fae8 	bl	801c27c <tcp_route>
 801dcac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801dcae:	693b      	ldr	r3, [r7, #16]
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	d102      	bne.n	801dcba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801dcb4:	23fc      	movs	r3, #252	; 0xfc
 801dcb6:	75fb      	strb	r3, [r7, #23]
 801dcb8:	e01c      	b.n	801dcf4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	2b00      	cmp	r3, #0
 801dcbe:	d006      	beq.n	801dcce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801dcc0:	68fb      	ldr	r3, [r7, #12]
 801dcc2:	7adb      	ldrb	r3, [r3, #11]
 801dcc4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	7a9b      	ldrb	r3, [r3, #10]
 801dcca:	757b      	strb	r3, [r7, #21]
 801dccc:	e003      	b.n	801dcd6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801dcce:	23ff      	movs	r3, #255	; 0xff
 801dcd0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801dcd2:	2300      	movs	r3, #0
 801dcd4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801dcd6:	7dba      	ldrb	r2, [r7, #22]
 801dcd8:	693b      	ldr	r3, [r7, #16]
 801dcda:	9302      	str	r3, [sp, #8]
 801dcdc:	2306      	movs	r3, #6
 801dcde:	9301      	str	r3, [sp, #4]
 801dce0:	7d7b      	ldrb	r3, [r7, #21]
 801dce2:	9300      	str	r3, [sp, #0]
 801dce4:	4613      	mov	r3, r2
 801dce6:	683a      	ldr	r2, [r7, #0]
 801dce8:	6879      	ldr	r1, [r7, #4]
 801dcea:	68b8      	ldr	r0, [r7, #8]
 801dcec:	f002 fab4 	bl	8020258 <ip4_output_if>
 801dcf0:	4603      	mov	r3, r0
 801dcf2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801dcf4:	68b8      	ldr	r0, [r7, #8]
 801dcf6:	f7f9 fcf7 	bl	80176e8 <pbuf_free>
  return err;
 801dcfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dcfe:	4618      	mov	r0, r3
 801dd00:	3718      	adds	r7, #24
 801dd02:	46bd      	mov	sp, r7
 801dd04:	bd80      	pop	{r7, pc}
 801dd06:	bf00      	nop
 801dd08:	0802abb8 	.word	0x0802abb8
 801dd0c:	0802b310 	.word	0x0802b310
 801dd10:	0802ac0c 	.word	0x0802ac0c

0801dd14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801dd14:	b590      	push	{r4, r7, lr}
 801dd16:	b08b      	sub	sp, #44	; 0x2c
 801dd18:	af04      	add	r7, sp, #16
 801dd1a:	60f8      	str	r0, [r7, #12]
 801dd1c:	60b9      	str	r1, [r7, #8]
 801dd1e:	607a      	str	r2, [r7, #4]
 801dd20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801dd22:	683b      	ldr	r3, [r7, #0]
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d106      	bne.n	801dd36 <tcp_rst+0x22>
 801dd28:	4b1f      	ldr	r3, [pc, #124]	; (801dda8 <tcp_rst+0x94>)
 801dd2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801dd2e:	491f      	ldr	r1, [pc, #124]	; (801ddac <tcp_rst+0x98>)
 801dd30:	481f      	ldr	r0, [pc, #124]	; (801ddb0 <tcp_rst+0x9c>)
 801dd32:	f005 fd97 	bl	8023864 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801dd36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d106      	bne.n	801dd4a <tcp_rst+0x36>
 801dd3c:	4b1a      	ldr	r3, [pc, #104]	; (801dda8 <tcp_rst+0x94>)
 801dd3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801dd42:	491c      	ldr	r1, [pc, #112]	; (801ddb4 <tcp_rst+0xa0>)
 801dd44:	481a      	ldr	r0, [pc, #104]	; (801ddb0 <tcp_rst+0x9c>)
 801dd46:	f005 fd8d 	bl	8023864 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801dd4a:	2300      	movs	r3, #0
 801dd4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801dd4e:	f246 0308 	movw	r3, #24584	; 0x6008
 801dd52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801dd54:	7dfb      	ldrb	r3, [r7, #23]
 801dd56:	b29c      	uxth	r4, r3
 801dd58:	68b8      	ldr	r0, [r7, #8]
 801dd5a:	f7f7 fe1e 	bl	801599a <lwip_htonl>
 801dd5e:	4602      	mov	r2, r0
 801dd60:	8abb      	ldrh	r3, [r7, #20]
 801dd62:	9303      	str	r3, [sp, #12]
 801dd64:	2314      	movs	r3, #20
 801dd66:	9302      	str	r3, [sp, #8]
 801dd68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801dd6a:	9301      	str	r3, [sp, #4]
 801dd6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801dd6e:	9300      	str	r3, [sp, #0]
 801dd70:	4613      	mov	r3, r2
 801dd72:	2200      	movs	r2, #0
 801dd74:	4621      	mov	r1, r4
 801dd76:	6878      	ldr	r0, [r7, #4]
 801dd78:	f7ff fe94 	bl	801daa4 <tcp_output_alloc_header_common>
 801dd7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801dd7e:	693b      	ldr	r3, [r7, #16]
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d00c      	beq.n	801dd9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801dd84:	7dfb      	ldrb	r3, [r7, #23]
 801dd86:	2200      	movs	r2, #0
 801dd88:	6939      	ldr	r1, [r7, #16]
 801dd8a:	68f8      	ldr	r0, [r7, #12]
 801dd8c:	f7ff ff3a 	bl	801dc04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801dd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd92:	683a      	ldr	r2, [r7, #0]
 801dd94:	6939      	ldr	r1, [r7, #16]
 801dd96:	68f8      	ldr	r0, [r7, #12]
 801dd98:	f7ff ff72 	bl	801dc80 <tcp_output_control_segment>
 801dd9c:	e000      	b.n	801dda0 <tcp_rst+0x8c>
    return;
 801dd9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801dda0:	371c      	adds	r7, #28
 801dda2:	46bd      	mov	sp, r7
 801dda4:	bd90      	pop	{r4, r7, pc}
 801dda6:	bf00      	nop
 801dda8:	0802abb8 	.word	0x0802abb8
 801ddac:	0802b33c 	.word	0x0802b33c
 801ddb0:	0802ac0c 	.word	0x0802ac0c
 801ddb4:	0802b358 	.word	0x0802b358

0801ddb8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ddb8:	b590      	push	{r4, r7, lr}
 801ddba:	b087      	sub	sp, #28
 801ddbc:	af00      	add	r7, sp, #0
 801ddbe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d106      	bne.n	801dddc <tcp_send_empty_ack+0x24>
 801ddce:	4b28      	ldr	r3, [pc, #160]	; (801de70 <tcp_send_empty_ack+0xb8>)
 801ddd0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ddd4:	4927      	ldr	r1, [pc, #156]	; (801de74 <tcp_send_empty_ack+0xbc>)
 801ddd6:	4828      	ldr	r0, [pc, #160]	; (801de78 <tcp_send_empty_ack+0xc0>)
 801ddd8:	f005 fd44 	bl	8023864 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dddc:	7dfb      	ldrb	r3, [r7, #23]
 801ddde:	009b      	lsls	r3, r3, #2
 801dde0:	b2db      	uxtb	r3, r3
 801dde2:	f003 0304 	and.w	r3, r3, #4
 801dde6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801dde8:	7d7b      	ldrb	r3, [r7, #21]
 801ddea:	b29c      	uxth	r4, r3
 801ddec:	687b      	ldr	r3, [r7, #4]
 801ddee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f7f7 fdd2 	bl	801599a <lwip_htonl>
 801ddf6:	4603      	mov	r3, r0
 801ddf8:	2200      	movs	r2, #0
 801ddfa:	4621      	mov	r1, r4
 801ddfc:	6878      	ldr	r0, [r7, #4]
 801ddfe:	f7ff fec3 	bl	801db88 <tcp_output_alloc_header>
 801de02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801de04:	693b      	ldr	r3, [r7, #16]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d109      	bne.n	801de1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	8b5b      	ldrh	r3, [r3, #26]
 801de0e:	f043 0303 	orr.w	r3, r3, #3
 801de12:	b29a      	uxth	r2, r3
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801de18:	f06f 0301 	mvn.w	r3, #1
 801de1c:	e023      	b.n	801de66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801de1e:	7dbb      	ldrb	r3, [r7, #22]
 801de20:	7dfa      	ldrb	r2, [r7, #23]
 801de22:	6939      	ldr	r1, [r7, #16]
 801de24:	6878      	ldr	r0, [r7, #4]
 801de26:	f7ff feed 	bl	801dc04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801de2a:	687a      	ldr	r2, [r7, #4]
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	3304      	adds	r3, #4
 801de30:	6939      	ldr	r1, [r7, #16]
 801de32:	6878      	ldr	r0, [r7, #4]
 801de34:	f7ff ff24 	bl	801dc80 <tcp_output_control_segment>
 801de38:	4603      	mov	r3, r0
 801de3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801de3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801de40:	2b00      	cmp	r3, #0
 801de42:	d007      	beq.n	801de54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	8b5b      	ldrh	r3, [r3, #26]
 801de48:	f043 0303 	orr.w	r3, r3, #3
 801de4c:	b29a      	uxth	r2, r3
 801de4e:	687b      	ldr	r3, [r7, #4]
 801de50:	835a      	strh	r2, [r3, #26]
 801de52:	e006      	b.n	801de62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	8b5b      	ldrh	r3, [r3, #26]
 801de58:	f023 0303 	bic.w	r3, r3, #3
 801de5c:	b29a      	uxth	r2, r3
 801de5e:	687b      	ldr	r3, [r7, #4]
 801de60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801de62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801de66:	4618      	mov	r0, r3
 801de68:	371c      	adds	r7, #28
 801de6a:	46bd      	mov	sp, r7
 801de6c:	bd90      	pop	{r4, r7, pc}
 801de6e:	bf00      	nop
 801de70:	0802abb8 	.word	0x0802abb8
 801de74:	0802b374 	.word	0x0802b374
 801de78:	0802ac0c 	.word	0x0802ac0c

0801de7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801de7c:	b590      	push	{r4, r7, lr}
 801de7e:	b087      	sub	sp, #28
 801de80:	af00      	add	r7, sp, #0
 801de82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801de84:	2300      	movs	r3, #0
 801de86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d106      	bne.n	801de9c <tcp_keepalive+0x20>
 801de8e:	4b18      	ldr	r3, [pc, #96]	; (801def0 <tcp_keepalive+0x74>)
 801de90:	f640 0224 	movw	r2, #2084	; 0x824
 801de94:	4917      	ldr	r1, [pc, #92]	; (801def4 <tcp_keepalive+0x78>)
 801de96:	4818      	ldr	r0, [pc, #96]	; (801def8 <tcp_keepalive+0x7c>)
 801de98:	f005 fce4 	bl	8023864 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801de9c:	7dfb      	ldrb	r3, [r7, #23]
 801de9e:	b29c      	uxth	r4, r3
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dea4:	3b01      	subs	r3, #1
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7f7 fd77 	bl	801599a <lwip_htonl>
 801deac:	4603      	mov	r3, r0
 801deae:	2200      	movs	r2, #0
 801deb0:	4621      	mov	r1, r4
 801deb2:	6878      	ldr	r0, [r7, #4]
 801deb4:	f7ff fe68 	bl	801db88 <tcp_output_alloc_header>
 801deb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801deba:	693b      	ldr	r3, [r7, #16]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d102      	bne.n	801dec6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801dec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dec4:	e010      	b.n	801dee8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801dec6:	7dfb      	ldrb	r3, [r7, #23]
 801dec8:	2200      	movs	r2, #0
 801deca:	6939      	ldr	r1, [r7, #16]
 801decc:	6878      	ldr	r0, [r7, #4]
 801dece:	f7ff fe99 	bl	801dc04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ded2:	687a      	ldr	r2, [r7, #4]
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	3304      	adds	r3, #4
 801ded8:	6939      	ldr	r1, [r7, #16]
 801deda:	6878      	ldr	r0, [r7, #4]
 801dedc:	f7ff fed0 	bl	801dc80 <tcp_output_control_segment>
 801dee0:	4603      	mov	r3, r0
 801dee2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801dee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801dee8:	4618      	mov	r0, r3
 801deea:	371c      	adds	r7, #28
 801deec:	46bd      	mov	sp, r7
 801deee:	bd90      	pop	{r4, r7, pc}
 801def0:	0802abb8 	.word	0x0802abb8
 801def4:	0802b394 	.word	0x0802b394
 801def8:	0802ac0c 	.word	0x0802ac0c

0801defc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801defc:	b590      	push	{r4, r7, lr}
 801defe:	b08b      	sub	sp, #44	; 0x2c
 801df00:	af00      	add	r7, sp, #0
 801df02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801df04:	2300      	movs	r3, #0
 801df06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801df0a:	687b      	ldr	r3, [r7, #4]
 801df0c:	2b00      	cmp	r3, #0
 801df0e:	d106      	bne.n	801df1e <tcp_zero_window_probe+0x22>
 801df10:	4b4c      	ldr	r3, [pc, #304]	; (801e044 <tcp_zero_window_probe+0x148>)
 801df12:	f640 024f 	movw	r2, #2127	; 0x84f
 801df16:	494c      	ldr	r1, [pc, #304]	; (801e048 <tcp_zero_window_probe+0x14c>)
 801df18:	484c      	ldr	r0, [pc, #304]	; (801e04c <tcp_zero_window_probe+0x150>)
 801df1a:	f005 fca3 	bl	8023864 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801df22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801df24:	6a3b      	ldr	r3, [r7, #32]
 801df26:	2b00      	cmp	r3, #0
 801df28:	d101      	bne.n	801df2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801df2a:	2300      	movs	r3, #0
 801df2c:	e086      	b.n	801e03c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801df2e:	687b      	ldr	r3, [r7, #4]
 801df30:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801df34:	2bff      	cmp	r3, #255	; 0xff
 801df36:	d007      	beq.n	801df48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801df38:	687b      	ldr	r3, [r7, #4]
 801df3a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801df3e:	3301      	adds	r3, #1
 801df40:	b2da      	uxtb	r2, r3
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801df48:	6a3b      	ldr	r3, [r7, #32]
 801df4a:	68db      	ldr	r3, [r3, #12]
 801df4c:	899b      	ldrh	r3, [r3, #12]
 801df4e:	b29b      	uxth	r3, r3
 801df50:	4618      	mov	r0, r3
 801df52:	f7f7 fd0d 	bl	8015970 <lwip_htons>
 801df56:	4603      	mov	r3, r0
 801df58:	b2db      	uxtb	r3, r3
 801df5a:	f003 0301 	and.w	r3, r3, #1
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d005      	beq.n	801df6e <tcp_zero_window_probe+0x72>
 801df62:	6a3b      	ldr	r3, [r7, #32]
 801df64:	891b      	ldrh	r3, [r3, #8]
 801df66:	2b00      	cmp	r3, #0
 801df68:	d101      	bne.n	801df6e <tcp_zero_window_probe+0x72>
 801df6a:	2301      	movs	r3, #1
 801df6c:	e000      	b.n	801df70 <tcp_zero_window_probe+0x74>
 801df6e:	2300      	movs	r3, #0
 801df70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801df72:	7ffb      	ldrb	r3, [r7, #31]
 801df74:	2b00      	cmp	r3, #0
 801df76:	bf0c      	ite	eq
 801df78:	2301      	moveq	r3, #1
 801df7a:	2300      	movne	r3, #0
 801df7c:	b2db      	uxtb	r3, r3
 801df7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801df80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801df84:	b299      	uxth	r1, r3
 801df86:	6a3b      	ldr	r3, [r7, #32]
 801df88:	68db      	ldr	r3, [r3, #12]
 801df8a:	685b      	ldr	r3, [r3, #4]
 801df8c:	8bba      	ldrh	r2, [r7, #28]
 801df8e:	6878      	ldr	r0, [r7, #4]
 801df90:	f7ff fdfa 	bl	801db88 <tcp_output_alloc_header>
 801df94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801df96:	69bb      	ldr	r3, [r7, #24]
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d102      	bne.n	801dfa2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801df9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dfa0:	e04c      	b.n	801e03c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801dfa2:	69bb      	ldr	r3, [r7, #24]
 801dfa4:	685b      	ldr	r3, [r3, #4]
 801dfa6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801dfa8:	7ffb      	ldrb	r3, [r7, #31]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d011      	beq.n	801dfd2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801dfae:	697b      	ldr	r3, [r7, #20]
 801dfb0:	899b      	ldrh	r3, [r3, #12]
 801dfb2:	b29b      	uxth	r3, r3
 801dfb4:	b21b      	sxth	r3, r3
 801dfb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801dfba:	b21c      	sxth	r4, r3
 801dfbc:	2011      	movs	r0, #17
 801dfbe:	f7f7 fcd7 	bl	8015970 <lwip_htons>
 801dfc2:	4603      	mov	r3, r0
 801dfc4:	b21b      	sxth	r3, r3
 801dfc6:	4323      	orrs	r3, r4
 801dfc8:	b21b      	sxth	r3, r3
 801dfca:	b29a      	uxth	r2, r3
 801dfcc:	697b      	ldr	r3, [r7, #20]
 801dfce:	819a      	strh	r2, [r3, #12]
 801dfd0:	e010      	b.n	801dff4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801dfd2:	69bb      	ldr	r3, [r7, #24]
 801dfd4:	685b      	ldr	r3, [r3, #4]
 801dfd6:	3314      	adds	r3, #20
 801dfd8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801dfda:	6a3b      	ldr	r3, [r7, #32]
 801dfdc:	6858      	ldr	r0, [r3, #4]
 801dfde:	6a3b      	ldr	r3, [r7, #32]
 801dfe0:	685b      	ldr	r3, [r3, #4]
 801dfe2:	891a      	ldrh	r2, [r3, #8]
 801dfe4:	6a3b      	ldr	r3, [r7, #32]
 801dfe6:	891b      	ldrh	r3, [r3, #8]
 801dfe8:	1ad3      	subs	r3, r2, r3
 801dfea:	b29b      	uxth	r3, r3
 801dfec:	2201      	movs	r2, #1
 801dfee:	6939      	ldr	r1, [r7, #16]
 801dff0:	f7f9 fd80 	bl	8017af4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801dff4:	6a3b      	ldr	r3, [r7, #32]
 801dff6:	68db      	ldr	r3, [r3, #12]
 801dff8:	685b      	ldr	r3, [r3, #4]
 801dffa:	4618      	mov	r0, r3
 801dffc:	f7f7 fccd 	bl	801599a <lwip_htonl>
 801e000:	4603      	mov	r3, r0
 801e002:	3301      	adds	r3, #1
 801e004:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e00a:	68fb      	ldr	r3, [r7, #12]
 801e00c:	1ad3      	subs	r3, r2, r3
 801e00e:	2b00      	cmp	r3, #0
 801e010:	da02      	bge.n	801e018 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801e012:	687b      	ldr	r3, [r7, #4]
 801e014:	68fa      	ldr	r2, [r7, #12]
 801e016:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801e018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e01c:	2200      	movs	r2, #0
 801e01e:	69b9      	ldr	r1, [r7, #24]
 801e020:	6878      	ldr	r0, [r7, #4]
 801e022:	f7ff fdef 	bl	801dc04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801e026:	687a      	ldr	r2, [r7, #4]
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	3304      	adds	r3, #4
 801e02c:	69b9      	ldr	r1, [r7, #24]
 801e02e:	6878      	ldr	r0, [r7, #4]
 801e030:	f7ff fe26 	bl	801dc80 <tcp_output_control_segment>
 801e034:	4603      	mov	r3, r0
 801e036:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801e038:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801e03c:	4618      	mov	r0, r3
 801e03e:	372c      	adds	r7, #44	; 0x2c
 801e040:	46bd      	mov	sp, r7
 801e042:	bd90      	pop	{r4, r7, pc}
 801e044:	0802abb8 	.word	0x0802abb8
 801e048:	0802b3b0 	.word	0x0802b3b0
 801e04c:	0802ac0c 	.word	0x0802ac0c

0801e050 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801e050:	b580      	push	{r7, lr}
 801e052:	b082      	sub	sp, #8
 801e054:	af00      	add	r7, sp, #0
 801e056:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801e058:	f7f9 ff94 	bl	8017f84 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801e05c:	4b0a      	ldr	r3, [pc, #40]	; (801e088 <tcpip_tcp_timer+0x38>)
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d103      	bne.n	801e06c <tcpip_tcp_timer+0x1c>
 801e064:	4b09      	ldr	r3, [pc, #36]	; (801e08c <tcpip_tcp_timer+0x3c>)
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d005      	beq.n	801e078 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e06c:	2200      	movs	r2, #0
 801e06e:	4908      	ldr	r1, [pc, #32]	; (801e090 <tcpip_tcp_timer+0x40>)
 801e070:	20fa      	movs	r0, #250	; 0xfa
 801e072:	f000 f8f3 	bl	801e25c <sys_timeout>
 801e076:	e003      	b.n	801e080 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801e078:	4b06      	ldr	r3, [pc, #24]	; (801e094 <tcpip_tcp_timer+0x44>)
 801e07a:	2200      	movs	r2, #0
 801e07c:	601a      	str	r2, [r3, #0]
  }
}
 801e07e:	bf00      	nop
 801e080:	bf00      	nop
 801e082:	3708      	adds	r7, #8
 801e084:	46bd      	mov	sp, r7
 801e086:	bd80      	pop	{r7, pc}
 801e088:	20015fc4 	.word	0x20015fc4
 801e08c:	20015fc8 	.word	0x20015fc8
 801e090:	0801e051 	.word	0x0801e051
 801e094:	20016010 	.word	0x20016010

0801e098 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801e098:	b580      	push	{r7, lr}
 801e09a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801e09c:	4b0a      	ldr	r3, [pc, #40]	; (801e0c8 <tcp_timer_needed+0x30>)
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	2b00      	cmp	r3, #0
 801e0a2:	d10f      	bne.n	801e0c4 <tcp_timer_needed+0x2c>
 801e0a4:	4b09      	ldr	r3, [pc, #36]	; (801e0cc <tcp_timer_needed+0x34>)
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d103      	bne.n	801e0b4 <tcp_timer_needed+0x1c>
 801e0ac:	4b08      	ldr	r3, [pc, #32]	; (801e0d0 <tcp_timer_needed+0x38>)
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	2b00      	cmp	r3, #0
 801e0b2:	d007      	beq.n	801e0c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801e0b4:	4b04      	ldr	r3, [pc, #16]	; (801e0c8 <tcp_timer_needed+0x30>)
 801e0b6:	2201      	movs	r2, #1
 801e0b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	4905      	ldr	r1, [pc, #20]	; (801e0d4 <tcp_timer_needed+0x3c>)
 801e0be:	20fa      	movs	r0, #250	; 0xfa
 801e0c0:	f000 f8cc 	bl	801e25c <sys_timeout>
  }
}
 801e0c4:	bf00      	nop
 801e0c6:	bd80      	pop	{r7, pc}
 801e0c8:	20016010 	.word	0x20016010
 801e0cc:	20015fc4 	.word	0x20015fc4
 801e0d0:	20015fc8 	.word	0x20015fc8
 801e0d4:	0801e051 	.word	0x0801e051

0801e0d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	b086      	sub	sp, #24
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	60f8      	str	r0, [r7, #12]
 801e0e0:	60b9      	str	r1, [r7, #8]
 801e0e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801e0e4:	200a      	movs	r0, #10
 801e0e6:	f7f8 fbe5 	bl	80168b4 <memp_malloc>
 801e0ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801e0ec:	693b      	ldr	r3, [r7, #16]
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d109      	bne.n	801e106 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801e0f2:	693b      	ldr	r3, [r7, #16]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d151      	bne.n	801e19c <sys_timeout_abs+0xc4>
 801e0f8:	4b2a      	ldr	r3, [pc, #168]	; (801e1a4 <sys_timeout_abs+0xcc>)
 801e0fa:	22be      	movs	r2, #190	; 0xbe
 801e0fc:	492a      	ldr	r1, [pc, #168]	; (801e1a8 <sys_timeout_abs+0xd0>)
 801e0fe:	482b      	ldr	r0, [pc, #172]	; (801e1ac <sys_timeout_abs+0xd4>)
 801e100:	f005 fbb0 	bl	8023864 <iprintf>
    return;
 801e104:	e04a      	b.n	801e19c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801e106:	693b      	ldr	r3, [r7, #16]
 801e108:	2200      	movs	r2, #0
 801e10a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801e10c:	693b      	ldr	r3, [r7, #16]
 801e10e:	68ba      	ldr	r2, [r7, #8]
 801e110:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801e112:	693b      	ldr	r3, [r7, #16]
 801e114:	687a      	ldr	r2, [r7, #4]
 801e116:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801e118:	693b      	ldr	r3, [r7, #16]
 801e11a:	68fa      	ldr	r2, [r7, #12]
 801e11c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801e11e:	4b24      	ldr	r3, [pc, #144]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d103      	bne.n	801e12e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801e126:	4a22      	ldr	r2, [pc, #136]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e128:	693b      	ldr	r3, [r7, #16]
 801e12a:	6013      	str	r3, [r2, #0]
    return;
 801e12c:	e037      	b.n	801e19e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801e12e:	693b      	ldr	r3, [r7, #16]
 801e130:	685a      	ldr	r2, [r3, #4]
 801e132:	4b1f      	ldr	r3, [pc, #124]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	685b      	ldr	r3, [r3, #4]
 801e138:	1ad3      	subs	r3, r2, r3
 801e13a:	0fdb      	lsrs	r3, r3, #31
 801e13c:	f003 0301 	and.w	r3, r3, #1
 801e140:	b2db      	uxtb	r3, r3
 801e142:	2b00      	cmp	r3, #0
 801e144:	d007      	beq.n	801e156 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801e146:	4b1a      	ldr	r3, [pc, #104]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e148:	681a      	ldr	r2, [r3, #0]
 801e14a:	693b      	ldr	r3, [r7, #16]
 801e14c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801e14e:	4a18      	ldr	r2, [pc, #96]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e150:	693b      	ldr	r3, [r7, #16]
 801e152:	6013      	str	r3, [r2, #0]
 801e154:	e023      	b.n	801e19e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801e156:	4b16      	ldr	r3, [pc, #88]	; (801e1b0 <sys_timeout_abs+0xd8>)
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	617b      	str	r3, [r7, #20]
 801e15c:	e01a      	b.n	801e194 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801e15e:	697b      	ldr	r3, [r7, #20]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	2b00      	cmp	r3, #0
 801e164:	d00b      	beq.n	801e17e <sys_timeout_abs+0xa6>
 801e166:	693b      	ldr	r3, [r7, #16]
 801e168:	685a      	ldr	r2, [r3, #4]
 801e16a:	697b      	ldr	r3, [r7, #20]
 801e16c:	681b      	ldr	r3, [r3, #0]
 801e16e:	685b      	ldr	r3, [r3, #4]
 801e170:	1ad3      	subs	r3, r2, r3
 801e172:	0fdb      	lsrs	r3, r3, #31
 801e174:	f003 0301 	and.w	r3, r3, #1
 801e178:	b2db      	uxtb	r3, r3
 801e17a:	2b00      	cmp	r3, #0
 801e17c:	d007      	beq.n	801e18e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801e17e:	697b      	ldr	r3, [r7, #20]
 801e180:	681a      	ldr	r2, [r3, #0]
 801e182:	693b      	ldr	r3, [r7, #16]
 801e184:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801e186:	697b      	ldr	r3, [r7, #20]
 801e188:	693a      	ldr	r2, [r7, #16]
 801e18a:	601a      	str	r2, [r3, #0]
        break;
 801e18c:	e007      	b.n	801e19e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801e18e:	697b      	ldr	r3, [r7, #20]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	617b      	str	r3, [r7, #20]
 801e194:	697b      	ldr	r3, [r7, #20]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d1e1      	bne.n	801e15e <sys_timeout_abs+0x86>
 801e19a:	e000      	b.n	801e19e <sys_timeout_abs+0xc6>
    return;
 801e19c:	bf00      	nop
      }
    }
  }
}
 801e19e:	3718      	adds	r7, #24
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}
 801e1a4:	0802b3d4 	.word	0x0802b3d4
 801e1a8:	0802b408 	.word	0x0802b408
 801e1ac:	0802b448 	.word	0x0802b448
 801e1b0:	20016008 	.word	0x20016008

0801e1b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801e1b4:	b580      	push	{r7, lr}
 801e1b6:	b086      	sub	sp, #24
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801e1c0:	697b      	ldr	r3, [r7, #20]
 801e1c2:	685b      	ldr	r3, [r3, #4]
 801e1c4:	4798      	blx	r3

  now = sys_now();
 801e1c6:	f7eb f8bf 	bl	8009348 <sys_now>
 801e1ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801e1cc:	697b      	ldr	r3, [r7, #20]
 801e1ce:	681a      	ldr	r2, [r3, #0]
 801e1d0:	4b0f      	ldr	r3, [pc, #60]	; (801e210 <lwip_cyclic_timer+0x5c>)
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	4413      	add	r3, r2
 801e1d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801e1d8:	68fa      	ldr	r2, [r7, #12]
 801e1da:	693b      	ldr	r3, [r7, #16]
 801e1dc:	1ad3      	subs	r3, r2, r3
 801e1de:	0fdb      	lsrs	r3, r3, #31
 801e1e0:	f003 0301 	and.w	r3, r3, #1
 801e1e4:	b2db      	uxtb	r3, r3
 801e1e6:	2b00      	cmp	r3, #0
 801e1e8:	d009      	beq.n	801e1fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801e1ea:	697b      	ldr	r3, [r7, #20]
 801e1ec:	681a      	ldr	r2, [r3, #0]
 801e1ee:	693b      	ldr	r3, [r7, #16]
 801e1f0:	4413      	add	r3, r2
 801e1f2:	687a      	ldr	r2, [r7, #4]
 801e1f4:	4907      	ldr	r1, [pc, #28]	; (801e214 <lwip_cyclic_timer+0x60>)
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	f7ff ff6e 	bl	801e0d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801e1fc:	e004      	b.n	801e208 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801e1fe:	687a      	ldr	r2, [r7, #4]
 801e200:	4904      	ldr	r1, [pc, #16]	; (801e214 <lwip_cyclic_timer+0x60>)
 801e202:	68f8      	ldr	r0, [r7, #12]
 801e204:	f7ff ff68 	bl	801e0d8 <sys_timeout_abs>
}
 801e208:	bf00      	nop
 801e20a:	3718      	adds	r7, #24
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd80      	pop	{r7, pc}
 801e210:	2001600c 	.word	0x2001600c
 801e214:	0801e1b5 	.word	0x0801e1b5

0801e218 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801e218:	b580      	push	{r7, lr}
 801e21a:	b082      	sub	sp, #8
 801e21c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e21e:	2301      	movs	r3, #1
 801e220:	607b      	str	r3, [r7, #4]
 801e222:	e00e      	b.n	801e242 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801e224:	4a0b      	ldr	r2, [pc, #44]	; (801e254 <sys_timeouts_init+0x3c>)
 801e226:	687b      	ldr	r3, [r7, #4]
 801e228:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	00db      	lsls	r3, r3, #3
 801e230:	4a08      	ldr	r2, [pc, #32]	; (801e254 <sys_timeouts_init+0x3c>)
 801e232:	4413      	add	r3, r2
 801e234:	461a      	mov	r2, r3
 801e236:	4908      	ldr	r1, [pc, #32]	; (801e258 <sys_timeouts_init+0x40>)
 801e238:	f000 f810 	bl	801e25c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	3301      	adds	r3, #1
 801e240:	607b      	str	r3, [r7, #4]
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	2b03      	cmp	r3, #3
 801e246:	d9ed      	bls.n	801e224 <sys_timeouts_init+0xc>
  }
}
 801e248:	bf00      	nop
 801e24a:	bf00      	nop
 801e24c:	3708      	adds	r7, #8
 801e24e:	46bd      	mov	sp, r7
 801e250:	bd80      	pop	{r7, pc}
 801e252:	bf00      	nop
 801e254:	0802c1c4 	.word	0x0802c1c4
 801e258:	0801e1b5 	.word	0x0801e1b5

0801e25c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801e25c:	b580      	push	{r7, lr}
 801e25e:	b086      	sub	sp, #24
 801e260:	af00      	add	r7, sp, #0
 801e262:	60f8      	str	r0, [r7, #12]
 801e264:	60b9      	str	r1, [r7, #8]
 801e266:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801e268:	68fb      	ldr	r3, [r7, #12]
 801e26a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e26e:	d306      	bcc.n	801e27e <sys_timeout+0x22>
 801e270:	4b0a      	ldr	r3, [pc, #40]	; (801e29c <sys_timeout+0x40>)
 801e272:	f240 1229 	movw	r2, #297	; 0x129
 801e276:	490a      	ldr	r1, [pc, #40]	; (801e2a0 <sys_timeout+0x44>)
 801e278:	480a      	ldr	r0, [pc, #40]	; (801e2a4 <sys_timeout+0x48>)
 801e27a:	f005 faf3 	bl	8023864 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801e27e:	f7eb f863 	bl	8009348 <sys_now>
 801e282:	4602      	mov	r2, r0
 801e284:	68fb      	ldr	r3, [r7, #12]
 801e286:	4413      	add	r3, r2
 801e288:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801e28a:	687a      	ldr	r2, [r7, #4]
 801e28c:	68b9      	ldr	r1, [r7, #8]
 801e28e:	6978      	ldr	r0, [r7, #20]
 801e290:	f7ff ff22 	bl	801e0d8 <sys_timeout_abs>
#endif
}
 801e294:	bf00      	nop
 801e296:	3718      	adds	r7, #24
 801e298:	46bd      	mov	sp, r7
 801e29a:	bd80      	pop	{r7, pc}
 801e29c:	0802b3d4 	.word	0x0802b3d4
 801e2a0:	0802b470 	.word	0x0802b470
 801e2a4:	0802b448 	.word	0x0802b448

0801e2a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801e2a8:	b580      	push	{r7, lr}
 801e2aa:	b084      	sub	sp, #16
 801e2ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801e2ae:	f7eb f84b 	bl	8009348 <sys_now>
 801e2b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801e2b4:	4b17      	ldr	r3, [pc, #92]	; (801e314 <sys_check_timeouts+0x6c>)
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801e2ba:	68bb      	ldr	r3, [r7, #8]
 801e2bc:	2b00      	cmp	r3, #0
 801e2be:	d022      	beq.n	801e306 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801e2c0:	68bb      	ldr	r3, [r7, #8]
 801e2c2:	685b      	ldr	r3, [r3, #4]
 801e2c4:	68fa      	ldr	r2, [r7, #12]
 801e2c6:	1ad3      	subs	r3, r2, r3
 801e2c8:	0fdb      	lsrs	r3, r3, #31
 801e2ca:	f003 0301 	and.w	r3, r3, #1
 801e2ce:	b2db      	uxtb	r3, r3
 801e2d0:	2b00      	cmp	r3, #0
 801e2d2:	d11a      	bne.n	801e30a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801e2d4:	68bb      	ldr	r3, [r7, #8]
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	4a0e      	ldr	r2, [pc, #56]	; (801e314 <sys_check_timeouts+0x6c>)
 801e2da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801e2dc:	68bb      	ldr	r3, [r7, #8]
 801e2de:	689b      	ldr	r3, [r3, #8]
 801e2e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801e2e2:	68bb      	ldr	r3, [r7, #8]
 801e2e4:	68db      	ldr	r3, [r3, #12]
 801e2e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801e2e8:	68bb      	ldr	r3, [r7, #8]
 801e2ea:	685b      	ldr	r3, [r3, #4]
 801e2ec:	4a0a      	ldr	r2, [pc, #40]	; (801e318 <sys_check_timeouts+0x70>)
 801e2ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801e2f0:	68b9      	ldr	r1, [r7, #8]
 801e2f2:	200a      	movs	r0, #10
 801e2f4:	f7f8 fb54 	bl	80169a0 <memp_free>
    if (handler != NULL) {
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d0da      	beq.n	801e2b4 <sys_check_timeouts+0xc>
      handler(arg);
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	6838      	ldr	r0, [r7, #0]
 801e302:	4798      	blx	r3
  do {
 801e304:	e7d6      	b.n	801e2b4 <sys_check_timeouts+0xc>
      return;
 801e306:	bf00      	nop
 801e308:	e000      	b.n	801e30c <sys_check_timeouts+0x64>
      return;
 801e30a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801e30c:	3710      	adds	r7, #16
 801e30e:	46bd      	mov	sp, r7
 801e310:	bd80      	pop	{r7, pc}
 801e312:	bf00      	nop
 801e314:	20016008 	.word	0x20016008
 801e318:	2001600c 	.word	0x2001600c

0801e31c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801e31c:	b580      	push	{r7, lr}
 801e31e:	b082      	sub	sp, #8
 801e320:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801e322:	4b16      	ldr	r3, [pc, #88]	; (801e37c <sys_timeouts_sleeptime+0x60>)
 801e324:	681b      	ldr	r3, [r3, #0]
 801e326:	2b00      	cmp	r3, #0
 801e328:	d102      	bne.n	801e330 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801e32a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e32e:	e020      	b.n	801e372 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801e330:	f7eb f80a 	bl	8009348 <sys_now>
 801e334:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801e336:	4b11      	ldr	r3, [pc, #68]	; (801e37c <sys_timeouts_sleeptime+0x60>)
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	685a      	ldr	r2, [r3, #4]
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	1ad3      	subs	r3, r2, r3
 801e340:	0fdb      	lsrs	r3, r3, #31
 801e342:	f003 0301 	and.w	r3, r3, #1
 801e346:	b2db      	uxtb	r3, r3
 801e348:	2b00      	cmp	r3, #0
 801e34a:	d001      	beq.n	801e350 <sys_timeouts_sleeptime+0x34>
    return 0;
 801e34c:	2300      	movs	r3, #0
 801e34e:	e010      	b.n	801e372 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801e350:	4b0a      	ldr	r3, [pc, #40]	; (801e37c <sys_timeouts_sleeptime+0x60>)
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	685a      	ldr	r2, [r3, #4]
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	1ad3      	subs	r3, r2, r3
 801e35a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801e35c:	683b      	ldr	r3, [r7, #0]
 801e35e:	2b00      	cmp	r3, #0
 801e360:	da06      	bge.n	801e370 <sys_timeouts_sleeptime+0x54>
 801e362:	4b07      	ldr	r3, [pc, #28]	; (801e380 <sys_timeouts_sleeptime+0x64>)
 801e364:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801e368:	4906      	ldr	r1, [pc, #24]	; (801e384 <sys_timeouts_sleeptime+0x68>)
 801e36a:	4807      	ldr	r0, [pc, #28]	; (801e388 <sys_timeouts_sleeptime+0x6c>)
 801e36c:	f005 fa7a 	bl	8023864 <iprintf>
    return ret;
 801e370:	683b      	ldr	r3, [r7, #0]
  }
}
 801e372:	4618      	mov	r0, r3
 801e374:	3708      	adds	r7, #8
 801e376:	46bd      	mov	sp, r7
 801e378:	bd80      	pop	{r7, pc}
 801e37a:	bf00      	nop
 801e37c:	20016008 	.word	0x20016008
 801e380:	0802b3d4 	.word	0x0802b3d4
 801e384:	0802b4a8 	.word	0x0802b4a8
 801e388:	0802b448 	.word	0x0802b448

0801e38c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801e390:	f004 fc6c 	bl	8022c6c <rand>
 801e394:	4603      	mov	r3, r0
 801e396:	b29b      	uxth	r3, r3
 801e398:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801e39c:	b29b      	uxth	r3, r3
 801e39e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801e3a2:	b29a      	uxth	r2, r3
 801e3a4:	4b01      	ldr	r3, [pc, #4]	; (801e3ac <udp_init+0x20>)
 801e3a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801e3a8:	bf00      	nop
 801e3aa:	bd80      	pop	{r7, pc}
 801e3ac:	20000034 	.word	0x20000034

0801e3b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801e3b0:	b480      	push	{r7}
 801e3b2:	b083      	sub	sp, #12
 801e3b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801e3ba:	4b17      	ldr	r3, [pc, #92]	; (801e418 <udp_new_port+0x68>)
 801e3bc:	881b      	ldrh	r3, [r3, #0]
 801e3be:	1c5a      	adds	r2, r3, #1
 801e3c0:	b291      	uxth	r1, r2
 801e3c2:	4a15      	ldr	r2, [pc, #84]	; (801e418 <udp_new_port+0x68>)
 801e3c4:	8011      	strh	r1, [r2, #0]
 801e3c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e3ca:	4293      	cmp	r3, r2
 801e3cc:	d103      	bne.n	801e3d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801e3ce:	4b12      	ldr	r3, [pc, #72]	; (801e418 <udp_new_port+0x68>)
 801e3d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801e3d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e3d6:	4b11      	ldr	r3, [pc, #68]	; (801e41c <udp_new_port+0x6c>)
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	603b      	str	r3, [r7, #0]
 801e3dc:	e011      	b.n	801e402 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801e3de:	683b      	ldr	r3, [r7, #0]
 801e3e0:	8a5a      	ldrh	r2, [r3, #18]
 801e3e2:	4b0d      	ldr	r3, [pc, #52]	; (801e418 <udp_new_port+0x68>)
 801e3e4:	881b      	ldrh	r3, [r3, #0]
 801e3e6:	429a      	cmp	r2, r3
 801e3e8:	d108      	bne.n	801e3fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801e3ea:	88fb      	ldrh	r3, [r7, #6]
 801e3ec:	3301      	adds	r3, #1
 801e3ee:	80fb      	strh	r3, [r7, #6]
 801e3f0:	88fb      	ldrh	r3, [r7, #6]
 801e3f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801e3f6:	d3e0      	bcc.n	801e3ba <udp_new_port+0xa>
        return 0;
 801e3f8:	2300      	movs	r3, #0
 801e3fa:	e007      	b.n	801e40c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e3fc:	683b      	ldr	r3, [r7, #0]
 801e3fe:	68db      	ldr	r3, [r3, #12]
 801e400:	603b      	str	r3, [r7, #0]
 801e402:	683b      	ldr	r3, [r7, #0]
 801e404:	2b00      	cmp	r3, #0
 801e406:	d1ea      	bne.n	801e3de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801e408:	4b03      	ldr	r3, [pc, #12]	; (801e418 <udp_new_port+0x68>)
 801e40a:	881b      	ldrh	r3, [r3, #0]
}
 801e40c:	4618      	mov	r0, r3
 801e40e:	370c      	adds	r7, #12
 801e410:	46bd      	mov	sp, r7
 801e412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e416:	4770      	bx	lr
 801e418:	20000034 	.word	0x20000034
 801e41c:	20016014 	.word	0x20016014

0801e420 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801e420:	b580      	push	{r7, lr}
 801e422:	b084      	sub	sp, #16
 801e424:	af00      	add	r7, sp, #0
 801e426:	60f8      	str	r0, [r7, #12]
 801e428:	60b9      	str	r1, [r7, #8]
 801e42a:	4613      	mov	r3, r2
 801e42c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	2b00      	cmp	r3, #0
 801e432:	d105      	bne.n	801e440 <udp_input_local_match+0x20>
 801e434:	4b27      	ldr	r3, [pc, #156]	; (801e4d4 <udp_input_local_match+0xb4>)
 801e436:	2287      	movs	r2, #135	; 0x87
 801e438:	4927      	ldr	r1, [pc, #156]	; (801e4d8 <udp_input_local_match+0xb8>)
 801e43a:	4828      	ldr	r0, [pc, #160]	; (801e4dc <udp_input_local_match+0xbc>)
 801e43c:	f005 fa12 	bl	8023864 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d105      	bne.n	801e452 <udp_input_local_match+0x32>
 801e446:	4b23      	ldr	r3, [pc, #140]	; (801e4d4 <udp_input_local_match+0xb4>)
 801e448:	2288      	movs	r2, #136	; 0x88
 801e44a:	4925      	ldr	r1, [pc, #148]	; (801e4e0 <udp_input_local_match+0xc0>)
 801e44c:	4823      	ldr	r0, [pc, #140]	; (801e4dc <udp_input_local_match+0xbc>)
 801e44e:	f005 fa09 	bl	8023864 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e452:	68fb      	ldr	r3, [r7, #12]
 801e454:	7a1b      	ldrb	r3, [r3, #8]
 801e456:	2b00      	cmp	r3, #0
 801e458:	d00b      	beq.n	801e472 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	7a1a      	ldrb	r2, [r3, #8]
 801e45e:	4b21      	ldr	r3, [pc, #132]	; (801e4e4 <udp_input_local_match+0xc4>)
 801e460:	685b      	ldr	r3, [r3, #4]
 801e462:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801e466:	3301      	adds	r3, #1
 801e468:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801e46a:	429a      	cmp	r2, r3
 801e46c:	d001      	beq.n	801e472 <udp_input_local_match+0x52>
    return 0;
 801e46e:	2300      	movs	r3, #0
 801e470:	e02b      	b.n	801e4ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801e472:	79fb      	ldrb	r3, [r7, #7]
 801e474:	2b00      	cmp	r3, #0
 801e476:	d018      	beq.n	801e4aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d013      	beq.n	801e4a6 <udp_input_local_match+0x86>
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	2b00      	cmp	r3, #0
 801e484:	d00f      	beq.n	801e4a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801e486:	4b17      	ldr	r3, [pc, #92]	; (801e4e4 <udp_input_local_match+0xc4>)
 801e488:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e48a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e48e:	d00a      	beq.n	801e4a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801e490:	68fb      	ldr	r3, [r7, #12]
 801e492:	681a      	ldr	r2, [r3, #0]
 801e494:	4b13      	ldr	r3, [pc, #76]	; (801e4e4 <udp_input_local_match+0xc4>)
 801e496:	695b      	ldr	r3, [r3, #20]
 801e498:	405a      	eors	r2, r3
 801e49a:	68bb      	ldr	r3, [r7, #8]
 801e49c:	3308      	adds	r3, #8
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801e4a2:	2b00      	cmp	r3, #0
 801e4a4:	d110      	bne.n	801e4c8 <udp_input_local_match+0xa8>
          return 1;
 801e4a6:	2301      	movs	r3, #1
 801e4a8:	e00f      	b.n	801e4ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801e4aa:	68fb      	ldr	r3, [r7, #12]
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d009      	beq.n	801e4c4 <udp_input_local_match+0xa4>
 801e4b0:	68fb      	ldr	r3, [r7, #12]
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	d005      	beq.n	801e4c4 <udp_input_local_match+0xa4>
 801e4b8:	68fb      	ldr	r3, [r7, #12]
 801e4ba:	681a      	ldr	r2, [r3, #0]
 801e4bc:	4b09      	ldr	r3, [pc, #36]	; (801e4e4 <udp_input_local_match+0xc4>)
 801e4be:	695b      	ldr	r3, [r3, #20]
 801e4c0:	429a      	cmp	r2, r3
 801e4c2:	d101      	bne.n	801e4c8 <udp_input_local_match+0xa8>
        return 1;
 801e4c4:	2301      	movs	r3, #1
 801e4c6:	e000      	b.n	801e4ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801e4c8:	2300      	movs	r3, #0
}
 801e4ca:	4618      	mov	r0, r3
 801e4cc:	3710      	adds	r7, #16
 801e4ce:	46bd      	mov	sp, r7
 801e4d0:	bd80      	pop	{r7, pc}
 801e4d2:	bf00      	nop
 801e4d4:	0802b4bc 	.word	0x0802b4bc
 801e4d8:	0802b4ec 	.word	0x0802b4ec
 801e4dc:	0802b510 	.word	0x0802b510
 801e4e0:	0802b538 	.word	0x0802b538
 801e4e4:	2001243c 	.word	0x2001243c

0801e4e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801e4e8:	b590      	push	{r4, r7, lr}
 801e4ea:	b08d      	sub	sp, #52	; 0x34
 801e4ec:	af02      	add	r7, sp, #8
 801e4ee:	6078      	str	r0, [r7, #4]
 801e4f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d105      	bne.n	801e508 <udp_input+0x20>
 801e4fc:	4b82      	ldr	r3, [pc, #520]	; (801e708 <udp_input+0x220>)
 801e4fe:	22cf      	movs	r2, #207	; 0xcf
 801e500:	4982      	ldr	r1, [pc, #520]	; (801e70c <udp_input+0x224>)
 801e502:	4883      	ldr	r0, [pc, #524]	; (801e710 <udp_input+0x228>)
 801e504:	f005 f9ae 	bl	8023864 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801e508:	683b      	ldr	r3, [r7, #0]
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d105      	bne.n	801e51a <udp_input+0x32>
 801e50e:	4b7e      	ldr	r3, [pc, #504]	; (801e708 <udp_input+0x220>)
 801e510:	22d0      	movs	r2, #208	; 0xd0
 801e512:	4980      	ldr	r1, [pc, #512]	; (801e714 <udp_input+0x22c>)
 801e514:	487e      	ldr	r0, [pc, #504]	; (801e710 <udp_input+0x228>)
 801e516:	f005 f9a5 	bl	8023864 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	895b      	ldrh	r3, [r3, #10]
 801e51e:	2b07      	cmp	r3, #7
 801e520:	d803      	bhi.n	801e52a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801e522:	6878      	ldr	r0, [r7, #4]
 801e524:	f7f9 f8e0 	bl	80176e8 <pbuf_free>
    goto end;
 801e528:	e0ea      	b.n	801e700 <udp_input+0x218>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	685b      	ldr	r3, [r3, #4]
 801e52e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801e530:	4b79      	ldr	r3, [pc, #484]	; (801e718 <udp_input+0x230>)
 801e532:	695b      	ldr	r3, [r3, #20]
 801e534:	4a78      	ldr	r2, [pc, #480]	; (801e718 <udp_input+0x230>)
 801e536:	6812      	ldr	r2, [r2, #0]
 801e538:	4611      	mov	r1, r2
 801e53a:	4618      	mov	r0, r3
 801e53c:	f001 ff64 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801e540:	4603      	mov	r3, r0
 801e542:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801e544:	697b      	ldr	r3, [r7, #20]
 801e546:	881b      	ldrh	r3, [r3, #0]
 801e548:	b29b      	uxth	r3, r3
 801e54a:	4618      	mov	r0, r3
 801e54c:	f7f7 fa10 	bl	8015970 <lwip_htons>
 801e550:	4603      	mov	r3, r0
 801e552:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801e554:	697b      	ldr	r3, [r7, #20]
 801e556:	885b      	ldrh	r3, [r3, #2]
 801e558:	b29b      	uxth	r3, r3
 801e55a:	4618      	mov	r0, r3
 801e55c:	f7f7 fa08 	bl	8015970 <lwip_htons>
 801e560:	4603      	mov	r3, r0
 801e562:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801e564:	2300      	movs	r3, #0
 801e566:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801e568:	2300      	movs	r3, #0
 801e56a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801e56c:	2300      	movs	r3, #0
 801e56e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e570:	4b6a      	ldr	r3, [pc, #424]	; (801e71c <udp_input+0x234>)
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	627b      	str	r3, [r7, #36]	; 0x24
 801e576:	e060      	b.n	801e63a <udp_input+0x152>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e57a:	8a5b      	ldrh	r3, [r3, #18]
 801e57c:	89fa      	ldrh	r2, [r7, #14]
 801e57e:	429a      	cmp	r2, r3
 801e580:	d156      	bne.n	801e630 <udp_input+0x148>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801e582:	7cfb      	ldrb	r3, [r7, #19]
 801e584:	461a      	mov	r2, r3
 801e586:	6839      	ldr	r1, [r7, #0]
 801e588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e58a:	f7ff ff49 	bl	801e420 <udp_input_local_match>
 801e58e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801e590:	2b00      	cmp	r3, #0
 801e592:	d04d      	beq.n	801e630 <udp_input+0x148>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e596:	7c1b      	ldrb	r3, [r3, #16]
 801e598:	f003 0304 	and.w	r3, r3, #4
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	d129      	bne.n	801e5f4 <udp_input+0x10c>
        if (uncon_pcb == NULL) {
 801e5a0:	69fb      	ldr	r3, [r7, #28]
 801e5a2:	2b00      	cmp	r3, #0
 801e5a4:	d102      	bne.n	801e5ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5a8:	61fb      	str	r3, [r7, #28]
 801e5aa:	e023      	b.n	801e5f4 <udp_input+0x10c>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801e5ac:	7cfb      	ldrb	r3, [r7, #19]
 801e5ae:	2b00      	cmp	r3, #0
 801e5b0:	d015      	beq.n	801e5de <udp_input+0xf6>
 801e5b2:	4b59      	ldr	r3, [pc, #356]	; (801e718 <udp_input+0x230>)
 801e5b4:	695b      	ldr	r3, [r3, #20]
 801e5b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e5ba:	d110      	bne.n	801e5de <udp_input+0xf6>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801e5bc:	69fb      	ldr	r3, [r7, #28]
 801e5be:	681a      	ldr	r2, [r3, #0]
 801e5c0:	683b      	ldr	r3, [r7, #0]
 801e5c2:	3304      	adds	r3, #4
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	429a      	cmp	r2, r3
 801e5c8:	d013      	beq.n	801e5f2 <udp_input+0x10a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5cc:	681a      	ldr	r2, [r3, #0]
 801e5ce:	683b      	ldr	r3, [r7, #0]
 801e5d0:	3304      	adds	r3, #4
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	429a      	cmp	r2, r3
 801e5d6:	d10c      	bne.n	801e5f2 <udp_input+0x10a>
              /* better match */
              uncon_pcb = pcb;
 801e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5da:	61fb      	str	r3, [r7, #28]
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801e5dc:	e009      	b.n	801e5f2 <udp_input+0x10a>
            }
          }
#endif /* LWIP_IPV4 */
        }
#if SO_REUSE
        else if (!ip_addr_isany(&pcb->local_ip)) {
 801e5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5e0:	2b00      	cmp	r3, #0
 801e5e2:	d007      	beq.n	801e5f4 <udp_input+0x10c>
 801e5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d003      	beq.n	801e5f4 <udp_input+0x10c>
          /* prefer specific IPs over catch-all */
          uncon_pcb = pcb;
 801e5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5ee:	61fb      	str	r3, [r7, #28]
 801e5f0:	e000      	b.n	801e5f4 <udp_input+0x10c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801e5f2:	bf00      	nop
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5f6:	8a9b      	ldrh	r3, [r3, #20]
 801e5f8:	8a3a      	ldrh	r2, [r7, #16]
 801e5fa:	429a      	cmp	r2, r3
 801e5fc:	d118      	bne.n	801e630 <udp_input+0x148>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e600:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801e602:	2b00      	cmp	r3, #0
 801e604:	d005      	beq.n	801e612 <udp_input+0x12a>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e608:	685a      	ldr	r2, [r3, #4]
 801e60a:	4b43      	ldr	r3, [pc, #268]	; (801e718 <udp_input+0x230>)
 801e60c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e60e:	429a      	cmp	r2, r3
 801e610:	d10e      	bne.n	801e630 <udp_input+0x148>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801e612:	6a3b      	ldr	r3, [r7, #32]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d014      	beq.n	801e642 <udp_input+0x15a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e61a:	68da      	ldr	r2, [r3, #12]
 801e61c:	6a3b      	ldr	r3, [r7, #32]
 801e61e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801e620:	4b3e      	ldr	r3, [pc, #248]	; (801e71c <udp_input+0x234>)
 801e622:	681a      	ldr	r2, [r3, #0]
 801e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e626:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801e628:	4a3c      	ldr	r2, [pc, #240]	; (801e71c <udp_input+0x234>)
 801e62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e62c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801e62e:	e008      	b.n	801e642 <udp_input+0x15a>
      }
    }

    prev = pcb;
 801e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e632:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e636:	68db      	ldr	r3, [r3, #12]
 801e638:	627b      	str	r3, [r7, #36]	; 0x24
 801e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d19b      	bne.n	801e578 <udp_input+0x90>
 801e640:	e000      	b.n	801e644 <udp_input+0x15c>
        break;
 801e642:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e646:	2b00      	cmp	r3, #0
 801e648:	d101      	bne.n	801e64e <udp_input+0x166>
    pcb = uncon_pcb;
 801e64a:	69fb      	ldr	r3, [r7, #28]
 801e64c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801e64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e650:	2b00      	cmp	r3, #0
 801e652:	d002      	beq.n	801e65a <udp_input+0x172>
    for_us = 1;
 801e654:	2301      	movs	r3, #1
 801e656:	76fb      	strb	r3, [r7, #27]
 801e658:	e00a      	b.n	801e670 <udp_input+0x188>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801e65a:	683b      	ldr	r3, [r7, #0]
 801e65c:	3304      	adds	r3, #4
 801e65e:	681a      	ldr	r2, [r3, #0]
 801e660:	4b2d      	ldr	r3, [pc, #180]	; (801e718 <udp_input+0x230>)
 801e662:	695b      	ldr	r3, [r3, #20]
 801e664:	429a      	cmp	r2, r3
 801e666:	bf0c      	ite	eq
 801e668:	2301      	moveq	r3, #1
 801e66a:	2300      	movne	r3, #0
 801e66c:	b2db      	uxtb	r3, r3
 801e66e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801e670:	7efb      	ldrb	r3, [r7, #27]
 801e672:	2b00      	cmp	r3, #0
 801e674:	d041      	beq.n	801e6fa <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801e676:	2108      	movs	r1, #8
 801e678:	6878      	ldr	r0, [r7, #4]
 801e67a:	f7f8 ffaf 	bl	80175dc <pbuf_remove_header>
 801e67e:	4603      	mov	r3, r0
 801e680:	2b00      	cmp	r3, #0
 801e682:	d00a      	beq.n	801e69a <udp_input+0x1b2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801e684:	4b20      	ldr	r3, [pc, #128]	; (801e708 <udp_input+0x220>)
 801e686:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801e68a:	4925      	ldr	r1, [pc, #148]	; (801e720 <udp_input+0x238>)
 801e68c:	4820      	ldr	r0, [pc, #128]	; (801e710 <udp_input+0x228>)
 801e68e:	f005 f8e9 	bl	8023864 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f7f9 f828 	bl	80176e8 <pbuf_free>
      goto end;
 801e698:	e032      	b.n	801e700 <udp_input+0x218>
    }

    if (pcb != NULL) {
 801e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d012      	beq.n	801e6c6 <udp_input+0x1de>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6a2:	699b      	ldr	r3, [r3, #24]
 801e6a4:	2b00      	cmp	r3, #0
 801e6a6:	d00a      	beq.n	801e6be <udp_input+0x1d6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801e6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6aa:	699c      	ldr	r4, [r3, #24]
 801e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ae:	69d8      	ldr	r0, [r3, #28]
 801e6b0:	8a3b      	ldrh	r3, [r7, #16]
 801e6b2:	9300      	str	r3, [sp, #0]
 801e6b4:	4b1b      	ldr	r3, [pc, #108]	; (801e724 <udp_input+0x23c>)
 801e6b6:	687a      	ldr	r2, [r7, #4]
 801e6b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e6ba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801e6bc:	e021      	b.n	801e702 <udp_input+0x21a>
        pbuf_free(p);
 801e6be:	6878      	ldr	r0, [r7, #4]
 801e6c0:	f7f9 f812 	bl	80176e8 <pbuf_free>
        goto end;
 801e6c4:	e01c      	b.n	801e700 <udp_input+0x218>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801e6c6:	7cfb      	ldrb	r3, [r7, #19]
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d112      	bne.n	801e6f2 <udp_input+0x20a>
 801e6cc:	4b12      	ldr	r3, [pc, #72]	; (801e718 <udp_input+0x230>)
 801e6ce:	695b      	ldr	r3, [r3, #20]
 801e6d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e6d4:	2be0      	cmp	r3, #224	; 0xe0
 801e6d6:	d00c      	beq.n	801e6f2 <udp_input+0x20a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801e6d8:	4b0f      	ldr	r3, [pc, #60]	; (801e718 <udp_input+0x230>)
 801e6da:	899b      	ldrh	r3, [r3, #12]
 801e6dc:	3308      	adds	r3, #8
 801e6de:	b29b      	uxth	r3, r3
 801e6e0:	b21b      	sxth	r3, r3
 801e6e2:	4619      	mov	r1, r3
 801e6e4:	6878      	ldr	r0, [r7, #4]
 801e6e6:	f7f8 ffec 	bl	80176c2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801e6ea:	2103      	movs	r1, #3
 801e6ec:	6878      	ldr	r0, [r7, #4]
 801e6ee:	f001 fb6b 	bl	801fdc8 <icmp_dest_unreach>
      pbuf_free(p);
 801e6f2:	6878      	ldr	r0, [r7, #4]
 801e6f4:	f7f8 fff8 	bl	80176e8 <pbuf_free>
  return;
 801e6f8:	e003      	b.n	801e702 <udp_input+0x21a>
    pbuf_free(p);
 801e6fa:	6878      	ldr	r0, [r7, #4]
 801e6fc:	f7f8 fff4 	bl	80176e8 <pbuf_free>
  return;
 801e700:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801e702:	372c      	adds	r7, #44	; 0x2c
 801e704:	46bd      	mov	sp, r7
 801e706:	bd90      	pop	{r4, r7, pc}
 801e708:	0802b4bc 	.word	0x0802b4bc
 801e70c:	0802b560 	.word	0x0802b560
 801e710:	0802b510 	.word	0x0802b510
 801e714:	0802b578 	.word	0x0802b578
 801e718:	2001243c 	.word	0x2001243c
 801e71c:	20016014 	.word	0x20016014
 801e720:	0802b594 	.word	0x0802b594
 801e724:	2001244c 	.word	0x2001244c

0801e728 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801e728:	b580      	push	{r7, lr}
 801e72a:	b088      	sub	sp, #32
 801e72c:	af02      	add	r7, sp, #8
 801e72e:	60f8      	str	r0, [r7, #12]
 801e730:	60b9      	str	r1, [r7, #8]
 801e732:	607a      	str	r2, [r7, #4]
 801e734:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	2b00      	cmp	r3, #0
 801e73a:	d109      	bne.n	801e750 <udp_sendto+0x28>
 801e73c:	4b23      	ldr	r3, [pc, #140]	; (801e7cc <udp_sendto+0xa4>)
 801e73e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e742:	4923      	ldr	r1, [pc, #140]	; (801e7d0 <udp_sendto+0xa8>)
 801e744:	4823      	ldr	r0, [pc, #140]	; (801e7d4 <udp_sendto+0xac>)
 801e746:	f005 f88d 	bl	8023864 <iprintf>
 801e74a:	f06f 030f 	mvn.w	r3, #15
 801e74e:	e038      	b.n	801e7c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801e750:	68bb      	ldr	r3, [r7, #8]
 801e752:	2b00      	cmp	r3, #0
 801e754:	d109      	bne.n	801e76a <udp_sendto+0x42>
 801e756:	4b1d      	ldr	r3, [pc, #116]	; (801e7cc <udp_sendto+0xa4>)
 801e758:	f240 2219 	movw	r2, #537	; 0x219
 801e75c:	491e      	ldr	r1, [pc, #120]	; (801e7d8 <udp_sendto+0xb0>)
 801e75e:	481d      	ldr	r0, [pc, #116]	; (801e7d4 <udp_sendto+0xac>)
 801e760:	f005 f880 	bl	8023864 <iprintf>
 801e764:	f06f 030f 	mvn.w	r3, #15
 801e768:	e02b      	b.n	801e7c2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d109      	bne.n	801e784 <udp_sendto+0x5c>
 801e770:	4b16      	ldr	r3, [pc, #88]	; (801e7cc <udp_sendto+0xa4>)
 801e772:	f240 221a 	movw	r2, #538	; 0x21a
 801e776:	4919      	ldr	r1, [pc, #100]	; (801e7dc <udp_sendto+0xb4>)
 801e778:	4816      	ldr	r0, [pc, #88]	; (801e7d4 <udp_sendto+0xac>)
 801e77a:	f005 f873 	bl	8023864 <iprintf>
 801e77e:	f06f 030f 	mvn.w	r3, #15
 801e782:	e01e      	b.n	801e7c2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801e784:	68fb      	ldr	r3, [r7, #12]
 801e786:	7a1b      	ldrb	r3, [r3, #8]
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d006      	beq.n	801e79a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	7a1b      	ldrb	r3, [r3, #8]
 801e790:	4618      	mov	r0, r3
 801e792:	f7f8 fc1b 	bl	8016fcc <netif_get_by_index>
 801e796:	6178      	str	r0, [r7, #20]
 801e798:	e003      	b.n	801e7a2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801e79a:	6878      	ldr	r0, [r7, #4]
 801e79c:	f001 fb9e 	bl	801fedc <ip4_route>
 801e7a0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801e7a2:	697b      	ldr	r3, [r7, #20]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d102      	bne.n	801e7ae <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801e7a8:	f06f 0303 	mvn.w	r3, #3
 801e7ac:	e009      	b.n	801e7c2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801e7ae:	887a      	ldrh	r2, [r7, #2]
 801e7b0:	697b      	ldr	r3, [r7, #20]
 801e7b2:	9300      	str	r3, [sp, #0]
 801e7b4:	4613      	mov	r3, r2
 801e7b6:	687a      	ldr	r2, [r7, #4]
 801e7b8:	68b9      	ldr	r1, [r7, #8]
 801e7ba:	68f8      	ldr	r0, [r7, #12]
 801e7bc:	f000 f810 	bl	801e7e0 <udp_sendto_if>
 801e7c0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	3718      	adds	r7, #24
 801e7c6:	46bd      	mov	sp, r7
 801e7c8:	bd80      	pop	{r7, pc}
 801e7ca:	bf00      	nop
 801e7cc:	0802b4bc 	.word	0x0802b4bc
 801e7d0:	0802b5e0 	.word	0x0802b5e0
 801e7d4:	0802b510 	.word	0x0802b510
 801e7d8:	0802b5f8 	.word	0x0802b5f8
 801e7dc:	0802b614 	.word	0x0802b614

0801e7e0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801e7e0:	b580      	push	{r7, lr}
 801e7e2:	b088      	sub	sp, #32
 801e7e4:	af02      	add	r7, sp, #8
 801e7e6:	60f8      	str	r0, [r7, #12]
 801e7e8:	60b9      	str	r1, [r7, #8]
 801e7ea:	607a      	str	r2, [r7, #4]
 801e7ec:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801e7ee:	68fb      	ldr	r3, [r7, #12]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d109      	bne.n	801e808 <udp_sendto_if+0x28>
 801e7f4:	4b2e      	ldr	r3, [pc, #184]	; (801e8b0 <udp_sendto_if+0xd0>)
 801e7f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e7fa:	492e      	ldr	r1, [pc, #184]	; (801e8b4 <udp_sendto_if+0xd4>)
 801e7fc:	482e      	ldr	r0, [pc, #184]	; (801e8b8 <udp_sendto_if+0xd8>)
 801e7fe:	f005 f831 	bl	8023864 <iprintf>
 801e802:	f06f 030f 	mvn.w	r3, #15
 801e806:	e04f      	b.n	801e8a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801e808:	68bb      	ldr	r3, [r7, #8]
 801e80a:	2b00      	cmp	r3, #0
 801e80c:	d109      	bne.n	801e822 <udp_sendto_if+0x42>
 801e80e:	4b28      	ldr	r3, [pc, #160]	; (801e8b0 <udp_sendto_if+0xd0>)
 801e810:	f240 2281 	movw	r2, #641	; 0x281
 801e814:	4929      	ldr	r1, [pc, #164]	; (801e8bc <udp_sendto_if+0xdc>)
 801e816:	4828      	ldr	r0, [pc, #160]	; (801e8b8 <udp_sendto_if+0xd8>)
 801e818:	f005 f824 	bl	8023864 <iprintf>
 801e81c:	f06f 030f 	mvn.w	r3, #15
 801e820:	e042      	b.n	801e8a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	2b00      	cmp	r3, #0
 801e826:	d109      	bne.n	801e83c <udp_sendto_if+0x5c>
 801e828:	4b21      	ldr	r3, [pc, #132]	; (801e8b0 <udp_sendto_if+0xd0>)
 801e82a:	f240 2282 	movw	r2, #642	; 0x282
 801e82e:	4924      	ldr	r1, [pc, #144]	; (801e8c0 <udp_sendto_if+0xe0>)
 801e830:	4821      	ldr	r0, [pc, #132]	; (801e8b8 <udp_sendto_if+0xd8>)
 801e832:	f005 f817 	bl	8023864 <iprintf>
 801e836:	f06f 030f 	mvn.w	r3, #15
 801e83a:	e035      	b.n	801e8a8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801e83c:	6a3b      	ldr	r3, [r7, #32]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d109      	bne.n	801e856 <udp_sendto_if+0x76>
 801e842:	4b1b      	ldr	r3, [pc, #108]	; (801e8b0 <udp_sendto_if+0xd0>)
 801e844:	f240 2283 	movw	r2, #643	; 0x283
 801e848:	491e      	ldr	r1, [pc, #120]	; (801e8c4 <udp_sendto_if+0xe4>)
 801e84a:	481b      	ldr	r0, [pc, #108]	; (801e8b8 <udp_sendto_if+0xd8>)
 801e84c:	f005 f80a 	bl	8023864 <iprintf>
 801e850:	f06f 030f 	mvn.w	r3, #15
 801e854:	e028      	b.n	801e8a8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e856:	68fb      	ldr	r3, [r7, #12]
 801e858:	2b00      	cmp	r3, #0
 801e85a:	d009      	beq.n	801e870 <udp_sendto_if+0x90>
 801e85c:	68fb      	ldr	r3, [r7, #12]
 801e85e:	681b      	ldr	r3, [r3, #0]
 801e860:	2b00      	cmp	r3, #0
 801e862:	d005      	beq.n	801e870 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e86c:	2be0      	cmp	r3, #224	; 0xe0
 801e86e:	d103      	bne.n	801e878 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801e870:	6a3b      	ldr	r3, [r7, #32]
 801e872:	3304      	adds	r3, #4
 801e874:	617b      	str	r3, [r7, #20]
 801e876:	e00b      	b.n	801e890 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	681a      	ldr	r2, [r3, #0]
 801e87c:	6a3b      	ldr	r3, [r7, #32]
 801e87e:	3304      	adds	r3, #4
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	429a      	cmp	r2, r3
 801e884:	d002      	beq.n	801e88c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801e886:	f06f 0303 	mvn.w	r3, #3
 801e88a:	e00d      	b.n	801e8a8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801e890:	887a      	ldrh	r2, [r7, #2]
 801e892:	697b      	ldr	r3, [r7, #20]
 801e894:	9301      	str	r3, [sp, #4]
 801e896:	6a3b      	ldr	r3, [r7, #32]
 801e898:	9300      	str	r3, [sp, #0]
 801e89a:	4613      	mov	r3, r2
 801e89c:	687a      	ldr	r2, [r7, #4]
 801e89e:	68b9      	ldr	r1, [r7, #8]
 801e8a0:	68f8      	ldr	r0, [r7, #12]
 801e8a2:	f000 f811 	bl	801e8c8 <udp_sendto_if_src>
 801e8a6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801e8a8:	4618      	mov	r0, r3
 801e8aa:	3718      	adds	r7, #24
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	0802b4bc 	.word	0x0802b4bc
 801e8b4:	0802b630 	.word	0x0802b630
 801e8b8:	0802b510 	.word	0x0802b510
 801e8bc:	0802b64c 	.word	0x0802b64c
 801e8c0:	0802b668 	.word	0x0802b668
 801e8c4:	0802b688 	.word	0x0802b688

0801e8c8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801e8c8:	b580      	push	{r7, lr}
 801e8ca:	b08c      	sub	sp, #48	; 0x30
 801e8cc:	af04      	add	r7, sp, #16
 801e8ce:	60f8      	str	r0, [r7, #12]
 801e8d0:	60b9      	str	r1, [r7, #8]
 801e8d2:	607a      	str	r2, [r7, #4]
 801e8d4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801e8d6:	68fb      	ldr	r3, [r7, #12]
 801e8d8:	2b00      	cmp	r3, #0
 801e8da:	d109      	bne.n	801e8f0 <udp_sendto_if_src+0x28>
 801e8dc:	4b65      	ldr	r3, [pc, #404]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e8de:	f240 22d1 	movw	r2, #721	; 0x2d1
 801e8e2:	4965      	ldr	r1, [pc, #404]	; (801ea78 <udp_sendto_if_src+0x1b0>)
 801e8e4:	4865      	ldr	r0, [pc, #404]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e8e6:	f004 ffbd 	bl	8023864 <iprintf>
 801e8ea:	f06f 030f 	mvn.w	r3, #15
 801e8ee:	e0bc      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801e8f0:	68bb      	ldr	r3, [r7, #8]
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	d109      	bne.n	801e90a <udp_sendto_if_src+0x42>
 801e8f6:	4b5f      	ldr	r3, [pc, #380]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e8f8:	f240 22d2 	movw	r2, #722	; 0x2d2
 801e8fc:	4960      	ldr	r1, [pc, #384]	; (801ea80 <udp_sendto_if_src+0x1b8>)
 801e8fe:	485f      	ldr	r0, [pc, #380]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e900:	f004 ffb0 	bl	8023864 <iprintf>
 801e904:	f06f 030f 	mvn.w	r3, #15
 801e908:	e0af      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d109      	bne.n	801e924 <udp_sendto_if_src+0x5c>
 801e910:	4b58      	ldr	r3, [pc, #352]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e912:	f240 22d3 	movw	r2, #723	; 0x2d3
 801e916:	495b      	ldr	r1, [pc, #364]	; (801ea84 <udp_sendto_if_src+0x1bc>)
 801e918:	4858      	ldr	r0, [pc, #352]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e91a:	f004 ffa3 	bl	8023864 <iprintf>
 801e91e:	f06f 030f 	mvn.w	r3, #15
 801e922:	e0a2      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801e924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e926:	2b00      	cmp	r3, #0
 801e928:	d109      	bne.n	801e93e <udp_sendto_if_src+0x76>
 801e92a:	4b52      	ldr	r3, [pc, #328]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e92c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801e930:	4955      	ldr	r1, [pc, #340]	; (801ea88 <udp_sendto_if_src+0x1c0>)
 801e932:	4852      	ldr	r0, [pc, #328]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e934:	f004 ff96 	bl	8023864 <iprintf>
 801e938:	f06f 030f 	mvn.w	r3, #15
 801e93c:	e095      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801e93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e940:	2b00      	cmp	r3, #0
 801e942:	d109      	bne.n	801e958 <udp_sendto_if_src+0x90>
 801e944:	4b4b      	ldr	r3, [pc, #300]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e946:	f240 22d5 	movw	r2, #725	; 0x2d5
 801e94a:	4950      	ldr	r1, [pc, #320]	; (801ea8c <udp_sendto_if_src+0x1c4>)
 801e94c:	484b      	ldr	r0, [pc, #300]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e94e:	f004 ff89 	bl	8023864 <iprintf>
 801e952:	f06f 030f 	mvn.w	r3, #15
 801e956:	e088      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	8a5b      	ldrh	r3, [r3, #18]
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d10f      	bne.n	801e980 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e960:	68f9      	ldr	r1, [r7, #12]
 801e962:	68fb      	ldr	r3, [r7, #12]
 801e964:	8a5b      	ldrh	r3, [r3, #18]
 801e966:	461a      	mov	r2, r3
 801e968:	68f8      	ldr	r0, [r7, #12]
 801e96a:	f000 f893 	bl	801ea94 <udp_bind>
 801e96e:	4603      	mov	r3, r0
 801e970:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801e972:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e976:	2b00      	cmp	r3, #0
 801e978:	d002      	beq.n	801e980 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801e97a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e97e:	e074      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801e980:	68bb      	ldr	r3, [r7, #8]
 801e982:	891b      	ldrh	r3, [r3, #8]
 801e984:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801e988:	4293      	cmp	r3, r2
 801e98a:	d902      	bls.n	801e992 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801e98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e990:	e06b      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801e992:	2108      	movs	r1, #8
 801e994:	68b8      	ldr	r0, [r7, #8]
 801e996:	f7f8 fe11 	bl	80175bc <pbuf_add_header>
 801e99a:	4603      	mov	r3, r0
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d015      	beq.n	801e9cc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801e9a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e9a4:	2108      	movs	r1, #8
 801e9a6:	2022      	movs	r0, #34	; 0x22
 801e9a8:	f7f8 fbba 	bl	8017120 <pbuf_alloc>
 801e9ac:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801e9ae:	69fb      	ldr	r3, [r7, #28]
 801e9b0:	2b00      	cmp	r3, #0
 801e9b2:	d102      	bne.n	801e9ba <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801e9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e9b8:	e057      	b.n	801ea6a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801e9ba:	68bb      	ldr	r3, [r7, #8]
 801e9bc:	891b      	ldrh	r3, [r3, #8]
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d006      	beq.n	801e9d0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801e9c2:	68b9      	ldr	r1, [r7, #8]
 801e9c4:	69f8      	ldr	r0, [r7, #28]
 801e9c6:	f7f8 ffb3 	bl	8017930 <pbuf_chain>
 801e9ca:	e001      	b.n	801e9d0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801e9cc:	68bb      	ldr	r3, [r7, #8]
 801e9ce:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801e9d0:	69fb      	ldr	r3, [r7, #28]
 801e9d2:	895b      	ldrh	r3, [r3, #10]
 801e9d4:	2b07      	cmp	r3, #7
 801e9d6:	d806      	bhi.n	801e9e6 <udp_sendto_if_src+0x11e>
 801e9d8:	4b26      	ldr	r3, [pc, #152]	; (801ea74 <udp_sendto_if_src+0x1ac>)
 801e9da:	f240 320d 	movw	r2, #781	; 0x30d
 801e9de:	492c      	ldr	r1, [pc, #176]	; (801ea90 <udp_sendto_if_src+0x1c8>)
 801e9e0:	4826      	ldr	r0, [pc, #152]	; (801ea7c <udp_sendto_if_src+0x1b4>)
 801e9e2:	f004 ff3f 	bl	8023864 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801e9e6:	69fb      	ldr	r3, [r7, #28]
 801e9e8:	685b      	ldr	r3, [r3, #4]
 801e9ea:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	8a5b      	ldrh	r3, [r3, #18]
 801e9f0:	4618      	mov	r0, r3
 801e9f2:	f7f6 ffbd 	bl	8015970 <lwip_htons>
 801e9f6:	4603      	mov	r3, r0
 801e9f8:	461a      	mov	r2, r3
 801e9fa:	697b      	ldr	r3, [r7, #20]
 801e9fc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801e9fe:	887b      	ldrh	r3, [r7, #2]
 801ea00:	4618      	mov	r0, r3
 801ea02:	f7f6 ffb5 	bl	8015970 <lwip_htons>
 801ea06:	4603      	mov	r3, r0
 801ea08:	461a      	mov	r2, r3
 801ea0a:	697b      	ldr	r3, [r7, #20]
 801ea0c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801ea0e:	697b      	ldr	r3, [r7, #20]
 801ea10:	2200      	movs	r2, #0
 801ea12:	719a      	strb	r2, [r3, #6]
 801ea14:	2200      	movs	r2, #0
 801ea16:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801ea18:	69fb      	ldr	r3, [r7, #28]
 801ea1a:	891b      	ldrh	r3, [r3, #8]
 801ea1c:	4618      	mov	r0, r3
 801ea1e:	f7f6 ffa7 	bl	8015970 <lwip_htons>
 801ea22:	4603      	mov	r3, r0
 801ea24:	461a      	mov	r2, r3
 801ea26:	697b      	ldr	r3, [r7, #20]
 801ea28:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801ea2a:	2311      	movs	r3, #17
 801ea2c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801ea2e:	68fb      	ldr	r3, [r7, #12]
 801ea30:	7adb      	ldrb	r3, [r3, #11]
 801ea32:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801ea34:	68fb      	ldr	r3, [r7, #12]
 801ea36:	7a9b      	ldrb	r3, [r3, #10]
 801ea38:	7cb9      	ldrb	r1, [r7, #18]
 801ea3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ea3c:	9202      	str	r2, [sp, #8]
 801ea3e:	7cfa      	ldrb	r2, [r7, #19]
 801ea40:	9201      	str	r2, [sp, #4]
 801ea42:	9300      	str	r3, [sp, #0]
 801ea44:	460b      	mov	r3, r1
 801ea46:	687a      	ldr	r2, [r7, #4]
 801ea48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ea4a:	69f8      	ldr	r0, [r7, #28]
 801ea4c:	f001 fc2e 	bl	80202ac <ip4_output_if_src>
 801ea50:	4603      	mov	r3, r0
 801ea52:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801ea54:	69fa      	ldr	r2, [r7, #28]
 801ea56:	68bb      	ldr	r3, [r7, #8]
 801ea58:	429a      	cmp	r2, r3
 801ea5a:	d004      	beq.n	801ea66 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ea5c:	69f8      	ldr	r0, [r7, #28]
 801ea5e:	f7f8 fe43 	bl	80176e8 <pbuf_free>
    q = NULL;
 801ea62:	2300      	movs	r3, #0
 801ea64:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801ea66:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801ea6a:	4618      	mov	r0, r3
 801ea6c:	3720      	adds	r7, #32
 801ea6e:	46bd      	mov	sp, r7
 801ea70:	bd80      	pop	{r7, pc}
 801ea72:	bf00      	nop
 801ea74:	0802b4bc 	.word	0x0802b4bc
 801ea78:	0802b6a8 	.word	0x0802b6a8
 801ea7c:	0802b510 	.word	0x0802b510
 801ea80:	0802b6c8 	.word	0x0802b6c8
 801ea84:	0802b6e8 	.word	0x0802b6e8
 801ea88:	0802b70c 	.word	0x0802b70c
 801ea8c:	0802b730 	.word	0x0802b730
 801ea90:	0802b754 	.word	0x0802b754

0801ea94 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ea94:	b580      	push	{r7, lr}
 801ea96:	b086      	sub	sp, #24
 801ea98:	af00      	add	r7, sp, #0
 801ea9a:	60f8      	str	r0, [r7, #12]
 801ea9c:	60b9      	str	r1, [r7, #8]
 801ea9e:	4613      	mov	r3, r2
 801eaa0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801eaa2:	68bb      	ldr	r3, [r7, #8]
 801eaa4:	2b00      	cmp	r3, #0
 801eaa6:	d101      	bne.n	801eaac <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801eaa8:	4b3f      	ldr	r3, [pc, #252]	; (801eba8 <udp_bind+0x114>)
 801eaaa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801eaac:	68fb      	ldr	r3, [r7, #12]
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d109      	bne.n	801eac6 <udp_bind+0x32>
 801eab2:	4b3e      	ldr	r3, [pc, #248]	; (801ebac <udp_bind+0x118>)
 801eab4:	f240 32b7 	movw	r2, #951	; 0x3b7
 801eab8:	493d      	ldr	r1, [pc, #244]	; (801ebb0 <udp_bind+0x11c>)
 801eaba:	483e      	ldr	r0, [pc, #248]	; (801ebb4 <udp_bind+0x120>)
 801eabc:	f004 fed2 	bl	8023864 <iprintf>
 801eac0:	f06f 030f 	mvn.w	r3, #15
 801eac4:	e06c      	b.n	801eba0 <udp_bind+0x10c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801eac6:	2300      	movs	r3, #0
 801eac8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eaca:	4b3b      	ldr	r3, [pc, #236]	; (801ebb8 <udp_bind+0x124>)
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	617b      	str	r3, [r7, #20]
 801ead0:	e009      	b.n	801eae6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ead2:	68fa      	ldr	r2, [r7, #12]
 801ead4:	697b      	ldr	r3, [r7, #20]
 801ead6:	429a      	cmp	r2, r3
 801ead8:	d102      	bne.n	801eae0 <udp_bind+0x4c>
      rebind = 1;
 801eada:	2301      	movs	r3, #1
 801eadc:	74fb      	strb	r3, [r7, #19]
      break;
 801eade:	e005      	b.n	801eaec <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eae0:	697b      	ldr	r3, [r7, #20]
 801eae2:	68db      	ldr	r3, [r3, #12]
 801eae4:	617b      	str	r3, [r7, #20]
 801eae6:	697b      	ldr	r3, [r7, #20]
 801eae8:	2b00      	cmp	r3, #0
 801eaea:	d1f2      	bne.n	801ead2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801eaec:	88fb      	ldrh	r3, [r7, #6]
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d109      	bne.n	801eb06 <udp_bind+0x72>
    port = udp_new_port();
 801eaf2:	f7ff fc5d 	bl	801e3b0 <udp_new_port>
 801eaf6:	4603      	mov	r3, r0
 801eaf8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801eafa:	88fb      	ldrh	r3, [r7, #6]
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d138      	bne.n	801eb72 <udp_bind+0xde>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801eb00:	f06f 0307 	mvn.w	r3, #7
 801eb04:	e04c      	b.n	801eba0 <udp_bind+0x10c>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eb06:	4b2c      	ldr	r3, [pc, #176]	; (801ebb8 <udp_bind+0x124>)
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	617b      	str	r3, [r7, #20]
 801eb0c:	e02e      	b.n	801eb6c <udp_bind+0xd8>
      if (pcb != ipcb) {
 801eb0e:	68fa      	ldr	r2, [r7, #12]
 801eb10:	697b      	ldr	r3, [r7, #20]
 801eb12:	429a      	cmp	r2, r3
 801eb14:	d027      	beq.n	801eb66 <udp_bind+0xd2>
        /* By default, we don't allow to bind to a port that any other udp
           PCB is already bound to, unless *all* PCBs with that port have tha
           REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	7a5b      	ldrb	r3, [r3, #9]
 801eb1a:	f003 0304 	and.w	r3, r3, #4
 801eb1e:	2b00      	cmp	r3, #0
 801eb20:	d005      	beq.n	801eb2e <udp_bind+0x9a>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801eb22:	697b      	ldr	r3, [r7, #20]
 801eb24:	7a5b      	ldrb	r3, [r3, #9]
 801eb26:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d11b      	bne.n	801eb66 <udp_bind+0xd2>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801eb2e:	697b      	ldr	r3, [r7, #20]
 801eb30:	8a5b      	ldrh	r3, [r3, #18]
 801eb32:	88fa      	ldrh	r2, [r7, #6]
 801eb34:	429a      	cmp	r2, r3
 801eb36:	d116      	bne.n	801eb66 <udp_bind+0xd2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801eb38:	697b      	ldr	r3, [r7, #20]
 801eb3a:	681a      	ldr	r2, [r3, #0]
 801eb3c:	68bb      	ldr	r3, [r7, #8]
 801eb3e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801eb40:	429a      	cmp	r2, r3
 801eb42:	d00d      	beq.n	801eb60 <udp_bind+0xcc>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801eb44:	68bb      	ldr	r3, [r7, #8]
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	d00a      	beq.n	801eb60 <udp_bind+0xcc>
 801eb4a:	68bb      	ldr	r3, [r7, #8]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d006      	beq.n	801eb60 <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801eb52:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d003      	beq.n	801eb60 <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801eb58:	697b      	ldr	r3, [r7, #20]
 801eb5a:	681b      	ldr	r3, [r3, #0]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d102      	bne.n	801eb66 <udp_bind+0xd2>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801eb60:	f06f 0307 	mvn.w	r3, #7
 801eb64:	e01c      	b.n	801eba0 <udp_bind+0x10c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801eb66:	697b      	ldr	r3, [r7, #20]
 801eb68:	68db      	ldr	r3, [r3, #12]
 801eb6a:	617b      	str	r3, [r7, #20]
 801eb6c:	697b      	ldr	r3, [r7, #20]
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d1cd      	bne.n	801eb0e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801eb72:	68bb      	ldr	r3, [r7, #8]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d002      	beq.n	801eb7e <udp_bind+0xea>
 801eb78:	68bb      	ldr	r3, [r7, #8]
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	e000      	b.n	801eb80 <udp_bind+0xec>
 801eb7e:	2300      	movs	r3, #0
 801eb80:	68fa      	ldr	r2, [r7, #12]
 801eb82:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	88fa      	ldrh	r2, [r7, #6]
 801eb88:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801eb8a:	7cfb      	ldrb	r3, [r7, #19]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d106      	bne.n	801eb9e <udp_bind+0x10a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801eb90:	4b09      	ldr	r3, [pc, #36]	; (801ebb8 <udp_bind+0x124>)
 801eb92:	681a      	ldr	r2, [r3, #0]
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801eb98:	4a07      	ldr	r2, [pc, #28]	; (801ebb8 <udp_bind+0x124>)
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801eb9e:	2300      	movs	r3, #0
}
 801eba0:	4618      	mov	r0, r3
 801eba2:	3718      	adds	r7, #24
 801eba4:	46bd      	mov	sp, r7
 801eba6:	bd80      	pop	{r7, pc}
 801eba8:	0802c1e4 	.word	0x0802c1e4
 801ebac:	0802b4bc 	.word	0x0802b4bc
 801ebb0:	0802b784 	.word	0x0802b784
 801ebb4:	0802b510 	.word	0x0802b510
 801ebb8:	20016014 	.word	0x20016014

0801ebbc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801ebbc:	b580      	push	{r7, lr}
 801ebbe:	b084      	sub	sp, #16
 801ebc0:	af00      	add	r7, sp, #0
 801ebc2:	60f8      	str	r0, [r7, #12]
 801ebc4:	60b9      	str	r1, [r7, #8]
 801ebc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801ebc8:	68fb      	ldr	r3, [r7, #12]
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d107      	bne.n	801ebde <udp_recv+0x22>
 801ebce:	4b08      	ldr	r3, [pc, #32]	; (801ebf0 <udp_recv+0x34>)
 801ebd0:	f240 428a 	movw	r2, #1162	; 0x48a
 801ebd4:	4907      	ldr	r1, [pc, #28]	; (801ebf4 <udp_recv+0x38>)
 801ebd6:	4808      	ldr	r0, [pc, #32]	; (801ebf8 <udp_recv+0x3c>)
 801ebd8:	f004 fe44 	bl	8023864 <iprintf>
 801ebdc:	e005      	b.n	801ebea <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	68ba      	ldr	r2, [r7, #8]
 801ebe2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801ebe4:	68fb      	ldr	r3, [r7, #12]
 801ebe6:	687a      	ldr	r2, [r7, #4]
 801ebe8:	61da      	str	r2, [r3, #28]
}
 801ebea:	3710      	adds	r7, #16
 801ebec:	46bd      	mov	sp, r7
 801ebee:	bd80      	pop	{r7, pc}
 801ebf0:	0802b4bc 	.word	0x0802b4bc
 801ebf4:	0802b7f0 	.word	0x0802b7f0
 801ebf8:	0802b510 	.word	0x0802b510

0801ebfc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ebfc:	b580      	push	{r7, lr}
 801ebfe:	b084      	sub	sp, #16
 801ec00:	af00      	add	r7, sp, #0
 801ec02:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d107      	bne.n	801ec1a <udp_remove+0x1e>
 801ec0a:	4b19      	ldr	r3, [pc, #100]	; (801ec70 <udp_remove+0x74>)
 801ec0c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ec10:	4918      	ldr	r1, [pc, #96]	; (801ec74 <udp_remove+0x78>)
 801ec12:	4819      	ldr	r0, [pc, #100]	; (801ec78 <udp_remove+0x7c>)
 801ec14:	f004 fe26 	bl	8023864 <iprintf>
 801ec18:	e026      	b.n	801ec68 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ec1a:	4b18      	ldr	r3, [pc, #96]	; (801ec7c <udp_remove+0x80>)
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	687a      	ldr	r2, [r7, #4]
 801ec20:	429a      	cmp	r2, r3
 801ec22:	d105      	bne.n	801ec30 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ec24:	4b15      	ldr	r3, [pc, #84]	; (801ec7c <udp_remove+0x80>)
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	68db      	ldr	r3, [r3, #12]
 801ec2a:	4a14      	ldr	r2, [pc, #80]	; (801ec7c <udp_remove+0x80>)
 801ec2c:	6013      	str	r3, [r2, #0]
 801ec2e:	e017      	b.n	801ec60 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ec30:	4b12      	ldr	r3, [pc, #72]	; (801ec7c <udp_remove+0x80>)
 801ec32:	681b      	ldr	r3, [r3, #0]
 801ec34:	60fb      	str	r3, [r7, #12]
 801ec36:	e010      	b.n	801ec5a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ec38:	68fb      	ldr	r3, [r7, #12]
 801ec3a:	68db      	ldr	r3, [r3, #12]
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d009      	beq.n	801ec54 <udp_remove+0x58>
 801ec40:	68fb      	ldr	r3, [r7, #12]
 801ec42:	68db      	ldr	r3, [r3, #12]
 801ec44:	687a      	ldr	r2, [r7, #4]
 801ec46:	429a      	cmp	r2, r3
 801ec48:	d104      	bne.n	801ec54 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ec4a:	687b      	ldr	r3, [r7, #4]
 801ec4c:	68da      	ldr	r2, [r3, #12]
 801ec4e:	68fb      	ldr	r3, [r7, #12]
 801ec50:	60da      	str	r2, [r3, #12]
        break;
 801ec52:	e005      	b.n	801ec60 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ec54:	68fb      	ldr	r3, [r7, #12]
 801ec56:	68db      	ldr	r3, [r3, #12]
 801ec58:	60fb      	str	r3, [r7, #12]
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d1eb      	bne.n	801ec38 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ec60:	6879      	ldr	r1, [r7, #4]
 801ec62:	2000      	movs	r0, #0
 801ec64:	f7f7 fe9c 	bl	80169a0 <memp_free>
}
 801ec68:	3710      	adds	r7, #16
 801ec6a:	46bd      	mov	sp, r7
 801ec6c:	bd80      	pop	{r7, pc}
 801ec6e:	bf00      	nop
 801ec70:	0802b4bc 	.word	0x0802b4bc
 801ec74:	0802b808 	.word	0x0802b808
 801ec78:	0802b510 	.word	0x0802b510
 801ec7c:	20016014 	.word	0x20016014

0801ec80 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ec80:	b580      	push	{r7, lr}
 801ec82:	b082      	sub	sp, #8
 801ec84:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ec86:	2000      	movs	r0, #0
 801ec88:	f7f7 fe14 	bl	80168b4 <memp_malloc>
 801ec8c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d007      	beq.n	801eca4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ec94:	2220      	movs	r2, #32
 801ec96:	2100      	movs	r1, #0
 801ec98:	6878      	ldr	r0, [r7, #4]
 801ec9a:	f004 ffa9 	bl	8023bf0 <memset>
    pcb->ttl = UDP_TTL;
 801ec9e:	687b      	ldr	r3, [r7, #4]
 801eca0:	22ff      	movs	r2, #255	; 0xff
 801eca2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801eca4:	687b      	ldr	r3, [r7, #4]
}
 801eca6:	4618      	mov	r0, r3
 801eca8:	3708      	adds	r7, #8
 801ecaa:	46bd      	mov	sp, r7
 801ecac:	bd80      	pop	{r7, pc}

0801ecae <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ecae:	b580      	push	{r7, lr}
 801ecb0:	b084      	sub	sp, #16
 801ecb2:	af00      	add	r7, sp, #0
 801ecb4:	4603      	mov	r3, r0
 801ecb6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ecb8:	f7ff ffe2 	bl	801ec80 <udp_new>
 801ecbc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ecbe:	68fb      	ldr	r3, [r7, #12]
}
 801ecc0:	4618      	mov	r0, r3
 801ecc2:	3710      	adds	r7, #16
 801ecc4:	46bd      	mov	sp, r7
 801ecc6:	bd80      	pop	{r7, pc}

0801ecc8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ecc8:	b480      	push	{r7}
 801ecca:	b085      	sub	sp, #20
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
 801ecd0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d01e      	beq.n	801ed16 <udp_netif_ip_addr_changed+0x4e>
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	681b      	ldr	r3, [r3, #0]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d01a      	beq.n	801ed16 <udp_netif_ip_addr_changed+0x4e>
 801ece0:	683b      	ldr	r3, [r7, #0]
 801ece2:	2b00      	cmp	r3, #0
 801ece4:	d017      	beq.n	801ed16 <udp_netif_ip_addr_changed+0x4e>
 801ece6:	683b      	ldr	r3, [r7, #0]
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	d013      	beq.n	801ed16 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ecee:	4b0d      	ldr	r3, [pc, #52]	; (801ed24 <udp_netif_ip_addr_changed+0x5c>)
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	60fb      	str	r3, [r7, #12]
 801ecf4:	e00c      	b.n	801ed10 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	681a      	ldr	r2, [r3, #0]
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	429a      	cmp	r2, r3
 801ed00:	d103      	bne.n	801ed0a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ed02:	683b      	ldr	r3, [r7, #0]
 801ed04:	681a      	ldr	r2, [r3, #0]
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ed0a:	68fb      	ldr	r3, [r7, #12]
 801ed0c:	68db      	ldr	r3, [r3, #12]
 801ed0e:	60fb      	str	r3, [r7, #12]
 801ed10:	68fb      	ldr	r3, [r7, #12]
 801ed12:	2b00      	cmp	r3, #0
 801ed14:	d1ef      	bne.n	801ecf6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801ed16:	bf00      	nop
 801ed18:	3714      	adds	r7, #20
 801ed1a:	46bd      	mov	sp, r7
 801ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed20:	4770      	bx	lr
 801ed22:	bf00      	nop
 801ed24:	20016014 	.word	0x20016014

0801ed28 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ed28:	b580      	push	{r7, lr}
 801ed2a:	b082      	sub	sp, #8
 801ed2c:	af00      	add	r7, sp, #0
 801ed2e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ed30:	4915      	ldr	r1, [pc, #84]	; (801ed88 <etharp_free_entry+0x60>)
 801ed32:	687a      	ldr	r2, [r7, #4]
 801ed34:	4613      	mov	r3, r2
 801ed36:	005b      	lsls	r3, r3, #1
 801ed38:	4413      	add	r3, r2
 801ed3a:	00db      	lsls	r3, r3, #3
 801ed3c:	440b      	add	r3, r1
 801ed3e:	681b      	ldr	r3, [r3, #0]
 801ed40:	2b00      	cmp	r3, #0
 801ed42:	d013      	beq.n	801ed6c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801ed44:	4910      	ldr	r1, [pc, #64]	; (801ed88 <etharp_free_entry+0x60>)
 801ed46:	687a      	ldr	r2, [r7, #4]
 801ed48:	4613      	mov	r3, r2
 801ed4a:	005b      	lsls	r3, r3, #1
 801ed4c:	4413      	add	r3, r2
 801ed4e:	00db      	lsls	r3, r3, #3
 801ed50:	440b      	add	r3, r1
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	4618      	mov	r0, r3
 801ed56:	f7f8 fcc7 	bl	80176e8 <pbuf_free>
    arp_table[i].q = NULL;
 801ed5a:	490b      	ldr	r1, [pc, #44]	; (801ed88 <etharp_free_entry+0x60>)
 801ed5c:	687a      	ldr	r2, [r7, #4]
 801ed5e:	4613      	mov	r3, r2
 801ed60:	005b      	lsls	r3, r3, #1
 801ed62:	4413      	add	r3, r2
 801ed64:	00db      	lsls	r3, r3, #3
 801ed66:	440b      	add	r3, r1
 801ed68:	2200      	movs	r2, #0
 801ed6a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ed6c:	4906      	ldr	r1, [pc, #24]	; (801ed88 <etharp_free_entry+0x60>)
 801ed6e:	687a      	ldr	r2, [r7, #4]
 801ed70:	4613      	mov	r3, r2
 801ed72:	005b      	lsls	r3, r3, #1
 801ed74:	4413      	add	r3, r2
 801ed76:	00db      	lsls	r3, r3, #3
 801ed78:	440b      	add	r3, r1
 801ed7a:	3314      	adds	r3, #20
 801ed7c:	2200      	movs	r2, #0
 801ed7e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ed80:	bf00      	nop
 801ed82:	3708      	adds	r7, #8
 801ed84:	46bd      	mov	sp, r7
 801ed86:	bd80      	pop	{r7, pc}
 801ed88:	20016018 	.word	0x20016018

0801ed8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ed8c:	b580      	push	{r7, lr}
 801ed8e:	b082      	sub	sp, #8
 801ed90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ed92:	2300      	movs	r3, #0
 801ed94:	607b      	str	r3, [r7, #4]
 801ed96:	e096      	b.n	801eec6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ed98:	494f      	ldr	r1, [pc, #316]	; (801eed8 <etharp_tmr+0x14c>)
 801ed9a:	687a      	ldr	r2, [r7, #4]
 801ed9c:	4613      	mov	r3, r2
 801ed9e:	005b      	lsls	r3, r3, #1
 801eda0:	4413      	add	r3, r2
 801eda2:	00db      	lsls	r3, r3, #3
 801eda4:	440b      	add	r3, r1
 801eda6:	3314      	adds	r3, #20
 801eda8:	781b      	ldrb	r3, [r3, #0]
 801edaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801edac:	78fb      	ldrb	r3, [r7, #3]
 801edae:	2b00      	cmp	r3, #0
 801edb0:	f000 8086 	beq.w	801eec0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801edb4:	4948      	ldr	r1, [pc, #288]	; (801eed8 <etharp_tmr+0x14c>)
 801edb6:	687a      	ldr	r2, [r7, #4]
 801edb8:	4613      	mov	r3, r2
 801edba:	005b      	lsls	r3, r3, #1
 801edbc:	4413      	add	r3, r2
 801edbe:	00db      	lsls	r3, r3, #3
 801edc0:	440b      	add	r3, r1
 801edc2:	3312      	adds	r3, #18
 801edc4:	881b      	ldrh	r3, [r3, #0]
 801edc6:	3301      	adds	r3, #1
 801edc8:	b298      	uxth	r0, r3
 801edca:	4943      	ldr	r1, [pc, #268]	; (801eed8 <etharp_tmr+0x14c>)
 801edcc:	687a      	ldr	r2, [r7, #4]
 801edce:	4613      	mov	r3, r2
 801edd0:	005b      	lsls	r3, r3, #1
 801edd2:	4413      	add	r3, r2
 801edd4:	00db      	lsls	r3, r3, #3
 801edd6:	440b      	add	r3, r1
 801edd8:	3312      	adds	r3, #18
 801edda:	4602      	mov	r2, r0
 801eddc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801edde:	493e      	ldr	r1, [pc, #248]	; (801eed8 <etharp_tmr+0x14c>)
 801ede0:	687a      	ldr	r2, [r7, #4]
 801ede2:	4613      	mov	r3, r2
 801ede4:	005b      	lsls	r3, r3, #1
 801ede6:	4413      	add	r3, r2
 801ede8:	00db      	lsls	r3, r3, #3
 801edea:	440b      	add	r3, r1
 801edec:	3312      	adds	r3, #18
 801edee:	881b      	ldrh	r3, [r3, #0]
 801edf0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801edf4:	d215      	bcs.n	801ee22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801edf6:	4938      	ldr	r1, [pc, #224]	; (801eed8 <etharp_tmr+0x14c>)
 801edf8:	687a      	ldr	r2, [r7, #4]
 801edfa:	4613      	mov	r3, r2
 801edfc:	005b      	lsls	r3, r3, #1
 801edfe:	4413      	add	r3, r2
 801ee00:	00db      	lsls	r3, r3, #3
 801ee02:	440b      	add	r3, r1
 801ee04:	3314      	adds	r3, #20
 801ee06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ee08:	2b01      	cmp	r3, #1
 801ee0a:	d10e      	bne.n	801ee2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ee0c:	4932      	ldr	r1, [pc, #200]	; (801eed8 <etharp_tmr+0x14c>)
 801ee0e:	687a      	ldr	r2, [r7, #4]
 801ee10:	4613      	mov	r3, r2
 801ee12:	005b      	lsls	r3, r3, #1
 801ee14:	4413      	add	r3, r2
 801ee16:	00db      	lsls	r3, r3, #3
 801ee18:	440b      	add	r3, r1
 801ee1a:	3312      	adds	r3, #18
 801ee1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ee1e:	2b04      	cmp	r3, #4
 801ee20:	d903      	bls.n	801ee2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ee22:	6878      	ldr	r0, [r7, #4]
 801ee24:	f7ff ff80 	bl	801ed28 <etharp_free_entry>
 801ee28:	e04a      	b.n	801eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ee2a:	492b      	ldr	r1, [pc, #172]	; (801eed8 <etharp_tmr+0x14c>)
 801ee2c:	687a      	ldr	r2, [r7, #4]
 801ee2e:	4613      	mov	r3, r2
 801ee30:	005b      	lsls	r3, r3, #1
 801ee32:	4413      	add	r3, r2
 801ee34:	00db      	lsls	r3, r3, #3
 801ee36:	440b      	add	r3, r1
 801ee38:	3314      	adds	r3, #20
 801ee3a:	781b      	ldrb	r3, [r3, #0]
 801ee3c:	2b03      	cmp	r3, #3
 801ee3e:	d10a      	bne.n	801ee56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ee40:	4925      	ldr	r1, [pc, #148]	; (801eed8 <etharp_tmr+0x14c>)
 801ee42:	687a      	ldr	r2, [r7, #4]
 801ee44:	4613      	mov	r3, r2
 801ee46:	005b      	lsls	r3, r3, #1
 801ee48:	4413      	add	r3, r2
 801ee4a:	00db      	lsls	r3, r3, #3
 801ee4c:	440b      	add	r3, r1
 801ee4e:	3314      	adds	r3, #20
 801ee50:	2204      	movs	r2, #4
 801ee52:	701a      	strb	r2, [r3, #0]
 801ee54:	e034      	b.n	801eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ee56:	4920      	ldr	r1, [pc, #128]	; (801eed8 <etharp_tmr+0x14c>)
 801ee58:	687a      	ldr	r2, [r7, #4]
 801ee5a:	4613      	mov	r3, r2
 801ee5c:	005b      	lsls	r3, r3, #1
 801ee5e:	4413      	add	r3, r2
 801ee60:	00db      	lsls	r3, r3, #3
 801ee62:	440b      	add	r3, r1
 801ee64:	3314      	adds	r3, #20
 801ee66:	781b      	ldrb	r3, [r3, #0]
 801ee68:	2b04      	cmp	r3, #4
 801ee6a:	d10a      	bne.n	801ee82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ee6c:	491a      	ldr	r1, [pc, #104]	; (801eed8 <etharp_tmr+0x14c>)
 801ee6e:	687a      	ldr	r2, [r7, #4]
 801ee70:	4613      	mov	r3, r2
 801ee72:	005b      	lsls	r3, r3, #1
 801ee74:	4413      	add	r3, r2
 801ee76:	00db      	lsls	r3, r3, #3
 801ee78:	440b      	add	r3, r1
 801ee7a:	3314      	adds	r3, #20
 801ee7c:	2202      	movs	r2, #2
 801ee7e:	701a      	strb	r2, [r3, #0]
 801ee80:	e01e      	b.n	801eec0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ee82:	4915      	ldr	r1, [pc, #84]	; (801eed8 <etharp_tmr+0x14c>)
 801ee84:	687a      	ldr	r2, [r7, #4]
 801ee86:	4613      	mov	r3, r2
 801ee88:	005b      	lsls	r3, r3, #1
 801ee8a:	4413      	add	r3, r2
 801ee8c:	00db      	lsls	r3, r3, #3
 801ee8e:	440b      	add	r3, r1
 801ee90:	3314      	adds	r3, #20
 801ee92:	781b      	ldrb	r3, [r3, #0]
 801ee94:	2b01      	cmp	r3, #1
 801ee96:	d113      	bne.n	801eec0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ee98:	490f      	ldr	r1, [pc, #60]	; (801eed8 <etharp_tmr+0x14c>)
 801ee9a:	687a      	ldr	r2, [r7, #4]
 801ee9c:	4613      	mov	r3, r2
 801ee9e:	005b      	lsls	r3, r3, #1
 801eea0:	4413      	add	r3, r2
 801eea2:	00db      	lsls	r3, r3, #3
 801eea4:	440b      	add	r3, r1
 801eea6:	3308      	adds	r3, #8
 801eea8:	6818      	ldr	r0, [r3, #0]
 801eeaa:	687a      	ldr	r2, [r7, #4]
 801eeac:	4613      	mov	r3, r2
 801eeae:	005b      	lsls	r3, r3, #1
 801eeb0:	4413      	add	r3, r2
 801eeb2:	00db      	lsls	r3, r3, #3
 801eeb4:	4a08      	ldr	r2, [pc, #32]	; (801eed8 <etharp_tmr+0x14c>)
 801eeb6:	4413      	add	r3, r2
 801eeb8:	3304      	adds	r3, #4
 801eeba:	4619      	mov	r1, r3
 801eebc:	f000 fe6e 	bl	801fb9c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	3301      	adds	r3, #1
 801eec4:	607b      	str	r3, [r7, #4]
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	2b09      	cmp	r3, #9
 801eeca:	f77f af65 	ble.w	801ed98 <etharp_tmr+0xc>
      }
    }
  }
}
 801eece:	bf00      	nop
 801eed0:	bf00      	nop
 801eed2:	3708      	adds	r7, #8
 801eed4:	46bd      	mov	sp, r7
 801eed6:	bd80      	pop	{r7, pc}
 801eed8:	20016018 	.word	0x20016018

0801eedc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801eedc:	b580      	push	{r7, lr}
 801eede:	b08a      	sub	sp, #40	; 0x28
 801eee0:	af00      	add	r7, sp, #0
 801eee2:	60f8      	str	r0, [r7, #12]
 801eee4:	460b      	mov	r3, r1
 801eee6:	607a      	str	r2, [r7, #4]
 801eee8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801eeea:	230a      	movs	r3, #10
 801eeec:	84fb      	strh	r3, [r7, #38]	; 0x26
 801eeee:	230a      	movs	r3, #10
 801eef0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801eef2:	230a      	movs	r3, #10
 801eef4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801eef6:	2300      	movs	r3, #0
 801eef8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801eefa:	230a      	movs	r3, #10
 801eefc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801eefe:	2300      	movs	r3, #0
 801ef00:	83bb      	strh	r3, [r7, #28]
 801ef02:	2300      	movs	r3, #0
 801ef04:	837b      	strh	r3, [r7, #26]
 801ef06:	2300      	movs	r3, #0
 801ef08:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ef0a:	2300      	movs	r3, #0
 801ef0c:	843b      	strh	r3, [r7, #32]
 801ef0e:	e0ae      	b.n	801f06e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ef10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ef14:	49a6      	ldr	r1, [pc, #664]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801ef16:	4613      	mov	r3, r2
 801ef18:	005b      	lsls	r3, r3, #1
 801ef1a:	4413      	add	r3, r2
 801ef1c:	00db      	lsls	r3, r3, #3
 801ef1e:	440b      	add	r3, r1
 801ef20:	3314      	adds	r3, #20
 801ef22:	781b      	ldrb	r3, [r3, #0]
 801ef24:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ef26:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ef2a:	2b0a      	cmp	r3, #10
 801ef2c:	d105      	bne.n	801ef3a <etharp_find_entry+0x5e>
 801ef2e:	7dfb      	ldrb	r3, [r7, #23]
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	d102      	bne.n	801ef3a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ef34:	8c3b      	ldrh	r3, [r7, #32]
 801ef36:	847b      	strh	r3, [r7, #34]	; 0x22
 801ef38:	e095      	b.n	801f066 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ef3a:	7dfb      	ldrb	r3, [r7, #23]
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	f000 8092 	beq.w	801f066 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ef42:	7dfb      	ldrb	r3, [r7, #23]
 801ef44:	2b01      	cmp	r3, #1
 801ef46:	d009      	beq.n	801ef5c <etharp_find_entry+0x80>
 801ef48:	7dfb      	ldrb	r3, [r7, #23]
 801ef4a:	2b01      	cmp	r3, #1
 801ef4c:	d806      	bhi.n	801ef5c <etharp_find_entry+0x80>
 801ef4e:	4b99      	ldr	r3, [pc, #612]	; (801f1b4 <etharp_find_entry+0x2d8>)
 801ef50:	f240 1223 	movw	r2, #291	; 0x123
 801ef54:	4998      	ldr	r1, [pc, #608]	; (801f1b8 <etharp_find_entry+0x2dc>)
 801ef56:	4899      	ldr	r0, [pc, #612]	; (801f1bc <etharp_find_entry+0x2e0>)
 801ef58:	f004 fc84 	bl	8023864 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d020      	beq.n	801efa4 <etharp_find_entry+0xc8>
 801ef62:	68fb      	ldr	r3, [r7, #12]
 801ef64:	6819      	ldr	r1, [r3, #0]
 801ef66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ef6a:	4891      	ldr	r0, [pc, #580]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801ef6c:	4613      	mov	r3, r2
 801ef6e:	005b      	lsls	r3, r3, #1
 801ef70:	4413      	add	r3, r2
 801ef72:	00db      	lsls	r3, r3, #3
 801ef74:	4403      	add	r3, r0
 801ef76:	3304      	adds	r3, #4
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	4299      	cmp	r1, r3
 801ef7c:	d112      	bne.n	801efa4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	2b00      	cmp	r3, #0
 801ef82:	d00c      	beq.n	801ef9e <etharp_find_entry+0xc2>
 801ef84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ef88:	4989      	ldr	r1, [pc, #548]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801ef8a:	4613      	mov	r3, r2
 801ef8c:	005b      	lsls	r3, r3, #1
 801ef8e:	4413      	add	r3, r2
 801ef90:	00db      	lsls	r3, r3, #3
 801ef92:	440b      	add	r3, r1
 801ef94:	3308      	adds	r3, #8
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	687a      	ldr	r2, [r7, #4]
 801ef9a:	429a      	cmp	r2, r3
 801ef9c:	d102      	bne.n	801efa4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ef9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801efa2:	e100      	b.n	801f1a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801efa4:	7dfb      	ldrb	r3, [r7, #23]
 801efa6:	2b01      	cmp	r3, #1
 801efa8:	d140      	bne.n	801f02c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801efaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801efae:	4980      	ldr	r1, [pc, #512]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801efb0:	4613      	mov	r3, r2
 801efb2:	005b      	lsls	r3, r3, #1
 801efb4:	4413      	add	r3, r2
 801efb6:	00db      	lsls	r3, r3, #3
 801efb8:	440b      	add	r3, r1
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d01a      	beq.n	801eff6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801efc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801efc4:	497a      	ldr	r1, [pc, #488]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801efc6:	4613      	mov	r3, r2
 801efc8:	005b      	lsls	r3, r3, #1
 801efca:	4413      	add	r3, r2
 801efcc:	00db      	lsls	r3, r3, #3
 801efce:	440b      	add	r3, r1
 801efd0:	3312      	adds	r3, #18
 801efd2:	881b      	ldrh	r3, [r3, #0]
 801efd4:	8bba      	ldrh	r2, [r7, #28]
 801efd6:	429a      	cmp	r2, r3
 801efd8:	d845      	bhi.n	801f066 <etharp_find_entry+0x18a>
            old_queue = i;
 801efda:	8c3b      	ldrh	r3, [r7, #32]
 801efdc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801efde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801efe2:	4973      	ldr	r1, [pc, #460]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801efe4:	4613      	mov	r3, r2
 801efe6:	005b      	lsls	r3, r3, #1
 801efe8:	4413      	add	r3, r2
 801efea:	00db      	lsls	r3, r3, #3
 801efec:	440b      	add	r3, r1
 801efee:	3312      	adds	r3, #18
 801eff0:	881b      	ldrh	r3, [r3, #0]
 801eff2:	83bb      	strh	r3, [r7, #28]
 801eff4:	e037      	b.n	801f066 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801eff6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801effa:	496d      	ldr	r1, [pc, #436]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801effc:	4613      	mov	r3, r2
 801effe:	005b      	lsls	r3, r3, #1
 801f000:	4413      	add	r3, r2
 801f002:	00db      	lsls	r3, r3, #3
 801f004:	440b      	add	r3, r1
 801f006:	3312      	adds	r3, #18
 801f008:	881b      	ldrh	r3, [r3, #0]
 801f00a:	8b7a      	ldrh	r2, [r7, #26]
 801f00c:	429a      	cmp	r2, r3
 801f00e:	d82a      	bhi.n	801f066 <etharp_find_entry+0x18a>
            old_pending = i;
 801f010:	8c3b      	ldrh	r3, [r7, #32]
 801f012:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801f014:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f018:	4965      	ldr	r1, [pc, #404]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f01a:	4613      	mov	r3, r2
 801f01c:	005b      	lsls	r3, r3, #1
 801f01e:	4413      	add	r3, r2
 801f020:	00db      	lsls	r3, r3, #3
 801f022:	440b      	add	r3, r1
 801f024:	3312      	adds	r3, #18
 801f026:	881b      	ldrh	r3, [r3, #0]
 801f028:	837b      	strh	r3, [r7, #26]
 801f02a:	e01c      	b.n	801f066 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801f02c:	7dfb      	ldrb	r3, [r7, #23]
 801f02e:	2b01      	cmp	r3, #1
 801f030:	d919      	bls.n	801f066 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801f032:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f036:	495e      	ldr	r1, [pc, #376]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f038:	4613      	mov	r3, r2
 801f03a:	005b      	lsls	r3, r3, #1
 801f03c:	4413      	add	r3, r2
 801f03e:	00db      	lsls	r3, r3, #3
 801f040:	440b      	add	r3, r1
 801f042:	3312      	adds	r3, #18
 801f044:	881b      	ldrh	r3, [r3, #0]
 801f046:	8b3a      	ldrh	r2, [r7, #24]
 801f048:	429a      	cmp	r2, r3
 801f04a:	d80c      	bhi.n	801f066 <etharp_find_entry+0x18a>
            old_stable = i;
 801f04c:	8c3b      	ldrh	r3, [r7, #32]
 801f04e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801f050:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f054:	4956      	ldr	r1, [pc, #344]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f056:	4613      	mov	r3, r2
 801f058:	005b      	lsls	r3, r3, #1
 801f05a:	4413      	add	r3, r2
 801f05c:	00db      	lsls	r3, r3, #3
 801f05e:	440b      	add	r3, r1
 801f060:	3312      	adds	r3, #18
 801f062:	881b      	ldrh	r3, [r3, #0]
 801f064:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f066:	8c3b      	ldrh	r3, [r7, #32]
 801f068:	3301      	adds	r3, #1
 801f06a:	b29b      	uxth	r3, r3
 801f06c:	843b      	strh	r3, [r7, #32]
 801f06e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f072:	2b09      	cmp	r3, #9
 801f074:	f77f af4c 	ble.w	801ef10 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801f078:	7afb      	ldrb	r3, [r7, #11]
 801f07a:	f003 0302 	and.w	r3, r3, #2
 801f07e:	2b00      	cmp	r3, #0
 801f080:	d108      	bne.n	801f094 <etharp_find_entry+0x1b8>
 801f082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f086:	2b0a      	cmp	r3, #10
 801f088:	d107      	bne.n	801f09a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801f08a:	7afb      	ldrb	r3, [r7, #11]
 801f08c:	f003 0301 	and.w	r3, r3, #1
 801f090:	2b00      	cmp	r3, #0
 801f092:	d102      	bne.n	801f09a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801f094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f098:	e085      	b.n	801f1a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801f09a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801f09e:	2b09      	cmp	r3, #9
 801f0a0:	dc02      	bgt.n	801f0a8 <etharp_find_entry+0x1cc>
    i = empty;
 801f0a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f0a4:	843b      	strh	r3, [r7, #32]
 801f0a6:	e039      	b.n	801f11c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801f0a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801f0ac:	2b09      	cmp	r3, #9
 801f0ae:	dc14      	bgt.n	801f0da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801f0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f0b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801f0b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f0b8:	493d      	ldr	r1, [pc, #244]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f0ba:	4613      	mov	r3, r2
 801f0bc:	005b      	lsls	r3, r3, #1
 801f0be:	4413      	add	r3, r2
 801f0c0:	00db      	lsls	r3, r3, #3
 801f0c2:	440b      	add	r3, r1
 801f0c4:	681b      	ldr	r3, [r3, #0]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d018      	beq.n	801f0fc <etharp_find_entry+0x220>
 801f0ca:	4b3a      	ldr	r3, [pc, #232]	; (801f1b4 <etharp_find_entry+0x2d8>)
 801f0cc:	f240 126d 	movw	r2, #365	; 0x16d
 801f0d0:	493b      	ldr	r1, [pc, #236]	; (801f1c0 <etharp_find_entry+0x2e4>)
 801f0d2:	483a      	ldr	r0, [pc, #232]	; (801f1bc <etharp_find_entry+0x2e0>)
 801f0d4:	f004 fbc6 	bl	8023864 <iprintf>
 801f0d8:	e010      	b.n	801f0fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801f0da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801f0de:	2b09      	cmp	r3, #9
 801f0e0:	dc02      	bgt.n	801f0e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801f0e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f0e4:	843b      	strh	r3, [r7, #32]
 801f0e6:	e009      	b.n	801f0fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801f0e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801f0ec:	2b09      	cmp	r3, #9
 801f0ee:	dc02      	bgt.n	801f0f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801f0f0:	8bfb      	ldrh	r3, [r7, #30]
 801f0f2:	843b      	strh	r3, [r7, #32]
 801f0f4:	e002      	b.n	801f0fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801f0f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f0fa:	e054      	b.n	801f1a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f0fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f100:	2b09      	cmp	r3, #9
 801f102:	dd06      	ble.n	801f112 <etharp_find_entry+0x236>
 801f104:	4b2b      	ldr	r3, [pc, #172]	; (801f1b4 <etharp_find_entry+0x2d8>)
 801f106:	f240 127f 	movw	r2, #383	; 0x17f
 801f10a:	492e      	ldr	r1, [pc, #184]	; (801f1c4 <etharp_find_entry+0x2e8>)
 801f10c:	482b      	ldr	r0, [pc, #172]	; (801f1bc <etharp_find_entry+0x2e0>)
 801f10e:	f004 fba9 	bl	8023864 <iprintf>
    etharp_free_entry(i);
 801f112:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f116:	4618      	mov	r0, r3
 801f118:	f7ff fe06 	bl	801ed28 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801f11c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801f120:	2b09      	cmp	r3, #9
 801f122:	dd06      	ble.n	801f132 <etharp_find_entry+0x256>
 801f124:	4b23      	ldr	r3, [pc, #140]	; (801f1b4 <etharp_find_entry+0x2d8>)
 801f126:	f240 1283 	movw	r2, #387	; 0x183
 801f12a:	4926      	ldr	r1, [pc, #152]	; (801f1c4 <etharp_find_entry+0x2e8>)
 801f12c:	4823      	ldr	r0, [pc, #140]	; (801f1bc <etharp_find_entry+0x2e0>)
 801f12e:	f004 fb99 	bl	8023864 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801f132:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f136:	491e      	ldr	r1, [pc, #120]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f138:	4613      	mov	r3, r2
 801f13a:	005b      	lsls	r3, r3, #1
 801f13c:	4413      	add	r3, r2
 801f13e:	00db      	lsls	r3, r3, #3
 801f140:	440b      	add	r3, r1
 801f142:	3314      	adds	r3, #20
 801f144:	781b      	ldrb	r3, [r3, #0]
 801f146:	2b00      	cmp	r3, #0
 801f148:	d006      	beq.n	801f158 <etharp_find_entry+0x27c>
 801f14a:	4b1a      	ldr	r3, [pc, #104]	; (801f1b4 <etharp_find_entry+0x2d8>)
 801f14c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801f150:	491d      	ldr	r1, [pc, #116]	; (801f1c8 <etharp_find_entry+0x2ec>)
 801f152:	481a      	ldr	r0, [pc, #104]	; (801f1bc <etharp_find_entry+0x2e0>)
 801f154:	f004 fb86 	bl	8023864 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801f158:	68fb      	ldr	r3, [r7, #12]
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d00b      	beq.n	801f176 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801f15e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f162:	68fb      	ldr	r3, [r7, #12]
 801f164:	6819      	ldr	r1, [r3, #0]
 801f166:	4812      	ldr	r0, [pc, #72]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f168:	4613      	mov	r3, r2
 801f16a:	005b      	lsls	r3, r3, #1
 801f16c:	4413      	add	r3, r2
 801f16e:	00db      	lsls	r3, r3, #3
 801f170:	4403      	add	r3, r0
 801f172:	3304      	adds	r3, #4
 801f174:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801f176:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f17a:	490d      	ldr	r1, [pc, #52]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f17c:	4613      	mov	r3, r2
 801f17e:	005b      	lsls	r3, r3, #1
 801f180:	4413      	add	r3, r2
 801f182:	00db      	lsls	r3, r3, #3
 801f184:	440b      	add	r3, r1
 801f186:	3312      	adds	r3, #18
 801f188:	2200      	movs	r2, #0
 801f18a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801f18c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801f190:	4907      	ldr	r1, [pc, #28]	; (801f1b0 <etharp_find_entry+0x2d4>)
 801f192:	4613      	mov	r3, r2
 801f194:	005b      	lsls	r3, r3, #1
 801f196:	4413      	add	r3, r2
 801f198:	00db      	lsls	r3, r3, #3
 801f19a:	440b      	add	r3, r1
 801f19c:	3308      	adds	r3, #8
 801f19e:	687a      	ldr	r2, [r7, #4]
 801f1a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801f1a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801f1a6:	4618      	mov	r0, r3
 801f1a8:	3728      	adds	r7, #40	; 0x28
 801f1aa:	46bd      	mov	sp, r7
 801f1ac:	bd80      	pop	{r7, pc}
 801f1ae:	bf00      	nop
 801f1b0:	20016018 	.word	0x20016018
 801f1b4:	0802b820 	.word	0x0802b820
 801f1b8:	0802b858 	.word	0x0802b858
 801f1bc:	0802b898 	.word	0x0802b898
 801f1c0:	0802b8c0 	.word	0x0802b8c0
 801f1c4:	0802b8d8 	.word	0x0802b8d8
 801f1c8:	0802b8ec 	.word	0x0802b8ec

0801f1cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801f1cc:	b580      	push	{r7, lr}
 801f1ce:	b088      	sub	sp, #32
 801f1d0:	af02      	add	r7, sp, #8
 801f1d2:	60f8      	str	r0, [r7, #12]
 801f1d4:	60b9      	str	r1, [r7, #8]
 801f1d6:	607a      	str	r2, [r7, #4]
 801f1d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f1e0:	2b06      	cmp	r3, #6
 801f1e2:	d006      	beq.n	801f1f2 <etharp_update_arp_entry+0x26>
 801f1e4:	4b48      	ldr	r3, [pc, #288]	; (801f308 <etharp_update_arp_entry+0x13c>)
 801f1e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 801f1ea:	4948      	ldr	r1, [pc, #288]	; (801f30c <etharp_update_arp_entry+0x140>)
 801f1ec:	4848      	ldr	r0, [pc, #288]	; (801f310 <etharp_update_arp_entry+0x144>)
 801f1ee:	f004 fb39 	bl	8023864 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801f1f2:	68bb      	ldr	r3, [r7, #8]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d012      	beq.n	801f21e <etharp_update_arp_entry+0x52>
 801f1f8:	68bb      	ldr	r3, [r7, #8]
 801f1fa:	681b      	ldr	r3, [r3, #0]
 801f1fc:	2b00      	cmp	r3, #0
 801f1fe:	d00e      	beq.n	801f21e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f200:	68bb      	ldr	r3, [r7, #8]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	68f9      	ldr	r1, [r7, #12]
 801f206:	4618      	mov	r0, r3
 801f208:	f001 f8fe 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801f20c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801f20e:	2b00      	cmp	r3, #0
 801f210:	d105      	bne.n	801f21e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801f212:	68bb      	ldr	r3, [r7, #8]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801f21a:	2be0      	cmp	r3, #224	; 0xe0
 801f21c:	d102      	bne.n	801f224 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f21e:	f06f 030f 	mvn.w	r3, #15
 801f222:	e06c      	b.n	801f2fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801f224:	78fb      	ldrb	r3, [r7, #3]
 801f226:	68fa      	ldr	r2, [r7, #12]
 801f228:	4619      	mov	r1, r3
 801f22a:	68b8      	ldr	r0, [r7, #8]
 801f22c:	f7ff fe56 	bl	801eedc <etharp_find_entry>
 801f230:	4603      	mov	r3, r0
 801f232:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801f234:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801f238:	2b00      	cmp	r3, #0
 801f23a:	da02      	bge.n	801f242 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801f23c:	8afb      	ldrh	r3, [r7, #22]
 801f23e:	b25b      	sxtb	r3, r3
 801f240:	e05d      	b.n	801f2fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801f242:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f246:	4933      	ldr	r1, [pc, #204]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f248:	4613      	mov	r3, r2
 801f24a:	005b      	lsls	r3, r3, #1
 801f24c:	4413      	add	r3, r2
 801f24e:	00db      	lsls	r3, r3, #3
 801f250:	440b      	add	r3, r1
 801f252:	3314      	adds	r3, #20
 801f254:	2202      	movs	r2, #2
 801f256:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801f258:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f25c:	492d      	ldr	r1, [pc, #180]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f25e:	4613      	mov	r3, r2
 801f260:	005b      	lsls	r3, r3, #1
 801f262:	4413      	add	r3, r2
 801f264:	00db      	lsls	r3, r3, #3
 801f266:	440b      	add	r3, r1
 801f268:	3308      	adds	r3, #8
 801f26a:	68fa      	ldr	r2, [r7, #12]
 801f26c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801f26e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f272:	4613      	mov	r3, r2
 801f274:	005b      	lsls	r3, r3, #1
 801f276:	4413      	add	r3, r2
 801f278:	00db      	lsls	r3, r3, #3
 801f27a:	3308      	adds	r3, #8
 801f27c:	4a25      	ldr	r2, [pc, #148]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f27e:	4413      	add	r3, r2
 801f280:	3304      	adds	r3, #4
 801f282:	2206      	movs	r2, #6
 801f284:	6879      	ldr	r1, [r7, #4]
 801f286:	4618      	mov	r0, r3
 801f288:	f005 fe0f 	bl	8024eaa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801f28c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f290:	4920      	ldr	r1, [pc, #128]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f292:	4613      	mov	r3, r2
 801f294:	005b      	lsls	r3, r3, #1
 801f296:	4413      	add	r3, r2
 801f298:	00db      	lsls	r3, r3, #3
 801f29a:	440b      	add	r3, r1
 801f29c:	3312      	adds	r3, #18
 801f29e:	2200      	movs	r2, #0
 801f2a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801f2a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f2a6:	491b      	ldr	r1, [pc, #108]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f2a8:	4613      	mov	r3, r2
 801f2aa:	005b      	lsls	r3, r3, #1
 801f2ac:	4413      	add	r3, r2
 801f2ae:	00db      	lsls	r3, r3, #3
 801f2b0:	440b      	add	r3, r1
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	d021      	beq.n	801f2fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801f2b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f2bc:	4915      	ldr	r1, [pc, #84]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f2be:	4613      	mov	r3, r2
 801f2c0:	005b      	lsls	r3, r3, #1
 801f2c2:	4413      	add	r3, r2
 801f2c4:	00db      	lsls	r3, r3, #3
 801f2c6:	440b      	add	r3, r1
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801f2cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801f2d0:	4910      	ldr	r1, [pc, #64]	; (801f314 <etharp_update_arp_entry+0x148>)
 801f2d2:	4613      	mov	r3, r2
 801f2d4:	005b      	lsls	r3, r3, #1
 801f2d6:	4413      	add	r3, r2
 801f2d8:	00db      	lsls	r3, r3, #3
 801f2da:	440b      	add	r3, r1
 801f2dc:	2200      	movs	r2, #0
 801f2de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801f2e0:	68fb      	ldr	r3, [r7, #12]
 801f2e2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801f2e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f2ea:	9300      	str	r3, [sp, #0]
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	6939      	ldr	r1, [r7, #16]
 801f2f0:	68f8      	ldr	r0, [r7, #12]
 801f2f2:	f002 f827 	bl	8021344 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801f2f6:	6938      	ldr	r0, [r7, #16]
 801f2f8:	f7f8 f9f6 	bl	80176e8 <pbuf_free>
  }
  return ERR_OK;
 801f2fc:	2300      	movs	r3, #0
}
 801f2fe:	4618      	mov	r0, r3
 801f300:	3718      	adds	r7, #24
 801f302:	46bd      	mov	sp, r7
 801f304:	bd80      	pop	{r7, pc}
 801f306:	bf00      	nop
 801f308:	0802b820 	.word	0x0802b820
 801f30c:	0802b918 	.word	0x0802b918
 801f310:	0802b898 	.word	0x0802b898
 801f314:	20016018 	.word	0x20016018

0801f318 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801f318:	b580      	push	{r7, lr}
 801f31a:	b084      	sub	sp, #16
 801f31c:	af00      	add	r7, sp, #0
 801f31e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f320:	2300      	movs	r3, #0
 801f322:	60fb      	str	r3, [r7, #12]
 801f324:	e01e      	b.n	801f364 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801f326:	4913      	ldr	r1, [pc, #76]	; (801f374 <etharp_cleanup_netif+0x5c>)
 801f328:	68fa      	ldr	r2, [r7, #12]
 801f32a:	4613      	mov	r3, r2
 801f32c:	005b      	lsls	r3, r3, #1
 801f32e:	4413      	add	r3, r2
 801f330:	00db      	lsls	r3, r3, #3
 801f332:	440b      	add	r3, r1
 801f334:	3314      	adds	r3, #20
 801f336:	781b      	ldrb	r3, [r3, #0]
 801f338:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801f33a:	7afb      	ldrb	r3, [r7, #11]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d00e      	beq.n	801f35e <etharp_cleanup_netif+0x46>
 801f340:	490c      	ldr	r1, [pc, #48]	; (801f374 <etharp_cleanup_netif+0x5c>)
 801f342:	68fa      	ldr	r2, [r7, #12]
 801f344:	4613      	mov	r3, r2
 801f346:	005b      	lsls	r3, r3, #1
 801f348:	4413      	add	r3, r2
 801f34a:	00db      	lsls	r3, r3, #3
 801f34c:	440b      	add	r3, r1
 801f34e:	3308      	adds	r3, #8
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	687a      	ldr	r2, [r7, #4]
 801f354:	429a      	cmp	r2, r3
 801f356:	d102      	bne.n	801f35e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801f358:	68f8      	ldr	r0, [r7, #12]
 801f35a:	f7ff fce5 	bl	801ed28 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f35e:	68fb      	ldr	r3, [r7, #12]
 801f360:	3301      	adds	r3, #1
 801f362:	60fb      	str	r3, [r7, #12]
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	2b09      	cmp	r3, #9
 801f368:	dddd      	ble.n	801f326 <etharp_cleanup_netif+0xe>
    }
  }
}
 801f36a:	bf00      	nop
 801f36c:	bf00      	nop
 801f36e:	3710      	adds	r7, #16
 801f370:	46bd      	mov	sp, r7
 801f372:	bd80      	pop	{r7, pc}
 801f374:	20016018 	.word	0x20016018

0801f378 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801f378:	b5b0      	push	{r4, r5, r7, lr}
 801f37a:	b08a      	sub	sp, #40	; 0x28
 801f37c:	af04      	add	r7, sp, #16
 801f37e:	6078      	str	r0, [r7, #4]
 801f380:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f382:	683b      	ldr	r3, [r7, #0]
 801f384:	2b00      	cmp	r3, #0
 801f386:	d107      	bne.n	801f398 <etharp_input+0x20>
 801f388:	4b3d      	ldr	r3, [pc, #244]	; (801f480 <etharp_input+0x108>)
 801f38a:	f240 228a 	movw	r2, #650	; 0x28a
 801f38e:	493d      	ldr	r1, [pc, #244]	; (801f484 <etharp_input+0x10c>)
 801f390:	483d      	ldr	r0, [pc, #244]	; (801f488 <etharp_input+0x110>)
 801f392:	f004 fa67 	bl	8023864 <iprintf>
 801f396:	e06f      	b.n	801f478 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	685b      	ldr	r3, [r3, #4]
 801f39c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f39e:	693b      	ldr	r3, [r7, #16]
 801f3a0:	881b      	ldrh	r3, [r3, #0]
 801f3a2:	b29b      	uxth	r3, r3
 801f3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f3a8:	d10c      	bne.n	801f3c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f3aa:	693b      	ldr	r3, [r7, #16]
 801f3ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801f3ae:	2b06      	cmp	r3, #6
 801f3b0:	d108      	bne.n	801f3c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f3b2:	693b      	ldr	r3, [r7, #16]
 801f3b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801f3b6:	2b04      	cmp	r3, #4
 801f3b8:	d104      	bne.n	801f3c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801f3ba:	693b      	ldr	r3, [r7, #16]
 801f3bc:	885b      	ldrh	r3, [r3, #2]
 801f3be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801f3c0:	2b08      	cmp	r3, #8
 801f3c2:	d003      	beq.n	801f3cc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801f3c4:	6878      	ldr	r0, [r7, #4]
 801f3c6:	f7f8 f98f 	bl	80176e8 <pbuf_free>
    return;
 801f3ca:	e055      	b.n	801f478 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801f3cc:	693b      	ldr	r3, [r7, #16]
 801f3ce:	330e      	adds	r3, #14
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801f3d4:	693b      	ldr	r3, [r7, #16]
 801f3d6:	3318      	adds	r3, #24
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f3dc:	683b      	ldr	r3, [r7, #0]
 801f3de:	3304      	adds	r3, #4
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d102      	bne.n	801f3ec <etharp_input+0x74>
    for_us = 0;
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	75fb      	strb	r3, [r7, #23]
 801f3ea:	e009      	b.n	801f400 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801f3ec:	68ba      	ldr	r2, [r7, #8]
 801f3ee:	683b      	ldr	r3, [r7, #0]
 801f3f0:	3304      	adds	r3, #4
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	429a      	cmp	r2, r3
 801f3f6:	bf0c      	ite	eq
 801f3f8:	2301      	moveq	r3, #1
 801f3fa:	2300      	movne	r3, #0
 801f3fc:	b2db      	uxtb	r3, r3
 801f3fe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801f400:	693b      	ldr	r3, [r7, #16]
 801f402:	f103 0208 	add.w	r2, r3, #8
 801f406:	7dfb      	ldrb	r3, [r7, #23]
 801f408:	2b00      	cmp	r3, #0
 801f40a:	d001      	beq.n	801f410 <etharp_input+0x98>
 801f40c:	2301      	movs	r3, #1
 801f40e:	e000      	b.n	801f412 <etharp_input+0x9a>
 801f410:	2302      	movs	r3, #2
 801f412:	f107 010c 	add.w	r1, r7, #12
 801f416:	6838      	ldr	r0, [r7, #0]
 801f418:	f7ff fed8 	bl	801f1cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801f41c:	693b      	ldr	r3, [r7, #16]
 801f41e:	88db      	ldrh	r3, [r3, #6]
 801f420:	b29b      	uxth	r3, r3
 801f422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f426:	d003      	beq.n	801f430 <etharp_input+0xb8>
 801f428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f42c:	d01e      	beq.n	801f46c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801f42e:	e020      	b.n	801f472 <etharp_input+0xfa>
      if (for_us) {
 801f430:	7dfb      	ldrb	r3, [r7, #23]
 801f432:	2b00      	cmp	r3, #0
 801f434:	d01c      	beq.n	801f470 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801f436:	683b      	ldr	r3, [r7, #0]
 801f438:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801f43c:	693b      	ldr	r3, [r7, #16]
 801f43e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801f442:	683b      	ldr	r3, [r7, #0]
 801f444:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801f44c:	693a      	ldr	r2, [r7, #16]
 801f44e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801f450:	2102      	movs	r1, #2
 801f452:	9103      	str	r1, [sp, #12]
 801f454:	f107 010c 	add.w	r1, r7, #12
 801f458:	9102      	str	r1, [sp, #8]
 801f45a:	9201      	str	r2, [sp, #4]
 801f45c:	9300      	str	r3, [sp, #0]
 801f45e:	462b      	mov	r3, r5
 801f460:	4622      	mov	r2, r4
 801f462:	4601      	mov	r1, r0
 801f464:	6838      	ldr	r0, [r7, #0]
 801f466:	f000 faeb 	bl	801fa40 <etharp_raw>
      break;
 801f46a:	e001      	b.n	801f470 <etharp_input+0xf8>
      break;
 801f46c:	bf00      	nop
 801f46e:	e000      	b.n	801f472 <etharp_input+0xfa>
      break;
 801f470:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801f472:	6878      	ldr	r0, [r7, #4]
 801f474:	f7f8 f938 	bl	80176e8 <pbuf_free>
}
 801f478:	3718      	adds	r7, #24
 801f47a:	46bd      	mov	sp, r7
 801f47c:	bdb0      	pop	{r4, r5, r7, pc}
 801f47e:	bf00      	nop
 801f480:	0802b820 	.word	0x0802b820
 801f484:	0802b970 	.word	0x0802b970
 801f488:	0802b898 	.word	0x0802b898

0801f48c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801f48c:	b580      	push	{r7, lr}
 801f48e:	b086      	sub	sp, #24
 801f490:	af02      	add	r7, sp, #8
 801f492:	60f8      	str	r0, [r7, #12]
 801f494:	60b9      	str	r1, [r7, #8]
 801f496:	4613      	mov	r3, r2
 801f498:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801f49a:	79fa      	ldrb	r2, [r7, #7]
 801f49c:	4944      	ldr	r1, [pc, #272]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f49e:	4613      	mov	r3, r2
 801f4a0:	005b      	lsls	r3, r3, #1
 801f4a2:	4413      	add	r3, r2
 801f4a4:	00db      	lsls	r3, r3, #3
 801f4a6:	440b      	add	r3, r1
 801f4a8:	3314      	adds	r3, #20
 801f4aa:	781b      	ldrb	r3, [r3, #0]
 801f4ac:	2b01      	cmp	r3, #1
 801f4ae:	d806      	bhi.n	801f4be <etharp_output_to_arp_index+0x32>
 801f4b0:	4b40      	ldr	r3, [pc, #256]	; (801f5b4 <etharp_output_to_arp_index+0x128>)
 801f4b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 801f4b6:	4940      	ldr	r1, [pc, #256]	; (801f5b8 <etharp_output_to_arp_index+0x12c>)
 801f4b8:	4840      	ldr	r0, [pc, #256]	; (801f5bc <etharp_output_to_arp_index+0x130>)
 801f4ba:	f004 f9d3 	bl	8023864 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801f4be:	79fa      	ldrb	r2, [r7, #7]
 801f4c0:	493b      	ldr	r1, [pc, #236]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f4c2:	4613      	mov	r3, r2
 801f4c4:	005b      	lsls	r3, r3, #1
 801f4c6:	4413      	add	r3, r2
 801f4c8:	00db      	lsls	r3, r3, #3
 801f4ca:	440b      	add	r3, r1
 801f4cc:	3314      	adds	r3, #20
 801f4ce:	781b      	ldrb	r3, [r3, #0]
 801f4d0:	2b02      	cmp	r3, #2
 801f4d2:	d153      	bne.n	801f57c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801f4d4:	79fa      	ldrb	r2, [r7, #7]
 801f4d6:	4936      	ldr	r1, [pc, #216]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f4d8:	4613      	mov	r3, r2
 801f4da:	005b      	lsls	r3, r3, #1
 801f4dc:	4413      	add	r3, r2
 801f4de:	00db      	lsls	r3, r3, #3
 801f4e0:	440b      	add	r3, r1
 801f4e2:	3312      	adds	r3, #18
 801f4e4:	881b      	ldrh	r3, [r3, #0]
 801f4e6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801f4ea:	d919      	bls.n	801f520 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801f4ec:	79fa      	ldrb	r2, [r7, #7]
 801f4ee:	4613      	mov	r3, r2
 801f4f0:	005b      	lsls	r3, r3, #1
 801f4f2:	4413      	add	r3, r2
 801f4f4:	00db      	lsls	r3, r3, #3
 801f4f6:	4a2e      	ldr	r2, [pc, #184]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f4f8:	4413      	add	r3, r2
 801f4fa:	3304      	adds	r3, #4
 801f4fc:	4619      	mov	r1, r3
 801f4fe:	68f8      	ldr	r0, [r7, #12]
 801f500:	f000 fb4c 	bl	801fb9c <etharp_request>
 801f504:	4603      	mov	r3, r0
 801f506:	2b00      	cmp	r3, #0
 801f508:	d138      	bne.n	801f57c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f50a:	79fa      	ldrb	r2, [r7, #7]
 801f50c:	4928      	ldr	r1, [pc, #160]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f50e:	4613      	mov	r3, r2
 801f510:	005b      	lsls	r3, r3, #1
 801f512:	4413      	add	r3, r2
 801f514:	00db      	lsls	r3, r3, #3
 801f516:	440b      	add	r3, r1
 801f518:	3314      	adds	r3, #20
 801f51a:	2203      	movs	r2, #3
 801f51c:	701a      	strb	r2, [r3, #0]
 801f51e:	e02d      	b.n	801f57c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801f520:	79fa      	ldrb	r2, [r7, #7]
 801f522:	4923      	ldr	r1, [pc, #140]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f524:	4613      	mov	r3, r2
 801f526:	005b      	lsls	r3, r3, #1
 801f528:	4413      	add	r3, r2
 801f52a:	00db      	lsls	r3, r3, #3
 801f52c:	440b      	add	r3, r1
 801f52e:	3312      	adds	r3, #18
 801f530:	881b      	ldrh	r3, [r3, #0]
 801f532:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801f536:	d321      	bcc.n	801f57c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801f538:	79fa      	ldrb	r2, [r7, #7]
 801f53a:	4613      	mov	r3, r2
 801f53c:	005b      	lsls	r3, r3, #1
 801f53e:	4413      	add	r3, r2
 801f540:	00db      	lsls	r3, r3, #3
 801f542:	4a1b      	ldr	r2, [pc, #108]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f544:	4413      	add	r3, r2
 801f546:	1d19      	adds	r1, r3, #4
 801f548:	79fa      	ldrb	r2, [r7, #7]
 801f54a:	4613      	mov	r3, r2
 801f54c:	005b      	lsls	r3, r3, #1
 801f54e:	4413      	add	r3, r2
 801f550:	00db      	lsls	r3, r3, #3
 801f552:	3308      	adds	r3, #8
 801f554:	4a16      	ldr	r2, [pc, #88]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f556:	4413      	add	r3, r2
 801f558:	3304      	adds	r3, #4
 801f55a:	461a      	mov	r2, r3
 801f55c:	68f8      	ldr	r0, [r7, #12]
 801f55e:	f000 fafb 	bl	801fb58 <etharp_request_dst>
 801f562:	4603      	mov	r3, r0
 801f564:	2b00      	cmp	r3, #0
 801f566:	d109      	bne.n	801f57c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801f568:	79fa      	ldrb	r2, [r7, #7]
 801f56a:	4911      	ldr	r1, [pc, #68]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f56c:	4613      	mov	r3, r2
 801f56e:	005b      	lsls	r3, r3, #1
 801f570:	4413      	add	r3, r2
 801f572:	00db      	lsls	r3, r3, #3
 801f574:	440b      	add	r3, r1
 801f576:	3314      	adds	r3, #20
 801f578:	2203      	movs	r2, #3
 801f57a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801f57c:	68fb      	ldr	r3, [r7, #12]
 801f57e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801f582:	79fa      	ldrb	r2, [r7, #7]
 801f584:	4613      	mov	r3, r2
 801f586:	005b      	lsls	r3, r3, #1
 801f588:	4413      	add	r3, r2
 801f58a:	00db      	lsls	r3, r3, #3
 801f58c:	3308      	adds	r3, #8
 801f58e:	4a08      	ldr	r2, [pc, #32]	; (801f5b0 <etharp_output_to_arp_index+0x124>)
 801f590:	4413      	add	r3, r2
 801f592:	3304      	adds	r3, #4
 801f594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f598:	9200      	str	r2, [sp, #0]
 801f59a:	460a      	mov	r2, r1
 801f59c:	68b9      	ldr	r1, [r7, #8]
 801f59e:	68f8      	ldr	r0, [r7, #12]
 801f5a0:	f001 fed0 	bl	8021344 <ethernet_output>
 801f5a4:	4603      	mov	r3, r0
}
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	3710      	adds	r7, #16
 801f5aa:	46bd      	mov	sp, r7
 801f5ac:	bd80      	pop	{r7, pc}
 801f5ae:	bf00      	nop
 801f5b0:	20016018 	.word	0x20016018
 801f5b4:	0802b820 	.word	0x0802b820
 801f5b8:	0802b990 	.word	0x0802b990
 801f5bc:	0802b898 	.word	0x0802b898

0801f5c0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b08a      	sub	sp, #40	; 0x28
 801f5c4:	af02      	add	r7, sp, #8
 801f5c6:	60f8      	str	r0, [r7, #12]
 801f5c8:	60b9      	str	r1, [r7, #8]
 801f5ca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d106      	bne.n	801f5e4 <etharp_output+0x24>
 801f5d6:	4b73      	ldr	r3, [pc, #460]	; (801f7a4 <etharp_output+0x1e4>)
 801f5d8:	f240 321e 	movw	r2, #798	; 0x31e
 801f5dc:	4972      	ldr	r1, [pc, #456]	; (801f7a8 <etharp_output+0x1e8>)
 801f5de:	4873      	ldr	r0, [pc, #460]	; (801f7ac <etharp_output+0x1ec>)
 801f5e0:	f004 f940 	bl	8023864 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801f5e4:	68bb      	ldr	r3, [r7, #8]
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d106      	bne.n	801f5f8 <etharp_output+0x38>
 801f5ea:	4b6e      	ldr	r3, [pc, #440]	; (801f7a4 <etharp_output+0x1e4>)
 801f5ec:	f240 321f 	movw	r2, #799	; 0x31f
 801f5f0:	496f      	ldr	r1, [pc, #444]	; (801f7b0 <etharp_output+0x1f0>)
 801f5f2:	486e      	ldr	r0, [pc, #440]	; (801f7ac <etharp_output+0x1ec>)
 801f5f4:	f004 f936 	bl	8023864 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801f5f8:	687b      	ldr	r3, [r7, #4]
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	d106      	bne.n	801f60c <etharp_output+0x4c>
 801f5fe:	4b69      	ldr	r3, [pc, #420]	; (801f7a4 <etharp_output+0x1e4>)
 801f600:	f44f 7248 	mov.w	r2, #800	; 0x320
 801f604:	496b      	ldr	r1, [pc, #428]	; (801f7b4 <etharp_output+0x1f4>)
 801f606:	4869      	ldr	r0, [pc, #420]	; (801f7ac <etharp_output+0x1ec>)
 801f608:	f004 f92c 	bl	8023864 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801f60c:	687b      	ldr	r3, [r7, #4]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	68f9      	ldr	r1, [r7, #12]
 801f612:	4618      	mov	r0, r3
 801f614:	f000 fef8 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801f618:	4603      	mov	r3, r0
 801f61a:	2b00      	cmp	r3, #0
 801f61c:	d002      	beq.n	801f624 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801f61e:	4b66      	ldr	r3, [pc, #408]	; (801f7b8 <etharp_output+0x1f8>)
 801f620:	61fb      	str	r3, [r7, #28]
 801f622:	e0af      	b.n	801f784 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801f624:	687b      	ldr	r3, [r7, #4]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f62c:	2be0      	cmp	r3, #224	; 0xe0
 801f62e:	d118      	bne.n	801f662 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801f630:	2301      	movs	r3, #1
 801f632:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801f634:	2300      	movs	r3, #0
 801f636:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801f638:	235e      	movs	r3, #94	; 0x5e
 801f63a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	3301      	adds	r3, #1
 801f640:	781b      	ldrb	r3, [r3, #0]
 801f642:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801f646:	b2db      	uxtb	r3, r3
 801f648:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801f64a:	687b      	ldr	r3, [r7, #4]
 801f64c:	3302      	adds	r3, #2
 801f64e:	781b      	ldrb	r3, [r3, #0]
 801f650:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801f652:	687b      	ldr	r3, [r7, #4]
 801f654:	3303      	adds	r3, #3
 801f656:	781b      	ldrb	r3, [r3, #0]
 801f658:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801f65a:	f107 0310 	add.w	r3, r7, #16
 801f65e:	61fb      	str	r3, [r7, #28]
 801f660:	e090      	b.n	801f784 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f662:	687b      	ldr	r3, [r7, #4]
 801f664:	681a      	ldr	r2, [r3, #0]
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	3304      	adds	r3, #4
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	405a      	eors	r2, r3
 801f66e:	68fb      	ldr	r3, [r7, #12]
 801f670:	3308      	adds	r3, #8
 801f672:	681b      	ldr	r3, [r3, #0]
 801f674:	4013      	ands	r3, r2
 801f676:	2b00      	cmp	r3, #0
 801f678:	d012      	beq.n	801f6a0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801f680:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801f684:	4293      	cmp	r3, r2
 801f686:	d00b      	beq.n	801f6a0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	330c      	adds	r3, #12
 801f68c:	681b      	ldr	r3, [r3, #0]
 801f68e:	2b00      	cmp	r3, #0
 801f690:	d003      	beq.n	801f69a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801f692:	68fb      	ldr	r3, [r7, #12]
 801f694:	330c      	adds	r3, #12
 801f696:	61bb      	str	r3, [r7, #24]
 801f698:	e002      	b.n	801f6a0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801f69a:	f06f 0303 	mvn.w	r3, #3
 801f69e:	e07d      	b.n	801f79c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f6a0:	4b46      	ldr	r3, [pc, #280]	; (801f7bc <etharp_output+0x1fc>)
 801f6a2:	781b      	ldrb	r3, [r3, #0]
 801f6a4:	4619      	mov	r1, r3
 801f6a6:	4a46      	ldr	r2, [pc, #280]	; (801f7c0 <etharp_output+0x200>)
 801f6a8:	460b      	mov	r3, r1
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	440b      	add	r3, r1
 801f6ae:	00db      	lsls	r3, r3, #3
 801f6b0:	4413      	add	r3, r2
 801f6b2:	3314      	adds	r3, #20
 801f6b4:	781b      	ldrb	r3, [r3, #0]
 801f6b6:	2b01      	cmp	r3, #1
 801f6b8:	d925      	bls.n	801f706 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801f6ba:	4b40      	ldr	r3, [pc, #256]	; (801f7bc <etharp_output+0x1fc>)
 801f6bc:	781b      	ldrb	r3, [r3, #0]
 801f6be:	4619      	mov	r1, r3
 801f6c0:	4a3f      	ldr	r2, [pc, #252]	; (801f7c0 <etharp_output+0x200>)
 801f6c2:	460b      	mov	r3, r1
 801f6c4:	005b      	lsls	r3, r3, #1
 801f6c6:	440b      	add	r3, r1
 801f6c8:	00db      	lsls	r3, r3, #3
 801f6ca:	4413      	add	r3, r2
 801f6cc:	3308      	adds	r3, #8
 801f6ce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801f6d0:	68fa      	ldr	r2, [r7, #12]
 801f6d2:	429a      	cmp	r2, r3
 801f6d4:	d117      	bne.n	801f706 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801f6d6:	69bb      	ldr	r3, [r7, #24]
 801f6d8:	681a      	ldr	r2, [r3, #0]
 801f6da:	4b38      	ldr	r3, [pc, #224]	; (801f7bc <etharp_output+0x1fc>)
 801f6dc:	781b      	ldrb	r3, [r3, #0]
 801f6de:	4618      	mov	r0, r3
 801f6e0:	4937      	ldr	r1, [pc, #220]	; (801f7c0 <etharp_output+0x200>)
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	005b      	lsls	r3, r3, #1
 801f6e6:	4403      	add	r3, r0
 801f6e8:	00db      	lsls	r3, r3, #3
 801f6ea:	440b      	add	r3, r1
 801f6ec:	3304      	adds	r3, #4
 801f6ee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801f6f0:	429a      	cmp	r2, r3
 801f6f2:	d108      	bne.n	801f706 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801f6f4:	4b31      	ldr	r3, [pc, #196]	; (801f7bc <etharp_output+0x1fc>)
 801f6f6:	781b      	ldrb	r3, [r3, #0]
 801f6f8:	461a      	mov	r2, r3
 801f6fa:	68b9      	ldr	r1, [r7, #8]
 801f6fc:	68f8      	ldr	r0, [r7, #12]
 801f6fe:	f7ff fec5 	bl	801f48c <etharp_output_to_arp_index>
 801f702:	4603      	mov	r3, r0
 801f704:	e04a      	b.n	801f79c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f706:	2300      	movs	r3, #0
 801f708:	75fb      	strb	r3, [r7, #23]
 801f70a:	e031      	b.n	801f770 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f70c:	7dfa      	ldrb	r2, [r7, #23]
 801f70e:	492c      	ldr	r1, [pc, #176]	; (801f7c0 <etharp_output+0x200>)
 801f710:	4613      	mov	r3, r2
 801f712:	005b      	lsls	r3, r3, #1
 801f714:	4413      	add	r3, r2
 801f716:	00db      	lsls	r3, r3, #3
 801f718:	440b      	add	r3, r1
 801f71a:	3314      	adds	r3, #20
 801f71c:	781b      	ldrb	r3, [r3, #0]
 801f71e:	2b01      	cmp	r3, #1
 801f720:	d923      	bls.n	801f76a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801f722:	7dfa      	ldrb	r2, [r7, #23]
 801f724:	4926      	ldr	r1, [pc, #152]	; (801f7c0 <etharp_output+0x200>)
 801f726:	4613      	mov	r3, r2
 801f728:	005b      	lsls	r3, r3, #1
 801f72a:	4413      	add	r3, r2
 801f72c:	00db      	lsls	r3, r3, #3
 801f72e:	440b      	add	r3, r1
 801f730:	3308      	adds	r3, #8
 801f732:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801f734:	68fa      	ldr	r2, [r7, #12]
 801f736:	429a      	cmp	r2, r3
 801f738:	d117      	bne.n	801f76a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801f73a:	69bb      	ldr	r3, [r7, #24]
 801f73c:	6819      	ldr	r1, [r3, #0]
 801f73e:	7dfa      	ldrb	r2, [r7, #23]
 801f740:	481f      	ldr	r0, [pc, #124]	; (801f7c0 <etharp_output+0x200>)
 801f742:	4613      	mov	r3, r2
 801f744:	005b      	lsls	r3, r3, #1
 801f746:	4413      	add	r3, r2
 801f748:	00db      	lsls	r3, r3, #3
 801f74a:	4403      	add	r3, r0
 801f74c:	3304      	adds	r3, #4
 801f74e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801f750:	4299      	cmp	r1, r3
 801f752:	d10a      	bne.n	801f76a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801f754:	4a19      	ldr	r2, [pc, #100]	; (801f7bc <etharp_output+0x1fc>)
 801f756:	7dfb      	ldrb	r3, [r7, #23]
 801f758:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801f75a:	7dfb      	ldrb	r3, [r7, #23]
 801f75c:	461a      	mov	r2, r3
 801f75e:	68b9      	ldr	r1, [r7, #8]
 801f760:	68f8      	ldr	r0, [r7, #12]
 801f762:	f7ff fe93 	bl	801f48c <etharp_output_to_arp_index>
 801f766:	4603      	mov	r3, r0
 801f768:	e018      	b.n	801f79c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801f76a:	7dfb      	ldrb	r3, [r7, #23]
 801f76c:	3301      	adds	r3, #1
 801f76e:	75fb      	strb	r3, [r7, #23]
 801f770:	7dfb      	ldrb	r3, [r7, #23]
 801f772:	2b09      	cmp	r3, #9
 801f774:	d9ca      	bls.n	801f70c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801f776:	68ba      	ldr	r2, [r7, #8]
 801f778:	69b9      	ldr	r1, [r7, #24]
 801f77a:	68f8      	ldr	r0, [r7, #12]
 801f77c:	f000 f822 	bl	801f7c4 <etharp_query>
 801f780:	4603      	mov	r3, r0
 801f782:	e00b      	b.n	801f79c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801f784:	68fb      	ldr	r3, [r7, #12]
 801f786:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801f78a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f78e:	9300      	str	r3, [sp, #0]
 801f790:	69fb      	ldr	r3, [r7, #28]
 801f792:	68b9      	ldr	r1, [r7, #8]
 801f794:	68f8      	ldr	r0, [r7, #12]
 801f796:	f001 fdd5 	bl	8021344 <ethernet_output>
 801f79a:	4603      	mov	r3, r0
}
 801f79c:	4618      	mov	r0, r3
 801f79e:	3720      	adds	r7, #32
 801f7a0:	46bd      	mov	sp, r7
 801f7a2:	bd80      	pop	{r7, pc}
 801f7a4:	0802b820 	.word	0x0802b820
 801f7a8:	0802b970 	.word	0x0802b970
 801f7ac:	0802b898 	.word	0x0802b898
 801f7b0:	0802b9c0 	.word	0x0802b9c0
 801f7b4:	0802b960 	.word	0x0802b960
 801f7b8:	0802c1e8 	.word	0x0802c1e8
 801f7bc:	20016108 	.word	0x20016108
 801f7c0:	20016018 	.word	0x20016018

0801f7c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801f7c4:	b580      	push	{r7, lr}
 801f7c6:	b08c      	sub	sp, #48	; 0x30
 801f7c8:	af02      	add	r7, sp, #8
 801f7ca:	60f8      	str	r0, [r7, #12]
 801f7cc:	60b9      	str	r1, [r7, #8]
 801f7ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801f7d0:	68fb      	ldr	r3, [r7, #12]
 801f7d2:	3326      	adds	r3, #38	; 0x26
 801f7d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801f7d6:	23ff      	movs	r3, #255	; 0xff
 801f7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801f7dc:	2300      	movs	r3, #0
 801f7de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f7e0:	68bb      	ldr	r3, [r7, #8]
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	68f9      	ldr	r1, [r7, #12]
 801f7e6:	4618      	mov	r0, r3
 801f7e8:	f000 fe0e 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801f7ec:	4603      	mov	r3, r0
 801f7ee:	2b00      	cmp	r3, #0
 801f7f0:	d10c      	bne.n	801f80c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f7f2:	68bb      	ldr	r3, [r7, #8]
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801f7fa:	2be0      	cmp	r3, #224	; 0xe0
 801f7fc:	d006      	beq.n	801f80c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801f7fe:	68bb      	ldr	r3, [r7, #8]
 801f800:	2b00      	cmp	r3, #0
 801f802:	d003      	beq.n	801f80c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801f804:	68bb      	ldr	r3, [r7, #8]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d102      	bne.n	801f812 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801f80c:	f06f 030f 	mvn.w	r3, #15
 801f810:	e101      	b.n	801fa16 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801f812:	68fa      	ldr	r2, [r7, #12]
 801f814:	2101      	movs	r1, #1
 801f816:	68b8      	ldr	r0, [r7, #8]
 801f818:	f7ff fb60 	bl	801eedc <etharp_find_entry>
 801f81c:	4603      	mov	r3, r0
 801f81e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801f820:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f824:	2b00      	cmp	r3, #0
 801f826:	da02      	bge.n	801f82e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801f828:	8a7b      	ldrh	r3, [r7, #18]
 801f82a:	b25b      	sxtb	r3, r3
 801f82c:	e0f3      	b.n	801fa16 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801f82e:	8a7b      	ldrh	r3, [r7, #18]
 801f830:	2b7e      	cmp	r3, #126	; 0x7e
 801f832:	d906      	bls.n	801f842 <etharp_query+0x7e>
 801f834:	4b7a      	ldr	r3, [pc, #488]	; (801fa20 <etharp_query+0x25c>)
 801f836:	f240 32c1 	movw	r2, #961	; 0x3c1
 801f83a:	497a      	ldr	r1, [pc, #488]	; (801fa24 <etharp_query+0x260>)
 801f83c:	487a      	ldr	r0, [pc, #488]	; (801fa28 <etharp_query+0x264>)
 801f83e:	f004 f811 	bl	8023864 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801f842:	8a7b      	ldrh	r3, [r7, #18]
 801f844:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801f846:	7c7a      	ldrb	r2, [r7, #17]
 801f848:	4978      	ldr	r1, [pc, #480]	; (801fa2c <etharp_query+0x268>)
 801f84a:	4613      	mov	r3, r2
 801f84c:	005b      	lsls	r3, r3, #1
 801f84e:	4413      	add	r3, r2
 801f850:	00db      	lsls	r3, r3, #3
 801f852:	440b      	add	r3, r1
 801f854:	3314      	adds	r3, #20
 801f856:	781b      	ldrb	r3, [r3, #0]
 801f858:	2b00      	cmp	r3, #0
 801f85a:	d115      	bne.n	801f888 <etharp_query+0xc4>
    is_new_entry = 1;
 801f85c:	2301      	movs	r3, #1
 801f85e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801f860:	7c7a      	ldrb	r2, [r7, #17]
 801f862:	4972      	ldr	r1, [pc, #456]	; (801fa2c <etharp_query+0x268>)
 801f864:	4613      	mov	r3, r2
 801f866:	005b      	lsls	r3, r3, #1
 801f868:	4413      	add	r3, r2
 801f86a:	00db      	lsls	r3, r3, #3
 801f86c:	440b      	add	r3, r1
 801f86e:	3314      	adds	r3, #20
 801f870:	2201      	movs	r2, #1
 801f872:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801f874:	7c7a      	ldrb	r2, [r7, #17]
 801f876:	496d      	ldr	r1, [pc, #436]	; (801fa2c <etharp_query+0x268>)
 801f878:	4613      	mov	r3, r2
 801f87a:	005b      	lsls	r3, r3, #1
 801f87c:	4413      	add	r3, r2
 801f87e:	00db      	lsls	r3, r3, #3
 801f880:	440b      	add	r3, r1
 801f882:	3308      	adds	r3, #8
 801f884:	68fa      	ldr	r2, [r7, #12]
 801f886:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801f888:	7c7a      	ldrb	r2, [r7, #17]
 801f88a:	4968      	ldr	r1, [pc, #416]	; (801fa2c <etharp_query+0x268>)
 801f88c:	4613      	mov	r3, r2
 801f88e:	005b      	lsls	r3, r3, #1
 801f890:	4413      	add	r3, r2
 801f892:	00db      	lsls	r3, r3, #3
 801f894:	440b      	add	r3, r1
 801f896:	3314      	adds	r3, #20
 801f898:	781b      	ldrb	r3, [r3, #0]
 801f89a:	2b01      	cmp	r3, #1
 801f89c:	d011      	beq.n	801f8c2 <etharp_query+0xfe>
 801f89e:	7c7a      	ldrb	r2, [r7, #17]
 801f8a0:	4962      	ldr	r1, [pc, #392]	; (801fa2c <etharp_query+0x268>)
 801f8a2:	4613      	mov	r3, r2
 801f8a4:	005b      	lsls	r3, r3, #1
 801f8a6:	4413      	add	r3, r2
 801f8a8:	00db      	lsls	r3, r3, #3
 801f8aa:	440b      	add	r3, r1
 801f8ac:	3314      	adds	r3, #20
 801f8ae:	781b      	ldrb	r3, [r3, #0]
 801f8b0:	2b01      	cmp	r3, #1
 801f8b2:	d806      	bhi.n	801f8c2 <etharp_query+0xfe>
 801f8b4:	4b5a      	ldr	r3, [pc, #360]	; (801fa20 <etharp_query+0x25c>)
 801f8b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 801f8ba:	495d      	ldr	r1, [pc, #372]	; (801fa30 <etharp_query+0x26c>)
 801f8bc:	485a      	ldr	r0, [pc, #360]	; (801fa28 <etharp_query+0x264>)
 801f8be:	f003 ffd1 	bl	8023864 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801f8c2:	6a3b      	ldr	r3, [r7, #32]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d102      	bne.n	801f8ce <etharp_query+0x10a>
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	2b00      	cmp	r3, #0
 801f8cc:	d10c      	bne.n	801f8e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801f8ce:	68b9      	ldr	r1, [r7, #8]
 801f8d0:	68f8      	ldr	r0, [r7, #12]
 801f8d2:	f000 f963 	bl	801fb9c <etharp_request>
 801f8d6:	4603      	mov	r3, r0
 801f8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d102      	bne.n	801f8e8 <etharp_query+0x124>
      return result;
 801f8e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801f8e6:	e096      	b.n	801fa16 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	2b00      	cmp	r3, #0
 801f8ec:	d106      	bne.n	801f8fc <etharp_query+0x138>
 801f8ee:	4b4c      	ldr	r3, [pc, #304]	; (801fa20 <etharp_query+0x25c>)
 801f8f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 801f8f4:	494f      	ldr	r1, [pc, #316]	; (801fa34 <etharp_query+0x270>)
 801f8f6:	484c      	ldr	r0, [pc, #304]	; (801fa28 <etharp_query+0x264>)
 801f8f8:	f003 ffb4 	bl	8023864 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801f8fc:	7c7a      	ldrb	r2, [r7, #17]
 801f8fe:	494b      	ldr	r1, [pc, #300]	; (801fa2c <etharp_query+0x268>)
 801f900:	4613      	mov	r3, r2
 801f902:	005b      	lsls	r3, r3, #1
 801f904:	4413      	add	r3, r2
 801f906:	00db      	lsls	r3, r3, #3
 801f908:	440b      	add	r3, r1
 801f90a:	3314      	adds	r3, #20
 801f90c:	781b      	ldrb	r3, [r3, #0]
 801f90e:	2b01      	cmp	r3, #1
 801f910:	d917      	bls.n	801f942 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801f912:	4a49      	ldr	r2, [pc, #292]	; (801fa38 <etharp_query+0x274>)
 801f914:	7c7b      	ldrb	r3, [r7, #17]
 801f916:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801f918:	7c7a      	ldrb	r2, [r7, #17]
 801f91a:	4613      	mov	r3, r2
 801f91c:	005b      	lsls	r3, r3, #1
 801f91e:	4413      	add	r3, r2
 801f920:	00db      	lsls	r3, r3, #3
 801f922:	3308      	adds	r3, #8
 801f924:	4a41      	ldr	r2, [pc, #260]	; (801fa2c <etharp_query+0x268>)
 801f926:	4413      	add	r3, r2
 801f928:	3304      	adds	r3, #4
 801f92a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f92e:	9200      	str	r2, [sp, #0]
 801f930:	697a      	ldr	r2, [r7, #20]
 801f932:	6879      	ldr	r1, [r7, #4]
 801f934:	68f8      	ldr	r0, [r7, #12]
 801f936:	f001 fd05 	bl	8021344 <ethernet_output>
 801f93a:	4603      	mov	r3, r0
 801f93c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801f940:	e067      	b.n	801fa12 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801f942:	7c7a      	ldrb	r2, [r7, #17]
 801f944:	4939      	ldr	r1, [pc, #228]	; (801fa2c <etharp_query+0x268>)
 801f946:	4613      	mov	r3, r2
 801f948:	005b      	lsls	r3, r3, #1
 801f94a:	4413      	add	r3, r2
 801f94c:	00db      	lsls	r3, r3, #3
 801f94e:	440b      	add	r3, r1
 801f950:	3314      	adds	r3, #20
 801f952:	781b      	ldrb	r3, [r3, #0]
 801f954:	2b01      	cmp	r3, #1
 801f956:	d15c      	bne.n	801fa12 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801f958:	2300      	movs	r3, #0
 801f95a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f960:	e01c      	b.n	801f99c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801f962:	69fb      	ldr	r3, [r7, #28]
 801f964:	895a      	ldrh	r2, [r3, #10]
 801f966:	69fb      	ldr	r3, [r7, #28]
 801f968:	891b      	ldrh	r3, [r3, #8]
 801f96a:	429a      	cmp	r2, r3
 801f96c:	d10a      	bne.n	801f984 <etharp_query+0x1c0>
 801f96e:	69fb      	ldr	r3, [r7, #28]
 801f970:	681b      	ldr	r3, [r3, #0]
 801f972:	2b00      	cmp	r3, #0
 801f974:	d006      	beq.n	801f984 <etharp_query+0x1c0>
 801f976:	4b2a      	ldr	r3, [pc, #168]	; (801fa20 <etharp_query+0x25c>)
 801f978:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801f97c:	492f      	ldr	r1, [pc, #188]	; (801fa3c <etharp_query+0x278>)
 801f97e:	482a      	ldr	r0, [pc, #168]	; (801fa28 <etharp_query+0x264>)
 801f980:	f003 ff70 	bl	8023864 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801f984:	69fb      	ldr	r3, [r7, #28]
 801f986:	7b1b      	ldrb	r3, [r3, #12]
 801f988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f98c:	2b00      	cmp	r3, #0
 801f98e:	d002      	beq.n	801f996 <etharp_query+0x1d2>
        copy_needed = 1;
 801f990:	2301      	movs	r3, #1
 801f992:	61bb      	str	r3, [r7, #24]
        break;
 801f994:	e005      	b.n	801f9a2 <etharp_query+0x1de>
      }
      p = p->next;
 801f996:	69fb      	ldr	r3, [r7, #28]
 801f998:	681b      	ldr	r3, [r3, #0]
 801f99a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801f99c:	69fb      	ldr	r3, [r7, #28]
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d1df      	bne.n	801f962 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801f9a2:	69bb      	ldr	r3, [r7, #24]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d007      	beq.n	801f9b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801f9a8:	687a      	ldr	r2, [r7, #4]
 801f9aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 801f9ae:	200e      	movs	r0, #14
 801f9b0:	f7f8 fa4a 	bl	8017e48 <pbuf_clone>
 801f9b4:	61f8      	str	r0, [r7, #28]
 801f9b6:	e004      	b.n	801f9c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801f9bc:	69f8      	ldr	r0, [r7, #28]
 801f9be:	f7f7 ff39 	bl	8017834 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801f9c2:	69fb      	ldr	r3, [r7, #28]
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d021      	beq.n	801fa0c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801f9c8:	7c7a      	ldrb	r2, [r7, #17]
 801f9ca:	4918      	ldr	r1, [pc, #96]	; (801fa2c <etharp_query+0x268>)
 801f9cc:	4613      	mov	r3, r2
 801f9ce:	005b      	lsls	r3, r3, #1
 801f9d0:	4413      	add	r3, r2
 801f9d2:	00db      	lsls	r3, r3, #3
 801f9d4:	440b      	add	r3, r1
 801f9d6:	681b      	ldr	r3, [r3, #0]
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	d00a      	beq.n	801f9f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801f9dc:	7c7a      	ldrb	r2, [r7, #17]
 801f9de:	4913      	ldr	r1, [pc, #76]	; (801fa2c <etharp_query+0x268>)
 801f9e0:	4613      	mov	r3, r2
 801f9e2:	005b      	lsls	r3, r3, #1
 801f9e4:	4413      	add	r3, r2
 801f9e6:	00db      	lsls	r3, r3, #3
 801f9e8:	440b      	add	r3, r1
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	4618      	mov	r0, r3
 801f9ee:	f7f7 fe7b 	bl	80176e8 <pbuf_free>
      }
      arp_table[i].q = p;
 801f9f2:	7c7a      	ldrb	r2, [r7, #17]
 801f9f4:	490d      	ldr	r1, [pc, #52]	; (801fa2c <etharp_query+0x268>)
 801f9f6:	4613      	mov	r3, r2
 801f9f8:	005b      	lsls	r3, r3, #1
 801f9fa:	4413      	add	r3, r2
 801f9fc:	00db      	lsls	r3, r3, #3
 801f9fe:	440b      	add	r3, r1
 801fa00:	69fa      	ldr	r2, [r7, #28]
 801fa02:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801fa04:	2300      	movs	r3, #0
 801fa06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801fa0a:	e002      	b.n	801fa12 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801fa0c:	23ff      	movs	r3, #255	; 0xff
 801fa0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801fa12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801fa16:	4618      	mov	r0, r3
 801fa18:	3728      	adds	r7, #40	; 0x28
 801fa1a:	46bd      	mov	sp, r7
 801fa1c:	bd80      	pop	{r7, pc}
 801fa1e:	bf00      	nop
 801fa20:	0802b820 	.word	0x0802b820
 801fa24:	0802b9cc 	.word	0x0802b9cc
 801fa28:	0802b898 	.word	0x0802b898
 801fa2c:	20016018 	.word	0x20016018
 801fa30:	0802b9dc 	.word	0x0802b9dc
 801fa34:	0802b9c0 	.word	0x0802b9c0
 801fa38:	20016108 	.word	0x20016108
 801fa3c:	0802ba04 	.word	0x0802ba04

0801fa40 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801fa40:	b580      	push	{r7, lr}
 801fa42:	b08a      	sub	sp, #40	; 0x28
 801fa44:	af02      	add	r7, sp, #8
 801fa46:	60f8      	str	r0, [r7, #12]
 801fa48:	60b9      	str	r1, [r7, #8]
 801fa4a:	607a      	str	r2, [r7, #4]
 801fa4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801fa4e:	2300      	movs	r3, #0
 801fa50:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d106      	bne.n	801fa66 <etharp_raw+0x26>
 801fa58:	4b3a      	ldr	r3, [pc, #232]	; (801fb44 <etharp_raw+0x104>)
 801fa5a:	f240 4257 	movw	r2, #1111	; 0x457
 801fa5e:	493a      	ldr	r1, [pc, #232]	; (801fb48 <etharp_raw+0x108>)
 801fa60:	483a      	ldr	r0, [pc, #232]	; (801fb4c <etharp_raw+0x10c>)
 801fa62:	f003 feff 	bl	8023864 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801fa66:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fa6a:	211c      	movs	r1, #28
 801fa6c:	200e      	movs	r0, #14
 801fa6e:	f7f7 fb57 	bl	8017120 <pbuf_alloc>
 801fa72:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801fa74:	69bb      	ldr	r3, [r7, #24]
 801fa76:	2b00      	cmp	r3, #0
 801fa78:	d102      	bne.n	801fa80 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801fa7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fa7e:	e05d      	b.n	801fb3c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801fa80:	69bb      	ldr	r3, [r7, #24]
 801fa82:	895b      	ldrh	r3, [r3, #10]
 801fa84:	2b1b      	cmp	r3, #27
 801fa86:	d806      	bhi.n	801fa96 <etharp_raw+0x56>
 801fa88:	4b2e      	ldr	r3, [pc, #184]	; (801fb44 <etharp_raw+0x104>)
 801fa8a:	f240 4262 	movw	r2, #1122	; 0x462
 801fa8e:	4930      	ldr	r1, [pc, #192]	; (801fb50 <etharp_raw+0x110>)
 801fa90:	482e      	ldr	r0, [pc, #184]	; (801fb4c <etharp_raw+0x10c>)
 801fa92:	f003 fee7 	bl	8023864 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801fa96:	69bb      	ldr	r3, [r7, #24]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801fa9c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801fa9e:	4618      	mov	r0, r3
 801faa0:	f7f5 ff66 	bl	8015970 <lwip_htons>
 801faa4:	4603      	mov	r3, r0
 801faa6:	461a      	mov	r2, r3
 801faa8:	697b      	ldr	r3, [r7, #20]
 801faaa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801faac:	68fb      	ldr	r3, [r7, #12]
 801faae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801fab2:	2b06      	cmp	r3, #6
 801fab4:	d006      	beq.n	801fac4 <etharp_raw+0x84>
 801fab6:	4b23      	ldr	r3, [pc, #140]	; (801fb44 <etharp_raw+0x104>)
 801fab8:	f240 4269 	movw	r2, #1129	; 0x469
 801fabc:	4925      	ldr	r1, [pc, #148]	; (801fb54 <etharp_raw+0x114>)
 801fabe:	4823      	ldr	r0, [pc, #140]	; (801fb4c <etharp_raw+0x10c>)
 801fac0:	f003 fed0 	bl	8023864 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fac4:	697b      	ldr	r3, [r7, #20]
 801fac6:	3308      	adds	r3, #8
 801fac8:	2206      	movs	r2, #6
 801faca:	6839      	ldr	r1, [r7, #0]
 801facc:	4618      	mov	r0, r3
 801face:	f005 f9ec 	bl	8024eaa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801fad2:	697b      	ldr	r3, [r7, #20]
 801fad4:	3312      	adds	r3, #18
 801fad6:	2206      	movs	r2, #6
 801fad8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fada:	4618      	mov	r0, r3
 801fadc:	f005 f9e5 	bl	8024eaa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801fae0:	697b      	ldr	r3, [r7, #20]
 801fae2:	330e      	adds	r3, #14
 801fae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fae6:	6812      	ldr	r2, [r2, #0]
 801fae8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801faea:	697b      	ldr	r3, [r7, #20]
 801faec:	3318      	adds	r3, #24
 801faee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801faf0:	6812      	ldr	r2, [r2, #0]
 801faf2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801faf4:	697b      	ldr	r3, [r7, #20]
 801faf6:	2200      	movs	r2, #0
 801faf8:	701a      	strb	r2, [r3, #0]
 801fafa:	2200      	movs	r2, #0
 801fafc:	f042 0201 	orr.w	r2, r2, #1
 801fb00:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801fb02:	697b      	ldr	r3, [r7, #20]
 801fb04:	2200      	movs	r2, #0
 801fb06:	f042 0208 	orr.w	r2, r2, #8
 801fb0a:	709a      	strb	r2, [r3, #2]
 801fb0c:	2200      	movs	r2, #0
 801fb0e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801fb10:	697b      	ldr	r3, [r7, #20]
 801fb12:	2206      	movs	r2, #6
 801fb14:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801fb16:	697b      	ldr	r3, [r7, #20]
 801fb18:	2204      	movs	r2, #4
 801fb1a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fb1c:	f640 0306 	movw	r3, #2054	; 0x806
 801fb20:	9300      	str	r3, [sp, #0]
 801fb22:	687b      	ldr	r3, [r7, #4]
 801fb24:	68ba      	ldr	r2, [r7, #8]
 801fb26:	69b9      	ldr	r1, [r7, #24]
 801fb28:	68f8      	ldr	r0, [r7, #12]
 801fb2a:	f001 fc0b 	bl	8021344 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801fb2e:	69b8      	ldr	r0, [r7, #24]
 801fb30:	f7f7 fdda 	bl	80176e8 <pbuf_free>
  p = NULL;
 801fb34:	2300      	movs	r3, #0
 801fb36:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801fb38:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801fb3c:	4618      	mov	r0, r3
 801fb3e:	3720      	adds	r7, #32
 801fb40:	46bd      	mov	sp, r7
 801fb42:	bd80      	pop	{r7, pc}
 801fb44:	0802b820 	.word	0x0802b820
 801fb48:	0802b970 	.word	0x0802b970
 801fb4c:	0802b898 	.word	0x0802b898
 801fb50:	0802ba20 	.word	0x0802ba20
 801fb54:	0802ba54 	.word	0x0802ba54

0801fb58 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801fb58:	b580      	push	{r7, lr}
 801fb5a:	b088      	sub	sp, #32
 801fb5c:	af04      	add	r7, sp, #16
 801fb5e:	60f8      	str	r0, [r7, #12]
 801fb60:	60b9      	str	r1, [r7, #8]
 801fb62:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fb64:	68fb      	ldr	r3, [r7, #12]
 801fb66:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801fb6a:	68fb      	ldr	r3, [r7, #12]
 801fb6c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fb74:	2201      	movs	r2, #1
 801fb76:	9203      	str	r2, [sp, #12]
 801fb78:	68ba      	ldr	r2, [r7, #8]
 801fb7a:	9202      	str	r2, [sp, #8]
 801fb7c:	4a06      	ldr	r2, [pc, #24]	; (801fb98 <etharp_request_dst+0x40>)
 801fb7e:	9201      	str	r2, [sp, #4]
 801fb80:	9300      	str	r3, [sp, #0]
 801fb82:	4603      	mov	r3, r0
 801fb84:	687a      	ldr	r2, [r7, #4]
 801fb86:	68f8      	ldr	r0, [r7, #12]
 801fb88:	f7ff ff5a 	bl	801fa40 <etharp_raw>
 801fb8c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801fb8e:	4618      	mov	r0, r3
 801fb90:	3710      	adds	r7, #16
 801fb92:	46bd      	mov	sp, r7
 801fb94:	bd80      	pop	{r7, pc}
 801fb96:	bf00      	nop
 801fb98:	0802c1f0 	.word	0x0802c1f0

0801fb9c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801fb9c:	b580      	push	{r7, lr}
 801fb9e:	b082      	sub	sp, #8
 801fba0:	af00      	add	r7, sp, #0
 801fba2:	6078      	str	r0, [r7, #4]
 801fba4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801fba6:	4a05      	ldr	r2, [pc, #20]	; (801fbbc <etharp_request+0x20>)
 801fba8:	6839      	ldr	r1, [r7, #0]
 801fbaa:	6878      	ldr	r0, [r7, #4]
 801fbac:	f7ff ffd4 	bl	801fb58 <etharp_request_dst>
 801fbb0:	4603      	mov	r3, r0
}
 801fbb2:	4618      	mov	r0, r3
 801fbb4:	3708      	adds	r7, #8
 801fbb6:	46bd      	mov	sp, r7
 801fbb8:	bd80      	pop	{r7, pc}
 801fbba:	bf00      	nop
 801fbbc:	0802c1e8 	.word	0x0802c1e8

0801fbc0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801fbc0:	b580      	push	{r7, lr}
 801fbc2:	b08e      	sub	sp, #56	; 0x38
 801fbc4:	af04      	add	r7, sp, #16
 801fbc6:	6078      	str	r0, [r7, #4]
 801fbc8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801fbca:	4b79      	ldr	r3, [pc, #484]	; (801fdb0 <icmp_input+0x1f0>)
 801fbcc:	689b      	ldr	r3, [r3, #8]
 801fbce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801fbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd2:	781b      	ldrb	r3, [r3, #0]
 801fbd4:	f003 030f 	and.w	r3, r3, #15
 801fbd8:	b2db      	uxtb	r3, r3
 801fbda:	009b      	lsls	r3, r3, #2
 801fbdc:	b2db      	uxtb	r3, r3
 801fbde:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801fbe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fbe2:	2b13      	cmp	r3, #19
 801fbe4:	f240 80cd 	bls.w	801fd82 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801fbe8:	687b      	ldr	r3, [r7, #4]
 801fbea:	895b      	ldrh	r3, [r3, #10]
 801fbec:	2b03      	cmp	r3, #3
 801fbee:	f240 80ca 	bls.w	801fd86 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	685b      	ldr	r3, [r3, #4]
 801fbf6:	781b      	ldrb	r3, [r3, #0]
 801fbf8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801fbfc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801fc00:	2b00      	cmp	r3, #0
 801fc02:	f000 80b7 	beq.w	801fd74 <icmp_input+0x1b4>
 801fc06:	2b08      	cmp	r3, #8
 801fc08:	f040 80b7 	bne.w	801fd7a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801fc0c:	4b69      	ldr	r3, [pc, #420]	; (801fdb4 <icmp_input+0x1f4>)
 801fc0e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801fc10:	4b67      	ldr	r3, [pc, #412]	; (801fdb0 <icmp_input+0x1f0>)
 801fc12:	695b      	ldr	r3, [r3, #20]
 801fc14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fc18:	2be0      	cmp	r3, #224	; 0xe0
 801fc1a:	f000 80bb 	beq.w	801fd94 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801fc1e:	4b64      	ldr	r3, [pc, #400]	; (801fdb0 <icmp_input+0x1f0>)
 801fc20:	695b      	ldr	r3, [r3, #20]
 801fc22:	4a63      	ldr	r2, [pc, #396]	; (801fdb0 <icmp_input+0x1f0>)
 801fc24:	6812      	ldr	r2, [r2, #0]
 801fc26:	4611      	mov	r1, r2
 801fc28:	4618      	mov	r0, r3
 801fc2a:	f000 fbed 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801fc2e:	4603      	mov	r3, r0
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	f040 80b1 	bne.w	801fd98 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801fc36:	687b      	ldr	r3, [r7, #4]
 801fc38:	891b      	ldrh	r3, [r3, #8]
 801fc3a:	2b07      	cmp	r3, #7
 801fc3c:	f240 80a5 	bls.w	801fd8a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801fc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fc42:	330e      	adds	r3, #14
 801fc44:	4619      	mov	r1, r3
 801fc46:	6878      	ldr	r0, [r7, #4]
 801fc48:	f7f7 fcb8 	bl	80175bc <pbuf_add_header>
 801fc4c:	4603      	mov	r3, r0
 801fc4e:	2b00      	cmp	r3, #0
 801fc50:	d04b      	beq.n	801fcea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	891a      	ldrh	r2, [r3, #8]
 801fc56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fc58:	4413      	add	r3, r2
 801fc5a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	891b      	ldrh	r3, [r3, #8]
 801fc60:	8b7a      	ldrh	r2, [r7, #26]
 801fc62:	429a      	cmp	r2, r3
 801fc64:	f0c0 809a 	bcc.w	801fd9c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801fc68:	8b7b      	ldrh	r3, [r7, #26]
 801fc6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fc6e:	4619      	mov	r1, r3
 801fc70:	200e      	movs	r0, #14
 801fc72:	f7f7 fa55 	bl	8017120 <pbuf_alloc>
 801fc76:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801fc78:	697b      	ldr	r3, [r7, #20]
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	f000 8090 	beq.w	801fda0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801fc80:	697b      	ldr	r3, [r7, #20]
 801fc82:	895b      	ldrh	r3, [r3, #10]
 801fc84:	461a      	mov	r2, r3
 801fc86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fc88:	3308      	adds	r3, #8
 801fc8a:	429a      	cmp	r2, r3
 801fc8c:	d203      	bcs.n	801fc96 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801fc8e:	6978      	ldr	r0, [r7, #20]
 801fc90:	f7f7 fd2a 	bl	80176e8 <pbuf_free>
          goto icmperr;
 801fc94:	e085      	b.n	801fda2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801fc96:	697b      	ldr	r3, [r7, #20]
 801fc98:	685b      	ldr	r3, [r3, #4]
 801fc9a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801fc9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fc9e:	4618      	mov	r0, r3
 801fca0:	f005 f903 	bl	8024eaa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801fca4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fca6:	4619      	mov	r1, r3
 801fca8:	6978      	ldr	r0, [r7, #20]
 801fcaa:	f7f7 fc97 	bl	80175dc <pbuf_remove_header>
 801fcae:	4603      	mov	r3, r0
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d009      	beq.n	801fcc8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801fcb4:	4b40      	ldr	r3, [pc, #256]	; (801fdb8 <icmp_input+0x1f8>)
 801fcb6:	22b6      	movs	r2, #182	; 0xb6
 801fcb8:	4940      	ldr	r1, [pc, #256]	; (801fdbc <icmp_input+0x1fc>)
 801fcba:	4841      	ldr	r0, [pc, #260]	; (801fdc0 <icmp_input+0x200>)
 801fcbc:	f003 fdd2 	bl	8023864 <iprintf>
          pbuf_free(r);
 801fcc0:	6978      	ldr	r0, [r7, #20]
 801fcc2:	f7f7 fd11 	bl	80176e8 <pbuf_free>
          goto icmperr;
 801fcc6:	e06c      	b.n	801fda2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801fcc8:	6879      	ldr	r1, [r7, #4]
 801fcca:	6978      	ldr	r0, [r7, #20]
 801fccc:	f7f7 fe40 	bl	8017950 <pbuf_copy>
 801fcd0:	4603      	mov	r3, r0
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d003      	beq.n	801fcde <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801fcd6:	6978      	ldr	r0, [r7, #20]
 801fcd8:	f7f7 fd06 	bl	80176e8 <pbuf_free>
          goto icmperr;
 801fcdc:	e061      	b.n	801fda2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801fcde:	6878      	ldr	r0, [r7, #4]
 801fce0:	f7f7 fd02 	bl	80176e8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801fce4:	697b      	ldr	r3, [r7, #20]
 801fce6:	607b      	str	r3, [r7, #4]
 801fce8:	e00f      	b.n	801fd0a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801fcea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fcec:	330e      	adds	r3, #14
 801fcee:	4619      	mov	r1, r3
 801fcf0:	6878      	ldr	r0, [r7, #4]
 801fcf2:	f7f7 fc73 	bl	80175dc <pbuf_remove_header>
 801fcf6:	4603      	mov	r3, r0
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	d006      	beq.n	801fd0a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801fcfc:	4b2e      	ldr	r3, [pc, #184]	; (801fdb8 <icmp_input+0x1f8>)
 801fcfe:	22c7      	movs	r2, #199	; 0xc7
 801fd00:	4930      	ldr	r1, [pc, #192]	; (801fdc4 <icmp_input+0x204>)
 801fd02:	482f      	ldr	r0, [pc, #188]	; (801fdc0 <icmp_input+0x200>)
 801fd04:	f003 fdae 	bl	8023864 <iprintf>
          goto icmperr;
 801fd08:	e04b      	b.n	801fda2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	685b      	ldr	r3, [r3, #4]
 801fd0e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801fd10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fd12:	4619      	mov	r1, r3
 801fd14:	6878      	ldr	r0, [r7, #4]
 801fd16:	f7f7 fc51 	bl	80175bc <pbuf_add_header>
 801fd1a:	4603      	mov	r3, r0
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d12b      	bne.n	801fd78 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	685b      	ldr	r3, [r3, #4]
 801fd24:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801fd26:	69fb      	ldr	r3, [r7, #28]
 801fd28:	681a      	ldr	r2, [r3, #0]
 801fd2a:	68fb      	ldr	r3, [r7, #12]
 801fd2c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801fd2e:	4b20      	ldr	r3, [pc, #128]	; (801fdb0 <icmp_input+0x1f0>)
 801fd30:	691a      	ldr	r2, [r3, #16]
 801fd32:	68fb      	ldr	r3, [r7, #12]
 801fd34:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801fd36:	693b      	ldr	r3, [r7, #16]
 801fd38:	2200      	movs	r2, #0
 801fd3a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801fd3c:	693b      	ldr	r3, [r7, #16]
 801fd3e:	2200      	movs	r2, #0
 801fd40:	709a      	strb	r2, [r3, #2]
 801fd42:	2200      	movs	r2, #0
 801fd44:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801fd46:	68fb      	ldr	r3, [r7, #12]
 801fd48:	22ff      	movs	r2, #255	; 0xff
 801fd4a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801fd4c:	68fb      	ldr	r3, [r7, #12]
 801fd4e:	2200      	movs	r2, #0
 801fd50:	729a      	strb	r2, [r3, #10]
 801fd52:	2200      	movs	r2, #0
 801fd54:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801fd56:	683b      	ldr	r3, [r7, #0]
 801fd58:	9302      	str	r3, [sp, #8]
 801fd5a:	2301      	movs	r3, #1
 801fd5c:	9301      	str	r3, [sp, #4]
 801fd5e:	2300      	movs	r3, #0
 801fd60:	9300      	str	r3, [sp, #0]
 801fd62:	23ff      	movs	r3, #255	; 0xff
 801fd64:	2200      	movs	r2, #0
 801fd66:	69f9      	ldr	r1, [r7, #28]
 801fd68:	6878      	ldr	r0, [r7, #4]
 801fd6a:	f000 fa75 	bl	8020258 <ip4_output_if>
 801fd6e:	4603      	mov	r3, r0
 801fd70:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801fd72:	e001      	b.n	801fd78 <icmp_input+0x1b8>
      break;
 801fd74:	bf00      	nop
 801fd76:	e000      	b.n	801fd7a <icmp_input+0x1ba>
      break;
 801fd78:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801fd7a:	6878      	ldr	r0, [r7, #4]
 801fd7c:	f7f7 fcb4 	bl	80176e8 <pbuf_free>
  return;
 801fd80:	e013      	b.n	801fdaa <icmp_input+0x1ea>
    goto lenerr;
 801fd82:	bf00      	nop
 801fd84:	e002      	b.n	801fd8c <icmp_input+0x1cc>
    goto lenerr;
 801fd86:	bf00      	nop
 801fd88:	e000      	b.n	801fd8c <icmp_input+0x1cc>
        goto lenerr;
 801fd8a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801fd8c:	6878      	ldr	r0, [r7, #4]
 801fd8e:	f7f7 fcab 	bl	80176e8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801fd92:	e00a      	b.n	801fdaa <icmp_input+0x1ea>
        goto icmperr;
 801fd94:	bf00      	nop
 801fd96:	e004      	b.n	801fda2 <icmp_input+0x1e2>
        goto icmperr;
 801fd98:	bf00      	nop
 801fd9a:	e002      	b.n	801fda2 <icmp_input+0x1e2>
          goto icmperr;
 801fd9c:	bf00      	nop
 801fd9e:	e000      	b.n	801fda2 <icmp_input+0x1e2>
          goto icmperr;
 801fda0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801fda2:	6878      	ldr	r0, [r7, #4]
 801fda4:	f7f7 fca0 	bl	80176e8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801fda8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801fdaa:	3728      	adds	r7, #40	; 0x28
 801fdac:	46bd      	mov	sp, r7
 801fdae:	bd80      	pop	{r7, pc}
 801fdb0:	2001243c 	.word	0x2001243c
 801fdb4:	20012450 	.word	0x20012450
 801fdb8:	0802ba98 	.word	0x0802ba98
 801fdbc:	0802bad0 	.word	0x0802bad0
 801fdc0:	0802bb08 	.word	0x0802bb08
 801fdc4:	0802bb30 	.word	0x0802bb30

0801fdc8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801fdc8:	b580      	push	{r7, lr}
 801fdca:	b082      	sub	sp, #8
 801fdcc:	af00      	add	r7, sp, #0
 801fdce:	6078      	str	r0, [r7, #4]
 801fdd0:	460b      	mov	r3, r1
 801fdd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801fdd4:	78fb      	ldrb	r3, [r7, #3]
 801fdd6:	461a      	mov	r2, r3
 801fdd8:	2103      	movs	r1, #3
 801fdda:	6878      	ldr	r0, [r7, #4]
 801fddc:	f000 f814 	bl	801fe08 <icmp_send_response>
}
 801fde0:	bf00      	nop
 801fde2:	3708      	adds	r7, #8
 801fde4:	46bd      	mov	sp, r7
 801fde6:	bd80      	pop	{r7, pc}

0801fde8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801fde8:	b580      	push	{r7, lr}
 801fdea:	b082      	sub	sp, #8
 801fdec:	af00      	add	r7, sp, #0
 801fdee:	6078      	str	r0, [r7, #4]
 801fdf0:	460b      	mov	r3, r1
 801fdf2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801fdf4:	78fb      	ldrb	r3, [r7, #3]
 801fdf6:	461a      	mov	r2, r3
 801fdf8:	210b      	movs	r1, #11
 801fdfa:	6878      	ldr	r0, [r7, #4]
 801fdfc:	f000 f804 	bl	801fe08 <icmp_send_response>
}
 801fe00:	bf00      	nop
 801fe02:	3708      	adds	r7, #8
 801fe04:	46bd      	mov	sp, r7
 801fe06:	bd80      	pop	{r7, pc}

0801fe08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801fe08:	b580      	push	{r7, lr}
 801fe0a:	b08c      	sub	sp, #48	; 0x30
 801fe0c:	af04      	add	r7, sp, #16
 801fe0e:	6078      	str	r0, [r7, #4]
 801fe10:	460b      	mov	r3, r1
 801fe12:	70fb      	strb	r3, [r7, #3]
 801fe14:	4613      	mov	r3, r2
 801fe16:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801fe18:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe1c:	2124      	movs	r1, #36	; 0x24
 801fe1e:	2022      	movs	r0, #34	; 0x22
 801fe20:	f7f7 f97e 	bl	8017120 <pbuf_alloc>
 801fe24:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801fe26:	69fb      	ldr	r3, [r7, #28]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d04c      	beq.n	801fec6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801fe2c:	69fb      	ldr	r3, [r7, #28]
 801fe2e:	895b      	ldrh	r3, [r3, #10]
 801fe30:	2b23      	cmp	r3, #35	; 0x23
 801fe32:	d806      	bhi.n	801fe42 <icmp_send_response+0x3a>
 801fe34:	4b26      	ldr	r3, [pc, #152]	; (801fed0 <icmp_send_response+0xc8>)
 801fe36:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801fe3a:	4926      	ldr	r1, [pc, #152]	; (801fed4 <icmp_send_response+0xcc>)
 801fe3c:	4826      	ldr	r0, [pc, #152]	; (801fed8 <icmp_send_response+0xd0>)
 801fe3e:	f003 fd11 	bl	8023864 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	685b      	ldr	r3, [r3, #4]
 801fe46:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801fe48:	69fb      	ldr	r3, [r7, #28]
 801fe4a:	685b      	ldr	r3, [r3, #4]
 801fe4c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801fe4e:	697b      	ldr	r3, [r7, #20]
 801fe50:	78fa      	ldrb	r2, [r7, #3]
 801fe52:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801fe54:	697b      	ldr	r3, [r7, #20]
 801fe56:	78ba      	ldrb	r2, [r7, #2]
 801fe58:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801fe5a:	697b      	ldr	r3, [r7, #20]
 801fe5c:	2200      	movs	r2, #0
 801fe5e:	711a      	strb	r2, [r3, #4]
 801fe60:	2200      	movs	r2, #0
 801fe62:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801fe64:	697b      	ldr	r3, [r7, #20]
 801fe66:	2200      	movs	r2, #0
 801fe68:	719a      	strb	r2, [r3, #6]
 801fe6a:	2200      	movs	r2, #0
 801fe6c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801fe6e:	69fb      	ldr	r3, [r7, #28]
 801fe70:	685b      	ldr	r3, [r3, #4]
 801fe72:	f103 0008 	add.w	r0, r3, #8
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	685b      	ldr	r3, [r3, #4]
 801fe7a:	221c      	movs	r2, #28
 801fe7c:	4619      	mov	r1, r3
 801fe7e:	f005 f814 	bl	8024eaa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801fe82:	69bb      	ldr	r3, [r7, #24]
 801fe84:	68db      	ldr	r3, [r3, #12]
 801fe86:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801fe88:	f107 030c 	add.w	r3, r7, #12
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	f000 f825 	bl	801fedc <ip4_route>
 801fe92:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801fe94:	693b      	ldr	r3, [r7, #16]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d011      	beq.n	801febe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801fe9a:	697b      	ldr	r3, [r7, #20]
 801fe9c:	2200      	movs	r2, #0
 801fe9e:	709a      	strb	r2, [r3, #2]
 801fea0:	2200      	movs	r2, #0
 801fea2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801fea4:	f107 020c 	add.w	r2, r7, #12
 801fea8:	693b      	ldr	r3, [r7, #16]
 801feaa:	9302      	str	r3, [sp, #8]
 801feac:	2301      	movs	r3, #1
 801feae:	9301      	str	r3, [sp, #4]
 801feb0:	2300      	movs	r3, #0
 801feb2:	9300      	str	r3, [sp, #0]
 801feb4:	23ff      	movs	r3, #255	; 0xff
 801feb6:	2100      	movs	r1, #0
 801feb8:	69f8      	ldr	r0, [r7, #28]
 801feba:	f000 f9cd 	bl	8020258 <ip4_output_if>
  }
  pbuf_free(q);
 801febe:	69f8      	ldr	r0, [r7, #28]
 801fec0:	f7f7 fc12 	bl	80176e8 <pbuf_free>
 801fec4:	e000      	b.n	801fec8 <icmp_send_response+0xc0>
    return;
 801fec6:	bf00      	nop
}
 801fec8:	3720      	adds	r7, #32
 801feca:	46bd      	mov	sp, r7
 801fecc:	bd80      	pop	{r7, pc}
 801fece:	bf00      	nop
 801fed0:	0802ba98 	.word	0x0802ba98
 801fed4:	0802bb64 	.word	0x0802bb64
 801fed8:	0802bb08 	.word	0x0802bb08

0801fedc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801fedc:	b480      	push	{r7}
 801fede:	b085      	sub	sp, #20
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801fee4:	4b33      	ldr	r3, [pc, #204]	; (801ffb4 <ip4_route+0xd8>)
 801fee6:	681b      	ldr	r3, [r3, #0]
 801fee8:	60fb      	str	r3, [r7, #12]
 801feea:	e036      	b.n	801ff5a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801feec:	68fb      	ldr	r3, [r7, #12]
 801feee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801fef2:	f003 0301 	and.w	r3, r3, #1
 801fef6:	b2db      	uxtb	r3, r3
 801fef8:	2b00      	cmp	r3, #0
 801fefa:	d02b      	beq.n	801ff54 <ip4_route+0x78>
 801fefc:	68fb      	ldr	r3, [r7, #12]
 801fefe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff02:	089b      	lsrs	r3, r3, #2
 801ff04:	f003 0301 	and.w	r3, r3, #1
 801ff08:	b2db      	uxtb	r3, r3
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d022      	beq.n	801ff54 <ip4_route+0x78>
 801ff0e:	68fb      	ldr	r3, [r7, #12]
 801ff10:	3304      	adds	r3, #4
 801ff12:	681b      	ldr	r3, [r3, #0]
 801ff14:	2b00      	cmp	r3, #0
 801ff16:	d01d      	beq.n	801ff54 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	681a      	ldr	r2, [r3, #0]
 801ff1c:	68fb      	ldr	r3, [r7, #12]
 801ff1e:	3304      	adds	r3, #4
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	405a      	eors	r2, r3
 801ff24:	68fb      	ldr	r3, [r7, #12]
 801ff26:	3308      	adds	r3, #8
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	4013      	ands	r3, r2
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	d101      	bne.n	801ff34 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ff30:	68fb      	ldr	r3, [r7, #12]
 801ff32:	e038      	b.n	801ffa6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ff34:	68fb      	ldr	r3, [r7, #12]
 801ff36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff3a:	f003 0302 	and.w	r3, r3, #2
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d108      	bne.n	801ff54 <ip4_route+0x78>
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	681a      	ldr	r2, [r3, #0]
 801ff46:	68fb      	ldr	r3, [r7, #12]
 801ff48:	330c      	adds	r3, #12
 801ff4a:	681b      	ldr	r3, [r3, #0]
 801ff4c:	429a      	cmp	r2, r3
 801ff4e:	d101      	bne.n	801ff54 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ff50:	68fb      	ldr	r3, [r7, #12]
 801ff52:	e028      	b.n	801ffa6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ff54:	68fb      	ldr	r3, [r7, #12]
 801ff56:	681b      	ldr	r3, [r3, #0]
 801ff58:	60fb      	str	r3, [r7, #12]
 801ff5a:	68fb      	ldr	r3, [r7, #12]
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	d1c5      	bne.n	801feec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ff60:	4b15      	ldr	r3, [pc, #84]	; (801ffb8 <ip4_route+0xdc>)
 801ff62:	681b      	ldr	r3, [r3, #0]
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d01a      	beq.n	801ff9e <ip4_route+0xc2>
 801ff68:	4b13      	ldr	r3, [pc, #76]	; (801ffb8 <ip4_route+0xdc>)
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff70:	f003 0301 	and.w	r3, r3, #1
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d012      	beq.n	801ff9e <ip4_route+0xc2>
 801ff78:	4b0f      	ldr	r3, [pc, #60]	; (801ffb8 <ip4_route+0xdc>)
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ff80:	f003 0304 	and.w	r3, r3, #4
 801ff84:	2b00      	cmp	r3, #0
 801ff86:	d00a      	beq.n	801ff9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ff88:	4b0b      	ldr	r3, [pc, #44]	; (801ffb8 <ip4_route+0xdc>)
 801ff8a:	681b      	ldr	r3, [r3, #0]
 801ff8c:	3304      	adds	r3, #4
 801ff8e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d004      	beq.n	801ff9e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ff94:	687b      	ldr	r3, [r7, #4]
 801ff96:	681b      	ldr	r3, [r3, #0]
 801ff98:	b2db      	uxtb	r3, r3
 801ff9a:	2b7f      	cmp	r3, #127	; 0x7f
 801ff9c:	d101      	bne.n	801ffa2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ff9e:	2300      	movs	r3, #0
 801ffa0:	e001      	b.n	801ffa6 <ip4_route+0xca>
  }

  return netif_default;
 801ffa2:	4b05      	ldr	r3, [pc, #20]	; (801ffb8 <ip4_route+0xdc>)
 801ffa4:	681b      	ldr	r3, [r3, #0]
}
 801ffa6:	4618      	mov	r0, r3
 801ffa8:	3714      	adds	r7, #20
 801ffaa:	46bd      	mov	sp, r7
 801ffac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffb0:	4770      	bx	lr
 801ffb2:	bf00      	nop
 801ffb4:	20015fac 	.word	0x20015fac
 801ffb8:	20015fb0 	.word	0x20015fb0

0801ffbc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ffbc:	b580      	push	{r7, lr}
 801ffbe:	b082      	sub	sp, #8
 801ffc0:	af00      	add	r7, sp, #0
 801ffc2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ffca:	f003 0301 	and.w	r3, r3, #1
 801ffce:	b2db      	uxtb	r3, r3
 801ffd0:	2b00      	cmp	r3, #0
 801ffd2:	d016      	beq.n	8020002 <ip4_input_accept+0x46>
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	3304      	adds	r3, #4
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	d011      	beq.n	8020002 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ffde:	4b0b      	ldr	r3, [pc, #44]	; (802000c <ip4_input_accept+0x50>)
 801ffe0:	695a      	ldr	r2, [r3, #20]
 801ffe2:	687b      	ldr	r3, [r7, #4]
 801ffe4:	3304      	adds	r3, #4
 801ffe6:	681b      	ldr	r3, [r3, #0]
 801ffe8:	429a      	cmp	r2, r3
 801ffea:	d008      	beq.n	801fffe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ffec:	4b07      	ldr	r3, [pc, #28]	; (802000c <ip4_input_accept+0x50>)
 801ffee:	695b      	ldr	r3, [r3, #20]
 801fff0:	6879      	ldr	r1, [r7, #4]
 801fff2:	4618      	mov	r0, r3
 801fff4:	f000 fa08 	bl	8020408 <ip4_addr_isbroadcast_u32>
 801fff8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d001      	beq.n	8020002 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801fffe:	2301      	movs	r3, #1
 8020000:	e000      	b.n	8020004 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020002:	2300      	movs	r3, #0
}
 8020004:	4618      	mov	r0, r3
 8020006:	3708      	adds	r7, #8
 8020008:	46bd      	mov	sp, r7
 802000a:	bd80      	pop	{r7, pc}
 802000c:	2001243c 	.word	0x2001243c

08020010 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020010:	b580      	push	{r7, lr}
 8020012:	b086      	sub	sp, #24
 8020014:	af00      	add	r7, sp, #0
 8020016:	6078      	str	r0, [r7, #4]
 8020018:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802001a:	687b      	ldr	r3, [r7, #4]
 802001c:	685b      	ldr	r3, [r3, #4]
 802001e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	781b      	ldrb	r3, [r3, #0]
 8020024:	091b      	lsrs	r3, r3, #4
 8020026:	b2db      	uxtb	r3, r3
 8020028:	2b04      	cmp	r3, #4
 802002a:	d004      	beq.n	8020036 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 802002c:	6878      	ldr	r0, [r7, #4]
 802002e:	f7f7 fb5b 	bl	80176e8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020032:	2300      	movs	r3, #0
 8020034:	e107      	b.n	8020246 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020036:	697b      	ldr	r3, [r7, #20]
 8020038:	781b      	ldrb	r3, [r3, #0]
 802003a:	f003 030f 	and.w	r3, r3, #15
 802003e:	b2db      	uxtb	r3, r3
 8020040:	009b      	lsls	r3, r3, #2
 8020042:	b2db      	uxtb	r3, r3
 8020044:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020046:	697b      	ldr	r3, [r7, #20]
 8020048:	885b      	ldrh	r3, [r3, #2]
 802004a:	b29b      	uxth	r3, r3
 802004c:	4618      	mov	r0, r3
 802004e:	f7f5 fc8f 	bl	8015970 <lwip_htons>
 8020052:	4603      	mov	r3, r0
 8020054:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	891b      	ldrh	r3, [r3, #8]
 802005a:	89ba      	ldrh	r2, [r7, #12]
 802005c:	429a      	cmp	r2, r3
 802005e:	d204      	bcs.n	802006a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8020060:	89bb      	ldrh	r3, [r7, #12]
 8020062:	4619      	mov	r1, r3
 8020064:	6878      	ldr	r0, [r7, #4]
 8020066:	f7f7 f9b9 	bl	80173dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	895b      	ldrh	r3, [r3, #10]
 802006e:	89fa      	ldrh	r2, [r7, #14]
 8020070:	429a      	cmp	r2, r3
 8020072:	d807      	bhi.n	8020084 <ip4_input+0x74>
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	891b      	ldrh	r3, [r3, #8]
 8020078:	89ba      	ldrh	r2, [r7, #12]
 802007a:	429a      	cmp	r2, r3
 802007c:	d802      	bhi.n	8020084 <ip4_input+0x74>
 802007e:	89fb      	ldrh	r3, [r7, #14]
 8020080:	2b13      	cmp	r3, #19
 8020082:	d804      	bhi.n	802008e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020084:	6878      	ldr	r0, [r7, #4]
 8020086:	f7f7 fb2f 	bl	80176e8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802008a:	2300      	movs	r3, #0
 802008c:	e0db      	b.n	8020246 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802008e:	697b      	ldr	r3, [r7, #20]
 8020090:	691b      	ldr	r3, [r3, #16]
 8020092:	4a6f      	ldr	r2, [pc, #444]	; (8020250 <ip4_input+0x240>)
 8020094:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020096:	697b      	ldr	r3, [r7, #20]
 8020098:	68db      	ldr	r3, [r3, #12]
 802009a:	4a6d      	ldr	r2, [pc, #436]	; (8020250 <ip4_input+0x240>)
 802009c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802009e:	4b6c      	ldr	r3, [pc, #432]	; (8020250 <ip4_input+0x240>)
 80200a0:	695b      	ldr	r3, [r3, #20]
 80200a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80200a6:	2be0      	cmp	r3, #224	; 0xe0
 80200a8:	d112      	bne.n	80200d0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80200b0:	f003 0301 	and.w	r3, r3, #1
 80200b4:	b2db      	uxtb	r3, r3
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	d007      	beq.n	80200ca <ip4_input+0xba>
 80200ba:	683b      	ldr	r3, [r7, #0]
 80200bc:	3304      	adds	r3, #4
 80200be:	681b      	ldr	r3, [r3, #0]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d002      	beq.n	80200ca <ip4_input+0xba>
      netif = inp;
 80200c4:	683b      	ldr	r3, [r7, #0]
 80200c6:	613b      	str	r3, [r7, #16]
 80200c8:	e02a      	b.n	8020120 <ip4_input+0x110>
    } else {
      netif = NULL;
 80200ca:	2300      	movs	r3, #0
 80200cc:	613b      	str	r3, [r7, #16]
 80200ce:	e027      	b.n	8020120 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80200d0:	6838      	ldr	r0, [r7, #0]
 80200d2:	f7ff ff73 	bl	801ffbc <ip4_input_accept>
 80200d6:	4603      	mov	r3, r0
 80200d8:	2b00      	cmp	r3, #0
 80200da:	d002      	beq.n	80200e2 <ip4_input+0xd2>
      netif = inp;
 80200dc:	683b      	ldr	r3, [r7, #0]
 80200de:	613b      	str	r3, [r7, #16]
 80200e0:	e01e      	b.n	8020120 <ip4_input+0x110>
    } else {
      netif = NULL;
 80200e2:	2300      	movs	r3, #0
 80200e4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80200e6:	4b5a      	ldr	r3, [pc, #360]	; (8020250 <ip4_input+0x240>)
 80200e8:	695b      	ldr	r3, [r3, #20]
 80200ea:	b2db      	uxtb	r3, r3
 80200ec:	2b7f      	cmp	r3, #127	; 0x7f
 80200ee:	d017      	beq.n	8020120 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80200f0:	4b58      	ldr	r3, [pc, #352]	; (8020254 <ip4_input+0x244>)
 80200f2:	681b      	ldr	r3, [r3, #0]
 80200f4:	613b      	str	r3, [r7, #16]
 80200f6:	e00e      	b.n	8020116 <ip4_input+0x106>
          if (netif == inp) {
 80200f8:	693a      	ldr	r2, [r7, #16]
 80200fa:	683b      	ldr	r3, [r7, #0]
 80200fc:	429a      	cmp	r2, r3
 80200fe:	d006      	beq.n	802010e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020100:	6938      	ldr	r0, [r7, #16]
 8020102:	f7ff ff5b 	bl	801ffbc <ip4_input_accept>
 8020106:	4603      	mov	r3, r0
 8020108:	2b00      	cmp	r3, #0
 802010a:	d108      	bne.n	802011e <ip4_input+0x10e>
 802010c:	e000      	b.n	8020110 <ip4_input+0x100>
            continue;
 802010e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020110:	693b      	ldr	r3, [r7, #16]
 8020112:	681b      	ldr	r3, [r3, #0]
 8020114:	613b      	str	r3, [r7, #16]
 8020116:	693b      	ldr	r3, [r7, #16]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d1ed      	bne.n	80200f8 <ip4_input+0xe8>
 802011c:	e000      	b.n	8020120 <ip4_input+0x110>
            break;
 802011e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8020120:	4b4b      	ldr	r3, [pc, #300]	; (8020250 <ip4_input+0x240>)
 8020122:	691b      	ldr	r3, [r3, #16]
 8020124:	6839      	ldr	r1, [r7, #0]
 8020126:	4618      	mov	r0, r3
 8020128:	f000 f96e 	bl	8020408 <ip4_addr_isbroadcast_u32>
 802012c:	4603      	mov	r3, r0
 802012e:	2b00      	cmp	r3, #0
 8020130:	d105      	bne.n	802013e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8020132:	4b47      	ldr	r3, [pc, #284]	; (8020250 <ip4_input+0x240>)
 8020134:	691b      	ldr	r3, [r3, #16]
 8020136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802013a:	2be0      	cmp	r3, #224	; 0xe0
 802013c:	d104      	bne.n	8020148 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802013e:	6878      	ldr	r0, [r7, #4]
 8020140:	f7f7 fad2 	bl	80176e8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8020144:	2300      	movs	r3, #0
 8020146:	e07e      	b.n	8020246 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8020148:	693b      	ldr	r3, [r7, #16]
 802014a:	2b00      	cmp	r3, #0
 802014c:	d104      	bne.n	8020158 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802014e:	6878      	ldr	r0, [r7, #4]
 8020150:	f7f7 faca 	bl	80176e8 <pbuf_free>
    return ERR_OK;
 8020154:	2300      	movs	r3, #0
 8020156:	e076      	b.n	8020246 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020158:	697b      	ldr	r3, [r7, #20]
 802015a:	88db      	ldrh	r3, [r3, #6]
 802015c:	b29b      	uxth	r3, r3
 802015e:	461a      	mov	r2, r3
 8020160:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8020164:	4013      	ands	r3, r2
 8020166:	2b00      	cmp	r3, #0
 8020168:	d00b      	beq.n	8020182 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802016a:	6878      	ldr	r0, [r7, #4]
 802016c:	f000 fd22 	bl	8020bb4 <ip4_reass>
 8020170:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	2b00      	cmp	r3, #0
 8020176:	d101      	bne.n	802017c <ip4_input+0x16c>
      return ERR_OK;
 8020178:	2300      	movs	r3, #0
 802017a:	e064      	b.n	8020246 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	685b      	ldr	r3, [r3, #4]
 8020180:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8020182:	4a33      	ldr	r2, [pc, #204]	; (8020250 <ip4_input+0x240>)
 8020184:	693b      	ldr	r3, [r7, #16]
 8020186:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020188:	4a31      	ldr	r2, [pc, #196]	; (8020250 <ip4_input+0x240>)
 802018a:	683b      	ldr	r3, [r7, #0]
 802018c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 802018e:	4a30      	ldr	r2, [pc, #192]	; (8020250 <ip4_input+0x240>)
 8020190:	697b      	ldr	r3, [r7, #20]
 8020192:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020194:	697b      	ldr	r3, [r7, #20]
 8020196:	781b      	ldrb	r3, [r3, #0]
 8020198:	f003 030f 	and.w	r3, r3, #15
 802019c:	b2db      	uxtb	r3, r3
 802019e:	009b      	lsls	r3, r3, #2
 80201a0:	b2db      	uxtb	r3, r3
 80201a2:	b29a      	uxth	r2, r3
 80201a4:	4b2a      	ldr	r3, [pc, #168]	; (8020250 <ip4_input+0x240>)
 80201a6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80201a8:	89fb      	ldrh	r3, [r7, #14]
 80201aa:	4619      	mov	r1, r3
 80201ac:	6878      	ldr	r0, [r7, #4]
 80201ae:	f7f7 fa15 	bl	80175dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80201b2:	697b      	ldr	r3, [r7, #20]
 80201b4:	7a5b      	ldrb	r3, [r3, #9]
 80201b6:	2b11      	cmp	r3, #17
 80201b8:	d006      	beq.n	80201c8 <ip4_input+0x1b8>
 80201ba:	2b11      	cmp	r3, #17
 80201bc:	dc13      	bgt.n	80201e6 <ip4_input+0x1d6>
 80201be:	2b01      	cmp	r3, #1
 80201c0:	d00c      	beq.n	80201dc <ip4_input+0x1cc>
 80201c2:	2b06      	cmp	r3, #6
 80201c4:	d005      	beq.n	80201d2 <ip4_input+0x1c2>
 80201c6:	e00e      	b.n	80201e6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80201c8:	6839      	ldr	r1, [r7, #0]
 80201ca:	6878      	ldr	r0, [r7, #4]
 80201cc:	f7fe f98c 	bl	801e4e8 <udp_input>
        break;
 80201d0:	e026      	b.n	8020220 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80201d2:	6839      	ldr	r1, [r7, #0]
 80201d4:	6878      	ldr	r0, [r7, #4]
 80201d6:	f7f9 fd37 	bl	8019c48 <tcp_input>
        break;
 80201da:	e021      	b.n	8020220 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80201dc:	6839      	ldr	r1, [r7, #0]
 80201de:	6878      	ldr	r0, [r7, #4]
 80201e0:	f7ff fcee 	bl	801fbc0 <icmp_input>
        break;
 80201e4:	e01c      	b.n	8020220 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80201e6:	4b1a      	ldr	r3, [pc, #104]	; (8020250 <ip4_input+0x240>)
 80201e8:	695b      	ldr	r3, [r3, #20]
 80201ea:	6939      	ldr	r1, [r7, #16]
 80201ec:	4618      	mov	r0, r3
 80201ee:	f000 f90b 	bl	8020408 <ip4_addr_isbroadcast_u32>
 80201f2:	4603      	mov	r3, r0
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d10f      	bne.n	8020218 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80201f8:	4b15      	ldr	r3, [pc, #84]	; (8020250 <ip4_input+0x240>)
 80201fa:	695b      	ldr	r3, [r3, #20]
 80201fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020200:	2be0      	cmp	r3, #224	; 0xe0
 8020202:	d009      	beq.n	8020218 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020204:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020208:	4619      	mov	r1, r3
 802020a:	6878      	ldr	r0, [r7, #4]
 802020c:	f7f7 fa59 	bl	80176c2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020210:	2102      	movs	r1, #2
 8020212:	6878      	ldr	r0, [r7, #4]
 8020214:	f7ff fdd8 	bl	801fdc8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8020218:	6878      	ldr	r0, [r7, #4]
 802021a:	f7f7 fa65 	bl	80176e8 <pbuf_free>
        break;
 802021e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8020220:	4b0b      	ldr	r3, [pc, #44]	; (8020250 <ip4_input+0x240>)
 8020222:	2200      	movs	r2, #0
 8020224:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020226:	4b0a      	ldr	r3, [pc, #40]	; (8020250 <ip4_input+0x240>)
 8020228:	2200      	movs	r2, #0
 802022a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 802022c:	4b08      	ldr	r3, [pc, #32]	; (8020250 <ip4_input+0x240>)
 802022e:	2200      	movs	r2, #0
 8020230:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8020232:	4b07      	ldr	r3, [pc, #28]	; (8020250 <ip4_input+0x240>)
 8020234:	2200      	movs	r2, #0
 8020236:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8020238:	4b05      	ldr	r3, [pc, #20]	; (8020250 <ip4_input+0x240>)
 802023a:	2200      	movs	r2, #0
 802023c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802023e:	4b04      	ldr	r3, [pc, #16]	; (8020250 <ip4_input+0x240>)
 8020240:	2200      	movs	r2, #0
 8020242:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8020244:	2300      	movs	r3, #0
}
 8020246:	4618      	mov	r0, r3
 8020248:	3718      	adds	r7, #24
 802024a:	46bd      	mov	sp, r7
 802024c:	bd80      	pop	{r7, pc}
 802024e:	bf00      	nop
 8020250:	2001243c 	.word	0x2001243c
 8020254:	20015fac 	.word	0x20015fac

08020258 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8020258:	b580      	push	{r7, lr}
 802025a:	b08a      	sub	sp, #40	; 0x28
 802025c:	af04      	add	r7, sp, #16
 802025e:	60f8      	str	r0, [r7, #12]
 8020260:	60b9      	str	r1, [r7, #8]
 8020262:	607a      	str	r2, [r7, #4]
 8020264:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8020266:	68bb      	ldr	r3, [r7, #8]
 8020268:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	2b00      	cmp	r3, #0
 802026e:	d009      	beq.n	8020284 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	2b00      	cmp	r3, #0
 8020274:	d003      	beq.n	802027e <ip4_output_if+0x26>
 8020276:	68bb      	ldr	r3, [r7, #8]
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d102      	bne.n	8020284 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802027e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020280:	3304      	adds	r3, #4
 8020282:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020284:	78fa      	ldrb	r2, [r7, #3]
 8020286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020288:	9302      	str	r3, [sp, #8]
 802028a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802028e:	9301      	str	r3, [sp, #4]
 8020290:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020294:	9300      	str	r3, [sp, #0]
 8020296:	4613      	mov	r3, r2
 8020298:	687a      	ldr	r2, [r7, #4]
 802029a:	6979      	ldr	r1, [r7, #20]
 802029c:	68f8      	ldr	r0, [r7, #12]
 802029e:	f000 f805 	bl	80202ac <ip4_output_if_src>
 80202a2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80202a4:	4618      	mov	r0, r3
 80202a6:	3718      	adds	r7, #24
 80202a8:	46bd      	mov	sp, r7
 80202aa:	bd80      	pop	{r7, pc}

080202ac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80202ac:	b580      	push	{r7, lr}
 80202ae:	b088      	sub	sp, #32
 80202b0:	af00      	add	r7, sp, #0
 80202b2:	60f8      	str	r0, [r7, #12]
 80202b4:	60b9      	str	r1, [r7, #8]
 80202b6:	607a      	str	r2, [r7, #4]
 80202b8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	7b9b      	ldrb	r3, [r3, #14]
 80202be:	2b01      	cmp	r3, #1
 80202c0:	d006      	beq.n	80202d0 <ip4_output_if_src+0x24>
 80202c2:	4b4b      	ldr	r3, [pc, #300]	; (80203f0 <ip4_output_if_src+0x144>)
 80202c4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80202c8:	494a      	ldr	r1, [pc, #296]	; (80203f4 <ip4_output_if_src+0x148>)
 80202ca:	484b      	ldr	r0, [pc, #300]	; (80203f8 <ip4_output_if_src+0x14c>)
 80202cc:	f003 faca 	bl	8023864 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80202d0:	687b      	ldr	r3, [r7, #4]
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d060      	beq.n	8020398 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80202d6:	2314      	movs	r3, #20
 80202d8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80202da:	2114      	movs	r1, #20
 80202dc:	68f8      	ldr	r0, [r7, #12]
 80202de:	f7f7 f96d 	bl	80175bc <pbuf_add_header>
 80202e2:	4603      	mov	r3, r0
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	d002      	beq.n	80202ee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80202e8:	f06f 0301 	mvn.w	r3, #1
 80202ec:	e07c      	b.n	80203e8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80202ee:	68fb      	ldr	r3, [r7, #12]
 80202f0:	685b      	ldr	r3, [r3, #4]
 80202f2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	895b      	ldrh	r3, [r3, #10]
 80202f8:	2b13      	cmp	r3, #19
 80202fa:	d806      	bhi.n	802030a <ip4_output_if_src+0x5e>
 80202fc:	4b3c      	ldr	r3, [pc, #240]	; (80203f0 <ip4_output_if_src+0x144>)
 80202fe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020302:	493e      	ldr	r1, [pc, #248]	; (80203fc <ip4_output_if_src+0x150>)
 8020304:	483c      	ldr	r0, [pc, #240]	; (80203f8 <ip4_output_if_src+0x14c>)
 8020306:	f003 faad 	bl	8023864 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802030a:	69fb      	ldr	r3, [r7, #28]
 802030c:	78fa      	ldrb	r2, [r7, #3]
 802030e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8020310:	69fb      	ldr	r3, [r7, #28]
 8020312:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8020316:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	681a      	ldr	r2, [r3, #0]
 802031c:	69fb      	ldr	r3, [r7, #28]
 802031e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020320:	8b7b      	ldrh	r3, [r7, #26]
 8020322:	089b      	lsrs	r3, r3, #2
 8020324:	b29b      	uxth	r3, r3
 8020326:	b2db      	uxtb	r3, r3
 8020328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802032c:	b2da      	uxtb	r2, r3
 802032e:	69fb      	ldr	r3, [r7, #28]
 8020330:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8020332:	69fb      	ldr	r3, [r7, #28]
 8020334:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020338:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802033a:	68fb      	ldr	r3, [r7, #12]
 802033c:	891b      	ldrh	r3, [r3, #8]
 802033e:	4618      	mov	r0, r3
 8020340:	f7f5 fb16 	bl	8015970 <lwip_htons>
 8020344:	4603      	mov	r3, r0
 8020346:	461a      	mov	r2, r3
 8020348:	69fb      	ldr	r3, [r7, #28]
 802034a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 802034c:	69fb      	ldr	r3, [r7, #28]
 802034e:	2200      	movs	r2, #0
 8020350:	719a      	strb	r2, [r3, #6]
 8020352:	2200      	movs	r2, #0
 8020354:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020356:	4b2a      	ldr	r3, [pc, #168]	; (8020400 <ip4_output_if_src+0x154>)
 8020358:	881b      	ldrh	r3, [r3, #0]
 802035a:	4618      	mov	r0, r3
 802035c:	f7f5 fb08 	bl	8015970 <lwip_htons>
 8020360:	4603      	mov	r3, r0
 8020362:	461a      	mov	r2, r3
 8020364:	69fb      	ldr	r3, [r7, #28]
 8020366:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020368:	4b25      	ldr	r3, [pc, #148]	; (8020400 <ip4_output_if_src+0x154>)
 802036a:	881b      	ldrh	r3, [r3, #0]
 802036c:	3301      	adds	r3, #1
 802036e:	b29a      	uxth	r2, r3
 8020370:	4b23      	ldr	r3, [pc, #140]	; (8020400 <ip4_output_if_src+0x154>)
 8020372:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020374:	68bb      	ldr	r3, [r7, #8]
 8020376:	2b00      	cmp	r3, #0
 8020378:	d104      	bne.n	8020384 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802037a:	4b22      	ldr	r3, [pc, #136]	; (8020404 <ip4_output_if_src+0x158>)
 802037c:	681a      	ldr	r2, [r3, #0]
 802037e:	69fb      	ldr	r3, [r7, #28]
 8020380:	60da      	str	r2, [r3, #12]
 8020382:	e003      	b.n	802038c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020384:	68bb      	ldr	r3, [r7, #8]
 8020386:	681a      	ldr	r2, [r3, #0]
 8020388:	69fb      	ldr	r3, [r7, #28]
 802038a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 802038c:	69fb      	ldr	r3, [r7, #28]
 802038e:	2200      	movs	r2, #0
 8020390:	729a      	strb	r2, [r3, #10]
 8020392:	2200      	movs	r2, #0
 8020394:	72da      	strb	r2, [r3, #11]
 8020396:	e00f      	b.n	80203b8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020398:	68fb      	ldr	r3, [r7, #12]
 802039a:	895b      	ldrh	r3, [r3, #10]
 802039c:	2b13      	cmp	r3, #19
 802039e:	d802      	bhi.n	80203a6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80203a0:	f06f 0301 	mvn.w	r3, #1
 80203a4:	e020      	b.n	80203e8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80203a6:	68fb      	ldr	r3, [r7, #12]
 80203a8:	685b      	ldr	r3, [r3, #4]
 80203aa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80203ac:	69fb      	ldr	r3, [r7, #28]
 80203ae:	691b      	ldr	r3, [r3, #16]
 80203b0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80203b2:	f107 0314 	add.w	r3, r7, #20
 80203b6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80203b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d00c      	beq.n	80203da <ip4_output_if_src+0x12e>
 80203c0:	68fb      	ldr	r3, [r7, #12]
 80203c2:	891a      	ldrh	r2, [r3, #8]
 80203c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80203c8:	429a      	cmp	r2, r3
 80203ca:	d906      	bls.n	80203da <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80203cc:	687a      	ldr	r2, [r7, #4]
 80203ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80203d0:	68f8      	ldr	r0, [r7, #12]
 80203d2:	f000 fde3 	bl	8020f9c <ip4_frag>
 80203d6:	4603      	mov	r3, r0
 80203d8:	e006      	b.n	80203e8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80203da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80203dc:	695b      	ldr	r3, [r3, #20]
 80203de:	687a      	ldr	r2, [r7, #4]
 80203e0:	68f9      	ldr	r1, [r7, #12]
 80203e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80203e4:	4798      	blx	r3
 80203e6:	4603      	mov	r3, r0
}
 80203e8:	4618      	mov	r0, r3
 80203ea:	3720      	adds	r7, #32
 80203ec:	46bd      	mov	sp, r7
 80203ee:	bd80      	pop	{r7, pc}
 80203f0:	0802bb90 	.word	0x0802bb90
 80203f4:	0802bbc4 	.word	0x0802bbc4
 80203f8:	0802bbd0 	.word	0x0802bbd0
 80203fc:	0802bbf8 	.word	0x0802bbf8
 8020400:	2001610a 	.word	0x2001610a
 8020404:	0802c1e4 	.word	0x0802c1e4

08020408 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8020408:	b480      	push	{r7}
 802040a:	b085      	sub	sp, #20
 802040c:	af00      	add	r7, sp, #0
 802040e:	6078      	str	r0, [r7, #4]
 8020410:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802041c:	d002      	beq.n	8020424 <ip4_addr_isbroadcast_u32+0x1c>
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	2b00      	cmp	r3, #0
 8020422:	d101      	bne.n	8020428 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8020424:	2301      	movs	r3, #1
 8020426:	e02a      	b.n	802047e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020428:	683b      	ldr	r3, [r7, #0]
 802042a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802042e:	f003 0302 	and.w	r3, r3, #2
 8020432:	2b00      	cmp	r3, #0
 8020434:	d101      	bne.n	802043a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8020436:	2300      	movs	r3, #0
 8020438:	e021      	b.n	802047e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802043a:	683b      	ldr	r3, [r7, #0]
 802043c:	3304      	adds	r3, #4
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	687a      	ldr	r2, [r7, #4]
 8020442:	429a      	cmp	r2, r3
 8020444:	d101      	bne.n	802044a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8020446:	2300      	movs	r3, #0
 8020448:	e019      	b.n	802047e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802044a:	68fa      	ldr	r2, [r7, #12]
 802044c:	683b      	ldr	r3, [r7, #0]
 802044e:	3304      	adds	r3, #4
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	405a      	eors	r2, r3
 8020454:	683b      	ldr	r3, [r7, #0]
 8020456:	3308      	adds	r3, #8
 8020458:	681b      	ldr	r3, [r3, #0]
 802045a:	4013      	ands	r3, r2
 802045c:	2b00      	cmp	r3, #0
 802045e:	d10d      	bne.n	802047c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020460:	683b      	ldr	r3, [r7, #0]
 8020462:	3308      	adds	r3, #8
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	43da      	mvns	r2, r3
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 802046c:	683b      	ldr	r3, [r7, #0]
 802046e:	3308      	adds	r3, #8
 8020470:	681b      	ldr	r3, [r3, #0]
 8020472:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020474:	429a      	cmp	r2, r3
 8020476:	d101      	bne.n	802047c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8020478:	2301      	movs	r3, #1
 802047a:	e000      	b.n	802047e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 802047c:	2300      	movs	r3, #0
  }
}
 802047e:	4618      	mov	r0, r3
 8020480:	3714      	adds	r7, #20
 8020482:	46bd      	mov	sp, r7
 8020484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020488:	4770      	bx	lr
	...

0802048c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 802048c:	b580      	push	{r7, lr}
 802048e:	b082      	sub	sp, #8
 8020490:	af00      	add	r7, sp, #0
 8020492:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8020494:	2210      	movs	r2, #16
 8020496:	4904      	ldr	r1, [pc, #16]	; (80204a8 <ip4addr_ntoa+0x1c>)
 8020498:	6878      	ldr	r0, [r7, #4]
 802049a:	f000 f807 	bl	80204ac <ip4addr_ntoa_r>
 802049e:	4603      	mov	r3, r0
}
 80204a0:	4618      	mov	r0, r3
 80204a2:	3708      	adds	r7, #8
 80204a4:	46bd      	mov	sp, r7
 80204a6:	bd80      	pop	{r7, pc}
 80204a8:	2001610c 	.word	0x2001610c

080204ac <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80204ac:	b480      	push	{r7}
 80204ae:	b08d      	sub	sp, #52	; 0x34
 80204b0:	af00      	add	r7, sp, #0
 80204b2:	60f8      	str	r0, [r7, #12]
 80204b4:	60b9      	str	r1, [r7, #8]
 80204b6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80204b8:	2300      	movs	r3, #0
 80204ba:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80204bc:	68fb      	ldr	r3, [r7, #12]
 80204be:	681b      	ldr	r3, [r3, #0]
 80204c0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80204c2:	68bb      	ldr	r3, [r7, #8]
 80204c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80204c6:	f107 0318 	add.w	r3, r7, #24
 80204ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80204cc:	2300      	movs	r3, #0
 80204ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80204d2:	e058      	b.n	8020586 <ip4addr_ntoa_r+0xda>
    i = 0;
 80204d4:	2300      	movs	r3, #0
 80204d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80204da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204dc:	781a      	ldrb	r2, [r3, #0]
 80204de:	4b32      	ldr	r3, [pc, #200]	; (80205a8 <ip4addr_ntoa_r+0xfc>)
 80204e0:	fba3 1302 	umull	r1, r3, r3, r2
 80204e4:	08d9      	lsrs	r1, r3, #3
 80204e6:	460b      	mov	r3, r1
 80204e8:	009b      	lsls	r3, r3, #2
 80204ea:	440b      	add	r3, r1
 80204ec:	005b      	lsls	r3, r3, #1
 80204ee:	1ad3      	subs	r3, r2, r3
 80204f0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80204f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80204f4:	781b      	ldrb	r3, [r3, #0]
 80204f6:	4a2c      	ldr	r2, [pc, #176]	; (80205a8 <ip4addr_ntoa_r+0xfc>)
 80204f8:	fba2 2303 	umull	r2, r3, r2, r3
 80204fc:	08db      	lsrs	r3, r3, #3
 80204fe:	b2da      	uxtb	r2, r3
 8020500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020502:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8020504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020508:	1c5a      	adds	r2, r3, #1
 802050a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802050e:	4619      	mov	r1, r3
 8020510:	7ffb      	ldrb	r3, [r7, #31]
 8020512:	3330      	adds	r3, #48	; 0x30
 8020514:	b2da      	uxtb	r2, r3
 8020516:	f101 0330 	add.w	r3, r1, #48	; 0x30
 802051a:	443b      	add	r3, r7
 802051c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8020520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020522:	781b      	ldrb	r3, [r3, #0]
 8020524:	2b00      	cmp	r3, #0
 8020526:	d1d8      	bne.n	80204da <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8020528:	e011      	b.n	802054e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802052a:	6a3b      	ldr	r3, [r7, #32]
 802052c:	1c5a      	adds	r2, r3, #1
 802052e:	623a      	str	r2, [r7, #32]
 8020530:	687a      	ldr	r2, [r7, #4]
 8020532:	429a      	cmp	r2, r3
 8020534:	dc01      	bgt.n	802053a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8020536:	2300      	movs	r3, #0
 8020538:	e030      	b.n	802059c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802053a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802053e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020540:	1c59      	adds	r1, r3, #1
 8020542:	62f9      	str	r1, [r7, #44]	; 0x2c
 8020544:	3230      	adds	r2, #48	; 0x30
 8020546:	443a      	add	r2, r7
 8020548:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 802054c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802054e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8020552:	1e5a      	subs	r2, r3, #1
 8020554:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8020558:	2b00      	cmp	r3, #0
 802055a:	d1e6      	bne.n	802052a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 802055c:	6a3b      	ldr	r3, [r7, #32]
 802055e:	1c5a      	adds	r2, r3, #1
 8020560:	623a      	str	r2, [r7, #32]
 8020562:	687a      	ldr	r2, [r7, #4]
 8020564:	429a      	cmp	r2, r3
 8020566:	dc01      	bgt.n	802056c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8020568:	2300      	movs	r3, #0
 802056a:	e017      	b.n	802059c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 802056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802056e:	1c5a      	adds	r2, r3, #1
 8020570:	62fa      	str	r2, [r7, #44]	; 0x2c
 8020572:	222e      	movs	r2, #46	; 0x2e
 8020574:	701a      	strb	r2, [r3, #0]
    ap++;
 8020576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020578:	3301      	adds	r3, #1
 802057a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 802057c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8020580:	3301      	adds	r3, #1
 8020582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802058a:	2b03      	cmp	r3, #3
 802058c:	d9a2      	bls.n	80204d4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 802058e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020590:	3b01      	subs	r3, #1
 8020592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020596:	2200      	movs	r2, #0
 8020598:	701a      	strb	r2, [r3, #0]
  return buf;
 802059a:	68bb      	ldr	r3, [r7, #8]
}
 802059c:	4618      	mov	r0, r3
 802059e:	3734      	adds	r7, #52	; 0x34
 80205a0:	46bd      	mov	sp, r7
 80205a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a6:	4770      	bx	lr
 80205a8:	cccccccd 	.word	0xcccccccd

080205ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80205ac:	b580      	push	{r7, lr}
 80205ae:	b084      	sub	sp, #16
 80205b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80205b2:	2300      	movs	r3, #0
 80205b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80205b6:	4b12      	ldr	r3, [pc, #72]	; (8020600 <ip_reass_tmr+0x54>)
 80205b8:	681b      	ldr	r3, [r3, #0]
 80205ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80205bc:	e018      	b.n	80205f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80205be:	68fb      	ldr	r3, [r7, #12]
 80205c0:	7fdb      	ldrb	r3, [r3, #31]
 80205c2:	2b00      	cmp	r3, #0
 80205c4:	d00b      	beq.n	80205de <ip_reass_tmr+0x32>
      r->timer--;
 80205c6:	68fb      	ldr	r3, [r7, #12]
 80205c8:	7fdb      	ldrb	r3, [r3, #31]
 80205ca:	3b01      	subs	r3, #1
 80205cc:	b2da      	uxtb	r2, r3
 80205ce:	68fb      	ldr	r3, [r7, #12]
 80205d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80205d2:	68fb      	ldr	r3, [r7, #12]
 80205d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80205d6:	68fb      	ldr	r3, [r7, #12]
 80205d8:	681b      	ldr	r3, [r3, #0]
 80205da:	60fb      	str	r3, [r7, #12]
 80205dc:	e008      	b.n	80205f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80205de:	68fb      	ldr	r3, [r7, #12]
 80205e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80205e2:	68fb      	ldr	r3, [r7, #12]
 80205e4:	681b      	ldr	r3, [r3, #0]
 80205e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80205e8:	68b9      	ldr	r1, [r7, #8]
 80205ea:	6878      	ldr	r0, [r7, #4]
 80205ec:	f000 f80a 	bl	8020604 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80205f0:	68fb      	ldr	r3, [r7, #12]
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d1e3      	bne.n	80205be <ip_reass_tmr+0x12>
    }
  }
}
 80205f6:	bf00      	nop
 80205f8:	bf00      	nop
 80205fa:	3710      	adds	r7, #16
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd80      	pop	{r7, pc}
 8020600:	2001611c 	.word	0x2001611c

08020604 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020604:	b580      	push	{r7, lr}
 8020606:	b088      	sub	sp, #32
 8020608:	af00      	add	r7, sp, #0
 802060a:	6078      	str	r0, [r7, #4]
 802060c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802060e:	2300      	movs	r3, #0
 8020610:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020612:	683a      	ldr	r2, [r7, #0]
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	429a      	cmp	r2, r3
 8020618:	d105      	bne.n	8020626 <ip_reass_free_complete_datagram+0x22>
 802061a:	4b45      	ldr	r3, [pc, #276]	; (8020730 <ip_reass_free_complete_datagram+0x12c>)
 802061c:	22ab      	movs	r2, #171	; 0xab
 802061e:	4945      	ldr	r1, [pc, #276]	; (8020734 <ip_reass_free_complete_datagram+0x130>)
 8020620:	4845      	ldr	r0, [pc, #276]	; (8020738 <ip_reass_free_complete_datagram+0x134>)
 8020622:	f003 f91f 	bl	8023864 <iprintf>
  if (prev != NULL) {
 8020626:	683b      	ldr	r3, [r7, #0]
 8020628:	2b00      	cmp	r3, #0
 802062a:	d00a      	beq.n	8020642 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 802062c:	683b      	ldr	r3, [r7, #0]
 802062e:	681b      	ldr	r3, [r3, #0]
 8020630:	687a      	ldr	r2, [r7, #4]
 8020632:	429a      	cmp	r2, r3
 8020634:	d005      	beq.n	8020642 <ip_reass_free_complete_datagram+0x3e>
 8020636:	4b3e      	ldr	r3, [pc, #248]	; (8020730 <ip_reass_free_complete_datagram+0x12c>)
 8020638:	22ad      	movs	r2, #173	; 0xad
 802063a:	4940      	ldr	r1, [pc, #256]	; (802073c <ip_reass_free_complete_datagram+0x138>)
 802063c:	483e      	ldr	r0, [pc, #248]	; (8020738 <ip_reass_free_complete_datagram+0x134>)
 802063e:	f003 f911 	bl	8023864 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020642:	687b      	ldr	r3, [r7, #4]
 8020644:	685b      	ldr	r3, [r3, #4]
 8020646:	685b      	ldr	r3, [r3, #4]
 8020648:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802064a:	697b      	ldr	r3, [r7, #20]
 802064c:	889b      	ldrh	r3, [r3, #4]
 802064e:	b29b      	uxth	r3, r3
 8020650:	2b00      	cmp	r3, #0
 8020652:	d12a      	bne.n	80206aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8020654:	687b      	ldr	r3, [r7, #4]
 8020656:	685b      	ldr	r3, [r3, #4]
 8020658:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802065a:	697b      	ldr	r3, [r7, #20]
 802065c:	681a      	ldr	r2, [r3, #0]
 802065e:	687b      	ldr	r3, [r7, #4]
 8020660:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020662:	69bb      	ldr	r3, [r7, #24]
 8020664:	6858      	ldr	r0, [r3, #4]
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	3308      	adds	r3, #8
 802066a:	2214      	movs	r2, #20
 802066c:	4619      	mov	r1, r3
 802066e:	f004 fc1c 	bl	8024eaa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020672:	2101      	movs	r1, #1
 8020674:	69b8      	ldr	r0, [r7, #24]
 8020676:	f7ff fbb7 	bl	801fde8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 802067a:	69b8      	ldr	r0, [r7, #24]
 802067c:	f7f7 f8c2 	bl	8017804 <pbuf_clen>
 8020680:	4603      	mov	r3, r0
 8020682:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020684:	8bfa      	ldrh	r2, [r7, #30]
 8020686:	8a7b      	ldrh	r3, [r7, #18]
 8020688:	4413      	add	r3, r2
 802068a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802068e:	db05      	blt.n	802069c <ip_reass_free_complete_datagram+0x98>
 8020690:	4b27      	ldr	r3, [pc, #156]	; (8020730 <ip_reass_free_complete_datagram+0x12c>)
 8020692:	22bc      	movs	r2, #188	; 0xbc
 8020694:	492a      	ldr	r1, [pc, #168]	; (8020740 <ip_reass_free_complete_datagram+0x13c>)
 8020696:	4828      	ldr	r0, [pc, #160]	; (8020738 <ip_reass_free_complete_datagram+0x134>)
 8020698:	f003 f8e4 	bl	8023864 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802069c:	8bfa      	ldrh	r2, [r7, #30]
 802069e:	8a7b      	ldrh	r3, [r7, #18]
 80206a0:	4413      	add	r3, r2
 80206a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80206a4:	69b8      	ldr	r0, [r7, #24]
 80206a6:	f7f7 f81f 	bl	80176e8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	685b      	ldr	r3, [r3, #4]
 80206ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80206b0:	e01f      	b.n	80206f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80206b2:	69bb      	ldr	r3, [r7, #24]
 80206b4:	685b      	ldr	r3, [r3, #4]
 80206b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80206b8:	69bb      	ldr	r3, [r7, #24]
 80206ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80206bc:	697b      	ldr	r3, [r7, #20]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80206c2:	68f8      	ldr	r0, [r7, #12]
 80206c4:	f7f7 f89e 	bl	8017804 <pbuf_clen>
 80206c8:	4603      	mov	r3, r0
 80206ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80206cc:	8bfa      	ldrh	r2, [r7, #30]
 80206ce:	8a7b      	ldrh	r3, [r7, #18]
 80206d0:	4413      	add	r3, r2
 80206d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80206d6:	db05      	blt.n	80206e4 <ip_reass_free_complete_datagram+0xe0>
 80206d8:	4b15      	ldr	r3, [pc, #84]	; (8020730 <ip_reass_free_complete_datagram+0x12c>)
 80206da:	22cc      	movs	r2, #204	; 0xcc
 80206dc:	4918      	ldr	r1, [pc, #96]	; (8020740 <ip_reass_free_complete_datagram+0x13c>)
 80206de:	4816      	ldr	r0, [pc, #88]	; (8020738 <ip_reass_free_complete_datagram+0x134>)
 80206e0:	f003 f8c0 	bl	8023864 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80206e4:	8bfa      	ldrh	r2, [r7, #30]
 80206e6:	8a7b      	ldrh	r3, [r7, #18]
 80206e8:	4413      	add	r3, r2
 80206ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80206ec:	68f8      	ldr	r0, [r7, #12]
 80206ee:	f7f6 fffb 	bl	80176e8 <pbuf_free>
  while (p != NULL) {
 80206f2:	69bb      	ldr	r3, [r7, #24]
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d1dc      	bne.n	80206b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80206f8:	6839      	ldr	r1, [r7, #0]
 80206fa:	6878      	ldr	r0, [r7, #4]
 80206fc:	f000 f8c2 	bl	8020884 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020700:	4b10      	ldr	r3, [pc, #64]	; (8020744 <ip_reass_free_complete_datagram+0x140>)
 8020702:	881b      	ldrh	r3, [r3, #0]
 8020704:	8bfa      	ldrh	r2, [r7, #30]
 8020706:	429a      	cmp	r2, r3
 8020708:	d905      	bls.n	8020716 <ip_reass_free_complete_datagram+0x112>
 802070a:	4b09      	ldr	r3, [pc, #36]	; (8020730 <ip_reass_free_complete_datagram+0x12c>)
 802070c:	22d2      	movs	r2, #210	; 0xd2
 802070e:	490e      	ldr	r1, [pc, #56]	; (8020748 <ip_reass_free_complete_datagram+0x144>)
 8020710:	4809      	ldr	r0, [pc, #36]	; (8020738 <ip_reass_free_complete_datagram+0x134>)
 8020712:	f003 f8a7 	bl	8023864 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020716:	4b0b      	ldr	r3, [pc, #44]	; (8020744 <ip_reass_free_complete_datagram+0x140>)
 8020718:	881a      	ldrh	r2, [r3, #0]
 802071a:	8bfb      	ldrh	r3, [r7, #30]
 802071c:	1ad3      	subs	r3, r2, r3
 802071e:	b29a      	uxth	r2, r3
 8020720:	4b08      	ldr	r3, [pc, #32]	; (8020744 <ip_reass_free_complete_datagram+0x140>)
 8020722:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8020724:	8bfb      	ldrh	r3, [r7, #30]
}
 8020726:	4618      	mov	r0, r3
 8020728:	3720      	adds	r7, #32
 802072a:	46bd      	mov	sp, r7
 802072c:	bd80      	pop	{r7, pc}
 802072e:	bf00      	nop
 8020730:	0802bc28 	.word	0x0802bc28
 8020734:	0802bc64 	.word	0x0802bc64
 8020738:	0802bc70 	.word	0x0802bc70
 802073c:	0802bc98 	.word	0x0802bc98
 8020740:	0802bcac 	.word	0x0802bcac
 8020744:	20016120 	.word	0x20016120
 8020748:	0802bccc 	.word	0x0802bccc

0802074c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 802074c:	b580      	push	{r7, lr}
 802074e:	b08a      	sub	sp, #40	; 0x28
 8020750:	af00      	add	r7, sp, #0
 8020752:	6078      	str	r0, [r7, #4]
 8020754:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8020756:	2300      	movs	r3, #0
 8020758:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802075a:	2300      	movs	r3, #0
 802075c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802075e:	2300      	movs	r3, #0
 8020760:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8020762:	2300      	movs	r3, #0
 8020764:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8020766:	2300      	movs	r3, #0
 8020768:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802076a:	4b28      	ldr	r3, [pc, #160]	; (802080c <ip_reass_remove_oldest_datagram+0xc0>)
 802076c:	681b      	ldr	r3, [r3, #0]
 802076e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8020770:	e030      	b.n	80207d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020774:	695a      	ldr	r2, [r3, #20]
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	68db      	ldr	r3, [r3, #12]
 802077a:	429a      	cmp	r2, r3
 802077c:	d10c      	bne.n	8020798 <ip_reass_remove_oldest_datagram+0x4c>
 802077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020780:	699a      	ldr	r2, [r3, #24]
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	691b      	ldr	r3, [r3, #16]
 8020786:	429a      	cmp	r2, r3
 8020788:	d106      	bne.n	8020798 <ip_reass_remove_oldest_datagram+0x4c>
 802078a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802078c:	899a      	ldrh	r2, [r3, #12]
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	889b      	ldrh	r3, [r3, #4]
 8020792:	b29b      	uxth	r3, r3
 8020794:	429a      	cmp	r2, r3
 8020796:	d014      	beq.n	80207c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8020798:	693b      	ldr	r3, [r7, #16]
 802079a:	3301      	adds	r3, #1
 802079c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802079e:	6a3b      	ldr	r3, [r7, #32]
 80207a0:	2b00      	cmp	r3, #0
 80207a2:	d104      	bne.n	80207ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80207a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80207a8:	69fb      	ldr	r3, [r7, #28]
 80207aa:	61bb      	str	r3, [r7, #24]
 80207ac:	e009      	b.n	80207c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80207ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207b0:	7fda      	ldrb	r2, [r3, #31]
 80207b2:	6a3b      	ldr	r3, [r7, #32]
 80207b4:	7fdb      	ldrb	r3, [r3, #31]
 80207b6:	429a      	cmp	r2, r3
 80207b8:	d803      	bhi.n	80207c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80207ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80207be:	69fb      	ldr	r3, [r7, #28]
 80207c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80207c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207c4:	681b      	ldr	r3, [r3, #0]
 80207c6:	2b00      	cmp	r3, #0
 80207c8:	d001      	beq.n	80207ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80207ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80207ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207d0:	681b      	ldr	r3, [r3, #0]
 80207d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80207d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d1cb      	bne.n	8020772 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80207da:	6a3b      	ldr	r3, [r7, #32]
 80207dc:	2b00      	cmp	r3, #0
 80207de:	d008      	beq.n	80207f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80207e0:	69b9      	ldr	r1, [r7, #24]
 80207e2:	6a38      	ldr	r0, [r7, #32]
 80207e4:	f7ff ff0e 	bl	8020604 <ip_reass_free_complete_datagram>
 80207e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80207ea:	697a      	ldr	r2, [r7, #20]
 80207ec:	68fb      	ldr	r3, [r7, #12]
 80207ee:	4413      	add	r3, r2
 80207f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80207f2:	697a      	ldr	r2, [r7, #20]
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	429a      	cmp	r2, r3
 80207f8:	da02      	bge.n	8020800 <ip_reass_remove_oldest_datagram+0xb4>
 80207fa:	693b      	ldr	r3, [r7, #16]
 80207fc:	2b01      	cmp	r3, #1
 80207fe:	dcac      	bgt.n	802075a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8020800:	697b      	ldr	r3, [r7, #20]
}
 8020802:	4618      	mov	r0, r3
 8020804:	3728      	adds	r7, #40	; 0x28
 8020806:	46bd      	mov	sp, r7
 8020808:	bd80      	pop	{r7, pc}
 802080a:	bf00      	nop
 802080c:	2001611c 	.word	0x2001611c

08020810 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8020810:	b580      	push	{r7, lr}
 8020812:	b084      	sub	sp, #16
 8020814:	af00      	add	r7, sp, #0
 8020816:	6078      	str	r0, [r7, #4]
 8020818:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802081a:	2004      	movs	r0, #4
 802081c:	f7f6 f84a 	bl	80168b4 <memp_malloc>
 8020820:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8020822:	68fb      	ldr	r3, [r7, #12]
 8020824:	2b00      	cmp	r3, #0
 8020826:	d110      	bne.n	802084a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8020828:	6839      	ldr	r1, [r7, #0]
 802082a:	6878      	ldr	r0, [r7, #4]
 802082c:	f7ff ff8e 	bl	802074c <ip_reass_remove_oldest_datagram>
 8020830:	4602      	mov	r2, r0
 8020832:	683b      	ldr	r3, [r7, #0]
 8020834:	4293      	cmp	r3, r2
 8020836:	dc03      	bgt.n	8020840 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8020838:	2004      	movs	r0, #4
 802083a:	f7f6 f83b 	bl	80168b4 <memp_malloc>
 802083e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8020840:	68fb      	ldr	r3, [r7, #12]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d101      	bne.n	802084a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8020846:	2300      	movs	r3, #0
 8020848:	e016      	b.n	8020878 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802084a:	2220      	movs	r2, #32
 802084c:	2100      	movs	r1, #0
 802084e:	68f8      	ldr	r0, [r7, #12]
 8020850:	f003 f9ce 	bl	8023bf0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8020854:	68fb      	ldr	r3, [r7, #12]
 8020856:	220f      	movs	r2, #15
 8020858:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802085a:	4b09      	ldr	r3, [pc, #36]	; (8020880 <ip_reass_enqueue_new_datagram+0x70>)
 802085c:	681a      	ldr	r2, [r3, #0]
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8020862:	4a07      	ldr	r2, [pc, #28]	; (8020880 <ip_reass_enqueue_new_datagram+0x70>)
 8020864:	68fb      	ldr	r3, [r7, #12]
 8020866:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8020868:	68fb      	ldr	r3, [r7, #12]
 802086a:	3308      	adds	r3, #8
 802086c:	2214      	movs	r2, #20
 802086e:	6879      	ldr	r1, [r7, #4]
 8020870:	4618      	mov	r0, r3
 8020872:	f004 fb1a 	bl	8024eaa <memcpy>
  return ipr;
 8020876:	68fb      	ldr	r3, [r7, #12]
}
 8020878:	4618      	mov	r0, r3
 802087a:	3710      	adds	r7, #16
 802087c:	46bd      	mov	sp, r7
 802087e:	bd80      	pop	{r7, pc}
 8020880:	2001611c 	.word	0x2001611c

08020884 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020884:	b580      	push	{r7, lr}
 8020886:	b082      	sub	sp, #8
 8020888:	af00      	add	r7, sp, #0
 802088a:	6078      	str	r0, [r7, #4]
 802088c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 802088e:	4b10      	ldr	r3, [pc, #64]	; (80208d0 <ip_reass_dequeue_datagram+0x4c>)
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	687a      	ldr	r2, [r7, #4]
 8020894:	429a      	cmp	r2, r3
 8020896:	d104      	bne.n	80208a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	681b      	ldr	r3, [r3, #0]
 802089c:	4a0c      	ldr	r2, [pc, #48]	; (80208d0 <ip_reass_dequeue_datagram+0x4c>)
 802089e:	6013      	str	r3, [r2, #0]
 80208a0:	e00d      	b.n	80208be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80208a2:	683b      	ldr	r3, [r7, #0]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d106      	bne.n	80208b6 <ip_reass_dequeue_datagram+0x32>
 80208a8:	4b0a      	ldr	r3, [pc, #40]	; (80208d4 <ip_reass_dequeue_datagram+0x50>)
 80208aa:	f240 1245 	movw	r2, #325	; 0x145
 80208ae:	490a      	ldr	r1, [pc, #40]	; (80208d8 <ip_reass_dequeue_datagram+0x54>)
 80208b0:	480a      	ldr	r0, [pc, #40]	; (80208dc <ip_reass_dequeue_datagram+0x58>)
 80208b2:	f002 ffd7 	bl	8023864 <iprintf>
    prev->next = ipr->next;
 80208b6:	687b      	ldr	r3, [r7, #4]
 80208b8:	681a      	ldr	r2, [r3, #0]
 80208ba:	683b      	ldr	r3, [r7, #0]
 80208bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80208be:	6879      	ldr	r1, [r7, #4]
 80208c0:	2004      	movs	r0, #4
 80208c2:	f7f6 f86d 	bl	80169a0 <memp_free>
}
 80208c6:	bf00      	nop
 80208c8:	3708      	adds	r7, #8
 80208ca:	46bd      	mov	sp, r7
 80208cc:	bd80      	pop	{r7, pc}
 80208ce:	bf00      	nop
 80208d0:	2001611c 	.word	0x2001611c
 80208d4:	0802bc28 	.word	0x0802bc28
 80208d8:	0802bcf0 	.word	0x0802bcf0
 80208dc:	0802bc70 	.word	0x0802bc70

080208e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80208e0:	b580      	push	{r7, lr}
 80208e2:	b08c      	sub	sp, #48	; 0x30
 80208e4:	af00      	add	r7, sp, #0
 80208e6:	60f8      	str	r0, [r7, #12]
 80208e8:	60b9      	str	r1, [r7, #8]
 80208ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80208ec:	2300      	movs	r3, #0
 80208ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80208f0:	2301      	movs	r3, #1
 80208f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80208f4:	68bb      	ldr	r3, [r7, #8]
 80208f6:	685b      	ldr	r3, [r3, #4]
 80208f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80208fa:	69fb      	ldr	r3, [r7, #28]
 80208fc:	885b      	ldrh	r3, [r3, #2]
 80208fe:	b29b      	uxth	r3, r3
 8020900:	4618      	mov	r0, r3
 8020902:	f7f5 f835 	bl	8015970 <lwip_htons>
 8020906:	4603      	mov	r3, r0
 8020908:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802090a:	69fb      	ldr	r3, [r7, #28]
 802090c:	781b      	ldrb	r3, [r3, #0]
 802090e:	f003 030f 	and.w	r3, r3, #15
 8020912:	b2db      	uxtb	r3, r3
 8020914:	009b      	lsls	r3, r3, #2
 8020916:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8020918:	7e7b      	ldrb	r3, [r7, #25]
 802091a:	b29b      	uxth	r3, r3
 802091c:	8b7a      	ldrh	r2, [r7, #26]
 802091e:	429a      	cmp	r2, r3
 8020920:	d202      	bcs.n	8020928 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020926:	e135      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8020928:	7e7b      	ldrb	r3, [r7, #25]
 802092a:	b29b      	uxth	r3, r3
 802092c:	8b7a      	ldrh	r2, [r7, #26]
 802092e:	1ad3      	subs	r3, r2, r3
 8020930:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8020932:	69fb      	ldr	r3, [r7, #28]
 8020934:	88db      	ldrh	r3, [r3, #6]
 8020936:	b29b      	uxth	r3, r3
 8020938:	4618      	mov	r0, r3
 802093a:	f7f5 f819 	bl	8015970 <lwip_htons>
 802093e:	4603      	mov	r3, r0
 8020940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020944:	b29b      	uxth	r3, r3
 8020946:	00db      	lsls	r3, r3, #3
 8020948:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802094a:	68bb      	ldr	r3, [r7, #8]
 802094c:	685b      	ldr	r3, [r3, #4]
 802094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8020950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020952:	2200      	movs	r2, #0
 8020954:	701a      	strb	r2, [r3, #0]
 8020956:	2200      	movs	r2, #0
 8020958:	705a      	strb	r2, [r3, #1]
 802095a:	2200      	movs	r2, #0
 802095c:	709a      	strb	r2, [r3, #2]
 802095e:	2200      	movs	r2, #0
 8020960:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8020962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020964:	8afa      	ldrh	r2, [r7, #22]
 8020966:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8020968:	8afa      	ldrh	r2, [r7, #22]
 802096a:	8b7b      	ldrh	r3, [r7, #26]
 802096c:	4413      	add	r3, r2
 802096e:	b29a      	uxth	r2, r3
 8020970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020972:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8020974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020976:	88db      	ldrh	r3, [r3, #6]
 8020978:	b29b      	uxth	r3, r3
 802097a:	8afa      	ldrh	r2, [r7, #22]
 802097c:	429a      	cmp	r2, r3
 802097e:	d902      	bls.n	8020986 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020984:	e106      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8020986:	68fb      	ldr	r3, [r7, #12]
 8020988:	685b      	ldr	r3, [r3, #4]
 802098a:	627b      	str	r3, [r7, #36]	; 0x24
 802098c:	e068      	b.n	8020a60 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 802098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020990:	685b      	ldr	r3, [r3, #4]
 8020992:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8020994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020996:	889b      	ldrh	r3, [r3, #4]
 8020998:	b29a      	uxth	r2, r3
 802099a:	693b      	ldr	r3, [r7, #16]
 802099c:	889b      	ldrh	r3, [r3, #4]
 802099e:	b29b      	uxth	r3, r3
 80209a0:	429a      	cmp	r2, r3
 80209a2:	d235      	bcs.n	8020a10 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80209a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80209a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80209aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209ac:	2b00      	cmp	r3, #0
 80209ae:	d020      	beq.n	80209f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80209b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209b2:	889b      	ldrh	r3, [r3, #4]
 80209b4:	b29a      	uxth	r2, r3
 80209b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209b8:	88db      	ldrh	r3, [r3, #6]
 80209ba:	b29b      	uxth	r3, r3
 80209bc:	429a      	cmp	r2, r3
 80209be:	d307      	bcc.n	80209d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80209c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209c2:	88db      	ldrh	r3, [r3, #6]
 80209c4:	b29a      	uxth	r2, r3
 80209c6:	693b      	ldr	r3, [r7, #16]
 80209c8:	889b      	ldrh	r3, [r3, #4]
 80209ca:	b29b      	uxth	r3, r3
 80209cc:	429a      	cmp	r2, r3
 80209ce:	d902      	bls.n	80209d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80209d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80209d4:	e0de      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80209d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209d8:	68ba      	ldr	r2, [r7, #8]
 80209da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80209dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80209de:	88db      	ldrh	r3, [r3, #6]
 80209e0:	b29a      	uxth	r2, r3
 80209e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209e4:	889b      	ldrh	r3, [r3, #4]
 80209e6:	b29b      	uxth	r3, r3
 80209e8:	429a      	cmp	r2, r3
 80209ea:	d03d      	beq.n	8020a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80209ec:	2300      	movs	r3, #0
 80209ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80209f0:	e03a      	b.n	8020a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80209f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80209f4:	88db      	ldrh	r3, [r3, #6]
 80209f6:	b29a      	uxth	r2, r3
 80209f8:	693b      	ldr	r3, [r7, #16]
 80209fa:	889b      	ldrh	r3, [r3, #4]
 80209fc:	b29b      	uxth	r3, r3
 80209fe:	429a      	cmp	r2, r3
 8020a00:	d902      	bls.n	8020a08 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020a06:	e0c5      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8020a08:	68fb      	ldr	r3, [r7, #12]
 8020a0a:	68ba      	ldr	r2, [r7, #8]
 8020a0c:	605a      	str	r2, [r3, #4]
      break;
 8020a0e:	e02b      	b.n	8020a68 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8020a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a12:	889b      	ldrh	r3, [r3, #4]
 8020a14:	b29a      	uxth	r2, r3
 8020a16:	693b      	ldr	r3, [r7, #16]
 8020a18:	889b      	ldrh	r3, [r3, #4]
 8020a1a:	b29b      	uxth	r3, r3
 8020a1c:	429a      	cmp	r2, r3
 8020a1e:	d102      	bne.n	8020a26 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020a24:	e0b6      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8020a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a28:	889b      	ldrh	r3, [r3, #4]
 8020a2a:	b29a      	uxth	r2, r3
 8020a2c:	693b      	ldr	r3, [r7, #16]
 8020a2e:	88db      	ldrh	r3, [r3, #6]
 8020a30:	b29b      	uxth	r3, r3
 8020a32:	429a      	cmp	r2, r3
 8020a34:	d202      	bcs.n	8020a3c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8020a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020a3a:	e0ab      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8020a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a3e:	2b00      	cmp	r3, #0
 8020a40:	d009      	beq.n	8020a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8020a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a44:	88db      	ldrh	r3, [r3, #6]
 8020a46:	b29a      	uxth	r2, r3
 8020a48:	693b      	ldr	r3, [r7, #16]
 8020a4a:	889b      	ldrh	r3, [r3, #4]
 8020a4c:	b29b      	uxth	r3, r3
 8020a4e:	429a      	cmp	r2, r3
 8020a50:	d001      	beq.n	8020a56 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8020a52:	2300      	movs	r3, #0
 8020a54:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8020a56:	693b      	ldr	r3, [r7, #16]
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8020a5c:	693b      	ldr	r3, [r7, #16]
 8020a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8020a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a62:	2b00      	cmp	r3, #0
 8020a64:	d193      	bne.n	802098e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8020a66:	e000      	b.n	8020a6a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8020a68:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8020a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d12d      	bne.n	8020acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8020a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d01c      	beq.n	8020ab0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8020a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a78:	88db      	ldrh	r3, [r3, #6]
 8020a7a:	b29a      	uxth	r2, r3
 8020a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020a7e:	889b      	ldrh	r3, [r3, #4]
 8020a80:	b29b      	uxth	r3, r3
 8020a82:	429a      	cmp	r2, r3
 8020a84:	d906      	bls.n	8020a94 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8020a86:	4b45      	ldr	r3, [pc, #276]	; (8020b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020a88:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8020a8c:	4944      	ldr	r1, [pc, #272]	; (8020ba0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8020a8e:	4845      	ldr	r0, [pc, #276]	; (8020ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020a90:	f002 fee8 	bl	8023864 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8020a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a96:	68ba      	ldr	r2, [r7, #8]
 8020a98:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8020a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020a9c:	88db      	ldrh	r3, [r3, #6]
 8020a9e:	b29a      	uxth	r2, r3
 8020aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020aa2:	889b      	ldrh	r3, [r3, #4]
 8020aa4:	b29b      	uxth	r3, r3
 8020aa6:	429a      	cmp	r2, r3
 8020aa8:	d010      	beq.n	8020acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8020aaa:	2300      	movs	r3, #0
 8020aac:	623b      	str	r3, [r7, #32]
 8020aae:	e00d      	b.n	8020acc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8020ab0:	68fb      	ldr	r3, [r7, #12]
 8020ab2:	685b      	ldr	r3, [r3, #4]
 8020ab4:	2b00      	cmp	r3, #0
 8020ab6:	d006      	beq.n	8020ac6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8020ab8:	4b38      	ldr	r3, [pc, #224]	; (8020b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020aba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8020abe:	493a      	ldr	r1, [pc, #232]	; (8020ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8020ac0:	4838      	ldr	r0, [pc, #224]	; (8020ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020ac2:	f002 fecf 	bl	8023864 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8020ac6:	68fb      	ldr	r3, [r7, #12]
 8020ac8:	68ba      	ldr	r2, [r7, #8]
 8020aca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	2b00      	cmp	r3, #0
 8020ad0:	d105      	bne.n	8020ade <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8020ad2:	68fb      	ldr	r3, [r7, #12]
 8020ad4:	7f9b      	ldrb	r3, [r3, #30]
 8020ad6:	f003 0301 	and.w	r3, r3, #1
 8020ada:	2b00      	cmp	r3, #0
 8020adc:	d059      	beq.n	8020b92 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8020ade:	6a3b      	ldr	r3, [r7, #32]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d04f      	beq.n	8020b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8020ae4:	68fb      	ldr	r3, [r7, #12]
 8020ae6:	685b      	ldr	r3, [r3, #4]
 8020ae8:	2b00      	cmp	r3, #0
 8020aea:	d006      	beq.n	8020afa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8020aec:	68fb      	ldr	r3, [r7, #12]
 8020aee:	685b      	ldr	r3, [r3, #4]
 8020af0:	685b      	ldr	r3, [r3, #4]
 8020af2:	889b      	ldrh	r3, [r3, #4]
 8020af4:	b29b      	uxth	r3, r3
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d002      	beq.n	8020b00 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8020afa:	2300      	movs	r3, #0
 8020afc:	623b      	str	r3, [r7, #32]
 8020afe:	e041      	b.n	8020b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8020b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b02:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8020b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b06:	681b      	ldr	r3, [r3, #0]
 8020b08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020b0a:	e012      	b.n	8020b32 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8020b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b0e:	685b      	ldr	r3, [r3, #4]
 8020b10:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8020b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020b14:	88db      	ldrh	r3, [r3, #6]
 8020b16:	b29a      	uxth	r2, r3
 8020b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b1a:	889b      	ldrh	r3, [r3, #4]
 8020b1c:	b29b      	uxth	r3, r3
 8020b1e:	429a      	cmp	r2, r3
 8020b20:	d002      	beq.n	8020b28 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8020b22:	2300      	movs	r3, #0
 8020b24:	623b      	str	r3, [r7, #32]
            break;
 8020b26:	e007      	b.n	8020b38 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8020b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b2a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8020b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b2e:	681b      	ldr	r3, [r3, #0]
 8020b30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8020b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	d1e9      	bne.n	8020b0c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8020b38:	6a3b      	ldr	r3, [r7, #32]
 8020b3a:	2b00      	cmp	r3, #0
 8020b3c:	d022      	beq.n	8020b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8020b3e:	68fb      	ldr	r3, [r7, #12]
 8020b40:	685b      	ldr	r3, [r3, #4]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d106      	bne.n	8020b54 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8020b46:	4b15      	ldr	r3, [pc, #84]	; (8020b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020b48:	f240 12df 	movw	r2, #479	; 0x1df
 8020b4c:	4917      	ldr	r1, [pc, #92]	; (8020bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020b4e:	4815      	ldr	r0, [pc, #84]	; (8020ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020b50:	f002 fe88 	bl	8023864 <iprintf>
          LWIP_ASSERT("sanity check",
 8020b54:	68fb      	ldr	r3, [r7, #12]
 8020b56:	685b      	ldr	r3, [r3, #4]
 8020b58:	685b      	ldr	r3, [r3, #4]
 8020b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8020b5c:	429a      	cmp	r2, r3
 8020b5e:	d106      	bne.n	8020b6e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8020b60:	4b0e      	ldr	r3, [pc, #56]	; (8020b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020b62:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020b66:	4911      	ldr	r1, [pc, #68]	; (8020bac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8020b68:	480e      	ldr	r0, [pc, #56]	; (8020ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020b6a:	f002 fe7b 	bl	8023864 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8020b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d006      	beq.n	8020b84 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8020b76:	4b09      	ldr	r3, [pc, #36]	; (8020b9c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8020b78:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8020b7c:	490c      	ldr	r1, [pc, #48]	; (8020bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8020b7e:	4809      	ldr	r0, [pc, #36]	; (8020ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8020b80:	f002 fe70 	bl	8023864 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8020b84:	6a3b      	ldr	r3, [r7, #32]
 8020b86:	2b00      	cmp	r3, #0
 8020b88:	bf14      	ite	ne
 8020b8a:	2301      	movne	r3, #1
 8020b8c:	2300      	moveq	r3, #0
 8020b8e:	b2db      	uxtb	r3, r3
 8020b90:	e000      	b.n	8020b94 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8020b92:	2300      	movs	r3, #0
}
 8020b94:	4618      	mov	r0, r3
 8020b96:	3730      	adds	r7, #48	; 0x30
 8020b98:	46bd      	mov	sp, r7
 8020b9a:	bd80      	pop	{r7, pc}
 8020b9c:	0802bc28 	.word	0x0802bc28
 8020ba0:	0802bd0c 	.word	0x0802bd0c
 8020ba4:	0802bc70 	.word	0x0802bc70
 8020ba8:	0802bd2c 	.word	0x0802bd2c
 8020bac:	0802bd64 	.word	0x0802bd64
 8020bb0:	0802bd74 	.word	0x0802bd74

08020bb4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8020bb4:	b580      	push	{r7, lr}
 8020bb6:	b08e      	sub	sp, #56	; 0x38
 8020bb8:	af00      	add	r7, sp, #0
 8020bba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	685b      	ldr	r3, [r3, #4]
 8020bc0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8020bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bc4:	781b      	ldrb	r3, [r3, #0]
 8020bc6:	f003 030f 	and.w	r3, r3, #15
 8020bca:	b2db      	uxtb	r3, r3
 8020bcc:	009b      	lsls	r3, r3, #2
 8020bce:	b2db      	uxtb	r3, r3
 8020bd0:	2b14      	cmp	r3, #20
 8020bd2:	f040 8171 	bne.w	8020eb8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8020bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bd8:	88db      	ldrh	r3, [r3, #6]
 8020bda:	b29b      	uxth	r3, r3
 8020bdc:	4618      	mov	r0, r3
 8020bde:	f7f4 fec7 	bl	8015970 <lwip_htons>
 8020be2:	4603      	mov	r3, r0
 8020be4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020be8:	b29b      	uxth	r3, r3
 8020bea:	00db      	lsls	r3, r3, #3
 8020bec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020bf0:	885b      	ldrh	r3, [r3, #2]
 8020bf2:	b29b      	uxth	r3, r3
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f7f4 febb 	bl	8015970 <lwip_htons>
 8020bfa:	4603      	mov	r3, r0
 8020bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8020bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c00:	781b      	ldrb	r3, [r3, #0]
 8020c02:	f003 030f 	and.w	r3, r3, #15
 8020c06:	b2db      	uxtb	r3, r3
 8020c08:	009b      	lsls	r3, r3, #2
 8020c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8020c0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020c12:	b29b      	uxth	r3, r3
 8020c14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020c16:	429a      	cmp	r2, r3
 8020c18:	f0c0 8150 	bcc.w	8020ebc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8020c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020c20:	b29b      	uxth	r3, r3
 8020c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8020c24:	1ad3      	subs	r3, r2, r3
 8020c26:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020c28:	6878      	ldr	r0, [r7, #4]
 8020c2a:	f7f6 fdeb 	bl	8017804 <pbuf_clen>
 8020c2e:	4603      	mov	r3, r0
 8020c30:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8020c32:	4b8c      	ldr	r3, [pc, #560]	; (8020e64 <ip4_reass+0x2b0>)
 8020c34:	881b      	ldrh	r3, [r3, #0]
 8020c36:	461a      	mov	r2, r3
 8020c38:	8c3b      	ldrh	r3, [r7, #32]
 8020c3a:	4413      	add	r3, r2
 8020c3c:	2b0a      	cmp	r3, #10
 8020c3e:	dd10      	ble.n	8020c62 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020c40:	8c3b      	ldrh	r3, [r7, #32]
 8020c42:	4619      	mov	r1, r3
 8020c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020c46:	f7ff fd81 	bl	802074c <ip_reass_remove_oldest_datagram>
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	2b00      	cmp	r3, #0
 8020c4e:	f000 8137 	beq.w	8020ec0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8020c52:	4b84      	ldr	r3, [pc, #528]	; (8020e64 <ip4_reass+0x2b0>)
 8020c54:	881b      	ldrh	r3, [r3, #0]
 8020c56:	461a      	mov	r2, r3
 8020c58:	8c3b      	ldrh	r3, [r7, #32]
 8020c5a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020c5c:	2b0a      	cmp	r3, #10
 8020c5e:	f300 812f 	bgt.w	8020ec0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020c62:	4b81      	ldr	r3, [pc, #516]	; (8020e68 <ip4_reass+0x2b4>)
 8020c64:	681b      	ldr	r3, [r3, #0]
 8020c66:	633b      	str	r3, [r7, #48]	; 0x30
 8020c68:	e015      	b.n	8020c96 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8020c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c6c:	695a      	ldr	r2, [r3, #20]
 8020c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c70:	68db      	ldr	r3, [r3, #12]
 8020c72:	429a      	cmp	r2, r3
 8020c74:	d10c      	bne.n	8020c90 <ip4_reass+0xdc>
 8020c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c78:	699a      	ldr	r2, [r3, #24]
 8020c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c7c:	691b      	ldr	r3, [r3, #16]
 8020c7e:	429a      	cmp	r2, r3
 8020c80:	d106      	bne.n	8020c90 <ip4_reass+0xdc>
 8020c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c84:	899a      	ldrh	r2, [r3, #12]
 8020c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c88:	889b      	ldrh	r3, [r3, #4]
 8020c8a:	b29b      	uxth	r3, r3
 8020c8c:	429a      	cmp	r2, r3
 8020c8e:	d006      	beq.n	8020c9e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8020c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c92:	681b      	ldr	r3, [r3, #0]
 8020c94:	633b      	str	r3, [r7, #48]	; 0x30
 8020c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d1e6      	bne.n	8020c6a <ip4_reass+0xb6>
 8020c9c:	e000      	b.n	8020ca0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8020c9e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8020ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d109      	bne.n	8020cba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8020ca6:	8c3b      	ldrh	r3, [r7, #32]
 8020ca8:	4619      	mov	r1, r3
 8020caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020cac:	f7ff fdb0 	bl	8020810 <ip_reass_enqueue_new_datagram>
 8020cb0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8020cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d11c      	bne.n	8020cf2 <ip4_reass+0x13e>
      goto nullreturn;
 8020cb8:	e105      	b.n	8020ec6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cbc:	88db      	ldrh	r3, [r3, #6]
 8020cbe:	b29b      	uxth	r3, r3
 8020cc0:	4618      	mov	r0, r3
 8020cc2:	f7f4 fe55 	bl	8015970 <lwip_htons>
 8020cc6:	4603      	mov	r3, r0
 8020cc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d110      	bne.n	8020cf2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020cd2:	89db      	ldrh	r3, [r3, #14]
 8020cd4:	4618      	mov	r0, r3
 8020cd6:	f7f4 fe4b 	bl	8015970 <lwip_htons>
 8020cda:	4603      	mov	r3, r0
 8020cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d006      	beq.n	8020cf2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8020ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ce6:	3308      	adds	r3, #8
 8020ce8:	2214      	movs	r2, #20
 8020cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020cec:	4618      	mov	r0, r3
 8020cee:	f004 f8dc 	bl	8024eaa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8020cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020cf4:	88db      	ldrh	r3, [r3, #6]
 8020cf6:	b29b      	uxth	r3, r3
 8020cf8:	f003 0320 	and.w	r3, r3, #32
 8020cfc:	2b00      	cmp	r3, #0
 8020cfe:	bf0c      	ite	eq
 8020d00:	2301      	moveq	r3, #1
 8020d02:	2300      	movne	r3, #0
 8020d04:	b2db      	uxtb	r3, r3
 8020d06:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020d08:	69fb      	ldr	r3, [r7, #28]
 8020d0a:	2b00      	cmp	r3, #0
 8020d0c:	d00e      	beq.n	8020d2c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8020d0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020d12:	4413      	add	r3, r2
 8020d14:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8020d16:	8b7a      	ldrh	r2, [r7, #26]
 8020d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020d1a:	429a      	cmp	r2, r3
 8020d1c:	f0c0 80a0 	bcc.w	8020e60 <ip4_reass+0x2ac>
 8020d20:	8b7b      	ldrh	r3, [r7, #26]
 8020d22:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8020d26:	4293      	cmp	r3, r2
 8020d28:	f200 809a 	bhi.w	8020e60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020d2c:	69fa      	ldr	r2, [r7, #28]
 8020d2e:	6879      	ldr	r1, [r7, #4]
 8020d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020d32:	f7ff fdd5 	bl	80208e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8020d36:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020d38:	697b      	ldr	r3, [r7, #20]
 8020d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020d3e:	f000 809b 	beq.w	8020e78 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8020d42:	4b48      	ldr	r3, [pc, #288]	; (8020e64 <ip4_reass+0x2b0>)
 8020d44:	881a      	ldrh	r2, [r3, #0]
 8020d46:	8c3b      	ldrh	r3, [r7, #32]
 8020d48:	4413      	add	r3, r2
 8020d4a:	b29a      	uxth	r2, r3
 8020d4c:	4b45      	ldr	r3, [pc, #276]	; (8020e64 <ip4_reass+0x2b0>)
 8020d4e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8020d50:	69fb      	ldr	r3, [r7, #28]
 8020d52:	2b00      	cmp	r3, #0
 8020d54:	d00d      	beq.n	8020d72 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8020d56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020d5a:	4413      	add	r3, r2
 8020d5c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8020d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d60:	8a7a      	ldrh	r2, [r7, #18]
 8020d62:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8020d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d66:	7f9b      	ldrb	r3, [r3, #30]
 8020d68:	f043 0301 	orr.w	r3, r3, #1
 8020d6c:	b2da      	uxtb	r2, r3
 8020d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d70:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8020d72:	697b      	ldr	r3, [r7, #20]
 8020d74:	2b01      	cmp	r3, #1
 8020d76:	d171      	bne.n	8020e5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8020d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d7a:	8b9b      	ldrh	r3, [r3, #28]
 8020d7c:	3314      	adds	r3, #20
 8020d7e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8020d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d82:	685b      	ldr	r3, [r3, #4]
 8020d84:	685b      	ldr	r3, [r3, #4]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8020d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d8c:	685b      	ldr	r3, [r3, #4]
 8020d8e:	685b      	ldr	r3, [r3, #4]
 8020d90:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8020d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020d94:	3308      	adds	r3, #8
 8020d96:	2214      	movs	r2, #20
 8020d98:	4619      	mov	r1, r3
 8020d9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020d9c:	f004 f885 	bl	8024eaa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8020da0:	8a3b      	ldrh	r3, [r7, #16]
 8020da2:	4618      	mov	r0, r3
 8020da4:	f7f4 fde4 	bl	8015970 <lwip_htons>
 8020da8:	4603      	mov	r3, r0
 8020daa:	461a      	mov	r2, r3
 8020dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8020db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020db2:	2200      	movs	r2, #0
 8020db4:	719a      	strb	r2, [r3, #6]
 8020db6:	2200      	movs	r2, #0
 8020db8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8020dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020dbc:	2200      	movs	r2, #0
 8020dbe:	729a      	strb	r2, [r3, #10]
 8020dc0:	2200      	movs	r2, #0
 8020dc2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8020dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020dc6:	685b      	ldr	r3, [r3, #4]
 8020dc8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8020dca:	e00d      	b.n	8020de8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8020dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dce:	685b      	ldr	r3, [r3, #4]
 8020dd0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8020dd2:	2114      	movs	r1, #20
 8020dd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8020dd6:	f7f6 fc01 	bl	80175dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8020dda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020ddc:	6878      	ldr	r0, [r7, #4]
 8020dde:	f7f6 fd51 	bl	8017884 <pbuf_cat>
      r = iprh->next_pbuf;
 8020de2:	68fb      	ldr	r3, [r7, #12]
 8020de4:	681b      	ldr	r3, [r3, #0]
 8020de6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	d1ee      	bne.n	8020dcc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8020dee:	4b1e      	ldr	r3, [pc, #120]	; (8020e68 <ip4_reass+0x2b4>)
 8020df0:	681b      	ldr	r3, [r3, #0]
 8020df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020df4:	429a      	cmp	r2, r3
 8020df6:	d102      	bne.n	8020dfe <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020df8:	2300      	movs	r3, #0
 8020dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020dfc:	e010      	b.n	8020e20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020dfe:	4b1a      	ldr	r3, [pc, #104]	; (8020e68 <ip4_reass+0x2b4>)
 8020e00:	681b      	ldr	r3, [r3, #0]
 8020e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e04:	e007      	b.n	8020e16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8020e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e08:	681b      	ldr	r3, [r3, #0]
 8020e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020e0c:	429a      	cmp	r2, r3
 8020e0e:	d006      	beq.n	8020e1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e12:	681b      	ldr	r3, [r3, #0]
 8020e14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d1f4      	bne.n	8020e06 <ip4_reass+0x252>
 8020e1c:	e000      	b.n	8020e20 <ip4_reass+0x26c>
          break;
 8020e1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020e24:	f7ff fd2e 	bl	8020884 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020e28:	6878      	ldr	r0, [r7, #4]
 8020e2a:	f7f6 fceb 	bl	8017804 <pbuf_clen>
 8020e2e:	4603      	mov	r3, r0
 8020e30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8020e32:	4b0c      	ldr	r3, [pc, #48]	; (8020e64 <ip4_reass+0x2b0>)
 8020e34:	881b      	ldrh	r3, [r3, #0]
 8020e36:	8c3a      	ldrh	r2, [r7, #32]
 8020e38:	429a      	cmp	r2, r3
 8020e3a:	d906      	bls.n	8020e4a <ip4_reass+0x296>
 8020e3c:	4b0b      	ldr	r3, [pc, #44]	; (8020e6c <ip4_reass+0x2b8>)
 8020e3e:	f240 229b 	movw	r2, #667	; 0x29b
 8020e42:	490b      	ldr	r1, [pc, #44]	; (8020e70 <ip4_reass+0x2bc>)
 8020e44:	480b      	ldr	r0, [pc, #44]	; (8020e74 <ip4_reass+0x2c0>)
 8020e46:	f002 fd0d 	bl	8023864 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8020e4a:	4b06      	ldr	r3, [pc, #24]	; (8020e64 <ip4_reass+0x2b0>)
 8020e4c:	881a      	ldrh	r2, [r3, #0]
 8020e4e:	8c3b      	ldrh	r3, [r7, #32]
 8020e50:	1ad3      	subs	r3, r2, r3
 8020e52:	b29a      	uxth	r2, r3
 8020e54:	4b03      	ldr	r3, [pc, #12]	; (8020e64 <ip4_reass+0x2b0>)
 8020e56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	e038      	b.n	8020ece <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	e036      	b.n	8020ece <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8020e60:	bf00      	nop
 8020e62:	e00a      	b.n	8020e7a <ip4_reass+0x2c6>
 8020e64:	20016120 	.word	0x20016120
 8020e68:	2001611c 	.word	0x2001611c
 8020e6c:	0802bc28 	.word	0x0802bc28
 8020e70:	0802bd98 	.word	0x0802bd98
 8020e74:	0802bc70 	.word	0x0802bc70
    goto nullreturn_ipr;
 8020e78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8020e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d106      	bne.n	8020e8e <ip4_reass+0x2da>
 8020e80:	4b15      	ldr	r3, [pc, #84]	; (8020ed8 <ip4_reass+0x324>)
 8020e82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8020e86:	4915      	ldr	r1, [pc, #84]	; (8020edc <ip4_reass+0x328>)
 8020e88:	4815      	ldr	r0, [pc, #84]	; (8020ee0 <ip4_reass+0x32c>)
 8020e8a:	f002 fceb 	bl	8023864 <iprintf>
  if (ipr->p == NULL) {
 8020e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e90:	685b      	ldr	r3, [r3, #4]
 8020e92:	2b00      	cmp	r3, #0
 8020e94:	d116      	bne.n	8020ec4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8020e96:	4b13      	ldr	r3, [pc, #76]	; (8020ee4 <ip4_reass+0x330>)
 8020e98:	681b      	ldr	r3, [r3, #0]
 8020e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020e9c:	429a      	cmp	r2, r3
 8020e9e:	d006      	beq.n	8020eae <ip4_reass+0x2fa>
 8020ea0:	4b0d      	ldr	r3, [pc, #52]	; (8020ed8 <ip4_reass+0x324>)
 8020ea2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8020ea6:	4910      	ldr	r1, [pc, #64]	; (8020ee8 <ip4_reass+0x334>)
 8020ea8:	480d      	ldr	r0, [pc, #52]	; (8020ee0 <ip4_reass+0x32c>)
 8020eaa:	f002 fcdb 	bl	8023864 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8020eae:	2100      	movs	r1, #0
 8020eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020eb2:	f7ff fce7 	bl	8020884 <ip_reass_dequeue_datagram>
 8020eb6:	e006      	b.n	8020ec6 <ip4_reass+0x312>
    goto nullreturn;
 8020eb8:	bf00      	nop
 8020eba:	e004      	b.n	8020ec6 <ip4_reass+0x312>
    goto nullreturn;
 8020ebc:	bf00      	nop
 8020ebe:	e002      	b.n	8020ec6 <ip4_reass+0x312>
      goto nullreturn;
 8020ec0:	bf00      	nop
 8020ec2:	e000      	b.n	8020ec6 <ip4_reass+0x312>
  }

nullreturn:
 8020ec4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8020ec6:	6878      	ldr	r0, [r7, #4]
 8020ec8:	f7f6 fc0e 	bl	80176e8 <pbuf_free>
  return NULL;
 8020ecc:	2300      	movs	r3, #0
}
 8020ece:	4618      	mov	r0, r3
 8020ed0:	3738      	adds	r7, #56	; 0x38
 8020ed2:	46bd      	mov	sp, r7
 8020ed4:	bd80      	pop	{r7, pc}
 8020ed6:	bf00      	nop
 8020ed8:	0802bc28 	.word	0x0802bc28
 8020edc:	0802bdb4 	.word	0x0802bdb4
 8020ee0:	0802bc70 	.word	0x0802bc70
 8020ee4:	2001611c 	.word	0x2001611c
 8020ee8:	0802bdc0 	.word	0x0802bdc0

08020eec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020eec:	b580      	push	{r7, lr}
 8020eee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8020ef0:	2005      	movs	r0, #5
 8020ef2:	f7f5 fcdf 	bl	80168b4 <memp_malloc>
 8020ef6:	4603      	mov	r3, r0
}
 8020ef8:	4618      	mov	r0, r3
 8020efa:	bd80      	pop	{r7, pc}

08020efc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8020efc:	b580      	push	{r7, lr}
 8020efe:	b082      	sub	sp, #8
 8020f00:	af00      	add	r7, sp, #0
 8020f02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d106      	bne.n	8020f18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8020f0a:	4b07      	ldr	r3, [pc, #28]	; (8020f28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020f0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8020f10:	4906      	ldr	r1, [pc, #24]	; (8020f2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8020f12:	4807      	ldr	r0, [pc, #28]	; (8020f30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8020f14:	f002 fca6 	bl	8023864 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020f18:	6879      	ldr	r1, [r7, #4]
 8020f1a:	2005      	movs	r0, #5
 8020f1c:	f7f5 fd40 	bl	80169a0 <memp_free>
}
 8020f20:	bf00      	nop
 8020f22:	3708      	adds	r7, #8
 8020f24:	46bd      	mov	sp, r7
 8020f26:	bd80      	pop	{r7, pc}
 8020f28:	0802bc28 	.word	0x0802bc28
 8020f2c:	0802bde0 	.word	0x0802bde0
 8020f30:	0802bc70 	.word	0x0802bc70

08020f34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020f34:	b580      	push	{r7, lr}
 8020f36:	b084      	sub	sp, #16
 8020f38:	af00      	add	r7, sp, #0
 8020f3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020f3c:	687b      	ldr	r3, [r7, #4]
 8020f3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8020f40:	68fb      	ldr	r3, [r7, #12]
 8020f42:	2b00      	cmp	r3, #0
 8020f44:	d106      	bne.n	8020f54 <ipfrag_free_pbuf_custom+0x20>
 8020f46:	4b11      	ldr	r3, [pc, #68]	; (8020f8c <ipfrag_free_pbuf_custom+0x58>)
 8020f48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020f4c:	4910      	ldr	r1, [pc, #64]	; (8020f90 <ipfrag_free_pbuf_custom+0x5c>)
 8020f4e:	4811      	ldr	r0, [pc, #68]	; (8020f94 <ipfrag_free_pbuf_custom+0x60>)
 8020f50:	f002 fc88 	bl	8023864 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8020f54:	68fa      	ldr	r2, [r7, #12]
 8020f56:	687b      	ldr	r3, [r7, #4]
 8020f58:	429a      	cmp	r2, r3
 8020f5a:	d006      	beq.n	8020f6a <ipfrag_free_pbuf_custom+0x36>
 8020f5c:	4b0b      	ldr	r3, [pc, #44]	; (8020f8c <ipfrag_free_pbuf_custom+0x58>)
 8020f5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8020f62:	490d      	ldr	r1, [pc, #52]	; (8020f98 <ipfrag_free_pbuf_custom+0x64>)
 8020f64:	480b      	ldr	r0, [pc, #44]	; (8020f94 <ipfrag_free_pbuf_custom+0x60>)
 8020f66:	f002 fc7d 	bl	8023864 <iprintf>
  if (pcr->original != NULL) {
 8020f6a:	68fb      	ldr	r3, [r7, #12]
 8020f6c:	695b      	ldr	r3, [r3, #20]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d004      	beq.n	8020f7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8020f72:	68fb      	ldr	r3, [r7, #12]
 8020f74:	695b      	ldr	r3, [r3, #20]
 8020f76:	4618      	mov	r0, r3
 8020f78:	f7f6 fbb6 	bl	80176e8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8020f7c:	68f8      	ldr	r0, [r7, #12]
 8020f7e:	f7ff ffbd 	bl	8020efc <ip_frag_free_pbuf_custom_ref>
}
 8020f82:	bf00      	nop
 8020f84:	3710      	adds	r7, #16
 8020f86:	46bd      	mov	sp, r7
 8020f88:	bd80      	pop	{r7, pc}
 8020f8a:	bf00      	nop
 8020f8c:	0802bc28 	.word	0x0802bc28
 8020f90:	0802bdec 	.word	0x0802bdec
 8020f94:	0802bc70 	.word	0x0802bc70
 8020f98:	0802bdf8 	.word	0x0802bdf8

08020f9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b094      	sub	sp, #80	; 0x50
 8020fa0:	af02      	add	r7, sp, #8
 8020fa2:	60f8      	str	r0, [r7, #12]
 8020fa4:	60b9      	str	r1, [r7, #8]
 8020fa6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8020fa8:	2300      	movs	r3, #0
 8020faa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8020fae:	68bb      	ldr	r3, [r7, #8]
 8020fb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8020fb2:	3b14      	subs	r3, #20
 8020fb4:	2b00      	cmp	r3, #0
 8020fb6:	da00      	bge.n	8020fba <ip4_frag+0x1e>
 8020fb8:	3307      	adds	r3, #7
 8020fba:	10db      	asrs	r3, r3, #3
 8020fbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8020fbe:	2314      	movs	r3, #20
 8020fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8020fc2:	68fb      	ldr	r3, [r7, #12]
 8020fc4:	685b      	ldr	r3, [r3, #4]
 8020fc6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8020fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020fca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fce:	781b      	ldrb	r3, [r3, #0]
 8020fd0:	f003 030f 	and.w	r3, r3, #15
 8020fd4:	b2db      	uxtb	r3, r3
 8020fd6:	009b      	lsls	r3, r3, #2
 8020fd8:	b2db      	uxtb	r3, r3
 8020fda:	2b14      	cmp	r3, #20
 8020fdc:	d002      	beq.n	8020fe4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8020fde:	f06f 0305 	mvn.w	r3, #5
 8020fe2:	e110      	b.n	8021206 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020fe4:	68fb      	ldr	r3, [r7, #12]
 8020fe6:	895b      	ldrh	r3, [r3, #10]
 8020fe8:	2b13      	cmp	r3, #19
 8020fea:	d809      	bhi.n	8021000 <ip4_frag+0x64>
 8020fec:	4b88      	ldr	r3, [pc, #544]	; (8021210 <ip4_frag+0x274>)
 8020fee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8020ff2:	4988      	ldr	r1, [pc, #544]	; (8021214 <ip4_frag+0x278>)
 8020ff4:	4888      	ldr	r0, [pc, #544]	; (8021218 <ip4_frag+0x27c>)
 8020ff6:	f002 fc35 	bl	8023864 <iprintf>
 8020ffa:	f06f 0305 	mvn.w	r3, #5
 8020ffe:	e102      	b.n	8021206 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8021000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021002:	88db      	ldrh	r3, [r3, #6]
 8021004:	b29b      	uxth	r3, r3
 8021006:	4618      	mov	r0, r3
 8021008:	f7f4 fcb2 	bl	8015970 <lwip_htons>
 802100c:	4603      	mov	r3, r0
 802100e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8021010:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021012:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802101a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802101c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021020:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021022:	68fb      	ldr	r3, [r7, #12]
 8021024:	891b      	ldrh	r3, [r3, #8]
 8021026:	3b14      	subs	r3, #20
 8021028:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802102c:	e0e1      	b.n	80211f2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802102e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021030:	00db      	lsls	r3, r3, #3
 8021032:	b29b      	uxth	r3, r3
 8021034:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021038:	4293      	cmp	r3, r2
 802103a:	bf28      	it	cs
 802103c:	4613      	movcs	r3, r2
 802103e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021040:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021044:	2114      	movs	r1, #20
 8021046:	200e      	movs	r0, #14
 8021048:	f7f6 f86a 	bl	8017120 <pbuf_alloc>
 802104c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021050:	2b00      	cmp	r3, #0
 8021052:	f000 80d5 	beq.w	8021200 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021058:	895b      	ldrh	r3, [r3, #10]
 802105a:	2b13      	cmp	r3, #19
 802105c:	d806      	bhi.n	802106c <ip4_frag+0xd0>
 802105e:	4b6c      	ldr	r3, [pc, #432]	; (8021210 <ip4_frag+0x274>)
 8021060:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021064:	496d      	ldr	r1, [pc, #436]	; (802121c <ip4_frag+0x280>)
 8021066:	486c      	ldr	r0, [pc, #432]	; (8021218 <ip4_frag+0x27c>)
 8021068:	f002 fbfc 	bl	8023864 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802106e:	685b      	ldr	r3, [r3, #4]
 8021070:	2214      	movs	r2, #20
 8021072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021074:	4618      	mov	r0, r3
 8021076:	f003 ff18 	bl	8024eaa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802107c:	685b      	ldr	r3, [r3, #4]
 802107e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8021080:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021082:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021086:	e064      	b.n	8021152 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021088:	68fb      	ldr	r3, [r7, #12]
 802108a:	895a      	ldrh	r2, [r3, #10]
 802108c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802108e:	1ad3      	subs	r3, r2, r3
 8021090:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8021092:	68fb      	ldr	r3, [r7, #12]
 8021094:	895b      	ldrh	r3, [r3, #10]
 8021096:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021098:	429a      	cmp	r2, r3
 802109a:	d906      	bls.n	80210aa <ip4_frag+0x10e>
 802109c:	4b5c      	ldr	r3, [pc, #368]	; (8021210 <ip4_frag+0x274>)
 802109e:	f240 322d 	movw	r2, #813	; 0x32d
 80210a2:	495f      	ldr	r1, [pc, #380]	; (8021220 <ip4_frag+0x284>)
 80210a4:	485c      	ldr	r0, [pc, #368]	; (8021218 <ip4_frag+0x27c>)
 80210a6:	f002 fbdd 	bl	8023864 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80210aa:	8bfa      	ldrh	r2, [r7, #30]
 80210ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80210b0:	4293      	cmp	r3, r2
 80210b2:	bf28      	it	cs
 80210b4:	4613      	movcs	r3, r2
 80210b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80210ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d105      	bne.n	80210ce <ip4_frag+0x132>
        poff = 0;
 80210c2:	2300      	movs	r3, #0
 80210c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80210c6:	68fb      	ldr	r3, [r7, #12]
 80210c8:	681b      	ldr	r3, [r3, #0]
 80210ca:	60fb      	str	r3, [r7, #12]
        continue;
 80210cc:	e041      	b.n	8021152 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80210ce:	f7ff ff0d 	bl	8020eec <ip_frag_alloc_pbuf_custom_ref>
 80210d2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80210d4:	69bb      	ldr	r3, [r7, #24]
 80210d6:	2b00      	cmp	r3, #0
 80210d8:	d103      	bne.n	80210e2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80210da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80210dc:	f7f6 fb04 	bl	80176e8 <pbuf_free>
        goto memerr;
 80210e0:	e08f      	b.n	8021202 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80210e2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80210e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80210ea:	4413      	add	r3, r2
 80210ec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80210f0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80210f4:	9201      	str	r2, [sp, #4]
 80210f6:	9300      	str	r3, [sp, #0]
 80210f8:	4603      	mov	r3, r0
 80210fa:	2241      	movs	r2, #65	; 0x41
 80210fc:	2000      	movs	r0, #0
 80210fe:	f7f6 f939 	bl	8017374 <pbuf_alloced_custom>
 8021102:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021104:	697b      	ldr	r3, [r7, #20]
 8021106:	2b00      	cmp	r3, #0
 8021108:	d106      	bne.n	8021118 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802110a:	69b8      	ldr	r0, [r7, #24]
 802110c:	f7ff fef6 	bl	8020efc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021110:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021112:	f7f6 fae9 	bl	80176e8 <pbuf_free>
        goto memerr;
 8021116:	e074      	b.n	8021202 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021118:	68f8      	ldr	r0, [r7, #12]
 802111a:	f7f6 fb8b 	bl	8017834 <pbuf_ref>
      pcr->original = p;
 802111e:	69bb      	ldr	r3, [r7, #24]
 8021120:	68fa      	ldr	r2, [r7, #12]
 8021122:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021124:	69bb      	ldr	r3, [r7, #24]
 8021126:	4a3f      	ldr	r2, [pc, #252]	; (8021224 <ip4_frag+0x288>)
 8021128:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802112a:	6979      	ldr	r1, [r7, #20]
 802112c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802112e:	f7f6 fba9 	bl	8017884 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8021132:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021136:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802113a:	1ad3      	subs	r3, r2, r3
 802113c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8021140:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021144:	2b00      	cmp	r3, #0
 8021146:	d004      	beq.n	8021152 <ip4_frag+0x1b6>
        poff = 0;
 8021148:	2300      	movs	r3, #0
 802114a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802114c:	68fb      	ldr	r3, [r7, #12]
 802114e:	681b      	ldr	r3, [r3, #0]
 8021150:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8021152:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021156:	2b00      	cmp	r3, #0
 8021158:	d196      	bne.n	8021088 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802115a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802115c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021160:	4413      	add	r3, r2
 8021162:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8021164:	68bb      	ldr	r3, [r7, #8]
 8021166:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021168:	f1a3 0213 	sub.w	r2, r3, #19
 802116c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021170:	429a      	cmp	r2, r3
 8021172:	bfcc      	ite	gt
 8021174:	2301      	movgt	r3, #1
 8021176:	2300      	movle	r3, #0
 8021178:	b2db      	uxtb	r3, r3
 802117a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802117c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021184:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8021186:	6a3b      	ldr	r3, [r7, #32]
 8021188:	2b00      	cmp	r3, #0
 802118a:	d002      	beq.n	8021192 <ip4_frag+0x1f6>
 802118c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802118e:	2b00      	cmp	r3, #0
 8021190:	d003      	beq.n	802119a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8021192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021194:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021198:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802119a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802119c:	4618      	mov	r0, r3
 802119e:	f7f4 fbe7 	bl	8015970 <lwip_htons>
 80211a2:	4603      	mov	r3, r0
 80211a4:	461a      	mov	r2, r3
 80211a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211a8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80211aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80211ac:	3314      	adds	r3, #20
 80211ae:	b29b      	uxth	r3, r3
 80211b0:	4618      	mov	r0, r3
 80211b2:	f7f4 fbdd 	bl	8015970 <lwip_htons>
 80211b6:	4603      	mov	r3, r0
 80211b8:	461a      	mov	r2, r3
 80211ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211bc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80211be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211c0:	2200      	movs	r2, #0
 80211c2:	729a      	strb	r2, [r3, #10]
 80211c4:	2200      	movs	r2, #0
 80211c6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80211c8:	68bb      	ldr	r3, [r7, #8]
 80211ca:	695b      	ldr	r3, [r3, #20]
 80211cc:	687a      	ldr	r2, [r7, #4]
 80211ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80211d0:	68b8      	ldr	r0, [r7, #8]
 80211d2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80211d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80211d6:	f7f6 fa87 	bl	80176e8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80211da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80211de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80211e0:	1ad3      	subs	r3, r2, r3
 80211e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80211e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80211ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80211ec:	4413      	add	r3, r2
 80211ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80211f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	f47f af19 	bne.w	802102e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80211fc:	2300      	movs	r3, #0
 80211fe:	e002      	b.n	8021206 <ip4_frag+0x26a>
      goto memerr;
 8021200:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8021202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8021206:	4618      	mov	r0, r3
 8021208:	3748      	adds	r7, #72	; 0x48
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop
 8021210:	0802bc28 	.word	0x0802bc28
 8021214:	0802be04 	.word	0x0802be04
 8021218:	0802bc70 	.word	0x0802bc70
 802121c:	0802be20 	.word	0x0802be20
 8021220:	0802be40 	.word	0x0802be40
 8021224:	08020f35 	.word	0x08020f35

08021228 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021228:	b580      	push	{r7, lr}
 802122a:	b086      	sub	sp, #24
 802122c:	af00      	add	r7, sp, #0
 802122e:	6078      	str	r0, [r7, #4]
 8021230:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8021232:	230e      	movs	r3, #14
 8021234:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	895b      	ldrh	r3, [r3, #10]
 802123a:	2b0e      	cmp	r3, #14
 802123c:	d96e      	bls.n	802131c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802123e:	687b      	ldr	r3, [r7, #4]
 8021240:	7bdb      	ldrb	r3, [r3, #15]
 8021242:	2b00      	cmp	r3, #0
 8021244:	d106      	bne.n	8021254 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021246:	683b      	ldr	r3, [r7, #0]
 8021248:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 802124c:	3301      	adds	r3, #1
 802124e:	b2da      	uxtb	r2, r3
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021254:	687b      	ldr	r3, [r7, #4]
 8021256:	685b      	ldr	r3, [r3, #4]
 8021258:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802125a:	693b      	ldr	r3, [r7, #16]
 802125c:	7b1a      	ldrb	r2, [r3, #12]
 802125e:	7b5b      	ldrb	r3, [r3, #13]
 8021260:	021b      	lsls	r3, r3, #8
 8021262:	4313      	orrs	r3, r2
 8021264:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021266:	693b      	ldr	r3, [r7, #16]
 8021268:	781b      	ldrb	r3, [r3, #0]
 802126a:	f003 0301 	and.w	r3, r3, #1
 802126e:	2b00      	cmp	r3, #0
 8021270:	d023      	beq.n	80212ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8021272:	693b      	ldr	r3, [r7, #16]
 8021274:	781b      	ldrb	r3, [r3, #0]
 8021276:	2b01      	cmp	r3, #1
 8021278:	d10f      	bne.n	802129a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802127a:	693b      	ldr	r3, [r7, #16]
 802127c:	785b      	ldrb	r3, [r3, #1]
 802127e:	2b00      	cmp	r3, #0
 8021280:	d11b      	bne.n	80212ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8021282:	693b      	ldr	r3, [r7, #16]
 8021284:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021286:	2b5e      	cmp	r3, #94	; 0x5e
 8021288:	d117      	bne.n	80212ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802128a:	687b      	ldr	r3, [r7, #4]
 802128c:	7b5b      	ldrb	r3, [r3, #13]
 802128e:	f043 0310 	orr.w	r3, r3, #16
 8021292:	b2da      	uxtb	r2, r3
 8021294:	687b      	ldr	r3, [r7, #4]
 8021296:	735a      	strb	r2, [r3, #13]
 8021298:	e00f      	b.n	80212ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802129a:	693b      	ldr	r3, [r7, #16]
 802129c:	2206      	movs	r2, #6
 802129e:	4928      	ldr	r1, [pc, #160]	; (8021340 <ethernet_input+0x118>)
 80212a0:	4618      	mov	r0, r3
 80212a2:	f002 fc7b 	bl	8023b9c <memcmp>
 80212a6:	4603      	mov	r3, r0
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	d106      	bne.n	80212ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80212ac:	687b      	ldr	r3, [r7, #4]
 80212ae:	7b5b      	ldrb	r3, [r3, #13]
 80212b0:	f043 0308 	orr.w	r3, r3, #8
 80212b4:	b2da      	uxtb	r2, r3
 80212b6:	687b      	ldr	r3, [r7, #4]
 80212b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80212ba:	89fb      	ldrh	r3, [r7, #14]
 80212bc:	2b08      	cmp	r3, #8
 80212be:	d003      	beq.n	80212c8 <ethernet_input+0xa0>
 80212c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80212c4:	d014      	beq.n	80212f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80212c6:	e032      	b.n	802132e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80212c8:	683b      	ldr	r3, [r7, #0]
 80212ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80212ce:	f003 0308 	and.w	r3, r3, #8
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d024      	beq.n	8021320 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80212d6:	8afb      	ldrh	r3, [r7, #22]
 80212d8:	4619      	mov	r1, r3
 80212da:	6878      	ldr	r0, [r7, #4]
 80212dc:	f7f6 f97e 	bl	80175dc <pbuf_remove_header>
 80212e0:	4603      	mov	r3, r0
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d11e      	bne.n	8021324 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80212e6:	6839      	ldr	r1, [r7, #0]
 80212e8:	6878      	ldr	r0, [r7, #4]
 80212ea:	f7fe fe91 	bl	8020010 <ip4_input>
      break;
 80212ee:	e013      	b.n	8021318 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80212f0:	683b      	ldr	r3, [r7, #0]
 80212f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80212f6:	f003 0308 	and.w	r3, r3, #8
 80212fa:	2b00      	cmp	r3, #0
 80212fc:	d014      	beq.n	8021328 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80212fe:	8afb      	ldrh	r3, [r7, #22]
 8021300:	4619      	mov	r1, r3
 8021302:	6878      	ldr	r0, [r7, #4]
 8021304:	f7f6 f96a 	bl	80175dc <pbuf_remove_header>
 8021308:	4603      	mov	r3, r0
 802130a:	2b00      	cmp	r3, #0
 802130c:	d10e      	bne.n	802132c <ethernet_input+0x104>
        etharp_input(p, netif);
 802130e:	6839      	ldr	r1, [r7, #0]
 8021310:	6878      	ldr	r0, [r7, #4]
 8021312:	f7fe f831 	bl	801f378 <etharp_input>
      break;
 8021316:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021318:	2300      	movs	r3, #0
 802131a:	e00c      	b.n	8021336 <ethernet_input+0x10e>
    goto free_and_return;
 802131c:	bf00      	nop
 802131e:	e006      	b.n	802132e <ethernet_input+0x106>
        goto free_and_return;
 8021320:	bf00      	nop
 8021322:	e004      	b.n	802132e <ethernet_input+0x106>
        goto free_and_return;
 8021324:	bf00      	nop
 8021326:	e002      	b.n	802132e <ethernet_input+0x106>
        goto free_and_return;
 8021328:	bf00      	nop
 802132a:	e000      	b.n	802132e <ethernet_input+0x106>
        goto free_and_return;
 802132c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802132e:	6878      	ldr	r0, [r7, #4]
 8021330:	f7f6 f9da 	bl	80176e8 <pbuf_free>
  return ERR_OK;
 8021334:	2300      	movs	r3, #0
}
 8021336:	4618      	mov	r0, r3
 8021338:	3718      	adds	r7, #24
 802133a:	46bd      	mov	sp, r7
 802133c:	bd80      	pop	{r7, pc}
 802133e:	bf00      	nop
 8021340:	0802c1e8 	.word	0x0802c1e8

08021344 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021344:	b580      	push	{r7, lr}
 8021346:	b086      	sub	sp, #24
 8021348:	af00      	add	r7, sp, #0
 802134a:	60f8      	str	r0, [r7, #12]
 802134c:	60b9      	str	r1, [r7, #8]
 802134e:	607a      	str	r2, [r7, #4]
 8021350:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021352:	8c3b      	ldrh	r3, [r7, #32]
 8021354:	4618      	mov	r0, r3
 8021356:	f7f4 fb0b 	bl	8015970 <lwip_htons>
 802135a:	4603      	mov	r3, r0
 802135c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802135e:	210e      	movs	r1, #14
 8021360:	68b8      	ldr	r0, [r7, #8]
 8021362:	f7f6 f92b 	bl	80175bc <pbuf_add_header>
 8021366:	4603      	mov	r3, r0
 8021368:	2b00      	cmp	r3, #0
 802136a:	d125      	bne.n	80213b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802136c:	68bb      	ldr	r3, [r7, #8]
 802136e:	685b      	ldr	r3, [r3, #4]
 8021370:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8021372:	693b      	ldr	r3, [r7, #16]
 8021374:	8afa      	ldrh	r2, [r7, #22]
 8021376:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021378:	693b      	ldr	r3, [r7, #16]
 802137a:	2206      	movs	r2, #6
 802137c:	6839      	ldr	r1, [r7, #0]
 802137e:	4618      	mov	r0, r3
 8021380:	f003 fd93 	bl	8024eaa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8021384:	693b      	ldr	r3, [r7, #16]
 8021386:	3306      	adds	r3, #6
 8021388:	2206      	movs	r2, #6
 802138a:	6879      	ldr	r1, [r7, #4]
 802138c:	4618      	mov	r0, r3
 802138e:	f003 fd8c 	bl	8024eaa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021392:	68fb      	ldr	r3, [r7, #12]
 8021394:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8021398:	2b06      	cmp	r3, #6
 802139a:	d006      	beq.n	80213aa <ethernet_output+0x66>
 802139c:	4b0a      	ldr	r3, [pc, #40]	; (80213c8 <ethernet_output+0x84>)
 802139e:	f44f 7299 	mov.w	r2, #306	; 0x132
 80213a2:	490a      	ldr	r1, [pc, #40]	; (80213cc <ethernet_output+0x88>)
 80213a4:	480a      	ldr	r0, [pc, #40]	; (80213d0 <ethernet_output+0x8c>)
 80213a6:	f002 fa5d 	bl	8023864 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80213aa:	68fb      	ldr	r3, [r7, #12]
 80213ac:	699b      	ldr	r3, [r3, #24]
 80213ae:	68b9      	ldr	r1, [r7, #8]
 80213b0:	68f8      	ldr	r0, [r7, #12]
 80213b2:	4798      	blx	r3
 80213b4:	4603      	mov	r3, r0
 80213b6:	e002      	b.n	80213be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80213b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80213ba:	f06f 0301 	mvn.w	r3, #1
}
 80213be:	4618      	mov	r0, r3
 80213c0:	3718      	adds	r7, #24
 80213c2:	46bd      	mov	sp, r7
 80213c4:	bd80      	pop	{r7, pc}
 80213c6:	bf00      	nop
 80213c8:	0802be50 	.word	0x0802be50
 80213cc:	0802be88 	.word	0x0802be88
 80213d0:	0802bebc 	.word	0x0802bebc

080213d4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80213d4:	b580      	push	{r7, lr}
 80213d6:	b086      	sub	sp, #24
 80213d8:	af00      	add	r7, sp, #0
 80213da:	6078      	str	r0, [r7, #4]
 80213dc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80213de:	683b      	ldr	r3, [r7, #0]
 80213e0:	60bb      	str	r3, [r7, #8]
 80213e2:	2304      	movs	r3, #4
 80213e4:	60fb      	str	r3, [r7, #12]
 80213e6:	2300      	movs	r3, #0
 80213e8:	613b      	str	r3, [r7, #16]
 80213ea:	2300      	movs	r3, #0
 80213ec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80213ee:	f107 0308 	add.w	r3, r7, #8
 80213f2:	2100      	movs	r1, #0
 80213f4:	4618      	mov	r0, r3
 80213f6:	f7e8 fbba 	bl	8009b6e <osMessageCreate>
 80213fa:	4602      	mov	r2, r0
 80213fc:	687b      	ldr	r3, [r7, #4]
 80213fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8021400:	687b      	ldr	r3, [r7, #4]
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d102      	bne.n	802140e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8021408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802140c:	e000      	b.n	8021410 <sys_mbox_new+0x3c>

  return ERR_OK;
 802140e:	2300      	movs	r3, #0
}
 8021410:	4618      	mov	r0, r3
 8021412:	3718      	adds	r7, #24
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}

08021418 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8021418:	b580      	push	{r7, lr}
 802141a:	b082      	sub	sp, #8
 802141c:	af00      	add	r7, sp, #0
 802141e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	4618      	mov	r0, r3
 8021426:	f7e8 fc7f 	bl	8009d28 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	681b      	ldr	r3, [r3, #0]
 802142e:	4618      	mov	r0, r3
 8021430:	f7e8 fc90 	bl	8009d54 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8021434:	bf00      	nop
 8021436:	3708      	adds	r7, #8
 8021438:	46bd      	mov	sp, r7
 802143a:	bd80      	pop	{r7, pc}

0802143c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 802143c:	b580      	push	{r7, lr}
 802143e:	b084      	sub	sp, #16
 8021440:	af00      	add	r7, sp, #0
 8021442:	6078      	str	r0, [r7, #4]
 8021444:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	681b      	ldr	r3, [r3, #0]
 802144a:	6839      	ldr	r1, [r7, #0]
 802144c:	2200      	movs	r2, #0
 802144e:	4618      	mov	r0, r3
 8021450:	f7e8 fbb6 	bl	8009bc0 <osMessagePut>
 8021454:	4603      	mov	r3, r0
 8021456:	2b00      	cmp	r3, #0
 8021458:	d102      	bne.n	8021460 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 802145a:	2300      	movs	r3, #0
 802145c:	73fb      	strb	r3, [r7, #15]
 802145e:	e001      	b.n	8021464 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8021460:	23ff      	movs	r3, #255	; 0xff
 8021462:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8021464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8021468:	4618      	mov	r0, r3
 802146a:	3710      	adds	r7, #16
 802146c:	46bd      	mov	sp, r7
 802146e:	bd80      	pop	{r7, pc}

08021470 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8021470:	b580      	push	{r7, lr}
 8021472:	b08c      	sub	sp, #48	; 0x30
 8021474:	af00      	add	r7, sp, #0
 8021476:	61f8      	str	r0, [r7, #28]
 8021478:	61b9      	str	r1, [r7, #24]
 802147a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 802147c:	f7e8 f9a2 	bl	80097c4 <osKernelSysTick>
 8021480:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8021482:	697b      	ldr	r3, [r7, #20]
 8021484:	2b00      	cmp	r3, #0
 8021486:	d017      	beq.n	80214b8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8021488:	69fb      	ldr	r3, [r7, #28]
 802148a:	6819      	ldr	r1, [r3, #0]
 802148c:	f107 0320 	add.w	r3, r7, #32
 8021490:	697a      	ldr	r2, [r7, #20]
 8021492:	4618      	mov	r0, r3
 8021494:	f7e8 fbd4 	bl	8009c40 <osMessageGet>

    if(event.status == osEventMessage)
 8021498:	6a3b      	ldr	r3, [r7, #32]
 802149a:	2b10      	cmp	r3, #16
 802149c:	d109      	bne.n	80214b2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 802149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214a0:	461a      	mov	r2, r3
 80214a2:	69bb      	ldr	r3, [r7, #24]
 80214a4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80214a6:	f7e8 f98d 	bl	80097c4 <osKernelSysTick>
 80214aa:	4602      	mov	r2, r0
 80214ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214ae:	1ad3      	subs	r3, r2, r3
 80214b0:	e019      	b.n	80214e6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80214b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80214b6:	e016      	b.n	80214e6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80214b8:	69fb      	ldr	r3, [r7, #28]
 80214ba:	6819      	ldr	r1, [r3, #0]
 80214bc:	463b      	mov	r3, r7
 80214be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80214c2:	4618      	mov	r0, r3
 80214c4:	f7e8 fbbc 	bl	8009c40 <osMessageGet>
 80214c8:	f107 0320 	add.w	r3, r7, #32
 80214cc:	463a      	mov	r2, r7
 80214ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80214d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80214d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80214d6:	461a      	mov	r2, r3
 80214d8:	69bb      	ldr	r3, [r7, #24]
 80214da:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80214dc:	f7e8 f972 	bl	80097c4 <osKernelSysTick>
 80214e0:	4602      	mov	r2, r0
 80214e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214e4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80214e6:	4618      	mov	r0, r3
 80214e8:	3730      	adds	r7, #48	; 0x30
 80214ea:	46bd      	mov	sp, r7
 80214ec:	bd80      	pop	{r7, pc}

080214ee <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80214ee:	b580      	push	{r7, lr}
 80214f0:	b086      	sub	sp, #24
 80214f2:	af00      	add	r7, sp, #0
 80214f4:	6078      	str	r0, [r7, #4]
 80214f6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80214f8:	687b      	ldr	r3, [r7, #4]
 80214fa:	6819      	ldr	r1, [r3, #0]
 80214fc:	f107 030c 	add.w	r3, r7, #12
 8021500:	2200      	movs	r2, #0
 8021502:	4618      	mov	r0, r3
 8021504:	f7e8 fb9c 	bl	8009c40 <osMessageGet>

  if(event.status == osEventMessage)
 8021508:	68fb      	ldr	r3, [r7, #12]
 802150a:	2b10      	cmp	r3, #16
 802150c:	d105      	bne.n	802151a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 802150e:	693b      	ldr	r3, [r7, #16]
 8021510:	461a      	mov	r2, r3
 8021512:	683b      	ldr	r3, [r7, #0]
 8021514:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8021516:	2300      	movs	r3, #0
 8021518:	e001      	b.n	802151e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 802151a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 802151e:	4618      	mov	r0, r3
 8021520:	3718      	adds	r7, #24
 8021522:	46bd      	mov	sp, r7
 8021524:	bd80      	pop	{r7, pc}

08021526 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8021526:	b480      	push	{r7}
 8021528:	b083      	sub	sp, #12
 802152a:	af00      	add	r7, sp, #0
 802152c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	2b00      	cmp	r3, #0
 8021534:	d101      	bne.n	802153a <sys_mbox_valid+0x14>
    return 0;
 8021536:	2300      	movs	r3, #0
 8021538:	e000      	b.n	802153c <sys_mbox_valid+0x16>
  else
    return 1;
 802153a:	2301      	movs	r3, #1
}
 802153c:	4618      	mov	r0, r3
 802153e:	370c      	adds	r7, #12
 8021540:	46bd      	mov	sp, r7
 8021542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021546:	4770      	bx	lr

08021548 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8021548:	b480      	push	{r7}
 802154a:	b083      	sub	sp, #12
 802154c:	af00      	add	r7, sp, #0
 802154e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	2200      	movs	r2, #0
 8021554:	601a      	str	r2, [r3, #0]
}
 8021556:	bf00      	nop
 8021558:	370c      	adds	r7, #12
 802155a:	46bd      	mov	sp, r7
 802155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021560:	4770      	bx	lr

08021562 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8021562:	b580      	push	{r7, lr}
 8021564:	b084      	sub	sp, #16
 8021566:	af00      	add	r7, sp, #0
 8021568:	6078      	str	r0, [r7, #4]
 802156a:	460b      	mov	r3, r1
 802156c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 802156e:	2300      	movs	r3, #0
 8021570:	60bb      	str	r3, [r7, #8]
 8021572:	2300      	movs	r3, #0
 8021574:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8021576:	f107 0308 	add.w	r3, r7, #8
 802157a:	2101      	movs	r1, #1
 802157c:	4618      	mov	r0, r3
 802157e:	f7e8 fa2d 	bl	80099dc <osSemaphoreCreate>
 8021582:	4602      	mov	r2, r0
 8021584:	687b      	ldr	r3, [r7, #4]
 8021586:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8021588:	687b      	ldr	r3, [r7, #4]
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	2b00      	cmp	r3, #0
 802158e:	d102      	bne.n	8021596 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8021590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021594:	e009      	b.n	80215aa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8021596:	78fb      	ldrb	r3, [r7, #3]
 8021598:	2b00      	cmp	r3, #0
 802159a:	d105      	bne.n	80215a8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	681b      	ldr	r3, [r3, #0]
 80215a0:	2100      	movs	r1, #0
 80215a2:	4618      	mov	r0, r3
 80215a4:	f7e8 fa4c 	bl	8009a40 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80215a8:	2300      	movs	r3, #0
}
 80215aa:	4618      	mov	r0, r3
 80215ac:	3710      	adds	r7, #16
 80215ae:	46bd      	mov	sp, r7
 80215b0:	bd80      	pop	{r7, pc}

080215b2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80215b2:	b580      	push	{r7, lr}
 80215b4:	b084      	sub	sp, #16
 80215b6:	af00      	add	r7, sp, #0
 80215b8:	6078      	str	r0, [r7, #4]
 80215ba:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80215bc:	f7e8 f902 	bl	80097c4 <osKernelSysTick>
 80215c0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d011      	beq.n	80215ec <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	6839      	ldr	r1, [r7, #0]
 80215ce:	4618      	mov	r0, r3
 80215d0:	f7e8 fa36 	bl	8009a40 <osSemaphoreWait>
 80215d4:	4603      	mov	r3, r0
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d105      	bne.n	80215e6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80215da:	f7e8 f8f3 	bl	80097c4 <osKernelSysTick>
 80215de:	4602      	mov	r2, r0
 80215e0:	68fb      	ldr	r3, [r7, #12]
 80215e2:	1ad3      	subs	r3, r2, r3
 80215e4:	e012      	b.n	802160c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80215e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80215ea:	e00f      	b.n	802160c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80215ec:	bf00      	nop
 80215ee:	687b      	ldr	r3, [r7, #4]
 80215f0:	681b      	ldr	r3, [r3, #0]
 80215f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80215f6:	4618      	mov	r0, r3
 80215f8:	f7e8 fa22 	bl	8009a40 <osSemaphoreWait>
 80215fc:	4603      	mov	r3, r0
 80215fe:	2b00      	cmp	r3, #0
 8021600:	d1f5      	bne.n	80215ee <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8021602:	f7e8 f8df 	bl	80097c4 <osKernelSysTick>
 8021606:	4602      	mov	r2, r0
 8021608:	68fb      	ldr	r3, [r7, #12]
 802160a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802160c:	4618      	mov	r0, r3
 802160e:	3710      	adds	r7, #16
 8021610:	46bd      	mov	sp, r7
 8021612:	bd80      	pop	{r7, pc}

08021614 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8021614:	b580      	push	{r7, lr}
 8021616:	b082      	sub	sp, #8
 8021618:	af00      	add	r7, sp, #0
 802161a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	681b      	ldr	r3, [r3, #0]
 8021620:	4618      	mov	r0, r3
 8021622:	f7e8 fa5b 	bl	8009adc <osSemaphoreRelease>
}
 8021626:	bf00      	nop
 8021628:	3708      	adds	r7, #8
 802162a:	46bd      	mov	sp, r7
 802162c:	bd80      	pop	{r7, pc}

0802162e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 802162e:	b580      	push	{r7, lr}
 8021630:	b082      	sub	sp, #8
 8021632:	af00      	add	r7, sp, #0
 8021634:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	681b      	ldr	r3, [r3, #0]
 802163a:	4618      	mov	r0, r3
 802163c:	f7e8 fa84 	bl	8009b48 <osSemaphoreDelete>
}
 8021640:	bf00      	nop
 8021642:	3708      	adds	r7, #8
 8021644:	46bd      	mov	sp, r7
 8021646:	bd80      	pop	{r7, pc}

08021648 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8021648:	b480      	push	{r7}
 802164a:	b083      	sub	sp, #12
 802164c:	af00      	add	r7, sp, #0
 802164e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	681b      	ldr	r3, [r3, #0]
 8021654:	2b00      	cmp	r3, #0
 8021656:	d101      	bne.n	802165c <sys_sem_valid+0x14>
    return 0;
 8021658:	2300      	movs	r3, #0
 802165a:	e000      	b.n	802165e <sys_sem_valid+0x16>
  else
    return 1;
 802165c:	2301      	movs	r3, #1
}
 802165e:	4618      	mov	r0, r3
 8021660:	370c      	adds	r7, #12
 8021662:	46bd      	mov	sp, r7
 8021664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021668:	4770      	bx	lr

0802166a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 802166a:	b480      	push	{r7}
 802166c:	b083      	sub	sp, #12
 802166e:	af00      	add	r7, sp, #0
 8021670:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8021672:	687b      	ldr	r3, [r7, #4]
 8021674:	2200      	movs	r2, #0
 8021676:	601a      	str	r2, [r3, #0]
}
 8021678:	bf00      	nop
 802167a:	370c      	adds	r7, #12
 802167c:	46bd      	mov	sp, r7
 802167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021682:	4770      	bx	lr

08021684 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8021684:	b580      	push	{r7, lr}
 8021686:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8021688:	4803      	ldr	r0, [pc, #12]	; (8021698 <sys_init+0x14>)
 802168a:	f7e8 f90b 	bl	80098a4 <osMutexCreate>
 802168e:	4603      	mov	r3, r0
 8021690:	4a02      	ldr	r2, [pc, #8]	; (802169c <sys_init+0x18>)
 8021692:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8021694:	bf00      	nop
 8021696:	bd80      	pop	{r7, pc}
 8021698:	0802c1f8 	.word	0x0802c1f8
 802169c:	20016124 	.word	0x20016124

080216a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80216a0:	b580      	push	{r7, lr}
 80216a2:	b084      	sub	sp, #16
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80216a8:	2300      	movs	r3, #0
 80216aa:	60bb      	str	r3, [r7, #8]
 80216ac:	2300      	movs	r3, #0
 80216ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80216b0:	f107 0308 	add.w	r3, r7, #8
 80216b4:	4618      	mov	r0, r3
 80216b6:	f7e8 f8f5 	bl	80098a4 <osMutexCreate>
 80216ba:	4602      	mov	r2, r0
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d102      	bne.n	80216ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80216c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80216cc:	e000      	b.n	80216d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80216ce:	2300      	movs	r3, #0
}
 80216d0:	4618      	mov	r0, r3
 80216d2:	3710      	adds	r7, #16
 80216d4:	46bd      	mov	sp, r7
 80216d6:	bd80      	pop	{r7, pc}

080216d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80216d8:	b580      	push	{r7, lr}
 80216da:	b082      	sub	sp, #8
 80216dc:	af00      	add	r7, sp, #0
 80216de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80216e8:	4618      	mov	r0, r3
 80216ea:	f7e8 f8f3 	bl	80098d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80216ee:	bf00      	nop
 80216f0:	3708      	adds	r7, #8
 80216f2:	46bd      	mov	sp, r7
 80216f4:	bd80      	pop	{r7, pc}

080216f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80216f6:	b580      	push	{r7, lr}
 80216f8:	b082      	sub	sp, #8
 80216fa:	af00      	add	r7, sp, #0
 80216fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	681b      	ldr	r3, [r3, #0]
 8021702:	4618      	mov	r0, r3
 8021704:	f7e8 f934 	bl	8009970 <osMutexRelease>
}
 8021708:	bf00      	nop
 802170a:	3708      	adds	r7, #8
 802170c:	46bd      	mov	sp, r7
 802170e:	bd80      	pop	{r7, pc}

08021710 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8021710:	b580      	push	{r7, lr}
 8021712:	b08c      	sub	sp, #48	; 0x30
 8021714:	af00      	add	r7, sp, #0
 8021716:	60f8      	str	r0, [r7, #12]
 8021718:	60b9      	str	r1, [r7, #8]
 802171a:	607a      	str	r2, [r7, #4]
 802171c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 802171e:	f107 0314 	add.w	r3, r7, #20
 8021722:	2200      	movs	r2, #0
 8021724:	601a      	str	r2, [r3, #0]
 8021726:	605a      	str	r2, [r3, #4]
 8021728:	609a      	str	r2, [r3, #8]
 802172a:	60da      	str	r2, [r3, #12]
 802172c:	611a      	str	r2, [r3, #16]
 802172e:	615a      	str	r2, [r3, #20]
 8021730:	619a      	str	r2, [r3, #24]
 8021732:	68fb      	ldr	r3, [r7, #12]
 8021734:	617b      	str	r3, [r7, #20]
 8021736:	68bb      	ldr	r3, [r7, #8]
 8021738:	61bb      	str	r3, [r7, #24]
 802173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802173c:	b21b      	sxth	r3, r3
 802173e:	83bb      	strh	r3, [r7, #28]
 8021740:	683b      	ldr	r3, [r7, #0]
 8021742:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8021744:	f107 0314 	add.w	r3, r7, #20
 8021748:	6879      	ldr	r1, [r7, #4]
 802174a:	4618      	mov	r0, r3
 802174c:	f7e8 f84a 	bl	80097e4 <osThreadCreate>
 8021750:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8021752:	4618      	mov	r0, r3
 8021754:	3730      	adds	r7, #48	; 0x30
 8021756:	46bd      	mov	sp, r7
 8021758:	bd80      	pop	{r7, pc}
	...

0802175c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 802175c:	b580      	push	{r7, lr}
 802175e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8021760:	4b04      	ldr	r3, [pc, #16]	; (8021774 <sys_arch_protect+0x18>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8021768:	4618      	mov	r0, r3
 802176a:	f7e8 f8b3 	bl	80098d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 802176e:	2301      	movs	r3, #1
}
 8021770:	4618      	mov	r0, r3
 8021772:	bd80      	pop	{r7, pc}
 8021774:	20016124 	.word	0x20016124

08021778 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8021778:	b580      	push	{r7, lr}
 802177a:	b082      	sub	sp, #8
 802177c:	af00      	add	r7, sp, #0
 802177e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8021780:	4b04      	ldr	r3, [pc, #16]	; (8021794 <sys_arch_unprotect+0x1c>)
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	4618      	mov	r0, r3
 8021786:	f7e8 f8f3 	bl	8009970 <osMutexRelease>
}
 802178a:	bf00      	nop
 802178c:	3708      	adds	r7, #8
 802178e:	46bd      	mov	sp, r7
 8021790:	bd80      	pop	{r7, pc}
 8021792:	bf00      	nop
 8021794:	20016124 	.word	0x20016124

08021798 <CalculaCRCByte>:

#include "modbus.h"



uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 8021798:	b480      	push	{r7}
 802179a:	b085      	sub	sp, #20
 802179c:	af00      	add	r7, sp, #0
 802179e:	4603      	mov	r3, r0
 80217a0:	460a      	mov	r2, r1
 80217a2:	80fb      	strh	r3, [r7, #6]
 80217a4:	4613      	mov	r3, r2
 80217a6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 80217a8:	797b      	ldrb	r3, [r7, #5]
 80217aa:	b29a      	uxth	r2, r3
 80217ac:	88fb      	ldrh	r3, [r7, #6]
 80217ae:	4053      	eors	r3, r2
 80217b0:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 80217b2:	2300      	movs	r3, #0
 80217b4:	73fb      	strb	r3, [r7, #15]
 80217b6:	e011      	b.n	80217dc <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 80217b8:	88fb      	ldrh	r3, [r7, #6]
 80217ba:	f003 0301 	and.w	r3, r3, #1
 80217be:	2b00      	cmp	r3, #0
 80217c0:	d006      	beq.n	80217d0 <CalculaCRCByte+0x38>
 80217c2:	88fb      	ldrh	r3, [r7, #6]
 80217c4:	085b      	lsrs	r3, r3, #1
 80217c6:	b29a      	uxth	r2, r3
 80217c8:	4b09      	ldr	r3, [pc, #36]	; (80217f0 <CalculaCRCByte+0x58>)
 80217ca:	4053      	eors	r3, r2
 80217cc:	80fb      	strh	r3, [r7, #6]
 80217ce:	e002      	b.n	80217d6 <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 80217d0:	88fb      	ldrh	r3, [r7, #6]
 80217d2:	085b      	lsrs	r3, r3, #1
 80217d4:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 80217d6:	7bfb      	ldrb	r3, [r7, #15]
 80217d8:	3301      	adds	r3, #1
 80217da:	73fb      	strb	r3, [r7, #15]
 80217dc:	7bfb      	ldrb	r3, [r7, #15]
 80217de:	2b07      	cmp	r3, #7
 80217e0:	d9ea      	bls.n	80217b8 <CalculaCRCByte+0x20>
  }
  return crc;
 80217e2:	88fb      	ldrh	r3, [r7, #6]
}
 80217e4:	4618      	mov	r0, r3
 80217e6:	3714      	adds	r7, #20
 80217e8:	46bd      	mov	sp, r7
 80217ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217ee:	4770      	bx	lr
 80217f0:	ffffa001 	.word	0xffffa001

080217f4 <CalculaCRCStream>:


uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 80217f4:	b580      	push	{r7, lr}
 80217f6:	b084      	sub	sp, #16
 80217f8:	af00      	add	r7, sp, #0
 80217fa:	6078      	str	r0, [r7, #4]
 80217fc:	460b      	mov	r3, r1
 80217fe:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 8021800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021804:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 8021806:	2300      	movs	r3, #0
 8021808:	81fb      	strh	r3, [r7, #14]
 802180a:	e00e      	b.n	802182a <CalculaCRCStream+0x36>
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	781a      	ldrb	r2, [r3, #0]
 8021810:	89bb      	ldrh	r3, [r7, #12]
 8021812:	4611      	mov	r1, r2
 8021814:	4618      	mov	r0, r3
 8021816:	f7ff ffbf 	bl	8021798 <CalculaCRCByte>
 802181a:	4603      	mov	r3, r0
 802181c:	81bb      	strh	r3, [r7, #12]
 802181e:	89fb      	ldrh	r3, [r7, #14]
 8021820:	3301      	adds	r3, #1
 8021822:	81fb      	strh	r3, [r7, #14]
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	3301      	adds	r3, #1
 8021828:	607b      	str	r3, [r7, #4]
 802182a:	89fa      	ldrh	r2, [r7, #14]
 802182c:	887b      	ldrh	r3, [r7, #2]
 802182e:	429a      	cmp	r2, r3
 8021830:	d3ec      	bcc.n	802180c <CalculaCRCStream+0x18>
  return crc;
 8021832:	89bb      	ldrh	r3, [r7, #12]
}
 8021834:	4618      	mov	r0, r3
 8021836:	3710      	adds	r7, #16
 8021838:	46bd      	mov	sp, r7
 802183a:	bd80      	pop	{r7, pc}

0802183c <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 802183c:	b580      	push	{r7, lr}
 802183e:	b084      	sub	sp, #16
 8021840:	af00      	add	r7, sp, #0
 8021842:	6078      	str	r0, [r7, #4]
 8021844:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 8021846:	687b      	ldr	r3, [r7, #4]
 8021848:	3305      	adds	r3, #5
 802184a:	781b      	ldrb	r3, [r3, #0]
 802184c:	005b      	lsls	r3, r3, #1
 802184e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8021850:	687b      	ldr	r3, [r7, #4]
 8021852:	3302      	adds	r3, #2
 8021854:	7bba      	ldrb	r2, [r7, #14]
 8021856:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8021858:	2300      	movs	r3, #0
 802185a:	73fb      	strb	r3, [r7, #15]
 802185c:	e015      	b.n	802188a <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 802185e:	7bfb      	ldrb	r3, [r7, #15]
 8021860:	3301      	adds	r3, #1
 8021862:	683a      	ldr	r2, [r7, #0]
 8021864:	441a      	add	r2, r3
 8021866:	7bfb      	ldrb	r3, [r7, #15]
 8021868:	3303      	adds	r3, #3
 802186a:	6879      	ldr	r1, [r7, #4]
 802186c:	440b      	add	r3, r1
 802186e:	7812      	ldrb	r2, [r2, #0]
 8021870:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8021872:	7bfb      	ldrb	r3, [r7, #15]
 8021874:	683a      	ldr	r2, [r7, #0]
 8021876:	441a      	add	r2, r3
 8021878:	7bfb      	ldrb	r3, [r7, #15]
 802187a:	3304      	adds	r3, #4
 802187c:	6879      	ldr	r1, [r7, #4]
 802187e:	440b      	add	r3, r1
 8021880:	7812      	ldrb	r2, [r2, #0]
 8021882:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8021884:	7bfb      	ldrb	r3, [r7, #15]
 8021886:	3302      	adds	r3, #2
 8021888:	73fb      	strb	r3, [r7, #15]
 802188a:	7bfa      	ldrb	r2, [r7, #15]
 802188c:	7bbb      	ldrb	r3, [r7, #14]
 802188e:	429a      	cmp	r2, r3
 8021890:	d3e5      	bcc.n	802185e <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 8021892:	7bbb      	ldrb	r3, [r7, #14]
 8021894:	b29b      	uxth	r3, r3
 8021896:	3303      	adds	r3, #3
 8021898:	b29b      	uxth	r3, r3
 802189a:	4619      	mov	r1, r3
 802189c:	6878      	ldr	r0, [r7, #4]
 802189e:	f7ff ffa9 	bl	80217f4 <CalculaCRCStream>
 80218a2:	4603      	mov	r3, r0
 80218a4:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 80218a6:	7bbb      	ldrb	r3, [r7, #14]
 80218a8:	3303      	adds	r3, #3
 80218aa:	687a      	ldr	r2, [r7, #4]
 80218ac:	4413      	add	r3, r2
 80218ae:	89ba      	ldrh	r2, [r7, #12]
 80218b0:	b2d2      	uxtb	r2, r2
 80218b2:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 80218b4:	89bb      	ldrh	r3, [r7, #12]
 80218b6:	0a1b      	lsrs	r3, r3, #8
 80218b8:	b299      	uxth	r1, r3
 80218ba:	7bbb      	ldrb	r3, [r7, #14]
 80218bc:	3304      	adds	r3, #4
 80218be:	687a      	ldr	r2, [r7, #4]
 80218c0:	4413      	add	r3, r2
 80218c2:	b2ca      	uxtb	r2, r1
 80218c4:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 80218c6:	7bbb      	ldrb	r3, [r7, #14]
 80218c8:	3305      	adds	r3, #5
 80218ca:	b2db      	uxtb	r3, r3
}
 80218cc:	4618      	mov	r0, r3
 80218ce:	3710      	adds	r7, #16
 80218d0:	46bd      	mov	sp, r7
 80218d2:	bd80      	pop	{r7, pc}

080218d4 <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 80218d4:	b580      	push	{r7, lr}
 80218d6:	b084      	sub	sp, #16
 80218d8:	af00      	add	r7, sp, #0
 80218da:	6078      	str	r0, [r7, #4]
 80218dc:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	3305      	adds	r3, #5
 80218e2:	781b      	ldrb	r3, [r3, #0]
 80218e4:	005b      	lsls	r3, r3, #1
 80218e6:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	3302      	adds	r3, #2
 80218ec:	7bba      	ldrb	r2, [r7, #14]
 80218ee:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 80218f0:	2300      	movs	r3, #0
 80218f2:	73fb      	strb	r3, [r7, #15]
 80218f4:	e015      	b.n	8021922 <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 80218f6:	7bfb      	ldrb	r3, [r7, #15]
 80218f8:	3301      	adds	r3, #1
 80218fa:	683a      	ldr	r2, [r7, #0]
 80218fc:	441a      	add	r2, r3
 80218fe:	7bfb      	ldrb	r3, [r7, #15]
 8021900:	3303      	adds	r3, #3
 8021902:	6879      	ldr	r1, [r7, #4]
 8021904:	440b      	add	r3, r1
 8021906:	7812      	ldrb	r2, [r2, #0]
 8021908:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 802190a:	7bfb      	ldrb	r3, [r7, #15]
 802190c:	683a      	ldr	r2, [r7, #0]
 802190e:	441a      	add	r2, r3
 8021910:	7bfb      	ldrb	r3, [r7, #15]
 8021912:	3304      	adds	r3, #4
 8021914:	6879      	ldr	r1, [r7, #4]
 8021916:	440b      	add	r3, r1
 8021918:	7812      	ldrb	r2, [r2, #0]
 802191a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 802191c:	7bfb      	ldrb	r3, [r7, #15]
 802191e:	3302      	adds	r3, #2
 8021920:	73fb      	strb	r3, [r7, #15]
 8021922:	7bfa      	ldrb	r2, [r7, #15]
 8021924:	7bbb      	ldrb	r3, [r7, #14]
 8021926:	429a      	cmp	r2, r3
 8021928:	d3e5      	bcc.n	80218f6 <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 802192a:	7bbb      	ldrb	r3, [r7, #14]
 802192c:	b29b      	uxth	r3, r3
 802192e:	3303      	adds	r3, #3
 8021930:	b29b      	uxth	r3, r3
 8021932:	4619      	mov	r1, r3
 8021934:	6878      	ldr	r0, [r7, #4]
 8021936:	f7ff ff5d 	bl	80217f4 <CalculaCRCStream>
 802193a:	4603      	mov	r3, r0
 802193c:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 802193e:	7bbb      	ldrb	r3, [r7, #14]
 8021940:	3303      	adds	r3, #3
 8021942:	687a      	ldr	r2, [r7, #4]
 8021944:	4413      	add	r3, r2
 8021946:	89ba      	ldrh	r2, [r7, #12]
 8021948:	b2d2      	uxtb	r2, r2
 802194a:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 802194c:	89bb      	ldrh	r3, [r7, #12]
 802194e:	0a1b      	lsrs	r3, r3, #8
 8021950:	b299      	uxth	r1, r3
 8021952:	7bbb      	ldrb	r3, [r7, #14]
 8021954:	3304      	adds	r3, #4
 8021956:	687a      	ldr	r2, [r7, #4]
 8021958:	4413      	add	r3, r2
 802195a:	b2ca      	uxtb	r2, r1
 802195c:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 802195e:	7bbb      	ldrb	r3, [r7, #14]
 8021960:	3305      	adds	r3, #5
 8021962:	b2db      	uxtb	r3, r3
}
 8021964:	4618      	mov	r0, r3
 8021966:	3710      	adds	r7, #16
 8021968:	46bd      	mov	sp, r7
 802196a:	bd80      	pop	{r7, pc}

0802196c <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 802196c:	b580      	push	{r7, lr}
 802196e:	b084      	sub	sp, #16
 8021970:	af00      	add	r7, sp, #0
 8021972:	6078      	str	r0, [r7, #4]
 8021974:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	3305      	adds	r3, #5
 802197a:	781b      	ldrb	r3, [r3, #0]
 802197c:	005b      	lsls	r3, r3, #1
 802197e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8021980:	687b      	ldr	r3, [r7, #4]
 8021982:	3302      	adds	r3, #2
 8021984:	7bba      	ldrb	r2, [r7, #14]
 8021986:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8021988:	2300      	movs	r3, #0
 802198a:	73fb      	strb	r3, [r7, #15]
 802198c:	e015      	b.n	80219ba <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 802198e:	7bfb      	ldrb	r3, [r7, #15]
 8021990:	3301      	adds	r3, #1
 8021992:	683a      	ldr	r2, [r7, #0]
 8021994:	441a      	add	r2, r3
 8021996:	7bfb      	ldrb	r3, [r7, #15]
 8021998:	3303      	adds	r3, #3
 802199a:	6879      	ldr	r1, [r7, #4]
 802199c:	440b      	add	r3, r1
 802199e:	7812      	ldrb	r2, [r2, #0]
 80219a0:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 80219a2:	7bfb      	ldrb	r3, [r7, #15]
 80219a4:	683a      	ldr	r2, [r7, #0]
 80219a6:	441a      	add	r2, r3
 80219a8:	7bfb      	ldrb	r3, [r7, #15]
 80219aa:	3304      	adds	r3, #4
 80219ac:	6879      	ldr	r1, [r7, #4]
 80219ae:	440b      	add	r3, r1
 80219b0:	7812      	ldrb	r2, [r2, #0]
 80219b2:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 80219b4:	7bfb      	ldrb	r3, [r7, #15]
 80219b6:	3302      	adds	r3, #2
 80219b8:	73fb      	strb	r3, [r7, #15]
 80219ba:	7bfa      	ldrb	r2, [r7, #15]
 80219bc:	7bbb      	ldrb	r3, [r7, #14]
 80219be:	429a      	cmp	r2, r3
 80219c0:	d3e5      	bcc.n	802198e <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 80219c2:	7bbb      	ldrb	r3, [r7, #14]
 80219c4:	b29b      	uxth	r3, r3
 80219c6:	3303      	adds	r3, #3
 80219c8:	b29b      	uxth	r3, r3
 80219ca:	4619      	mov	r1, r3
 80219cc:	6878      	ldr	r0, [r7, #4]
 80219ce:	f7ff ff11 	bl	80217f4 <CalculaCRCStream>
 80219d2:	4603      	mov	r3, r0
 80219d4:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 80219d6:	7bbb      	ldrb	r3, [r7, #14]
 80219d8:	3303      	adds	r3, #3
 80219da:	687a      	ldr	r2, [r7, #4]
 80219dc:	4413      	add	r3, r2
 80219de:	89ba      	ldrh	r2, [r7, #12]
 80219e0:	b2d2      	uxtb	r2, r2
 80219e2:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 80219e4:	89bb      	ldrh	r3, [r7, #12]
 80219e6:	0a1b      	lsrs	r3, r3, #8
 80219e8:	b299      	uxth	r1, r3
 80219ea:	7bbb      	ldrb	r3, [r7, #14]
 80219ec:	3304      	adds	r3, #4
 80219ee:	687a      	ldr	r2, [r7, #4]
 80219f0:	4413      	add	r3, r2
 80219f2:	b2ca      	uxtb	r2, r1
 80219f4:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 80219f6:	7bbb      	ldrb	r3, [r7, #14]
 80219f8:	3305      	adds	r3, #5
 80219fa:	b2db      	uxtb	r3, r3
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	3710      	adds	r7, #16
 8021a00:	46bd      	mov	sp, r7
 8021a02:	bd80      	pop	{r7, pc}

08021a04 <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8021a04:	b480      	push	{r7}
 8021a06:	b083      	sub	sp, #12
 8021a08:	af00      	add	r7, sp, #0
 8021a0a:	6078      	str	r0, [r7, #4]
 8021a0c:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 8021a0e:	687b      	ldr	r3, [r7, #4]
 8021a10:	795a      	ldrb	r2, [r3, #5]
 8021a12:	683b      	ldr	r3, [r7, #0]
 8021a14:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 8021a16:	683b      	ldr	r3, [r7, #0]
 8021a18:	3301      	adds	r3, #1
 8021a1a:	687a      	ldr	r2, [r7, #4]
 8021a1c:	7912      	ldrb	r2, [r2, #4]
 8021a1e:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 8021a20:	2308      	movs	r3, #8
}
 8021a22:	4618      	mov	r0, r3
 8021a24:	370c      	adds	r7, #12
 8021a26:	46bd      	mov	sp, r7
 8021a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a2c:	4770      	bx	lr

08021a2e <PresetMultipleRegisters>:

uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 8021a2e:	b580      	push	{r7, lr}
 8021a30:	b084      	sub	sp, #16
 8021a32:	af00      	add	r7, sp, #0
 8021a34:	6078      	str	r0, [r7, #4]
 8021a36:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 8021a38:	687b      	ldr	r3, [r7, #4]
 8021a3a:	799b      	ldrb	r3, [r3, #6]
 8021a3c:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 8021a3e:	2300      	movs	r3, #0
 8021a40:	73fb      	strb	r3, [r7, #15]
 8021a42:	e016      	b.n	8021a72 <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 8021a44:	7bfb      	ldrb	r3, [r7, #15]
 8021a46:	3308      	adds	r3, #8
 8021a48:	687a      	ldr	r2, [r7, #4]
 8021a4a:	441a      	add	r2, r3
 8021a4c:	7bfb      	ldrb	r3, [r7, #15]
 8021a4e:	6839      	ldr	r1, [r7, #0]
 8021a50:	440b      	add	r3, r1
 8021a52:	7812      	ldrb	r2, [r2, #0]
 8021a54:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 8021a56:	7bfb      	ldrb	r3, [r7, #15]
 8021a58:	3307      	adds	r3, #7
 8021a5a:	461a      	mov	r2, r3
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	441a      	add	r2, r3
 8021a60:	7bfb      	ldrb	r3, [r7, #15]
 8021a62:	3301      	adds	r3, #1
 8021a64:	6839      	ldr	r1, [r7, #0]
 8021a66:	440b      	add	r3, r1
 8021a68:	7812      	ldrb	r2, [r2, #0]
 8021a6a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8021a6c:	7bfb      	ldrb	r3, [r7, #15]
 8021a6e:	3302      	adds	r3, #2
 8021a70:	73fb      	strb	r3, [r7, #15]
 8021a72:	7bfa      	ldrb	r2, [r7, #15]
 8021a74:	7bbb      	ldrb	r3, [r7, #14]
 8021a76:	429a      	cmp	r2, r3
 8021a78:	d3e4      	bcc.n	8021a44 <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 8021a7a:	2106      	movs	r1, #6
 8021a7c:	6878      	ldr	r0, [r7, #4]
 8021a7e:	f7ff feb9 	bl	80217f4 <CalculaCRCStream>
 8021a82:	4603      	mov	r3, r0
 8021a84:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 8021a86:	687b      	ldr	r3, [r7, #4]
 8021a88:	3306      	adds	r3, #6
 8021a8a:	89ba      	ldrh	r2, [r7, #12]
 8021a8c:	b2d2      	uxtb	r2, r2
 8021a8e:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 8021a90:	89bb      	ldrh	r3, [r7, #12]
 8021a92:	0a1b      	lsrs	r3, r3, #8
 8021a94:	b29a      	uxth	r2, r3
 8021a96:	687b      	ldr	r3, [r7, #4]
 8021a98:	3307      	adds	r3, #7
 8021a9a:	b2d2      	uxtb	r2, r2
 8021a9c:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 8021a9e:	2308      	movs	r3, #8
}
 8021aa0:	4618      	mov	r0, r3
 8021aa2:	3710      	adds	r7, #16
 8021aa4:	46bd      	mov	sp, r7
 8021aa6:	bd80      	pop	{r7, pc}

08021aa8 <InterpreterMODBUS>:


TModbusMap *ModbusMap;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 8021aa8:	b580      	push	{r7, lr}
 8021aaa:	b086      	sub	sp, #24
 8021aac:	af00      	add	r7, sp, #0
 8021aae:	6078      	str	r0, [r7, #4]
 8021ab0:	460b      	mov	r3, r1
 8021ab2:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 8021ab4:	2300      	movs	r3, #0
 8021ab6:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 8021ab8:	2300      	movs	r3, #0
 8021aba:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 8021abc:	687b      	ldr	r3, [r7, #4]
 8021abe:	3302      	adds	r3, #2
 8021ac0:	781b      	ldrb	r3, [r3, #0]
 8021ac2:	021b      	lsls	r3, r3, #8
 8021ac4:	b21a      	sxth	r2, r3
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	3303      	adds	r3, #3
 8021aca:	781b      	ldrb	r3, [r3, #0]
 8021acc:	b21b      	sxth	r3, r3
 8021ace:	4313      	orrs	r3, r2
 8021ad0:	b21b      	sxth	r3, r3
 8021ad2:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 8021ad4:	887b      	ldrh	r3, [r7, #2]
 8021ad6:	3b02      	subs	r3, #2
 8021ad8:	b29b      	uxth	r3, r3
 8021ada:	4619      	mov	r1, r3
 8021adc:	6878      	ldr	r0, [r7, #4]
 8021ade:	f7ff fe89 	bl	80217f4 <CalculaCRCStream>
 8021ae2:	4603      	mov	r3, r0
 8021ae4:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 8021ae6:	887b      	ldrh	r3, [r7, #2]
 8021ae8:	3b01      	subs	r3, #1
 8021aea:	687a      	ldr	r2, [r7, #4]
 8021aec:	4413      	add	r3, r2
 8021aee:	781b      	ldrb	r3, [r3, #0]
 8021af0:	021b      	lsls	r3, r3, #8
 8021af2:	b21a      	sxth	r2, r3
 8021af4:	887b      	ldrh	r3, [r7, #2]
 8021af6:	3b02      	subs	r3, #2
 8021af8:	6879      	ldr	r1, [r7, #4]
 8021afa:	440b      	add	r3, r1
 8021afc:	781b      	ldrb	r3, [r3, #0]
 8021afe:	b21b      	sxth	r3, r3
 8021b00:	4313      	orrs	r3, r2
 8021b02:	b21b      	sxth	r3, r3
 8021b04:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 8021b06:	8aba      	ldrh	r2, [r7, #20]
 8021b08:	8a7b      	ldrh	r3, [r7, #18]
 8021b0a:	429a      	cmp	r2, r3
 8021b0c:	f040 80be 	bne.w	8021c8c <InterpreterMODBUS+0x1e4>
	{
		switch (msg[0])
 8021b10:	687b      	ldr	r3, [r7, #4]
 8021b12:	781b      	ldrb	r3, [r3, #0]
 8021b14:	2b01      	cmp	r3, #1
 8021b16:	f040 80bd 	bne.w	8021c94 <InterpreterMODBUS+0x1ec>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 8021b1a:	687b      	ldr	r3, [r7, #4]
 8021b1c:	3301      	adds	r3, #1
 8021b1e:	781b      	ldrb	r3, [r3, #0]
 8021b20:	3b01      	subs	r3, #1
 8021b22:	2b0f      	cmp	r3, #15
 8021b24:	f200 80b5 	bhi.w	8021c92 <InterpreterMODBUS+0x1ea>
 8021b28:	a201      	add	r2, pc, #4	; (adr r2, 8021b30 <InterpreterMODBUS+0x88>)
 8021b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021b2e:	bf00      	nop
 8021b30:	08021b71 	.word	0x08021b71
 8021b34:	08021c89 	.word	0x08021c89
 8021b38:	08021b89 	.word	0x08021b89
 8021b3c:	08021ba1 	.word	0x08021ba1
 8021b40:	08021c89 	.word	0x08021c89
 8021b44:	08021bb9 	.word	0x08021bb9
 8021b48:	08021c93 	.word	0x08021c93
 8021b4c:	08021c93 	.word	0x08021c93
 8021b50:	08021c93 	.word	0x08021c93
 8021b54:	08021c93 	.word	0x08021c93
 8021b58:	08021c93 	.word	0x08021c93
 8021b5c:	08021c93 	.word	0x08021c93
 8021b60:	08021c93 	.word	0x08021c93
 8021b64:	08021c93 	.word	0x08021c93
 8021b68:	08021c89 	.word	0x08021c89
 8021b6c:	08021c21 	.word	0x08021c21
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 8021b70:	8a3b      	ldrh	r3, [r7, #16]
 8021b72:	4618      	mov	r0, r3
 8021b74:	f000 f896 	bl	8021ca4 <GetAddrCoilRegister>
 8021b78:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 8021b7a:	68f9      	ldr	r1, [r7, #12]
 8021b7c:	6878      	ldr	r0, [r7, #4]
 8021b7e:	f7ff fe5d 	bl	802183c <ReadCoilRegister>
 8021b82:	4603      	mov	r3, r0
 8021b84:	82fb      	strh	r3, [r7, #22]

				break;
 8021b86:	e080      	b.n	8021c8a <InterpreterMODBUS+0x1e2>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8021b88:	8a3b      	ldrh	r3, [r7, #16]
 8021b8a:	4618      	mov	r0, r3
 8021b8c:	f000 f8d6 	bl	8021d3c <GetAddrHoldingRegister>
 8021b90:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 8021b92:	68f9      	ldr	r1, [r7, #12]
 8021b94:	6878      	ldr	r0, [r7, #4]
 8021b96:	f7ff fee9 	bl	802196c <ReadHoldingRegister>
 8021b9a:	4603      	mov	r3, r0
 8021b9c:	82fb      	strh	r3, [r7, #22]
				break;
 8021b9e:	e074      	b.n	8021c8a <InterpreterMODBUS+0x1e2>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 8021ba0:	8a3b      	ldrh	r3, [r7, #16]
 8021ba2:	4618      	mov	r0, r3
 8021ba4:	f000 f8a4 	bl	8021cf0 <GetAddrInputRegister>
 8021ba8:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 8021baa:	68f9      	ldr	r1, [r7, #12]
 8021bac:	6878      	ldr	r0, [r7, #4]
 8021bae:	f7ff fe91 	bl	80218d4 <ReadInputRegister>
 8021bb2:	4603      	mov	r3, r0
 8021bb4:	82fb      	strh	r3, [r7, #22]
				break;
 8021bb6:	e068      	b.n	8021c8a <InterpreterMODBUS+0x1e2>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8021bb8:	8a3b      	ldrh	r3, [r7, #16]
 8021bba:	4618      	mov	r0, r3
 8021bbc:	f000 f8be 	bl	8021d3c <GetAddrHoldingRegister>
 8021bc0:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8021bc2:	68f9      	ldr	r1, [r7, #12]
 8021bc4:	6878      	ldr	r0, [r7, #4]
 8021bc6:	f7ff ff1d 	bl	8021a04 <PresetSingleRegister>
 8021bca:	4603      	mov	r3, r0
 8021bcc:	82fb      	strh	r3, [r7, #22]


				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 8021bce:	8afb      	ldrh	r3, [r7, #22]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d01f      	beq.n	8021c14 <InterpreterMODBUS+0x16c>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8021bd4:	4b32      	ldr	r3, [pc, #200]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021bd6:	681b      	ldr	r3, [r3, #0]
 8021bd8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d015      	beq.n	8021c0c <InterpreterMODBUS+0x164>
 8021be0:	4b2f      	ldr	r3, [pc, #188]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8021be8:	4b2d      	ldr	r3, [pc, #180]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021bea:	681b      	ldr	r3, [r3, #0]
 8021bec:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8021bf0:	429a      	cmp	r2, r3
 8021bf2:	d00b      	beq.n	8021c0c <InterpreterMODBUS+0x164>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 8021bf4:	4b2a      	ldr	r3, [pc, #168]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021bf6:	681a      	ldr	r2, [r3, #0]
 8021bf8:	4b29      	ldr	r3, [pc, #164]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021bfa:	681b      	ldr	r3, [r3, #0]
 8021bfc:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8021c00:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 8021c04:	206f      	movs	r0, #111	; 0x6f
 8021c06:	f000 f873 	bl	8021cf0 <GetAddrInputRegister>
 8021c0a:	60f8      	str	r0, [r7, #12]

						//while(eeprom_write_int(END_TIPO_HARDW_EEPROM, MB.TIPO_HARDW));
					}

					CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 8021c0c:	2100      	movs	r1, #0
 8021c0e:	2000      	movs	r0, #0
 8021c10:	f7e0 fa06 	bl	8002020 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8021c14:	8a3b      	ldrh	r3, [r7, #16]
 8021c16:	4618      	mov	r0, r3
 8021c18:	f000 f890 	bl	8021d3c <GetAddrHoldingRegister>
 8021c1c:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 8021c1e:	e034      	b.n	8021c8a <InterpreterMODBUS+0x1e2>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 8021c20:	8a3b      	ldrh	r3, [r7, #16]
 8021c22:	4618      	mov	r0, r3
 8021c24:	f000 f88a 	bl	8021d3c <GetAddrHoldingRegister>
 8021c28:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8021c2a:	68f9      	ldr	r1, [r7, #12]
 8021c2c:	6878      	ldr	r0, [r7, #4]
 8021c2e:	f7ff fefe 	bl	8021a2e <PresetMultipleRegisters>
 8021c32:	4603      	mov	r3, r0
 8021c34:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 8021c36:	8afb      	ldrh	r3, [r7, #22]
 8021c38:	2b00      	cmp	r3, #0
 8021c3a:	d01f      	beq.n	8021c7c <InterpreterMODBUS+0x1d4>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8021c3c:	4b18      	ldr	r3, [pc, #96]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021c3e:	681b      	ldr	r3, [r3, #0]
 8021c40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d015      	beq.n	8021c74 <InterpreterMODBUS+0x1cc>
 8021c48:	4b15      	ldr	r3, [pc, #84]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021c4a:	681b      	ldr	r3, [r3, #0]
 8021c4c:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8021c50:	4b13      	ldr	r3, [pc, #76]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021c52:	681b      	ldr	r3, [r3, #0]
 8021c54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8021c58:	429a      	cmp	r2, r3
 8021c5a:	d00b      	beq.n	8021c74 <InterpreterMODBUS+0x1cc>
					{
						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 8021c5c:	4b10      	ldr	r3, [pc, #64]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021c5e:	681a      	ldr	r2, [r3, #0]
 8021c60:	4b0f      	ldr	r3, [pc, #60]	; (8021ca0 <InterpreterMODBUS+0x1f8>)
 8021c62:	681b      	ldr	r3, [r3, #0]
 8021c64:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8021c68:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 8021c6c:	206f      	movs	r0, #111	; 0x6f
 8021c6e:	f000 f83f 	bl	8021cf0 <GetAddrInputRegister>
 8021c72:	60f8      	str	r0, [r7, #12]
					}

				    CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 8021c74:	2100      	movs	r1, #0
 8021c76:	2000      	movs	r0, #0
 8021c78:	f7e0 f9d2 	bl	8002020 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8021c7c:	8a3b      	ldrh	r3, [r7, #16]
 8021c7e:	4618      	mov	r0, r3
 8021c80:	f000 f85c 	bl	8021d3c <GetAddrHoldingRegister>
 8021c84:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 8021c86:	e000      	b.n	8021c8a <InterpreterMODBUS+0x1e2>
				break;
 8021c88:	bf00      	nop
			}
			break;
 8021c8a:	e002      	b.n	8021c92 <InterpreterMODBUS+0x1ea>
		}
	}
	else
	{

		totalbytes = 0;
 8021c8c:	2300      	movs	r3, #0
 8021c8e:	82fb      	strh	r3, [r7, #22]
 8021c90:	e000      	b.n	8021c94 <InterpreterMODBUS+0x1ec>
			break;
 8021c92:	bf00      	nop
	}

	return totalbytes;
 8021c94:	8afb      	ldrh	r3, [r7, #22]
}
 8021c96:	4618      	mov	r0, r3
 8021c98:	3718      	adds	r7, #24
 8021c9a:	46bd      	mov	sp, r7
 8021c9c:	bd80      	pop	{r7, pc}
 8021c9e:	bf00      	nop
 8021ca0:	20016128 	.word	0x20016128

08021ca4 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 8021ca4:	b480      	push	{r7}
 8021ca6:	b085      	sub	sp, #20
 8021ca8:	af00      	add	r7, sp, #0
 8021caa:	4603      	mov	r3, r0
 8021cac:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 8021cae:	88fb      	ldrh	r3, [r7, #6]
 8021cb0:	2b02      	cmp	r3, #2
 8021cb2:	d00f      	beq.n	8021cd4 <GetAddrCoilRegister+0x30>
 8021cb4:	2b02      	cmp	r3, #2
 8021cb6:	dc12      	bgt.n	8021cde <GetAddrCoilRegister+0x3a>
 8021cb8:	2b00      	cmp	r3, #0
 8021cba:	d002      	beq.n	8021cc2 <GetAddrCoilRegister+0x1e>
 8021cbc:	2b01      	cmp	r3, #1
 8021cbe:	d004      	beq.n	8021cca <GetAddrCoilRegister+0x26>
 8021cc0:	e00d      	b.n	8021cde <GetAddrCoilRegister+0x3a>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_1];
 8021cc2:	4b0a      	ldr	r3, [pc, #40]	; (8021cec <GetAddrCoilRegister+0x48>)
 8021cc4:	681b      	ldr	r3, [r3, #0]
 8021cc6:	60fb      	str	r3, [r7, #12]
		break;
 8021cc8:	e009      	b.n	8021cde <GetAddrCoilRegister+0x3a>
	case ADD_IN_2:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_2];
 8021cca:	4b08      	ldr	r3, [pc, #32]	; (8021cec <GetAddrCoilRegister+0x48>)
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	3302      	adds	r3, #2
 8021cd0:	60fb      	str	r3, [r7, #12]
		break;
 8021cd2:	e004      	b.n	8021cde <GetAddrCoilRegister+0x3a>
	case ADD_OUT_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_OUT_1];
 8021cd4:	4b05      	ldr	r3, [pc, #20]	; (8021cec <GetAddrCoilRegister+0x48>)
 8021cd6:	681b      	ldr	r3, [r3, #0]
 8021cd8:	3304      	adds	r3, #4
 8021cda:	60fb      	str	r3, [r7, #12]
		break;
 8021cdc:	bf00      	nop
	}
	return ptr;
 8021cde:	68fb      	ldr	r3, [r7, #12]
}
 8021ce0:	4618      	mov	r0, r3
 8021ce2:	3714      	adds	r7, #20
 8021ce4:	46bd      	mov	sp, r7
 8021ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cea:	4770      	bx	lr
 8021cec:	20016128 	.word	0x20016128

08021cf0 <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 8021cf0:	b480      	push	{r7}
 8021cf2:	b085      	sub	sp, #20
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 8021cfa:	88fb      	ldrh	r3, [r7, #6]
 8021cfc:	2bff      	cmp	r3, #255	; 0xff
 8021cfe:	d809      	bhi.n	8021d14 <GetAddrInputRegister+0x24>

		ptr = (uint8_t*) &ModbusMap->INPUTREGISTERS[ADD_IMEI_1 + (address)];
 8021d00:	4b0d      	ldr	r3, [pc, #52]	; (8021d38 <GetAddrInputRegister+0x48>)
 8021d02:	681a      	ldr	r2, [r3, #0]
 8021d04:	88fb      	ldrh	r3, [r7, #6]
 8021d06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8021d0a:	005b      	lsls	r3, r3, #1
 8021d0c:	4413      	add	r3, r2
 8021d0e:	3306      	adds	r3, #6
 8021d10:	60fb      	str	r3, [r7, #12]
 8021d12:	e00a      	b.n	8021d2a <GetAddrInputRegister+0x3a>
	else
		ptr = (uint8_t*) &ModbusMap->ESPELHO[ADD_IMEI_1 + ((address - 256))];
 8021d14:	4b08      	ldr	r3, [pc, #32]	; (8021d38 <GetAddrInputRegister+0x48>)
 8021d16:	681a      	ldr	r2, [r3, #0]
 8021d18:	88fb      	ldrh	r3, [r7, #6]
 8021d1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8021d1e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8021d22:	005b      	lsls	r3, r3, #1
 8021d24:	4413      	add	r3, r2
 8021d26:	3304      	adds	r3, #4
 8021d28:	60fb      	str	r3, [r7, #12]
	return ptr;
 8021d2a:	68fb      	ldr	r3, [r7, #12]
}
 8021d2c:	4618      	mov	r0, r3
 8021d2e:	3714      	adds	r7, #20
 8021d30:	46bd      	mov	sp, r7
 8021d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d36:	4770      	bx	lr
 8021d38:	20016128 	.word	0x20016128

08021d3c <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 8021d3c:	b480      	push	{r7}
 8021d3e:	b085      	sub	sp, #20
 8021d40:	af00      	add	r7, sp, #0
 8021d42:	4603      	mov	r3, r0
 8021d44:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 8021d46:	88fb      	ldrh	r3, [r7, #6]
 8021d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8021d4c:	d207      	bcs.n	8021d5e <GetAddrHoldingRegister+0x22>

		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 8021d4e:	4b0b      	ldr	r3, [pc, #44]	; (8021d7c <GetAddrHoldingRegister+0x40>)
 8021d50:	681a      	ldr	r2, [r3, #0]
 8021d52:	88fb      	ldrh	r3, [r7, #6]
 8021d54:	005b      	lsls	r3, r3, #1
 8021d56:	4413      	add	r3, r2
 8021d58:	3306      	adds	r3, #6
 8021d5a:	60fb      	str	r3, [r7, #12]
 8021d5c:	e007      	b.n	8021d6e <GetAddrHoldingRegister+0x32>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[(ADD_NUMSER_1 - 130) + (address - 500)];
 8021d5e:	4b07      	ldr	r3, [pc, #28]	; (8021d7c <GetAddrHoldingRegister+0x40>)
 8021d60:	681a      	ldr	r2, [r3, #0]
 8021d62:	88fb      	ldrh	r3, [r7, #6]
 8021d64:	3b82      	subs	r3, #130	; 0x82
 8021d66:	005b      	lsls	r3, r3, #1
 8021d68:	4413      	add	r3, r2
 8021d6a:	3306      	adds	r3, #6
 8021d6c:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 8021d6e:	68fb      	ldr	r3, [r7, #12]
}
 8021d70:	4618      	mov	r0, r3
 8021d72:	3714      	adds	r7, #20
 8021d74:	46bd      	mov	sp, r7
 8021d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7a:	4770      	bx	lr
 8021d7c:	20016128 	.word	0x20016128

08021d80 <CreateDefaultModbusMap>:
}



void CreateDefaultModbusMap(void *fileDataBuffer, TModbusMap *modbusMap)
{
 8021d80:	b580      	push	{r7, lr}
 8021d82:	b086      	sub	sp, #24
 8021d84:	af00      	add	r7, sp, #0
 8021d86:	6078      	str	r0, [r7, #4]
 8021d88:	6039      	str	r1, [r7, #0]
  if (modbusMap == NULL)
 8021d8a:	683b      	ldr	r3, [r7, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d03e      	beq.n	8021e0e <CreateDefaultModbusMap+0x8e>
    return;
  memset(fileDataBuffer, 0, (1024 * 2));
 8021d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8021d94:	2100      	movs	r1, #0
 8021d96:	6878      	ldr	r0, [r7, #4]
 8021d98:	f001 ff2a 	bl	8023bf0 <memset>

  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 8021d9c:	2300      	movs	r3, #0
 8021d9e:	617b      	str	r3, [r7, #20]
 8021da0:	e00a      	b.n	8021db8 <CreateDefaultModbusMap+0x38>
  {

    modbusMap->INPUTREGISTERS [var] = 1;
 8021da2:	683a      	ldr	r2, [r7, #0]
 8021da4:	697b      	ldr	r3, [r7, #20]
 8021da6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8021daa:	005b      	lsls	r3, r3, #1
 8021dac:	4413      	add	r3, r2
 8021dae:	2201      	movs	r2, #1
 8021db0:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 8021db2:	697b      	ldr	r3, [r7, #20]
 8021db4:	3301      	adds	r3, #1
 8021db6:	617b      	str	r3, [r7, #20]
 8021db8:	697b      	ldr	r3, [r7, #20]
 8021dba:	2b76      	cmp	r3, #118	; 0x76
 8021dbc:	ddf1      	ble.n	8021da2 <CreateDefaultModbusMap+0x22>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	613b      	str	r3, [r7, #16]
 8021dc2:	e008      	b.n	8021dd6 <CreateDefaultModbusMap+0x56>
  {

    modbusMap->HOLDINGREGISTERS [var] = 2;
 8021dc4:	683a      	ldr	r2, [r7, #0]
 8021dc6:	693b      	ldr	r3, [r7, #16]
 8021dc8:	005b      	lsls	r3, r3, #1
 8021dca:	4413      	add	r3, r2
 8021dcc:	2202      	movs	r2, #2
 8021dce:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 8021dd0:	693b      	ldr	r3, [r7, #16]
 8021dd2:	3301      	adds	r3, #1
 8021dd4:	613b      	str	r3, [r7, #16]
 8021dd6:	693b      	ldr	r3, [r7, #16]
 8021dd8:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8021ddc:	dbf2      	blt.n	8021dc4 <CreateDefaultModbusMap+0x44>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 8021dde:	2300      	movs	r3, #0
 8021de0:	60fb      	str	r3, [r7, #12]
 8021de2:	e00a      	b.n	8021dfa <CreateDefaultModbusMap+0x7a>
  {

    modbusMap->ESPELHO [var] = 3;
 8021de4:	683a      	ldr	r2, [r7, #0]
 8021de6:	68fb      	ldr	r3, [r7, #12]
 8021de8:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8021dec:	005b      	lsls	r3, r3, #1
 8021dee:	4413      	add	r3, r2
 8021df0:	2203      	movs	r2, #3
 8021df2:	809a      	strh	r2, [r3, #4]
  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 8021df4:	68fb      	ldr	r3, [r7, #12]
 8021df6:	3301      	adds	r3, #1
 8021df8:	60fb      	str	r3, [r7, #12]
 8021dfa:	68fb      	ldr	r3, [r7, #12]
 8021dfc:	2b4a      	cmp	r3, #74	; 0x4a
 8021dfe:	ddf1      	ble.n	8021de4 <CreateDefaultModbusMap+0x64>
  }

  memcpy(fileDataBuffer, modbusMap, sizeof(TModbusMap));
 8021e00:	f240 427a 	movw	r2, #1146	; 0x47a
 8021e04:	6839      	ldr	r1, [r7, #0]
 8021e06:	6878      	ldr	r0, [r7, #4]
 8021e08:	f003 f84f 	bl	8024eaa <memcpy>
 8021e0c:	e000      	b.n	8021e10 <CreateDefaultModbusMap+0x90>
    return;
 8021e0e:	bf00      	nop
}
 8021e10:	3718      	adds	r7, #24
 8021e12:	46bd      	mov	sp, r7
 8021e14:	bd80      	pop	{r7, pc}
	...

08021e18 <ModbusInit>:




void ModbusInit ()
{
 8021e18:	b480      	push	{r7}
 8021e1a:	af00      	add	r7, sp, #0
  ModbusMap = &modbusMapFile;
 8021e1c:	4b03      	ldr	r3, [pc, #12]	; (8021e2c <ModbusInit+0x14>)
 8021e1e:	4a04      	ldr	r2, [pc, #16]	; (8021e30 <ModbusInit+0x18>)
 8021e20:	601a      	str	r2, [r3, #0]

}
 8021e22:	bf00      	nop
 8021e24:	46bd      	mov	sp, r7
 8021e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e2a:	4770      	bx	lr
 8021e2c:	20016128 	.word	0x20016128
 8021e30:	200004b4 	.word	0x200004b4

08021e34 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8021e34:	b480      	push	{r7}
 8021e36:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8021e38:	bf00      	nop
 8021e3a:	46bd      	mov	sp, r7
 8021e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e40:	4770      	bx	lr
	...

08021e44 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8021e44:	b580      	push	{r7, lr}
 8021e46:	b086      	sub	sp, #24
 8021e48:	af04      	add	r7, sp, #16
 8021e4a:	4603      	mov	r3, r0
 8021e4c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8021e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e52:	9302      	str	r3, [sp, #8]
 8021e54:	2301      	movs	r3, #1
 8021e56:	9301      	str	r3, [sp, #4]
 8021e58:	1dfb      	adds	r3, r7, #7
 8021e5a:	9300      	str	r3, [sp, #0]
 8021e5c:	2301      	movs	r3, #1
 8021e5e:	2200      	movs	r2, #0
 8021e60:	2178      	movs	r1, #120	; 0x78
 8021e62:	4803      	ldr	r0, [pc, #12]	; (8021e70 <ssd1306_WriteCommand+0x2c>)
 8021e64:	f7e3 ff54 	bl	8005d10 <HAL_I2C_Mem_Write>
}
 8021e68:	bf00      	nop
 8021e6a:	3708      	adds	r7, #8
 8021e6c:	46bd      	mov	sp, r7
 8021e6e:	bd80      	pop	{r7, pc}
 8021e70:	20001e5c 	.word	0x20001e5c

08021e74 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8021e74:	b580      	push	{r7, lr}
 8021e76:	b086      	sub	sp, #24
 8021e78:	af04      	add	r7, sp, #16
 8021e7a:	6078      	str	r0, [r7, #4]
 8021e7c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8021e7e:	683b      	ldr	r3, [r7, #0]
 8021e80:	b29b      	uxth	r3, r3
 8021e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021e86:	9202      	str	r2, [sp, #8]
 8021e88:	9301      	str	r3, [sp, #4]
 8021e8a:	687b      	ldr	r3, [r7, #4]
 8021e8c:	9300      	str	r3, [sp, #0]
 8021e8e:	2301      	movs	r3, #1
 8021e90:	2240      	movs	r2, #64	; 0x40
 8021e92:	2178      	movs	r1, #120	; 0x78
 8021e94:	4803      	ldr	r0, [pc, #12]	; (8021ea4 <ssd1306_WriteData+0x30>)
 8021e96:	f7e3 ff3b 	bl	8005d10 <HAL_I2C_Mem_Write>
}
 8021e9a:	bf00      	nop
 8021e9c:	3708      	adds	r7, #8
 8021e9e:	46bd      	mov	sp, r7
 8021ea0:	bd80      	pop	{r7, pc}
 8021ea2:	bf00      	nop
 8021ea4:	20001e5c 	.word	0x20001e5c

08021ea8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8021ea8:	b580      	push	{r7, lr}
 8021eaa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8021eac:	f7ff ffc2 	bl	8021e34 <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8021eb0:	2000      	movs	r0, #0
 8021eb2:	f000 f9cf 	bl	8022254 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8021eb6:	2020      	movs	r0, #32
 8021eb8:	f7ff ffc4 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8021ebc:	2000      	movs	r0, #0
 8021ebe:	f7ff ffc1 	bl	8021e44 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8021ec2:	20b0      	movs	r0, #176	; 0xb0
 8021ec4:	f7ff ffbe 	bl	8021e44 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8021ec8:	20c8      	movs	r0, #200	; 0xc8
 8021eca:	f7ff ffbb 	bl	8021e44 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8021ece:	2000      	movs	r0, #0
 8021ed0:	f7ff ffb8 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8021ed4:	2010      	movs	r0, #16
 8021ed6:	f7ff ffb5 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8021eda:	2040      	movs	r0, #64	; 0x40
 8021edc:	f7ff ffb2 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8021ee0:	20ff      	movs	r0, #255	; 0xff
 8021ee2:	f000 f9a3 	bl	802222c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8021ee6:	20a1      	movs	r0, #161	; 0xa1
 8021ee8:	f7ff ffac 	bl	8021e44 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8021eec:	20a6      	movs	r0, #166	; 0xa6
 8021eee:	f7ff ffa9 	bl	8021e44 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8021ef2:	20a8      	movs	r0, #168	; 0xa8
 8021ef4:	f7ff ffa6 	bl	8021e44 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8021ef8:	201f      	movs	r0, #31
 8021efa:	f7ff ffa3 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8021efe:	20a4      	movs	r0, #164	; 0xa4
 8021f00:	f7ff ffa0 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8021f04:	20d3      	movs	r0, #211	; 0xd3
 8021f06:	f7ff ff9d 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8021f0a:	2000      	movs	r0, #0
 8021f0c:	f7ff ff9a 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8021f10:	20d5      	movs	r0, #213	; 0xd5
 8021f12:	f7ff ff97 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8021f16:	20f0      	movs	r0, #240	; 0xf0
 8021f18:	f7ff ff94 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8021f1c:	20d9      	movs	r0, #217	; 0xd9
 8021f1e:	f7ff ff91 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8021f22:	2022      	movs	r0, #34	; 0x22
 8021f24:	f7ff ff8e 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8021f28:	20da      	movs	r0, #218	; 0xda
 8021f2a:	f7ff ff8b 	bl	8021e44 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8021f2e:	2002      	movs	r0, #2
 8021f30:	f7ff ff88 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8021f34:	20db      	movs	r0, #219	; 0xdb
 8021f36:	f7ff ff85 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8021f3a:	2020      	movs	r0, #32
 8021f3c:	f7ff ff82 	bl	8021e44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8021f40:	208d      	movs	r0, #141	; 0x8d
 8021f42:	f7ff ff7f 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8021f46:	2014      	movs	r0, #20
 8021f48:	f7ff ff7c 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8021f4c:	2001      	movs	r0, #1
 8021f4e:	f000 f981 	bl	8022254 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8021f52:	2000      	movs	r0, #0
 8021f54:	f000 f810 	bl	8021f78 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8021f58:	f000 f826 	bl	8021fa8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8021f5c:	4b05      	ldr	r3, [pc, #20]	; (8021f74 <ssd1306_Init+0xcc>)
 8021f5e:	2200      	movs	r2, #0
 8021f60:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8021f62:	4b04      	ldr	r3, [pc, #16]	; (8021f74 <ssd1306_Init+0xcc>)
 8021f64:	2200      	movs	r2, #0
 8021f66:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8021f68:	4b02      	ldr	r3, [pc, #8]	; (8021f74 <ssd1306_Init+0xcc>)
 8021f6a:	2201      	movs	r2, #1
 8021f6c:	711a      	strb	r2, [r3, #4]
}
 8021f6e:	bf00      	nop
 8021f70:	bd80      	pop	{r7, pc}
 8021f72:	bf00      	nop
 8021f74:	2001632c 	.word	0x2001632c

08021f78 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	b082      	sub	sp, #8
 8021f7c:	af00      	add	r7, sp, #0
 8021f7e:	4603      	mov	r3, r0
 8021f80:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8021f82:	79fb      	ldrb	r3, [r7, #7]
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d101      	bne.n	8021f8c <ssd1306_Fill+0x14>
 8021f88:	2300      	movs	r3, #0
 8021f8a:	e000      	b.n	8021f8e <ssd1306_Fill+0x16>
 8021f8c:	23ff      	movs	r3, #255	; 0xff
 8021f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8021f92:	4619      	mov	r1, r3
 8021f94:	4803      	ldr	r0, [pc, #12]	; (8021fa4 <ssd1306_Fill+0x2c>)
 8021f96:	f001 fe2b 	bl	8023bf0 <memset>
}
 8021f9a:	bf00      	nop
 8021f9c:	3708      	adds	r7, #8
 8021f9e:	46bd      	mov	sp, r7
 8021fa0:	bd80      	pop	{r7, pc}
 8021fa2:	bf00      	nop
 8021fa4:	2001612c 	.word	0x2001612c

08021fa8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8021fa8:	b580      	push	{r7, lr}
 8021faa:	b082      	sub	sp, #8
 8021fac:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8021fae:	2300      	movs	r3, #0
 8021fb0:	71fb      	strb	r3, [r7, #7]
 8021fb2:	e016      	b.n	8021fe2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8021fb4:	79fb      	ldrb	r3, [r7, #7]
 8021fb6:	3b50      	subs	r3, #80	; 0x50
 8021fb8:	b2db      	uxtb	r3, r3
 8021fba:	4618      	mov	r0, r3
 8021fbc:	f7ff ff42 	bl	8021e44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8021fc0:	2000      	movs	r0, #0
 8021fc2:	f7ff ff3f 	bl	8021e44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8021fc6:	2010      	movs	r0, #16
 8021fc8:	f7ff ff3c 	bl	8021e44 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8021fcc:	79fb      	ldrb	r3, [r7, #7]
 8021fce:	01db      	lsls	r3, r3, #7
 8021fd0:	4a08      	ldr	r2, [pc, #32]	; (8021ff4 <ssd1306_UpdateScreen+0x4c>)
 8021fd2:	4413      	add	r3, r2
 8021fd4:	2180      	movs	r1, #128	; 0x80
 8021fd6:	4618      	mov	r0, r3
 8021fd8:	f7ff ff4c 	bl	8021e74 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8021fdc:	79fb      	ldrb	r3, [r7, #7]
 8021fde:	3301      	adds	r3, #1
 8021fe0:	71fb      	strb	r3, [r7, #7]
 8021fe2:	79fb      	ldrb	r3, [r7, #7]
 8021fe4:	2b03      	cmp	r3, #3
 8021fe6:	d9e5      	bls.n	8021fb4 <ssd1306_UpdateScreen+0xc>
    }
}
 8021fe8:	bf00      	nop
 8021fea:	bf00      	nop
 8021fec:	3708      	adds	r7, #8
 8021fee:	46bd      	mov	sp, r7
 8021ff0:	bd80      	pop	{r7, pc}
 8021ff2:	bf00      	nop
 8021ff4:	2001612c 	.word	0x2001612c

08021ff8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8021ff8:	b480      	push	{r7}
 8021ffa:	b083      	sub	sp, #12
 8021ffc:	af00      	add	r7, sp, #0
 8021ffe:	4603      	mov	r3, r0
 8022000:	71fb      	strb	r3, [r7, #7]
 8022002:	460b      	mov	r3, r1
 8022004:	71bb      	strb	r3, [r7, #6]
 8022006:	4613      	mov	r3, r2
 8022008:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 802200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802200e:	2b00      	cmp	r3, #0
 8022010:	db3d      	blt.n	802208e <ssd1306_DrawPixel+0x96>
 8022012:	79bb      	ldrb	r3, [r7, #6]
 8022014:	2b1f      	cmp	r3, #31
 8022016:	d83a      	bhi.n	802208e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8022018:	797b      	ldrb	r3, [r7, #5]
 802201a:	2b01      	cmp	r3, #1
 802201c:	d11a      	bne.n	8022054 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 802201e:	79fa      	ldrb	r2, [r7, #7]
 8022020:	79bb      	ldrb	r3, [r7, #6]
 8022022:	08db      	lsrs	r3, r3, #3
 8022024:	b2d8      	uxtb	r0, r3
 8022026:	4603      	mov	r3, r0
 8022028:	01db      	lsls	r3, r3, #7
 802202a:	4413      	add	r3, r2
 802202c:	4a1b      	ldr	r2, [pc, #108]	; (802209c <ssd1306_DrawPixel+0xa4>)
 802202e:	5cd3      	ldrb	r3, [r2, r3]
 8022030:	b25a      	sxtb	r2, r3
 8022032:	79bb      	ldrb	r3, [r7, #6]
 8022034:	f003 0307 	and.w	r3, r3, #7
 8022038:	2101      	movs	r1, #1
 802203a:	fa01 f303 	lsl.w	r3, r1, r3
 802203e:	b25b      	sxtb	r3, r3
 8022040:	4313      	orrs	r3, r2
 8022042:	b259      	sxtb	r1, r3
 8022044:	79fa      	ldrb	r2, [r7, #7]
 8022046:	4603      	mov	r3, r0
 8022048:	01db      	lsls	r3, r3, #7
 802204a:	4413      	add	r3, r2
 802204c:	b2c9      	uxtb	r1, r1
 802204e:	4a13      	ldr	r2, [pc, #76]	; (802209c <ssd1306_DrawPixel+0xa4>)
 8022050:	54d1      	strb	r1, [r2, r3]
 8022052:	e01d      	b.n	8022090 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8022054:	79fa      	ldrb	r2, [r7, #7]
 8022056:	79bb      	ldrb	r3, [r7, #6]
 8022058:	08db      	lsrs	r3, r3, #3
 802205a:	b2d8      	uxtb	r0, r3
 802205c:	4603      	mov	r3, r0
 802205e:	01db      	lsls	r3, r3, #7
 8022060:	4413      	add	r3, r2
 8022062:	4a0e      	ldr	r2, [pc, #56]	; (802209c <ssd1306_DrawPixel+0xa4>)
 8022064:	5cd3      	ldrb	r3, [r2, r3]
 8022066:	b25a      	sxtb	r2, r3
 8022068:	79bb      	ldrb	r3, [r7, #6]
 802206a:	f003 0307 	and.w	r3, r3, #7
 802206e:	2101      	movs	r1, #1
 8022070:	fa01 f303 	lsl.w	r3, r1, r3
 8022074:	b25b      	sxtb	r3, r3
 8022076:	43db      	mvns	r3, r3
 8022078:	b25b      	sxtb	r3, r3
 802207a:	4013      	ands	r3, r2
 802207c:	b259      	sxtb	r1, r3
 802207e:	79fa      	ldrb	r2, [r7, #7]
 8022080:	4603      	mov	r3, r0
 8022082:	01db      	lsls	r3, r3, #7
 8022084:	4413      	add	r3, r2
 8022086:	b2c9      	uxtb	r1, r1
 8022088:	4a04      	ldr	r2, [pc, #16]	; (802209c <ssd1306_DrawPixel+0xa4>)
 802208a:	54d1      	strb	r1, [r2, r3]
 802208c:	e000      	b.n	8022090 <ssd1306_DrawPixel+0x98>
        return;
 802208e:	bf00      	nop
    }
}
 8022090:	370c      	adds	r7, #12
 8022092:	46bd      	mov	sp, r7
 8022094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022098:	4770      	bx	lr
 802209a:	bf00      	nop
 802209c:	2001612c 	.word	0x2001612c

080220a0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80220a0:	b590      	push	{r4, r7, lr}
 80220a2:	b089      	sub	sp, #36	; 0x24
 80220a4:	af00      	add	r7, sp, #0
 80220a6:	4604      	mov	r4, r0
 80220a8:	1d38      	adds	r0, r7, #4
 80220aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80220ae:	461a      	mov	r2, r3
 80220b0:	4623      	mov	r3, r4
 80220b2:	73fb      	strb	r3, [r7, #15]
 80220b4:	4613      	mov	r3, r2
 80220b6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80220b8:	7bfb      	ldrb	r3, [r7, #15]
 80220ba:	2b1f      	cmp	r3, #31
 80220bc:	d902      	bls.n	80220c4 <ssd1306_WriteChar+0x24>
 80220be:	7bfb      	ldrb	r3, [r7, #15]
 80220c0:	2b7e      	cmp	r3, #126	; 0x7e
 80220c2:	d901      	bls.n	80220c8 <ssd1306_WriteChar+0x28>
        return 0;
 80220c4:	2300      	movs	r3, #0
 80220c6:	e06d      	b.n	80221a4 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80220c8:	4b38      	ldr	r3, [pc, #224]	; (80221ac <ssd1306_WriteChar+0x10c>)
 80220ca:	881b      	ldrh	r3, [r3, #0]
 80220cc:	461a      	mov	r2, r3
 80220ce:	793b      	ldrb	r3, [r7, #4]
 80220d0:	4413      	add	r3, r2
 80220d2:	2b80      	cmp	r3, #128	; 0x80
 80220d4:	dc06      	bgt.n	80220e4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80220d6:	4b35      	ldr	r3, [pc, #212]	; (80221ac <ssd1306_WriteChar+0x10c>)
 80220d8:	885b      	ldrh	r3, [r3, #2]
 80220da:	461a      	mov	r2, r3
 80220dc:	797b      	ldrb	r3, [r7, #5]
 80220de:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80220e0:	2b20      	cmp	r3, #32
 80220e2:	dd01      	ble.n	80220e8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80220e4:	2300      	movs	r3, #0
 80220e6:	e05d      	b.n	80221a4 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80220e8:	2300      	movs	r3, #0
 80220ea:	61fb      	str	r3, [r7, #28]
 80220ec:	e04c      	b.n	8022188 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80220ee:	68ba      	ldr	r2, [r7, #8]
 80220f0:	7bfb      	ldrb	r3, [r7, #15]
 80220f2:	3b20      	subs	r3, #32
 80220f4:	7979      	ldrb	r1, [r7, #5]
 80220f6:	fb01 f303 	mul.w	r3, r1, r3
 80220fa:	4619      	mov	r1, r3
 80220fc:	69fb      	ldr	r3, [r7, #28]
 80220fe:	440b      	add	r3, r1
 8022100:	005b      	lsls	r3, r3, #1
 8022102:	4413      	add	r3, r2
 8022104:	881b      	ldrh	r3, [r3, #0]
 8022106:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8022108:	2300      	movs	r3, #0
 802210a:	61bb      	str	r3, [r7, #24]
 802210c:	e034      	b.n	8022178 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 802210e:	697a      	ldr	r2, [r7, #20]
 8022110:	69bb      	ldr	r3, [r7, #24]
 8022112:	fa02 f303 	lsl.w	r3, r2, r3
 8022116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802211a:	2b00      	cmp	r3, #0
 802211c:	d012      	beq.n	8022144 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 802211e:	4b23      	ldr	r3, [pc, #140]	; (80221ac <ssd1306_WriteChar+0x10c>)
 8022120:	881b      	ldrh	r3, [r3, #0]
 8022122:	b2da      	uxtb	r2, r3
 8022124:	69bb      	ldr	r3, [r7, #24]
 8022126:	b2db      	uxtb	r3, r3
 8022128:	4413      	add	r3, r2
 802212a:	b2d8      	uxtb	r0, r3
 802212c:	4b1f      	ldr	r3, [pc, #124]	; (80221ac <ssd1306_WriteChar+0x10c>)
 802212e:	885b      	ldrh	r3, [r3, #2]
 8022130:	b2da      	uxtb	r2, r3
 8022132:	69fb      	ldr	r3, [r7, #28]
 8022134:	b2db      	uxtb	r3, r3
 8022136:	4413      	add	r3, r2
 8022138:	b2db      	uxtb	r3, r3
 802213a:	7bba      	ldrb	r2, [r7, #14]
 802213c:	4619      	mov	r1, r3
 802213e:	f7ff ff5b 	bl	8021ff8 <ssd1306_DrawPixel>
 8022142:	e016      	b.n	8022172 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8022144:	4b19      	ldr	r3, [pc, #100]	; (80221ac <ssd1306_WriteChar+0x10c>)
 8022146:	881b      	ldrh	r3, [r3, #0]
 8022148:	b2da      	uxtb	r2, r3
 802214a:	69bb      	ldr	r3, [r7, #24]
 802214c:	b2db      	uxtb	r3, r3
 802214e:	4413      	add	r3, r2
 8022150:	b2d8      	uxtb	r0, r3
 8022152:	4b16      	ldr	r3, [pc, #88]	; (80221ac <ssd1306_WriteChar+0x10c>)
 8022154:	885b      	ldrh	r3, [r3, #2]
 8022156:	b2da      	uxtb	r2, r3
 8022158:	69fb      	ldr	r3, [r7, #28]
 802215a:	b2db      	uxtb	r3, r3
 802215c:	4413      	add	r3, r2
 802215e:	b2d9      	uxtb	r1, r3
 8022160:	7bbb      	ldrb	r3, [r7, #14]
 8022162:	2b00      	cmp	r3, #0
 8022164:	bf0c      	ite	eq
 8022166:	2301      	moveq	r3, #1
 8022168:	2300      	movne	r3, #0
 802216a:	b2db      	uxtb	r3, r3
 802216c:	461a      	mov	r2, r3
 802216e:	f7ff ff43 	bl	8021ff8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8022172:	69bb      	ldr	r3, [r7, #24]
 8022174:	3301      	adds	r3, #1
 8022176:	61bb      	str	r3, [r7, #24]
 8022178:	793b      	ldrb	r3, [r7, #4]
 802217a:	461a      	mov	r2, r3
 802217c:	69bb      	ldr	r3, [r7, #24]
 802217e:	4293      	cmp	r3, r2
 8022180:	d3c5      	bcc.n	802210e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8022182:	69fb      	ldr	r3, [r7, #28]
 8022184:	3301      	adds	r3, #1
 8022186:	61fb      	str	r3, [r7, #28]
 8022188:	797b      	ldrb	r3, [r7, #5]
 802218a:	461a      	mov	r2, r3
 802218c:	69fb      	ldr	r3, [r7, #28]
 802218e:	4293      	cmp	r3, r2
 8022190:	d3ad      	bcc.n	80220ee <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8022192:	4b06      	ldr	r3, [pc, #24]	; (80221ac <ssd1306_WriteChar+0x10c>)
 8022194:	881a      	ldrh	r2, [r3, #0]
 8022196:	793b      	ldrb	r3, [r7, #4]
 8022198:	b29b      	uxth	r3, r3
 802219a:	4413      	add	r3, r2
 802219c:	b29a      	uxth	r2, r3
 802219e:	4b03      	ldr	r3, [pc, #12]	; (80221ac <ssd1306_WriteChar+0x10c>)
 80221a0:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80221a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80221a4:	4618      	mov	r0, r3
 80221a6:	3724      	adds	r7, #36	; 0x24
 80221a8:	46bd      	mov	sp, r7
 80221aa:	bd90      	pop	{r4, r7, pc}
 80221ac:	2001632c 	.word	0x2001632c

080221b0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80221b0:	b580      	push	{r7, lr}
 80221b2:	b084      	sub	sp, #16
 80221b4:	af00      	add	r7, sp, #0
 80221b6:	60f8      	str	r0, [r7, #12]
 80221b8:	1d38      	adds	r0, r7, #4
 80221ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80221be:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80221c0:	e012      	b.n	80221e8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80221c2:	68fb      	ldr	r3, [r7, #12]
 80221c4:	7818      	ldrb	r0, [r3, #0]
 80221c6:	78fb      	ldrb	r3, [r7, #3]
 80221c8:	1d3a      	adds	r2, r7, #4
 80221ca:	ca06      	ldmia	r2, {r1, r2}
 80221cc:	f7ff ff68 	bl	80220a0 <ssd1306_WriteChar>
 80221d0:	4603      	mov	r3, r0
 80221d2:	461a      	mov	r2, r3
 80221d4:	68fb      	ldr	r3, [r7, #12]
 80221d6:	781b      	ldrb	r3, [r3, #0]
 80221d8:	429a      	cmp	r2, r3
 80221da:	d002      	beq.n	80221e2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80221dc:	68fb      	ldr	r3, [r7, #12]
 80221de:	781b      	ldrb	r3, [r3, #0]
 80221e0:	e008      	b.n	80221f4 <ssd1306_WriteString+0x44>
        }
        str++;
 80221e2:	68fb      	ldr	r3, [r7, #12]
 80221e4:	3301      	adds	r3, #1
 80221e6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80221e8:	68fb      	ldr	r3, [r7, #12]
 80221ea:	781b      	ldrb	r3, [r3, #0]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d1e8      	bne.n	80221c2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80221f0:	68fb      	ldr	r3, [r7, #12]
 80221f2:	781b      	ldrb	r3, [r3, #0]
}
 80221f4:	4618      	mov	r0, r3
 80221f6:	3710      	adds	r7, #16
 80221f8:	46bd      	mov	sp, r7
 80221fa:	bd80      	pop	{r7, pc}

080221fc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80221fc:	b480      	push	{r7}
 80221fe:	b083      	sub	sp, #12
 8022200:	af00      	add	r7, sp, #0
 8022202:	4603      	mov	r3, r0
 8022204:	460a      	mov	r2, r1
 8022206:	71fb      	strb	r3, [r7, #7]
 8022208:	4613      	mov	r3, r2
 802220a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 802220c:	79fb      	ldrb	r3, [r7, #7]
 802220e:	b29a      	uxth	r2, r3
 8022210:	4b05      	ldr	r3, [pc, #20]	; (8022228 <ssd1306_SetCursor+0x2c>)
 8022212:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8022214:	79bb      	ldrb	r3, [r7, #6]
 8022216:	b29a      	uxth	r2, r3
 8022218:	4b03      	ldr	r3, [pc, #12]	; (8022228 <ssd1306_SetCursor+0x2c>)
 802221a:	805a      	strh	r2, [r3, #2]
}
 802221c:	bf00      	nop
 802221e:	370c      	adds	r7, #12
 8022220:	46bd      	mov	sp, r7
 8022222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022226:	4770      	bx	lr
 8022228:	2001632c 	.word	0x2001632c

0802222c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 802222c:	b580      	push	{r7, lr}
 802222e:	b084      	sub	sp, #16
 8022230:	af00      	add	r7, sp, #0
 8022232:	4603      	mov	r3, r0
 8022234:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8022236:	2381      	movs	r3, #129	; 0x81
 8022238:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 802223a:	7bfb      	ldrb	r3, [r7, #15]
 802223c:	4618      	mov	r0, r3
 802223e:	f7ff fe01 	bl	8021e44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8022242:	79fb      	ldrb	r3, [r7, #7]
 8022244:	4618      	mov	r0, r3
 8022246:	f7ff fdfd 	bl	8021e44 <ssd1306_WriteCommand>
}
 802224a:	bf00      	nop
 802224c:	3710      	adds	r7, #16
 802224e:	46bd      	mov	sp, r7
 8022250:	bd80      	pop	{r7, pc}
	...

08022254 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8022254:	b580      	push	{r7, lr}
 8022256:	b084      	sub	sp, #16
 8022258:	af00      	add	r7, sp, #0
 802225a:	4603      	mov	r3, r0
 802225c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 802225e:	79fb      	ldrb	r3, [r7, #7]
 8022260:	2b00      	cmp	r3, #0
 8022262:	d005      	beq.n	8022270 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8022264:	23af      	movs	r3, #175	; 0xaf
 8022266:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8022268:	4b08      	ldr	r3, [pc, #32]	; (802228c <ssd1306_SetDisplayOn+0x38>)
 802226a:	2201      	movs	r2, #1
 802226c:	715a      	strb	r2, [r3, #5]
 802226e:	e004      	b.n	802227a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8022270:	23ae      	movs	r3, #174	; 0xae
 8022272:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8022274:	4b05      	ldr	r3, [pc, #20]	; (802228c <ssd1306_SetDisplayOn+0x38>)
 8022276:	2200      	movs	r2, #0
 8022278:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 802227a:	7bfb      	ldrb	r3, [r7, #15]
 802227c:	4618      	mov	r0, r3
 802227e:	f7ff fde1 	bl	8021e44 <ssd1306_WriteCommand>
}
 8022282:	bf00      	nop
 8022284:	3710      	adds	r7, #16
 8022286:	46bd      	mov	sp, r7
 8022288:	bd80      	pop	{r7, pc}
 802228a:	bf00      	nop
 802228c:	2001632c 	.word	0x2001632c

08022290 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8022290:	b580      	push	{r7, lr}
 8022292:	b086      	sub	sp, #24
 8022294:	af02      	add	r7, sp, #8
 8022296:	4603      	mov	r3, r0
 8022298:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 802229a:	f107 020f 	add.w	r2, r7, #15
 802229e:	1df9      	adds	r1, r7, #7
 80222a0:	2364      	movs	r3, #100	; 0x64
 80222a2:	9300      	str	r3, [sp, #0]
 80222a4:	2301      	movs	r3, #1
 80222a6:	4804      	ldr	r0, [pc, #16]	; (80222b8 <W25qxx_Spi+0x28>)
 80222a8:	f7e5 fabc 	bl	8007824 <HAL_SPI_TransmitReceive>


	return ret;
 80222ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80222ae:	4618      	mov	r0, r3
 80222b0:	3710      	adds	r7, #16
 80222b2:	46bd      	mov	sp, r7
 80222b4:	bd80      	pop	{r7, pc}
 80222b6:	bf00      	nop
 80222b8:	20001f68 	.word	0x20001f68

080222bc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b084      	sub	sp, #16
 80222c0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80222c2:	2300      	movs	r3, #0
 80222c4:	60fb      	str	r3, [r7, #12]
 80222c6:	2300      	movs	r3, #0
 80222c8:	60bb      	str	r3, [r7, #8]
 80222ca:	2300      	movs	r3, #0
 80222cc:	607b      	str	r3, [r7, #4]
 80222ce:	2300      	movs	r3, #0
 80222d0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80222d2:	2200      	movs	r2, #0
 80222d4:	2108      	movs	r1, #8
 80222d6:	4813      	ldr	r0, [pc, #76]	; (8022324 <W25qxx_ReadID+0x68>)
 80222d8:	f7e3 fba2 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80222dc:	209f      	movs	r0, #159	; 0x9f
 80222de:	f7ff ffd7 	bl	8022290 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80222e2:	20a5      	movs	r0, #165	; 0xa5
 80222e4:	f7ff ffd4 	bl	8022290 <W25qxx_Spi>
 80222e8:	4603      	mov	r3, r0
 80222ea:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80222ec:	20a5      	movs	r0, #165	; 0xa5
 80222ee:	f7ff ffcf 	bl	8022290 <W25qxx_Spi>
 80222f2:	4603      	mov	r3, r0
 80222f4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80222f6:	20a5      	movs	r0, #165	; 0xa5
 80222f8:	f7ff ffca 	bl	8022290 <W25qxx_Spi>
 80222fc:	4603      	mov	r3, r0
 80222fe:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022300:	2201      	movs	r2, #1
 8022302:	2108      	movs	r1, #8
 8022304:	4807      	ldr	r0, [pc, #28]	; (8022324 <W25qxx_ReadID+0x68>)
 8022306:	f7e3 fb8b 	bl	8005a20 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 802230a:	68bb      	ldr	r3, [r7, #8]
 802230c:	041a      	lsls	r2, r3, #16
 802230e:	687b      	ldr	r3, [r7, #4]
 8022310:	021b      	lsls	r3, r3, #8
 8022312:	4313      	orrs	r3, r2
 8022314:	683a      	ldr	r2, [r7, #0]
 8022316:	4313      	orrs	r3, r2
 8022318:	60fb      	str	r3, [r7, #12]
	return Temp;
 802231a:	68fb      	ldr	r3, [r7, #12]
}
 802231c:	4618      	mov	r0, r3
 802231e:	3710      	adds	r7, #16
 8022320:	46bd      	mov	sp, r7
 8022322:	bd80      	pop	{r7, pc}
 8022324:	40021000 	.word	0x40021000

08022328 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8022328:	b590      	push	{r4, r7, lr}
 802232a:	b083      	sub	sp, #12
 802232c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802232e:	2200      	movs	r2, #0
 8022330:	2108      	movs	r1, #8
 8022332:	4816      	ldr	r0, [pc, #88]	; (802238c <W25qxx_ReadUniqID+0x64>)
 8022334:	f7e3 fb74 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8022338:	204b      	movs	r0, #75	; 0x4b
 802233a:	f7ff ffa9 	bl	8022290 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 802233e:	2300      	movs	r3, #0
 8022340:	71fb      	strb	r3, [r7, #7]
 8022342:	e005      	b.n	8022350 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022344:	20a5      	movs	r0, #165	; 0xa5
 8022346:	f7ff ffa3 	bl	8022290 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 802234a:	79fb      	ldrb	r3, [r7, #7]
 802234c:	3301      	adds	r3, #1
 802234e:	71fb      	strb	r3, [r7, #7]
 8022350:	79fb      	ldrb	r3, [r7, #7]
 8022352:	2b03      	cmp	r3, #3
 8022354:	d9f6      	bls.n	8022344 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8022356:	2300      	movs	r3, #0
 8022358:	71bb      	strb	r3, [r7, #6]
 802235a:	e00b      	b.n	8022374 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802235c:	79bc      	ldrb	r4, [r7, #6]
 802235e:	20a5      	movs	r0, #165	; 0xa5
 8022360:	f7ff ff96 	bl	8022290 <W25qxx_Spi>
 8022364:	4603      	mov	r3, r0
 8022366:	461a      	mov	r2, r3
 8022368:	4b09      	ldr	r3, [pc, #36]	; (8022390 <W25qxx_ReadUniqID+0x68>)
 802236a:	4423      	add	r3, r4
 802236c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 802236e:	79bb      	ldrb	r3, [r7, #6]
 8022370:	3301      	adds	r3, #1
 8022372:	71bb      	strb	r3, [r7, #6]
 8022374:	79bb      	ldrb	r3, [r7, #6]
 8022376:	2b07      	cmp	r3, #7
 8022378:	d9f0      	bls.n	802235c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 802237a:	2201      	movs	r2, #1
 802237c:	2108      	movs	r1, #8
 802237e:	4803      	ldr	r0, [pc, #12]	; (802238c <W25qxx_ReadUniqID+0x64>)
 8022380:	f7e3 fb4e 	bl	8005a20 <HAL_GPIO_WritePin>
}
 8022384:	bf00      	nop
 8022386:	370c      	adds	r7, #12
 8022388:	46bd      	mov	sp, r7
 802238a:	bd90      	pop	{r4, r7, pc}
 802238c:	40021000 	.word	0x40021000
 8022390:	20016334 	.word	0x20016334

08022394 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8022394:	b580      	push	{r7, lr}
 8022396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022398:	2200      	movs	r2, #0
 802239a:	2108      	movs	r1, #8
 802239c:	4807      	ldr	r0, [pc, #28]	; (80223bc <W25qxx_WriteEnable+0x28>)
 802239e:	f7e3 fb3f 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80223a2:	2006      	movs	r0, #6
 80223a4:	f7ff ff74 	bl	8022290 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80223a8:	2201      	movs	r2, #1
 80223aa:	2108      	movs	r1, #8
 80223ac:	4803      	ldr	r0, [pc, #12]	; (80223bc <W25qxx_WriteEnable+0x28>)
 80223ae:	f7e3 fb37 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 80223b2:	2001      	movs	r0, #1
 80223b4:	f7e7 fa62 	bl	800987c <osDelay>
}
 80223b8:	bf00      	nop
 80223ba:	bd80      	pop	{r7, pc}
 80223bc:	40021000 	.word	0x40021000

080223c0 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80223c0:	b580      	push	{r7, lr}
 80223c2:	b084      	sub	sp, #16
 80223c4:	af00      	add	r7, sp, #0
 80223c6:	4603      	mov	r3, r0
 80223c8:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80223ca:	2300      	movs	r3, #0
 80223cc:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80223ce:	2200      	movs	r2, #0
 80223d0:	2108      	movs	r1, #8
 80223d2:	481c      	ldr	r0, [pc, #112]	; (8022444 <W25qxx_ReadStatusRegister+0x84>)
 80223d4:	f7e3 fb24 	bl	8005a20 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80223d8:	79fb      	ldrb	r3, [r7, #7]
 80223da:	2b01      	cmp	r3, #1
 80223dc:	d10c      	bne.n	80223f8 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80223de:	2005      	movs	r0, #5
 80223e0:	f7ff ff56 	bl	8022290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80223e4:	20a5      	movs	r0, #165	; 0xa5
 80223e6:	f7ff ff53 	bl	8022290 <W25qxx_Spi>
 80223ea:	4603      	mov	r3, r0
 80223ec:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80223ee:	4a16      	ldr	r2, [pc, #88]	; (8022448 <W25qxx_ReadStatusRegister+0x88>)
 80223f0:	7bfb      	ldrb	r3, [r7, #15]
 80223f2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80223f6:	e01b      	b.n	8022430 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80223f8:	79fb      	ldrb	r3, [r7, #7]
 80223fa:	2b02      	cmp	r3, #2
 80223fc:	d10c      	bne.n	8022418 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80223fe:	2035      	movs	r0, #53	; 0x35
 8022400:	f7ff ff46 	bl	8022290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022404:	20a5      	movs	r0, #165	; 0xa5
 8022406:	f7ff ff43 	bl	8022290 <W25qxx_Spi>
 802240a:	4603      	mov	r3, r0
 802240c:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 802240e:	4a0e      	ldr	r2, [pc, #56]	; (8022448 <W25qxx_ReadStatusRegister+0x88>)
 8022410:	7bfb      	ldrb	r3, [r7, #15]
 8022412:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8022416:	e00b      	b.n	8022430 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8022418:	2015      	movs	r0, #21
 802241a:	f7ff ff39 	bl	8022290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802241e:	20a5      	movs	r0, #165	; 0xa5
 8022420:	f7ff ff36 	bl	8022290 <W25qxx_Spi>
 8022424:	4603      	mov	r3, r0
 8022426:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8022428:	4a07      	ldr	r2, [pc, #28]	; (8022448 <W25qxx_ReadStatusRegister+0x88>)
 802242a:	7bfb      	ldrb	r3, [r7, #15]
 802242c:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8022430:	2201      	movs	r2, #1
 8022432:	2108      	movs	r1, #8
 8022434:	4803      	ldr	r0, [pc, #12]	; (8022444 <W25qxx_ReadStatusRegister+0x84>)
 8022436:	f7e3 faf3 	bl	8005a20 <HAL_GPIO_WritePin>
	return status;
 802243a:	7bfb      	ldrb	r3, [r7, #15]
}
 802243c:	4618      	mov	r0, r3
 802243e:	3710      	adds	r7, #16
 8022440:	46bd      	mov	sp, r7
 8022442:	bd80      	pop	{r7, pc}
 8022444:	40021000 	.word	0x40021000
 8022448:	20016334 	.word	0x20016334

0802244c <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 802244c:	b580      	push	{r7, lr}
 802244e:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8022450:	2001      	movs	r0, #1
 8022452:	f7e7 fa13 	bl	800987c <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022456:	2200      	movs	r2, #0
 8022458:	2108      	movs	r1, #8
 802245a:	480f      	ldr	r0, [pc, #60]	; (8022498 <W25qxx_WaitForWriteEnd+0x4c>)
 802245c:	f7e3 fae0 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8022460:	2005      	movs	r0, #5
 8022462:	f7ff ff15 	bl	8022290 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8022466:	20a5      	movs	r0, #165	; 0xa5
 8022468:	f7ff ff12 	bl	8022290 <W25qxx_Spi>
 802246c:	4603      	mov	r3, r0
 802246e:	461a      	mov	r2, r3
 8022470:	4b0a      	ldr	r3, [pc, #40]	; (802249c <W25qxx_WaitForWriteEnd+0x50>)
 8022472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8022476:	2001      	movs	r0, #1
 8022478:	f7e7 fa00 	bl	800987c <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 802247c:	4b07      	ldr	r3, [pc, #28]	; (802249c <W25qxx_WaitForWriteEnd+0x50>)
 802247e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8022482:	f003 0301 	and.w	r3, r3, #1
 8022486:	2b00      	cmp	r3, #0
 8022488:	d1ed      	bne.n	8022466 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 802248a:	2201      	movs	r2, #1
 802248c:	2108      	movs	r1, #8
 802248e:	4802      	ldr	r0, [pc, #8]	; (8022498 <W25qxx_WaitForWriteEnd+0x4c>)
 8022490:	f7e3 fac6 	bl	8005a20 <HAL_GPIO_WritePin>
}
 8022494:	bf00      	nop
 8022496:	bd80      	pop	{r7, pc}
 8022498:	40021000 	.word	0x40021000
 802249c:	20016334 	.word	0x20016334

080224a0 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80224a0:	b580      	push	{r7, lr}
 80224a2:	b082      	sub	sp, #8
 80224a4:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80224a6:	4b65      	ldr	r3, [pc, #404]	; (802263c <W25qxx_Init+0x19c>)
 80224a8:	2201      	movs	r2, #1
 80224aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 80224ae:	e002      	b.n	80224b6 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 80224b0:	2001      	movs	r0, #1
 80224b2:	f7e7 f9e3 	bl	800987c <osDelay>
	while (HAL_GetTick() < 100)
 80224b6:	f7e1 fd91 	bl	8003fdc <HAL_GetTick>
 80224ba:	4603      	mov	r3, r0
 80224bc:	2b63      	cmp	r3, #99	; 0x63
 80224be:	d9f7      	bls.n	80224b0 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80224c0:	2201      	movs	r2, #1
 80224c2:	2108      	movs	r1, #8
 80224c4:	485e      	ldr	r0, [pc, #376]	; (8022640 <W25qxx_Init+0x1a0>)
 80224c6:	f7e3 faab 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80224ca:	2064      	movs	r0, #100	; 0x64
 80224cc:	f7e7 f9d6 	bl	800987c <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 80224d0:	f7ff fef4 	bl	80222bc <W25qxx_ReadID>
 80224d4:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 80224d6:	687b      	ldr	r3, [r7, #4]
 80224d8:	b2db      	uxtb	r3, r3
 80224da:	3b11      	subs	r3, #17
 80224dc:	2b0f      	cmp	r3, #15
 80224de:	d86c      	bhi.n	80225ba <W25qxx_Init+0x11a>
 80224e0:	a201      	add	r2, pc, #4	; (adr r2, 80224e8 <W25qxx_Init+0x48>)
 80224e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80224e6:	bf00      	nop
 80224e8:	080225ad 	.word	0x080225ad
 80224ec:	0802259f 	.word	0x0802259f
 80224f0:	08022591 	.word	0x08022591
 80224f4:	08022583 	.word	0x08022583
 80224f8:	08022575 	.word	0x08022575
 80224fc:	08022567 	.word	0x08022567
 8022500:	08022559 	.word	0x08022559
 8022504:	08022549 	.word	0x08022549
 8022508:	08022539 	.word	0x08022539
 802250c:	080225bb 	.word	0x080225bb
 8022510:	080225bb 	.word	0x080225bb
 8022514:	080225bb 	.word	0x080225bb
 8022518:	080225bb 	.word	0x080225bb
 802251c:	080225bb 	.word	0x080225bb
 8022520:	080225bb 	.word	0x080225bb
 8022524:	08022529 	.word	0x08022529
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8022528:	4b44      	ldr	r3, [pc, #272]	; (802263c <W25qxx_Init+0x19c>)
 802252a:	220a      	movs	r2, #10
 802252c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 802252e:	4b43      	ldr	r3, [pc, #268]	; (802263c <W25qxx_Init+0x19c>)
 8022530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8022534:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8022536:	e046      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8022538:	4b40      	ldr	r3, [pc, #256]	; (802263c <W25qxx_Init+0x19c>)
 802253a:	2209      	movs	r2, #9
 802253c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 802253e:	4b3f      	ldr	r3, [pc, #252]	; (802263c <W25qxx_Init+0x19c>)
 8022540:	f44f 7200 	mov.w	r2, #512	; 0x200
 8022544:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8022546:	e03e      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8022548:	4b3c      	ldr	r3, [pc, #240]	; (802263c <W25qxx_Init+0x19c>)
 802254a:	2208      	movs	r2, #8
 802254c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 802254e:	4b3b      	ldr	r3, [pc, #236]	; (802263c <W25qxx_Init+0x19c>)
 8022550:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022554:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8022556:	e036      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8022558:	4b38      	ldr	r3, [pc, #224]	; (802263c <W25qxx_Init+0x19c>)
 802255a:	2207      	movs	r2, #7
 802255c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 802255e:	4b37      	ldr	r3, [pc, #220]	; (802263c <W25qxx_Init+0x19c>)
 8022560:	2280      	movs	r2, #128	; 0x80
 8022562:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8022564:	e02f      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8022566:	4b35      	ldr	r3, [pc, #212]	; (802263c <W25qxx_Init+0x19c>)
 8022568:	2206      	movs	r2, #6
 802256a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 802256c:	4b33      	ldr	r3, [pc, #204]	; (802263c <W25qxx_Init+0x19c>)
 802256e:	2240      	movs	r2, #64	; 0x40
 8022570:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8022572:	e028      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8022574:	4b31      	ldr	r3, [pc, #196]	; (802263c <W25qxx_Init+0x19c>)
 8022576:	2205      	movs	r2, #5
 8022578:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 802257a:	4b30      	ldr	r3, [pc, #192]	; (802263c <W25qxx_Init+0x19c>)
 802257c:	2220      	movs	r2, #32
 802257e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8022580:	e021      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8022582:	4b2e      	ldr	r3, [pc, #184]	; (802263c <W25qxx_Init+0x19c>)
 8022584:	2204      	movs	r2, #4
 8022586:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8022588:	4b2c      	ldr	r3, [pc, #176]	; (802263c <W25qxx_Init+0x19c>)
 802258a:	2210      	movs	r2, #16
 802258c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 802258e:	e01a      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8022590:	4b2a      	ldr	r3, [pc, #168]	; (802263c <W25qxx_Init+0x19c>)
 8022592:	2203      	movs	r2, #3
 8022594:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8022596:	4b29      	ldr	r3, [pc, #164]	; (802263c <W25qxx_Init+0x19c>)
 8022598:	2208      	movs	r2, #8
 802259a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 802259c:	e013      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 802259e:	4b27      	ldr	r3, [pc, #156]	; (802263c <W25qxx_Init+0x19c>)
 80225a0:	2202      	movs	r2, #2
 80225a2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80225a4:	4b25      	ldr	r3, [pc, #148]	; (802263c <W25qxx_Init+0x19c>)
 80225a6:	2204      	movs	r2, #4
 80225a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80225aa:	e00c      	b.n	80225c6 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80225ac:	4b23      	ldr	r3, [pc, #140]	; (802263c <W25qxx_Init+0x19c>)
 80225ae:	2201      	movs	r2, #1
 80225b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80225b2:	4b22      	ldr	r3, [pc, #136]	; (802263c <W25qxx_Init+0x19c>)
 80225b4:	2202      	movs	r2, #2
 80225b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 80225b8:	e005      	b.n	80225c6 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 80225ba:	4b20      	ldr	r3, [pc, #128]	; (802263c <W25qxx_Init+0x19c>)
 80225bc:	2200      	movs	r2, #0
 80225be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 80225c2:	2300      	movs	r3, #0
 80225c4:	e036      	b.n	8022634 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 80225c6:	4b1d      	ldr	r3, [pc, #116]	; (802263c <W25qxx_Init+0x19c>)
 80225c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80225cc:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 80225ce:	4b1b      	ldr	r3, [pc, #108]	; (802263c <W25qxx_Init+0x19c>)
 80225d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80225d4:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 80225d6:	4b19      	ldr	r3, [pc, #100]	; (802263c <W25qxx_Init+0x19c>)
 80225d8:	69db      	ldr	r3, [r3, #28]
 80225da:	011b      	lsls	r3, r3, #4
 80225dc:	4a17      	ldr	r2, [pc, #92]	; (802263c <W25qxx_Init+0x19c>)
 80225de:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 80225e0:	4b16      	ldr	r3, [pc, #88]	; (802263c <W25qxx_Init+0x19c>)
 80225e2:	695b      	ldr	r3, [r3, #20]
 80225e4:	4a15      	ldr	r2, [pc, #84]	; (802263c <W25qxx_Init+0x19c>)
 80225e6:	6912      	ldr	r2, [r2, #16]
 80225e8:	fb02 f303 	mul.w	r3, r2, r3
 80225ec:	4a13      	ldr	r2, [pc, #76]	; (802263c <W25qxx_Init+0x19c>)
 80225ee:	8952      	ldrh	r2, [r2, #10]
 80225f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80225f4:	4a11      	ldr	r2, [pc, #68]	; (802263c <W25qxx_Init+0x19c>)
 80225f6:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 80225f8:	4b10      	ldr	r3, [pc, #64]	; (802263c <W25qxx_Init+0x19c>)
 80225fa:	691b      	ldr	r3, [r3, #16]
 80225fc:	011b      	lsls	r3, r3, #4
 80225fe:	4a0f      	ldr	r2, [pc, #60]	; (802263c <W25qxx_Init+0x19c>)
 8022600:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8022602:	4b0e      	ldr	r3, [pc, #56]	; (802263c <W25qxx_Init+0x19c>)
 8022604:	695b      	ldr	r3, [r3, #20]
 8022606:	4a0d      	ldr	r2, [pc, #52]	; (802263c <W25qxx_Init+0x19c>)
 8022608:	6912      	ldr	r2, [r2, #16]
 802260a:	fb02 f303 	mul.w	r3, r2, r3
 802260e:	0a9b      	lsrs	r3, r3, #10
 8022610:	4a0a      	ldr	r2, [pc, #40]	; (802263c <W25qxx_Init+0x19c>)
 8022612:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8022614:	f7ff fe88 	bl	8022328 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8022618:	2001      	movs	r0, #1
 802261a:	f7ff fed1 	bl	80223c0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 802261e:	2002      	movs	r0, #2
 8022620:	f7ff fece 	bl	80223c0 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8022624:	2003      	movs	r0, #3
 8022626:	f7ff fecb 	bl	80223c0 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 802262a:	4b04      	ldr	r3, [pc, #16]	; (802263c <W25qxx_Init+0x19c>)
 802262c:	2200      	movs	r2, #0
 802262e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8022632:	2301      	movs	r3, #1
}
 8022634:	4618      	mov	r0, r3
 8022636:	3708      	adds	r7, #8
 8022638:	46bd      	mov	sp, r7
 802263a:	bd80      	pop	{r7, pc}
 802263c:	20016334 	.word	0x20016334
 8022640:	40021000 	.word	0x40021000

08022644 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 8022644:	b580      	push	{r7, lr}
 8022646:	b082      	sub	sp, #8
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 802264c:	e002      	b.n	8022654 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 802264e:	2001      	movs	r0, #1
 8022650:	f7e7 f914 	bl	800987c <osDelay>
	while (w25qxx.Lock == 1)
 8022654:	4b26      	ldr	r3, [pc, #152]	; (80226f0 <W25qxx_EraseSector+0xac>)
 8022656:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 802265a:	2b01      	cmp	r3, #1
 802265c:	d0f7      	beq.n	802264e <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 802265e:	4b24      	ldr	r3, [pc, #144]	; (80226f0 <W25qxx_EraseSector+0xac>)
 8022660:	2201      	movs	r2, #1
 8022662:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8022666:	f7ff fef1 	bl	802244c <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 802266a:	4b21      	ldr	r3, [pc, #132]	; (80226f0 <W25qxx_EraseSector+0xac>)
 802266c:	691a      	ldr	r2, [r3, #16]
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	fb02 f303 	mul.w	r3, r2, r3
 8022674:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8022676:	f7ff fe8d 	bl	8022394 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802267a:	2200      	movs	r2, #0
 802267c:	2108      	movs	r1, #8
 802267e:	481d      	ldr	r0, [pc, #116]	; (80226f4 <W25qxx_EraseSector+0xb0>)
 8022680:	f7e3 f9ce 	bl	8005a20 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 8022684:	4b1a      	ldr	r3, [pc, #104]	; (80226f0 <W25qxx_EraseSector+0xac>)
 8022686:	781b      	ldrb	r3, [r3, #0]
 8022688:	2b08      	cmp	r3, #8
 802268a:	d909      	bls.n	80226a0 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 802268c:	2021      	movs	r0, #33	; 0x21
 802268e:	f7ff fdff 	bl	8022290 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8022692:	687b      	ldr	r3, [r7, #4]
 8022694:	0e1b      	lsrs	r3, r3, #24
 8022696:	b2db      	uxtb	r3, r3
 8022698:	4618      	mov	r0, r3
 802269a:	f7ff fdf9 	bl	8022290 <W25qxx_Spi>
 802269e:	e002      	b.n	80226a6 <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 80226a0:	2020      	movs	r0, #32
 80226a2:	f7ff fdf5 	bl	8022290 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	0c1b      	lsrs	r3, r3, #16
 80226aa:	b2db      	uxtb	r3, r3
 80226ac:	4618      	mov	r0, r3
 80226ae:	f7ff fdef 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 80226b2:	687b      	ldr	r3, [r7, #4]
 80226b4:	0a1b      	lsrs	r3, r3, #8
 80226b6:	b2db      	uxtb	r3, r3
 80226b8:	4618      	mov	r0, r3
 80226ba:	f7ff fde9 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	b2db      	uxtb	r3, r3
 80226c2:	4618      	mov	r0, r3
 80226c4:	f7ff fde4 	bl	8022290 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80226c8:	2201      	movs	r2, #1
 80226ca:	2108      	movs	r1, #8
 80226cc:	4809      	ldr	r0, [pc, #36]	; (80226f4 <W25qxx_EraseSector+0xb0>)
 80226ce:	f7e3 f9a7 	bl	8005a20 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 80226d2:	f7ff febb 	bl	802244c <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 80226d6:	2001      	movs	r0, #1
 80226d8:	f7e7 f8d0 	bl	800987c <osDelay>
	w25qxx.Lock = 0;
 80226dc:	4b04      	ldr	r3, [pc, #16]	; (80226f0 <W25qxx_EraseSector+0xac>)
 80226de:	2200      	movs	r2, #0
 80226e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 80226e4:	bf00      	nop
 80226e6:	4618      	mov	r0, r3
 80226e8:	3708      	adds	r7, #8
 80226ea:	46bd      	mov	sp, r7
 80226ec:	bd80      	pop	{r7, pc}
 80226ee:	bf00      	nop
 80226f0:	20016334 	.word	0x20016334
 80226f4:	40021000 	.word	0x40021000

080226f8 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 80226f8:	b480      	push	{r7}
 80226fa:	b083      	sub	sp, #12
 80226fc:	af00      	add	r7, sp, #0
 80226fe:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8022700:	4b07      	ldr	r3, [pc, #28]	; (8022720 <W25qxx_SectorToPage+0x28>)
 8022702:	691b      	ldr	r3, [r3, #16]
 8022704:	687a      	ldr	r2, [r7, #4]
 8022706:	fb02 f303 	mul.w	r3, r2, r3
 802270a:	4a05      	ldr	r2, [pc, #20]	; (8022720 <W25qxx_SectorToPage+0x28>)
 802270c:	8952      	ldrh	r2, [r2, #10]
 802270e:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8022712:	4618      	mov	r0, r3
 8022714:	370c      	adds	r7, #12
 8022716:	46bd      	mov	sp, r7
 8022718:	f85d 7b04 	ldr.w	r7, [sp], #4
 802271c:	4770      	bx	lr
 802271e:	bf00      	nop
 8022720:	20016334 	.word	0x20016334

08022724 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8022724:	b580      	push	{r7, lr}
 8022726:	b084      	sub	sp, #16
 8022728:	af00      	add	r7, sp, #0
 802272a:	60f8      	str	r0, [r7, #12]
 802272c:	60b9      	str	r1, [r7, #8]
 802272e:	607a      	str	r2, [r7, #4]
 8022730:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8022732:	e002      	b.n	802273a <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8022734:	2001      	movs	r0, #1
 8022736:	f7e7 f8a1 	bl	800987c <osDelay>
	while (w25qxx.Lock == 1)
 802273a:	4b39      	ldr	r3, [pc, #228]	; (8022820 <W25qxx_WritePage+0xfc>)
 802273c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8022740:	2b01      	cmp	r3, #1
 8022742:	d0f7      	beq.n	8022734 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8022744:	4b36      	ldr	r3, [pc, #216]	; (8022820 <W25qxx_WritePage+0xfc>)
 8022746:	2201      	movs	r2, #1
 8022748:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 802274c:	683a      	ldr	r2, [r7, #0]
 802274e:	687b      	ldr	r3, [r7, #4]
 8022750:	4413      	add	r3, r2
 8022752:	4a33      	ldr	r2, [pc, #204]	; (8022820 <W25qxx_WritePage+0xfc>)
 8022754:	8952      	ldrh	r2, [r2, #10]
 8022756:	4293      	cmp	r3, r2
 8022758:	d802      	bhi.n	8022760 <W25qxx_WritePage+0x3c>
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d105      	bne.n	802276c <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8022760:	4b2f      	ldr	r3, [pc, #188]	; (8022820 <W25qxx_WritePage+0xfc>)
 8022762:	895b      	ldrh	r3, [r3, #10]
 8022764:	461a      	mov	r2, r3
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	1ad3      	subs	r3, r2, r3
 802276a:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 802276c:	687a      	ldr	r2, [r7, #4]
 802276e:	683b      	ldr	r3, [r7, #0]
 8022770:	4413      	add	r3, r2
 8022772:	4a2b      	ldr	r2, [pc, #172]	; (8022820 <W25qxx_WritePage+0xfc>)
 8022774:	8952      	ldrh	r2, [r2, #10]
 8022776:	4293      	cmp	r3, r2
 8022778:	d905      	bls.n	8022786 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 802277a:	4b29      	ldr	r3, [pc, #164]	; (8022820 <W25qxx_WritePage+0xfc>)
 802277c:	895b      	ldrh	r3, [r3, #10]
 802277e:	461a      	mov	r2, r3
 8022780:	687b      	ldr	r3, [r7, #4]
 8022782:	1ad3      	subs	r3, r2, r3
 8022784:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 8022786:	f7ff fe61 	bl	802244c <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 802278a:	f7ff fe03 	bl	8022394 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802278e:	2200      	movs	r2, #0
 8022790:	2108      	movs	r1, #8
 8022792:	4824      	ldr	r0, [pc, #144]	; (8022824 <W25qxx_WritePage+0x100>)
 8022794:	f7e3 f944 	bl	8005a20 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8022798:	4b21      	ldr	r3, [pc, #132]	; (8022820 <W25qxx_WritePage+0xfc>)
 802279a:	895b      	ldrh	r3, [r3, #10]
 802279c:	461a      	mov	r2, r3
 802279e:	68bb      	ldr	r3, [r7, #8]
 80227a0:	fb02 f303 	mul.w	r3, r2, r3
 80227a4:	687a      	ldr	r2, [r7, #4]
 80227a6:	4413      	add	r3, r2
 80227a8:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 80227aa:	4b1d      	ldr	r3, [pc, #116]	; (8022820 <W25qxx_WritePage+0xfc>)
 80227ac:	781b      	ldrb	r3, [r3, #0]
 80227ae:	2b08      	cmp	r3, #8
 80227b0:	d909      	bls.n	80227c6 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 80227b2:	2012      	movs	r0, #18
 80227b4:	f7ff fd6c 	bl	8022290 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 80227b8:	68bb      	ldr	r3, [r7, #8]
 80227ba:	0e1b      	lsrs	r3, r3, #24
 80227bc:	b2db      	uxtb	r3, r3
 80227be:	4618      	mov	r0, r3
 80227c0:	f7ff fd66 	bl	8022290 <W25qxx_Spi>
 80227c4:	e002      	b.n	80227cc <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 80227c6:	2002      	movs	r0, #2
 80227c8:	f7ff fd62 	bl	8022290 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 80227cc:	68bb      	ldr	r3, [r7, #8]
 80227ce:	0c1b      	lsrs	r3, r3, #16
 80227d0:	b2db      	uxtb	r3, r3
 80227d2:	4618      	mov	r0, r3
 80227d4:	f7ff fd5c 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 80227d8:	68bb      	ldr	r3, [r7, #8]
 80227da:	0a1b      	lsrs	r3, r3, #8
 80227dc:	b2db      	uxtb	r3, r3
 80227de:	4618      	mov	r0, r3
 80227e0:	f7ff fd56 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80227e4:	68bb      	ldr	r3, [r7, #8]
 80227e6:	b2db      	uxtb	r3, r3
 80227e8:	4618      	mov	r0, r3
 80227ea:	f7ff fd51 	bl	8022290 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 80227ee:	683b      	ldr	r3, [r7, #0]
 80227f0:	b29a      	uxth	r2, r3
 80227f2:	2364      	movs	r3, #100	; 0x64
 80227f4:	68f9      	ldr	r1, [r7, #12]
 80227f6:	480c      	ldr	r0, [pc, #48]	; (8022828 <W25qxx_WritePage+0x104>)
 80227f8:	f7e4 fdb9 	bl	800736e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80227fc:	2201      	movs	r2, #1
 80227fe:	2108      	movs	r1, #8
 8022800:	4808      	ldr	r0, [pc, #32]	; (8022824 <W25qxx_WritePage+0x100>)
 8022802:	f7e3 f90d 	bl	8005a20 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8022806:	f7ff fe21 	bl	802244c <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 802280a:	2001      	movs	r0, #1
 802280c:	f7e7 f836 	bl	800987c <osDelay>
	w25qxx.Lock = 0;
 8022810:	4b03      	ldr	r3, [pc, #12]	; (8022820 <W25qxx_WritePage+0xfc>)
 8022812:	2200      	movs	r2, #0
 8022814:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8022818:	bf00      	nop
 802281a:	3710      	adds	r7, #16
 802281c:	46bd      	mov	sp, r7
 802281e:	bd80      	pop	{r7, pc}
 8022820:	20016334 	.word	0x20016334
 8022824:	40021000 	.word	0x40021000
 8022828:	20001f68 	.word	0x20001f68

0802282c <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 802282c:	b580      	push	{r7, lr}
 802282e:	b088      	sub	sp, #32
 8022830:	af00      	add	r7, sp, #0
 8022832:	60f8      	str	r0, [r7, #12]
 8022834:	60b9      	str	r1, [r7, #8]
 8022836:	607a      	str	r2, [r7, #4]
 8022838:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 802283a:	4b2d      	ldr	r3, [pc, #180]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 802283c:	691b      	ldr	r3, [r3, #16]
 802283e:	683a      	ldr	r2, [r7, #0]
 8022840:	429a      	cmp	r2, r3
 8022842:	d802      	bhi.n	802284a <W25qxx_WriteSector+0x1e>
 8022844:	683b      	ldr	r3, [r7, #0]
 8022846:	2b00      	cmp	r3, #0
 8022848:	d102      	bne.n	8022850 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 802284a:	4b29      	ldr	r3, [pc, #164]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 802284c:	691b      	ldr	r3, [r3, #16]
 802284e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8022850:	4b27      	ldr	r3, [pc, #156]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 8022852:	691b      	ldr	r3, [r3, #16]
 8022854:	687a      	ldr	r2, [r7, #4]
 8022856:	429a      	cmp	r2, r3
 8022858:	d301      	bcc.n	802285e <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 802285a:	2300      	movs	r3, #0
 802285c:	e043      	b.n	80228e6 <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 802285e:	687a      	ldr	r2, [r7, #4]
 8022860:	683b      	ldr	r3, [r7, #0]
 8022862:	441a      	add	r2, r3
 8022864:	4b22      	ldr	r3, [pc, #136]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 8022866:	691b      	ldr	r3, [r3, #16]
 8022868:	429a      	cmp	r2, r3
 802286a:	d905      	bls.n	8022878 <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 802286c:	4b20      	ldr	r3, [pc, #128]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 802286e:	691a      	ldr	r2, [r3, #16]
 8022870:	687b      	ldr	r3, [r7, #4]
 8022872:	1ad3      	subs	r3, r2, r3
 8022874:	61bb      	str	r3, [r7, #24]
 8022876:	e001      	b.n	802287c <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8022878:	683b      	ldr	r3, [r7, #0]
 802287a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 802287c:	68b8      	ldr	r0, [r7, #8]
 802287e:	f7ff ff3b 	bl	80226f8 <W25qxx_SectorToPage>
 8022882:	4602      	mov	r2, r0
 8022884:	4b1a      	ldr	r3, [pc, #104]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 8022886:	895b      	ldrh	r3, [r3, #10]
 8022888:	4619      	mov	r1, r3
 802288a:	687b      	ldr	r3, [r7, #4]
 802288c:	fbb3 f3f1 	udiv	r3, r3, r1
 8022890:	4413      	add	r3, r2
 8022892:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8022894:	4b16      	ldr	r3, [pc, #88]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 8022896:	895b      	ldrh	r3, [r3, #10]
 8022898:	461a      	mov	r2, r3
 802289a:	687b      	ldr	r3, [r7, #4]
 802289c:	fbb3 f1f2 	udiv	r1, r3, r2
 80228a0:	fb01 f202 	mul.w	r2, r1, r2
 80228a4:	1a9b      	subs	r3, r3, r2
 80228a6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 80228a8:	69bb      	ldr	r3, [r7, #24]
 80228aa:	697a      	ldr	r2, [r7, #20]
 80228ac:	69f9      	ldr	r1, [r7, #28]
 80228ae:	68f8      	ldr	r0, [r7, #12]
 80228b0:	f7ff ff38 	bl	8022724 <W25qxx_WritePage>
		StartPage++;
 80228b4:	69fb      	ldr	r3, [r7, #28]
 80228b6:	3301      	adds	r3, #1
 80228b8:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 80228ba:	4b0d      	ldr	r3, [pc, #52]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 80228bc:	895b      	ldrh	r3, [r3, #10]
 80228be:	461a      	mov	r2, r3
 80228c0:	697b      	ldr	r3, [r7, #20]
 80228c2:	1a9a      	subs	r2, r3, r2
 80228c4:	69bb      	ldr	r3, [r7, #24]
 80228c6:	4413      	add	r3, r2
 80228c8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 80228ca:	4b09      	ldr	r3, [pc, #36]	; (80228f0 <W25qxx_WriteSector+0xc4>)
 80228cc:	895b      	ldrh	r3, [r3, #10]
 80228ce:	461a      	mov	r2, r3
 80228d0:	697b      	ldr	r3, [r7, #20]
 80228d2:	1ad3      	subs	r3, r2, r3
 80228d4:	68fa      	ldr	r2, [r7, #12]
 80228d6:	4413      	add	r3, r2
 80228d8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 80228da:	2300      	movs	r3, #0
 80228dc:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 80228de:	69bb      	ldr	r3, [r7, #24]
 80228e0:	2b00      	cmp	r3, #0
 80228e2:	dce1      	bgt.n	80228a8 <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 80228e4:	2301      	movs	r3, #1

}
 80228e6:	4618      	mov	r0, r3
 80228e8:	3720      	adds	r7, #32
 80228ea:	46bd      	mov	sp, r7
 80228ec:	bd80      	pop	{r7, pc}
 80228ee:	bf00      	nop
 80228f0:	20016334 	.word	0x20016334

080228f4 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 80228f4:	b580      	push	{r7, lr}
 80228f6:	b084      	sub	sp, #16
 80228f8:	af00      	add	r7, sp, #0
 80228fa:	60f8      	str	r0, [r7, #12]
 80228fc:	60b9      	str	r1, [r7, #8]
 80228fe:	607a      	str	r2, [r7, #4]
 8022900:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8022902:	e002      	b.n	802290a <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8022904:	2001      	movs	r0, #1
 8022906:	f7e6 ffb9 	bl	800987c <osDelay>
	while (w25qxx.Lock == 1)
 802290a:	4b36      	ldr	r3, [pc, #216]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 802290c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8022910:	2b01      	cmp	r3, #1
 8022912:	d0f7      	beq.n	8022904 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8022914:	4b33      	ldr	r3, [pc, #204]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 8022916:	2201      	movs	r2, #1
 8022918:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 802291c:	4b31      	ldr	r3, [pc, #196]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 802291e:	895b      	ldrh	r3, [r3, #10]
 8022920:	461a      	mov	r2, r3
 8022922:	683b      	ldr	r3, [r7, #0]
 8022924:	4293      	cmp	r3, r2
 8022926:	d802      	bhi.n	802292e <W25qxx_ReadPage+0x3a>
 8022928:	683b      	ldr	r3, [r7, #0]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d102      	bne.n	8022934 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 802292e:	4b2d      	ldr	r3, [pc, #180]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 8022930:	895b      	ldrh	r3, [r3, #10]
 8022932:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8022934:	687a      	ldr	r2, [r7, #4]
 8022936:	683b      	ldr	r3, [r7, #0]
 8022938:	4413      	add	r3, r2
 802293a:	4a2a      	ldr	r2, [pc, #168]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 802293c:	8952      	ldrh	r2, [r2, #10]
 802293e:	4293      	cmp	r3, r2
 8022940:	d905      	bls.n	802294e <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8022942:	4b28      	ldr	r3, [pc, #160]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 8022944:	895b      	ldrh	r3, [r3, #10]
 8022946:	461a      	mov	r2, r3
 8022948:	687b      	ldr	r3, [r7, #4]
 802294a:	1ad3      	subs	r3, r2, r3
 802294c:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 802294e:	4b25      	ldr	r3, [pc, #148]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 8022950:	895b      	ldrh	r3, [r3, #10]
 8022952:	461a      	mov	r2, r3
 8022954:	68bb      	ldr	r3, [r7, #8]
 8022956:	fb02 f303 	mul.w	r3, r2, r3
 802295a:	687a      	ldr	r2, [r7, #4]
 802295c:	4413      	add	r3, r2
 802295e:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8022960:	2200      	movs	r2, #0
 8022962:	2108      	movs	r1, #8
 8022964:	4820      	ldr	r0, [pc, #128]	; (80229e8 <W25qxx_ReadPage+0xf4>)
 8022966:	f7e3 f85b 	bl	8005a20 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 802296a:	4b1e      	ldr	r3, [pc, #120]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 802296c:	781b      	ldrb	r3, [r3, #0]
 802296e:	2b08      	cmp	r3, #8
 8022970:	d909      	bls.n	8022986 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8022972:	200c      	movs	r0, #12
 8022974:	f7ff fc8c 	bl	8022290 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8022978:	68bb      	ldr	r3, [r7, #8]
 802297a:	0e1b      	lsrs	r3, r3, #24
 802297c:	b2db      	uxtb	r3, r3
 802297e:	4618      	mov	r0, r3
 8022980:	f7ff fc86 	bl	8022290 <W25qxx_Spi>
 8022984:	e002      	b.n	802298c <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8022986:	200b      	movs	r0, #11
 8022988:	f7ff fc82 	bl	8022290 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 802298c:	68bb      	ldr	r3, [r7, #8]
 802298e:	0c1b      	lsrs	r3, r3, #16
 8022990:	b2db      	uxtb	r3, r3
 8022992:	4618      	mov	r0, r3
 8022994:	f7ff fc7c 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8022998:	68bb      	ldr	r3, [r7, #8]
 802299a:	0a1b      	lsrs	r3, r3, #8
 802299c:	b2db      	uxtb	r3, r3
 802299e:	4618      	mov	r0, r3
 80229a0:	f7ff fc76 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 80229a4:	68bb      	ldr	r3, [r7, #8]
 80229a6:	b2db      	uxtb	r3, r3
 80229a8:	4618      	mov	r0, r3
 80229aa:	f7ff fc71 	bl	8022290 <W25qxx_Spi>
	W25qxx_Spi(0);
 80229ae:	2000      	movs	r0, #0
 80229b0:	f7ff fc6e 	bl	8022290 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 80229b4:	683b      	ldr	r3, [r7, #0]
 80229b6:	b29a      	uxth	r2, r3
 80229b8:	2364      	movs	r3, #100	; 0x64
 80229ba:	68f9      	ldr	r1, [r7, #12]
 80229bc:	480b      	ldr	r0, [pc, #44]	; (80229ec <W25qxx_ReadPage+0xf8>)
 80229be:	f7e4 fe19 	bl	80075f4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80229c2:	2201      	movs	r2, #1
 80229c4:	2108      	movs	r1, #8
 80229c6:	4808      	ldr	r0, [pc, #32]	; (80229e8 <W25qxx_ReadPage+0xf4>)
 80229c8:	f7e3 f82a 	bl	8005a20 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 80229cc:	2001      	movs	r0, #1
 80229ce:	f7e6 ff55 	bl	800987c <osDelay>
	w25qxx.Lock = 0;
 80229d2:	4b04      	ldr	r3, [pc, #16]	; (80229e4 <W25qxx_ReadPage+0xf0>)
 80229d4:	2200      	movs	r2, #0
 80229d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80229da:	bf00      	nop
 80229dc:	3710      	adds	r7, #16
 80229de:	46bd      	mov	sp, r7
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	20016334 	.word	0x20016334
 80229e8:	40021000 	.word	0x40021000
 80229ec:	20001f68 	.word	0x20001f68

080229f0 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 80229f0:	b580      	push	{r7, lr}
 80229f2:	b088      	sub	sp, #32
 80229f4:	af00      	add	r7, sp, #0
 80229f6:	60f8      	str	r0, [r7, #12]
 80229f8:	60b9      	str	r1, [r7, #8]
 80229fa:	607a      	str	r2, [r7, #4]
 80229fc:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 80229fe:	4b2d      	ldr	r3, [pc, #180]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a00:	691b      	ldr	r3, [r3, #16]
 8022a02:	683a      	ldr	r2, [r7, #0]
 8022a04:	429a      	cmp	r2, r3
 8022a06:	d802      	bhi.n	8022a0e <W25qxx_ReadSector+0x1e>
 8022a08:	683b      	ldr	r3, [r7, #0]
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d102      	bne.n	8022a14 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8022a0e:	4b29      	ldr	r3, [pc, #164]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a10:	691b      	ldr	r3, [r3, #16]
 8022a12:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8022a14:	4b27      	ldr	r3, [pc, #156]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a16:	691b      	ldr	r3, [r3, #16]
 8022a18:	687a      	ldr	r2, [r7, #4]
 8022a1a:	429a      	cmp	r2, r3
 8022a1c:	d301      	bcc.n	8022a22 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 8022a1e:	2300      	movs	r3, #0
 8022a20:	e043      	b.n	8022aaa <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8022a22:	687a      	ldr	r2, [r7, #4]
 8022a24:	683b      	ldr	r3, [r7, #0]
 8022a26:	441a      	add	r2, r3
 8022a28:	4b22      	ldr	r3, [pc, #136]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a2a:	691b      	ldr	r3, [r3, #16]
 8022a2c:	429a      	cmp	r2, r3
 8022a2e:	d905      	bls.n	8022a3c <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8022a30:	4b20      	ldr	r3, [pc, #128]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a32:	691a      	ldr	r2, [r3, #16]
 8022a34:	687b      	ldr	r3, [r7, #4]
 8022a36:	1ad3      	subs	r3, r2, r3
 8022a38:	61bb      	str	r3, [r7, #24]
 8022a3a:	e001      	b.n	8022a40 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8022a3c:	683b      	ldr	r3, [r7, #0]
 8022a3e:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8022a40:	68b8      	ldr	r0, [r7, #8]
 8022a42:	f7ff fe59 	bl	80226f8 <W25qxx_SectorToPage>
 8022a46:	4602      	mov	r2, r0
 8022a48:	4b1a      	ldr	r3, [pc, #104]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a4a:	895b      	ldrh	r3, [r3, #10]
 8022a4c:	4619      	mov	r1, r3
 8022a4e:	687b      	ldr	r3, [r7, #4]
 8022a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8022a54:	4413      	add	r3, r2
 8022a56:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8022a58:	4b16      	ldr	r3, [pc, #88]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a5a:	895b      	ldrh	r3, [r3, #10]
 8022a5c:	461a      	mov	r2, r3
 8022a5e:	687b      	ldr	r3, [r7, #4]
 8022a60:	fbb3 f1f2 	udiv	r1, r3, r2
 8022a64:	fb01 f202 	mul.w	r2, r1, r2
 8022a68:	1a9b      	subs	r3, r3, r2
 8022a6a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8022a6c:	69bb      	ldr	r3, [r7, #24]
 8022a6e:	697a      	ldr	r2, [r7, #20]
 8022a70:	69f9      	ldr	r1, [r7, #28]
 8022a72:	68f8      	ldr	r0, [r7, #12]
 8022a74:	f7ff ff3e 	bl	80228f4 <W25qxx_ReadPage>
		StartPage++;
 8022a78:	69fb      	ldr	r3, [r7, #28]
 8022a7a:	3301      	adds	r3, #1
 8022a7c:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8022a7e:	4b0d      	ldr	r3, [pc, #52]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a80:	895b      	ldrh	r3, [r3, #10]
 8022a82:	461a      	mov	r2, r3
 8022a84:	697b      	ldr	r3, [r7, #20]
 8022a86:	1a9a      	subs	r2, r3, r2
 8022a88:	69bb      	ldr	r3, [r7, #24]
 8022a8a:	4413      	add	r3, r2
 8022a8c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8022a8e:	4b09      	ldr	r3, [pc, #36]	; (8022ab4 <W25qxx_ReadSector+0xc4>)
 8022a90:	895b      	ldrh	r3, [r3, #10]
 8022a92:	461a      	mov	r2, r3
 8022a94:	697b      	ldr	r3, [r7, #20]
 8022a96:	1ad3      	subs	r3, r2, r3
 8022a98:	68fa      	ldr	r2, [r7, #12]
 8022a9a:	4413      	add	r3, r2
 8022a9c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8022aa2:	69bb      	ldr	r3, [r7, #24]
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	dce1      	bgt.n	8022a6c <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 8022aa8:	2301      	movs	r3, #1
}
 8022aaa:	4618      	mov	r0, r3
 8022aac:	3720      	adds	r7, #32
 8022aae:	46bd      	mov	sp, r7
 8022ab0:	bd80      	pop	{r7, pc}
 8022ab2:	bf00      	nop
 8022ab4:	20016334 	.word	0x20016334

08022ab8 <__assert_func>:
 8022ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022aba:	4614      	mov	r4, r2
 8022abc:	461a      	mov	r2, r3
 8022abe:	4b09      	ldr	r3, [pc, #36]	; (8022ae4 <__assert_func+0x2c>)
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	4605      	mov	r5, r0
 8022ac4:	68d8      	ldr	r0, [r3, #12]
 8022ac6:	b14c      	cbz	r4, 8022adc <__assert_func+0x24>
 8022ac8:	4b07      	ldr	r3, [pc, #28]	; (8022ae8 <__assert_func+0x30>)
 8022aca:	9100      	str	r1, [sp, #0]
 8022acc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022ad0:	4906      	ldr	r1, [pc, #24]	; (8022aec <__assert_func+0x34>)
 8022ad2:	462b      	mov	r3, r5
 8022ad4:	f000 fe96 	bl	8023804 <fiprintf>
 8022ad8:	f002 f9f5 	bl	8024ec6 <abort>
 8022adc:	4b04      	ldr	r3, [pc, #16]	; (8022af0 <__assert_func+0x38>)
 8022ade:	461c      	mov	r4, r3
 8022ae0:	e7f3      	b.n	8022aca <__assert_func+0x12>
 8022ae2:	bf00      	nop
 8022ae4:	200000a0 	.word	0x200000a0
 8022ae8:	0802c7f0 	.word	0x0802c7f0
 8022aec:	0802c7fd 	.word	0x0802c7fd
 8022af0:	0802c82b 	.word	0x0802c82b

08022af4 <malloc>:
 8022af4:	4b02      	ldr	r3, [pc, #8]	; (8022b00 <malloc+0xc>)
 8022af6:	4601      	mov	r1, r0
 8022af8:	6818      	ldr	r0, [r3, #0]
 8022afa:	f000 b82b 	b.w	8022b54 <_malloc_r>
 8022afe:	bf00      	nop
 8022b00:	200000a0 	.word	0x200000a0

08022b04 <free>:
 8022b04:	4b02      	ldr	r3, [pc, #8]	; (8022b10 <free+0xc>)
 8022b06:	4601      	mov	r1, r0
 8022b08:	6818      	ldr	r0, [r3, #0]
 8022b0a:	f003 b863 	b.w	8025bd4 <_free_r>
 8022b0e:	bf00      	nop
 8022b10:	200000a0 	.word	0x200000a0

08022b14 <sbrk_aligned>:
 8022b14:	b570      	push	{r4, r5, r6, lr}
 8022b16:	4e0e      	ldr	r6, [pc, #56]	; (8022b50 <sbrk_aligned+0x3c>)
 8022b18:	460c      	mov	r4, r1
 8022b1a:	6831      	ldr	r1, [r6, #0]
 8022b1c:	4605      	mov	r5, r0
 8022b1e:	b911      	cbnz	r1, 8022b26 <sbrk_aligned+0x12>
 8022b20:	f002 f96a 	bl	8024df8 <_sbrk_r>
 8022b24:	6030      	str	r0, [r6, #0]
 8022b26:	4621      	mov	r1, r4
 8022b28:	4628      	mov	r0, r5
 8022b2a:	f002 f965 	bl	8024df8 <_sbrk_r>
 8022b2e:	1c43      	adds	r3, r0, #1
 8022b30:	d00a      	beq.n	8022b48 <sbrk_aligned+0x34>
 8022b32:	1cc4      	adds	r4, r0, #3
 8022b34:	f024 0403 	bic.w	r4, r4, #3
 8022b38:	42a0      	cmp	r0, r4
 8022b3a:	d007      	beq.n	8022b4c <sbrk_aligned+0x38>
 8022b3c:	1a21      	subs	r1, r4, r0
 8022b3e:	4628      	mov	r0, r5
 8022b40:	f002 f95a 	bl	8024df8 <_sbrk_r>
 8022b44:	3001      	adds	r0, #1
 8022b46:	d101      	bne.n	8022b4c <sbrk_aligned+0x38>
 8022b48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022b4c:	4620      	mov	r0, r4
 8022b4e:	bd70      	pop	{r4, r5, r6, pc}
 8022b50:	20016360 	.word	0x20016360

08022b54 <_malloc_r>:
 8022b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b58:	1ccd      	adds	r5, r1, #3
 8022b5a:	f025 0503 	bic.w	r5, r5, #3
 8022b5e:	3508      	adds	r5, #8
 8022b60:	2d0c      	cmp	r5, #12
 8022b62:	bf38      	it	cc
 8022b64:	250c      	movcc	r5, #12
 8022b66:	2d00      	cmp	r5, #0
 8022b68:	4607      	mov	r7, r0
 8022b6a:	db01      	blt.n	8022b70 <_malloc_r+0x1c>
 8022b6c:	42a9      	cmp	r1, r5
 8022b6e:	d905      	bls.n	8022b7c <_malloc_r+0x28>
 8022b70:	230c      	movs	r3, #12
 8022b72:	603b      	str	r3, [r7, #0]
 8022b74:	2600      	movs	r6, #0
 8022b76:	4630      	mov	r0, r6
 8022b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022c50 <_malloc_r+0xfc>
 8022b80:	f000 f868 	bl	8022c54 <__malloc_lock>
 8022b84:	f8d8 3000 	ldr.w	r3, [r8]
 8022b88:	461c      	mov	r4, r3
 8022b8a:	bb5c      	cbnz	r4, 8022be4 <_malloc_r+0x90>
 8022b8c:	4629      	mov	r1, r5
 8022b8e:	4638      	mov	r0, r7
 8022b90:	f7ff ffc0 	bl	8022b14 <sbrk_aligned>
 8022b94:	1c43      	adds	r3, r0, #1
 8022b96:	4604      	mov	r4, r0
 8022b98:	d155      	bne.n	8022c46 <_malloc_r+0xf2>
 8022b9a:	f8d8 4000 	ldr.w	r4, [r8]
 8022b9e:	4626      	mov	r6, r4
 8022ba0:	2e00      	cmp	r6, #0
 8022ba2:	d145      	bne.n	8022c30 <_malloc_r+0xdc>
 8022ba4:	2c00      	cmp	r4, #0
 8022ba6:	d048      	beq.n	8022c3a <_malloc_r+0xe6>
 8022ba8:	6823      	ldr	r3, [r4, #0]
 8022baa:	4631      	mov	r1, r6
 8022bac:	4638      	mov	r0, r7
 8022bae:	eb04 0903 	add.w	r9, r4, r3
 8022bb2:	f002 f921 	bl	8024df8 <_sbrk_r>
 8022bb6:	4581      	cmp	r9, r0
 8022bb8:	d13f      	bne.n	8022c3a <_malloc_r+0xe6>
 8022bba:	6821      	ldr	r1, [r4, #0]
 8022bbc:	1a6d      	subs	r5, r5, r1
 8022bbe:	4629      	mov	r1, r5
 8022bc0:	4638      	mov	r0, r7
 8022bc2:	f7ff ffa7 	bl	8022b14 <sbrk_aligned>
 8022bc6:	3001      	adds	r0, #1
 8022bc8:	d037      	beq.n	8022c3a <_malloc_r+0xe6>
 8022bca:	6823      	ldr	r3, [r4, #0]
 8022bcc:	442b      	add	r3, r5
 8022bce:	6023      	str	r3, [r4, #0]
 8022bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d038      	beq.n	8022c4a <_malloc_r+0xf6>
 8022bd8:	685a      	ldr	r2, [r3, #4]
 8022bda:	42a2      	cmp	r2, r4
 8022bdc:	d12b      	bne.n	8022c36 <_malloc_r+0xe2>
 8022bde:	2200      	movs	r2, #0
 8022be0:	605a      	str	r2, [r3, #4]
 8022be2:	e00f      	b.n	8022c04 <_malloc_r+0xb0>
 8022be4:	6822      	ldr	r2, [r4, #0]
 8022be6:	1b52      	subs	r2, r2, r5
 8022be8:	d41f      	bmi.n	8022c2a <_malloc_r+0xd6>
 8022bea:	2a0b      	cmp	r2, #11
 8022bec:	d917      	bls.n	8022c1e <_malloc_r+0xca>
 8022bee:	1961      	adds	r1, r4, r5
 8022bf0:	42a3      	cmp	r3, r4
 8022bf2:	6025      	str	r5, [r4, #0]
 8022bf4:	bf18      	it	ne
 8022bf6:	6059      	strne	r1, [r3, #4]
 8022bf8:	6863      	ldr	r3, [r4, #4]
 8022bfa:	bf08      	it	eq
 8022bfc:	f8c8 1000 	streq.w	r1, [r8]
 8022c00:	5162      	str	r2, [r4, r5]
 8022c02:	604b      	str	r3, [r1, #4]
 8022c04:	4638      	mov	r0, r7
 8022c06:	f104 060b 	add.w	r6, r4, #11
 8022c0a:	f000 f829 	bl	8022c60 <__malloc_unlock>
 8022c0e:	f026 0607 	bic.w	r6, r6, #7
 8022c12:	1d23      	adds	r3, r4, #4
 8022c14:	1af2      	subs	r2, r6, r3
 8022c16:	d0ae      	beq.n	8022b76 <_malloc_r+0x22>
 8022c18:	1b9b      	subs	r3, r3, r6
 8022c1a:	50a3      	str	r3, [r4, r2]
 8022c1c:	e7ab      	b.n	8022b76 <_malloc_r+0x22>
 8022c1e:	42a3      	cmp	r3, r4
 8022c20:	6862      	ldr	r2, [r4, #4]
 8022c22:	d1dd      	bne.n	8022be0 <_malloc_r+0x8c>
 8022c24:	f8c8 2000 	str.w	r2, [r8]
 8022c28:	e7ec      	b.n	8022c04 <_malloc_r+0xb0>
 8022c2a:	4623      	mov	r3, r4
 8022c2c:	6864      	ldr	r4, [r4, #4]
 8022c2e:	e7ac      	b.n	8022b8a <_malloc_r+0x36>
 8022c30:	4634      	mov	r4, r6
 8022c32:	6876      	ldr	r6, [r6, #4]
 8022c34:	e7b4      	b.n	8022ba0 <_malloc_r+0x4c>
 8022c36:	4613      	mov	r3, r2
 8022c38:	e7cc      	b.n	8022bd4 <_malloc_r+0x80>
 8022c3a:	230c      	movs	r3, #12
 8022c3c:	603b      	str	r3, [r7, #0]
 8022c3e:	4638      	mov	r0, r7
 8022c40:	f000 f80e 	bl	8022c60 <__malloc_unlock>
 8022c44:	e797      	b.n	8022b76 <_malloc_r+0x22>
 8022c46:	6025      	str	r5, [r4, #0]
 8022c48:	e7dc      	b.n	8022c04 <_malloc_r+0xb0>
 8022c4a:	605b      	str	r3, [r3, #4]
 8022c4c:	deff      	udf	#255	; 0xff
 8022c4e:	bf00      	nop
 8022c50:	2001635c 	.word	0x2001635c

08022c54 <__malloc_lock>:
 8022c54:	4801      	ldr	r0, [pc, #4]	; (8022c5c <__malloc_lock+0x8>)
 8022c56:	f002 b91d 	b.w	8024e94 <__retarget_lock_acquire_recursive>
 8022c5a:	bf00      	nop
 8022c5c:	200164c9 	.word	0x200164c9

08022c60 <__malloc_unlock>:
 8022c60:	4801      	ldr	r0, [pc, #4]	; (8022c68 <__malloc_unlock+0x8>)
 8022c62:	f002 b919 	b.w	8024e98 <__retarget_lock_release_recursive>
 8022c66:	bf00      	nop
 8022c68:	200164c9 	.word	0x200164c9

08022c6c <rand>:
 8022c6c:	4b16      	ldr	r3, [pc, #88]	; (8022cc8 <rand+0x5c>)
 8022c6e:	b510      	push	{r4, lr}
 8022c70:	681c      	ldr	r4, [r3, #0]
 8022c72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022c74:	b9b3      	cbnz	r3, 8022ca4 <rand+0x38>
 8022c76:	2018      	movs	r0, #24
 8022c78:	f7ff ff3c 	bl	8022af4 <malloc>
 8022c7c:	4602      	mov	r2, r0
 8022c7e:	6320      	str	r0, [r4, #48]	; 0x30
 8022c80:	b920      	cbnz	r0, 8022c8c <rand+0x20>
 8022c82:	4b12      	ldr	r3, [pc, #72]	; (8022ccc <rand+0x60>)
 8022c84:	4812      	ldr	r0, [pc, #72]	; (8022cd0 <rand+0x64>)
 8022c86:	2152      	movs	r1, #82	; 0x52
 8022c88:	f7ff ff16 	bl	8022ab8 <__assert_func>
 8022c8c:	4911      	ldr	r1, [pc, #68]	; (8022cd4 <rand+0x68>)
 8022c8e:	4b12      	ldr	r3, [pc, #72]	; (8022cd8 <rand+0x6c>)
 8022c90:	e9c0 1300 	strd	r1, r3, [r0]
 8022c94:	4b11      	ldr	r3, [pc, #68]	; (8022cdc <rand+0x70>)
 8022c96:	6083      	str	r3, [r0, #8]
 8022c98:	230b      	movs	r3, #11
 8022c9a:	8183      	strh	r3, [r0, #12]
 8022c9c:	2100      	movs	r1, #0
 8022c9e:	2001      	movs	r0, #1
 8022ca0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022ca4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022ca6:	480e      	ldr	r0, [pc, #56]	; (8022ce0 <rand+0x74>)
 8022ca8:	690b      	ldr	r3, [r1, #16]
 8022caa:	694c      	ldr	r4, [r1, #20]
 8022cac:	4a0d      	ldr	r2, [pc, #52]	; (8022ce4 <rand+0x78>)
 8022cae:	4358      	muls	r0, r3
 8022cb0:	fb02 0004 	mla	r0, r2, r4, r0
 8022cb4:	fba3 3202 	umull	r3, r2, r3, r2
 8022cb8:	3301      	adds	r3, #1
 8022cba:	eb40 0002 	adc.w	r0, r0, r2
 8022cbe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022cc2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022cc6:	bd10      	pop	{r4, pc}
 8022cc8:	200000a0 	.word	0x200000a0
 8022ccc:	0802c82c 	.word	0x0802c82c
 8022cd0:	0802c843 	.word	0x0802c843
 8022cd4:	abcd330e 	.word	0xabcd330e
 8022cd8:	e66d1234 	.word	0xe66d1234
 8022cdc:	0005deec 	.word	0x0005deec
 8022ce0:	5851f42d 	.word	0x5851f42d
 8022ce4:	4c957f2d 	.word	0x4c957f2d

08022ce8 <_strtol_l.constprop.0>:
 8022ce8:	2b01      	cmp	r3, #1
 8022cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022cee:	d001      	beq.n	8022cf4 <_strtol_l.constprop.0+0xc>
 8022cf0:	2b24      	cmp	r3, #36	; 0x24
 8022cf2:	d906      	bls.n	8022d02 <_strtol_l.constprop.0+0x1a>
 8022cf4:	f002 f8a2 	bl	8024e3c <__errno>
 8022cf8:	2316      	movs	r3, #22
 8022cfa:	6003      	str	r3, [r0, #0]
 8022cfc:	2000      	movs	r0, #0
 8022cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8022de8 <_strtol_l.constprop.0+0x100>
 8022d06:	460d      	mov	r5, r1
 8022d08:	462e      	mov	r6, r5
 8022d0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022d0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8022d12:	f017 0708 	ands.w	r7, r7, #8
 8022d16:	d1f7      	bne.n	8022d08 <_strtol_l.constprop.0+0x20>
 8022d18:	2c2d      	cmp	r4, #45	; 0x2d
 8022d1a:	d132      	bne.n	8022d82 <_strtol_l.constprop.0+0x9a>
 8022d1c:	782c      	ldrb	r4, [r5, #0]
 8022d1e:	2701      	movs	r7, #1
 8022d20:	1cb5      	adds	r5, r6, #2
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	d05b      	beq.n	8022dde <_strtol_l.constprop.0+0xf6>
 8022d26:	2b10      	cmp	r3, #16
 8022d28:	d109      	bne.n	8022d3e <_strtol_l.constprop.0+0x56>
 8022d2a:	2c30      	cmp	r4, #48	; 0x30
 8022d2c:	d107      	bne.n	8022d3e <_strtol_l.constprop.0+0x56>
 8022d2e:	782c      	ldrb	r4, [r5, #0]
 8022d30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022d34:	2c58      	cmp	r4, #88	; 0x58
 8022d36:	d14d      	bne.n	8022dd4 <_strtol_l.constprop.0+0xec>
 8022d38:	786c      	ldrb	r4, [r5, #1]
 8022d3a:	2310      	movs	r3, #16
 8022d3c:	3502      	adds	r5, #2
 8022d3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8022d42:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8022d46:	f04f 0e00 	mov.w	lr, #0
 8022d4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8022d4e:	4676      	mov	r6, lr
 8022d50:	fb03 8a19 	mls	sl, r3, r9, r8
 8022d54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8022d58:	f1bc 0f09 	cmp.w	ip, #9
 8022d5c:	d816      	bhi.n	8022d8c <_strtol_l.constprop.0+0xa4>
 8022d5e:	4664      	mov	r4, ip
 8022d60:	42a3      	cmp	r3, r4
 8022d62:	dd24      	ble.n	8022dae <_strtol_l.constprop.0+0xc6>
 8022d64:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022d68:	d008      	beq.n	8022d7c <_strtol_l.constprop.0+0x94>
 8022d6a:	45b1      	cmp	r9, r6
 8022d6c:	d31c      	bcc.n	8022da8 <_strtol_l.constprop.0+0xc0>
 8022d6e:	d101      	bne.n	8022d74 <_strtol_l.constprop.0+0x8c>
 8022d70:	45a2      	cmp	sl, r4
 8022d72:	db19      	blt.n	8022da8 <_strtol_l.constprop.0+0xc0>
 8022d74:	fb06 4603 	mla	r6, r6, r3, r4
 8022d78:	f04f 0e01 	mov.w	lr, #1
 8022d7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8022d80:	e7e8      	b.n	8022d54 <_strtol_l.constprop.0+0x6c>
 8022d82:	2c2b      	cmp	r4, #43	; 0x2b
 8022d84:	bf04      	itt	eq
 8022d86:	782c      	ldrbeq	r4, [r5, #0]
 8022d88:	1cb5      	addeq	r5, r6, #2
 8022d8a:	e7ca      	b.n	8022d22 <_strtol_l.constprop.0+0x3a>
 8022d8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8022d90:	f1bc 0f19 	cmp.w	ip, #25
 8022d94:	d801      	bhi.n	8022d9a <_strtol_l.constprop.0+0xb2>
 8022d96:	3c37      	subs	r4, #55	; 0x37
 8022d98:	e7e2      	b.n	8022d60 <_strtol_l.constprop.0+0x78>
 8022d9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8022d9e:	f1bc 0f19 	cmp.w	ip, #25
 8022da2:	d804      	bhi.n	8022dae <_strtol_l.constprop.0+0xc6>
 8022da4:	3c57      	subs	r4, #87	; 0x57
 8022da6:	e7db      	b.n	8022d60 <_strtol_l.constprop.0+0x78>
 8022da8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8022dac:	e7e6      	b.n	8022d7c <_strtol_l.constprop.0+0x94>
 8022dae:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8022db2:	d105      	bne.n	8022dc0 <_strtol_l.constprop.0+0xd8>
 8022db4:	2322      	movs	r3, #34	; 0x22
 8022db6:	6003      	str	r3, [r0, #0]
 8022db8:	4646      	mov	r6, r8
 8022dba:	b942      	cbnz	r2, 8022dce <_strtol_l.constprop.0+0xe6>
 8022dbc:	4630      	mov	r0, r6
 8022dbe:	e79e      	b.n	8022cfe <_strtol_l.constprop.0+0x16>
 8022dc0:	b107      	cbz	r7, 8022dc4 <_strtol_l.constprop.0+0xdc>
 8022dc2:	4276      	negs	r6, r6
 8022dc4:	2a00      	cmp	r2, #0
 8022dc6:	d0f9      	beq.n	8022dbc <_strtol_l.constprop.0+0xd4>
 8022dc8:	f1be 0f00 	cmp.w	lr, #0
 8022dcc:	d000      	beq.n	8022dd0 <_strtol_l.constprop.0+0xe8>
 8022dce:	1e69      	subs	r1, r5, #1
 8022dd0:	6011      	str	r1, [r2, #0]
 8022dd2:	e7f3      	b.n	8022dbc <_strtol_l.constprop.0+0xd4>
 8022dd4:	2430      	movs	r4, #48	; 0x30
 8022dd6:	2b00      	cmp	r3, #0
 8022dd8:	d1b1      	bne.n	8022d3e <_strtol_l.constprop.0+0x56>
 8022dda:	2308      	movs	r3, #8
 8022ddc:	e7af      	b.n	8022d3e <_strtol_l.constprop.0+0x56>
 8022dde:	2c30      	cmp	r4, #48	; 0x30
 8022de0:	d0a5      	beq.n	8022d2e <_strtol_l.constprop.0+0x46>
 8022de2:	230a      	movs	r3, #10
 8022de4:	e7ab      	b.n	8022d3e <_strtol_l.constprop.0+0x56>
 8022de6:	bf00      	nop
 8022de8:	0802c89c 	.word	0x0802c89c

08022dec <_strtol_r>:
 8022dec:	f7ff bf7c 	b.w	8022ce8 <_strtol_l.constprop.0>

08022df0 <__cvt>:
 8022df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022df4:	ec55 4b10 	vmov	r4, r5, d0
 8022df8:	2d00      	cmp	r5, #0
 8022dfa:	460e      	mov	r6, r1
 8022dfc:	4619      	mov	r1, r3
 8022dfe:	462b      	mov	r3, r5
 8022e00:	bfbb      	ittet	lt
 8022e02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8022e06:	461d      	movlt	r5, r3
 8022e08:	2300      	movge	r3, #0
 8022e0a:	232d      	movlt	r3, #45	; 0x2d
 8022e0c:	700b      	strb	r3, [r1, #0]
 8022e0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022e10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8022e14:	4691      	mov	r9, r2
 8022e16:	f023 0820 	bic.w	r8, r3, #32
 8022e1a:	bfbc      	itt	lt
 8022e1c:	4622      	movlt	r2, r4
 8022e1e:	4614      	movlt	r4, r2
 8022e20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022e24:	d005      	beq.n	8022e32 <__cvt+0x42>
 8022e26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8022e2a:	d100      	bne.n	8022e2e <__cvt+0x3e>
 8022e2c:	3601      	adds	r6, #1
 8022e2e:	2102      	movs	r1, #2
 8022e30:	e000      	b.n	8022e34 <__cvt+0x44>
 8022e32:	2103      	movs	r1, #3
 8022e34:	ab03      	add	r3, sp, #12
 8022e36:	9301      	str	r3, [sp, #4]
 8022e38:	ab02      	add	r3, sp, #8
 8022e3a:	9300      	str	r3, [sp, #0]
 8022e3c:	ec45 4b10 	vmov	d0, r4, r5
 8022e40:	4653      	mov	r3, sl
 8022e42:	4632      	mov	r2, r6
 8022e44:	f002 f8d4 	bl	8024ff0 <_dtoa_r>
 8022e48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8022e4c:	4607      	mov	r7, r0
 8022e4e:	d102      	bne.n	8022e56 <__cvt+0x66>
 8022e50:	f019 0f01 	tst.w	r9, #1
 8022e54:	d022      	beq.n	8022e9c <__cvt+0xac>
 8022e56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8022e5a:	eb07 0906 	add.w	r9, r7, r6
 8022e5e:	d110      	bne.n	8022e82 <__cvt+0x92>
 8022e60:	783b      	ldrb	r3, [r7, #0]
 8022e62:	2b30      	cmp	r3, #48	; 0x30
 8022e64:	d10a      	bne.n	8022e7c <__cvt+0x8c>
 8022e66:	2200      	movs	r2, #0
 8022e68:	2300      	movs	r3, #0
 8022e6a:	4620      	mov	r0, r4
 8022e6c:	4629      	mov	r1, r5
 8022e6e:	f7dd fe3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8022e72:	b918      	cbnz	r0, 8022e7c <__cvt+0x8c>
 8022e74:	f1c6 0601 	rsb	r6, r6, #1
 8022e78:	f8ca 6000 	str.w	r6, [sl]
 8022e7c:	f8da 3000 	ldr.w	r3, [sl]
 8022e80:	4499      	add	r9, r3
 8022e82:	2200      	movs	r2, #0
 8022e84:	2300      	movs	r3, #0
 8022e86:	4620      	mov	r0, r4
 8022e88:	4629      	mov	r1, r5
 8022e8a:	f7dd fe2d 	bl	8000ae8 <__aeabi_dcmpeq>
 8022e8e:	b108      	cbz	r0, 8022e94 <__cvt+0xa4>
 8022e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8022e94:	2230      	movs	r2, #48	; 0x30
 8022e96:	9b03      	ldr	r3, [sp, #12]
 8022e98:	454b      	cmp	r3, r9
 8022e9a:	d307      	bcc.n	8022eac <__cvt+0xbc>
 8022e9c:	9b03      	ldr	r3, [sp, #12]
 8022e9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022ea0:	1bdb      	subs	r3, r3, r7
 8022ea2:	4638      	mov	r0, r7
 8022ea4:	6013      	str	r3, [r2, #0]
 8022ea6:	b004      	add	sp, #16
 8022ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022eac:	1c59      	adds	r1, r3, #1
 8022eae:	9103      	str	r1, [sp, #12]
 8022eb0:	701a      	strb	r2, [r3, #0]
 8022eb2:	e7f0      	b.n	8022e96 <__cvt+0xa6>

08022eb4 <__exponent>:
 8022eb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022eb6:	4603      	mov	r3, r0
 8022eb8:	2900      	cmp	r1, #0
 8022eba:	bfb8      	it	lt
 8022ebc:	4249      	neglt	r1, r1
 8022ebe:	f803 2b02 	strb.w	r2, [r3], #2
 8022ec2:	bfb4      	ite	lt
 8022ec4:	222d      	movlt	r2, #45	; 0x2d
 8022ec6:	222b      	movge	r2, #43	; 0x2b
 8022ec8:	2909      	cmp	r1, #9
 8022eca:	7042      	strb	r2, [r0, #1]
 8022ecc:	dd2a      	ble.n	8022f24 <__exponent+0x70>
 8022ece:	f10d 0207 	add.w	r2, sp, #7
 8022ed2:	4617      	mov	r7, r2
 8022ed4:	260a      	movs	r6, #10
 8022ed6:	4694      	mov	ip, r2
 8022ed8:	fb91 f5f6 	sdiv	r5, r1, r6
 8022edc:	fb06 1415 	mls	r4, r6, r5, r1
 8022ee0:	3430      	adds	r4, #48	; 0x30
 8022ee2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8022ee6:	460c      	mov	r4, r1
 8022ee8:	2c63      	cmp	r4, #99	; 0x63
 8022eea:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8022eee:	4629      	mov	r1, r5
 8022ef0:	dcf1      	bgt.n	8022ed6 <__exponent+0x22>
 8022ef2:	3130      	adds	r1, #48	; 0x30
 8022ef4:	f1ac 0402 	sub.w	r4, ip, #2
 8022ef8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8022efc:	1c41      	adds	r1, r0, #1
 8022efe:	4622      	mov	r2, r4
 8022f00:	42ba      	cmp	r2, r7
 8022f02:	d30a      	bcc.n	8022f1a <__exponent+0x66>
 8022f04:	f10d 0209 	add.w	r2, sp, #9
 8022f08:	eba2 020c 	sub.w	r2, r2, ip
 8022f0c:	42bc      	cmp	r4, r7
 8022f0e:	bf88      	it	hi
 8022f10:	2200      	movhi	r2, #0
 8022f12:	4413      	add	r3, r2
 8022f14:	1a18      	subs	r0, r3, r0
 8022f16:	b003      	add	sp, #12
 8022f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f1a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8022f1e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8022f22:	e7ed      	b.n	8022f00 <__exponent+0x4c>
 8022f24:	2330      	movs	r3, #48	; 0x30
 8022f26:	3130      	adds	r1, #48	; 0x30
 8022f28:	7083      	strb	r3, [r0, #2]
 8022f2a:	70c1      	strb	r1, [r0, #3]
 8022f2c:	1d03      	adds	r3, r0, #4
 8022f2e:	e7f1      	b.n	8022f14 <__exponent+0x60>

08022f30 <_printf_float>:
 8022f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f34:	ed2d 8b02 	vpush	{d8}
 8022f38:	b08d      	sub	sp, #52	; 0x34
 8022f3a:	460c      	mov	r4, r1
 8022f3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8022f40:	4616      	mov	r6, r2
 8022f42:	461f      	mov	r7, r3
 8022f44:	4605      	mov	r5, r0
 8022f46:	f001 fec9 	bl	8024cdc <_localeconv_r>
 8022f4a:	f8d0 a000 	ldr.w	sl, [r0]
 8022f4e:	4650      	mov	r0, sl
 8022f50:	f7dd f99e 	bl	8000290 <strlen>
 8022f54:	2300      	movs	r3, #0
 8022f56:	930a      	str	r3, [sp, #40]	; 0x28
 8022f58:	6823      	ldr	r3, [r4, #0]
 8022f5a:	9305      	str	r3, [sp, #20]
 8022f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8022f60:	f894 b018 	ldrb.w	fp, [r4, #24]
 8022f64:	3307      	adds	r3, #7
 8022f66:	f023 0307 	bic.w	r3, r3, #7
 8022f6a:	f103 0208 	add.w	r2, r3, #8
 8022f6e:	f8c8 2000 	str.w	r2, [r8]
 8022f72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8022f76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8022f7a:	9307      	str	r3, [sp, #28]
 8022f7c:	f8cd 8018 	str.w	r8, [sp, #24]
 8022f80:	ee08 0a10 	vmov	s16, r0
 8022f84:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8022f88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f8c:	4b9e      	ldr	r3, [pc, #632]	; (8023208 <_printf_float+0x2d8>)
 8022f8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022f92:	f7dd fddb 	bl	8000b4c <__aeabi_dcmpun>
 8022f96:	bb88      	cbnz	r0, 8022ffc <_printf_float+0xcc>
 8022f98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022f9c:	4b9a      	ldr	r3, [pc, #616]	; (8023208 <_printf_float+0x2d8>)
 8022f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022fa2:	f7dd fdb5 	bl	8000b10 <__aeabi_dcmple>
 8022fa6:	bb48      	cbnz	r0, 8022ffc <_printf_float+0xcc>
 8022fa8:	2200      	movs	r2, #0
 8022faa:	2300      	movs	r3, #0
 8022fac:	4640      	mov	r0, r8
 8022fae:	4649      	mov	r1, r9
 8022fb0:	f7dd fda4 	bl	8000afc <__aeabi_dcmplt>
 8022fb4:	b110      	cbz	r0, 8022fbc <_printf_float+0x8c>
 8022fb6:	232d      	movs	r3, #45	; 0x2d
 8022fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022fbc:	4a93      	ldr	r2, [pc, #588]	; (802320c <_printf_float+0x2dc>)
 8022fbe:	4b94      	ldr	r3, [pc, #592]	; (8023210 <_printf_float+0x2e0>)
 8022fc0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8022fc4:	bf94      	ite	ls
 8022fc6:	4690      	movls	r8, r2
 8022fc8:	4698      	movhi	r8, r3
 8022fca:	2303      	movs	r3, #3
 8022fcc:	6123      	str	r3, [r4, #16]
 8022fce:	9b05      	ldr	r3, [sp, #20]
 8022fd0:	f023 0304 	bic.w	r3, r3, #4
 8022fd4:	6023      	str	r3, [r4, #0]
 8022fd6:	f04f 0900 	mov.w	r9, #0
 8022fda:	9700      	str	r7, [sp, #0]
 8022fdc:	4633      	mov	r3, r6
 8022fde:	aa0b      	add	r2, sp, #44	; 0x2c
 8022fe0:	4621      	mov	r1, r4
 8022fe2:	4628      	mov	r0, r5
 8022fe4:	f000 f9da 	bl	802339c <_printf_common>
 8022fe8:	3001      	adds	r0, #1
 8022fea:	f040 8090 	bne.w	802310e <_printf_float+0x1de>
 8022fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022ff2:	b00d      	add	sp, #52	; 0x34
 8022ff4:	ecbd 8b02 	vpop	{d8}
 8022ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ffc:	4642      	mov	r2, r8
 8022ffe:	464b      	mov	r3, r9
 8023000:	4640      	mov	r0, r8
 8023002:	4649      	mov	r1, r9
 8023004:	f7dd fda2 	bl	8000b4c <__aeabi_dcmpun>
 8023008:	b140      	cbz	r0, 802301c <_printf_float+0xec>
 802300a:	464b      	mov	r3, r9
 802300c:	2b00      	cmp	r3, #0
 802300e:	bfbc      	itt	lt
 8023010:	232d      	movlt	r3, #45	; 0x2d
 8023012:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8023016:	4a7f      	ldr	r2, [pc, #508]	; (8023214 <_printf_float+0x2e4>)
 8023018:	4b7f      	ldr	r3, [pc, #508]	; (8023218 <_printf_float+0x2e8>)
 802301a:	e7d1      	b.n	8022fc0 <_printf_float+0x90>
 802301c:	6863      	ldr	r3, [r4, #4]
 802301e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8023022:	9206      	str	r2, [sp, #24]
 8023024:	1c5a      	adds	r2, r3, #1
 8023026:	d13f      	bne.n	80230a8 <_printf_float+0x178>
 8023028:	2306      	movs	r3, #6
 802302a:	6063      	str	r3, [r4, #4]
 802302c:	9b05      	ldr	r3, [sp, #20]
 802302e:	6861      	ldr	r1, [r4, #4]
 8023030:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8023034:	2300      	movs	r3, #0
 8023036:	9303      	str	r3, [sp, #12]
 8023038:	ab0a      	add	r3, sp, #40	; 0x28
 802303a:	e9cd b301 	strd	fp, r3, [sp, #4]
 802303e:	ab09      	add	r3, sp, #36	; 0x24
 8023040:	ec49 8b10 	vmov	d0, r8, r9
 8023044:	9300      	str	r3, [sp, #0]
 8023046:	6022      	str	r2, [r4, #0]
 8023048:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802304c:	4628      	mov	r0, r5
 802304e:	f7ff fecf 	bl	8022df0 <__cvt>
 8023052:	9b06      	ldr	r3, [sp, #24]
 8023054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023056:	2b47      	cmp	r3, #71	; 0x47
 8023058:	4680      	mov	r8, r0
 802305a:	d108      	bne.n	802306e <_printf_float+0x13e>
 802305c:	1cc8      	adds	r0, r1, #3
 802305e:	db02      	blt.n	8023066 <_printf_float+0x136>
 8023060:	6863      	ldr	r3, [r4, #4]
 8023062:	4299      	cmp	r1, r3
 8023064:	dd41      	ble.n	80230ea <_printf_float+0x1ba>
 8023066:	f1ab 0302 	sub.w	r3, fp, #2
 802306a:	fa5f fb83 	uxtb.w	fp, r3
 802306e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023072:	d820      	bhi.n	80230b6 <_printf_float+0x186>
 8023074:	3901      	subs	r1, #1
 8023076:	465a      	mov	r2, fp
 8023078:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802307c:	9109      	str	r1, [sp, #36]	; 0x24
 802307e:	f7ff ff19 	bl	8022eb4 <__exponent>
 8023082:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023084:	1813      	adds	r3, r2, r0
 8023086:	2a01      	cmp	r2, #1
 8023088:	4681      	mov	r9, r0
 802308a:	6123      	str	r3, [r4, #16]
 802308c:	dc02      	bgt.n	8023094 <_printf_float+0x164>
 802308e:	6822      	ldr	r2, [r4, #0]
 8023090:	07d2      	lsls	r2, r2, #31
 8023092:	d501      	bpl.n	8023098 <_printf_float+0x168>
 8023094:	3301      	adds	r3, #1
 8023096:	6123      	str	r3, [r4, #16]
 8023098:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802309c:	2b00      	cmp	r3, #0
 802309e:	d09c      	beq.n	8022fda <_printf_float+0xaa>
 80230a0:	232d      	movs	r3, #45	; 0x2d
 80230a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80230a6:	e798      	b.n	8022fda <_printf_float+0xaa>
 80230a8:	9a06      	ldr	r2, [sp, #24]
 80230aa:	2a47      	cmp	r2, #71	; 0x47
 80230ac:	d1be      	bne.n	802302c <_printf_float+0xfc>
 80230ae:	2b00      	cmp	r3, #0
 80230b0:	d1bc      	bne.n	802302c <_printf_float+0xfc>
 80230b2:	2301      	movs	r3, #1
 80230b4:	e7b9      	b.n	802302a <_printf_float+0xfa>
 80230b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80230ba:	d118      	bne.n	80230ee <_printf_float+0x1be>
 80230bc:	2900      	cmp	r1, #0
 80230be:	6863      	ldr	r3, [r4, #4]
 80230c0:	dd0b      	ble.n	80230da <_printf_float+0x1aa>
 80230c2:	6121      	str	r1, [r4, #16]
 80230c4:	b913      	cbnz	r3, 80230cc <_printf_float+0x19c>
 80230c6:	6822      	ldr	r2, [r4, #0]
 80230c8:	07d0      	lsls	r0, r2, #31
 80230ca:	d502      	bpl.n	80230d2 <_printf_float+0x1a2>
 80230cc:	3301      	adds	r3, #1
 80230ce:	440b      	add	r3, r1
 80230d0:	6123      	str	r3, [r4, #16]
 80230d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80230d4:	f04f 0900 	mov.w	r9, #0
 80230d8:	e7de      	b.n	8023098 <_printf_float+0x168>
 80230da:	b913      	cbnz	r3, 80230e2 <_printf_float+0x1b2>
 80230dc:	6822      	ldr	r2, [r4, #0]
 80230de:	07d2      	lsls	r2, r2, #31
 80230e0:	d501      	bpl.n	80230e6 <_printf_float+0x1b6>
 80230e2:	3302      	adds	r3, #2
 80230e4:	e7f4      	b.n	80230d0 <_printf_float+0x1a0>
 80230e6:	2301      	movs	r3, #1
 80230e8:	e7f2      	b.n	80230d0 <_printf_float+0x1a0>
 80230ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80230ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80230f0:	4299      	cmp	r1, r3
 80230f2:	db05      	blt.n	8023100 <_printf_float+0x1d0>
 80230f4:	6823      	ldr	r3, [r4, #0]
 80230f6:	6121      	str	r1, [r4, #16]
 80230f8:	07d8      	lsls	r0, r3, #31
 80230fa:	d5ea      	bpl.n	80230d2 <_printf_float+0x1a2>
 80230fc:	1c4b      	adds	r3, r1, #1
 80230fe:	e7e7      	b.n	80230d0 <_printf_float+0x1a0>
 8023100:	2900      	cmp	r1, #0
 8023102:	bfd4      	ite	le
 8023104:	f1c1 0202 	rsble	r2, r1, #2
 8023108:	2201      	movgt	r2, #1
 802310a:	4413      	add	r3, r2
 802310c:	e7e0      	b.n	80230d0 <_printf_float+0x1a0>
 802310e:	6823      	ldr	r3, [r4, #0]
 8023110:	055a      	lsls	r2, r3, #21
 8023112:	d407      	bmi.n	8023124 <_printf_float+0x1f4>
 8023114:	6923      	ldr	r3, [r4, #16]
 8023116:	4642      	mov	r2, r8
 8023118:	4631      	mov	r1, r6
 802311a:	4628      	mov	r0, r5
 802311c:	47b8      	blx	r7
 802311e:	3001      	adds	r0, #1
 8023120:	d12c      	bne.n	802317c <_printf_float+0x24c>
 8023122:	e764      	b.n	8022fee <_printf_float+0xbe>
 8023124:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8023128:	f240 80e0 	bls.w	80232ec <_printf_float+0x3bc>
 802312c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8023130:	2200      	movs	r2, #0
 8023132:	2300      	movs	r3, #0
 8023134:	f7dd fcd8 	bl	8000ae8 <__aeabi_dcmpeq>
 8023138:	2800      	cmp	r0, #0
 802313a:	d034      	beq.n	80231a6 <_printf_float+0x276>
 802313c:	4a37      	ldr	r2, [pc, #220]	; (802321c <_printf_float+0x2ec>)
 802313e:	2301      	movs	r3, #1
 8023140:	4631      	mov	r1, r6
 8023142:	4628      	mov	r0, r5
 8023144:	47b8      	blx	r7
 8023146:	3001      	adds	r0, #1
 8023148:	f43f af51 	beq.w	8022fee <_printf_float+0xbe>
 802314c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8023150:	429a      	cmp	r2, r3
 8023152:	db02      	blt.n	802315a <_printf_float+0x22a>
 8023154:	6823      	ldr	r3, [r4, #0]
 8023156:	07d8      	lsls	r0, r3, #31
 8023158:	d510      	bpl.n	802317c <_printf_float+0x24c>
 802315a:	ee18 3a10 	vmov	r3, s16
 802315e:	4652      	mov	r2, sl
 8023160:	4631      	mov	r1, r6
 8023162:	4628      	mov	r0, r5
 8023164:	47b8      	blx	r7
 8023166:	3001      	adds	r0, #1
 8023168:	f43f af41 	beq.w	8022fee <_printf_float+0xbe>
 802316c:	f04f 0800 	mov.w	r8, #0
 8023170:	f104 091a 	add.w	r9, r4, #26
 8023174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023176:	3b01      	subs	r3, #1
 8023178:	4543      	cmp	r3, r8
 802317a:	dc09      	bgt.n	8023190 <_printf_float+0x260>
 802317c:	6823      	ldr	r3, [r4, #0]
 802317e:	079b      	lsls	r3, r3, #30
 8023180:	f100 8107 	bmi.w	8023392 <_printf_float+0x462>
 8023184:	68e0      	ldr	r0, [r4, #12]
 8023186:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023188:	4298      	cmp	r0, r3
 802318a:	bfb8      	it	lt
 802318c:	4618      	movlt	r0, r3
 802318e:	e730      	b.n	8022ff2 <_printf_float+0xc2>
 8023190:	2301      	movs	r3, #1
 8023192:	464a      	mov	r2, r9
 8023194:	4631      	mov	r1, r6
 8023196:	4628      	mov	r0, r5
 8023198:	47b8      	blx	r7
 802319a:	3001      	adds	r0, #1
 802319c:	f43f af27 	beq.w	8022fee <_printf_float+0xbe>
 80231a0:	f108 0801 	add.w	r8, r8, #1
 80231a4:	e7e6      	b.n	8023174 <_printf_float+0x244>
 80231a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231a8:	2b00      	cmp	r3, #0
 80231aa:	dc39      	bgt.n	8023220 <_printf_float+0x2f0>
 80231ac:	4a1b      	ldr	r2, [pc, #108]	; (802321c <_printf_float+0x2ec>)
 80231ae:	2301      	movs	r3, #1
 80231b0:	4631      	mov	r1, r6
 80231b2:	4628      	mov	r0, r5
 80231b4:	47b8      	blx	r7
 80231b6:	3001      	adds	r0, #1
 80231b8:	f43f af19 	beq.w	8022fee <_printf_float+0xbe>
 80231bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80231c0:	4313      	orrs	r3, r2
 80231c2:	d102      	bne.n	80231ca <_printf_float+0x29a>
 80231c4:	6823      	ldr	r3, [r4, #0]
 80231c6:	07d9      	lsls	r1, r3, #31
 80231c8:	d5d8      	bpl.n	802317c <_printf_float+0x24c>
 80231ca:	ee18 3a10 	vmov	r3, s16
 80231ce:	4652      	mov	r2, sl
 80231d0:	4631      	mov	r1, r6
 80231d2:	4628      	mov	r0, r5
 80231d4:	47b8      	blx	r7
 80231d6:	3001      	adds	r0, #1
 80231d8:	f43f af09 	beq.w	8022fee <_printf_float+0xbe>
 80231dc:	f04f 0900 	mov.w	r9, #0
 80231e0:	f104 0a1a 	add.w	sl, r4, #26
 80231e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231e6:	425b      	negs	r3, r3
 80231e8:	454b      	cmp	r3, r9
 80231ea:	dc01      	bgt.n	80231f0 <_printf_float+0x2c0>
 80231ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231ee:	e792      	b.n	8023116 <_printf_float+0x1e6>
 80231f0:	2301      	movs	r3, #1
 80231f2:	4652      	mov	r2, sl
 80231f4:	4631      	mov	r1, r6
 80231f6:	4628      	mov	r0, r5
 80231f8:	47b8      	blx	r7
 80231fa:	3001      	adds	r0, #1
 80231fc:	f43f aef7 	beq.w	8022fee <_printf_float+0xbe>
 8023200:	f109 0901 	add.w	r9, r9, #1
 8023204:	e7ee      	b.n	80231e4 <_printf_float+0x2b4>
 8023206:	bf00      	nop
 8023208:	7fefffff 	.word	0x7fefffff
 802320c:	0802c99c 	.word	0x0802c99c
 8023210:	0802c9a0 	.word	0x0802c9a0
 8023214:	0802c9a4 	.word	0x0802c9a4
 8023218:	0802c9a8 	.word	0x0802c9a8
 802321c:	0802cefd 	.word	0x0802cefd
 8023220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8023224:	429a      	cmp	r2, r3
 8023226:	bfa8      	it	ge
 8023228:	461a      	movge	r2, r3
 802322a:	2a00      	cmp	r2, #0
 802322c:	4691      	mov	r9, r2
 802322e:	dc37      	bgt.n	80232a0 <_printf_float+0x370>
 8023230:	f04f 0b00 	mov.w	fp, #0
 8023234:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023238:	f104 021a 	add.w	r2, r4, #26
 802323c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802323e:	9305      	str	r3, [sp, #20]
 8023240:	eba3 0309 	sub.w	r3, r3, r9
 8023244:	455b      	cmp	r3, fp
 8023246:	dc33      	bgt.n	80232b0 <_printf_float+0x380>
 8023248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802324c:	429a      	cmp	r2, r3
 802324e:	db3b      	blt.n	80232c8 <_printf_float+0x398>
 8023250:	6823      	ldr	r3, [r4, #0]
 8023252:	07da      	lsls	r2, r3, #31
 8023254:	d438      	bmi.n	80232c8 <_printf_float+0x398>
 8023256:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802325a:	eba2 0903 	sub.w	r9, r2, r3
 802325e:	9b05      	ldr	r3, [sp, #20]
 8023260:	1ad2      	subs	r2, r2, r3
 8023262:	4591      	cmp	r9, r2
 8023264:	bfa8      	it	ge
 8023266:	4691      	movge	r9, r2
 8023268:	f1b9 0f00 	cmp.w	r9, #0
 802326c:	dc35      	bgt.n	80232da <_printf_float+0x3aa>
 802326e:	f04f 0800 	mov.w	r8, #0
 8023272:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8023276:	f104 0a1a 	add.w	sl, r4, #26
 802327a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802327e:	1a9b      	subs	r3, r3, r2
 8023280:	eba3 0309 	sub.w	r3, r3, r9
 8023284:	4543      	cmp	r3, r8
 8023286:	f77f af79 	ble.w	802317c <_printf_float+0x24c>
 802328a:	2301      	movs	r3, #1
 802328c:	4652      	mov	r2, sl
 802328e:	4631      	mov	r1, r6
 8023290:	4628      	mov	r0, r5
 8023292:	47b8      	blx	r7
 8023294:	3001      	adds	r0, #1
 8023296:	f43f aeaa 	beq.w	8022fee <_printf_float+0xbe>
 802329a:	f108 0801 	add.w	r8, r8, #1
 802329e:	e7ec      	b.n	802327a <_printf_float+0x34a>
 80232a0:	4613      	mov	r3, r2
 80232a2:	4631      	mov	r1, r6
 80232a4:	4642      	mov	r2, r8
 80232a6:	4628      	mov	r0, r5
 80232a8:	47b8      	blx	r7
 80232aa:	3001      	adds	r0, #1
 80232ac:	d1c0      	bne.n	8023230 <_printf_float+0x300>
 80232ae:	e69e      	b.n	8022fee <_printf_float+0xbe>
 80232b0:	2301      	movs	r3, #1
 80232b2:	4631      	mov	r1, r6
 80232b4:	4628      	mov	r0, r5
 80232b6:	9205      	str	r2, [sp, #20]
 80232b8:	47b8      	blx	r7
 80232ba:	3001      	adds	r0, #1
 80232bc:	f43f ae97 	beq.w	8022fee <_printf_float+0xbe>
 80232c0:	9a05      	ldr	r2, [sp, #20]
 80232c2:	f10b 0b01 	add.w	fp, fp, #1
 80232c6:	e7b9      	b.n	802323c <_printf_float+0x30c>
 80232c8:	ee18 3a10 	vmov	r3, s16
 80232cc:	4652      	mov	r2, sl
 80232ce:	4631      	mov	r1, r6
 80232d0:	4628      	mov	r0, r5
 80232d2:	47b8      	blx	r7
 80232d4:	3001      	adds	r0, #1
 80232d6:	d1be      	bne.n	8023256 <_printf_float+0x326>
 80232d8:	e689      	b.n	8022fee <_printf_float+0xbe>
 80232da:	9a05      	ldr	r2, [sp, #20]
 80232dc:	464b      	mov	r3, r9
 80232de:	4442      	add	r2, r8
 80232e0:	4631      	mov	r1, r6
 80232e2:	4628      	mov	r0, r5
 80232e4:	47b8      	blx	r7
 80232e6:	3001      	adds	r0, #1
 80232e8:	d1c1      	bne.n	802326e <_printf_float+0x33e>
 80232ea:	e680      	b.n	8022fee <_printf_float+0xbe>
 80232ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80232ee:	2a01      	cmp	r2, #1
 80232f0:	dc01      	bgt.n	80232f6 <_printf_float+0x3c6>
 80232f2:	07db      	lsls	r3, r3, #31
 80232f4:	d53a      	bpl.n	802336c <_printf_float+0x43c>
 80232f6:	2301      	movs	r3, #1
 80232f8:	4642      	mov	r2, r8
 80232fa:	4631      	mov	r1, r6
 80232fc:	4628      	mov	r0, r5
 80232fe:	47b8      	blx	r7
 8023300:	3001      	adds	r0, #1
 8023302:	f43f ae74 	beq.w	8022fee <_printf_float+0xbe>
 8023306:	ee18 3a10 	vmov	r3, s16
 802330a:	4652      	mov	r2, sl
 802330c:	4631      	mov	r1, r6
 802330e:	4628      	mov	r0, r5
 8023310:	47b8      	blx	r7
 8023312:	3001      	adds	r0, #1
 8023314:	f43f ae6b 	beq.w	8022fee <_printf_float+0xbe>
 8023318:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802331c:	2200      	movs	r2, #0
 802331e:	2300      	movs	r3, #0
 8023320:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8023324:	f7dd fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8023328:	b9d8      	cbnz	r0, 8023362 <_printf_float+0x432>
 802332a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802332e:	f108 0201 	add.w	r2, r8, #1
 8023332:	4631      	mov	r1, r6
 8023334:	4628      	mov	r0, r5
 8023336:	47b8      	blx	r7
 8023338:	3001      	adds	r0, #1
 802333a:	d10e      	bne.n	802335a <_printf_float+0x42a>
 802333c:	e657      	b.n	8022fee <_printf_float+0xbe>
 802333e:	2301      	movs	r3, #1
 8023340:	4652      	mov	r2, sl
 8023342:	4631      	mov	r1, r6
 8023344:	4628      	mov	r0, r5
 8023346:	47b8      	blx	r7
 8023348:	3001      	adds	r0, #1
 802334a:	f43f ae50 	beq.w	8022fee <_printf_float+0xbe>
 802334e:	f108 0801 	add.w	r8, r8, #1
 8023352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023354:	3b01      	subs	r3, #1
 8023356:	4543      	cmp	r3, r8
 8023358:	dcf1      	bgt.n	802333e <_printf_float+0x40e>
 802335a:	464b      	mov	r3, r9
 802335c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8023360:	e6da      	b.n	8023118 <_printf_float+0x1e8>
 8023362:	f04f 0800 	mov.w	r8, #0
 8023366:	f104 0a1a 	add.w	sl, r4, #26
 802336a:	e7f2      	b.n	8023352 <_printf_float+0x422>
 802336c:	2301      	movs	r3, #1
 802336e:	4642      	mov	r2, r8
 8023370:	e7df      	b.n	8023332 <_printf_float+0x402>
 8023372:	2301      	movs	r3, #1
 8023374:	464a      	mov	r2, r9
 8023376:	4631      	mov	r1, r6
 8023378:	4628      	mov	r0, r5
 802337a:	47b8      	blx	r7
 802337c:	3001      	adds	r0, #1
 802337e:	f43f ae36 	beq.w	8022fee <_printf_float+0xbe>
 8023382:	f108 0801 	add.w	r8, r8, #1
 8023386:	68e3      	ldr	r3, [r4, #12]
 8023388:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802338a:	1a5b      	subs	r3, r3, r1
 802338c:	4543      	cmp	r3, r8
 802338e:	dcf0      	bgt.n	8023372 <_printf_float+0x442>
 8023390:	e6f8      	b.n	8023184 <_printf_float+0x254>
 8023392:	f04f 0800 	mov.w	r8, #0
 8023396:	f104 0919 	add.w	r9, r4, #25
 802339a:	e7f4      	b.n	8023386 <_printf_float+0x456>

0802339c <_printf_common>:
 802339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80233a0:	4616      	mov	r6, r2
 80233a2:	4699      	mov	r9, r3
 80233a4:	688a      	ldr	r2, [r1, #8]
 80233a6:	690b      	ldr	r3, [r1, #16]
 80233a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80233ac:	4293      	cmp	r3, r2
 80233ae:	bfb8      	it	lt
 80233b0:	4613      	movlt	r3, r2
 80233b2:	6033      	str	r3, [r6, #0]
 80233b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80233b8:	4607      	mov	r7, r0
 80233ba:	460c      	mov	r4, r1
 80233bc:	b10a      	cbz	r2, 80233c2 <_printf_common+0x26>
 80233be:	3301      	adds	r3, #1
 80233c0:	6033      	str	r3, [r6, #0]
 80233c2:	6823      	ldr	r3, [r4, #0]
 80233c4:	0699      	lsls	r1, r3, #26
 80233c6:	bf42      	ittt	mi
 80233c8:	6833      	ldrmi	r3, [r6, #0]
 80233ca:	3302      	addmi	r3, #2
 80233cc:	6033      	strmi	r3, [r6, #0]
 80233ce:	6825      	ldr	r5, [r4, #0]
 80233d0:	f015 0506 	ands.w	r5, r5, #6
 80233d4:	d106      	bne.n	80233e4 <_printf_common+0x48>
 80233d6:	f104 0a19 	add.w	sl, r4, #25
 80233da:	68e3      	ldr	r3, [r4, #12]
 80233dc:	6832      	ldr	r2, [r6, #0]
 80233de:	1a9b      	subs	r3, r3, r2
 80233e0:	42ab      	cmp	r3, r5
 80233e2:	dc26      	bgt.n	8023432 <_printf_common+0x96>
 80233e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80233e8:	1e13      	subs	r3, r2, #0
 80233ea:	6822      	ldr	r2, [r4, #0]
 80233ec:	bf18      	it	ne
 80233ee:	2301      	movne	r3, #1
 80233f0:	0692      	lsls	r2, r2, #26
 80233f2:	d42b      	bmi.n	802344c <_printf_common+0xb0>
 80233f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80233f8:	4649      	mov	r1, r9
 80233fa:	4638      	mov	r0, r7
 80233fc:	47c0      	blx	r8
 80233fe:	3001      	adds	r0, #1
 8023400:	d01e      	beq.n	8023440 <_printf_common+0xa4>
 8023402:	6823      	ldr	r3, [r4, #0]
 8023404:	6922      	ldr	r2, [r4, #16]
 8023406:	f003 0306 	and.w	r3, r3, #6
 802340a:	2b04      	cmp	r3, #4
 802340c:	bf02      	ittt	eq
 802340e:	68e5      	ldreq	r5, [r4, #12]
 8023410:	6833      	ldreq	r3, [r6, #0]
 8023412:	1aed      	subeq	r5, r5, r3
 8023414:	68a3      	ldr	r3, [r4, #8]
 8023416:	bf0c      	ite	eq
 8023418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802341c:	2500      	movne	r5, #0
 802341e:	4293      	cmp	r3, r2
 8023420:	bfc4      	itt	gt
 8023422:	1a9b      	subgt	r3, r3, r2
 8023424:	18ed      	addgt	r5, r5, r3
 8023426:	2600      	movs	r6, #0
 8023428:	341a      	adds	r4, #26
 802342a:	42b5      	cmp	r5, r6
 802342c:	d11a      	bne.n	8023464 <_printf_common+0xc8>
 802342e:	2000      	movs	r0, #0
 8023430:	e008      	b.n	8023444 <_printf_common+0xa8>
 8023432:	2301      	movs	r3, #1
 8023434:	4652      	mov	r2, sl
 8023436:	4649      	mov	r1, r9
 8023438:	4638      	mov	r0, r7
 802343a:	47c0      	blx	r8
 802343c:	3001      	adds	r0, #1
 802343e:	d103      	bne.n	8023448 <_printf_common+0xac>
 8023440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023448:	3501      	adds	r5, #1
 802344a:	e7c6      	b.n	80233da <_printf_common+0x3e>
 802344c:	18e1      	adds	r1, r4, r3
 802344e:	1c5a      	adds	r2, r3, #1
 8023450:	2030      	movs	r0, #48	; 0x30
 8023452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023456:	4422      	add	r2, r4
 8023458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802345c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023460:	3302      	adds	r3, #2
 8023462:	e7c7      	b.n	80233f4 <_printf_common+0x58>
 8023464:	2301      	movs	r3, #1
 8023466:	4622      	mov	r2, r4
 8023468:	4649      	mov	r1, r9
 802346a:	4638      	mov	r0, r7
 802346c:	47c0      	blx	r8
 802346e:	3001      	adds	r0, #1
 8023470:	d0e6      	beq.n	8023440 <_printf_common+0xa4>
 8023472:	3601      	adds	r6, #1
 8023474:	e7d9      	b.n	802342a <_printf_common+0x8e>
	...

08023478 <_printf_i>:
 8023478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802347c:	7e0f      	ldrb	r7, [r1, #24]
 802347e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023480:	2f78      	cmp	r7, #120	; 0x78
 8023482:	4691      	mov	r9, r2
 8023484:	4680      	mov	r8, r0
 8023486:	460c      	mov	r4, r1
 8023488:	469a      	mov	sl, r3
 802348a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802348e:	d807      	bhi.n	80234a0 <_printf_i+0x28>
 8023490:	2f62      	cmp	r7, #98	; 0x62
 8023492:	d80a      	bhi.n	80234aa <_printf_i+0x32>
 8023494:	2f00      	cmp	r7, #0
 8023496:	f000 80d4 	beq.w	8023642 <_printf_i+0x1ca>
 802349a:	2f58      	cmp	r7, #88	; 0x58
 802349c:	f000 80c0 	beq.w	8023620 <_printf_i+0x1a8>
 80234a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80234a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80234a8:	e03a      	b.n	8023520 <_printf_i+0xa8>
 80234aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80234ae:	2b15      	cmp	r3, #21
 80234b0:	d8f6      	bhi.n	80234a0 <_printf_i+0x28>
 80234b2:	a101      	add	r1, pc, #4	; (adr r1, 80234b8 <_printf_i+0x40>)
 80234b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80234b8:	08023511 	.word	0x08023511
 80234bc:	08023525 	.word	0x08023525
 80234c0:	080234a1 	.word	0x080234a1
 80234c4:	080234a1 	.word	0x080234a1
 80234c8:	080234a1 	.word	0x080234a1
 80234cc:	080234a1 	.word	0x080234a1
 80234d0:	08023525 	.word	0x08023525
 80234d4:	080234a1 	.word	0x080234a1
 80234d8:	080234a1 	.word	0x080234a1
 80234dc:	080234a1 	.word	0x080234a1
 80234e0:	080234a1 	.word	0x080234a1
 80234e4:	08023629 	.word	0x08023629
 80234e8:	08023551 	.word	0x08023551
 80234ec:	080235e3 	.word	0x080235e3
 80234f0:	080234a1 	.word	0x080234a1
 80234f4:	080234a1 	.word	0x080234a1
 80234f8:	0802364b 	.word	0x0802364b
 80234fc:	080234a1 	.word	0x080234a1
 8023500:	08023551 	.word	0x08023551
 8023504:	080234a1 	.word	0x080234a1
 8023508:	080234a1 	.word	0x080234a1
 802350c:	080235eb 	.word	0x080235eb
 8023510:	682b      	ldr	r3, [r5, #0]
 8023512:	1d1a      	adds	r2, r3, #4
 8023514:	681b      	ldr	r3, [r3, #0]
 8023516:	602a      	str	r2, [r5, #0]
 8023518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802351c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023520:	2301      	movs	r3, #1
 8023522:	e09f      	b.n	8023664 <_printf_i+0x1ec>
 8023524:	6820      	ldr	r0, [r4, #0]
 8023526:	682b      	ldr	r3, [r5, #0]
 8023528:	0607      	lsls	r7, r0, #24
 802352a:	f103 0104 	add.w	r1, r3, #4
 802352e:	6029      	str	r1, [r5, #0]
 8023530:	d501      	bpl.n	8023536 <_printf_i+0xbe>
 8023532:	681e      	ldr	r6, [r3, #0]
 8023534:	e003      	b.n	802353e <_printf_i+0xc6>
 8023536:	0646      	lsls	r6, r0, #25
 8023538:	d5fb      	bpl.n	8023532 <_printf_i+0xba>
 802353a:	f9b3 6000 	ldrsh.w	r6, [r3]
 802353e:	2e00      	cmp	r6, #0
 8023540:	da03      	bge.n	802354a <_printf_i+0xd2>
 8023542:	232d      	movs	r3, #45	; 0x2d
 8023544:	4276      	negs	r6, r6
 8023546:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802354a:	485a      	ldr	r0, [pc, #360]	; (80236b4 <_printf_i+0x23c>)
 802354c:	230a      	movs	r3, #10
 802354e:	e012      	b.n	8023576 <_printf_i+0xfe>
 8023550:	682b      	ldr	r3, [r5, #0]
 8023552:	6820      	ldr	r0, [r4, #0]
 8023554:	1d19      	adds	r1, r3, #4
 8023556:	6029      	str	r1, [r5, #0]
 8023558:	0605      	lsls	r5, r0, #24
 802355a:	d501      	bpl.n	8023560 <_printf_i+0xe8>
 802355c:	681e      	ldr	r6, [r3, #0]
 802355e:	e002      	b.n	8023566 <_printf_i+0xee>
 8023560:	0641      	lsls	r1, r0, #25
 8023562:	d5fb      	bpl.n	802355c <_printf_i+0xe4>
 8023564:	881e      	ldrh	r6, [r3, #0]
 8023566:	4853      	ldr	r0, [pc, #332]	; (80236b4 <_printf_i+0x23c>)
 8023568:	2f6f      	cmp	r7, #111	; 0x6f
 802356a:	bf0c      	ite	eq
 802356c:	2308      	moveq	r3, #8
 802356e:	230a      	movne	r3, #10
 8023570:	2100      	movs	r1, #0
 8023572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023576:	6865      	ldr	r5, [r4, #4]
 8023578:	60a5      	str	r5, [r4, #8]
 802357a:	2d00      	cmp	r5, #0
 802357c:	bfa2      	ittt	ge
 802357e:	6821      	ldrge	r1, [r4, #0]
 8023580:	f021 0104 	bicge.w	r1, r1, #4
 8023584:	6021      	strge	r1, [r4, #0]
 8023586:	b90e      	cbnz	r6, 802358c <_printf_i+0x114>
 8023588:	2d00      	cmp	r5, #0
 802358a:	d04b      	beq.n	8023624 <_printf_i+0x1ac>
 802358c:	4615      	mov	r5, r2
 802358e:	fbb6 f1f3 	udiv	r1, r6, r3
 8023592:	fb03 6711 	mls	r7, r3, r1, r6
 8023596:	5dc7      	ldrb	r7, [r0, r7]
 8023598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802359c:	4637      	mov	r7, r6
 802359e:	42bb      	cmp	r3, r7
 80235a0:	460e      	mov	r6, r1
 80235a2:	d9f4      	bls.n	802358e <_printf_i+0x116>
 80235a4:	2b08      	cmp	r3, #8
 80235a6:	d10b      	bne.n	80235c0 <_printf_i+0x148>
 80235a8:	6823      	ldr	r3, [r4, #0]
 80235aa:	07de      	lsls	r6, r3, #31
 80235ac:	d508      	bpl.n	80235c0 <_printf_i+0x148>
 80235ae:	6923      	ldr	r3, [r4, #16]
 80235b0:	6861      	ldr	r1, [r4, #4]
 80235b2:	4299      	cmp	r1, r3
 80235b4:	bfde      	ittt	le
 80235b6:	2330      	movle	r3, #48	; 0x30
 80235b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80235bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80235c0:	1b52      	subs	r2, r2, r5
 80235c2:	6122      	str	r2, [r4, #16]
 80235c4:	f8cd a000 	str.w	sl, [sp]
 80235c8:	464b      	mov	r3, r9
 80235ca:	aa03      	add	r2, sp, #12
 80235cc:	4621      	mov	r1, r4
 80235ce:	4640      	mov	r0, r8
 80235d0:	f7ff fee4 	bl	802339c <_printf_common>
 80235d4:	3001      	adds	r0, #1
 80235d6:	d14a      	bne.n	802366e <_printf_i+0x1f6>
 80235d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80235dc:	b004      	add	sp, #16
 80235de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235e2:	6823      	ldr	r3, [r4, #0]
 80235e4:	f043 0320 	orr.w	r3, r3, #32
 80235e8:	6023      	str	r3, [r4, #0]
 80235ea:	4833      	ldr	r0, [pc, #204]	; (80236b8 <_printf_i+0x240>)
 80235ec:	2778      	movs	r7, #120	; 0x78
 80235ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80235f2:	6823      	ldr	r3, [r4, #0]
 80235f4:	6829      	ldr	r1, [r5, #0]
 80235f6:	061f      	lsls	r7, r3, #24
 80235f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80235fc:	d402      	bmi.n	8023604 <_printf_i+0x18c>
 80235fe:	065f      	lsls	r7, r3, #25
 8023600:	bf48      	it	mi
 8023602:	b2b6      	uxthmi	r6, r6
 8023604:	07df      	lsls	r7, r3, #31
 8023606:	bf48      	it	mi
 8023608:	f043 0320 	orrmi.w	r3, r3, #32
 802360c:	6029      	str	r1, [r5, #0]
 802360e:	bf48      	it	mi
 8023610:	6023      	strmi	r3, [r4, #0]
 8023612:	b91e      	cbnz	r6, 802361c <_printf_i+0x1a4>
 8023614:	6823      	ldr	r3, [r4, #0]
 8023616:	f023 0320 	bic.w	r3, r3, #32
 802361a:	6023      	str	r3, [r4, #0]
 802361c:	2310      	movs	r3, #16
 802361e:	e7a7      	b.n	8023570 <_printf_i+0xf8>
 8023620:	4824      	ldr	r0, [pc, #144]	; (80236b4 <_printf_i+0x23c>)
 8023622:	e7e4      	b.n	80235ee <_printf_i+0x176>
 8023624:	4615      	mov	r5, r2
 8023626:	e7bd      	b.n	80235a4 <_printf_i+0x12c>
 8023628:	682b      	ldr	r3, [r5, #0]
 802362a:	6826      	ldr	r6, [r4, #0]
 802362c:	6961      	ldr	r1, [r4, #20]
 802362e:	1d18      	adds	r0, r3, #4
 8023630:	6028      	str	r0, [r5, #0]
 8023632:	0635      	lsls	r5, r6, #24
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	d501      	bpl.n	802363c <_printf_i+0x1c4>
 8023638:	6019      	str	r1, [r3, #0]
 802363a:	e002      	b.n	8023642 <_printf_i+0x1ca>
 802363c:	0670      	lsls	r0, r6, #25
 802363e:	d5fb      	bpl.n	8023638 <_printf_i+0x1c0>
 8023640:	8019      	strh	r1, [r3, #0]
 8023642:	2300      	movs	r3, #0
 8023644:	6123      	str	r3, [r4, #16]
 8023646:	4615      	mov	r5, r2
 8023648:	e7bc      	b.n	80235c4 <_printf_i+0x14c>
 802364a:	682b      	ldr	r3, [r5, #0]
 802364c:	1d1a      	adds	r2, r3, #4
 802364e:	602a      	str	r2, [r5, #0]
 8023650:	681d      	ldr	r5, [r3, #0]
 8023652:	6862      	ldr	r2, [r4, #4]
 8023654:	2100      	movs	r1, #0
 8023656:	4628      	mov	r0, r5
 8023658:	f7dc fdca 	bl	80001f0 <memchr>
 802365c:	b108      	cbz	r0, 8023662 <_printf_i+0x1ea>
 802365e:	1b40      	subs	r0, r0, r5
 8023660:	6060      	str	r0, [r4, #4]
 8023662:	6863      	ldr	r3, [r4, #4]
 8023664:	6123      	str	r3, [r4, #16]
 8023666:	2300      	movs	r3, #0
 8023668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802366c:	e7aa      	b.n	80235c4 <_printf_i+0x14c>
 802366e:	6923      	ldr	r3, [r4, #16]
 8023670:	462a      	mov	r2, r5
 8023672:	4649      	mov	r1, r9
 8023674:	4640      	mov	r0, r8
 8023676:	47d0      	blx	sl
 8023678:	3001      	adds	r0, #1
 802367a:	d0ad      	beq.n	80235d8 <_printf_i+0x160>
 802367c:	6823      	ldr	r3, [r4, #0]
 802367e:	079b      	lsls	r3, r3, #30
 8023680:	d413      	bmi.n	80236aa <_printf_i+0x232>
 8023682:	68e0      	ldr	r0, [r4, #12]
 8023684:	9b03      	ldr	r3, [sp, #12]
 8023686:	4298      	cmp	r0, r3
 8023688:	bfb8      	it	lt
 802368a:	4618      	movlt	r0, r3
 802368c:	e7a6      	b.n	80235dc <_printf_i+0x164>
 802368e:	2301      	movs	r3, #1
 8023690:	4632      	mov	r2, r6
 8023692:	4649      	mov	r1, r9
 8023694:	4640      	mov	r0, r8
 8023696:	47d0      	blx	sl
 8023698:	3001      	adds	r0, #1
 802369a:	d09d      	beq.n	80235d8 <_printf_i+0x160>
 802369c:	3501      	adds	r5, #1
 802369e:	68e3      	ldr	r3, [r4, #12]
 80236a0:	9903      	ldr	r1, [sp, #12]
 80236a2:	1a5b      	subs	r3, r3, r1
 80236a4:	42ab      	cmp	r3, r5
 80236a6:	dcf2      	bgt.n	802368e <_printf_i+0x216>
 80236a8:	e7eb      	b.n	8023682 <_printf_i+0x20a>
 80236aa:	2500      	movs	r5, #0
 80236ac:	f104 0619 	add.w	r6, r4, #25
 80236b0:	e7f5      	b.n	802369e <_printf_i+0x226>
 80236b2:	bf00      	nop
 80236b4:	0802c9ac 	.word	0x0802c9ac
 80236b8:	0802c9bd 	.word	0x0802c9bd

080236bc <std>:
 80236bc:	2300      	movs	r3, #0
 80236be:	b510      	push	{r4, lr}
 80236c0:	4604      	mov	r4, r0
 80236c2:	e9c0 3300 	strd	r3, r3, [r0]
 80236c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80236ca:	6083      	str	r3, [r0, #8]
 80236cc:	8181      	strh	r1, [r0, #12]
 80236ce:	6643      	str	r3, [r0, #100]	; 0x64
 80236d0:	81c2      	strh	r2, [r0, #14]
 80236d2:	6183      	str	r3, [r0, #24]
 80236d4:	4619      	mov	r1, r3
 80236d6:	2208      	movs	r2, #8
 80236d8:	305c      	adds	r0, #92	; 0x5c
 80236da:	f000 fa89 	bl	8023bf0 <memset>
 80236de:	4b0d      	ldr	r3, [pc, #52]	; (8023714 <std+0x58>)
 80236e0:	6263      	str	r3, [r4, #36]	; 0x24
 80236e2:	4b0d      	ldr	r3, [pc, #52]	; (8023718 <std+0x5c>)
 80236e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80236e6:	4b0d      	ldr	r3, [pc, #52]	; (802371c <std+0x60>)
 80236e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80236ea:	4b0d      	ldr	r3, [pc, #52]	; (8023720 <std+0x64>)
 80236ec:	6323      	str	r3, [r4, #48]	; 0x30
 80236ee:	4b0d      	ldr	r3, [pc, #52]	; (8023724 <std+0x68>)
 80236f0:	6224      	str	r4, [r4, #32]
 80236f2:	429c      	cmp	r4, r3
 80236f4:	d006      	beq.n	8023704 <std+0x48>
 80236f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80236fa:	4294      	cmp	r4, r2
 80236fc:	d002      	beq.n	8023704 <std+0x48>
 80236fe:	33d0      	adds	r3, #208	; 0xd0
 8023700:	429c      	cmp	r4, r3
 8023702:	d105      	bne.n	8023710 <std+0x54>
 8023704:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802370c:	f001 bbc0 	b.w	8024e90 <__retarget_lock_init_recursive>
 8023710:	bd10      	pop	{r4, pc}
 8023712:	bf00      	nop
 8023714:	080239e9 	.word	0x080239e9
 8023718:	08023a0f 	.word	0x08023a0f
 802371c:	08023a47 	.word	0x08023a47
 8023720:	08023a6b 	.word	0x08023a6b
 8023724:	20016364 	.word	0x20016364

08023728 <stdio_exit_handler>:
 8023728:	4a02      	ldr	r2, [pc, #8]	; (8023734 <stdio_exit_handler+0xc>)
 802372a:	4903      	ldr	r1, [pc, #12]	; (8023738 <stdio_exit_handler+0x10>)
 802372c:	4803      	ldr	r0, [pc, #12]	; (802373c <stdio_exit_handler+0x14>)
 802372e:	f000 b87b 	b.w	8023828 <_fwalk_sglue>
 8023732:	bf00      	nop
 8023734:	20000040 	.word	0x20000040
 8023738:	08026b35 	.word	0x08026b35
 802373c:	20000054 	.word	0x20000054

08023740 <cleanup_stdio>:
 8023740:	6841      	ldr	r1, [r0, #4]
 8023742:	4b0c      	ldr	r3, [pc, #48]	; (8023774 <cleanup_stdio+0x34>)
 8023744:	4299      	cmp	r1, r3
 8023746:	b510      	push	{r4, lr}
 8023748:	4604      	mov	r4, r0
 802374a:	d001      	beq.n	8023750 <cleanup_stdio+0x10>
 802374c:	f003 f9f2 	bl	8026b34 <_fflush_r>
 8023750:	68a1      	ldr	r1, [r4, #8]
 8023752:	4b09      	ldr	r3, [pc, #36]	; (8023778 <cleanup_stdio+0x38>)
 8023754:	4299      	cmp	r1, r3
 8023756:	d002      	beq.n	802375e <cleanup_stdio+0x1e>
 8023758:	4620      	mov	r0, r4
 802375a:	f003 f9eb 	bl	8026b34 <_fflush_r>
 802375e:	68e1      	ldr	r1, [r4, #12]
 8023760:	4b06      	ldr	r3, [pc, #24]	; (802377c <cleanup_stdio+0x3c>)
 8023762:	4299      	cmp	r1, r3
 8023764:	d004      	beq.n	8023770 <cleanup_stdio+0x30>
 8023766:	4620      	mov	r0, r4
 8023768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802376c:	f003 b9e2 	b.w	8026b34 <_fflush_r>
 8023770:	bd10      	pop	{r4, pc}
 8023772:	bf00      	nop
 8023774:	20016364 	.word	0x20016364
 8023778:	200163cc 	.word	0x200163cc
 802377c:	20016434 	.word	0x20016434

08023780 <global_stdio_init.part.0>:
 8023780:	b510      	push	{r4, lr}
 8023782:	4b0b      	ldr	r3, [pc, #44]	; (80237b0 <global_stdio_init.part.0+0x30>)
 8023784:	4c0b      	ldr	r4, [pc, #44]	; (80237b4 <global_stdio_init.part.0+0x34>)
 8023786:	4a0c      	ldr	r2, [pc, #48]	; (80237b8 <global_stdio_init.part.0+0x38>)
 8023788:	601a      	str	r2, [r3, #0]
 802378a:	4620      	mov	r0, r4
 802378c:	2200      	movs	r2, #0
 802378e:	2104      	movs	r1, #4
 8023790:	f7ff ff94 	bl	80236bc <std>
 8023794:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023798:	2201      	movs	r2, #1
 802379a:	2109      	movs	r1, #9
 802379c:	f7ff ff8e 	bl	80236bc <std>
 80237a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80237a4:	2202      	movs	r2, #2
 80237a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237aa:	2112      	movs	r1, #18
 80237ac:	f7ff bf86 	b.w	80236bc <std>
 80237b0:	2001649c 	.word	0x2001649c
 80237b4:	20016364 	.word	0x20016364
 80237b8:	08023729 	.word	0x08023729

080237bc <__sfp_lock_acquire>:
 80237bc:	4801      	ldr	r0, [pc, #4]	; (80237c4 <__sfp_lock_acquire+0x8>)
 80237be:	f001 bb69 	b.w	8024e94 <__retarget_lock_acquire_recursive>
 80237c2:	bf00      	nop
 80237c4:	200164ca 	.word	0x200164ca

080237c8 <__sfp_lock_release>:
 80237c8:	4801      	ldr	r0, [pc, #4]	; (80237d0 <__sfp_lock_release+0x8>)
 80237ca:	f001 bb65 	b.w	8024e98 <__retarget_lock_release_recursive>
 80237ce:	bf00      	nop
 80237d0:	200164ca 	.word	0x200164ca

080237d4 <__sinit>:
 80237d4:	b510      	push	{r4, lr}
 80237d6:	4604      	mov	r4, r0
 80237d8:	f7ff fff0 	bl	80237bc <__sfp_lock_acquire>
 80237dc:	6a23      	ldr	r3, [r4, #32]
 80237de:	b11b      	cbz	r3, 80237e8 <__sinit+0x14>
 80237e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80237e4:	f7ff bff0 	b.w	80237c8 <__sfp_lock_release>
 80237e8:	4b04      	ldr	r3, [pc, #16]	; (80237fc <__sinit+0x28>)
 80237ea:	6223      	str	r3, [r4, #32]
 80237ec:	4b04      	ldr	r3, [pc, #16]	; (8023800 <__sinit+0x2c>)
 80237ee:	681b      	ldr	r3, [r3, #0]
 80237f0:	2b00      	cmp	r3, #0
 80237f2:	d1f5      	bne.n	80237e0 <__sinit+0xc>
 80237f4:	f7ff ffc4 	bl	8023780 <global_stdio_init.part.0>
 80237f8:	e7f2      	b.n	80237e0 <__sinit+0xc>
 80237fa:	bf00      	nop
 80237fc:	08023741 	.word	0x08023741
 8023800:	2001649c 	.word	0x2001649c

08023804 <fiprintf>:
 8023804:	b40e      	push	{r1, r2, r3}
 8023806:	b503      	push	{r0, r1, lr}
 8023808:	4601      	mov	r1, r0
 802380a:	ab03      	add	r3, sp, #12
 802380c:	4805      	ldr	r0, [pc, #20]	; (8023824 <fiprintf+0x20>)
 802380e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023812:	6800      	ldr	r0, [r0, #0]
 8023814:	9301      	str	r3, [sp, #4]
 8023816:	f002 ffed 	bl	80267f4 <_vfiprintf_r>
 802381a:	b002      	add	sp, #8
 802381c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023820:	b003      	add	sp, #12
 8023822:	4770      	bx	lr
 8023824:	200000a0 	.word	0x200000a0

08023828 <_fwalk_sglue>:
 8023828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802382c:	4607      	mov	r7, r0
 802382e:	4688      	mov	r8, r1
 8023830:	4614      	mov	r4, r2
 8023832:	2600      	movs	r6, #0
 8023834:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023838:	f1b9 0901 	subs.w	r9, r9, #1
 802383c:	d505      	bpl.n	802384a <_fwalk_sglue+0x22>
 802383e:	6824      	ldr	r4, [r4, #0]
 8023840:	2c00      	cmp	r4, #0
 8023842:	d1f7      	bne.n	8023834 <_fwalk_sglue+0xc>
 8023844:	4630      	mov	r0, r6
 8023846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802384a:	89ab      	ldrh	r3, [r5, #12]
 802384c:	2b01      	cmp	r3, #1
 802384e:	d907      	bls.n	8023860 <_fwalk_sglue+0x38>
 8023850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023854:	3301      	adds	r3, #1
 8023856:	d003      	beq.n	8023860 <_fwalk_sglue+0x38>
 8023858:	4629      	mov	r1, r5
 802385a:	4638      	mov	r0, r7
 802385c:	47c0      	blx	r8
 802385e:	4306      	orrs	r6, r0
 8023860:	3568      	adds	r5, #104	; 0x68
 8023862:	e7e9      	b.n	8023838 <_fwalk_sglue+0x10>

08023864 <iprintf>:
 8023864:	b40f      	push	{r0, r1, r2, r3}
 8023866:	b507      	push	{r0, r1, r2, lr}
 8023868:	4906      	ldr	r1, [pc, #24]	; (8023884 <iprintf+0x20>)
 802386a:	ab04      	add	r3, sp, #16
 802386c:	6808      	ldr	r0, [r1, #0]
 802386e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023872:	6881      	ldr	r1, [r0, #8]
 8023874:	9301      	str	r3, [sp, #4]
 8023876:	f002 ffbd 	bl	80267f4 <_vfiprintf_r>
 802387a:	b003      	add	sp, #12
 802387c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023880:	b004      	add	sp, #16
 8023882:	4770      	bx	lr
 8023884:	200000a0 	.word	0x200000a0

08023888 <_puts_r>:
 8023888:	6a03      	ldr	r3, [r0, #32]
 802388a:	b570      	push	{r4, r5, r6, lr}
 802388c:	6884      	ldr	r4, [r0, #8]
 802388e:	4605      	mov	r5, r0
 8023890:	460e      	mov	r6, r1
 8023892:	b90b      	cbnz	r3, 8023898 <_puts_r+0x10>
 8023894:	f7ff ff9e 	bl	80237d4 <__sinit>
 8023898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802389a:	07db      	lsls	r3, r3, #31
 802389c:	d405      	bmi.n	80238aa <_puts_r+0x22>
 802389e:	89a3      	ldrh	r3, [r4, #12]
 80238a0:	0598      	lsls	r0, r3, #22
 80238a2:	d402      	bmi.n	80238aa <_puts_r+0x22>
 80238a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80238a6:	f001 faf5 	bl	8024e94 <__retarget_lock_acquire_recursive>
 80238aa:	89a3      	ldrh	r3, [r4, #12]
 80238ac:	0719      	lsls	r1, r3, #28
 80238ae:	d513      	bpl.n	80238d8 <_puts_r+0x50>
 80238b0:	6923      	ldr	r3, [r4, #16]
 80238b2:	b18b      	cbz	r3, 80238d8 <_puts_r+0x50>
 80238b4:	3e01      	subs	r6, #1
 80238b6:	68a3      	ldr	r3, [r4, #8]
 80238b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80238bc:	3b01      	subs	r3, #1
 80238be:	60a3      	str	r3, [r4, #8]
 80238c0:	b9e9      	cbnz	r1, 80238fe <_puts_r+0x76>
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	da2e      	bge.n	8023924 <_puts_r+0x9c>
 80238c6:	4622      	mov	r2, r4
 80238c8:	210a      	movs	r1, #10
 80238ca:	4628      	mov	r0, r5
 80238cc:	f000 f8d1 	bl	8023a72 <__swbuf_r>
 80238d0:	3001      	adds	r0, #1
 80238d2:	d007      	beq.n	80238e4 <_puts_r+0x5c>
 80238d4:	250a      	movs	r5, #10
 80238d6:	e007      	b.n	80238e8 <_puts_r+0x60>
 80238d8:	4621      	mov	r1, r4
 80238da:	4628      	mov	r0, r5
 80238dc:	f000 f906 	bl	8023aec <__swsetup_r>
 80238e0:	2800      	cmp	r0, #0
 80238e2:	d0e7      	beq.n	80238b4 <_puts_r+0x2c>
 80238e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80238e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80238ea:	07da      	lsls	r2, r3, #31
 80238ec:	d405      	bmi.n	80238fa <_puts_r+0x72>
 80238ee:	89a3      	ldrh	r3, [r4, #12]
 80238f0:	059b      	lsls	r3, r3, #22
 80238f2:	d402      	bmi.n	80238fa <_puts_r+0x72>
 80238f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80238f6:	f001 facf 	bl	8024e98 <__retarget_lock_release_recursive>
 80238fa:	4628      	mov	r0, r5
 80238fc:	bd70      	pop	{r4, r5, r6, pc}
 80238fe:	2b00      	cmp	r3, #0
 8023900:	da04      	bge.n	802390c <_puts_r+0x84>
 8023902:	69a2      	ldr	r2, [r4, #24]
 8023904:	429a      	cmp	r2, r3
 8023906:	dc06      	bgt.n	8023916 <_puts_r+0x8e>
 8023908:	290a      	cmp	r1, #10
 802390a:	d004      	beq.n	8023916 <_puts_r+0x8e>
 802390c:	6823      	ldr	r3, [r4, #0]
 802390e:	1c5a      	adds	r2, r3, #1
 8023910:	6022      	str	r2, [r4, #0]
 8023912:	7019      	strb	r1, [r3, #0]
 8023914:	e7cf      	b.n	80238b6 <_puts_r+0x2e>
 8023916:	4622      	mov	r2, r4
 8023918:	4628      	mov	r0, r5
 802391a:	f000 f8aa 	bl	8023a72 <__swbuf_r>
 802391e:	3001      	adds	r0, #1
 8023920:	d1c9      	bne.n	80238b6 <_puts_r+0x2e>
 8023922:	e7df      	b.n	80238e4 <_puts_r+0x5c>
 8023924:	6823      	ldr	r3, [r4, #0]
 8023926:	250a      	movs	r5, #10
 8023928:	1c5a      	adds	r2, r3, #1
 802392a:	6022      	str	r2, [r4, #0]
 802392c:	701d      	strb	r5, [r3, #0]
 802392e:	e7db      	b.n	80238e8 <_puts_r+0x60>

08023930 <puts>:
 8023930:	4b02      	ldr	r3, [pc, #8]	; (802393c <puts+0xc>)
 8023932:	4601      	mov	r1, r0
 8023934:	6818      	ldr	r0, [r3, #0]
 8023936:	f7ff bfa7 	b.w	8023888 <_puts_r>
 802393a:	bf00      	nop
 802393c:	200000a0 	.word	0x200000a0

08023940 <sniprintf>:
 8023940:	b40c      	push	{r2, r3}
 8023942:	b530      	push	{r4, r5, lr}
 8023944:	4b17      	ldr	r3, [pc, #92]	; (80239a4 <sniprintf+0x64>)
 8023946:	1e0c      	subs	r4, r1, #0
 8023948:	681d      	ldr	r5, [r3, #0]
 802394a:	b09d      	sub	sp, #116	; 0x74
 802394c:	da08      	bge.n	8023960 <sniprintf+0x20>
 802394e:	238b      	movs	r3, #139	; 0x8b
 8023950:	602b      	str	r3, [r5, #0]
 8023952:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023956:	b01d      	add	sp, #116	; 0x74
 8023958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802395c:	b002      	add	sp, #8
 802395e:	4770      	bx	lr
 8023960:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023964:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023968:	bf14      	ite	ne
 802396a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 802396e:	4623      	moveq	r3, r4
 8023970:	9304      	str	r3, [sp, #16]
 8023972:	9307      	str	r3, [sp, #28]
 8023974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8023978:	9002      	str	r0, [sp, #8]
 802397a:	9006      	str	r0, [sp, #24]
 802397c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8023980:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023982:	ab21      	add	r3, sp, #132	; 0x84
 8023984:	a902      	add	r1, sp, #8
 8023986:	4628      	mov	r0, r5
 8023988:	9301      	str	r3, [sp, #4]
 802398a:	f002 fe0b 	bl	80265a4 <_svfiprintf_r>
 802398e:	1c43      	adds	r3, r0, #1
 8023990:	bfbc      	itt	lt
 8023992:	238b      	movlt	r3, #139	; 0x8b
 8023994:	602b      	strlt	r3, [r5, #0]
 8023996:	2c00      	cmp	r4, #0
 8023998:	d0dd      	beq.n	8023956 <sniprintf+0x16>
 802399a:	9b02      	ldr	r3, [sp, #8]
 802399c:	2200      	movs	r2, #0
 802399e:	701a      	strb	r2, [r3, #0]
 80239a0:	e7d9      	b.n	8023956 <sniprintf+0x16>
 80239a2:	bf00      	nop
 80239a4:	200000a0 	.word	0x200000a0

080239a8 <siprintf>:
 80239a8:	b40e      	push	{r1, r2, r3}
 80239aa:	b500      	push	{lr}
 80239ac:	b09c      	sub	sp, #112	; 0x70
 80239ae:	ab1d      	add	r3, sp, #116	; 0x74
 80239b0:	9002      	str	r0, [sp, #8]
 80239b2:	9006      	str	r0, [sp, #24]
 80239b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80239b8:	4809      	ldr	r0, [pc, #36]	; (80239e0 <siprintf+0x38>)
 80239ba:	9107      	str	r1, [sp, #28]
 80239bc:	9104      	str	r1, [sp, #16]
 80239be:	4909      	ldr	r1, [pc, #36]	; (80239e4 <siprintf+0x3c>)
 80239c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80239c4:	9105      	str	r1, [sp, #20]
 80239c6:	6800      	ldr	r0, [r0, #0]
 80239c8:	9301      	str	r3, [sp, #4]
 80239ca:	a902      	add	r1, sp, #8
 80239cc:	f002 fdea 	bl	80265a4 <_svfiprintf_r>
 80239d0:	9b02      	ldr	r3, [sp, #8]
 80239d2:	2200      	movs	r2, #0
 80239d4:	701a      	strb	r2, [r3, #0]
 80239d6:	b01c      	add	sp, #112	; 0x70
 80239d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80239dc:	b003      	add	sp, #12
 80239de:	4770      	bx	lr
 80239e0:	200000a0 	.word	0x200000a0
 80239e4:	ffff0208 	.word	0xffff0208

080239e8 <__sread>:
 80239e8:	b510      	push	{r4, lr}
 80239ea:	460c      	mov	r4, r1
 80239ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80239f0:	f001 f9f0 	bl	8024dd4 <_read_r>
 80239f4:	2800      	cmp	r0, #0
 80239f6:	bfab      	itete	ge
 80239f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80239fa:	89a3      	ldrhlt	r3, [r4, #12]
 80239fc:	181b      	addge	r3, r3, r0
 80239fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023a02:	bfac      	ite	ge
 8023a04:	6563      	strge	r3, [r4, #84]	; 0x54
 8023a06:	81a3      	strhlt	r3, [r4, #12]
 8023a08:	bd10      	pop	{r4, pc}

08023a0a <__seofread>:
 8023a0a:	2000      	movs	r0, #0
 8023a0c:	4770      	bx	lr

08023a0e <__swrite>:
 8023a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a12:	461f      	mov	r7, r3
 8023a14:	898b      	ldrh	r3, [r1, #12]
 8023a16:	05db      	lsls	r3, r3, #23
 8023a18:	4605      	mov	r5, r0
 8023a1a:	460c      	mov	r4, r1
 8023a1c:	4616      	mov	r6, r2
 8023a1e:	d505      	bpl.n	8023a2c <__swrite+0x1e>
 8023a20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a24:	2302      	movs	r3, #2
 8023a26:	2200      	movs	r2, #0
 8023a28:	f001 f9c2 	bl	8024db0 <_lseek_r>
 8023a2c:	89a3      	ldrh	r3, [r4, #12]
 8023a2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023a36:	81a3      	strh	r3, [r4, #12]
 8023a38:	4632      	mov	r2, r6
 8023a3a:	463b      	mov	r3, r7
 8023a3c:	4628      	mov	r0, r5
 8023a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a42:	f001 b9e9 	b.w	8024e18 <_write_r>

08023a46 <__sseek>:
 8023a46:	b510      	push	{r4, lr}
 8023a48:	460c      	mov	r4, r1
 8023a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a4e:	f001 f9af 	bl	8024db0 <_lseek_r>
 8023a52:	1c43      	adds	r3, r0, #1
 8023a54:	89a3      	ldrh	r3, [r4, #12]
 8023a56:	bf15      	itete	ne
 8023a58:	6560      	strne	r0, [r4, #84]	; 0x54
 8023a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023a62:	81a3      	strheq	r3, [r4, #12]
 8023a64:	bf18      	it	ne
 8023a66:	81a3      	strhne	r3, [r4, #12]
 8023a68:	bd10      	pop	{r4, pc}

08023a6a <__sclose>:
 8023a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a6e:	f001 b939 	b.w	8024ce4 <_close_r>

08023a72 <__swbuf_r>:
 8023a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023a74:	460e      	mov	r6, r1
 8023a76:	4614      	mov	r4, r2
 8023a78:	4605      	mov	r5, r0
 8023a7a:	b118      	cbz	r0, 8023a84 <__swbuf_r+0x12>
 8023a7c:	6a03      	ldr	r3, [r0, #32]
 8023a7e:	b90b      	cbnz	r3, 8023a84 <__swbuf_r+0x12>
 8023a80:	f7ff fea8 	bl	80237d4 <__sinit>
 8023a84:	69a3      	ldr	r3, [r4, #24]
 8023a86:	60a3      	str	r3, [r4, #8]
 8023a88:	89a3      	ldrh	r3, [r4, #12]
 8023a8a:	071a      	lsls	r2, r3, #28
 8023a8c:	d525      	bpl.n	8023ada <__swbuf_r+0x68>
 8023a8e:	6923      	ldr	r3, [r4, #16]
 8023a90:	b31b      	cbz	r3, 8023ada <__swbuf_r+0x68>
 8023a92:	6823      	ldr	r3, [r4, #0]
 8023a94:	6922      	ldr	r2, [r4, #16]
 8023a96:	1a98      	subs	r0, r3, r2
 8023a98:	6963      	ldr	r3, [r4, #20]
 8023a9a:	b2f6      	uxtb	r6, r6
 8023a9c:	4283      	cmp	r3, r0
 8023a9e:	4637      	mov	r7, r6
 8023aa0:	dc04      	bgt.n	8023aac <__swbuf_r+0x3a>
 8023aa2:	4621      	mov	r1, r4
 8023aa4:	4628      	mov	r0, r5
 8023aa6:	f003 f845 	bl	8026b34 <_fflush_r>
 8023aaa:	b9e0      	cbnz	r0, 8023ae6 <__swbuf_r+0x74>
 8023aac:	68a3      	ldr	r3, [r4, #8]
 8023aae:	3b01      	subs	r3, #1
 8023ab0:	60a3      	str	r3, [r4, #8]
 8023ab2:	6823      	ldr	r3, [r4, #0]
 8023ab4:	1c5a      	adds	r2, r3, #1
 8023ab6:	6022      	str	r2, [r4, #0]
 8023ab8:	701e      	strb	r6, [r3, #0]
 8023aba:	6962      	ldr	r2, [r4, #20]
 8023abc:	1c43      	adds	r3, r0, #1
 8023abe:	429a      	cmp	r2, r3
 8023ac0:	d004      	beq.n	8023acc <__swbuf_r+0x5a>
 8023ac2:	89a3      	ldrh	r3, [r4, #12]
 8023ac4:	07db      	lsls	r3, r3, #31
 8023ac6:	d506      	bpl.n	8023ad6 <__swbuf_r+0x64>
 8023ac8:	2e0a      	cmp	r6, #10
 8023aca:	d104      	bne.n	8023ad6 <__swbuf_r+0x64>
 8023acc:	4621      	mov	r1, r4
 8023ace:	4628      	mov	r0, r5
 8023ad0:	f003 f830 	bl	8026b34 <_fflush_r>
 8023ad4:	b938      	cbnz	r0, 8023ae6 <__swbuf_r+0x74>
 8023ad6:	4638      	mov	r0, r7
 8023ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ada:	4621      	mov	r1, r4
 8023adc:	4628      	mov	r0, r5
 8023ade:	f000 f805 	bl	8023aec <__swsetup_r>
 8023ae2:	2800      	cmp	r0, #0
 8023ae4:	d0d5      	beq.n	8023a92 <__swbuf_r+0x20>
 8023ae6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8023aea:	e7f4      	b.n	8023ad6 <__swbuf_r+0x64>

08023aec <__swsetup_r>:
 8023aec:	b538      	push	{r3, r4, r5, lr}
 8023aee:	4b2a      	ldr	r3, [pc, #168]	; (8023b98 <__swsetup_r+0xac>)
 8023af0:	4605      	mov	r5, r0
 8023af2:	6818      	ldr	r0, [r3, #0]
 8023af4:	460c      	mov	r4, r1
 8023af6:	b118      	cbz	r0, 8023b00 <__swsetup_r+0x14>
 8023af8:	6a03      	ldr	r3, [r0, #32]
 8023afa:	b90b      	cbnz	r3, 8023b00 <__swsetup_r+0x14>
 8023afc:	f7ff fe6a 	bl	80237d4 <__sinit>
 8023b00:	89a3      	ldrh	r3, [r4, #12]
 8023b02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b06:	0718      	lsls	r0, r3, #28
 8023b08:	d422      	bmi.n	8023b50 <__swsetup_r+0x64>
 8023b0a:	06d9      	lsls	r1, r3, #27
 8023b0c:	d407      	bmi.n	8023b1e <__swsetup_r+0x32>
 8023b0e:	2309      	movs	r3, #9
 8023b10:	602b      	str	r3, [r5, #0]
 8023b12:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023b16:	81a3      	strh	r3, [r4, #12]
 8023b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023b1c:	e034      	b.n	8023b88 <__swsetup_r+0x9c>
 8023b1e:	0758      	lsls	r0, r3, #29
 8023b20:	d512      	bpl.n	8023b48 <__swsetup_r+0x5c>
 8023b22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023b24:	b141      	cbz	r1, 8023b38 <__swsetup_r+0x4c>
 8023b26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023b2a:	4299      	cmp	r1, r3
 8023b2c:	d002      	beq.n	8023b34 <__swsetup_r+0x48>
 8023b2e:	4628      	mov	r0, r5
 8023b30:	f002 f850 	bl	8025bd4 <_free_r>
 8023b34:	2300      	movs	r3, #0
 8023b36:	6363      	str	r3, [r4, #52]	; 0x34
 8023b38:	89a3      	ldrh	r3, [r4, #12]
 8023b3a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023b3e:	81a3      	strh	r3, [r4, #12]
 8023b40:	2300      	movs	r3, #0
 8023b42:	6063      	str	r3, [r4, #4]
 8023b44:	6923      	ldr	r3, [r4, #16]
 8023b46:	6023      	str	r3, [r4, #0]
 8023b48:	89a3      	ldrh	r3, [r4, #12]
 8023b4a:	f043 0308 	orr.w	r3, r3, #8
 8023b4e:	81a3      	strh	r3, [r4, #12]
 8023b50:	6923      	ldr	r3, [r4, #16]
 8023b52:	b94b      	cbnz	r3, 8023b68 <__swsetup_r+0x7c>
 8023b54:	89a3      	ldrh	r3, [r4, #12]
 8023b56:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023b5e:	d003      	beq.n	8023b68 <__swsetup_r+0x7c>
 8023b60:	4621      	mov	r1, r4
 8023b62:	4628      	mov	r0, r5
 8023b64:	f003 f834 	bl	8026bd0 <__smakebuf_r>
 8023b68:	89a0      	ldrh	r0, [r4, #12]
 8023b6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023b6e:	f010 0301 	ands.w	r3, r0, #1
 8023b72:	d00a      	beq.n	8023b8a <__swsetup_r+0x9e>
 8023b74:	2300      	movs	r3, #0
 8023b76:	60a3      	str	r3, [r4, #8]
 8023b78:	6963      	ldr	r3, [r4, #20]
 8023b7a:	425b      	negs	r3, r3
 8023b7c:	61a3      	str	r3, [r4, #24]
 8023b7e:	6923      	ldr	r3, [r4, #16]
 8023b80:	b943      	cbnz	r3, 8023b94 <__swsetup_r+0xa8>
 8023b82:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023b86:	d1c4      	bne.n	8023b12 <__swsetup_r+0x26>
 8023b88:	bd38      	pop	{r3, r4, r5, pc}
 8023b8a:	0781      	lsls	r1, r0, #30
 8023b8c:	bf58      	it	pl
 8023b8e:	6963      	ldrpl	r3, [r4, #20]
 8023b90:	60a3      	str	r3, [r4, #8]
 8023b92:	e7f4      	b.n	8023b7e <__swsetup_r+0x92>
 8023b94:	2000      	movs	r0, #0
 8023b96:	e7f7      	b.n	8023b88 <__swsetup_r+0x9c>
 8023b98:	200000a0 	.word	0x200000a0

08023b9c <memcmp>:
 8023b9c:	b510      	push	{r4, lr}
 8023b9e:	3901      	subs	r1, #1
 8023ba0:	4402      	add	r2, r0
 8023ba2:	4290      	cmp	r0, r2
 8023ba4:	d101      	bne.n	8023baa <memcmp+0xe>
 8023ba6:	2000      	movs	r0, #0
 8023ba8:	e005      	b.n	8023bb6 <memcmp+0x1a>
 8023baa:	7803      	ldrb	r3, [r0, #0]
 8023bac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023bb0:	42a3      	cmp	r3, r4
 8023bb2:	d001      	beq.n	8023bb8 <memcmp+0x1c>
 8023bb4:	1b18      	subs	r0, r3, r4
 8023bb6:	bd10      	pop	{r4, pc}
 8023bb8:	3001      	adds	r0, #1
 8023bba:	e7f2      	b.n	8023ba2 <memcmp+0x6>

08023bbc <memmove>:
 8023bbc:	4288      	cmp	r0, r1
 8023bbe:	b510      	push	{r4, lr}
 8023bc0:	eb01 0402 	add.w	r4, r1, r2
 8023bc4:	d902      	bls.n	8023bcc <memmove+0x10>
 8023bc6:	4284      	cmp	r4, r0
 8023bc8:	4623      	mov	r3, r4
 8023bca:	d807      	bhi.n	8023bdc <memmove+0x20>
 8023bcc:	1e43      	subs	r3, r0, #1
 8023bce:	42a1      	cmp	r1, r4
 8023bd0:	d008      	beq.n	8023be4 <memmove+0x28>
 8023bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023bda:	e7f8      	b.n	8023bce <memmove+0x12>
 8023bdc:	4402      	add	r2, r0
 8023bde:	4601      	mov	r1, r0
 8023be0:	428a      	cmp	r2, r1
 8023be2:	d100      	bne.n	8023be6 <memmove+0x2a>
 8023be4:	bd10      	pop	{r4, pc}
 8023be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023bee:	e7f7      	b.n	8023be0 <memmove+0x24>

08023bf0 <memset>:
 8023bf0:	4402      	add	r2, r0
 8023bf2:	4603      	mov	r3, r0
 8023bf4:	4293      	cmp	r3, r2
 8023bf6:	d100      	bne.n	8023bfa <memset+0xa>
 8023bf8:	4770      	bx	lr
 8023bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8023bfe:	e7f9      	b.n	8023bf4 <memset+0x4>

08023c00 <strcat>:
 8023c00:	b510      	push	{r4, lr}
 8023c02:	4602      	mov	r2, r0
 8023c04:	7814      	ldrb	r4, [r2, #0]
 8023c06:	4613      	mov	r3, r2
 8023c08:	3201      	adds	r2, #1
 8023c0a:	2c00      	cmp	r4, #0
 8023c0c:	d1fa      	bne.n	8023c04 <strcat+0x4>
 8023c0e:	3b01      	subs	r3, #1
 8023c10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023c14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023c18:	2a00      	cmp	r2, #0
 8023c1a:	d1f9      	bne.n	8023c10 <strcat+0x10>
 8023c1c:	bd10      	pop	{r4, pc}

08023c1e <strchr>:
 8023c1e:	b2c9      	uxtb	r1, r1
 8023c20:	4603      	mov	r3, r0
 8023c22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c26:	b11a      	cbz	r2, 8023c30 <strchr+0x12>
 8023c28:	428a      	cmp	r2, r1
 8023c2a:	d1f9      	bne.n	8023c20 <strchr+0x2>
 8023c2c:	4618      	mov	r0, r3
 8023c2e:	4770      	bx	lr
 8023c30:	2900      	cmp	r1, #0
 8023c32:	bf18      	it	ne
 8023c34:	2300      	movne	r3, #0
 8023c36:	e7f9      	b.n	8023c2c <strchr+0xe>

08023c38 <strcspn>:
 8023c38:	b570      	push	{r4, r5, r6, lr}
 8023c3a:	4603      	mov	r3, r0
 8023c3c:	461e      	mov	r6, r3
 8023c3e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8023c42:	b144      	cbz	r4, 8023c56 <strcspn+0x1e>
 8023c44:	1e4a      	subs	r2, r1, #1
 8023c46:	e001      	b.n	8023c4c <strcspn+0x14>
 8023c48:	42a5      	cmp	r5, r4
 8023c4a:	d004      	beq.n	8023c56 <strcspn+0x1e>
 8023c4c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8023c50:	2d00      	cmp	r5, #0
 8023c52:	d1f9      	bne.n	8023c48 <strcspn+0x10>
 8023c54:	e7f2      	b.n	8023c3c <strcspn+0x4>
 8023c56:	1a30      	subs	r0, r6, r0
 8023c58:	bd70      	pop	{r4, r5, r6, pc}

08023c5a <strncmp>:
 8023c5a:	b510      	push	{r4, lr}
 8023c5c:	b16a      	cbz	r2, 8023c7a <strncmp+0x20>
 8023c5e:	3901      	subs	r1, #1
 8023c60:	1884      	adds	r4, r0, r2
 8023c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023c66:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023c6a:	429a      	cmp	r2, r3
 8023c6c:	d103      	bne.n	8023c76 <strncmp+0x1c>
 8023c6e:	42a0      	cmp	r0, r4
 8023c70:	d001      	beq.n	8023c76 <strncmp+0x1c>
 8023c72:	2a00      	cmp	r2, #0
 8023c74:	d1f5      	bne.n	8023c62 <strncmp+0x8>
 8023c76:	1ad0      	subs	r0, r2, r3
 8023c78:	bd10      	pop	{r4, pc}
 8023c7a:	4610      	mov	r0, r2
 8023c7c:	e7fc      	b.n	8023c78 <strncmp+0x1e>

08023c7e <strncpy>:
 8023c7e:	b510      	push	{r4, lr}
 8023c80:	3901      	subs	r1, #1
 8023c82:	4603      	mov	r3, r0
 8023c84:	b132      	cbz	r2, 8023c94 <strncpy+0x16>
 8023c86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023c8a:	f803 4b01 	strb.w	r4, [r3], #1
 8023c8e:	3a01      	subs	r2, #1
 8023c90:	2c00      	cmp	r4, #0
 8023c92:	d1f7      	bne.n	8023c84 <strncpy+0x6>
 8023c94:	441a      	add	r2, r3
 8023c96:	2100      	movs	r1, #0
 8023c98:	4293      	cmp	r3, r2
 8023c9a:	d100      	bne.n	8023c9e <strncpy+0x20>
 8023c9c:	bd10      	pop	{r4, pc}
 8023c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8023ca2:	e7f9      	b.n	8023c98 <strncpy+0x1a>

08023ca4 <strspn>:
 8023ca4:	b570      	push	{r4, r5, r6, lr}
 8023ca6:	4603      	mov	r3, r0
 8023ca8:	461e      	mov	r6, r3
 8023caa:	f813 4b01 	ldrb.w	r4, [r3], #1
 8023cae:	b13c      	cbz	r4, 8023cc0 <strspn+0x1c>
 8023cb0:	1e4a      	subs	r2, r1, #1
 8023cb2:	e001      	b.n	8023cb8 <strspn+0x14>
 8023cb4:	42a5      	cmp	r5, r4
 8023cb6:	d0f7      	beq.n	8023ca8 <strspn+0x4>
 8023cb8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8023cbc:	2d00      	cmp	r5, #0
 8023cbe:	d1f9      	bne.n	8023cb4 <strspn+0x10>
 8023cc0:	1a30      	subs	r0, r6, r0
 8023cc2:	bd70      	pop	{r4, r5, r6, pc}

08023cc4 <iso_year_adjust>:
 8023cc4:	6942      	ldr	r2, [r0, #20]
 8023cc6:	2a00      	cmp	r2, #0
 8023cc8:	f240 736c 	movw	r3, #1900	; 0x76c
 8023ccc:	bfa8      	it	ge
 8023cce:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8023cd2:	4413      	add	r3, r2
 8023cd4:	0792      	lsls	r2, r2, #30
 8023cd6:	d105      	bne.n	8023ce4 <iso_year_adjust+0x20>
 8023cd8:	2164      	movs	r1, #100	; 0x64
 8023cda:	fb93 f2f1 	sdiv	r2, r3, r1
 8023cde:	fb01 3212 	mls	r2, r1, r2, r3
 8023ce2:	b9ca      	cbnz	r2, 8023d18 <iso_year_adjust+0x54>
 8023ce4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023ce8:	fb93 f1f2 	sdiv	r1, r3, r2
 8023cec:	fb02 3311 	mls	r3, r2, r1, r3
 8023cf0:	fab3 f383 	clz	r3, r3
 8023cf4:	095b      	lsrs	r3, r3, #5
 8023cf6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8023cfa:	0040      	lsls	r0, r0, #1
 8023cfc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8023d00:	4418      	add	r0, r3
 8023d02:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8023d06:	4298      	cmp	r0, r3
 8023d08:	d027      	beq.n	8023d5a <iso_year_adjust+0x96>
 8023d0a:	dc11      	bgt.n	8023d30 <iso_year_adjust+0x6c>
 8023d0c:	2801      	cmp	r0, #1
 8023d0e:	dc0a      	bgt.n	8023d26 <iso_year_adjust+0x62>
 8023d10:	43c0      	mvns	r0, r0
 8023d12:	0fc0      	lsrs	r0, r0, #31
 8023d14:	4240      	negs	r0, r0
 8023d16:	4770      	bx	lr
 8023d18:	2301      	movs	r3, #1
 8023d1a:	e7ec      	b.n	8023cf6 <iso_year_adjust+0x32>
 8023d1c:	4b10      	ldr	r3, [pc, #64]	; (8023d60 <iso_year_adjust+0x9c>)
 8023d1e:	40c3      	lsrs	r3, r0
 8023d20:	f343 0000 	sbfx	r0, r3, #0, #1
 8023d24:	4770      	bx	lr
 8023d26:	380a      	subs	r0, #10
 8023d28:	2817      	cmp	r0, #23
 8023d2a:	d9f7      	bls.n	8023d1c <iso_year_adjust+0x58>
 8023d2c:	2000      	movs	r0, #0
 8023d2e:	4770      	bx	lr
 8023d30:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8023d34:	4298      	cmp	r0, r3
 8023d36:	dc06      	bgt.n	8023d46 <iso_year_adjust+0x82>
 8023d38:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8023d3c:	4298      	cmp	r0, r3
 8023d3e:	bfd4      	ite	le
 8023d40:	2000      	movle	r0, #0
 8023d42:	2001      	movgt	r0, #1
 8023d44:	4770      	bx	lr
 8023d46:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8023d4a:	3802      	subs	r0, #2
 8023d4c:	2815      	cmp	r0, #21
 8023d4e:	d8ed      	bhi.n	8023d2c <iso_year_adjust+0x68>
 8023d50:	4b04      	ldr	r3, [pc, #16]	; (8023d64 <iso_year_adjust+0xa0>)
 8023d52:	40c3      	lsrs	r3, r0
 8023d54:	f003 0001 	and.w	r0, r3, #1
 8023d58:	4770      	bx	lr
 8023d5a:	2001      	movs	r0, #1
 8023d5c:	4770      	bx	lr
 8023d5e:	bf00      	nop
 8023d60:	00cc00cf 	.word	0x00cc00cf
 8023d64:	002a001f 	.word	0x002a001f

08023d68 <__strftime.isra.0>:
 8023d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d6c:	b08f      	sub	sp, #60	; 0x3c
 8023d6e:	461e      	mov	r6, r3
 8023d70:	2300      	movs	r3, #0
 8023d72:	4607      	mov	r7, r0
 8023d74:	460d      	mov	r5, r1
 8023d76:	9302      	str	r3, [sp, #8]
 8023d78:	461c      	mov	r4, r3
 8023d7a:	7813      	ldrb	r3, [r2, #0]
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	f000 84bf 	beq.w	8024700 <__strftime.isra.0+0x998>
 8023d82:	2b25      	cmp	r3, #37	; 0x25
 8023d84:	d11f      	bne.n	8023dc6 <__strftime.isra.0+0x5e>
 8023d86:	f892 b001 	ldrb.w	fp, [r2, #1]
 8023d8a:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8023d8e:	d024      	beq.n	8023dda <__strftime.isra.0+0x72>
 8023d90:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8023d94:	d021      	beq.n	8023dda <__strftime.isra.0+0x72>
 8023d96:	f102 0801 	add.w	r8, r2, #1
 8023d9a:	f04f 0b00 	mov.w	fp, #0
 8023d9e:	f898 2000 	ldrb.w	r2, [r8]
 8023da2:	3a31      	subs	r2, #49	; 0x31
 8023da4:	2a08      	cmp	r2, #8
 8023da6:	d81b      	bhi.n	8023de0 <__strftime.isra.0+0x78>
 8023da8:	4640      	mov	r0, r8
 8023daa:	220a      	movs	r2, #10
 8023dac:	a906      	add	r1, sp, #24
 8023dae:	f002 fb95 	bl	80264dc <strtoul>
 8023db2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8023db6:	4681      	mov	r9, r0
 8023db8:	f898 2000 	ldrb.w	r2, [r8]
 8023dbc:	2a45      	cmp	r2, #69	; 0x45
 8023dbe:	d112      	bne.n	8023de6 <__strftime.isra.0+0x7e>
 8023dc0:	f108 0801 	add.w	r8, r8, #1
 8023dc4:	e011      	b.n	8023dea <__strftime.isra.0+0x82>
 8023dc6:	1e69      	subs	r1, r5, #1
 8023dc8:	42a1      	cmp	r1, r4
 8023dca:	d802      	bhi.n	8023dd2 <__strftime.isra.0+0x6a>
 8023dcc:	2400      	movs	r4, #0
 8023dce:	f000 bc9a 	b.w	8024706 <__strftime.isra.0+0x99e>
 8023dd2:	553b      	strb	r3, [r7, r4]
 8023dd4:	3201      	adds	r2, #1
 8023dd6:	3401      	adds	r4, #1
 8023dd8:	e7cf      	b.n	8023d7a <__strftime.isra.0+0x12>
 8023dda:	f102 0802 	add.w	r8, r2, #2
 8023dde:	e7de      	b.n	8023d9e <__strftime.isra.0+0x36>
 8023de0:	f04f 0900 	mov.w	r9, #0
 8023de4:	e7e8      	b.n	8023db8 <__strftime.isra.0+0x50>
 8023de6:	2a4f      	cmp	r2, #79	; 0x4f
 8023de8:	d0ea      	beq.n	8023dc0 <__strftime.isra.0+0x58>
 8023dea:	f898 0000 	ldrb.w	r0, [r8]
 8023dee:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8023df2:	2a55      	cmp	r2, #85	; 0x55
 8023df4:	d8ea      	bhi.n	8023dcc <__strftime.isra.0+0x64>
 8023df6:	a101      	add	r1, pc, #4	; (adr r1, 8023dfc <__strftime.isra.0+0x94>)
 8023df8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8023dfc:	080246f5 	.word	0x080246f5
 8023e00:	08023dcd 	.word	0x08023dcd
 8023e04:	08023dcd 	.word	0x08023dcd
 8023e08:	08023dcd 	.word	0x08023dcd
 8023e0c:	08023dcd 	.word	0x08023dcd
 8023e10:	08023dcd 	.word	0x08023dcd
 8023e14:	08023dcd 	.word	0x08023dcd
 8023e18:	08023dcd 	.word	0x08023dcd
 8023e1c:	08023dcd 	.word	0x08023dcd
 8023e20:	08023dcd 	.word	0x08023dcd
 8023e24:	08023dcd 	.word	0x08023dcd
 8023e28:	08023dcd 	.word	0x08023dcd
 8023e2c:	08023dcd 	.word	0x08023dcd
 8023e30:	08023dcd 	.word	0x08023dcd
 8023e34:	08023dcd 	.word	0x08023dcd
 8023e38:	08023dcd 	.word	0x08023dcd
 8023e3c:	08023dcd 	.word	0x08023dcd
 8023e40:	08023dcd 	.word	0x08023dcd
 8023e44:	08023dcd 	.word	0x08023dcd
 8023e48:	08023dcd 	.word	0x08023dcd
 8023e4c:	08023dcd 	.word	0x08023dcd
 8023e50:	08023dcd 	.word	0x08023dcd
 8023e54:	08023dcd 	.word	0x08023dcd
 8023e58:	08023dcd 	.word	0x08023dcd
 8023e5c:	08023dcd 	.word	0x08023dcd
 8023e60:	08023dcd 	.word	0x08023dcd
 8023e64:	08023dcd 	.word	0x08023dcd
 8023e68:	08023dcd 	.word	0x08023dcd
 8023e6c:	08023f91 	.word	0x08023f91
 8023e70:	08023fe9 	.word	0x08023fe9
 8023e74:	08024057 	.word	0x08024057
 8023e78:	080240f5 	.word	0x080240f5
 8023e7c:	08023dcd 	.word	0x08023dcd
 8023e80:	08024141 	.word	0x08024141
 8023e84:	0802422d 	.word	0x0802422d
 8023e88:	08024321 	.word	0x08024321
 8023e8c:	0802432f 	.word	0x0802432f
 8023e90:	08023dcd 	.word	0x08023dcd
 8023e94:	08023dcd 	.word	0x08023dcd
 8023e98:	08023dcd 	.word	0x08023dcd
 8023e9c:	0802435f 	.word	0x0802435f
 8023ea0:	08023dcd 	.word	0x08023dcd
 8023ea4:	08023dcd 	.word	0x08023dcd
 8023ea8:	08024373 	.word	0x08024373
 8023eac:	08023dcd 	.word	0x08023dcd
 8023eb0:	080243c5 	.word	0x080243c5
 8023eb4:	080244d3 	.word	0x080244d3
 8023eb8:	080244e3 	.word	0x080244e3
 8023ebc:	0802450b 	.word	0x0802450b
 8023ec0:	08024549 	.word	0x08024549
 8023ec4:	080245bb 	.word	0x080245bb
 8023ec8:	0802404f 	.word	0x0802404f
 8023ecc:	080245e7 	.word	0x080245e7
 8023ed0:	080246a3 	.word	0x080246a3
 8023ed4:	08023dcd 	.word	0x08023dcd
 8023ed8:	08023dcd 	.word	0x08023dcd
 8023edc:	08023dcd 	.word	0x08023dcd
 8023ee0:	08023dcd 	.word	0x08023dcd
 8023ee4:	08023dcd 	.word	0x08023dcd
 8023ee8:	08023dcd 	.word	0x08023dcd
 8023eec:	08023f55 	.word	0x08023f55
 8023ef0:	08023fbf 	.word	0x08023fbf
 8023ef4:	08024015 	.word	0x08024015
 8023ef8:	080240d1 	.word	0x080240d1
 8023efc:	080240d1 	.word	0x080240d1
 8023f00:	08023dcd 	.word	0x08023dcd
 8023f04:	08024193 	.word	0x08024193
 8023f08:	08023fbf 	.word	0x08023fbf
 8023f0c:	08023dcd 	.word	0x08023dcd
 8023f10:	08024351 	.word	0x08024351
 8023f14:	08024321 	.word	0x08024321
 8023f18:	0802432f 	.word	0x0802432f
 8023f1c:	08024359 	.word	0x08024359
 8023f20:	08024363 	.word	0x08024363
 8023f24:	08023dcd 	.word	0x08023dcd
 8023f28:	08024373 	.word	0x08024373
 8023f2c:	08023dcd 	.word	0x08023dcd
 8023f30:	0802403f 	.word	0x0802403f
 8023f34:	080243d7 	.word	0x080243d7
 8023f38:	080244d7 	.word	0x080244d7
 8023f3c:	080244f1 	.word	0x080244f1
 8023f40:	08023dcd 	.word	0x08023dcd
 8023f44:	080245ad 	.word	0x080245ad
 8023f48:	08024047 	.word	0x08024047
 8023f4c:	080245cb 	.word	0x080245cb
 8023f50:	0802462d 	.word	0x0802462d
 8023f54:	69b3      	ldr	r3, [r6, #24]
 8023f56:	4aa9      	ldr	r2, [pc, #676]	; (80241fc <__strftime.isra.0+0x494>)
 8023f58:	3318      	adds	r3, #24
 8023f5a:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8023f5e:	4648      	mov	r0, r9
 8023f60:	f7dc f996 	bl	8000290 <strlen>
 8023f64:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8023f68:	4420      	add	r0, r4
 8023f6a:	1e6b      	subs	r3, r5, #1
 8023f6c:	42a0      	cmp	r0, r4
 8023f6e:	d107      	bne.n	8023f80 <__strftime.isra.0+0x218>
 8023f70:	f898 3000 	ldrb.w	r3, [r8]
 8023f74:	2b00      	cmp	r3, #0
 8023f76:	f000 83c3 	beq.w	8024700 <__strftime.isra.0+0x998>
 8023f7a:	f108 0201 	add.w	r2, r8, #1
 8023f7e:	e6fc      	b.n	8023d7a <__strftime.isra.0+0x12>
 8023f80:	42a3      	cmp	r3, r4
 8023f82:	f67f af23 	bls.w	8023dcc <__strftime.isra.0+0x64>
 8023f86:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8023f8a:	553a      	strb	r2, [r7, r4]
 8023f8c:	3401      	adds	r4, #1
 8023f8e:	e7ed      	b.n	8023f6c <__strftime.isra.0+0x204>
 8023f90:	69b2      	ldr	r2, [r6, #24]
 8023f92:	4b9a      	ldr	r3, [pc, #616]	; (80241fc <__strftime.isra.0+0x494>)
 8023f94:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023f98:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8023f9c:	4648      	mov	r0, r9
 8023f9e:	f7dc f977 	bl	8000290 <strlen>
 8023fa2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8023fa6:	4420      	add	r0, r4
 8023fa8:	1e6b      	subs	r3, r5, #1
 8023faa:	4284      	cmp	r4, r0
 8023fac:	d0e0      	beq.n	8023f70 <__strftime.isra.0+0x208>
 8023fae:	42a3      	cmp	r3, r4
 8023fb0:	f67f af0c 	bls.w	8023dcc <__strftime.isra.0+0x64>
 8023fb4:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8023fb8:	553a      	strb	r2, [r7, r4]
 8023fba:	3401      	adds	r4, #1
 8023fbc:	e7f5      	b.n	8023faa <__strftime.isra.0+0x242>
 8023fbe:	4b8f      	ldr	r3, [pc, #572]	; (80241fc <__strftime.isra.0+0x494>)
 8023fc0:	6932      	ldr	r2, [r6, #16]
 8023fc2:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8023fc6:	4648      	mov	r0, r9
 8023fc8:	f7dc f962 	bl	8000290 <strlen>
 8023fcc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8023fd0:	4420      	add	r0, r4
 8023fd2:	1e6b      	subs	r3, r5, #1
 8023fd4:	42a0      	cmp	r0, r4
 8023fd6:	d0cb      	beq.n	8023f70 <__strftime.isra.0+0x208>
 8023fd8:	42a3      	cmp	r3, r4
 8023fda:	f67f aef7 	bls.w	8023dcc <__strftime.isra.0+0x64>
 8023fde:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8023fe2:	553a      	strb	r2, [r7, r4]
 8023fe4:	3401      	adds	r4, #1
 8023fe6:	e7f5      	b.n	8023fd4 <__strftime.isra.0+0x26c>
 8023fe8:	6933      	ldr	r3, [r6, #16]
 8023fea:	4a84      	ldr	r2, [pc, #528]	; (80241fc <__strftime.isra.0+0x494>)
 8023fec:	330c      	adds	r3, #12
 8023fee:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8023ff2:	4648      	mov	r0, r9
 8023ff4:	f7dc f94c 	bl	8000290 <strlen>
 8023ff8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8023ffc:	4420      	add	r0, r4
 8023ffe:	1e6b      	subs	r3, r5, #1
 8024000:	42a0      	cmp	r0, r4
 8024002:	d0b5      	beq.n	8023f70 <__strftime.isra.0+0x208>
 8024004:	42a3      	cmp	r3, r4
 8024006:	f67f aee1 	bls.w	8023dcc <__strftime.isra.0+0x64>
 802400a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802400e:	553a      	strb	r2, [r7, r4]
 8024010:	3401      	adds	r4, #1
 8024012:	e7f5      	b.n	8024000 <__strftime.isra.0+0x298>
 8024014:	4b79      	ldr	r3, [pc, #484]	; (80241fc <__strftime.isra.0+0x494>)
 8024016:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 802401a:	4648      	mov	r0, r9
 802401c:	f7dc f938 	bl	8000290 <strlen>
 8024020:	f899 3000 	ldrb.w	r3, [r9]
 8024024:	2b00      	cmp	r3, #0
 8024026:	d0a3      	beq.n	8023f70 <__strftime.isra.0+0x208>
 8024028:	4633      	mov	r3, r6
 802402a:	464a      	mov	r2, r9
 802402c:	1b29      	subs	r1, r5, r4
 802402e:	1938      	adds	r0, r7, r4
 8024030:	f7ff fe9a 	bl	8023d68 <__strftime.isra.0>
 8024034:	2800      	cmp	r0, #0
 8024036:	f77f aec9 	ble.w	8023dcc <__strftime.isra.0+0x64>
 802403a:	4404      	add	r4, r0
 802403c:	e798      	b.n	8023f70 <__strftime.isra.0+0x208>
 802403e:	4b6f      	ldr	r3, [pc, #444]	; (80241fc <__strftime.isra.0+0x494>)
 8024040:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8024044:	e7e9      	b.n	802401a <__strftime.isra.0+0x2b2>
 8024046:	4b6d      	ldr	r3, [pc, #436]	; (80241fc <__strftime.isra.0+0x494>)
 8024048:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 802404c:	e7e5      	b.n	802401a <__strftime.isra.0+0x2b2>
 802404e:	4b6b      	ldr	r3, [pc, #428]	; (80241fc <__strftime.isra.0+0x494>)
 8024050:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8024054:	e7e1      	b.n	802401a <__strftime.isra.0+0x2b2>
 8024056:	496a      	ldr	r1, [pc, #424]	; (8024200 <__strftime.isra.0+0x498>)
 8024058:	f8d6 a014 	ldr.w	sl, [r6, #20]
 802405c:	458a      	cmp	sl, r1
 802405e:	bfac      	ite	ge
 8024060:	2100      	movge	r1, #0
 8024062:	2101      	movlt	r1, #1
 8024064:	f1ba 0f00 	cmp.w	sl, #0
 8024068:	db11      	blt.n	802408e <__strftime.isra.0+0x326>
 802406a:	2064      	movs	r0, #100	; 0x64
 802406c:	fb9a f0f0 	sdiv	r0, sl, r0
 8024070:	3013      	adds	r0, #19
 8024072:	f1bb 0f00 	cmp.w	fp, #0
 8024076:	d014      	beq.n	80240a2 <__strftime.isra.0+0x33a>
 8024078:	2863      	cmp	r0, #99	; 0x63
 802407a:	dd27      	ble.n	80240cc <__strftime.isra.0+0x364>
 802407c:	4b61      	ldr	r3, [pc, #388]	; (8024204 <__strftime.isra.0+0x49c>)
 802407e:	4a62      	ldr	r2, [pc, #392]	; (8024208 <__strftime.isra.0+0x4a0>)
 8024080:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024084:	bf18      	it	ne
 8024086:	461a      	movne	r2, r3
 8024088:	f8df c198 	ldr.w	ip, [pc, #408]	; 8024224 <__strftime.isra.0+0x4bc>
 802408c:	e00c      	b.n	80240a8 <__strftime.isra.0+0x340>
 802408e:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8024092:	9103      	str	r1, [sp, #12]
 8024094:	f000 ff1e 	bl	8024ed4 <abs>
 8024098:	2264      	movs	r2, #100	; 0x64
 802409a:	9903      	ldr	r1, [sp, #12]
 802409c:	fb90 f0f2 	sdiv	r0, r0, r2
 80240a0:	e7e7      	b.n	8024072 <__strftime.isra.0+0x30a>
 80240a2:	4a58      	ldr	r2, [pc, #352]	; (8024204 <__strftime.isra.0+0x49c>)
 80240a4:	f8df c180 	ldr.w	ip, [pc, #384]	; 8024228 <__strftime.isra.0+0x4c0>
 80240a8:	4b58      	ldr	r3, [pc, #352]	; (802420c <__strftime.isra.0+0x4a4>)
 80240aa:	9001      	str	r0, [sp, #4]
 80240ac:	f1b9 0f02 	cmp.w	r9, #2
 80240b0:	bf2c      	ite	cs
 80240b2:	ebc1 0109 	rsbcs	r1, r1, r9
 80240b6:	f1c1 0102 	rsbcc	r1, r1, #2
 80240ba:	9100      	str	r1, [sp, #0]
 80240bc:	4950      	ldr	r1, [pc, #320]	; (8024200 <__strftime.isra.0+0x498>)
 80240be:	458a      	cmp	sl, r1
 80240c0:	bfa8      	it	ge
 80240c2:	4613      	movge	r3, r2
 80240c4:	4662      	mov	r2, ip
 80240c6:	1b29      	subs	r1, r5, r4
 80240c8:	1938      	adds	r0, r7, r4
 80240ca:	e028      	b.n	802411e <__strftime.isra.0+0x3b6>
 80240cc:	4a4d      	ldr	r2, [pc, #308]	; (8024204 <__strftime.isra.0+0x49c>)
 80240ce:	e7db      	b.n	8024088 <__strftime.isra.0+0x320>
 80240d0:	494f      	ldr	r1, [pc, #316]	; (8024210 <__strftime.isra.0+0x4a8>)
 80240d2:	4a50      	ldr	r2, [pc, #320]	; (8024214 <__strftime.isra.0+0x4ac>)
 80240d4:	68f3      	ldr	r3, [r6, #12]
 80240d6:	2864      	cmp	r0, #100	; 0x64
 80240d8:	bf08      	it	eq
 80240da:	460a      	moveq	r2, r1
 80240dc:	1b29      	subs	r1, r5, r4
 80240de:	1938      	adds	r0, r7, r4
 80240e0:	f7ff fc2e 	bl	8023940 <sniprintf>
 80240e4:	2800      	cmp	r0, #0
 80240e6:	f6ff ae71 	blt.w	8023dcc <__strftime.isra.0+0x64>
 80240ea:	4404      	add	r4, r0
 80240ec:	42a5      	cmp	r5, r4
 80240ee:	f63f af3f 	bhi.w	8023f70 <__strftime.isra.0+0x208>
 80240f2:	e66b      	b.n	8023dcc <__strftime.isra.0+0x64>
 80240f4:	6970      	ldr	r0, [r6, #20]
 80240f6:	6933      	ldr	r3, [r6, #16]
 80240f8:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80240fc:	2800      	cmp	r0, #0
 80240fe:	eb07 0904 	add.w	r9, r7, r4
 8024102:	eba5 0104 	sub.w	r1, r5, r4
 8024106:	f103 0301 	add.w	r3, r3, #1
 802410a:	db0b      	blt.n	8024124 <__strftime.isra.0+0x3bc>
 802410c:	2264      	movs	r2, #100	; 0x64
 802410e:	fb90 fcf2 	sdiv	ip, r0, r2
 8024112:	fb02 001c 	mls	r0, r2, ip, r0
 8024116:	4a40      	ldr	r2, [pc, #256]	; (8024218 <__strftime.isra.0+0x4b0>)
 8024118:	e9cd a000 	strd	sl, r0, [sp]
 802411c:	4648      	mov	r0, r9
 802411e:	f7ff fc0f 	bl	8023940 <sniprintf>
 8024122:	e7df      	b.n	80240e4 <__strftime.isra.0+0x37c>
 8024124:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8024128:	e9cd 1303 	strd	r1, r3, [sp, #12]
 802412c:	f000 fed2 	bl	8024ed4 <abs>
 8024130:	2264      	movs	r2, #100	; 0x64
 8024132:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8024136:	fb90 fcf2 	sdiv	ip, r0, r2
 802413a:	fb0c 0012 	mls	r0, ip, r2, r0
 802413e:	e7ea      	b.n	8024116 <__strftime.isra.0+0x3ae>
 8024140:	2225      	movs	r2, #37	; 0x25
 8024142:	f88d 2018 	strb.w	r2, [sp, #24]
 8024146:	f1bb 0f00 	cmp.w	fp, #0
 802414a:	d011      	beq.n	8024170 <__strftime.isra.0+0x408>
 802414c:	f1b9 0f06 	cmp.w	r9, #6
 8024150:	bf38      	it	cc
 8024152:	f04f 0906 	movcc.w	r9, #6
 8024156:	f1b9 0306 	subs.w	r3, r9, #6
 802415a:	f88d b019 	strb.w	fp, [sp, #25]
 802415e:	d10c      	bne.n	802417a <__strftime.isra.0+0x412>
 8024160:	f10d 001a 	add.w	r0, sp, #26
 8024164:	492d      	ldr	r1, [pc, #180]	; (802421c <__strftime.isra.0+0x4b4>)
 8024166:	f000 fe98 	bl	8024e9a <strcpy>
 802416a:	4633      	mov	r3, r6
 802416c:	aa06      	add	r2, sp, #24
 802416e:	e75d      	b.n	802402c <__strftime.isra.0+0x2c4>
 8024170:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8024174:	f04f 090a 	mov.w	r9, #10
 8024178:	e7ed      	b.n	8024156 <__strftime.isra.0+0x3ee>
 802417a:	4a29      	ldr	r2, [pc, #164]	; (8024220 <__strftime.isra.0+0x4b8>)
 802417c:	211e      	movs	r1, #30
 802417e:	f10d 001a 	add.w	r0, sp, #26
 8024182:	f7ff fbdd 	bl	8023940 <sniprintf>
 8024186:	2800      	cmp	r0, #0
 8024188:	ddea      	ble.n	8024160 <__strftime.isra.0+0x3f8>
 802418a:	f10d 031a 	add.w	r3, sp, #26
 802418e:	4418      	add	r0, r3
 8024190:	e7e8      	b.n	8024164 <__strftime.isra.0+0x3fc>
 8024192:	4630      	mov	r0, r6
 8024194:	f7ff fd96 	bl	8023cc4 <iso_year_adjust>
 8024198:	4681      	mov	r9, r0
 802419a:	6970      	ldr	r0, [r6, #20]
 802419c:	2800      	cmp	r0, #0
 802419e:	db11      	blt.n	80241c4 <__strftime.isra.0+0x45c>
 80241a0:	2364      	movs	r3, #100	; 0x64
 80241a2:	fb90 f2f3 	sdiv	r2, r0, r3
 80241a6:	fb03 0012 	mls	r0, r3, r2, r0
 80241aa:	2364      	movs	r3, #100	; 0x64
 80241ac:	4481      	add	r9, r0
 80241ae:	fb99 f2f3 	sdiv	r2, r9, r3
 80241b2:	fb03 9912 	mls	r9, r3, r2, r9
 80241b6:	4499      	add	r9, r3
 80241b8:	fbb9 f2f3 	udiv	r2, r9, r3
 80241bc:	fb03 9312 	mls	r3, r3, r2, r9
 80241c0:	4a13      	ldr	r2, [pc, #76]	; (8024210 <__strftime.isra.0+0x4a8>)
 80241c2:	e78b      	b.n	80240dc <__strftime.isra.0+0x374>
 80241c4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80241c8:	f000 fe84 	bl	8024ed4 <abs>
 80241cc:	2364      	movs	r3, #100	; 0x64
 80241ce:	f1b9 0f00 	cmp.w	r9, #0
 80241d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80241d6:	fb02 0013 	mls	r0, r2, r3, r0
 80241da:	da07      	bge.n	80241ec <__strftime.isra.0+0x484>
 80241dc:	6972      	ldr	r2, [r6, #20]
 80241de:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80241e2:	429a      	cmp	r2, r3
 80241e4:	bfb8      	it	lt
 80241e6:	f04f 0901 	movlt.w	r9, #1
 80241ea:	e7de      	b.n	80241aa <__strftime.isra.0+0x442>
 80241ec:	d0dd      	beq.n	80241aa <__strftime.isra.0+0x442>
 80241ee:	6972      	ldr	r2, [r6, #20]
 80241f0:	4b03      	ldr	r3, [pc, #12]	; (8024200 <__strftime.isra.0+0x498>)
 80241f2:	429a      	cmp	r2, r3
 80241f4:	bfb8      	it	lt
 80241f6:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 80241fa:	e7d6      	b.n	80241aa <__strftime.isra.0+0x442>
 80241fc:	0802cc04 	.word	0x0802cc04
 8024200:	fffff894 	.word	0xfffff894
 8024204:	0802c82b 	.word	0x0802c82b
 8024208:	0802ca37 	.word	0x0802ca37
 802420c:	0802cefa 	.word	0x0802cefa
 8024210:	0802ca4f 	.word	0x0802ca4f
 8024214:	0802ca41 	.word	0x0802ca41
 8024218:	0802ca45 	.word	0x0802ca45
 802421c:	0802ca58 	.word	0x0802ca58
 8024220:	0802ca54 	.word	0x0802ca54
 8024224:	0802ca39 	.word	0x0802ca39
 8024228:	0802ca30 	.word	0x0802ca30
 802422c:	6971      	ldr	r1, [r6, #20]
 802422e:	4abb      	ldr	r2, [pc, #748]	; (802451c <__strftime.isra.0+0x7b4>)
 8024230:	4291      	cmp	r1, r2
 8024232:	bfac      	ite	ge
 8024234:	2300      	movge	r3, #0
 8024236:	2301      	movlt	r3, #1
 8024238:	4630      	mov	r0, r6
 802423a:	e9cd 3103 	strd	r3, r1, [sp, #12]
 802423e:	f7ff fd41 	bl	8023cc4 <iso_year_adjust>
 8024242:	9904      	ldr	r1, [sp, #16]
 8024244:	2900      	cmp	r1, #0
 8024246:	4682      	mov	sl, r0
 8024248:	db39      	blt.n	80242be <__strftime.isra.0+0x556>
 802424a:	2264      	movs	r2, #100	; 0x64
 802424c:	fb91 f2f2 	sdiv	r2, r1, r2
 8024250:	3213      	adds	r2, #19
 8024252:	6970      	ldr	r0, [r6, #20]
 8024254:	2800      	cmp	r0, #0
 8024256:	db3d      	blt.n	80242d4 <__strftime.isra.0+0x56c>
 8024258:	f04f 0c64 	mov.w	ip, #100	; 0x64
 802425c:	fb90 fefc 	sdiv	lr, r0, ip
 8024260:	fb0c 001e 	mls	r0, ip, lr, r0
 8024264:	f1ba 0f00 	cmp.w	sl, #0
 8024268:	da43      	bge.n	80242f2 <__strftime.isra.0+0x58a>
 802426a:	6971      	ldr	r1, [r6, #20]
 802426c:	4bac      	ldr	r3, [pc, #688]	; (8024520 <__strftime.isra.0+0x7b8>)
 802426e:	4299      	cmp	r1, r3
 8024270:	db4a      	blt.n	8024308 <__strftime.isra.0+0x5a0>
 8024272:	4482      	add	sl, r0
 8024274:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8024278:	d14b      	bne.n	8024312 <__strftime.isra.0+0x5aa>
 802427a:	3a01      	subs	r2, #1
 802427c:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8024280:	9b03      	ldr	r3, [sp, #12]
 8024282:	2164      	movs	r1, #100	; 0x64
 8024284:	fb01 aa02 	mla	sl, r1, r2, sl
 8024288:	2b00      	cmp	r3, #0
 802428a:	f040 8240 	bne.w	802470e <__strftime.isra.0+0x9a6>
 802428e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8024292:	d104      	bne.n	802429e <__strftime.isra.0+0x536>
 8024294:	f242 720f 	movw	r2, #9999	; 0x270f
 8024298:	4592      	cmp	sl, r2
 802429a:	f200 823c 	bhi.w	8024716 <__strftime.isra.0+0x9ae>
 802429e:	aa06      	add	r2, sp, #24
 80242a0:	2125      	movs	r1, #37	; 0x25
 80242a2:	7011      	strb	r1, [r2, #0]
 80242a4:	f1bb 0f00 	cmp.w	fp, #0
 80242a8:	f040 81bc 	bne.w	8024624 <__strftime.isra.0+0x8bc>
 80242ac:	1c50      	adds	r0, r2, #1
 80242ae:	499d      	ldr	r1, [pc, #628]	; (8024524 <__strftime.isra.0+0x7bc>)
 80242b0:	f000 fdf3 	bl	8024e9a <strcpy>
 80242b4:	f8cd a000 	str.w	sl, [sp]
 80242b8:	464b      	mov	r3, r9
 80242ba:	aa06      	add	r2, sp, #24
 80242bc:	e086      	b.n	80243cc <__strftime.isra.0+0x664>
 80242be:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80242c2:	9104      	str	r1, [sp, #16]
 80242c4:	f000 fe06 	bl	8024ed4 <abs>
 80242c8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80242cc:	9904      	ldr	r1, [sp, #16]
 80242ce:	fb90 f2fc 	sdiv	r2, r0, ip
 80242d2:	e7be      	b.n	8024252 <__strftime.isra.0+0x4ea>
 80242d4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80242d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80242dc:	f000 fdfa 	bl	8024ed4 <abs>
 80242e0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80242e4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80242e8:	fb90 fefc 	sdiv	lr, r0, ip
 80242ec:	fb0e 001c 	mls	r0, lr, ip, r0
 80242f0:	e7b8      	b.n	8024264 <__strftime.isra.0+0x4fc>
 80242f2:	d0be      	beq.n	8024272 <__strftime.isra.0+0x50a>
 80242f4:	4b89      	ldr	r3, [pc, #548]	; (802451c <__strftime.isra.0+0x7b4>)
 80242f6:	4299      	cmp	r1, r3
 80242f8:	bfb4      	ite	lt
 80242fa:	2301      	movlt	r3, #1
 80242fc:	2300      	movge	r3, #0
 80242fe:	9303      	str	r3, [sp, #12]
 8024300:	bfb8      	it	lt
 8024302:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 8024306:	e7b4      	b.n	8024272 <__strftime.isra.0+0x50a>
 8024308:	f04f 0a01 	mov.w	sl, #1
 802430c:	f8cd a00c 	str.w	sl, [sp, #12]
 8024310:	e7af      	b.n	8024272 <__strftime.isra.0+0x50a>
 8024312:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8024316:	bf04      	itt	eq
 8024318:	3201      	addeq	r2, #1
 802431a:	f04f 0a00 	moveq.w	sl, #0
 802431e:	e7af      	b.n	8024280 <__strftime.isra.0+0x518>
 8024320:	4981      	ldr	r1, [pc, #516]	; (8024528 <__strftime.isra.0+0x7c0>)
 8024322:	4a82      	ldr	r2, [pc, #520]	; (802452c <__strftime.isra.0+0x7c4>)
 8024324:	68b3      	ldr	r3, [r6, #8]
 8024326:	286b      	cmp	r0, #107	; 0x6b
 8024328:	bf08      	it	eq
 802432a:	460a      	moveq	r2, r1
 802432c:	e6d6      	b.n	80240dc <__strftime.isra.0+0x374>
 802432e:	68b3      	ldr	r3, [r6, #8]
 8024330:	b163      	cbz	r3, 802434c <__strftime.isra.0+0x5e4>
 8024332:	2b0c      	cmp	r3, #12
 8024334:	d004      	beq.n	8024340 <__strftime.isra.0+0x5d8>
 8024336:	210c      	movs	r1, #12
 8024338:	fb93 f2f1 	sdiv	r2, r3, r1
 802433c:	fb01 3312 	mls	r3, r1, r2, r3
 8024340:	497a      	ldr	r1, [pc, #488]	; (802452c <__strftime.isra.0+0x7c4>)
 8024342:	4a79      	ldr	r2, [pc, #484]	; (8024528 <__strftime.isra.0+0x7c0>)
 8024344:	2849      	cmp	r0, #73	; 0x49
 8024346:	bf08      	it	eq
 8024348:	460a      	moveq	r2, r1
 802434a:	e6c7      	b.n	80240dc <__strftime.isra.0+0x374>
 802434c:	230c      	movs	r3, #12
 802434e:	e7f7      	b.n	8024340 <__strftime.isra.0+0x5d8>
 8024350:	69f3      	ldr	r3, [r6, #28]
 8024352:	4a77      	ldr	r2, [pc, #476]	; (8024530 <__strftime.isra.0+0x7c8>)
 8024354:	3301      	adds	r3, #1
 8024356:	e6c1      	b.n	80240dc <__strftime.isra.0+0x374>
 8024358:	6933      	ldr	r3, [r6, #16]
 802435a:	3301      	adds	r3, #1
 802435c:	e730      	b.n	80241c0 <__strftime.isra.0+0x458>
 802435e:	6873      	ldr	r3, [r6, #4]
 8024360:	e72e      	b.n	80241c0 <__strftime.isra.0+0x458>
 8024362:	1e6b      	subs	r3, r5, #1
 8024364:	429c      	cmp	r4, r3
 8024366:	f4bf ad31 	bcs.w	8023dcc <__strftime.isra.0+0x64>
 802436a:	230a      	movs	r3, #10
 802436c:	553b      	strb	r3, [r7, r4]
 802436e:	3401      	adds	r4, #1
 8024370:	e5fe      	b.n	8023f70 <__strftime.isra.0+0x208>
 8024372:	68b3      	ldr	r3, [r6, #8]
 8024374:	2b0b      	cmp	r3, #11
 8024376:	4b6f      	ldr	r3, [pc, #444]	; (8024534 <__strftime.isra.0+0x7cc>)
 8024378:	bfd4      	ite	le
 802437a:	2200      	movle	r2, #0
 802437c:	2201      	movgt	r2, #1
 802437e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024382:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8024386:	4648      	mov	r0, r9
 8024388:	f7db ff82 	bl	8000290 <strlen>
 802438c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8024390:	4420      	add	r0, r4
 8024392:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8024396:	42a0      	cmp	r0, r4
 8024398:	f43f adea 	beq.w	8023f70 <__strftime.isra.0+0x208>
 802439c:	45a4      	cmp	ip, r4
 802439e:	f67f ad15 	bls.w	8023dcc <__strftime.isra.0+0x64>
 80243a2:	f898 1000 	ldrb.w	r1, [r8]
 80243a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80243aa:	2950      	cmp	r1, #80	; 0x50
 80243ac:	d107      	bne.n	80243be <__strftime.isra.0+0x656>
 80243ae:	4962      	ldr	r1, [pc, #392]	; (8024538 <__strftime.isra.0+0x7d0>)
 80243b0:	5cc9      	ldrb	r1, [r1, r3]
 80243b2:	f001 0103 	and.w	r1, r1, #3
 80243b6:	2901      	cmp	r1, #1
 80243b8:	bf08      	it	eq
 80243ba:	3320      	addeq	r3, #32
 80243bc:	b2db      	uxtb	r3, r3
 80243be:	553b      	strb	r3, [r7, r4]
 80243c0:	3401      	adds	r4, #1
 80243c2:	e7e8      	b.n	8024396 <__strftime.isra.0+0x62e>
 80243c4:	6873      	ldr	r3, [r6, #4]
 80243c6:	9300      	str	r3, [sp, #0]
 80243c8:	4a5c      	ldr	r2, [pc, #368]	; (802453c <__strftime.isra.0+0x7d4>)
 80243ca:	68b3      	ldr	r3, [r6, #8]
 80243cc:	1b29      	subs	r1, r5, r4
 80243ce:	1938      	adds	r0, r7, r4
 80243d0:	f7ff fab6 	bl	8023940 <sniprintf>
 80243d4:	e686      	b.n	80240e4 <__strftime.isra.0+0x37c>
 80243d6:	6a33      	ldr	r3, [r6, #32]
 80243d8:	2b00      	cmp	r3, #0
 80243da:	db77      	blt.n	80244cc <__strftime.isra.0+0x764>
 80243dc:	f000 fa4c 	bl	8024878 <__tz_lock>
 80243e0:	9b02      	ldr	r3, [sp, #8]
 80243e2:	b90b      	cbnz	r3, 80243e8 <__strftime.isra.0+0x680>
 80243e4:	f000 fa54 	bl	8024890 <_tzset_unlocked>
 80243e8:	f002 fc8a 	bl	8026d00 <__gettzinfo>
 80243ec:	6a33      	ldr	r3, [r6, #32]
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	bfd4      	ite	le
 80243f2:	2200      	movle	r2, #0
 80243f4:	2201      	movgt	r2, #1
 80243f6:	2328      	movs	r3, #40	; 0x28
 80243f8:	fb02 3303 	mla	r3, r2, r3, r3
 80243fc:	58c3      	ldr	r3, [r0, r3]
 80243fe:	f1c3 0900 	rsb	r9, r3, #0
 8024402:	f000 fa3f 	bl	8024884 <__tz_unlock>
 8024406:	2301      	movs	r3, #1
 8024408:	9302      	str	r3, [sp, #8]
 802440a:	6972      	ldr	r2, [r6, #20]
 802440c:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8024410:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8024414:	f16c 0c00 	sbc.w	ip, ip, #0
 8024418:	f1bc 0f00 	cmp.w	ip, #0
 802441c:	eba5 0104 	sub.w	r1, r5, r4
 8024420:	eb07 0004 	add.w	r0, r7, r4
 8024424:	da02      	bge.n	802442c <__strftime.isra.0+0x6c4>
 8024426:	3303      	adds	r3, #3
 8024428:	f14c 0c00 	adc.w	ip, ip, #0
 802442c:	089b      	lsrs	r3, r3, #2
 802442e:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8024432:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 8024436:	ea4f 0cac 	mov.w	ip, ip, asr #2
 802443a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 802443e:	fb9a fefe 	sdiv	lr, sl, lr
 8024442:	ebb3 030e 	subs.w	r3, r3, lr
 8024446:	eb6c 7eee 	sbc.w	lr, ip, lr, asr #31
 802444a:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 802444e:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8024452:	fb9a fcfc 	sdiv	ip, sl, ip
 8024456:	eb13 030c 	adds.w	r3, r3, ip
 802445a:	eb4e 7cec 	adc.w	ip, lr, ip, asr #31
 802445e:	3a46      	subs	r2, #70	; 0x46
 8024460:	f240 1e6d 	movw	lr, #365	; 0x16d
 8024464:	fb0e f202 	mul.w	r2, lr, r2
 8024468:	189b      	adds	r3, r3, r2
 802446a:	eb4c 72e2 	adc.w	r2, ip, r2, asr #31
 802446e:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8024472:	f04f 0a18 	mov.w	sl, #24
 8024476:	eb13 030c 	adds.w	r3, r3, ip
 802447a:	eb42 72ec 	adc.w	r2, r2, ip, asr #31
 802447e:	fba3 c30a 	umull	ip, r3, r3, sl
 8024482:	fb0a 3e02 	mla	lr, sl, r2, r3
 8024486:	68b3      	ldr	r3, [r6, #8]
 8024488:	eb1c 0203 	adds.w	r2, ip, r3
 802448c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8024490:	eb4e 7ee3 	adc.w	lr, lr, r3, asr #31
 8024494:	fba2 320c 	umull	r3, r2, r2, ip
 8024498:	fb0c 220e 	mla	r2, ip, lr, r2
 802449c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80244a0:	eb13 030e 	adds.w	r3, r3, lr
 80244a4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80244a8:	fba3 3e0c 	umull	r3, lr, r3, ip
 80244ac:	fb0c ee02 	mla	lr, ip, r2, lr
 80244b0:	6832      	ldr	r2, [r6, #0]
 80244b2:	189b      	adds	r3, r3, r2
 80244b4:	eb4e 7ee2 	adc.w	lr, lr, r2, asr #31
 80244b8:	ebb3 0309 	subs.w	r3, r3, r9
 80244bc:	eb6e 72e9 	sbc.w	r2, lr, r9, asr #31
 80244c0:	e9cd 3200 	strd	r3, r2, [sp]
 80244c4:	4a1e      	ldr	r2, [pc, #120]	; (8024540 <__strftime.isra.0+0x7d8>)
 80244c6:	f7ff fa3b 	bl	8023940 <sniprintf>
 80244ca:	e60b      	b.n	80240e4 <__strftime.isra.0+0x37c>
 80244cc:	f04f 0900 	mov.w	r9, #0
 80244d0:	e79b      	b.n	802440a <__strftime.isra.0+0x6a2>
 80244d2:	6833      	ldr	r3, [r6, #0]
 80244d4:	e674      	b.n	80241c0 <__strftime.isra.0+0x458>
 80244d6:	1e6b      	subs	r3, r5, #1
 80244d8:	429c      	cmp	r4, r3
 80244da:	f4bf ac77 	bcs.w	8023dcc <__strftime.isra.0+0x64>
 80244de:	2309      	movs	r3, #9
 80244e0:	e744      	b.n	802436c <__strftime.isra.0+0x604>
 80244e2:	6833      	ldr	r3, [r6, #0]
 80244e4:	9301      	str	r3, [sp, #4]
 80244e6:	6873      	ldr	r3, [r6, #4]
 80244e8:	9300      	str	r3, [sp, #0]
 80244ea:	4a16      	ldr	r2, [pc, #88]	; (8024544 <__strftime.isra.0+0x7dc>)
 80244ec:	68b3      	ldr	r3, [r6, #8]
 80244ee:	e5ea      	b.n	80240c6 <__strftime.isra.0+0x35e>
 80244f0:	1e6b      	subs	r3, r5, #1
 80244f2:	429c      	cmp	r4, r3
 80244f4:	f4bf ac6a 	bcs.w	8023dcc <__strftime.isra.0+0x64>
 80244f8:	69b3      	ldr	r3, [r6, #24]
 80244fa:	1c62      	adds	r2, r4, #1
 80244fc:	b91b      	cbnz	r3, 8024506 <__strftime.isra.0+0x79e>
 80244fe:	2337      	movs	r3, #55	; 0x37
 8024500:	553b      	strb	r3, [r7, r4]
 8024502:	4614      	mov	r4, r2
 8024504:	e534      	b.n	8023f70 <__strftime.isra.0+0x208>
 8024506:	3330      	adds	r3, #48	; 0x30
 8024508:	e7fa      	b.n	8024500 <__strftime.isra.0+0x798>
 802450a:	69f3      	ldr	r3, [r6, #28]
 802450c:	69b2      	ldr	r2, [r6, #24]
 802450e:	3307      	adds	r3, #7
 8024510:	1a9b      	subs	r3, r3, r2
 8024512:	2207      	movs	r2, #7
 8024514:	fb93 f3f2 	sdiv	r3, r3, r2
 8024518:	e652      	b.n	80241c0 <__strftime.isra.0+0x458>
 802451a:	bf00      	nop
 802451c:	fffff894 	.word	0xfffff894
 8024520:	fffff895 	.word	0xfffff895
 8024524:	0802ca60 	.word	0x0802ca60
 8024528:	0802ca41 	.word	0x0802ca41
 802452c:	0802ca4f 	.word	0x0802ca4f
 8024530:	0802ca64 	.word	0x0802ca64
 8024534:	0802cc04 	.word	0x0802cc04
 8024538:	0802c89c 	.word	0x0802c89c
 802453c:	0802ca73 	.word	0x0802ca73
 8024540:	0802ca69 	.word	0x0802ca69
 8024544:	0802ca6e 	.word	0x0802ca6e
 8024548:	4630      	mov	r0, r6
 802454a:	f7ff fbbb 	bl	8023cc4 <iso_year_adjust>
 802454e:	69b2      	ldr	r2, [r6, #24]
 8024550:	b132      	cbz	r2, 8024560 <__strftime.isra.0+0x7f8>
 8024552:	3a01      	subs	r2, #1
 8024554:	2800      	cmp	r0, #0
 8024556:	69f3      	ldr	r3, [r6, #28]
 8024558:	dc26      	bgt.n	80245a8 <__strftime.isra.0+0x840>
 802455a:	d103      	bne.n	8024564 <__strftime.isra.0+0x7fc>
 802455c:	330a      	adds	r3, #10
 802455e:	e7d7      	b.n	8024510 <__strftime.isra.0+0x7a8>
 8024560:	2206      	movs	r2, #6
 8024562:	e7f7      	b.n	8024554 <__strftime.isra.0+0x7ec>
 8024564:	1ad2      	subs	r2, r2, r3
 8024566:	6973      	ldr	r3, [r6, #20]
 8024568:	2b00      	cmp	r3, #0
 802456a:	f240 716b 	movw	r1, #1899	; 0x76b
 802456e:	bfa8      	it	ge
 8024570:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8024574:	440b      	add	r3, r1
 8024576:	0799      	lsls	r1, r3, #30
 8024578:	d105      	bne.n	8024586 <__strftime.isra.0+0x81e>
 802457a:	2064      	movs	r0, #100	; 0x64
 802457c:	fb93 f1f0 	sdiv	r1, r3, r0
 8024580:	fb00 3111 	mls	r1, r0, r1, r3
 8024584:	b971      	cbnz	r1, 80245a4 <__strftime.isra.0+0x83c>
 8024586:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802458a:	fb93 f0f1 	sdiv	r0, r3, r1
 802458e:	fb01 3310 	mls	r3, r1, r0, r3
 8024592:	fab3 f383 	clz	r3, r3
 8024596:	095b      	lsrs	r3, r3, #5
 8024598:	1ad2      	subs	r2, r2, r3
 802459a:	2a05      	cmp	r2, #5
 802459c:	bfb4      	ite	lt
 802459e:	2335      	movlt	r3, #53	; 0x35
 80245a0:	2334      	movge	r3, #52	; 0x34
 80245a2:	e60d      	b.n	80241c0 <__strftime.isra.0+0x458>
 80245a4:	2301      	movs	r3, #1
 80245a6:	e7f7      	b.n	8024598 <__strftime.isra.0+0x830>
 80245a8:	2301      	movs	r3, #1
 80245aa:	e609      	b.n	80241c0 <__strftime.isra.0+0x458>
 80245ac:	1e6b      	subs	r3, r5, #1
 80245ae:	429c      	cmp	r4, r3
 80245b0:	f4bf ac0c 	bcs.w	8023dcc <__strftime.isra.0+0x64>
 80245b4:	69b3      	ldr	r3, [r6, #24]
 80245b6:	3330      	adds	r3, #48	; 0x30
 80245b8:	e6d8      	b.n	802436c <__strftime.isra.0+0x604>
 80245ba:	69b2      	ldr	r2, [r6, #24]
 80245bc:	b11a      	cbz	r2, 80245c6 <__strftime.isra.0+0x85e>
 80245be:	3a01      	subs	r2, #1
 80245c0:	69f3      	ldr	r3, [r6, #28]
 80245c2:	3307      	adds	r3, #7
 80245c4:	e7a4      	b.n	8024510 <__strftime.isra.0+0x7a8>
 80245c6:	2206      	movs	r2, #6
 80245c8:	e7fa      	b.n	80245c0 <__strftime.isra.0+0x858>
 80245ca:	6970      	ldr	r0, [r6, #20]
 80245cc:	2800      	cmp	r0, #0
 80245ce:	db05      	blt.n	80245dc <__strftime.isra.0+0x874>
 80245d0:	2364      	movs	r3, #100	; 0x64
 80245d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80245d6:	fb02 0313 	mls	r3, r2, r3, r0
 80245da:	e5f1      	b.n	80241c0 <__strftime.isra.0+0x458>
 80245dc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80245e0:	f000 fc78 	bl	8024ed4 <abs>
 80245e4:	e7f4      	b.n	80245d0 <__strftime.isra.0+0x868>
 80245e6:	6972      	ldr	r2, [r6, #20]
 80245e8:	494c      	ldr	r1, [pc, #304]	; (802471c <__strftime.isra.0+0x9b4>)
 80245ea:	428a      	cmp	r2, r1
 80245ec:	da0c      	bge.n	8024608 <__strftime.isra.0+0x8a0>
 80245ee:	202d      	movs	r0, #45	; 0x2d
 80245f0:	f88d 0018 	strb.w	r0, [sp, #24]
 80245f4:	eba1 0a02 	sub.w	sl, r1, r2
 80245f8:	f1b9 0f00 	cmp.w	r9, #0
 80245fc:	d001      	beq.n	8024602 <__strftime.isra.0+0x89a>
 80245fe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8024602:	f10d 0219 	add.w	r2, sp, #25
 8024606:	e64b      	b.n	80242a0 <__strftime.isra.0+0x538>
 8024608:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 802460c:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8024610:	f47f ae45 	bne.w	802429e <__strftime.isra.0+0x536>
 8024614:	f242 720f 	movw	r2, #9999	; 0x270f
 8024618:	4592      	cmp	sl, r2
 802461a:	f67f ae40 	bls.w	802429e <__strftime.isra.0+0x536>
 802461e:	f88d b018 	strb.w	fp, [sp, #24]
 8024622:	e7e9      	b.n	80245f8 <__strftime.isra.0+0x890>
 8024624:	2330      	movs	r3, #48	; 0x30
 8024626:	1c90      	adds	r0, r2, #2
 8024628:	7053      	strb	r3, [r2, #1]
 802462a:	e640      	b.n	80242ae <__strftime.isra.0+0x546>
 802462c:	6a33      	ldr	r3, [r6, #32]
 802462e:	2b00      	cmp	r3, #0
 8024630:	f6ff ac9e 	blt.w	8023f70 <__strftime.isra.0+0x208>
 8024634:	f000 f920 	bl	8024878 <__tz_lock>
 8024638:	9b02      	ldr	r3, [sp, #8]
 802463a:	b90b      	cbnz	r3, 8024640 <__strftime.isra.0+0x8d8>
 802463c:	f000 f928 	bl	8024890 <_tzset_unlocked>
 8024640:	f002 fb5e 	bl	8026d00 <__gettzinfo>
 8024644:	6a33      	ldr	r3, [r6, #32]
 8024646:	2b00      	cmp	r3, #0
 8024648:	bfd4      	ite	le
 802464a:	2200      	movle	r2, #0
 802464c:	2201      	movgt	r2, #1
 802464e:	2328      	movs	r3, #40	; 0x28
 8024650:	fb02 3303 	mla	r3, r2, r3, r3
 8024654:	eb07 0a04 	add.w	sl, r7, r4
 8024658:	58c3      	ldr	r3, [r0, r3]
 802465a:	f1c3 0900 	rsb	r9, r3, #0
 802465e:	f000 f911 	bl	8024884 <__tz_unlock>
 8024662:	233c      	movs	r3, #60	; 0x3c
 8024664:	fb99 f0f3 	sdiv	r0, r9, r3
 8024668:	f001 fb43 	bl	8025cf2 <labs>
 802466c:	233c      	movs	r3, #60	; 0x3c
 802466e:	eba5 0b04 	sub.w	fp, r5, r4
 8024672:	fb90 f2f3 	sdiv	r2, r0, r3
 8024676:	fb02 0013 	mls	r0, r2, r3, r0
 802467a:	9000      	str	r0, [sp, #0]
 802467c:	4a28      	ldr	r2, [pc, #160]	; (8024720 <__strftime.isra.0+0x9b8>)
 802467e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8024682:	4659      	mov	r1, fp
 8024684:	4650      	mov	r0, sl
 8024686:	fb99 f3f3 	sdiv	r3, r9, r3
 802468a:	f7ff f959 	bl	8023940 <sniprintf>
 802468e:	2800      	cmp	r0, #0
 8024690:	f6ff ab9c 	blt.w	8023dcc <__strftime.isra.0+0x64>
 8024694:	4404      	add	r4, r0
 8024696:	42a5      	cmp	r5, r4
 8024698:	f67f ab98 	bls.w	8023dcc <__strftime.isra.0+0x64>
 802469c:	2301      	movs	r3, #1
 802469e:	9302      	str	r3, [sp, #8]
 80246a0:	e466      	b.n	8023f70 <__strftime.isra.0+0x208>
 80246a2:	6a33      	ldr	r3, [r6, #32]
 80246a4:	2b00      	cmp	r3, #0
 80246a6:	f6ff ac63 	blt.w	8023f70 <__strftime.isra.0+0x208>
 80246aa:	f000 f8e5 	bl	8024878 <__tz_lock>
 80246ae:	9b02      	ldr	r3, [sp, #8]
 80246b0:	b90b      	cbnz	r3, 80246b6 <__strftime.isra.0+0x94e>
 80246b2:	f000 f8ed 	bl	8024890 <_tzset_unlocked>
 80246b6:	6a33      	ldr	r3, [r6, #32]
 80246b8:	4a1a      	ldr	r2, [pc, #104]	; (8024724 <__strftime.isra.0+0x9bc>)
 80246ba:	2b00      	cmp	r3, #0
 80246bc:	bfd4      	ite	le
 80246be:	2300      	movle	r3, #0
 80246c0:	2301      	movgt	r3, #1
 80246c2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80246c6:	4648      	mov	r0, r9
 80246c8:	f7db fde2 	bl	8000290 <strlen>
 80246cc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80246d0:	4420      	add	r0, r4
 80246d2:	1e6b      	subs	r3, r5, #1
 80246d4:	42a0      	cmp	r0, r4
 80246d6:	d102      	bne.n	80246de <__strftime.isra.0+0x976>
 80246d8:	f000 f8d4 	bl	8024884 <__tz_unlock>
 80246dc:	e7de      	b.n	802469c <__strftime.isra.0+0x934>
 80246de:	42a3      	cmp	r3, r4
 80246e0:	d904      	bls.n	80246ec <__strftime.isra.0+0x984>
 80246e2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80246e6:	553a      	strb	r2, [r7, r4]
 80246e8:	3401      	adds	r4, #1
 80246ea:	e7f3      	b.n	80246d4 <__strftime.isra.0+0x96c>
 80246ec:	f000 f8ca 	bl	8024884 <__tz_unlock>
 80246f0:	f7ff bb6c 	b.w	8023dcc <__strftime.isra.0+0x64>
 80246f4:	1e6b      	subs	r3, r5, #1
 80246f6:	429c      	cmp	r4, r3
 80246f8:	f4bf ab68 	bcs.w	8023dcc <__strftime.isra.0+0x64>
 80246fc:	2325      	movs	r3, #37	; 0x25
 80246fe:	e635      	b.n	802436c <__strftime.isra.0+0x604>
 8024700:	b10d      	cbz	r5, 8024706 <__strftime.isra.0+0x99e>
 8024702:	2300      	movs	r3, #0
 8024704:	553b      	strb	r3, [r7, r4]
 8024706:	4620      	mov	r0, r4
 8024708:	b00f      	add	sp, #60	; 0x3c
 802470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802470e:	222d      	movs	r2, #45	; 0x2d
 8024710:	f88d 2018 	strb.w	r2, [sp, #24]
 8024714:	e770      	b.n	80245f8 <__strftime.isra.0+0x890>
 8024716:	465a      	mov	r2, fp
 8024718:	e7fa      	b.n	8024710 <__strftime.isra.0+0x9a8>
 802471a:	bf00      	nop
 802471c:	fffff894 	.word	0xfffff894
 8024720:	0802ca7d 	.word	0x0802ca7d
 8024724:	2000004c 	.word	0x2000004c

08024728 <strftime>:
 8024728:	f7ff bb1e 	b.w	8023d68 <__strftime.isra.0>

0802472c <__tzcalc_limits>:
 802472c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024730:	4605      	mov	r5, r0
 8024732:	f002 fae5 	bl	8026d00 <__gettzinfo>
 8024736:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802473a:	429d      	cmp	r5, r3
 802473c:	f340 8095 	ble.w	802486a <__tzcalc_limits+0x13e>
 8024740:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8024744:	18ac      	adds	r4, r5, r2
 8024746:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802474a:	f240 126d 	movw	r2, #365	; 0x16d
 802474e:	10a4      	asrs	r4, r4, #2
 8024750:	fb02 4403 	mla	r4, r2, r3, r4
 8024754:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8024758:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802475c:	fb93 f3f2 	sdiv	r3, r3, r2
 8024760:	441c      	add	r4, r3
 8024762:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8024766:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802476a:	fb95 fcf3 	sdiv	ip, r5, r3
 802476e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8024772:	186a      	adds	r2, r5, r1
 8024774:	fabc f68c 	clz	r6, ip
 8024778:	fbb2 f2f3 	udiv	r2, r2, r3
 802477c:	f005 0303 	and.w	r3, r5, #3
 8024780:	4414      	add	r4, r2
 8024782:	2264      	movs	r2, #100	; 0x64
 8024784:	6045      	str	r5, [r0, #4]
 8024786:	fb95 f7f2 	sdiv	r7, r5, r2
 802478a:	0976      	lsrs	r6, r6, #5
 802478c:	fb02 5717 	mls	r7, r2, r7, r5
 8024790:	4601      	mov	r1, r0
 8024792:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8024796:	9300      	str	r3, [sp, #0]
 8024798:	f04f 0a07 	mov.w	sl, #7
 802479c:	7a0d      	ldrb	r5, [r1, #8]
 802479e:	694b      	ldr	r3, [r1, #20]
 80247a0:	2d4a      	cmp	r5, #74	; 0x4a
 80247a2:	d12b      	bne.n	80247fc <__tzcalc_limits+0xd0>
 80247a4:	9a00      	ldr	r2, [sp, #0]
 80247a6:	18e5      	adds	r5, r4, r3
 80247a8:	b902      	cbnz	r2, 80247ac <__tzcalc_limits+0x80>
 80247aa:	b917      	cbnz	r7, 80247b2 <__tzcalc_limits+0x86>
 80247ac:	f1bc 0f00 	cmp.w	ip, #0
 80247b0:	d122      	bne.n	80247f8 <__tzcalc_limits+0xcc>
 80247b2:	2b3b      	cmp	r3, #59	; 0x3b
 80247b4:	bfd4      	ite	le
 80247b6:	2300      	movle	r3, #0
 80247b8:	2301      	movgt	r3, #1
 80247ba:	442b      	add	r3, r5
 80247bc:	3b01      	subs	r3, #1
 80247be:	698d      	ldr	r5, [r1, #24]
 80247c0:	4a2b      	ldr	r2, [pc, #172]	; (8024870 <__tzcalc_limits+0x144>)
 80247c2:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80247c6:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80247ca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80247cc:	18ed      	adds	r5, r5, r3
 80247ce:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80247d2:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80247d6:	3128      	adds	r1, #40	; 0x28
 80247d8:	458b      	cmp	fp, r1
 80247da:	d1df      	bne.n	802479c <__tzcalc_limits+0x70>
 80247dc:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 80247e0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 80247e4:	428c      	cmp	r4, r1
 80247e6:	4193      	sbcs	r3, r2
 80247e8:	bfb4      	ite	lt
 80247ea:	2301      	movlt	r3, #1
 80247ec:	2300      	movge	r3, #0
 80247ee:	6003      	str	r3, [r0, #0]
 80247f0:	2001      	movs	r0, #1
 80247f2:	b003      	add	sp, #12
 80247f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247f8:	2300      	movs	r3, #0
 80247fa:	e7de      	b.n	80247ba <__tzcalc_limits+0x8e>
 80247fc:	2d44      	cmp	r5, #68	; 0x44
 80247fe:	d101      	bne.n	8024804 <__tzcalc_limits+0xd8>
 8024800:	4423      	add	r3, r4
 8024802:	e7dc      	b.n	80247be <__tzcalc_limits+0x92>
 8024804:	9a00      	ldr	r2, [sp, #0]
 8024806:	bb52      	cbnz	r2, 802485e <__tzcalc_limits+0x132>
 8024808:	2f00      	cmp	r7, #0
 802480a:	bf0c      	ite	eq
 802480c:	4635      	moveq	r5, r6
 802480e:	2501      	movne	r5, #1
 8024810:	68ca      	ldr	r2, [r1, #12]
 8024812:	9201      	str	r2, [sp, #4]
 8024814:	4a17      	ldr	r2, [pc, #92]	; (8024874 <__tzcalc_limits+0x148>)
 8024816:	f04f 0930 	mov.w	r9, #48	; 0x30
 802481a:	fb09 2505 	mla	r5, r9, r5, r2
 802481e:	46a6      	mov	lr, r4
 8024820:	f04f 0800 	mov.w	r8, #0
 8024824:	3d04      	subs	r5, #4
 8024826:	9a01      	ldr	r2, [sp, #4]
 8024828:	f108 0801 	add.w	r8, r8, #1
 802482c:	4542      	cmp	r2, r8
 802482e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8024832:	dc16      	bgt.n	8024862 <__tzcalc_limits+0x136>
 8024834:	f10e 0504 	add.w	r5, lr, #4
 8024838:	fb95 f8fa 	sdiv	r8, r5, sl
 802483c:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8024840:	eba5 0508 	sub.w	r5, r5, r8
 8024844:	1b5d      	subs	r5, r3, r5
 8024846:	690b      	ldr	r3, [r1, #16]
 8024848:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 802484c:	bf48      	it	mi
 802484e:	3507      	addmi	r5, #7
 8024850:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8024854:	442b      	add	r3, r5
 8024856:	454b      	cmp	r3, r9
 8024858:	da05      	bge.n	8024866 <__tzcalc_limits+0x13a>
 802485a:	4473      	add	r3, lr
 802485c:	e7af      	b.n	80247be <__tzcalc_limits+0x92>
 802485e:	4635      	mov	r5, r6
 8024860:	e7d6      	b.n	8024810 <__tzcalc_limits+0xe4>
 8024862:	44ce      	add	lr, r9
 8024864:	e7df      	b.n	8024826 <__tzcalc_limits+0xfa>
 8024866:	3b07      	subs	r3, #7
 8024868:	e7f5      	b.n	8024856 <__tzcalc_limits+0x12a>
 802486a:	2000      	movs	r0, #0
 802486c:	e7c1      	b.n	80247f2 <__tzcalc_limits+0xc6>
 802486e:	bf00      	nop
 8024870:	00015180 	.word	0x00015180
 8024874:	0802c9d0 	.word	0x0802c9d0

08024878 <__tz_lock>:
 8024878:	4801      	ldr	r0, [pc, #4]	; (8024880 <__tz_lock+0x8>)
 802487a:	f000 bb0a 	b.w	8024e92 <__retarget_lock_acquire>
 802487e:	bf00      	nop
 8024880:	200164cb 	.word	0x200164cb

08024884 <__tz_unlock>:
 8024884:	4801      	ldr	r0, [pc, #4]	; (802488c <__tz_unlock+0x8>)
 8024886:	f000 bb06 	b.w	8024e96 <__retarget_lock_release>
 802488a:	bf00      	nop
 802488c:	200164cb 	.word	0x200164cb

08024890 <_tzset_unlocked>:
 8024890:	4b01      	ldr	r3, [pc, #4]	; (8024898 <_tzset_unlocked+0x8>)
 8024892:	6818      	ldr	r0, [r3, #0]
 8024894:	f000 b802 	b.w	802489c <_tzset_unlocked_r>
 8024898:	200000a0 	.word	0x200000a0

0802489c <_tzset_unlocked_r>:
 802489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248a0:	b08d      	sub	sp, #52	; 0x34
 80248a2:	4607      	mov	r7, r0
 80248a4:	f002 fa2c 	bl	8026d00 <__gettzinfo>
 80248a8:	49bb      	ldr	r1, [pc, #748]	; (8024b98 <_tzset_unlocked_r+0x2fc>)
 80248aa:	4dbc      	ldr	r5, [pc, #752]	; (8024b9c <_tzset_unlocked_r+0x300>)
 80248ac:	4604      	mov	r4, r0
 80248ae:	4638      	mov	r0, r7
 80248b0:	f001 fa18 	bl	8025ce4 <_getenv_r>
 80248b4:	4606      	mov	r6, r0
 80248b6:	bb10      	cbnz	r0, 80248fe <_tzset_unlocked_r+0x62>
 80248b8:	4bb9      	ldr	r3, [pc, #740]	; (8024ba0 <_tzset_unlocked_r+0x304>)
 80248ba:	4aba      	ldr	r2, [pc, #744]	; (8024ba4 <_tzset_unlocked_r+0x308>)
 80248bc:	6018      	str	r0, [r3, #0]
 80248be:	4bba      	ldr	r3, [pc, #744]	; (8024ba8 <_tzset_unlocked_r+0x30c>)
 80248c0:	62a0      	str	r0, [r4, #40]	; 0x28
 80248c2:	6018      	str	r0, [r3, #0]
 80248c4:	4bb9      	ldr	r3, [pc, #740]	; (8024bac <_tzset_unlocked_r+0x310>)
 80248c6:	6520      	str	r0, [r4, #80]	; 0x50
 80248c8:	e9c3 2200 	strd	r2, r2, [r3]
 80248cc:	214a      	movs	r1, #74	; 0x4a
 80248ce:	2200      	movs	r2, #0
 80248d0:	2300      	movs	r3, #0
 80248d2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80248d6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80248da:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 80248de:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80248e2:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80248e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80248ea:	6828      	ldr	r0, [r5, #0]
 80248ec:	7221      	strb	r1, [r4, #8]
 80248ee:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80248f2:	f7fe f907 	bl	8022b04 <free>
 80248f6:	602e      	str	r6, [r5, #0]
 80248f8:	b00d      	add	sp, #52	; 0x34
 80248fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248fe:	6829      	ldr	r1, [r5, #0]
 8024900:	2900      	cmp	r1, #0
 8024902:	f040 808e 	bne.w	8024a22 <_tzset_unlocked_r+0x186>
 8024906:	6828      	ldr	r0, [r5, #0]
 8024908:	f7fe f8fc 	bl	8022b04 <free>
 802490c:	4630      	mov	r0, r6
 802490e:	f7db fcbf 	bl	8000290 <strlen>
 8024912:	1c41      	adds	r1, r0, #1
 8024914:	4638      	mov	r0, r7
 8024916:	f7fe f91d 	bl	8022b54 <_malloc_r>
 802491a:	6028      	str	r0, [r5, #0]
 802491c:	2800      	cmp	r0, #0
 802491e:	f040 8086 	bne.w	8024a2e <_tzset_unlocked_r+0x192>
 8024922:	4aa1      	ldr	r2, [pc, #644]	; (8024ba8 <_tzset_unlocked_r+0x30c>)
 8024924:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8024bac <_tzset_unlocked_r+0x310>
 8024928:	f8df a274 	ldr.w	sl, [pc, #628]	; 8024ba0 <_tzset_unlocked_r+0x304>
 802492c:	2300      	movs	r3, #0
 802492e:	6013      	str	r3, [r2, #0]
 8024930:	4a9f      	ldr	r2, [pc, #636]	; (8024bb0 <_tzset_unlocked_r+0x314>)
 8024932:	f8ca 3000 	str.w	r3, [sl]
 8024936:	2000      	movs	r0, #0
 8024938:	2100      	movs	r1, #0
 802493a:	e9c8 2200 	strd	r2, r2, [r8]
 802493e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8024942:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8024946:	e9c4 0108 	strd	r0, r1, [r4, #32]
 802494a:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 802494e:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8024952:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8024956:	224a      	movs	r2, #74	; 0x4a
 8024958:	7222      	strb	r2, [r4, #8]
 802495a:	62a3      	str	r3, [r4, #40]	; 0x28
 802495c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8024960:	6523      	str	r3, [r4, #80]	; 0x50
 8024962:	7833      	ldrb	r3, [r6, #0]
 8024964:	2b3a      	cmp	r3, #58	; 0x3a
 8024966:	bf08      	it	eq
 8024968:	3601      	addeq	r6, #1
 802496a:	7833      	ldrb	r3, [r6, #0]
 802496c:	2b3c      	cmp	r3, #60	; 0x3c
 802496e:	d162      	bne.n	8024a36 <_tzset_unlocked_r+0x19a>
 8024970:	1c75      	adds	r5, r6, #1
 8024972:	4a90      	ldr	r2, [pc, #576]	; (8024bb4 <_tzset_unlocked_r+0x318>)
 8024974:	4990      	ldr	r1, [pc, #576]	; (8024bb8 <_tzset_unlocked_r+0x31c>)
 8024976:	ab0a      	add	r3, sp, #40	; 0x28
 8024978:	4628      	mov	r0, r5
 802497a:	f002 f965 	bl	8026c48 <siscanf>
 802497e:	2800      	cmp	r0, #0
 8024980:	ddba      	ble.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024984:	1eda      	subs	r2, r3, #3
 8024986:	2a07      	cmp	r2, #7
 8024988:	d8b6      	bhi.n	80248f8 <_tzset_unlocked_r+0x5c>
 802498a:	5ceb      	ldrb	r3, [r5, r3]
 802498c:	2b3e      	cmp	r3, #62	; 0x3e
 802498e:	d1b3      	bne.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024990:	3602      	adds	r6, #2
 8024992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024994:	18f5      	adds	r5, r6, r3
 8024996:	5cf3      	ldrb	r3, [r6, r3]
 8024998:	2b2d      	cmp	r3, #45	; 0x2d
 802499a:	d15a      	bne.n	8024a52 <_tzset_unlocked_r+0x1b6>
 802499c:	3501      	adds	r5, #1
 802499e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80249a2:	2300      	movs	r3, #0
 80249a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80249a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80249ac:	af08      	add	r7, sp, #32
 80249ae:	ab0a      	add	r3, sp, #40	; 0x28
 80249b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80249b4:	9303      	str	r3, [sp, #12]
 80249b6:	f10d 031e 	add.w	r3, sp, #30
 80249ba:	9300      	str	r3, [sp, #0]
 80249bc:	497f      	ldr	r1, [pc, #508]	; (8024bbc <_tzset_unlocked_r+0x320>)
 80249be:	ab0a      	add	r3, sp, #40	; 0x28
 80249c0:	aa07      	add	r2, sp, #28
 80249c2:	4628      	mov	r0, r5
 80249c4:	f002 f940 	bl	8026c48 <siscanf>
 80249c8:	2800      	cmp	r0, #0
 80249ca:	dd95      	ble.n	80248f8 <_tzset_unlocked_r+0x5c>
 80249cc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80249d0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80249d4:	223c      	movs	r2, #60	; 0x3c
 80249d6:	fb02 6603 	mla	r6, r2, r3, r6
 80249da:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80249de:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80249e2:	fb02 6603 	mla	r6, r2, r3, r6
 80249e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80249e8:	fb09 f606 	mul.w	r6, r9, r6
 80249ec:	eb05 0903 	add.w	r9, r5, r3
 80249f0:	5ceb      	ldrb	r3, [r5, r3]
 80249f2:	2b3c      	cmp	r3, #60	; 0x3c
 80249f4:	f040 80ec 	bne.w	8024bd0 <_tzset_unlocked_r+0x334>
 80249f8:	f109 0501 	add.w	r5, r9, #1
 80249fc:	4a70      	ldr	r2, [pc, #448]	; (8024bc0 <_tzset_unlocked_r+0x324>)
 80249fe:	496e      	ldr	r1, [pc, #440]	; (8024bb8 <_tzset_unlocked_r+0x31c>)
 8024a00:	ab0a      	add	r3, sp, #40	; 0x28
 8024a02:	4628      	mov	r0, r5
 8024a04:	f002 f920 	bl	8026c48 <siscanf>
 8024a08:	2800      	cmp	r0, #0
 8024a0a:	dc28      	bgt.n	8024a5e <_tzset_unlocked_r+0x1c2>
 8024a0c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8024a10:	2b3e      	cmp	r3, #62	; 0x3e
 8024a12:	d124      	bne.n	8024a5e <_tzset_unlocked_r+0x1c2>
 8024a14:	4b67      	ldr	r3, [pc, #412]	; (8024bb4 <_tzset_unlocked_r+0x318>)
 8024a16:	62a6      	str	r6, [r4, #40]	; 0x28
 8024a18:	e9c8 3300 	strd	r3, r3, [r8]
 8024a1c:	f8ca 6000 	str.w	r6, [sl]
 8024a20:	e76a      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024a22:	f7db fbd5 	bl	80001d0 <strcmp>
 8024a26:	2800      	cmp	r0, #0
 8024a28:	f47f af6d 	bne.w	8024906 <_tzset_unlocked_r+0x6a>
 8024a2c:	e764      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024a2e:	4631      	mov	r1, r6
 8024a30:	f000 fa33 	bl	8024e9a <strcpy>
 8024a34:	e775      	b.n	8024922 <_tzset_unlocked_r+0x86>
 8024a36:	4a5f      	ldr	r2, [pc, #380]	; (8024bb4 <_tzset_unlocked_r+0x318>)
 8024a38:	4962      	ldr	r1, [pc, #392]	; (8024bc4 <_tzset_unlocked_r+0x328>)
 8024a3a:	ab0a      	add	r3, sp, #40	; 0x28
 8024a3c:	4630      	mov	r0, r6
 8024a3e:	f002 f903 	bl	8026c48 <siscanf>
 8024a42:	2800      	cmp	r0, #0
 8024a44:	f77f af58 	ble.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a4a:	3b03      	subs	r3, #3
 8024a4c:	2b07      	cmp	r3, #7
 8024a4e:	d9a0      	bls.n	8024992 <_tzset_unlocked_r+0xf6>
 8024a50:	e752      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024a52:	2b2b      	cmp	r3, #43	; 0x2b
 8024a54:	bf08      	it	eq
 8024a56:	3501      	addeq	r5, #1
 8024a58:	f04f 0901 	mov.w	r9, #1
 8024a5c:	e7a1      	b.n	80249a2 <_tzset_unlocked_r+0x106>
 8024a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a60:	1eda      	subs	r2, r3, #3
 8024a62:	2a07      	cmp	r2, #7
 8024a64:	f63f af48 	bhi.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024a68:	5ceb      	ldrb	r3, [r5, r3]
 8024a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8024a6c:	f47f af44 	bne.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024a70:	f109 0902 	add.w	r9, r9, #2
 8024a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024a76:	eb09 0503 	add.w	r5, r9, r3
 8024a7a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8024a7e:	2b2d      	cmp	r3, #45	; 0x2d
 8024a80:	f040 80b5 	bne.w	8024bee <_tzset_unlocked_r+0x352>
 8024a84:	3501      	adds	r5, #1
 8024a86:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8024a8a:	2300      	movs	r3, #0
 8024a8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024a90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024a94:	f8ad 3020 	strh.w	r3, [sp, #32]
 8024a98:	930a      	str	r3, [sp, #40]	; 0x28
 8024a9a:	ab0a      	add	r3, sp, #40	; 0x28
 8024a9c:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8024aa0:	9301      	str	r3, [sp, #4]
 8024aa2:	f10d 031e 	add.w	r3, sp, #30
 8024aa6:	9300      	str	r3, [sp, #0]
 8024aa8:	4944      	ldr	r1, [pc, #272]	; (8024bbc <_tzset_unlocked_r+0x320>)
 8024aaa:	ab0a      	add	r3, sp, #40	; 0x28
 8024aac:	aa07      	add	r2, sp, #28
 8024aae:	4628      	mov	r0, r5
 8024ab0:	f002 f8ca 	bl	8026c48 <siscanf>
 8024ab4:	2800      	cmp	r0, #0
 8024ab6:	f300 80a0 	bgt.w	8024bfa <_tzset_unlocked_r+0x35e>
 8024aba:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8024abe:	9304      	str	r3, [sp, #16]
 8024ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024ac2:	4627      	mov	r7, r4
 8024ac4:	441d      	add	r5, r3
 8024ac6:	f04f 0b00 	mov.w	fp, #0
 8024aca:	782b      	ldrb	r3, [r5, #0]
 8024acc:	2b2c      	cmp	r3, #44	; 0x2c
 8024ace:	bf08      	it	eq
 8024ad0:	3501      	addeq	r5, #1
 8024ad2:	f895 9000 	ldrb.w	r9, [r5]
 8024ad6:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 8024ada:	f040 80a1 	bne.w	8024c20 <_tzset_unlocked_r+0x384>
 8024ade:	ab0a      	add	r3, sp, #40	; 0x28
 8024ae0:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8024ae4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024ae8:	aa09      	add	r2, sp, #36	; 0x24
 8024aea:	9200      	str	r2, [sp, #0]
 8024aec:	4936      	ldr	r1, [pc, #216]	; (8024bc8 <_tzset_unlocked_r+0x32c>)
 8024aee:	9303      	str	r3, [sp, #12]
 8024af0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024af4:	4628      	mov	r0, r5
 8024af6:	f002 f8a7 	bl	8026c48 <siscanf>
 8024afa:	2803      	cmp	r0, #3
 8024afc:	f47f aefc 	bne.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024b00:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024b04:	1e4b      	subs	r3, r1, #1
 8024b06:	2b0b      	cmp	r3, #11
 8024b08:	f63f aef6 	bhi.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024b0c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8024b10:	1e53      	subs	r3, r2, #1
 8024b12:	2b04      	cmp	r3, #4
 8024b14:	f63f aef0 	bhi.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024b18:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8024b1c:	2b06      	cmp	r3, #6
 8024b1e:	f63f aeeb 	bhi.w	80248f8 <_tzset_unlocked_r+0x5c>
 8024b22:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8024b26:	f887 9008 	strb.w	r9, [r7, #8]
 8024b2a:	617b      	str	r3, [r7, #20]
 8024b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024b2e:	eb05 0903 	add.w	r9, r5, r3
 8024b32:	2500      	movs	r5, #0
 8024b34:	2302      	movs	r3, #2
 8024b36:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024b3a:	f8ad 501e 	strh.w	r5, [sp, #30]
 8024b3e:	f8ad 5020 	strh.w	r5, [sp, #32]
 8024b42:	950a      	str	r5, [sp, #40]	; 0x28
 8024b44:	f899 3000 	ldrb.w	r3, [r9]
 8024b48:	2b2f      	cmp	r3, #47	; 0x2f
 8024b4a:	f040 8095 	bne.w	8024c78 <_tzset_unlocked_r+0x3dc>
 8024b4e:	ab0a      	add	r3, sp, #40	; 0x28
 8024b50:	aa08      	add	r2, sp, #32
 8024b52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8024b56:	f10d 021e 	add.w	r2, sp, #30
 8024b5a:	9200      	str	r2, [sp, #0]
 8024b5c:	491b      	ldr	r1, [pc, #108]	; (8024bcc <_tzset_unlocked_r+0x330>)
 8024b5e:	9303      	str	r3, [sp, #12]
 8024b60:	aa07      	add	r2, sp, #28
 8024b62:	4648      	mov	r0, r9
 8024b64:	f002 f870 	bl	8026c48 <siscanf>
 8024b68:	42a8      	cmp	r0, r5
 8024b6a:	f300 8085 	bgt.w	8024c78 <_tzset_unlocked_r+0x3dc>
 8024b6e:	214a      	movs	r1, #74	; 0x4a
 8024b70:	2200      	movs	r2, #0
 8024b72:	2300      	movs	r3, #0
 8024b74:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8024b78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8024b7c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8024b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8024b84:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 8024b88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8024b8c:	7221      	strb	r1, [r4, #8]
 8024b8e:	62a5      	str	r5, [r4, #40]	; 0x28
 8024b90:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8024b94:	6525      	str	r5, [r4, #80]	; 0x50
 8024b96:	e6af      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024b98:	0802ca89 	.word	0x0802ca89
 8024b9c:	200164b8 	.word	0x200164b8
 8024ba0:	200164c0 	.word	0x200164c0
 8024ba4:	0802ca8c 	.word	0x0802ca8c
 8024ba8:	200164bc 	.word	0x200164bc
 8024bac:	2000004c 	.word	0x2000004c
 8024bb0:	0802c82b 	.word	0x0802c82b
 8024bb4:	200164ac 	.word	0x200164ac
 8024bb8:	0802ca90 	.word	0x0802ca90
 8024bbc:	0802cac5 	.word	0x0802cac5
 8024bc0:	200164a0 	.word	0x200164a0
 8024bc4:	0802caa3 	.word	0x0802caa3
 8024bc8:	0802cab1 	.word	0x0802cab1
 8024bcc:	0802cac4 	.word	0x0802cac4
 8024bd0:	4a3e      	ldr	r2, [pc, #248]	; (8024ccc <_tzset_unlocked_r+0x430>)
 8024bd2:	493f      	ldr	r1, [pc, #252]	; (8024cd0 <_tzset_unlocked_r+0x434>)
 8024bd4:	ab0a      	add	r3, sp, #40	; 0x28
 8024bd6:	4648      	mov	r0, r9
 8024bd8:	f002 f836 	bl	8026c48 <siscanf>
 8024bdc:	2800      	cmp	r0, #0
 8024bde:	f77f af19 	ble.w	8024a14 <_tzset_unlocked_r+0x178>
 8024be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024be4:	3b03      	subs	r3, #3
 8024be6:	2b07      	cmp	r3, #7
 8024be8:	f67f af44 	bls.w	8024a74 <_tzset_unlocked_r+0x1d8>
 8024bec:	e684      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024bee:	2b2b      	cmp	r3, #43	; 0x2b
 8024bf0:	bf08      	it	eq
 8024bf2:	3501      	addeq	r5, #1
 8024bf4:	f04f 0901 	mov.w	r9, #1
 8024bf8:	e747      	b.n	8024a8a <_tzset_unlocked_r+0x1ee>
 8024bfa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8024bfe:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8024c02:	213c      	movs	r1, #60	; 0x3c
 8024c04:	fb01 3302 	mla	r3, r1, r2, r3
 8024c08:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8024c0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024c10:	fb01 3302 	mla	r3, r1, r2, r3
 8024c14:	fb09 f303 	mul.w	r3, r9, r3
 8024c18:	e751      	b.n	8024abe <_tzset_unlocked_r+0x222>
 8024c1a:	f04f 0b01 	mov.w	fp, #1
 8024c1e:	e754      	b.n	8024aca <_tzset_unlocked_r+0x22e>
 8024c20:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8024c24:	bf06      	itte	eq
 8024c26:	3501      	addeq	r5, #1
 8024c28:	464b      	moveq	r3, r9
 8024c2a:	2344      	movne	r3, #68	; 0x44
 8024c2c:	220a      	movs	r2, #10
 8024c2e:	a90b      	add	r1, sp, #44	; 0x2c
 8024c30:	4628      	mov	r0, r5
 8024c32:	9305      	str	r3, [sp, #20]
 8024c34:	f001 fc52 	bl	80264dc <strtoul>
 8024c38:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024c3c:	9b05      	ldr	r3, [sp, #20]
 8024c3e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8024c42:	45a9      	cmp	r9, r5
 8024c44:	d114      	bne.n	8024c70 <_tzset_unlocked_r+0x3d4>
 8024c46:	234d      	movs	r3, #77	; 0x4d
 8024c48:	f1bb 0f00 	cmp.w	fp, #0
 8024c4c:	d107      	bne.n	8024c5e <_tzset_unlocked_r+0x3c2>
 8024c4e:	7223      	strb	r3, [r4, #8]
 8024c50:	2103      	movs	r1, #3
 8024c52:	2302      	movs	r3, #2
 8024c54:	e9c4 1303 	strd	r1, r3, [r4, #12]
 8024c58:	f8c4 b014 	str.w	fp, [r4, #20]
 8024c5c:	e769      	b.n	8024b32 <_tzset_unlocked_r+0x296>
 8024c5e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8024c62:	220b      	movs	r2, #11
 8024c64:	2301      	movs	r3, #1
 8024c66:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 8024c6a:	2300      	movs	r3, #0
 8024c6c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8024c6e:	e760      	b.n	8024b32 <_tzset_unlocked_r+0x296>
 8024c70:	b280      	uxth	r0, r0
 8024c72:	723b      	strb	r3, [r7, #8]
 8024c74:	6178      	str	r0, [r7, #20]
 8024c76:	e75c      	b.n	8024b32 <_tzset_unlocked_r+0x296>
 8024c78:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8024c7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8024c80:	213c      	movs	r1, #60	; 0x3c
 8024c82:	fb01 3302 	mla	r3, r1, r2, r3
 8024c86:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8024c8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024c8e:	fb01 3302 	mla	r3, r1, r2, r3
 8024c92:	61bb      	str	r3, [r7, #24]
 8024c94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8024c96:	3728      	adds	r7, #40	; 0x28
 8024c98:	444d      	add	r5, r9
 8024c9a:	f1bb 0f00 	cmp.w	fp, #0
 8024c9e:	d0bc      	beq.n	8024c1a <_tzset_unlocked_r+0x37e>
 8024ca0:	9b04      	ldr	r3, [sp, #16]
 8024ca2:	6523      	str	r3, [r4, #80]	; 0x50
 8024ca4:	4b0b      	ldr	r3, [pc, #44]	; (8024cd4 <_tzset_unlocked_r+0x438>)
 8024ca6:	f8c8 3000 	str.w	r3, [r8]
 8024caa:	6860      	ldr	r0, [r4, #4]
 8024cac:	4b07      	ldr	r3, [pc, #28]	; (8024ccc <_tzset_unlocked_r+0x430>)
 8024cae:	62a6      	str	r6, [r4, #40]	; 0x28
 8024cb0:	f8c8 3004 	str.w	r3, [r8, #4]
 8024cb4:	f7ff fd3a 	bl	802472c <__tzcalc_limits>
 8024cb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8024cba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8024cbc:	f8ca 2000 	str.w	r2, [sl]
 8024cc0:	1a9b      	subs	r3, r3, r2
 8024cc2:	4a05      	ldr	r2, [pc, #20]	; (8024cd8 <_tzset_unlocked_r+0x43c>)
 8024cc4:	bf18      	it	ne
 8024cc6:	2301      	movne	r3, #1
 8024cc8:	6013      	str	r3, [r2, #0]
 8024cca:	e615      	b.n	80248f8 <_tzset_unlocked_r+0x5c>
 8024ccc:	200164a0 	.word	0x200164a0
 8024cd0:	0802caa3 	.word	0x0802caa3
 8024cd4:	200164ac 	.word	0x200164ac
 8024cd8:	200164bc 	.word	0x200164bc

08024cdc <_localeconv_r>:
 8024cdc:	4800      	ldr	r0, [pc, #0]	; (8024ce0 <_localeconv_r+0x4>)
 8024cde:	4770      	bx	lr
 8024ce0:	200001f0 	.word	0x200001f0

08024ce4 <_close_r>:
 8024ce4:	b538      	push	{r3, r4, r5, lr}
 8024ce6:	4d06      	ldr	r5, [pc, #24]	; (8024d00 <_close_r+0x1c>)
 8024ce8:	2300      	movs	r3, #0
 8024cea:	4604      	mov	r4, r0
 8024cec:	4608      	mov	r0, r1
 8024cee:	602b      	str	r3, [r5, #0]
 8024cf0:	f7de fec3 	bl	8003a7a <_close>
 8024cf4:	1c43      	adds	r3, r0, #1
 8024cf6:	d102      	bne.n	8024cfe <_close_r+0x1a>
 8024cf8:	682b      	ldr	r3, [r5, #0]
 8024cfa:	b103      	cbz	r3, 8024cfe <_close_r+0x1a>
 8024cfc:	6023      	str	r3, [r4, #0]
 8024cfe:	bd38      	pop	{r3, r4, r5, pc}
 8024d00:	200164c4 	.word	0x200164c4

08024d04 <_reclaim_reent>:
 8024d04:	4b29      	ldr	r3, [pc, #164]	; (8024dac <_reclaim_reent+0xa8>)
 8024d06:	681b      	ldr	r3, [r3, #0]
 8024d08:	4283      	cmp	r3, r0
 8024d0a:	b570      	push	{r4, r5, r6, lr}
 8024d0c:	4604      	mov	r4, r0
 8024d0e:	d04b      	beq.n	8024da8 <_reclaim_reent+0xa4>
 8024d10:	69c3      	ldr	r3, [r0, #28]
 8024d12:	b143      	cbz	r3, 8024d26 <_reclaim_reent+0x22>
 8024d14:	68db      	ldr	r3, [r3, #12]
 8024d16:	2b00      	cmp	r3, #0
 8024d18:	d144      	bne.n	8024da4 <_reclaim_reent+0xa0>
 8024d1a:	69e3      	ldr	r3, [r4, #28]
 8024d1c:	6819      	ldr	r1, [r3, #0]
 8024d1e:	b111      	cbz	r1, 8024d26 <_reclaim_reent+0x22>
 8024d20:	4620      	mov	r0, r4
 8024d22:	f000 ff57 	bl	8025bd4 <_free_r>
 8024d26:	6961      	ldr	r1, [r4, #20]
 8024d28:	b111      	cbz	r1, 8024d30 <_reclaim_reent+0x2c>
 8024d2a:	4620      	mov	r0, r4
 8024d2c:	f000 ff52 	bl	8025bd4 <_free_r>
 8024d30:	69e1      	ldr	r1, [r4, #28]
 8024d32:	b111      	cbz	r1, 8024d3a <_reclaim_reent+0x36>
 8024d34:	4620      	mov	r0, r4
 8024d36:	f000 ff4d 	bl	8025bd4 <_free_r>
 8024d3a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8024d3c:	b111      	cbz	r1, 8024d44 <_reclaim_reent+0x40>
 8024d3e:	4620      	mov	r0, r4
 8024d40:	f000 ff48 	bl	8025bd4 <_free_r>
 8024d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d46:	b111      	cbz	r1, 8024d4e <_reclaim_reent+0x4a>
 8024d48:	4620      	mov	r0, r4
 8024d4a:	f000 ff43 	bl	8025bd4 <_free_r>
 8024d4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024d50:	b111      	cbz	r1, 8024d58 <_reclaim_reent+0x54>
 8024d52:	4620      	mov	r0, r4
 8024d54:	f000 ff3e 	bl	8025bd4 <_free_r>
 8024d58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8024d5a:	b111      	cbz	r1, 8024d62 <_reclaim_reent+0x5e>
 8024d5c:	4620      	mov	r0, r4
 8024d5e:	f000 ff39 	bl	8025bd4 <_free_r>
 8024d62:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8024d64:	b111      	cbz	r1, 8024d6c <_reclaim_reent+0x68>
 8024d66:	4620      	mov	r0, r4
 8024d68:	f000 ff34 	bl	8025bd4 <_free_r>
 8024d6c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8024d6e:	b111      	cbz	r1, 8024d76 <_reclaim_reent+0x72>
 8024d70:	4620      	mov	r0, r4
 8024d72:	f000 ff2f 	bl	8025bd4 <_free_r>
 8024d76:	6a23      	ldr	r3, [r4, #32]
 8024d78:	b1b3      	cbz	r3, 8024da8 <_reclaim_reent+0xa4>
 8024d7a:	4620      	mov	r0, r4
 8024d7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8024d80:	4718      	bx	r3
 8024d82:	5949      	ldr	r1, [r1, r5]
 8024d84:	b941      	cbnz	r1, 8024d98 <_reclaim_reent+0x94>
 8024d86:	3504      	adds	r5, #4
 8024d88:	69e3      	ldr	r3, [r4, #28]
 8024d8a:	2d80      	cmp	r5, #128	; 0x80
 8024d8c:	68d9      	ldr	r1, [r3, #12]
 8024d8e:	d1f8      	bne.n	8024d82 <_reclaim_reent+0x7e>
 8024d90:	4620      	mov	r0, r4
 8024d92:	f000 ff1f 	bl	8025bd4 <_free_r>
 8024d96:	e7c0      	b.n	8024d1a <_reclaim_reent+0x16>
 8024d98:	680e      	ldr	r6, [r1, #0]
 8024d9a:	4620      	mov	r0, r4
 8024d9c:	f000 ff1a 	bl	8025bd4 <_free_r>
 8024da0:	4631      	mov	r1, r6
 8024da2:	e7ef      	b.n	8024d84 <_reclaim_reent+0x80>
 8024da4:	2500      	movs	r5, #0
 8024da6:	e7ef      	b.n	8024d88 <_reclaim_reent+0x84>
 8024da8:	bd70      	pop	{r4, r5, r6, pc}
 8024daa:	bf00      	nop
 8024dac:	200000a0 	.word	0x200000a0

08024db0 <_lseek_r>:
 8024db0:	b538      	push	{r3, r4, r5, lr}
 8024db2:	4d07      	ldr	r5, [pc, #28]	; (8024dd0 <_lseek_r+0x20>)
 8024db4:	4604      	mov	r4, r0
 8024db6:	4608      	mov	r0, r1
 8024db8:	4611      	mov	r1, r2
 8024dba:	2200      	movs	r2, #0
 8024dbc:	602a      	str	r2, [r5, #0]
 8024dbe:	461a      	mov	r2, r3
 8024dc0:	f7de fe82 	bl	8003ac8 <_lseek>
 8024dc4:	1c43      	adds	r3, r0, #1
 8024dc6:	d102      	bne.n	8024dce <_lseek_r+0x1e>
 8024dc8:	682b      	ldr	r3, [r5, #0]
 8024dca:	b103      	cbz	r3, 8024dce <_lseek_r+0x1e>
 8024dcc:	6023      	str	r3, [r4, #0]
 8024dce:	bd38      	pop	{r3, r4, r5, pc}
 8024dd0:	200164c4 	.word	0x200164c4

08024dd4 <_read_r>:
 8024dd4:	b538      	push	{r3, r4, r5, lr}
 8024dd6:	4d07      	ldr	r5, [pc, #28]	; (8024df4 <_read_r+0x20>)
 8024dd8:	4604      	mov	r4, r0
 8024dda:	4608      	mov	r0, r1
 8024ddc:	4611      	mov	r1, r2
 8024dde:	2200      	movs	r2, #0
 8024de0:	602a      	str	r2, [r5, #0]
 8024de2:	461a      	mov	r2, r3
 8024de4:	f7de fe10 	bl	8003a08 <_read>
 8024de8:	1c43      	adds	r3, r0, #1
 8024dea:	d102      	bne.n	8024df2 <_read_r+0x1e>
 8024dec:	682b      	ldr	r3, [r5, #0]
 8024dee:	b103      	cbz	r3, 8024df2 <_read_r+0x1e>
 8024df0:	6023      	str	r3, [r4, #0]
 8024df2:	bd38      	pop	{r3, r4, r5, pc}
 8024df4:	200164c4 	.word	0x200164c4

08024df8 <_sbrk_r>:
 8024df8:	b538      	push	{r3, r4, r5, lr}
 8024dfa:	4d06      	ldr	r5, [pc, #24]	; (8024e14 <_sbrk_r+0x1c>)
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	4604      	mov	r4, r0
 8024e00:	4608      	mov	r0, r1
 8024e02:	602b      	str	r3, [r5, #0]
 8024e04:	f7de fe6e 	bl	8003ae4 <_sbrk>
 8024e08:	1c43      	adds	r3, r0, #1
 8024e0a:	d102      	bne.n	8024e12 <_sbrk_r+0x1a>
 8024e0c:	682b      	ldr	r3, [r5, #0]
 8024e0e:	b103      	cbz	r3, 8024e12 <_sbrk_r+0x1a>
 8024e10:	6023      	str	r3, [r4, #0]
 8024e12:	bd38      	pop	{r3, r4, r5, pc}
 8024e14:	200164c4 	.word	0x200164c4

08024e18 <_write_r>:
 8024e18:	b538      	push	{r3, r4, r5, lr}
 8024e1a:	4d07      	ldr	r5, [pc, #28]	; (8024e38 <_write_r+0x20>)
 8024e1c:	4604      	mov	r4, r0
 8024e1e:	4608      	mov	r0, r1
 8024e20:	4611      	mov	r1, r2
 8024e22:	2200      	movs	r2, #0
 8024e24:	602a      	str	r2, [r5, #0]
 8024e26:	461a      	mov	r2, r3
 8024e28:	f7de fe0b 	bl	8003a42 <_write>
 8024e2c:	1c43      	adds	r3, r0, #1
 8024e2e:	d102      	bne.n	8024e36 <_write_r+0x1e>
 8024e30:	682b      	ldr	r3, [r5, #0]
 8024e32:	b103      	cbz	r3, 8024e36 <_write_r+0x1e>
 8024e34:	6023      	str	r3, [r4, #0]
 8024e36:	bd38      	pop	{r3, r4, r5, pc}
 8024e38:	200164c4 	.word	0x200164c4

08024e3c <__errno>:
 8024e3c:	4b01      	ldr	r3, [pc, #4]	; (8024e44 <__errno+0x8>)
 8024e3e:	6818      	ldr	r0, [r3, #0]
 8024e40:	4770      	bx	lr
 8024e42:	bf00      	nop
 8024e44:	200000a0 	.word	0x200000a0

08024e48 <__libc_init_array>:
 8024e48:	b570      	push	{r4, r5, r6, lr}
 8024e4a:	4d0d      	ldr	r5, [pc, #52]	; (8024e80 <__libc_init_array+0x38>)
 8024e4c:	4c0d      	ldr	r4, [pc, #52]	; (8024e84 <__libc_init_array+0x3c>)
 8024e4e:	1b64      	subs	r4, r4, r5
 8024e50:	10a4      	asrs	r4, r4, #2
 8024e52:	2600      	movs	r6, #0
 8024e54:	42a6      	cmp	r6, r4
 8024e56:	d109      	bne.n	8024e6c <__libc_init_array+0x24>
 8024e58:	4d0b      	ldr	r5, [pc, #44]	; (8024e88 <__libc_init_array+0x40>)
 8024e5a:	4c0c      	ldr	r4, [pc, #48]	; (8024e8c <__libc_init_array+0x44>)
 8024e5c:	f002 fb96 	bl	802758c <_init>
 8024e60:	1b64      	subs	r4, r4, r5
 8024e62:	10a4      	asrs	r4, r4, #2
 8024e64:	2600      	movs	r6, #0
 8024e66:	42a6      	cmp	r6, r4
 8024e68:	d105      	bne.n	8024e76 <__libc_init_array+0x2e>
 8024e6a:	bd70      	pop	{r4, r5, r6, pc}
 8024e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8024e70:	4798      	blx	r3
 8024e72:	3601      	adds	r6, #1
 8024e74:	e7ee      	b.n	8024e54 <__libc_init_array+0xc>
 8024e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8024e7a:	4798      	blx	r3
 8024e7c:	3601      	adds	r6, #1
 8024e7e:	e7f2      	b.n	8024e66 <__libc_init_array+0x1e>
 8024e80:	0802cf0c 	.word	0x0802cf0c
 8024e84:	0802cf0c 	.word	0x0802cf0c
 8024e88:	0802cf0c 	.word	0x0802cf0c
 8024e8c:	0802cf10 	.word	0x0802cf10

08024e90 <__retarget_lock_init_recursive>:
 8024e90:	4770      	bx	lr

08024e92 <__retarget_lock_acquire>:
 8024e92:	4770      	bx	lr

08024e94 <__retarget_lock_acquire_recursive>:
 8024e94:	4770      	bx	lr

08024e96 <__retarget_lock_release>:
 8024e96:	4770      	bx	lr

08024e98 <__retarget_lock_release_recursive>:
 8024e98:	4770      	bx	lr

08024e9a <strcpy>:
 8024e9a:	4603      	mov	r3, r0
 8024e9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024ea0:	f803 2b01 	strb.w	r2, [r3], #1
 8024ea4:	2a00      	cmp	r2, #0
 8024ea6:	d1f9      	bne.n	8024e9c <strcpy+0x2>
 8024ea8:	4770      	bx	lr

08024eaa <memcpy>:
 8024eaa:	440a      	add	r2, r1
 8024eac:	4291      	cmp	r1, r2
 8024eae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8024eb2:	d100      	bne.n	8024eb6 <memcpy+0xc>
 8024eb4:	4770      	bx	lr
 8024eb6:	b510      	push	{r4, lr}
 8024eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024ec0:	4291      	cmp	r1, r2
 8024ec2:	d1f9      	bne.n	8024eb8 <memcpy+0xe>
 8024ec4:	bd10      	pop	{r4, pc}

08024ec6 <abort>:
 8024ec6:	b508      	push	{r3, lr}
 8024ec8:	2006      	movs	r0, #6
 8024eca:	f001 ff11 	bl	8026cf0 <raise>
 8024ece:	2001      	movs	r0, #1
 8024ed0:	f7de fd90 	bl	80039f4 <_exit>

08024ed4 <abs>:
 8024ed4:	2800      	cmp	r0, #0
 8024ed6:	bfb8      	it	lt
 8024ed8:	4240      	neglt	r0, r0
 8024eda:	4770      	bx	lr

08024edc <quorem>:
 8024edc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ee0:	6903      	ldr	r3, [r0, #16]
 8024ee2:	690c      	ldr	r4, [r1, #16]
 8024ee4:	42a3      	cmp	r3, r4
 8024ee6:	4607      	mov	r7, r0
 8024ee8:	db7e      	blt.n	8024fe8 <quorem+0x10c>
 8024eea:	3c01      	subs	r4, #1
 8024eec:	f101 0814 	add.w	r8, r1, #20
 8024ef0:	f100 0514 	add.w	r5, r0, #20
 8024ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024ef8:	9301      	str	r3, [sp, #4]
 8024efa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8024efe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024f02:	3301      	adds	r3, #1
 8024f04:	429a      	cmp	r2, r3
 8024f06:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8024f0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8024f0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8024f12:	d331      	bcc.n	8024f78 <quorem+0x9c>
 8024f14:	f04f 0e00 	mov.w	lr, #0
 8024f18:	4640      	mov	r0, r8
 8024f1a:	46ac      	mov	ip, r5
 8024f1c:	46f2      	mov	sl, lr
 8024f1e:	f850 2b04 	ldr.w	r2, [r0], #4
 8024f22:	b293      	uxth	r3, r2
 8024f24:	fb06 e303 	mla	r3, r6, r3, lr
 8024f28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024f2c:	0c1a      	lsrs	r2, r3, #16
 8024f2e:	b29b      	uxth	r3, r3
 8024f30:	ebaa 0303 	sub.w	r3, sl, r3
 8024f34:	f8dc a000 	ldr.w	sl, [ip]
 8024f38:	fa13 f38a 	uxtah	r3, r3, sl
 8024f3c:	fb06 220e 	mla	r2, r6, lr, r2
 8024f40:	9300      	str	r3, [sp, #0]
 8024f42:	9b00      	ldr	r3, [sp, #0]
 8024f44:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8024f48:	b292      	uxth	r2, r2
 8024f4a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8024f4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024f52:	f8bd 3000 	ldrh.w	r3, [sp]
 8024f56:	4581      	cmp	r9, r0
 8024f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024f5c:	f84c 3b04 	str.w	r3, [ip], #4
 8024f60:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024f64:	d2db      	bcs.n	8024f1e <quorem+0x42>
 8024f66:	f855 300b 	ldr.w	r3, [r5, fp]
 8024f6a:	b92b      	cbnz	r3, 8024f78 <quorem+0x9c>
 8024f6c:	9b01      	ldr	r3, [sp, #4]
 8024f6e:	3b04      	subs	r3, #4
 8024f70:	429d      	cmp	r5, r3
 8024f72:	461a      	mov	r2, r3
 8024f74:	d32c      	bcc.n	8024fd0 <quorem+0xf4>
 8024f76:	613c      	str	r4, [r7, #16]
 8024f78:	4638      	mov	r0, r7
 8024f7a:	f001 f93b 	bl	80261f4 <__mcmp>
 8024f7e:	2800      	cmp	r0, #0
 8024f80:	db22      	blt.n	8024fc8 <quorem+0xec>
 8024f82:	3601      	adds	r6, #1
 8024f84:	4629      	mov	r1, r5
 8024f86:	2000      	movs	r0, #0
 8024f88:	f858 2b04 	ldr.w	r2, [r8], #4
 8024f8c:	f8d1 c000 	ldr.w	ip, [r1]
 8024f90:	b293      	uxth	r3, r2
 8024f92:	1ac3      	subs	r3, r0, r3
 8024f94:	0c12      	lsrs	r2, r2, #16
 8024f96:	fa13 f38c 	uxtah	r3, r3, ip
 8024f9a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8024f9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024fa2:	b29b      	uxth	r3, r3
 8024fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024fa8:	45c1      	cmp	r9, r8
 8024faa:	f841 3b04 	str.w	r3, [r1], #4
 8024fae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8024fb2:	d2e9      	bcs.n	8024f88 <quorem+0xac>
 8024fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024fb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024fbc:	b922      	cbnz	r2, 8024fc8 <quorem+0xec>
 8024fbe:	3b04      	subs	r3, #4
 8024fc0:	429d      	cmp	r5, r3
 8024fc2:	461a      	mov	r2, r3
 8024fc4:	d30a      	bcc.n	8024fdc <quorem+0x100>
 8024fc6:	613c      	str	r4, [r7, #16]
 8024fc8:	4630      	mov	r0, r6
 8024fca:	b003      	add	sp, #12
 8024fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fd0:	6812      	ldr	r2, [r2, #0]
 8024fd2:	3b04      	subs	r3, #4
 8024fd4:	2a00      	cmp	r2, #0
 8024fd6:	d1ce      	bne.n	8024f76 <quorem+0x9a>
 8024fd8:	3c01      	subs	r4, #1
 8024fda:	e7c9      	b.n	8024f70 <quorem+0x94>
 8024fdc:	6812      	ldr	r2, [r2, #0]
 8024fde:	3b04      	subs	r3, #4
 8024fe0:	2a00      	cmp	r2, #0
 8024fe2:	d1f0      	bne.n	8024fc6 <quorem+0xea>
 8024fe4:	3c01      	subs	r4, #1
 8024fe6:	e7eb      	b.n	8024fc0 <quorem+0xe4>
 8024fe8:	2000      	movs	r0, #0
 8024fea:	e7ee      	b.n	8024fca <quorem+0xee>
 8024fec:	0000      	movs	r0, r0
	...

08024ff0 <_dtoa_r>:
 8024ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ff4:	ed2d 8b04 	vpush	{d8-d9}
 8024ff8:	69c5      	ldr	r5, [r0, #28]
 8024ffa:	b093      	sub	sp, #76	; 0x4c
 8024ffc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8025000:	ec57 6b10 	vmov	r6, r7, d0
 8025004:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025008:	9107      	str	r1, [sp, #28]
 802500a:	4604      	mov	r4, r0
 802500c:	920a      	str	r2, [sp, #40]	; 0x28
 802500e:	930d      	str	r3, [sp, #52]	; 0x34
 8025010:	b975      	cbnz	r5, 8025030 <_dtoa_r+0x40>
 8025012:	2010      	movs	r0, #16
 8025014:	f7fd fd6e 	bl	8022af4 <malloc>
 8025018:	4602      	mov	r2, r0
 802501a:	61e0      	str	r0, [r4, #28]
 802501c:	b920      	cbnz	r0, 8025028 <_dtoa_r+0x38>
 802501e:	4bae      	ldr	r3, [pc, #696]	; (80252d8 <_dtoa_r+0x2e8>)
 8025020:	21ef      	movs	r1, #239	; 0xef
 8025022:	48ae      	ldr	r0, [pc, #696]	; (80252dc <_dtoa_r+0x2ec>)
 8025024:	f7fd fd48 	bl	8022ab8 <__assert_func>
 8025028:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802502c:	6005      	str	r5, [r0, #0]
 802502e:	60c5      	str	r5, [r0, #12]
 8025030:	69e3      	ldr	r3, [r4, #28]
 8025032:	6819      	ldr	r1, [r3, #0]
 8025034:	b151      	cbz	r1, 802504c <_dtoa_r+0x5c>
 8025036:	685a      	ldr	r2, [r3, #4]
 8025038:	604a      	str	r2, [r1, #4]
 802503a:	2301      	movs	r3, #1
 802503c:	4093      	lsls	r3, r2
 802503e:	608b      	str	r3, [r1, #8]
 8025040:	4620      	mov	r0, r4
 8025042:	f000 fe9b 	bl	8025d7c <_Bfree>
 8025046:	69e3      	ldr	r3, [r4, #28]
 8025048:	2200      	movs	r2, #0
 802504a:	601a      	str	r2, [r3, #0]
 802504c:	1e3b      	subs	r3, r7, #0
 802504e:	bfbb      	ittet	lt
 8025050:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8025054:	9303      	strlt	r3, [sp, #12]
 8025056:	2300      	movge	r3, #0
 8025058:	2201      	movlt	r2, #1
 802505a:	bfac      	ite	ge
 802505c:	f8c8 3000 	strge.w	r3, [r8]
 8025060:	f8c8 2000 	strlt.w	r2, [r8]
 8025064:	4b9e      	ldr	r3, [pc, #632]	; (80252e0 <_dtoa_r+0x2f0>)
 8025066:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802506a:	ea33 0308 	bics.w	r3, r3, r8
 802506e:	d11b      	bne.n	80250a8 <_dtoa_r+0xb8>
 8025070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025072:	f242 730f 	movw	r3, #9999	; 0x270f
 8025076:	6013      	str	r3, [r2, #0]
 8025078:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802507c:	4333      	orrs	r3, r6
 802507e:	f000 8593 	beq.w	8025ba8 <_dtoa_r+0xbb8>
 8025082:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025084:	b963      	cbnz	r3, 80250a0 <_dtoa_r+0xb0>
 8025086:	4b97      	ldr	r3, [pc, #604]	; (80252e4 <_dtoa_r+0x2f4>)
 8025088:	e027      	b.n	80250da <_dtoa_r+0xea>
 802508a:	4b97      	ldr	r3, [pc, #604]	; (80252e8 <_dtoa_r+0x2f8>)
 802508c:	9300      	str	r3, [sp, #0]
 802508e:	3308      	adds	r3, #8
 8025090:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025092:	6013      	str	r3, [r2, #0]
 8025094:	9800      	ldr	r0, [sp, #0]
 8025096:	b013      	add	sp, #76	; 0x4c
 8025098:	ecbd 8b04 	vpop	{d8-d9}
 802509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250a0:	4b90      	ldr	r3, [pc, #576]	; (80252e4 <_dtoa_r+0x2f4>)
 80250a2:	9300      	str	r3, [sp, #0]
 80250a4:	3303      	adds	r3, #3
 80250a6:	e7f3      	b.n	8025090 <_dtoa_r+0xa0>
 80250a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80250ac:	2200      	movs	r2, #0
 80250ae:	ec51 0b17 	vmov	r0, r1, d7
 80250b2:	eeb0 8a47 	vmov.f32	s16, s14
 80250b6:	eef0 8a67 	vmov.f32	s17, s15
 80250ba:	2300      	movs	r3, #0
 80250bc:	f7db fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 80250c0:	4681      	mov	r9, r0
 80250c2:	b160      	cbz	r0, 80250de <_dtoa_r+0xee>
 80250c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80250c6:	2301      	movs	r3, #1
 80250c8:	6013      	str	r3, [r2, #0]
 80250ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80250cc:	2b00      	cmp	r3, #0
 80250ce:	f000 8568 	beq.w	8025ba2 <_dtoa_r+0xbb2>
 80250d2:	4b86      	ldr	r3, [pc, #536]	; (80252ec <_dtoa_r+0x2fc>)
 80250d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80250d6:	6013      	str	r3, [r2, #0]
 80250d8:	3b01      	subs	r3, #1
 80250da:	9300      	str	r3, [sp, #0]
 80250dc:	e7da      	b.n	8025094 <_dtoa_r+0xa4>
 80250de:	aa10      	add	r2, sp, #64	; 0x40
 80250e0:	a911      	add	r1, sp, #68	; 0x44
 80250e2:	4620      	mov	r0, r4
 80250e4:	eeb0 0a48 	vmov.f32	s0, s16
 80250e8:	eef0 0a68 	vmov.f32	s1, s17
 80250ec:	f001 f928 	bl	8026340 <__d2b>
 80250f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80250f4:	4682      	mov	sl, r0
 80250f6:	2d00      	cmp	r5, #0
 80250f8:	d07f      	beq.n	80251fa <_dtoa_r+0x20a>
 80250fa:	ee18 3a90 	vmov	r3, s17
 80250fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025102:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8025106:	ec51 0b18 	vmov	r0, r1, d8
 802510a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802510e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025112:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8025116:	4619      	mov	r1, r3
 8025118:	2200      	movs	r2, #0
 802511a:	4b75      	ldr	r3, [pc, #468]	; (80252f0 <_dtoa_r+0x300>)
 802511c:	f7db f8c4 	bl	80002a8 <__aeabi_dsub>
 8025120:	a367      	add	r3, pc, #412	; (adr r3, 80252c0 <_dtoa_r+0x2d0>)
 8025122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025126:	f7db fa77 	bl	8000618 <__aeabi_dmul>
 802512a:	a367      	add	r3, pc, #412	; (adr r3, 80252c8 <_dtoa_r+0x2d8>)
 802512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025130:	f7db f8bc 	bl	80002ac <__adddf3>
 8025134:	4606      	mov	r6, r0
 8025136:	4628      	mov	r0, r5
 8025138:	460f      	mov	r7, r1
 802513a:	f7db fa03 	bl	8000544 <__aeabi_i2d>
 802513e:	a364      	add	r3, pc, #400	; (adr r3, 80252d0 <_dtoa_r+0x2e0>)
 8025140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025144:	f7db fa68 	bl	8000618 <__aeabi_dmul>
 8025148:	4602      	mov	r2, r0
 802514a:	460b      	mov	r3, r1
 802514c:	4630      	mov	r0, r6
 802514e:	4639      	mov	r1, r7
 8025150:	f7db f8ac 	bl	80002ac <__adddf3>
 8025154:	4606      	mov	r6, r0
 8025156:	460f      	mov	r7, r1
 8025158:	f7db fd0e 	bl	8000b78 <__aeabi_d2iz>
 802515c:	2200      	movs	r2, #0
 802515e:	4683      	mov	fp, r0
 8025160:	2300      	movs	r3, #0
 8025162:	4630      	mov	r0, r6
 8025164:	4639      	mov	r1, r7
 8025166:	f7db fcc9 	bl	8000afc <__aeabi_dcmplt>
 802516a:	b148      	cbz	r0, 8025180 <_dtoa_r+0x190>
 802516c:	4658      	mov	r0, fp
 802516e:	f7db f9e9 	bl	8000544 <__aeabi_i2d>
 8025172:	4632      	mov	r2, r6
 8025174:	463b      	mov	r3, r7
 8025176:	f7db fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 802517a:	b908      	cbnz	r0, 8025180 <_dtoa_r+0x190>
 802517c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8025180:	f1bb 0f16 	cmp.w	fp, #22
 8025184:	d857      	bhi.n	8025236 <_dtoa_r+0x246>
 8025186:	4b5b      	ldr	r3, [pc, #364]	; (80252f4 <_dtoa_r+0x304>)
 8025188:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025190:	ec51 0b18 	vmov	r0, r1, d8
 8025194:	f7db fcb2 	bl	8000afc <__aeabi_dcmplt>
 8025198:	2800      	cmp	r0, #0
 802519a:	d04e      	beq.n	802523a <_dtoa_r+0x24a>
 802519c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80251a0:	2300      	movs	r3, #0
 80251a2:	930c      	str	r3, [sp, #48]	; 0x30
 80251a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80251a6:	1b5b      	subs	r3, r3, r5
 80251a8:	1e5a      	subs	r2, r3, #1
 80251aa:	bf45      	ittet	mi
 80251ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80251b0:	9305      	strmi	r3, [sp, #20]
 80251b2:	2300      	movpl	r3, #0
 80251b4:	2300      	movmi	r3, #0
 80251b6:	9206      	str	r2, [sp, #24]
 80251b8:	bf54      	ite	pl
 80251ba:	9305      	strpl	r3, [sp, #20]
 80251bc:	9306      	strmi	r3, [sp, #24]
 80251be:	f1bb 0f00 	cmp.w	fp, #0
 80251c2:	db3c      	blt.n	802523e <_dtoa_r+0x24e>
 80251c4:	9b06      	ldr	r3, [sp, #24]
 80251c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80251ca:	445b      	add	r3, fp
 80251cc:	9306      	str	r3, [sp, #24]
 80251ce:	2300      	movs	r3, #0
 80251d0:	9308      	str	r3, [sp, #32]
 80251d2:	9b07      	ldr	r3, [sp, #28]
 80251d4:	2b09      	cmp	r3, #9
 80251d6:	d868      	bhi.n	80252aa <_dtoa_r+0x2ba>
 80251d8:	2b05      	cmp	r3, #5
 80251da:	bfc4      	itt	gt
 80251dc:	3b04      	subgt	r3, #4
 80251de:	9307      	strgt	r3, [sp, #28]
 80251e0:	9b07      	ldr	r3, [sp, #28]
 80251e2:	f1a3 0302 	sub.w	r3, r3, #2
 80251e6:	bfcc      	ite	gt
 80251e8:	2500      	movgt	r5, #0
 80251ea:	2501      	movle	r5, #1
 80251ec:	2b03      	cmp	r3, #3
 80251ee:	f200 8085 	bhi.w	80252fc <_dtoa_r+0x30c>
 80251f2:	e8df f003 	tbb	[pc, r3]
 80251f6:	3b2e      	.short	0x3b2e
 80251f8:	5839      	.short	0x5839
 80251fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80251fe:	441d      	add	r5, r3
 8025200:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8025204:	2b20      	cmp	r3, #32
 8025206:	bfc1      	itttt	gt
 8025208:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802520c:	fa08 f803 	lslgt.w	r8, r8, r3
 8025210:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8025214:	fa26 f303 	lsrgt.w	r3, r6, r3
 8025218:	bfd6      	itet	le
 802521a:	f1c3 0320 	rsble	r3, r3, #32
 802521e:	ea48 0003 	orrgt.w	r0, r8, r3
 8025222:	fa06 f003 	lslle.w	r0, r6, r3
 8025226:	f7db f97d 	bl	8000524 <__aeabi_ui2d>
 802522a:	2201      	movs	r2, #1
 802522c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8025230:	3d01      	subs	r5, #1
 8025232:	920e      	str	r2, [sp, #56]	; 0x38
 8025234:	e76f      	b.n	8025116 <_dtoa_r+0x126>
 8025236:	2301      	movs	r3, #1
 8025238:	e7b3      	b.n	80251a2 <_dtoa_r+0x1b2>
 802523a:	900c      	str	r0, [sp, #48]	; 0x30
 802523c:	e7b2      	b.n	80251a4 <_dtoa_r+0x1b4>
 802523e:	9b05      	ldr	r3, [sp, #20]
 8025240:	eba3 030b 	sub.w	r3, r3, fp
 8025244:	9305      	str	r3, [sp, #20]
 8025246:	f1cb 0300 	rsb	r3, fp, #0
 802524a:	9308      	str	r3, [sp, #32]
 802524c:	2300      	movs	r3, #0
 802524e:	930b      	str	r3, [sp, #44]	; 0x2c
 8025250:	e7bf      	b.n	80251d2 <_dtoa_r+0x1e2>
 8025252:	2300      	movs	r3, #0
 8025254:	9309      	str	r3, [sp, #36]	; 0x24
 8025256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025258:	2b00      	cmp	r3, #0
 802525a:	dc52      	bgt.n	8025302 <_dtoa_r+0x312>
 802525c:	2301      	movs	r3, #1
 802525e:	9301      	str	r3, [sp, #4]
 8025260:	9304      	str	r3, [sp, #16]
 8025262:	461a      	mov	r2, r3
 8025264:	920a      	str	r2, [sp, #40]	; 0x28
 8025266:	e00b      	b.n	8025280 <_dtoa_r+0x290>
 8025268:	2301      	movs	r3, #1
 802526a:	e7f3      	b.n	8025254 <_dtoa_r+0x264>
 802526c:	2300      	movs	r3, #0
 802526e:	9309      	str	r3, [sp, #36]	; 0x24
 8025270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025272:	445b      	add	r3, fp
 8025274:	9301      	str	r3, [sp, #4]
 8025276:	3301      	adds	r3, #1
 8025278:	2b01      	cmp	r3, #1
 802527a:	9304      	str	r3, [sp, #16]
 802527c:	bfb8      	it	lt
 802527e:	2301      	movlt	r3, #1
 8025280:	69e0      	ldr	r0, [r4, #28]
 8025282:	2100      	movs	r1, #0
 8025284:	2204      	movs	r2, #4
 8025286:	f102 0614 	add.w	r6, r2, #20
 802528a:	429e      	cmp	r6, r3
 802528c:	d93d      	bls.n	802530a <_dtoa_r+0x31a>
 802528e:	6041      	str	r1, [r0, #4]
 8025290:	4620      	mov	r0, r4
 8025292:	f000 fd33 	bl	8025cfc <_Balloc>
 8025296:	9000      	str	r0, [sp, #0]
 8025298:	2800      	cmp	r0, #0
 802529a:	d139      	bne.n	8025310 <_dtoa_r+0x320>
 802529c:	4b16      	ldr	r3, [pc, #88]	; (80252f8 <_dtoa_r+0x308>)
 802529e:	4602      	mov	r2, r0
 80252a0:	f240 11af 	movw	r1, #431	; 0x1af
 80252a4:	e6bd      	b.n	8025022 <_dtoa_r+0x32>
 80252a6:	2301      	movs	r3, #1
 80252a8:	e7e1      	b.n	802526e <_dtoa_r+0x27e>
 80252aa:	2501      	movs	r5, #1
 80252ac:	2300      	movs	r3, #0
 80252ae:	9307      	str	r3, [sp, #28]
 80252b0:	9509      	str	r5, [sp, #36]	; 0x24
 80252b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80252b6:	9301      	str	r3, [sp, #4]
 80252b8:	9304      	str	r3, [sp, #16]
 80252ba:	2200      	movs	r2, #0
 80252bc:	2312      	movs	r3, #18
 80252be:	e7d1      	b.n	8025264 <_dtoa_r+0x274>
 80252c0:	636f4361 	.word	0x636f4361
 80252c4:	3fd287a7 	.word	0x3fd287a7
 80252c8:	8b60c8b3 	.word	0x8b60c8b3
 80252cc:	3fc68a28 	.word	0x3fc68a28
 80252d0:	509f79fb 	.word	0x509f79fb
 80252d4:	3fd34413 	.word	0x3fd34413
 80252d8:	0802c82c 	.word	0x0802c82c
 80252dc:	0802cd0d 	.word	0x0802cd0d
 80252e0:	7ff00000 	.word	0x7ff00000
 80252e4:	0802cd09 	.word	0x0802cd09
 80252e8:	0802cd00 	.word	0x0802cd00
 80252ec:	0802cefe 	.word	0x0802cefe
 80252f0:	3ff80000 	.word	0x3ff80000
 80252f4:	0802cdf8 	.word	0x0802cdf8
 80252f8:	0802cd65 	.word	0x0802cd65
 80252fc:	2301      	movs	r3, #1
 80252fe:	9309      	str	r3, [sp, #36]	; 0x24
 8025300:	e7d7      	b.n	80252b2 <_dtoa_r+0x2c2>
 8025302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025304:	9301      	str	r3, [sp, #4]
 8025306:	9304      	str	r3, [sp, #16]
 8025308:	e7ba      	b.n	8025280 <_dtoa_r+0x290>
 802530a:	3101      	adds	r1, #1
 802530c:	0052      	lsls	r2, r2, #1
 802530e:	e7ba      	b.n	8025286 <_dtoa_r+0x296>
 8025310:	69e3      	ldr	r3, [r4, #28]
 8025312:	9a00      	ldr	r2, [sp, #0]
 8025314:	601a      	str	r2, [r3, #0]
 8025316:	9b04      	ldr	r3, [sp, #16]
 8025318:	2b0e      	cmp	r3, #14
 802531a:	f200 80a8 	bhi.w	802546e <_dtoa_r+0x47e>
 802531e:	2d00      	cmp	r5, #0
 8025320:	f000 80a5 	beq.w	802546e <_dtoa_r+0x47e>
 8025324:	f1bb 0f00 	cmp.w	fp, #0
 8025328:	dd38      	ble.n	802539c <_dtoa_r+0x3ac>
 802532a:	4bc0      	ldr	r3, [pc, #768]	; (802562c <_dtoa_r+0x63c>)
 802532c:	f00b 020f 	and.w	r2, fp, #15
 8025330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8025334:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8025338:	e9d3 6700 	ldrd	r6, r7, [r3]
 802533c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8025340:	d019      	beq.n	8025376 <_dtoa_r+0x386>
 8025342:	4bbb      	ldr	r3, [pc, #748]	; (8025630 <_dtoa_r+0x640>)
 8025344:	ec51 0b18 	vmov	r0, r1, d8
 8025348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802534c:	f7db fa8e 	bl	800086c <__aeabi_ddiv>
 8025350:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025354:	f008 080f 	and.w	r8, r8, #15
 8025358:	2503      	movs	r5, #3
 802535a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8025630 <_dtoa_r+0x640>
 802535e:	f1b8 0f00 	cmp.w	r8, #0
 8025362:	d10a      	bne.n	802537a <_dtoa_r+0x38a>
 8025364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025368:	4632      	mov	r2, r6
 802536a:	463b      	mov	r3, r7
 802536c:	f7db fa7e 	bl	800086c <__aeabi_ddiv>
 8025370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025374:	e02b      	b.n	80253ce <_dtoa_r+0x3de>
 8025376:	2502      	movs	r5, #2
 8025378:	e7ef      	b.n	802535a <_dtoa_r+0x36a>
 802537a:	f018 0f01 	tst.w	r8, #1
 802537e:	d008      	beq.n	8025392 <_dtoa_r+0x3a2>
 8025380:	4630      	mov	r0, r6
 8025382:	4639      	mov	r1, r7
 8025384:	e9d9 2300 	ldrd	r2, r3, [r9]
 8025388:	f7db f946 	bl	8000618 <__aeabi_dmul>
 802538c:	3501      	adds	r5, #1
 802538e:	4606      	mov	r6, r0
 8025390:	460f      	mov	r7, r1
 8025392:	ea4f 0868 	mov.w	r8, r8, asr #1
 8025396:	f109 0908 	add.w	r9, r9, #8
 802539a:	e7e0      	b.n	802535e <_dtoa_r+0x36e>
 802539c:	f000 809f 	beq.w	80254de <_dtoa_r+0x4ee>
 80253a0:	f1cb 0600 	rsb	r6, fp, #0
 80253a4:	4ba1      	ldr	r3, [pc, #644]	; (802562c <_dtoa_r+0x63c>)
 80253a6:	4fa2      	ldr	r7, [pc, #648]	; (8025630 <_dtoa_r+0x640>)
 80253a8:	f006 020f 	and.w	r2, r6, #15
 80253ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80253b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80253b4:	ec51 0b18 	vmov	r0, r1, d8
 80253b8:	f7db f92e 	bl	8000618 <__aeabi_dmul>
 80253bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80253c0:	1136      	asrs	r6, r6, #4
 80253c2:	2300      	movs	r3, #0
 80253c4:	2502      	movs	r5, #2
 80253c6:	2e00      	cmp	r6, #0
 80253c8:	d17e      	bne.n	80254c8 <_dtoa_r+0x4d8>
 80253ca:	2b00      	cmp	r3, #0
 80253cc:	d1d0      	bne.n	8025370 <_dtoa_r+0x380>
 80253ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80253d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80253d4:	2b00      	cmp	r3, #0
 80253d6:	f000 8084 	beq.w	80254e2 <_dtoa_r+0x4f2>
 80253da:	4b96      	ldr	r3, [pc, #600]	; (8025634 <_dtoa_r+0x644>)
 80253dc:	2200      	movs	r2, #0
 80253de:	4640      	mov	r0, r8
 80253e0:	4649      	mov	r1, r9
 80253e2:	f7db fb8b 	bl	8000afc <__aeabi_dcmplt>
 80253e6:	2800      	cmp	r0, #0
 80253e8:	d07b      	beq.n	80254e2 <_dtoa_r+0x4f2>
 80253ea:	9b04      	ldr	r3, [sp, #16]
 80253ec:	2b00      	cmp	r3, #0
 80253ee:	d078      	beq.n	80254e2 <_dtoa_r+0x4f2>
 80253f0:	9b01      	ldr	r3, [sp, #4]
 80253f2:	2b00      	cmp	r3, #0
 80253f4:	dd39      	ble.n	802546a <_dtoa_r+0x47a>
 80253f6:	4b90      	ldr	r3, [pc, #576]	; (8025638 <_dtoa_r+0x648>)
 80253f8:	2200      	movs	r2, #0
 80253fa:	4640      	mov	r0, r8
 80253fc:	4649      	mov	r1, r9
 80253fe:	f7db f90b 	bl	8000618 <__aeabi_dmul>
 8025402:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025406:	9e01      	ldr	r6, [sp, #4]
 8025408:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 802540c:	3501      	adds	r5, #1
 802540e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025412:	4628      	mov	r0, r5
 8025414:	f7db f896 	bl	8000544 <__aeabi_i2d>
 8025418:	4642      	mov	r2, r8
 802541a:	464b      	mov	r3, r9
 802541c:	f7db f8fc 	bl	8000618 <__aeabi_dmul>
 8025420:	4b86      	ldr	r3, [pc, #536]	; (802563c <_dtoa_r+0x64c>)
 8025422:	2200      	movs	r2, #0
 8025424:	f7da ff42 	bl	80002ac <__adddf3>
 8025428:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802542c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025430:	9303      	str	r3, [sp, #12]
 8025432:	2e00      	cmp	r6, #0
 8025434:	d158      	bne.n	80254e8 <_dtoa_r+0x4f8>
 8025436:	4b82      	ldr	r3, [pc, #520]	; (8025640 <_dtoa_r+0x650>)
 8025438:	2200      	movs	r2, #0
 802543a:	4640      	mov	r0, r8
 802543c:	4649      	mov	r1, r9
 802543e:	f7da ff33 	bl	80002a8 <__aeabi_dsub>
 8025442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8025446:	4680      	mov	r8, r0
 8025448:	4689      	mov	r9, r1
 802544a:	f7db fb75 	bl	8000b38 <__aeabi_dcmpgt>
 802544e:	2800      	cmp	r0, #0
 8025450:	f040 8296 	bne.w	8025980 <_dtoa_r+0x990>
 8025454:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8025458:	4640      	mov	r0, r8
 802545a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802545e:	4649      	mov	r1, r9
 8025460:	f7db fb4c 	bl	8000afc <__aeabi_dcmplt>
 8025464:	2800      	cmp	r0, #0
 8025466:	f040 8289 	bne.w	802597c <_dtoa_r+0x98c>
 802546a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802546e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8025470:	2b00      	cmp	r3, #0
 8025472:	f2c0 814e 	blt.w	8025712 <_dtoa_r+0x722>
 8025476:	f1bb 0f0e 	cmp.w	fp, #14
 802547a:	f300 814a 	bgt.w	8025712 <_dtoa_r+0x722>
 802547e:	4b6b      	ldr	r3, [pc, #428]	; (802562c <_dtoa_r+0x63c>)
 8025480:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8025484:	e9d3 8900 	ldrd	r8, r9, [r3]
 8025488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802548a:	2b00      	cmp	r3, #0
 802548c:	f280 80dc 	bge.w	8025648 <_dtoa_r+0x658>
 8025490:	9b04      	ldr	r3, [sp, #16]
 8025492:	2b00      	cmp	r3, #0
 8025494:	f300 80d8 	bgt.w	8025648 <_dtoa_r+0x658>
 8025498:	f040 826f 	bne.w	802597a <_dtoa_r+0x98a>
 802549c:	4b68      	ldr	r3, [pc, #416]	; (8025640 <_dtoa_r+0x650>)
 802549e:	2200      	movs	r2, #0
 80254a0:	4640      	mov	r0, r8
 80254a2:	4649      	mov	r1, r9
 80254a4:	f7db f8b8 	bl	8000618 <__aeabi_dmul>
 80254a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80254ac:	f7db fb3a 	bl	8000b24 <__aeabi_dcmpge>
 80254b0:	9e04      	ldr	r6, [sp, #16]
 80254b2:	4637      	mov	r7, r6
 80254b4:	2800      	cmp	r0, #0
 80254b6:	f040 8245 	bne.w	8025944 <_dtoa_r+0x954>
 80254ba:	9d00      	ldr	r5, [sp, #0]
 80254bc:	2331      	movs	r3, #49	; 0x31
 80254be:	f805 3b01 	strb.w	r3, [r5], #1
 80254c2:	f10b 0b01 	add.w	fp, fp, #1
 80254c6:	e241      	b.n	802594c <_dtoa_r+0x95c>
 80254c8:	07f2      	lsls	r2, r6, #31
 80254ca:	d505      	bpl.n	80254d8 <_dtoa_r+0x4e8>
 80254cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80254d0:	f7db f8a2 	bl	8000618 <__aeabi_dmul>
 80254d4:	3501      	adds	r5, #1
 80254d6:	2301      	movs	r3, #1
 80254d8:	1076      	asrs	r6, r6, #1
 80254da:	3708      	adds	r7, #8
 80254dc:	e773      	b.n	80253c6 <_dtoa_r+0x3d6>
 80254de:	2502      	movs	r5, #2
 80254e0:	e775      	b.n	80253ce <_dtoa_r+0x3de>
 80254e2:	9e04      	ldr	r6, [sp, #16]
 80254e4:	465f      	mov	r7, fp
 80254e6:	e792      	b.n	802540e <_dtoa_r+0x41e>
 80254e8:	9900      	ldr	r1, [sp, #0]
 80254ea:	4b50      	ldr	r3, [pc, #320]	; (802562c <_dtoa_r+0x63c>)
 80254ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80254f0:	4431      	add	r1, r6
 80254f2:	9102      	str	r1, [sp, #8]
 80254f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80254f6:	eeb0 9a47 	vmov.f32	s18, s14
 80254fa:	eef0 9a67 	vmov.f32	s19, s15
 80254fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8025502:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8025506:	2900      	cmp	r1, #0
 8025508:	d044      	beq.n	8025594 <_dtoa_r+0x5a4>
 802550a:	494e      	ldr	r1, [pc, #312]	; (8025644 <_dtoa_r+0x654>)
 802550c:	2000      	movs	r0, #0
 802550e:	f7db f9ad 	bl	800086c <__aeabi_ddiv>
 8025512:	ec53 2b19 	vmov	r2, r3, d9
 8025516:	f7da fec7 	bl	80002a8 <__aeabi_dsub>
 802551a:	9d00      	ldr	r5, [sp, #0]
 802551c:	ec41 0b19 	vmov	d9, r0, r1
 8025520:	4649      	mov	r1, r9
 8025522:	4640      	mov	r0, r8
 8025524:	f7db fb28 	bl	8000b78 <__aeabi_d2iz>
 8025528:	4606      	mov	r6, r0
 802552a:	f7db f80b 	bl	8000544 <__aeabi_i2d>
 802552e:	4602      	mov	r2, r0
 8025530:	460b      	mov	r3, r1
 8025532:	4640      	mov	r0, r8
 8025534:	4649      	mov	r1, r9
 8025536:	f7da feb7 	bl	80002a8 <__aeabi_dsub>
 802553a:	3630      	adds	r6, #48	; 0x30
 802553c:	f805 6b01 	strb.w	r6, [r5], #1
 8025540:	ec53 2b19 	vmov	r2, r3, d9
 8025544:	4680      	mov	r8, r0
 8025546:	4689      	mov	r9, r1
 8025548:	f7db fad8 	bl	8000afc <__aeabi_dcmplt>
 802554c:	2800      	cmp	r0, #0
 802554e:	d164      	bne.n	802561a <_dtoa_r+0x62a>
 8025550:	4642      	mov	r2, r8
 8025552:	464b      	mov	r3, r9
 8025554:	4937      	ldr	r1, [pc, #220]	; (8025634 <_dtoa_r+0x644>)
 8025556:	2000      	movs	r0, #0
 8025558:	f7da fea6 	bl	80002a8 <__aeabi_dsub>
 802555c:	ec53 2b19 	vmov	r2, r3, d9
 8025560:	f7db facc 	bl	8000afc <__aeabi_dcmplt>
 8025564:	2800      	cmp	r0, #0
 8025566:	f040 80b6 	bne.w	80256d6 <_dtoa_r+0x6e6>
 802556a:	9b02      	ldr	r3, [sp, #8]
 802556c:	429d      	cmp	r5, r3
 802556e:	f43f af7c 	beq.w	802546a <_dtoa_r+0x47a>
 8025572:	4b31      	ldr	r3, [pc, #196]	; (8025638 <_dtoa_r+0x648>)
 8025574:	ec51 0b19 	vmov	r0, r1, d9
 8025578:	2200      	movs	r2, #0
 802557a:	f7db f84d 	bl	8000618 <__aeabi_dmul>
 802557e:	4b2e      	ldr	r3, [pc, #184]	; (8025638 <_dtoa_r+0x648>)
 8025580:	ec41 0b19 	vmov	d9, r0, r1
 8025584:	2200      	movs	r2, #0
 8025586:	4640      	mov	r0, r8
 8025588:	4649      	mov	r1, r9
 802558a:	f7db f845 	bl	8000618 <__aeabi_dmul>
 802558e:	4680      	mov	r8, r0
 8025590:	4689      	mov	r9, r1
 8025592:	e7c5      	b.n	8025520 <_dtoa_r+0x530>
 8025594:	ec51 0b17 	vmov	r0, r1, d7
 8025598:	f7db f83e 	bl	8000618 <__aeabi_dmul>
 802559c:	9b02      	ldr	r3, [sp, #8]
 802559e:	9d00      	ldr	r5, [sp, #0]
 80255a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80255a2:	ec41 0b19 	vmov	d9, r0, r1
 80255a6:	4649      	mov	r1, r9
 80255a8:	4640      	mov	r0, r8
 80255aa:	f7db fae5 	bl	8000b78 <__aeabi_d2iz>
 80255ae:	4606      	mov	r6, r0
 80255b0:	f7da ffc8 	bl	8000544 <__aeabi_i2d>
 80255b4:	3630      	adds	r6, #48	; 0x30
 80255b6:	4602      	mov	r2, r0
 80255b8:	460b      	mov	r3, r1
 80255ba:	4640      	mov	r0, r8
 80255bc:	4649      	mov	r1, r9
 80255be:	f7da fe73 	bl	80002a8 <__aeabi_dsub>
 80255c2:	f805 6b01 	strb.w	r6, [r5], #1
 80255c6:	9b02      	ldr	r3, [sp, #8]
 80255c8:	429d      	cmp	r5, r3
 80255ca:	4680      	mov	r8, r0
 80255cc:	4689      	mov	r9, r1
 80255ce:	f04f 0200 	mov.w	r2, #0
 80255d2:	d124      	bne.n	802561e <_dtoa_r+0x62e>
 80255d4:	4b1b      	ldr	r3, [pc, #108]	; (8025644 <_dtoa_r+0x654>)
 80255d6:	ec51 0b19 	vmov	r0, r1, d9
 80255da:	f7da fe67 	bl	80002ac <__adddf3>
 80255de:	4602      	mov	r2, r0
 80255e0:	460b      	mov	r3, r1
 80255e2:	4640      	mov	r0, r8
 80255e4:	4649      	mov	r1, r9
 80255e6:	f7db faa7 	bl	8000b38 <__aeabi_dcmpgt>
 80255ea:	2800      	cmp	r0, #0
 80255ec:	d173      	bne.n	80256d6 <_dtoa_r+0x6e6>
 80255ee:	ec53 2b19 	vmov	r2, r3, d9
 80255f2:	4914      	ldr	r1, [pc, #80]	; (8025644 <_dtoa_r+0x654>)
 80255f4:	2000      	movs	r0, #0
 80255f6:	f7da fe57 	bl	80002a8 <__aeabi_dsub>
 80255fa:	4602      	mov	r2, r0
 80255fc:	460b      	mov	r3, r1
 80255fe:	4640      	mov	r0, r8
 8025600:	4649      	mov	r1, r9
 8025602:	f7db fa7b 	bl	8000afc <__aeabi_dcmplt>
 8025606:	2800      	cmp	r0, #0
 8025608:	f43f af2f 	beq.w	802546a <_dtoa_r+0x47a>
 802560c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802560e:	1e6b      	subs	r3, r5, #1
 8025610:	930f      	str	r3, [sp, #60]	; 0x3c
 8025612:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8025616:	2b30      	cmp	r3, #48	; 0x30
 8025618:	d0f8      	beq.n	802560c <_dtoa_r+0x61c>
 802561a:	46bb      	mov	fp, r7
 802561c:	e04a      	b.n	80256b4 <_dtoa_r+0x6c4>
 802561e:	4b06      	ldr	r3, [pc, #24]	; (8025638 <_dtoa_r+0x648>)
 8025620:	f7da fffa 	bl	8000618 <__aeabi_dmul>
 8025624:	4680      	mov	r8, r0
 8025626:	4689      	mov	r9, r1
 8025628:	e7bd      	b.n	80255a6 <_dtoa_r+0x5b6>
 802562a:	bf00      	nop
 802562c:	0802cdf8 	.word	0x0802cdf8
 8025630:	0802cdd0 	.word	0x0802cdd0
 8025634:	3ff00000 	.word	0x3ff00000
 8025638:	40240000 	.word	0x40240000
 802563c:	401c0000 	.word	0x401c0000
 8025640:	40140000 	.word	0x40140000
 8025644:	3fe00000 	.word	0x3fe00000
 8025648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802564c:	9d00      	ldr	r5, [sp, #0]
 802564e:	4642      	mov	r2, r8
 8025650:	464b      	mov	r3, r9
 8025652:	4630      	mov	r0, r6
 8025654:	4639      	mov	r1, r7
 8025656:	f7db f909 	bl	800086c <__aeabi_ddiv>
 802565a:	f7db fa8d 	bl	8000b78 <__aeabi_d2iz>
 802565e:	9001      	str	r0, [sp, #4]
 8025660:	f7da ff70 	bl	8000544 <__aeabi_i2d>
 8025664:	4642      	mov	r2, r8
 8025666:	464b      	mov	r3, r9
 8025668:	f7da ffd6 	bl	8000618 <__aeabi_dmul>
 802566c:	4602      	mov	r2, r0
 802566e:	460b      	mov	r3, r1
 8025670:	4630      	mov	r0, r6
 8025672:	4639      	mov	r1, r7
 8025674:	f7da fe18 	bl	80002a8 <__aeabi_dsub>
 8025678:	9e01      	ldr	r6, [sp, #4]
 802567a:	9f04      	ldr	r7, [sp, #16]
 802567c:	3630      	adds	r6, #48	; 0x30
 802567e:	f805 6b01 	strb.w	r6, [r5], #1
 8025682:	9e00      	ldr	r6, [sp, #0]
 8025684:	1bae      	subs	r6, r5, r6
 8025686:	42b7      	cmp	r7, r6
 8025688:	4602      	mov	r2, r0
 802568a:	460b      	mov	r3, r1
 802568c:	d134      	bne.n	80256f8 <_dtoa_r+0x708>
 802568e:	f7da fe0d 	bl	80002ac <__adddf3>
 8025692:	4642      	mov	r2, r8
 8025694:	464b      	mov	r3, r9
 8025696:	4606      	mov	r6, r0
 8025698:	460f      	mov	r7, r1
 802569a:	f7db fa4d 	bl	8000b38 <__aeabi_dcmpgt>
 802569e:	b9c8      	cbnz	r0, 80256d4 <_dtoa_r+0x6e4>
 80256a0:	4642      	mov	r2, r8
 80256a2:	464b      	mov	r3, r9
 80256a4:	4630      	mov	r0, r6
 80256a6:	4639      	mov	r1, r7
 80256a8:	f7db fa1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80256ac:	b110      	cbz	r0, 80256b4 <_dtoa_r+0x6c4>
 80256ae:	9b01      	ldr	r3, [sp, #4]
 80256b0:	07db      	lsls	r3, r3, #31
 80256b2:	d40f      	bmi.n	80256d4 <_dtoa_r+0x6e4>
 80256b4:	4651      	mov	r1, sl
 80256b6:	4620      	mov	r0, r4
 80256b8:	f000 fb60 	bl	8025d7c <_Bfree>
 80256bc:	2300      	movs	r3, #0
 80256be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80256c0:	702b      	strb	r3, [r5, #0]
 80256c2:	f10b 0301 	add.w	r3, fp, #1
 80256c6:	6013      	str	r3, [r2, #0]
 80256c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80256ca:	2b00      	cmp	r3, #0
 80256cc:	f43f ace2 	beq.w	8025094 <_dtoa_r+0xa4>
 80256d0:	601d      	str	r5, [r3, #0]
 80256d2:	e4df      	b.n	8025094 <_dtoa_r+0xa4>
 80256d4:	465f      	mov	r7, fp
 80256d6:	462b      	mov	r3, r5
 80256d8:	461d      	mov	r5, r3
 80256da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80256de:	2a39      	cmp	r2, #57	; 0x39
 80256e0:	d106      	bne.n	80256f0 <_dtoa_r+0x700>
 80256e2:	9a00      	ldr	r2, [sp, #0]
 80256e4:	429a      	cmp	r2, r3
 80256e6:	d1f7      	bne.n	80256d8 <_dtoa_r+0x6e8>
 80256e8:	9900      	ldr	r1, [sp, #0]
 80256ea:	2230      	movs	r2, #48	; 0x30
 80256ec:	3701      	adds	r7, #1
 80256ee:	700a      	strb	r2, [r1, #0]
 80256f0:	781a      	ldrb	r2, [r3, #0]
 80256f2:	3201      	adds	r2, #1
 80256f4:	701a      	strb	r2, [r3, #0]
 80256f6:	e790      	b.n	802561a <_dtoa_r+0x62a>
 80256f8:	4ba3      	ldr	r3, [pc, #652]	; (8025988 <_dtoa_r+0x998>)
 80256fa:	2200      	movs	r2, #0
 80256fc:	f7da ff8c 	bl	8000618 <__aeabi_dmul>
 8025700:	2200      	movs	r2, #0
 8025702:	2300      	movs	r3, #0
 8025704:	4606      	mov	r6, r0
 8025706:	460f      	mov	r7, r1
 8025708:	f7db f9ee 	bl	8000ae8 <__aeabi_dcmpeq>
 802570c:	2800      	cmp	r0, #0
 802570e:	d09e      	beq.n	802564e <_dtoa_r+0x65e>
 8025710:	e7d0      	b.n	80256b4 <_dtoa_r+0x6c4>
 8025712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025714:	2a00      	cmp	r2, #0
 8025716:	f000 80ca 	beq.w	80258ae <_dtoa_r+0x8be>
 802571a:	9a07      	ldr	r2, [sp, #28]
 802571c:	2a01      	cmp	r2, #1
 802571e:	f300 80ad 	bgt.w	802587c <_dtoa_r+0x88c>
 8025722:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025724:	2a00      	cmp	r2, #0
 8025726:	f000 80a5 	beq.w	8025874 <_dtoa_r+0x884>
 802572a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802572e:	9e08      	ldr	r6, [sp, #32]
 8025730:	9d05      	ldr	r5, [sp, #20]
 8025732:	9a05      	ldr	r2, [sp, #20]
 8025734:	441a      	add	r2, r3
 8025736:	9205      	str	r2, [sp, #20]
 8025738:	9a06      	ldr	r2, [sp, #24]
 802573a:	2101      	movs	r1, #1
 802573c:	441a      	add	r2, r3
 802573e:	4620      	mov	r0, r4
 8025740:	9206      	str	r2, [sp, #24]
 8025742:	f000 fbd1 	bl	8025ee8 <__i2b>
 8025746:	4607      	mov	r7, r0
 8025748:	b165      	cbz	r5, 8025764 <_dtoa_r+0x774>
 802574a:	9b06      	ldr	r3, [sp, #24]
 802574c:	2b00      	cmp	r3, #0
 802574e:	dd09      	ble.n	8025764 <_dtoa_r+0x774>
 8025750:	42ab      	cmp	r3, r5
 8025752:	9a05      	ldr	r2, [sp, #20]
 8025754:	bfa8      	it	ge
 8025756:	462b      	movge	r3, r5
 8025758:	1ad2      	subs	r2, r2, r3
 802575a:	9205      	str	r2, [sp, #20]
 802575c:	9a06      	ldr	r2, [sp, #24]
 802575e:	1aed      	subs	r5, r5, r3
 8025760:	1ad3      	subs	r3, r2, r3
 8025762:	9306      	str	r3, [sp, #24]
 8025764:	9b08      	ldr	r3, [sp, #32]
 8025766:	b1f3      	cbz	r3, 80257a6 <_dtoa_r+0x7b6>
 8025768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802576a:	2b00      	cmp	r3, #0
 802576c:	f000 80a3 	beq.w	80258b6 <_dtoa_r+0x8c6>
 8025770:	2e00      	cmp	r6, #0
 8025772:	dd10      	ble.n	8025796 <_dtoa_r+0x7a6>
 8025774:	4639      	mov	r1, r7
 8025776:	4632      	mov	r2, r6
 8025778:	4620      	mov	r0, r4
 802577a:	f000 fc75 	bl	8026068 <__pow5mult>
 802577e:	4652      	mov	r2, sl
 8025780:	4601      	mov	r1, r0
 8025782:	4607      	mov	r7, r0
 8025784:	4620      	mov	r0, r4
 8025786:	f000 fbc5 	bl	8025f14 <__multiply>
 802578a:	4651      	mov	r1, sl
 802578c:	4680      	mov	r8, r0
 802578e:	4620      	mov	r0, r4
 8025790:	f000 faf4 	bl	8025d7c <_Bfree>
 8025794:	46c2      	mov	sl, r8
 8025796:	9b08      	ldr	r3, [sp, #32]
 8025798:	1b9a      	subs	r2, r3, r6
 802579a:	d004      	beq.n	80257a6 <_dtoa_r+0x7b6>
 802579c:	4651      	mov	r1, sl
 802579e:	4620      	mov	r0, r4
 80257a0:	f000 fc62 	bl	8026068 <__pow5mult>
 80257a4:	4682      	mov	sl, r0
 80257a6:	2101      	movs	r1, #1
 80257a8:	4620      	mov	r0, r4
 80257aa:	f000 fb9d 	bl	8025ee8 <__i2b>
 80257ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	4606      	mov	r6, r0
 80257b4:	f340 8081 	ble.w	80258ba <_dtoa_r+0x8ca>
 80257b8:	461a      	mov	r2, r3
 80257ba:	4601      	mov	r1, r0
 80257bc:	4620      	mov	r0, r4
 80257be:	f000 fc53 	bl	8026068 <__pow5mult>
 80257c2:	9b07      	ldr	r3, [sp, #28]
 80257c4:	2b01      	cmp	r3, #1
 80257c6:	4606      	mov	r6, r0
 80257c8:	dd7a      	ble.n	80258c0 <_dtoa_r+0x8d0>
 80257ca:	f04f 0800 	mov.w	r8, #0
 80257ce:	6933      	ldr	r3, [r6, #16]
 80257d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80257d4:	6918      	ldr	r0, [r3, #16]
 80257d6:	f000 fb39 	bl	8025e4c <__hi0bits>
 80257da:	f1c0 0020 	rsb	r0, r0, #32
 80257de:	9b06      	ldr	r3, [sp, #24]
 80257e0:	4418      	add	r0, r3
 80257e2:	f010 001f 	ands.w	r0, r0, #31
 80257e6:	f000 8094 	beq.w	8025912 <_dtoa_r+0x922>
 80257ea:	f1c0 0320 	rsb	r3, r0, #32
 80257ee:	2b04      	cmp	r3, #4
 80257f0:	f340 8085 	ble.w	80258fe <_dtoa_r+0x90e>
 80257f4:	9b05      	ldr	r3, [sp, #20]
 80257f6:	f1c0 001c 	rsb	r0, r0, #28
 80257fa:	4403      	add	r3, r0
 80257fc:	9305      	str	r3, [sp, #20]
 80257fe:	9b06      	ldr	r3, [sp, #24]
 8025800:	4403      	add	r3, r0
 8025802:	4405      	add	r5, r0
 8025804:	9306      	str	r3, [sp, #24]
 8025806:	9b05      	ldr	r3, [sp, #20]
 8025808:	2b00      	cmp	r3, #0
 802580a:	dd05      	ble.n	8025818 <_dtoa_r+0x828>
 802580c:	4651      	mov	r1, sl
 802580e:	461a      	mov	r2, r3
 8025810:	4620      	mov	r0, r4
 8025812:	f000 fc83 	bl	802611c <__lshift>
 8025816:	4682      	mov	sl, r0
 8025818:	9b06      	ldr	r3, [sp, #24]
 802581a:	2b00      	cmp	r3, #0
 802581c:	dd05      	ble.n	802582a <_dtoa_r+0x83a>
 802581e:	4631      	mov	r1, r6
 8025820:	461a      	mov	r2, r3
 8025822:	4620      	mov	r0, r4
 8025824:	f000 fc7a 	bl	802611c <__lshift>
 8025828:	4606      	mov	r6, r0
 802582a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802582c:	2b00      	cmp	r3, #0
 802582e:	d072      	beq.n	8025916 <_dtoa_r+0x926>
 8025830:	4631      	mov	r1, r6
 8025832:	4650      	mov	r0, sl
 8025834:	f000 fcde 	bl	80261f4 <__mcmp>
 8025838:	2800      	cmp	r0, #0
 802583a:	da6c      	bge.n	8025916 <_dtoa_r+0x926>
 802583c:	2300      	movs	r3, #0
 802583e:	4651      	mov	r1, sl
 8025840:	220a      	movs	r2, #10
 8025842:	4620      	mov	r0, r4
 8025844:	f000 fabc 	bl	8025dc0 <__multadd>
 8025848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802584a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 802584e:	4682      	mov	sl, r0
 8025850:	2b00      	cmp	r3, #0
 8025852:	f000 81b0 	beq.w	8025bb6 <_dtoa_r+0xbc6>
 8025856:	2300      	movs	r3, #0
 8025858:	4639      	mov	r1, r7
 802585a:	220a      	movs	r2, #10
 802585c:	4620      	mov	r0, r4
 802585e:	f000 faaf 	bl	8025dc0 <__multadd>
 8025862:	9b01      	ldr	r3, [sp, #4]
 8025864:	2b00      	cmp	r3, #0
 8025866:	4607      	mov	r7, r0
 8025868:	f300 8096 	bgt.w	8025998 <_dtoa_r+0x9a8>
 802586c:	9b07      	ldr	r3, [sp, #28]
 802586e:	2b02      	cmp	r3, #2
 8025870:	dc59      	bgt.n	8025926 <_dtoa_r+0x936>
 8025872:	e091      	b.n	8025998 <_dtoa_r+0x9a8>
 8025874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802587a:	e758      	b.n	802572e <_dtoa_r+0x73e>
 802587c:	9b04      	ldr	r3, [sp, #16]
 802587e:	1e5e      	subs	r6, r3, #1
 8025880:	9b08      	ldr	r3, [sp, #32]
 8025882:	42b3      	cmp	r3, r6
 8025884:	bfbf      	itttt	lt
 8025886:	9b08      	ldrlt	r3, [sp, #32]
 8025888:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802588a:	9608      	strlt	r6, [sp, #32]
 802588c:	1af3      	sublt	r3, r6, r3
 802588e:	bfb4      	ite	lt
 8025890:	18d2      	addlt	r2, r2, r3
 8025892:	1b9e      	subge	r6, r3, r6
 8025894:	9b04      	ldr	r3, [sp, #16]
 8025896:	bfbc      	itt	lt
 8025898:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802589a:	2600      	movlt	r6, #0
 802589c:	2b00      	cmp	r3, #0
 802589e:	bfb7      	itett	lt
 80258a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80258a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80258a8:	1a9d      	sublt	r5, r3, r2
 80258aa:	2300      	movlt	r3, #0
 80258ac:	e741      	b.n	8025732 <_dtoa_r+0x742>
 80258ae:	9e08      	ldr	r6, [sp, #32]
 80258b0:	9d05      	ldr	r5, [sp, #20]
 80258b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80258b4:	e748      	b.n	8025748 <_dtoa_r+0x758>
 80258b6:	9a08      	ldr	r2, [sp, #32]
 80258b8:	e770      	b.n	802579c <_dtoa_r+0x7ac>
 80258ba:	9b07      	ldr	r3, [sp, #28]
 80258bc:	2b01      	cmp	r3, #1
 80258be:	dc19      	bgt.n	80258f4 <_dtoa_r+0x904>
 80258c0:	9b02      	ldr	r3, [sp, #8]
 80258c2:	b9bb      	cbnz	r3, 80258f4 <_dtoa_r+0x904>
 80258c4:	9b03      	ldr	r3, [sp, #12]
 80258c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80258ca:	b99b      	cbnz	r3, 80258f4 <_dtoa_r+0x904>
 80258cc:	9b03      	ldr	r3, [sp, #12]
 80258ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80258d2:	0d1b      	lsrs	r3, r3, #20
 80258d4:	051b      	lsls	r3, r3, #20
 80258d6:	b183      	cbz	r3, 80258fa <_dtoa_r+0x90a>
 80258d8:	9b05      	ldr	r3, [sp, #20]
 80258da:	3301      	adds	r3, #1
 80258dc:	9305      	str	r3, [sp, #20]
 80258de:	9b06      	ldr	r3, [sp, #24]
 80258e0:	3301      	adds	r3, #1
 80258e2:	9306      	str	r3, [sp, #24]
 80258e4:	f04f 0801 	mov.w	r8, #1
 80258e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258ea:	2b00      	cmp	r3, #0
 80258ec:	f47f af6f 	bne.w	80257ce <_dtoa_r+0x7de>
 80258f0:	2001      	movs	r0, #1
 80258f2:	e774      	b.n	80257de <_dtoa_r+0x7ee>
 80258f4:	f04f 0800 	mov.w	r8, #0
 80258f8:	e7f6      	b.n	80258e8 <_dtoa_r+0x8f8>
 80258fa:	4698      	mov	r8, r3
 80258fc:	e7f4      	b.n	80258e8 <_dtoa_r+0x8f8>
 80258fe:	d082      	beq.n	8025806 <_dtoa_r+0x816>
 8025900:	9a05      	ldr	r2, [sp, #20]
 8025902:	331c      	adds	r3, #28
 8025904:	441a      	add	r2, r3
 8025906:	9205      	str	r2, [sp, #20]
 8025908:	9a06      	ldr	r2, [sp, #24]
 802590a:	441a      	add	r2, r3
 802590c:	441d      	add	r5, r3
 802590e:	9206      	str	r2, [sp, #24]
 8025910:	e779      	b.n	8025806 <_dtoa_r+0x816>
 8025912:	4603      	mov	r3, r0
 8025914:	e7f4      	b.n	8025900 <_dtoa_r+0x910>
 8025916:	9b04      	ldr	r3, [sp, #16]
 8025918:	2b00      	cmp	r3, #0
 802591a:	dc37      	bgt.n	802598c <_dtoa_r+0x99c>
 802591c:	9b07      	ldr	r3, [sp, #28]
 802591e:	2b02      	cmp	r3, #2
 8025920:	dd34      	ble.n	802598c <_dtoa_r+0x99c>
 8025922:	9b04      	ldr	r3, [sp, #16]
 8025924:	9301      	str	r3, [sp, #4]
 8025926:	9b01      	ldr	r3, [sp, #4]
 8025928:	b963      	cbnz	r3, 8025944 <_dtoa_r+0x954>
 802592a:	4631      	mov	r1, r6
 802592c:	2205      	movs	r2, #5
 802592e:	4620      	mov	r0, r4
 8025930:	f000 fa46 	bl	8025dc0 <__multadd>
 8025934:	4601      	mov	r1, r0
 8025936:	4606      	mov	r6, r0
 8025938:	4650      	mov	r0, sl
 802593a:	f000 fc5b 	bl	80261f4 <__mcmp>
 802593e:	2800      	cmp	r0, #0
 8025940:	f73f adbb 	bgt.w	80254ba <_dtoa_r+0x4ca>
 8025944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025946:	9d00      	ldr	r5, [sp, #0]
 8025948:	ea6f 0b03 	mvn.w	fp, r3
 802594c:	f04f 0800 	mov.w	r8, #0
 8025950:	4631      	mov	r1, r6
 8025952:	4620      	mov	r0, r4
 8025954:	f000 fa12 	bl	8025d7c <_Bfree>
 8025958:	2f00      	cmp	r7, #0
 802595a:	f43f aeab 	beq.w	80256b4 <_dtoa_r+0x6c4>
 802595e:	f1b8 0f00 	cmp.w	r8, #0
 8025962:	d005      	beq.n	8025970 <_dtoa_r+0x980>
 8025964:	45b8      	cmp	r8, r7
 8025966:	d003      	beq.n	8025970 <_dtoa_r+0x980>
 8025968:	4641      	mov	r1, r8
 802596a:	4620      	mov	r0, r4
 802596c:	f000 fa06 	bl	8025d7c <_Bfree>
 8025970:	4639      	mov	r1, r7
 8025972:	4620      	mov	r0, r4
 8025974:	f000 fa02 	bl	8025d7c <_Bfree>
 8025978:	e69c      	b.n	80256b4 <_dtoa_r+0x6c4>
 802597a:	2600      	movs	r6, #0
 802597c:	4637      	mov	r7, r6
 802597e:	e7e1      	b.n	8025944 <_dtoa_r+0x954>
 8025980:	46bb      	mov	fp, r7
 8025982:	4637      	mov	r7, r6
 8025984:	e599      	b.n	80254ba <_dtoa_r+0x4ca>
 8025986:	bf00      	nop
 8025988:	40240000 	.word	0x40240000
 802598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802598e:	2b00      	cmp	r3, #0
 8025990:	f000 80c8 	beq.w	8025b24 <_dtoa_r+0xb34>
 8025994:	9b04      	ldr	r3, [sp, #16]
 8025996:	9301      	str	r3, [sp, #4]
 8025998:	2d00      	cmp	r5, #0
 802599a:	dd05      	ble.n	80259a8 <_dtoa_r+0x9b8>
 802599c:	4639      	mov	r1, r7
 802599e:	462a      	mov	r2, r5
 80259a0:	4620      	mov	r0, r4
 80259a2:	f000 fbbb 	bl	802611c <__lshift>
 80259a6:	4607      	mov	r7, r0
 80259a8:	f1b8 0f00 	cmp.w	r8, #0
 80259ac:	d05b      	beq.n	8025a66 <_dtoa_r+0xa76>
 80259ae:	6879      	ldr	r1, [r7, #4]
 80259b0:	4620      	mov	r0, r4
 80259b2:	f000 f9a3 	bl	8025cfc <_Balloc>
 80259b6:	4605      	mov	r5, r0
 80259b8:	b928      	cbnz	r0, 80259c6 <_dtoa_r+0x9d6>
 80259ba:	4b83      	ldr	r3, [pc, #524]	; (8025bc8 <_dtoa_r+0xbd8>)
 80259bc:	4602      	mov	r2, r0
 80259be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80259c2:	f7ff bb2e 	b.w	8025022 <_dtoa_r+0x32>
 80259c6:	693a      	ldr	r2, [r7, #16]
 80259c8:	3202      	adds	r2, #2
 80259ca:	0092      	lsls	r2, r2, #2
 80259cc:	f107 010c 	add.w	r1, r7, #12
 80259d0:	300c      	adds	r0, #12
 80259d2:	f7ff fa6a 	bl	8024eaa <memcpy>
 80259d6:	2201      	movs	r2, #1
 80259d8:	4629      	mov	r1, r5
 80259da:	4620      	mov	r0, r4
 80259dc:	f000 fb9e 	bl	802611c <__lshift>
 80259e0:	9b00      	ldr	r3, [sp, #0]
 80259e2:	3301      	adds	r3, #1
 80259e4:	9304      	str	r3, [sp, #16]
 80259e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80259ea:	4413      	add	r3, r2
 80259ec:	9308      	str	r3, [sp, #32]
 80259ee:	9b02      	ldr	r3, [sp, #8]
 80259f0:	f003 0301 	and.w	r3, r3, #1
 80259f4:	46b8      	mov	r8, r7
 80259f6:	9306      	str	r3, [sp, #24]
 80259f8:	4607      	mov	r7, r0
 80259fa:	9b04      	ldr	r3, [sp, #16]
 80259fc:	4631      	mov	r1, r6
 80259fe:	3b01      	subs	r3, #1
 8025a00:	4650      	mov	r0, sl
 8025a02:	9301      	str	r3, [sp, #4]
 8025a04:	f7ff fa6a 	bl	8024edc <quorem>
 8025a08:	4641      	mov	r1, r8
 8025a0a:	9002      	str	r0, [sp, #8]
 8025a0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8025a10:	4650      	mov	r0, sl
 8025a12:	f000 fbef 	bl	80261f4 <__mcmp>
 8025a16:	463a      	mov	r2, r7
 8025a18:	9005      	str	r0, [sp, #20]
 8025a1a:	4631      	mov	r1, r6
 8025a1c:	4620      	mov	r0, r4
 8025a1e:	f000 fc05 	bl	802622c <__mdiff>
 8025a22:	68c2      	ldr	r2, [r0, #12]
 8025a24:	4605      	mov	r5, r0
 8025a26:	bb02      	cbnz	r2, 8025a6a <_dtoa_r+0xa7a>
 8025a28:	4601      	mov	r1, r0
 8025a2a:	4650      	mov	r0, sl
 8025a2c:	f000 fbe2 	bl	80261f4 <__mcmp>
 8025a30:	4602      	mov	r2, r0
 8025a32:	4629      	mov	r1, r5
 8025a34:	4620      	mov	r0, r4
 8025a36:	9209      	str	r2, [sp, #36]	; 0x24
 8025a38:	f000 f9a0 	bl	8025d7c <_Bfree>
 8025a3c:	9b07      	ldr	r3, [sp, #28]
 8025a3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025a40:	9d04      	ldr	r5, [sp, #16]
 8025a42:	ea43 0102 	orr.w	r1, r3, r2
 8025a46:	9b06      	ldr	r3, [sp, #24]
 8025a48:	4319      	orrs	r1, r3
 8025a4a:	d110      	bne.n	8025a6e <_dtoa_r+0xa7e>
 8025a4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8025a50:	d029      	beq.n	8025aa6 <_dtoa_r+0xab6>
 8025a52:	9b05      	ldr	r3, [sp, #20]
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	dd02      	ble.n	8025a5e <_dtoa_r+0xa6e>
 8025a58:	9b02      	ldr	r3, [sp, #8]
 8025a5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8025a5e:	9b01      	ldr	r3, [sp, #4]
 8025a60:	f883 9000 	strb.w	r9, [r3]
 8025a64:	e774      	b.n	8025950 <_dtoa_r+0x960>
 8025a66:	4638      	mov	r0, r7
 8025a68:	e7ba      	b.n	80259e0 <_dtoa_r+0x9f0>
 8025a6a:	2201      	movs	r2, #1
 8025a6c:	e7e1      	b.n	8025a32 <_dtoa_r+0xa42>
 8025a6e:	9b05      	ldr	r3, [sp, #20]
 8025a70:	2b00      	cmp	r3, #0
 8025a72:	db04      	blt.n	8025a7e <_dtoa_r+0xa8e>
 8025a74:	9907      	ldr	r1, [sp, #28]
 8025a76:	430b      	orrs	r3, r1
 8025a78:	9906      	ldr	r1, [sp, #24]
 8025a7a:	430b      	orrs	r3, r1
 8025a7c:	d120      	bne.n	8025ac0 <_dtoa_r+0xad0>
 8025a7e:	2a00      	cmp	r2, #0
 8025a80:	dded      	ble.n	8025a5e <_dtoa_r+0xa6e>
 8025a82:	4651      	mov	r1, sl
 8025a84:	2201      	movs	r2, #1
 8025a86:	4620      	mov	r0, r4
 8025a88:	f000 fb48 	bl	802611c <__lshift>
 8025a8c:	4631      	mov	r1, r6
 8025a8e:	4682      	mov	sl, r0
 8025a90:	f000 fbb0 	bl	80261f4 <__mcmp>
 8025a94:	2800      	cmp	r0, #0
 8025a96:	dc03      	bgt.n	8025aa0 <_dtoa_r+0xab0>
 8025a98:	d1e1      	bne.n	8025a5e <_dtoa_r+0xa6e>
 8025a9a:	f019 0f01 	tst.w	r9, #1
 8025a9e:	d0de      	beq.n	8025a5e <_dtoa_r+0xa6e>
 8025aa0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8025aa4:	d1d8      	bne.n	8025a58 <_dtoa_r+0xa68>
 8025aa6:	9a01      	ldr	r2, [sp, #4]
 8025aa8:	2339      	movs	r3, #57	; 0x39
 8025aaa:	7013      	strb	r3, [r2, #0]
 8025aac:	462b      	mov	r3, r5
 8025aae:	461d      	mov	r5, r3
 8025ab0:	3b01      	subs	r3, #1
 8025ab2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8025ab6:	2a39      	cmp	r2, #57	; 0x39
 8025ab8:	d06c      	beq.n	8025b94 <_dtoa_r+0xba4>
 8025aba:	3201      	adds	r2, #1
 8025abc:	701a      	strb	r2, [r3, #0]
 8025abe:	e747      	b.n	8025950 <_dtoa_r+0x960>
 8025ac0:	2a00      	cmp	r2, #0
 8025ac2:	dd07      	ble.n	8025ad4 <_dtoa_r+0xae4>
 8025ac4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8025ac8:	d0ed      	beq.n	8025aa6 <_dtoa_r+0xab6>
 8025aca:	9a01      	ldr	r2, [sp, #4]
 8025acc:	f109 0301 	add.w	r3, r9, #1
 8025ad0:	7013      	strb	r3, [r2, #0]
 8025ad2:	e73d      	b.n	8025950 <_dtoa_r+0x960>
 8025ad4:	9b04      	ldr	r3, [sp, #16]
 8025ad6:	9a08      	ldr	r2, [sp, #32]
 8025ad8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8025adc:	4293      	cmp	r3, r2
 8025ade:	d043      	beq.n	8025b68 <_dtoa_r+0xb78>
 8025ae0:	4651      	mov	r1, sl
 8025ae2:	2300      	movs	r3, #0
 8025ae4:	220a      	movs	r2, #10
 8025ae6:	4620      	mov	r0, r4
 8025ae8:	f000 f96a 	bl	8025dc0 <__multadd>
 8025aec:	45b8      	cmp	r8, r7
 8025aee:	4682      	mov	sl, r0
 8025af0:	f04f 0300 	mov.w	r3, #0
 8025af4:	f04f 020a 	mov.w	r2, #10
 8025af8:	4641      	mov	r1, r8
 8025afa:	4620      	mov	r0, r4
 8025afc:	d107      	bne.n	8025b0e <_dtoa_r+0xb1e>
 8025afe:	f000 f95f 	bl	8025dc0 <__multadd>
 8025b02:	4680      	mov	r8, r0
 8025b04:	4607      	mov	r7, r0
 8025b06:	9b04      	ldr	r3, [sp, #16]
 8025b08:	3301      	adds	r3, #1
 8025b0a:	9304      	str	r3, [sp, #16]
 8025b0c:	e775      	b.n	80259fa <_dtoa_r+0xa0a>
 8025b0e:	f000 f957 	bl	8025dc0 <__multadd>
 8025b12:	4639      	mov	r1, r7
 8025b14:	4680      	mov	r8, r0
 8025b16:	2300      	movs	r3, #0
 8025b18:	220a      	movs	r2, #10
 8025b1a:	4620      	mov	r0, r4
 8025b1c:	f000 f950 	bl	8025dc0 <__multadd>
 8025b20:	4607      	mov	r7, r0
 8025b22:	e7f0      	b.n	8025b06 <_dtoa_r+0xb16>
 8025b24:	9b04      	ldr	r3, [sp, #16]
 8025b26:	9301      	str	r3, [sp, #4]
 8025b28:	9d00      	ldr	r5, [sp, #0]
 8025b2a:	4631      	mov	r1, r6
 8025b2c:	4650      	mov	r0, sl
 8025b2e:	f7ff f9d5 	bl	8024edc <quorem>
 8025b32:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8025b36:	9b00      	ldr	r3, [sp, #0]
 8025b38:	f805 9b01 	strb.w	r9, [r5], #1
 8025b3c:	1aea      	subs	r2, r5, r3
 8025b3e:	9b01      	ldr	r3, [sp, #4]
 8025b40:	4293      	cmp	r3, r2
 8025b42:	dd07      	ble.n	8025b54 <_dtoa_r+0xb64>
 8025b44:	4651      	mov	r1, sl
 8025b46:	2300      	movs	r3, #0
 8025b48:	220a      	movs	r2, #10
 8025b4a:	4620      	mov	r0, r4
 8025b4c:	f000 f938 	bl	8025dc0 <__multadd>
 8025b50:	4682      	mov	sl, r0
 8025b52:	e7ea      	b.n	8025b2a <_dtoa_r+0xb3a>
 8025b54:	9b01      	ldr	r3, [sp, #4]
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	bfc8      	it	gt
 8025b5a:	461d      	movgt	r5, r3
 8025b5c:	9b00      	ldr	r3, [sp, #0]
 8025b5e:	bfd8      	it	le
 8025b60:	2501      	movle	r5, #1
 8025b62:	441d      	add	r5, r3
 8025b64:	f04f 0800 	mov.w	r8, #0
 8025b68:	4651      	mov	r1, sl
 8025b6a:	2201      	movs	r2, #1
 8025b6c:	4620      	mov	r0, r4
 8025b6e:	f000 fad5 	bl	802611c <__lshift>
 8025b72:	4631      	mov	r1, r6
 8025b74:	4682      	mov	sl, r0
 8025b76:	f000 fb3d 	bl	80261f4 <__mcmp>
 8025b7a:	2800      	cmp	r0, #0
 8025b7c:	dc96      	bgt.n	8025aac <_dtoa_r+0xabc>
 8025b7e:	d102      	bne.n	8025b86 <_dtoa_r+0xb96>
 8025b80:	f019 0f01 	tst.w	r9, #1
 8025b84:	d192      	bne.n	8025aac <_dtoa_r+0xabc>
 8025b86:	462b      	mov	r3, r5
 8025b88:	461d      	mov	r5, r3
 8025b8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025b8e:	2a30      	cmp	r2, #48	; 0x30
 8025b90:	d0fa      	beq.n	8025b88 <_dtoa_r+0xb98>
 8025b92:	e6dd      	b.n	8025950 <_dtoa_r+0x960>
 8025b94:	9a00      	ldr	r2, [sp, #0]
 8025b96:	429a      	cmp	r2, r3
 8025b98:	d189      	bne.n	8025aae <_dtoa_r+0xabe>
 8025b9a:	f10b 0b01 	add.w	fp, fp, #1
 8025b9e:	2331      	movs	r3, #49	; 0x31
 8025ba0:	e796      	b.n	8025ad0 <_dtoa_r+0xae0>
 8025ba2:	4b0a      	ldr	r3, [pc, #40]	; (8025bcc <_dtoa_r+0xbdc>)
 8025ba4:	f7ff ba99 	b.w	80250da <_dtoa_r+0xea>
 8025ba8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025baa:	2b00      	cmp	r3, #0
 8025bac:	f47f aa6d 	bne.w	802508a <_dtoa_r+0x9a>
 8025bb0:	4b07      	ldr	r3, [pc, #28]	; (8025bd0 <_dtoa_r+0xbe0>)
 8025bb2:	f7ff ba92 	b.w	80250da <_dtoa_r+0xea>
 8025bb6:	9b01      	ldr	r3, [sp, #4]
 8025bb8:	2b00      	cmp	r3, #0
 8025bba:	dcb5      	bgt.n	8025b28 <_dtoa_r+0xb38>
 8025bbc:	9b07      	ldr	r3, [sp, #28]
 8025bbe:	2b02      	cmp	r3, #2
 8025bc0:	f73f aeb1 	bgt.w	8025926 <_dtoa_r+0x936>
 8025bc4:	e7b0      	b.n	8025b28 <_dtoa_r+0xb38>
 8025bc6:	bf00      	nop
 8025bc8:	0802cd65 	.word	0x0802cd65
 8025bcc:	0802cefd 	.word	0x0802cefd
 8025bd0:	0802cd00 	.word	0x0802cd00

08025bd4 <_free_r>:
 8025bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025bd6:	2900      	cmp	r1, #0
 8025bd8:	d044      	beq.n	8025c64 <_free_r+0x90>
 8025bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025bde:	9001      	str	r0, [sp, #4]
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	f1a1 0404 	sub.w	r4, r1, #4
 8025be6:	bfb8      	it	lt
 8025be8:	18e4      	addlt	r4, r4, r3
 8025bea:	f7fd f833 	bl	8022c54 <__malloc_lock>
 8025bee:	4a1e      	ldr	r2, [pc, #120]	; (8025c68 <_free_r+0x94>)
 8025bf0:	9801      	ldr	r0, [sp, #4]
 8025bf2:	6813      	ldr	r3, [r2, #0]
 8025bf4:	b933      	cbnz	r3, 8025c04 <_free_r+0x30>
 8025bf6:	6063      	str	r3, [r4, #4]
 8025bf8:	6014      	str	r4, [r2, #0]
 8025bfa:	b003      	add	sp, #12
 8025bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025c00:	f7fd b82e 	b.w	8022c60 <__malloc_unlock>
 8025c04:	42a3      	cmp	r3, r4
 8025c06:	d908      	bls.n	8025c1a <_free_r+0x46>
 8025c08:	6825      	ldr	r5, [r4, #0]
 8025c0a:	1961      	adds	r1, r4, r5
 8025c0c:	428b      	cmp	r3, r1
 8025c0e:	bf01      	itttt	eq
 8025c10:	6819      	ldreq	r1, [r3, #0]
 8025c12:	685b      	ldreq	r3, [r3, #4]
 8025c14:	1949      	addeq	r1, r1, r5
 8025c16:	6021      	streq	r1, [r4, #0]
 8025c18:	e7ed      	b.n	8025bf6 <_free_r+0x22>
 8025c1a:	461a      	mov	r2, r3
 8025c1c:	685b      	ldr	r3, [r3, #4]
 8025c1e:	b10b      	cbz	r3, 8025c24 <_free_r+0x50>
 8025c20:	42a3      	cmp	r3, r4
 8025c22:	d9fa      	bls.n	8025c1a <_free_r+0x46>
 8025c24:	6811      	ldr	r1, [r2, #0]
 8025c26:	1855      	adds	r5, r2, r1
 8025c28:	42a5      	cmp	r5, r4
 8025c2a:	d10b      	bne.n	8025c44 <_free_r+0x70>
 8025c2c:	6824      	ldr	r4, [r4, #0]
 8025c2e:	4421      	add	r1, r4
 8025c30:	1854      	adds	r4, r2, r1
 8025c32:	42a3      	cmp	r3, r4
 8025c34:	6011      	str	r1, [r2, #0]
 8025c36:	d1e0      	bne.n	8025bfa <_free_r+0x26>
 8025c38:	681c      	ldr	r4, [r3, #0]
 8025c3a:	685b      	ldr	r3, [r3, #4]
 8025c3c:	6053      	str	r3, [r2, #4]
 8025c3e:	440c      	add	r4, r1
 8025c40:	6014      	str	r4, [r2, #0]
 8025c42:	e7da      	b.n	8025bfa <_free_r+0x26>
 8025c44:	d902      	bls.n	8025c4c <_free_r+0x78>
 8025c46:	230c      	movs	r3, #12
 8025c48:	6003      	str	r3, [r0, #0]
 8025c4a:	e7d6      	b.n	8025bfa <_free_r+0x26>
 8025c4c:	6825      	ldr	r5, [r4, #0]
 8025c4e:	1961      	adds	r1, r4, r5
 8025c50:	428b      	cmp	r3, r1
 8025c52:	bf04      	itt	eq
 8025c54:	6819      	ldreq	r1, [r3, #0]
 8025c56:	685b      	ldreq	r3, [r3, #4]
 8025c58:	6063      	str	r3, [r4, #4]
 8025c5a:	bf04      	itt	eq
 8025c5c:	1949      	addeq	r1, r1, r5
 8025c5e:	6021      	streq	r1, [r4, #0]
 8025c60:	6054      	str	r4, [r2, #4]
 8025c62:	e7ca      	b.n	8025bfa <_free_r+0x26>
 8025c64:	b003      	add	sp, #12
 8025c66:	bd30      	pop	{r4, r5, pc}
 8025c68:	2001635c 	.word	0x2001635c

08025c6c <_findenv_r>:
 8025c6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c70:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8025ce0 <_findenv_r+0x74>
 8025c74:	4607      	mov	r7, r0
 8025c76:	4689      	mov	r9, r1
 8025c78:	4616      	mov	r6, r2
 8025c7a:	f001 f891 	bl	8026da0 <__env_lock>
 8025c7e:	f8da 4000 	ldr.w	r4, [sl]
 8025c82:	b134      	cbz	r4, 8025c92 <_findenv_r+0x26>
 8025c84:	464b      	mov	r3, r9
 8025c86:	4698      	mov	r8, r3
 8025c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025c8c:	b13a      	cbz	r2, 8025c9e <_findenv_r+0x32>
 8025c8e:	2a3d      	cmp	r2, #61	; 0x3d
 8025c90:	d1f9      	bne.n	8025c86 <_findenv_r+0x1a>
 8025c92:	4638      	mov	r0, r7
 8025c94:	f001 f88a 	bl	8026dac <__env_unlock>
 8025c98:	2000      	movs	r0, #0
 8025c9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025c9e:	eba8 0809 	sub.w	r8, r8, r9
 8025ca2:	46a3      	mov	fp, r4
 8025ca4:	f854 0b04 	ldr.w	r0, [r4], #4
 8025ca8:	2800      	cmp	r0, #0
 8025caa:	d0f2      	beq.n	8025c92 <_findenv_r+0x26>
 8025cac:	4642      	mov	r2, r8
 8025cae:	4649      	mov	r1, r9
 8025cb0:	f7fd ffd3 	bl	8023c5a <strncmp>
 8025cb4:	2800      	cmp	r0, #0
 8025cb6:	d1f4      	bne.n	8025ca2 <_findenv_r+0x36>
 8025cb8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8025cbc:	eb03 0508 	add.w	r5, r3, r8
 8025cc0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8025cc4:	2b3d      	cmp	r3, #61	; 0x3d
 8025cc6:	d1ec      	bne.n	8025ca2 <_findenv_r+0x36>
 8025cc8:	f8da 3000 	ldr.w	r3, [sl]
 8025ccc:	ebab 0303 	sub.w	r3, fp, r3
 8025cd0:	109b      	asrs	r3, r3, #2
 8025cd2:	4638      	mov	r0, r7
 8025cd4:	6033      	str	r3, [r6, #0]
 8025cd6:	f001 f869 	bl	8026dac <__env_unlock>
 8025cda:	1c68      	adds	r0, r5, #1
 8025cdc:	e7dd      	b.n	8025c9a <_findenv_r+0x2e>
 8025cde:	bf00      	nop
 8025ce0:	20000004 	.word	0x20000004

08025ce4 <_getenv_r>:
 8025ce4:	b507      	push	{r0, r1, r2, lr}
 8025ce6:	aa01      	add	r2, sp, #4
 8025ce8:	f7ff ffc0 	bl	8025c6c <_findenv_r>
 8025cec:	b003      	add	sp, #12
 8025cee:	f85d fb04 	ldr.w	pc, [sp], #4

08025cf2 <labs>:
 8025cf2:	2800      	cmp	r0, #0
 8025cf4:	bfb8      	it	lt
 8025cf6:	4240      	neglt	r0, r0
 8025cf8:	4770      	bx	lr
	...

08025cfc <_Balloc>:
 8025cfc:	b570      	push	{r4, r5, r6, lr}
 8025cfe:	69c6      	ldr	r6, [r0, #28]
 8025d00:	4604      	mov	r4, r0
 8025d02:	460d      	mov	r5, r1
 8025d04:	b976      	cbnz	r6, 8025d24 <_Balloc+0x28>
 8025d06:	2010      	movs	r0, #16
 8025d08:	f7fc fef4 	bl	8022af4 <malloc>
 8025d0c:	4602      	mov	r2, r0
 8025d0e:	61e0      	str	r0, [r4, #28]
 8025d10:	b920      	cbnz	r0, 8025d1c <_Balloc+0x20>
 8025d12:	4b18      	ldr	r3, [pc, #96]	; (8025d74 <_Balloc+0x78>)
 8025d14:	4818      	ldr	r0, [pc, #96]	; (8025d78 <_Balloc+0x7c>)
 8025d16:	216b      	movs	r1, #107	; 0x6b
 8025d18:	f7fc fece 	bl	8022ab8 <__assert_func>
 8025d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025d20:	6006      	str	r6, [r0, #0]
 8025d22:	60c6      	str	r6, [r0, #12]
 8025d24:	69e6      	ldr	r6, [r4, #28]
 8025d26:	68f3      	ldr	r3, [r6, #12]
 8025d28:	b183      	cbz	r3, 8025d4c <_Balloc+0x50>
 8025d2a:	69e3      	ldr	r3, [r4, #28]
 8025d2c:	68db      	ldr	r3, [r3, #12]
 8025d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025d32:	b9b8      	cbnz	r0, 8025d64 <_Balloc+0x68>
 8025d34:	2101      	movs	r1, #1
 8025d36:	fa01 f605 	lsl.w	r6, r1, r5
 8025d3a:	1d72      	adds	r2, r6, #5
 8025d3c:	0092      	lsls	r2, r2, #2
 8025d3e:	4620      	mov	r0, r4
 8025d40:	f001 f818 	bl	8026d74 <_calloc_r>
 8025d44:	b160      	cbz	r0, 8025d60 <_Balloc+0x64>
 8025d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025d4a:	e00e      	b.n	8025d6a <_Balloc+0x6e>
 8025d4c:	2221      	movs	r2, #33	; 0x21
 8025d4e:	2104      	movs	r1, #4
 8025d50:	4620      	mov	r0, r4
 8025d52:	f001 f80f 	bl	8026d74 <_calloc_r>
 8025d56:	69e3      	ldr	r3, [r4, #28]
 8025d58:	60f0      	str	r0, [r6, #12]
 8025d5a:	68db      	ldr	r3, [r3, #12]
 8025d5c:	2b00      	cmp	r3, #0
 8025d5e:	d1e4      	bne.n	8025d2a <_Balloc+0x2e>
 8025d60:	2000      	movs	r0, #0
 8025d62:	bd70      	pop	{r4, r5, r6, pc}
 8025d64:	6802      	ldr	r2, [r0, #0]
 8025d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025d6a:	2300      	movs	r3, #0
 8025d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025d70:	e7f7      	b.n	8025d62 <_Balloc+0x66>
 8025d72:	bf00      	nop
 8025d74:	0802c82c 	.word	0x0802c82c
 8025d78:	0802cd76 	.word	0x0802cd76

08025d7c <_Bfree>:
 8025d7c:	b570      	push	{r4, r5, r6, lr}
 8025d7e:	69c6      	ldr	r6, [r0, #28]
 8025d80:	4605      	mov	r5, r0
 8025d82:	460c      	mov	r4, r1
 8025d84:	b976      	cbnz	r6, 8025da4 <_Bfree+0x28>
 8025d86:	2010      	movs	r0, #16
 8025d88:	f7fc feb4 	bl	8022af4 <malloc>
 8025d8c:	4602      	mov	r2, r0
 8025d8e:	61e8      	str	r0, [r5, #28]
 8025d90:	b920      	cbnz	r0, 8025d9c <_Bfree+0x20>
 8025d92:	4b09      	ldr	r3, [pc, #36]	; (8025db8 <_Bfree+0x3c>)
 8025d94:	4809      	ldr	r0, [pc, #36]	; (8025dbc <_Bfree+0x40>)
 8025d96:	218f      	movs	r1, #143	; 0x8f
 8025d98:	f7fc fe8e 	bl	8022ab8 <__assert_func>
 8025d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025da0:	6006      	str	r6, [r0, #0]
 8025da2:	60c6      	str	r6, [r0, #12]
 8025da4:	b13c      	cbz	r4, 8025db6 <_Bfree+0x3a>
 8025da6:	69eb      	ldr	r3, [r5, #28]
 8025da8:	6862      	ldr	r2, [r4, #4]
 8025daa:	68db      	ldr	r3, [r3, #12]
 8025dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025db0:	6021      	str	r1, [r4, #0]
 8025db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025db6:	bd70      	pop	{r4, r5, r6, pc}
 8025db8:	0802c82c 	.word	0x0802c82c
 8025dbc:	0802cd76 	.word	0x0802cd76

08025dc0 <__multadd>:
 8025dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025dc4:	690d      	ldr	r5, [r1, #16]
 8025dc6:	4607      	mov	r7, r0
 8025dc8:	460c      	mov	r4, r1
 8025dca:	461e      	mov	r6, r3
 8025dcc:	f101 0c14 	add.w	ip, r1, #20
 8025dd0:	2000      	movs	r0, #0
 8025dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8025dd6:	b299      	uxth	r1, r3
 8025dd8:	fb02 6101 	mla	r1, r2, r1, r6
 8025ddc:	0c1e      	lsrs	r6, r3, #16
 8025dde:	0c0b      	lsrs	r3, r1, #16
 8025de0:	fb02 3306 	mla	r3, r2, r6, r3
 8025de4:	b289      	uxth	r1, r1
 8025de6:	3001      	adds	r0, #1
 8025de8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8025dec:	4285      	cmp	r5, r0
 8025dee:	f84c 1b04 	str.w	r1, [ip], #4
 8025df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8025df6:	dcec      	bgt.n	8025dd2 <__multadd+0x12>
 8025df8:	b30e      	cbz	r6, 8025e3e <__multadd+0x7e>
 8025dfa:	68a3      	ldr	r3, [r4, #8]
 8025dfc:	42ab      	cmp	r3, r5
 8025dfe:	dc19      	bgt.n	8025e34 <__multadd+0x74>
 8025e00:	6861      	ldr	r1, [r4, #4]
 8025e02:	4638      	mov	r0, r7
 8025e04:	3101      	adds	r1, #1
 8025e06:	f7ff ff79 	bl	8025cfc <_Balloc>
 8025e0a:	4680      	mov	r8, r0
 8025e0c:	b928      	cbnz	r0, 8025e1a <__multadd+0x5a>
 8025e0e:	4602      	mov	r2, r0
 8025e10:	4b0c      	ldr	r3, [pc, #48]	; (8025e44 <__multadd+0x84>)
 8025e12:	480d      	ldr	r0, [pc, #52]	; (8025e48 <__multadd+0x88>)
 8025e14:	21ba      	movs	r1, #186	; 0xba
 8025e16:	f7fc fe4f 	bl	8022ab8 <__assert_func>
 8025e1a:	6922      	ldr	r2, [r4, #16]
 8025e1c:	3202      	adds	r2, #2
 8025e1e:	f104 010c 	add.w	r1, r4, #12
 8025e22:	0092      	lsls	r2, r2, #2
 8025e24:	300c      	adds	r0, #12
 8025e26:	f7ff f840 	bl	8024eaa <memcpy>
 8025e2a:	4621      	mov	r1, r4
 8025e2c:	4638      	mov	r0, r7
 8025e2e:	f7ff ffa5 	bl	8025d7c <_Bfree>
 8025e32:	4644      	mov	r4, r8
 8025e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8025e38:	3501      	adds	r5, #1
 8025e3a:	615e      	str	r6, [r3, #20]
 8025e3c:	6125      	str	r5, [r4, #16]
 8025e3e:	4620      	mov	r0, r4
 8025e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025e44:	0802cd65 	.word	0x0802cd65
 8025e48:	0802cd76 	.word	0x0802cd76

08025e4c <__hi0bits>:
 8025e4c:	0c03      	lsrs	r3, r0, #16
 8025e4e:	041b      	lsls	r3, r3, #16
 8025e50:	b9d3      	cbnz	r3, 8025e88 <__hi0bits+0x3c>
 8025e52:	0400      	lsls	r0, r0, #16
 8025e54:	2310      	movs	r3, #16
 8025e56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025e5a:	bf04      	itt	eq
 8025e5c:	0200      	lsleq	r0, r0, #8
 8025e5e:	3308      	addeq	r3, #8
 8025e60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025e64:	bf04      	itt	eq
 8025e66:	0100      	lsleq	r0, r0, #4
 8025e68:	3304      	addeq	r3, #4
 8025e6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025e6e:	bf04      	itt	eq
 8025e70:	0080      	lsleq	r0, r0, #2
 8025e72:	3302      	addeq	r3, #2
 8025e74:	2800      	cmp	r0, #0
 8025e76:	db05      	blt.n	8025e84 <__hi0bits+0x38>
 8025e78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025e7c:	f103 0301 	add.w	r3, r3, #1
 8025e80:	bf08      	it	eq
 8025e82:	2320      	moveq	r3, #32
 8025e84:	4618      	mov	r0, r3
 8025e86:	4770      	bx	lr
 8025e88:	2300      	movs	r3, #0
 8025e8a:	e7e4      	b.n	8025e56 <__hi0bits+0xa>

08025e8c <__lo0bits>:
 8025e8c:	6803      	ldr	r3, [r0, #0]
 8025e8e:	f013 0207 	ands.w	r2, r3, #7
 8025e92:	d00c      	beq.n	8025eae <__lo0bits+0x22>
 8025e94:	07d9      	lsls	r1, r3, #31
 8025e96:	d422      	bmi.n	8025ede <__lo0bits+0x52>
 8025e98:	079a      	lsls	r2, r3, #30
 8025e9a:	bf49      	itett	mi
 8025e9c:	085b      	lsrmi	r3, r3, #1
 8025e9e:	089b      	lsrpl	r3, r3, #2
 8025ea0:	6003      	strmi	r3, [r0, #0]
 8025ea2:	2201      	movmi	r2, #1
 8025ea4:	bf5c      	itt	pl
 8025ea6:	6003      	strpl	r3, [r0, #0]
 8025ea8:	2202      	movpl	r2, #2
 8025eaa:	4610      	mov	r0, r2
 8025eac:	4770      	bx	lr
 8025eae:	b299      	uxth	r1, r3
 8025eb0:	b909      	cbnz	r1, 8025eb6 <__lo0bits+0x2a>
 8025eb2:	0c1b      	lsrs	r3, r3, #16
 8025eb4:	2210      	movs	r2, #16
 8025eb6:	b2d9      	uxtb	r1, r3
 8025eb8:	b909      	cbnz	r1, 8025ebe <__lo0bits+0x32>
 8025eba:	3208      	adds	r2, #8
 8025ebc:	0a1b      	lsrs	r3, r3, #8
 8025ebe:	0719      	lsls	r1, r3, #28
 8025ec0:	bf04      	itt	eq
 8025ec2:	091b      	lsreq	r3, r3, #4
 8025ec4:	3204      	addeq	r2, #4
 8025ec6:	0799      	lsls	r1, r3, #30
 8025ec8:	bf04      	itt	eq
 8025eca:	089b      	lsreq	r3, r3, #2
 8025ecc:	3202      	addeq	r2, #2
 8025ece:	07d9      	lsls	r1, r3, #31
 8025ed0:	d403      	bmi.n	8025eda <__lo0bits+0x4e>
 8025ed2:	085b      	lsrs	r3, r3, #1
 8025ed4:	f102 0201 	add.w	r2, r2, #1
 8025ed8:	d003      	beq.n	8025ee2 <__lo0bits+0x56>
 8025eda:	6003      	str	r3, [r0, #0]
 8025edc:	e7e5      	b.n	8025eaa <__lo0bits+0x1e>
 8025ede:	2200      	movs	r2, #0
 8025ee0:	e7e3      	b.n	8025eaa <__lo0bits+0x1e>
 8025ee2:	2220      	movs	r2, #32
 8025ee4:	e7e1      	b.n	8025eaa <__lo0bits+0x1e>
	...

08025ee8 <__i2b>:
 8025ee8:	b510      	push	{r4, lr}
 8025eea:	460c      	mov	r4, r1
 8025eec:	2101      	movs	r1, #1
 8025eee:	f7ff ff05 	bl	8025cfc <_Balloc>
 8025ef2:	4602      	mov	r2, r0
 8025ef4:	b928      	cbnz	r0, 8025f02 <__i2b+0x1a>
 8025ef6:	4b05      	ldr	r3, [pc, #20]	; (8025f0c <__i2b+0x24>)
 8025ef8:	4805      	ldr	r0, [pc, #20]	; (8025f10 <__i2b+0x28>)
 8025efa:	f240 1145 	movw	r1, #325	; 0x145
 8025efe:	f7fc fddb 	bl	8022ab8 <__assert_func>
 8025f02:	2301      	movs	r3, #1
 8025f04:	6144      	str	r4, [r0, #20]
 8025f06:	6103      	str	r3, [r0, #16]
 8025f08:	bd10      	pop	{r4, pc}
 8025f0a:	bf00      	nop
 8025f0c:	0802cd65 	.word	0x0802cd65
 8025f10:	0802cd76 	.word	0x0802cd76

08025f14 <__multiply>:
 8025f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f18:	4691      	mov	r9, r2
 8025f1a:	690a      	ldr	r2, [r1, #16]
 8025f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8025f20:	429a      	cmp	r2, r3
 8025f22:	bfb8      	it	lt
 8025f24:	460b      	movlt	r3, r1
 8025f26:	460c      	mov	r4, r1
 8025f28:	bfbc      	itt	lt
 8025f2a:	464c      	movlt	r4, r9
 8025f2c:	4699      	movlt	r9, r3
 8025f2e:	6927      	ldr	r7, [r4, #16]
 8025f30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8025f34:	68a3      	ldr	r3, [r4, #8]
 8025f36:	6861      	ldr	r1, [r4, #4]
 8025f38:	eb07 060a 	add.w	r6, r7, sl
 8025f3c:	42b3      	cmp	r3, r6
 8025f3e:	b085      	sub	sp, #20
 8025f40:	bfb8      	it	lt
 8025f42:	3101      	addlt	r1, #1
 8025f44:	f7ff feda 	bl	8025cfc <_Balloc>
 8025f48:	b930      	cbnz	r0, 8025f58 <__multiply+0x44>
 8025f4a:	4602      	mov	r2, r0
 8025f4c:	4b44      	ldr	r3, [pc, #272]	; (8026060 <__multiply+0x14c>)
 8025f4e:	4845      	ldr	r0, [pc, #276]	; (8026064 <__multiply+0x150>)
 8025f50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8025f54:	f7fc fdb0 	bl	8022ab8 <__assert_func>
 8025f58:	f100 0514 	add.w	r5, r0, #20
 8025f5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8025f60:	462b      	mov	r3, r5
 8025f62:	2200      	movs	r2, #0
 8025f64:	4543      	cmp	r3, r8
 8025f66:	d321      	bcc.n	8025fac <__multiply+0x98>
 8025f68:	f104 0314 	add.w	r3, r4, #20
 8025f6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8025f70:	f109 0314 	add.w	r3, r9, #20
 8025f74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8025f78:	9202      	str	r2, [sp, #8]
 8025f7a:	1b3a      	subs	r2, r7, r4
 8025f7c:	3a15      	subs	r2, #21
 8025f7e:	f022 0203 	bic.w	r2, r2, #3
 8025f82:	3204      	adds	r2, #4
 8025f84:	f104 0115 	add.w	r1, r4, #21
 8025f88:	428f      	cmp	r7, r1
 8025f8a:	bf38      	it	cc
 8025f8c:	2204      	movcc	r2, #4
 8025f8e:	9201      	str	r2, [sp, #4]
 8025f90:	9a02      	ldr	r2, [sp, #8]
 8025f92:	9303      	str	r3, [sp, #12]
 8025f94:	429a      	cmp	r2, r3
 8025f96:	d80c      	bhi.n	8025fb2 <__multiply+0x9e>
 8025f98:	2e00      	cmp	r6, #0
 8025f9a:	dd03      	ble.n	8025fa4 <__multiply+0x90>
 8025f9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025fa0:	2b00      	cmp	r3, #0
 8025fa2:	d05b      	beq.n	802605c <__multiply+0x148>
 8025fa4:	6106      	str	r6, [r0, #16]
 8025fa6:	b005      	add	sp, #20
 8025fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fac:	f843 2b04 	str.w	r2, [r3], #4
 8025fb0:	e7d8      	b.n	8025f64 <__multiply+0x50>
 8025fb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8025fb6:	f1ba 0f00 	cmp.w	sl, #0
 8025fba:	d024      	beq.n	8026006 <__multiply+0xf2>
 8025fbc:	f104 0e14 	add.w	lr, r4, #20
 8025fc0:	46a9      	mov	r9, r5
 8025fc2:	f04f 0c00 	mov.w	ip, #0
 8025fc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8025fca:	f8d9 1000 	ldr.w	r1, [r9]
 8025fce:	fa1f fb82 	uxth.w	fp, r2
 8025fd2:	b289      	uxth	r1, r1
 8025fd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8025fd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8025fdc:	f8d9 2000 	ldr.w	r2, [r9]
 8025fe0:	4461      	add	r1, ip
 8025fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025fe6:	fb0a c20b 	mla	r2, sl, fp, ip
 8025fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8025fee:	b289      	uxth	r1, r1
 8025ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8025ff4:	4577      	cmp	r7, lr
 8025ff6:	f849 1b04 	str.w	r1, [r9], #4
 8025ffa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8025ffe:	d8e2      	bhi.n	8025fc6 <__multiply+0xb2>
 8026000:	9a01      	ldr	r2, [sp, #4]
 8026002:	f845 c002 	str.w	ip, [r5, r2]
 8026006:	9a03      	ldr	r2, [sp, #12]
 8026008:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802600c:	3304      	adds	r3, #4
 802600e:	f1b9 0f00 	cmp.w	r9, #0
 8026012:	d021      	beq.n	8026058 <__multiply+0x144>
 8026014:	6829      	ldr	r1, [r5, #0]
 8026016:	f104 0c14 	add.w	ip, r4, #20
 802601a:	46ae      	mov	lr, r5
 802601c:	f04f 0a00 	mov.w	sl, #0
 8026020:	f8bc b000 	ldrh.w	fp, [ip]
 8026024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8026028:	fb09 220b 	mla	r2, r9, fp, r2
 802602c:	4452      	add	r2, sl
 802602e:	b289      	uxth	r1, r1
 8026030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8026034:	f84e 1b04 	str.w	r1, [lr], #4
 8026038:	f85c 1b04 	ldr.w	r1, [ip], #4
 802603c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026040:	f8be 1000 	ldrh.w	r1, [lr]
 8026044:	fb09 110a 	mla	r1, r9, sl, r1
 8026048:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802604c:	4567      	cmp	r7, ip
 802604e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8026052:	d8e5      	bhi.n	8026020 <__multiply+0x10c>
 8026054:	9a01      	ldr	r2, [sp, #4]
 8026056:	50a9      	str	r1, [r5, r2]
 8026058:	3504      	adds	r5, #4
 802605a:	e799      	b.n	8025f90 <__multiply+0x7c>
 802605c:	3e01      	subs	r6, #1
 802605e:	e79b      	b.n	8025f98 <__multiply+0x84>
 8026060:	0802cd65 	.word	0x0802cd65
 8026064:	0802cd76 	.word	0x0802cd76

08026068 <__pow5mult>:
 8026068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802606c:	4615      	mov	r5, r2
 802606e:	f012 0203 	ands.w	r2, r2, #3
 8026072:	4606      	mov	r6, r0
 8026074:	460f      	mov	r7, r1
 8026076:	d007      	beq.n	8026088 <__pow5mult+0x20>
 8026078:	4c25      	ldr	r4, [pc, #148]	; (8026110 <__pow5mult+0xa8>)
 802607a:	3a01      	subs	r2, #1
 802607c:	2300      	movs	r3, #0
 802607e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8026082:	f7ff fe9d 	bl	8025dc0 <__multadd>
 8026086:	4607      	mov	r7, r0
 8026088:	10ad      	asrs	r5, r5, #2
 802608a:	d03d      	beq.n	8026108 <__pow5mult+0xa0>
 802608c:	69f4      	ldr	r4, [r6, #28]
 802608e:	b97c      	cbnz	r4, 80260b0 <__pow5mult+0x48>
 8026090:	2010      	movs	r0, #16
 8026092:	f7fc fd2f 	bl	8022af4 <malloc>
 8026096:	4602      	mov	r2, r0
 8026098:	61f0      	str	r0, [r6, #28]
 802609a:	b928      	cbnz	r0, 80260a8 <__pow5mult+0x40>
 802609c:	4b1d      	ldr	r3, [pc, #116]	; (8026114 <__pow5mult+0xac>)
 802609e:	481e      	ldr	r0, [pc, #120]	; (8026118 <__pow5mult+0xb0>)
 80260a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80260a4:	f7fc fd08 	bl	8022ab8 <__assert_func>
 80260a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80260ac:	6004      	str	r4, [r0, #0]
 80260ae:	60c4      	str	r4, [r0, #12]
 80260b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80260b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80260b8:	b94c      	cbnz	r4, 80260ce <__pow5mult+0x66>
 80260ba:	f240 2171 	movw	r1, #625	; 0x271
 80260be:	4630      	mov	r0, r6
 80260c0:	f7ff ff12 	bl	8025ee8 <__i2b>
 80260c4:	2300      	movs	r3, #0
 80260c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80260ca:	4604      	mov	r4, r0
 80260cc:	6003      	str	r3, [r0, #0]
 80260ce:	f04f 0900 	mov.w	r9, #0
 80260d2:	07eb      	lsls	r3, r5, #31
 80260d4:	d50a      	bpl.n	80260ec <__pow5mult+0x84>
 80260d6:	4639      	mov	r1, r7
 80260d8:	4622      	mov	r2, r4
 80260da:	4630      	mov	r0, r6
 80260dc:	f7ff ff1a 	bl	8025f14 <__multiply>
 80260e0:	4639      	mov	r1, r7
 80260e2:	4680      	mov	r8, r0
 80260e4:	4630      	mov	r0, r6
 80260e6:	f7ff fe49 	bl	8025d7c <_Bfree>
 80260ea:	4647      	mov	r7, r8
 80260ec:	106d      	asrs	r5, r5, #1
 80260ee:	d00b      	beq.n	8026108 <__pow5mult+0xa0>
 80260f0:	6820      	ldr	r0, [r4, #0]
 80260f2:	b938      	cbnz	r0, 8026104 <__pow5mult+0x9c>
 80260f4:	4622      	mov	r2, r4
 80260f6:	4621      	mov	r1, r4
 80260f8:	4630      	mov	r0, r6
 80260fa:	f7ff ff0b 	bl	8025f14 <__multiply>
 80260fe:	6020      	str	r0, [r4, #0]
 8026100:	f8c0 9000 	str.w	r9, [r0]
 8026104:	4604      	mov	r4, r0
 8026106:	e7e4      	b.n	80260d2 <__pow5mult+0x6a>
 8026108:	4638      	mov	r0, r7
 802610a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802610e:	bf00      	nop
 8026110:	0802cec0 	.word	0x0802cec0
 8026114:	0802c82c 	.word	0x0802c82c
 8026118:	0802cd76 	.word	0x0802cd76

0802611c <__lshift>:
 802611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026120:	460c      	mov	r4, r1
 8026122:	6849      	ldr	r1, [r1, #4]
 8026124:	6923      	ldr	r3, [r4, #16]
 8026126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802612a:	68a3      	ldr	r3, [r4, #8]
 802612c:	4607      	mov	r7, r0
 802612e:	4691      	mov	r9, r2
 8026130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8026134:	f108 0601 	add.w	r6, r8, #1
 8026138:	42b3      	cmp	r3, r6
 802613a:	db0b      	blt.n	8026154 <__lshift+0x38>
 802613c:	4638      	mov	r0, r7
 802613e:	f7ff fddd 	bl	8025cfc <_Balloc>
 8026142:	4605      	mov	r5, r0
 8026144:	b948      	cbnz	r0, 802615a <__lshift+0x3e>
 8026146:	4602      	mov	r2, r0
 8026148:	4b28      	ldr	r3, [pc, #160]	; (80261ec <__lshift+0xd0>)
 802614a:	4829      	ldr	r0, [pc, #164]	; (80261f0 <__lshift+0xd4>)
 802614c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8026150:	f7fc fcb2 	bl	8022ab8 <__assert_func>
 8026154:	3101      	adds	r1, #1
 8026156:	005b      	lsls	r3, r3, #1
 8026158:	e7ee      	b.n	8026138 <__lshift+0x1c>
 802615a:	2300      	movs	r3, #0
 802615c:	f100 0114 	add.w	r1, r0, #20
 8026160:	f100 0210 	add.w	r2, r0, #16
 8026164:	4618      	mov	r0, r3
 8026166:	4553      	cmp	r3, sl
 8026168:	db33      	blt.n	80261d2 <__lshift+0xb6>
 802616a:	6920      	ldr	r0, [r4, #16]
 802616c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8026170:	f104 0314 	add.w	r3, r4, #20
 8026174:	f019 091f 	ands.w	r9, r9, #31
 8026178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802617c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8026180:	d02b      	beq.n	80261da <__lshift+0xbe>
 8026182:	f1c9 0e20 	rsb	lr, r9, #32
 8026186:	468a      	mov	sl, r1
 8026188:	2200      	movs	r2, #0
 802618a:	6818      	ldr	r0, [r3, #0]
 802618c:	fa00 f009 	lsl.w	r0, r0, r9
 8026190:	4310      	orrs	r0, r2
 8026192:	f84a 0b04 	str.w	r0, [sl], #4
 8026196:	f853 2b04 	ldr.w	r2, [r3], #4
 802619a:	459c      	cmp	ip, r3
 802619c:	fa22 f20e 	lsr.w	r2, r2, lr
 80261a0:	d8f3      	bhi.n	802618a <__lshift+0x6e>
 80261a2:	ebac 0304 	sub.w	r3, ip, r4
 80261a6:	3b15      	subs	r3, #21
 80261a8:	f023 0303 	bic.w	r3, r3, #3
 80261ac:	3304      	adds	r3, #4
 80261ae:	f104 0015 	add.w	r0, r4, #21
 80261b2:	4584      	cmp	ip, r0
 80261b4:	bf38      	it	cc
 80261b6:	2304      	movcc	r3, #4
 80261b8:	50ca      	str	r2, [r1, r3]
 80261ba:	b10a      	cbz	r2, 80261c0 <__lshift+0xa4>
 80261bc:	f108 0602 	add.w	r6, r8, #2
 80261c0:	3e01      	subs	r6, #1
 80261c2:	4638      	mov	r0, r7
 80261c4:	612e      	str	r6, [r5, #16]
 80261c6:	4621      	mov	r1, r4
 80261c8:	f7ff fdd8 	bl	8025d7c <_Bfree>
 80261cc:	4628      	mov	r0, r5
 80261ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80261d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80261d6:	3301      	adds	r3, #1
 80261d8:	e7c5      	b.n	8026166 <__lshift+0x4a>
 80261da:	3904      	subs	r1, #4
 80261dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80261e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80261e4:	459c      	cmp	ip, r3
 80261e6:	d8f9      	bhi.n	80261dc <__lshift+0xc0>
 80261e8:	e7ea      	b.n	80261c0 <__lshift+0xa4>
 80261ea:	bf00      	nop
 80261ec:	0802cd65 	.word	0x0802cd65
 80261f0:	0802cd76 	.word	0x0802cd76

080261f4 <__mcmp>:
 80261f4:	b530      	push	{r4, r5, lr}
 80261f6:	6902      	ldr	r2, [r0, #16]
 80261f8:	690c      	ldr	r4, [r1, #16]
 80261fa:	1b12      	subs	r2, r2, r4
 80261fc:	d10e      	bne.n	802621c <__mcmp+0x28>
 80261fe:	f100 0314 	add.w	r3, r0, #20
 8026202:	3114      	adds	r1, #20
 8026204:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026208:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802620c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8026210:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8026214:	42a5      	cmp	r5, r4
 8026216:	d003      	beq.n	8026220 <__mcmp+0x2c>
 8026218:	d305      	bcc.n	8026226 <__mcmp+0x32>
 802621a:	2201      	movs	r2, #1
 802621c:	4610      	mov	r0, r2
 802621e:	bd30      	pop	{r4, r5, pc}
 8026220:	4283      	cmp	r3, r0
 8026222:	d3f3      	bcc.n	802620c <__mcmp+0x18>
 8026224:	e7fa      	b.n	802621c <__mcmp+0x28>
 8026226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802622a:	e7f7      	b.n	802621c <__mcmp+0x28>

0802622c <__mdiff>:
 802622c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026230:	460c      	mov	r4, r1
 8026232:	4606      	mov	r6, r0
 8026234:	4611      	mov	r1, r2
 8026236:	4620      	mov	r0, r4
 8026238:	4690      	mov	r8, r2
 802623a:	f7ff ffdb 	bl	80261f4 <__mcmp>
 802623e:	1e05      	subs	r5, r0, #0
 8026240:	d110      	bne.n	8026264 <__mdiff+0x38>
 8026242:	4629      	mov	r1, r5
 8026244:	4630      	mov	r0, r6
 8026246:	f7ff fd59 	bl	8025cfc <_Balloc>
 802624a:	b930      	cbnz	r0, 802625a <__mdiff+0x2e>
 802624c:	4b3a      	ldr	r3, [pc, #232]	; (8026338 <__mdiff+0x10c>)
 802624e:	4602      	mov	r2, r0
 8026250:	f240 2137 	movw	r1, #567	; 0x237
 8026254:	4839      	ldr	r0, [pc, #228]	; (802633c <__mdiff+0x110>)
 8026256:	f7fc fc2f 	bl	8022ab8 <__assert_func>
 802625a:	2301      	movs	r3, #1
 802625c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8026260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026264:	bfa4      	itt	ge
 8026266:	4643      	movge	r3, r8
 8026268:	46a0      	movge	r8, r4
 802626a:	4630      	mov	r0, r6
 802626c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8026270:	bfa6      	itte	ge
 8026272:	461c      	movge	r4, r3
 8026274:	2500      	movge	r5, #0
 8026276:	2501      	movlt	r5, #1
 8026278:	f7ff fd40 	bl	8025cfc <_Balloc>
 802627c:	b920      	cbnz	r0, 8026288 <__mdiff+0x5c>
 802627e:	4b2e      	ldr	r3, [pc, #184]	; (8026338 <__mdiff+0x10c>)
 8026280:	4602      	mov	r2, r0
 8026282:	f240 2145 	movw	r1, #581	; 0x245
 8026286:	e7e5      	b.n	8026254 <__mdiff+0x28>
 8026288:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802628c:	6926      	ldr	r6, [r4, #16]
 802628e:	60c5      	str	r5, [r0, #12]
 8026290:	f104 0914 	add.w	r9, r4, #20
 8026294:	f108 0514 	add.w	r5, r8, #20
 8026298:	f100 0e14 	add.w	lr, r0, #20
 802629c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80262a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80262a4:	f108 0210 	add.w	r2, r8, #16
 80262a8:	46f2      	mov	sl, lr
 80262aa:	2100      	movs	r1, #0
 80262ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80262b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80262b4:	fa11 f88b 	uxtah	r8, r1, fp
 80262b8:	b299      	uxth	r1, r3
 80262ba:	0c1b      	lsrs	r3, r3, #16
 80262bc:	eba8 0801 	sub.w	r8, r8, r1
 80262c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80262c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80262c8:	fa1f f888 	uxth.w	r8, r8
 80262cc:	1419      	asrs	r1, r3, #16
 80262ce:	454e      	cmp	r6, r9
 80262d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80262d4:	f84a 3b04 	str.w	r3, [sl], #4
 80262d8:	d8e8      	bhi.n	80262ac <__mdiff+0x80>
 80262da:	1b33      	subs	r3, r6, r4
 80262dc:	3b15      	subs	r3, #21
 80262de:	f023 0303 	bic.w	r3, r3, #3
 80262e2:	3304      	adds	r3, #4
 80262e4:	3415      	adds	r4, #21
 80262e6:	42a6      	cmp	r6, r4
 80262e8:	bf38      	it	cc
 80262ea:	2304      	movcc	r3, #4
 80262ec:	441d      	add	r5, r3
 80262ee:	4473      	add	r3, lr
 80262f0:	469e      	mov	lr, r3
 80262f2:	462e      	mov	r6, r5
 80262f4:	4566      	cmp	r6, ip
 80262f6:	d30e      	bcc.n	8026316 <__mdiff+0xea>
 80262f8:	f10c 0203 	add.w	r2, ip, #3
 80262fc:	1b52      	subs	r2, r2, r5
 80262fe:	f022 0203 	bic.w	r2, r2, #3
 8026302:	3d03      	subs	r5, #3
 8026304:	45ac      	cmp	ip, r5
 8026306:	bf38      	it	cc
 8026308:	2200      	movcc	r2, #0
 802630a:	4413      	add	r3, r2
 802630c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8026310:	b17a      	cbz	r2, 8026332 <__mdiff+0x106>
 8026312:	6107      	str	r7, [r0, #16]
 8026314:	e7a4      	b.n	8026260 <__mdiff+0x34>
 8026316:	f856 8b04 	ldr.w	r8, [r6], #4
 802631a:	fa11 f288 	uxtah	r2, r1, r8
 802631e:	1414      	asrs	r4, r2, #16
 8026320:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8026324:	b292      	uxth	r2, r2
 8026326:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802632a:	f84e 2b04 	str.w	r2, [lr], #4
 802632e:	1421      	asrs	r1, r4, #16
 8026330:	e7e0      	b.n	80262f4 <__mdiff+0xc8>
 8026332:	3f01      	subs	r7, #1
 8026334:	e7ea      	b.n	802630c <__mdiff+0xe0>
 8026336:	bf00      	nop
 8026338:	0802cd65 	.word	0x0802cd65
 802633c:	0802cd76 	.word	0x0802cd76

08026340 <__d2b>:
 8026340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8026344:	460f      	mov	r7, r1
 8026346:	2101      	movs	r1, #1
 8026348:	ec59 8b10 	vmov	r8, r9, d0
 802634c:	4616      	mov	r6, r2
 802634e:	f7ff fcd5 	bl	8025cfc <_Balloc>
 8026352:	4604      	mov	r4, r0
 8026354:	b930      	cbnz	r0, 8026364 <__d2b+0x24>
 8026356:	4602      	mov	r2, r0
 8026358:	4b24      	ldr	r3, [pc, #144]	; (80263ec <__d2b+0xac>)
 802635a:	4825      	ldr	r0, [pc, #148]	; (80263f0 <__d2b+0xb0>)
 802635c:	f240 310f 	movw	r1, #783	; 0x30f
 8026360:	f7fc fbaa 	bl	8022ab8 <__assert_func>
 8026364:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8026368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802636c:	bb2d      	cbnz	r5, 80263ba <__d2b+0x7a>
 802636e:	9301      	str	r3, [sp, #4]
 8026370:	f1b8 0300 	subs.w	r3, r8, #0
 8026374:	d026      	beq.n	80263c4 <__d2b+0x84>
 8026376:	4668      	mov	r0, sp
 8026378:	9300      	str	r3, [sp, #0]
 802637a:	f7ff fd87 	bl	8025e8c <__lo0bits>
 802637e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8026382:	b1e8      	cbz	r0, 80263c0 <__d2b+0x80>
 8026384:	f1c0 0320 	rsb	r3, r0, #32
 8026388:	fa02 f303 	lsl.w	r3, r2, r3
 802638c:	430b      	orrs	r3, r1
 802638e:	40c2      	lsrs	r2, r0
 8026390:	6163      	str	r3, [r4, #20]
 8026392:	9201      	str	r2, [sp, #4]
 8026394:	9b01      	ldr	r3, [sp, #4]
 8026396:	61a3      	str	r3, [r4, #24]
 8026398:	2b00      	cmp	r3, #0
 802639a:	bf14      	ite	ne
 802639c:	2202      	movne	r2, #2
 802639e:	2201      	moveq	r2, #1
 80263a0:	6122      	str	r2, [r4, #16]
 80263a2:	b1bd      	cbz	r5, 80263d4 <__d2b+0x94>
 80263a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80263a8:	4405      	add	r5, r0
 80263aa:	603d      	str	r5, [r7, #0]
 80263ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80263b0:	6030      	str	r0, [r6, #0]
 80263b2:	4620      	mov	r0, r4
 80263b4:	b003      	add	sp, #12
 80263b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80263ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80263be:	e7d6      	b.n	802636e <__d2b+0x2e>
 80263c0:	6161      	str	r1, [r4, #20]
 80263c2:	e7e7      	b.n	8026394 <__d2b+0x54>
 80263c4:	a801      	add	r0, sp, #4
 80263c6:	f7ff fd61 	bl	8025e8c <__lo0bits>
 80263ca:	9b01      	ldr	r3, [sp, #4]
 80263cc:	6163      	str	r3, [r4, #20]
 80263ce:	3020      	adds	r0, #32
 80263d0:	2201      	movs	r2, #1
 80263d2:	e7e5      	b.n	80263a0 <__d2b+0x60>
 80263d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80263d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80263dc:	6038      	str	r0, [r7, #0]
 80263de:	6918      	ldr	r0, [r3, #16]
 80263e0:	f7ff fd34 	bl	8025e4c <__hi0bits>
 80263e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80263e8:	e7e2      	b.n	80263b0 <__d2b+0x70>
 80263ea:	bf00      	nop
 80263ec:	0802cd65 	.word	0x0802cd65
 80263f0:	0802cd76 	.word	0x0802cd76

080263f4 <_strtoul_l.constprop.0>:
 80263f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80263f8:	4f36      	ldr	r7, [pc, #216]	; (80264d4 <_strtoul_l.constprop.0+0xe0>)
 80263fa:	4686      	mov	lr, r0
 80263fc:	460d      	mov	r5, r1
 80263fe:	4628      	mov	r0, r5
 8026400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026404:	5d3e      	ldrb	r6, [r7, r4]
 8026406:	f016 0608 	ands.w	r6, r6, #8
 802640a:	d1f8      	bne.n	80263fe <_strtoul_l.constprop.0+0xa>
 802640c:	2c2d      	cmp	r4, #45	; 0x2d
 802640e:	d130      	bne.n	8026472 <_strtoul_l.constprop.0+0x7e>
 8026410:	782c      	ldrb	r4, [r5, #0]
 8026412:	2601      	movs	r6, #1
 8026414:	1c85      	adds	r5, r0, #2
 8026416:	2b00      	cmp	r3, #0
 8026418:	d057      	beq.n	80264ca <_strtoul_l.constprop.0+0xd6>
 802641a:	2b10      	cmp	r3, #16
 802641c:	d109      	bne.n	8026432 <_strtoul_l.constprop.0+0x3e>
 802641e:	2c30      	cmp	r4, #48	; 0x30
 8026420:	d107      	bne.n	8026432 <_strtoul_l.constprop.0+0x3e>
 8026422:	7828      	ldrb	r0, [r5, #0]
 8026424:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8026428:	2858      	cmp	r0, #88	; 0x58
 802642a:	d149      	bne.n	80264c0 <_strtoul_l.constprop.0+0xcc>
 802642c:	786c      	ldrb	r4, [r5, #1]
 802642e:	2310      	movs	r3, #16
 8026430:	3502      	adds	r5, #2
 8026432:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8026436:	2700      	movs	r7, #0
 8026438:	fbb8 f8f3 	udiv	r8, r8, r3
 802643c:	fb03 f908 	mul.w	r9, r3, r8
 8026440:	ea6f 0909 	mvn.w	r9, r9
 8026444:	4638      	mov	r0, r7
 8026446:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802644a:	f1bc 0f09 	cmp.w	ip, #9
 802644e:	d815      	bhi.n	802647c <_strtoul_l.constprop.0+0x88>
 8026450:	4664      	mov	r4, ip
 8026452:	42a3      	cmp	r3, r4
 8026454:	dd23      	ble.n	802649e <_strtoul_l.constprop.0+0xaa>
 8026456:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 802645a:	d007      	beq.n	802646c <_strtoul_l.constprop.0+0x78>
 802645c:	4580      	cmp	r8, r0
 802645e:	d31b      	bcc.n	8026498 <_strtoul_l.constprop.0+0xa4>
 8026460:	d101      	bne.n	8026466 <_strtoul_l.constprop.0+0x72>
 8026462:	45a1      	cmp	r9, r4
 8026464:	db18      	blt.n	8026498 <_strtoul_l.constprop.0+0xa4>
 8026466:	fb00 4003 	mla	r0, r0, r3, r4
 802646a:	2701      	movs	r7, #1
 802646c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026470:	e7e9      	b.n	8026446 <_strtoul_l.constprop.0+0x52>
 8026472:	2c2b      	cmp	r4, #43	; 0x2b
 8026474:	bf04      	itt	eq
 8026476:	782c      	ldrbeq	r4, [r5, #0]
 8026478:	1c85      	addeq	r5, r0, #2
 802647a:	e7cc      	b.n	8026416 <_strtoul_l.constprop.0+0x22>
 802647c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8026480:	f1bc 0f19 	cmp.w	ip, #25
 8026484:	d801      	bhi.n	802648a <_strtoul_l.constprop.0+0x96>
 8026486:	3c37      	subs	r4, #55	; 0x37
 8026488:	e7e3      	b.n	8026452 <_strtoul_l.constprop.0+0x5e>
 802648a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802648e:	f1bc 0f19 	cmp.w	ip, #25
 8026492:	d804      	bhi.n	802649e <_strtoul_l.constprop.0+0xaa>
 8026494:	3c57      	subs	r4, #87	; 0x57
 8026496:	e7dc      	b.n	8026452 <_strtoul_l.constprop.0+0x5e>
 8026498:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 802649c:	e7e6      	b.n	802646c <_strtoul_l.constprop.0+0x78>
 802649e:	1c7b      	adds	r3, r7, #1
 80264a0:	d106      	bne.n	80264b0 <_strtoul_l.constprop.0+0xbc>
 80264a2:	2322      	movs	r3, #34	; 0x22
 80264a4:	f8ce 3000 	str.w	r3, [lr]
 80264a8:	4638      	mov	r0, r7
 80264aa:	b932      	cbnz	r2, 80264ba <_strtoul_l.constprop.0+0xc6>
 80264ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80264b0:	b106      	cbz	r6, 80264b4 <_strtoul_l.constprop.0+0xc0>
 80264b2:	4240      	negs	r0, r0
 80264b4:	2a00      	cmp	r2, #0
 80264b6:	d0f9      	beq.n	80264ac <_strtoul_l.constprop.0+0xb8>
 80264b8:	b107      	cbz	r7, 80264bc <_strtoul_l.constprop.0+0xc8>
 80264ba:	1e69      	subs	r1, r5, #1
 80264bc:	6011      	str	r1, [r2, #0]
 80264be:	e7f5      	b.n	80264ac <_strtoul_l.constprop.0+0xb8>
 80264c0:	2430      	movs	r4, #48	; 0x30
 80264c2:	2b00      	cmp	r3, #0
 80264c4:	d1b5      	bne.n	8026432 <_strtoul_l.constprop.0+0x3e>
 80264c6:	2308      	movs	r3, #8
 80264c8:	e7b3      	b.n	8026432 <_strtoul_l.constprop.0+0x3e>
 80264ca:	2c30      	cmp	r4, #48	; 0x30
 80264cc:	d0a9      	beq.n	8026422 <_strtoul_l.constprop.0+0x2e>
 80264ce:	230a      	movs	r3, #10
 80264d0:	e7af      	b.n	8026432 <_strtoul_l.constprop.0+0x3e>
 80264d2:	bf00      	nop
 80264d4:	0802c89c 	.word	0x0802c89c

080264d8 <_strtoul_r>:
 80264d8:	f7ff bf8c 	b.w	80263f4 <_strtoul_l.constprop.0>

080264dc <strtoul>:
 80264dc:	4613      	mov	r3, r2
 80264de:	460a      	mov	r2, r1
 80264e0:	4601      	mov	r1, r0
 80264e2:	4802      	ldr	r0, [pc, #8]	; (80264ec <strtoul+0x10>)
 80264e4:	6800      	ldr	r0, [r0, #0]
 80264e6:	f7ff bf85 	b.w	80263f4 <_strtoul_l.constprop.0>
 80264ea:	bf00      	nop
 80264ec:	200000a0 	.word	0x200000a0

080264f0 <__ssputs_r>:
 80264f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80264f4:	688e      	ldr	r6, [r1, #8]
 80264f6:	461f      	mov	r7, r3
 80264f8:	42be      	cmp	r6, r7
 80264fa:	680b      	ldr	r3, [r1, #0]
 80264fc:	4682      	mov	sl, r0
 80264fe:	460c      	mov	r4, r1
 8026500:	4690      	mov	r8, r2
 8026502:	d82c      	bhi.n	802655e <__ssputs_r+0x6e>
 8026504:	898a      	ldrh	r2, [r1, #12]
 8026506:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802650a:	d026      	beq.n	802655a <__ssputs_r+0x6a>
 802650c:	6965      	ldr	r5, [r4, #20]
 802650e:	6909      	ldr	r1, [r1, #16]
 8026510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026514:	eba3 0901 	sub.w	r9, r3, r1
 8026518:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802651c:	1c7b      	adds	r3, r7, #1
 802651e:	444b      	add	r3, r9
 8026520:	106d      	asrs	r5, r5, #1
 8026522:	429d      	cmp	r5, r3
 8026524:	bf38      	it	cc
 8026526:	461d      	movcc	r5, r3
 8026528:	0553      	lsls	r3, r2, #21
 802652a:	d527      	bpl.n	802657c <__ssputs_r+0x8c>
 802652c:	4629      	mov	r1, r5
 802652e:	f7fc fb11 	bl	8022b54 <_malloc_r>
 8026532:	4606      	mov	r6, r0
 8026534:	b360      	cbz	r0, 8026590 <__ssputs_r+0xa0>
 8026536:	6921      	ldr	r1, [r4, #16]
 8026538:	464a      	mov	r2, r9
 802653a:	f7fe fcb6 	bl	8024eaa <memcpy>
 802653e:	89a3      	ldrh	r3, [r4, #12]
 8026540:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026548:	81a3      	strh	r3, [r4, #12]
 802654a:	6126      	str	r6, [r4, #16]
 802654c:	6165      	str	r5, [r4, #20]
 802654e:	444e      	add	r6, r9
 8026550:	eba5 0509 	sub.w	r5, r5, r9
 8026554:	6026      	str	r6, [r4, #0]
 8026556:	60a5      	str	r5, [r4, #8]
 8026558:	463e      	mov	r6, r7
 802655a:	42be      	cmp	r6, r7
 802655c:	d900      	bls.n	8026560 <__ssputs_r+0x70>
 802655e:	463e      	mov	r6, r7
 8026560:	6820      	ldr	r0, [r4, #0]
 8026562:	4632      	mov	r2, r6
 8026564:	4641      	mov	r1, r8
 8026566:	f7fd fb29 	bl	8023bbc <memmove>
 802656a:	68a3      	ldr	r3, [r4, #8]
 802656c:	1b9b      	subs	r3, r3, r6
 802656e:	60a3      	str	r3, [r4, #8]
 8026570:	6823      	ldr	r3, [r4, #0]
 8026572:	4433      	add	r3, r6
 8026574:	6023      	str	r3, [r4, #0]
 8026576:	2000      	movs	r0, #0
 8026578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802657c:	462a      	mov	r2, r5
 802657e:	f000 fc2d 	bl	8026ddc <_realloc_r>
 8026582:	4606      	mov	r6, r0
 8026584:	2800      	cmp	r0, #0
 8026586:	d1e0      	bne.n	802654a <__ssputs_r+0x5a>
 8026588:	6921      	ldr	r1, [r4, #16]
 802658a:	4650      	mov	r0, sl
 802658c:	f7ff fb22 	bl	8025bd4 <_free_r>
 8026590:	230c      	movs	r3, #12
 8026592:	f8ca 3000 	str.w	r3, [sl]
 8026596:	89a3      	ldrh	r3, [r4, #12]
 8026598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802659c:	81a3      	strh	r3, [r4, #12]
 802659e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80265a2:	e7e9      	b.n	8026578 <__ssputs_r+0x88>

080265a4 <_svfiprintf_r>:
 80265a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80265a8:	4698      	mov	r8, r3
 80265aa:	898b      	ldrh	r3, [r1, #12]
 80265ac:	061b      	lsls	r3, r3, #24
 80265ae:	b09d      	sub	sp, #116	; 0x74
 80265b0:	4607      	mov	r7, r0
 80265b2:	460d      	mov	r5, r1
 80265b4:	4614      	mov	r4, r2
 80265b6:	d50e      	bpl.n	80265d6 <_svfiprintf_r+0x32>
 80265b8:	690b      	ldr	r3, [r1, #16]
 80265ba:	b963      	cbnz	r3, 80265d6 <_svfiprintf_r+0x32>
 80265bc:	2140      	movs	r1, #64	; 0x40
 80265be:	f7fc fac9 	bl	8022b54 <_malloc_r>
 80265c2:	6028      	str	r0, [r5, #0]
 80265c4:	6128      	str	r0, [r5, #16]
 80265c6:	b920      	cbnz	r0, 80265d2 <_svfiprintf_r+0x2e>
 80265c8:	230c      	movs	r3, #12
 80265ca:	603b      	str	r3, [r7, #0]
 80265cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80265d0:	e0d0      	b.n	8026774 <_svfiprintf_r+0x1d0>
 80265d2:	2340      	movs	r3, #64	; 0x40
 80265d4:	616b      	str	r3, [r5, #20]
 80265d6:	2300      	movs	r3, #0
 80265d8:	9309      	str	r3, [sp, #36]	; 0x24
 80265da:	2320      	movs	r3, #32
 80265dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80265e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80265e4:	2330      	movs	r3, #48	; 0x30
 80265e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802678c <_svfiprintf_r+0x1e8>
 80265ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80265ee:	f04f 0901 	mov.w	r9, #1
 80265f2:	4623      	mov	r3, r4
 80265f4:	469a      	mov	sl, r3
 80265f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80265fa:	b10a      	cbz	r2, 8026600 <_svfiprintf_r+0x5c>
 80265fc:	2a25      	cmp	r2, #37	; 0x25
 80265fe:	d1f9      	bne.n	80265f4 <_svfiprintf_r+0x50>
 8026600:	ebba 0b04 	subs.w	fp, sl, r4
 8026604:	d00b      	beq.n	802661e <_svfiprintf_r+0x7a>
 8026606:	465b      	mov	r3, fp
 8026608:	4622      	mov	r2, r4
 802660a:	4629      	mov	r1, r5
 802660c:	4638      	mov	r0, r7
 802660e:	f7ff ff6f 	bl	80264f0 <__ssputs_r>
 8026612:	3001      	adds	r0, #1
 8026614:	f000 80a9 	beq.w	802676a <_svfiprintf_r+0x1c6>
 8026618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802661a:	445a      	add	r2, fp
 802661c:	9209      	str	r2, [sp, #36]	; 0x24
 802661e:	f89a 3000 	ldrb.w	r3, [sl]
 8026622:	2b00      	cmp	r3, #0
 8026624:	f000 80a1 	beq.w	802676a <_svfiprintf_r+0x1c6>
 8026628:	2300      	movs	r3, #0
 802662a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 802662e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026632:	f10a 0a01 	add.w	sl, sl, #1
 8026636:	9304      	str	r3, [sp, #16]
 8026638:	9307      	str	r3, [sp, #28]
 802663a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802663e:	931a      	str	r3, [sp, #104]	; 0x68
 8026640:	4654      	mov	r4, sl
 8026642:	2205      	movs	r2, #5
 8026644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026648:	4850      	ldr	r0, [pc, #320]	; (802678c <_svfiprintf_r+0x1e8>)
 802664a:	f7d9 fdd1 	bl	80001f0 <memchr>
 802664e:	9a04      	ldr	r2, [sp, #16]
 8026650:	b9d8      	cbnz	r0, 802668a <_svfiprintf_r+0xe6>
 8026652:	06d0      	lsls	r0, r2, #27
 8026654:	bf44      	itt	mi
 8026656:	2320      	movmi	r3, #32
 8026658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802665c:	0711      	lsls	r1, r2, #28
 802665e:	bf44      	itt	mi
 8026660:	232b      	movmi	r3, #43	; 0x2b
 8026662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026666:	f89a 3000 	ldrb.w	r3, [sl]
 802666a:	2b2a      	cmp	r3, #42	; 0x2a
 802666c:	d015      	beq.n	802669a <_svfiprintf_r+0xf6>
 802666e:	9a07      	ldr	r2, [sp, #28]
 8026670:	4654      	mov	r4, sl
 8026672:	2000      	movs	r0, #0
 8026674:	f04f 0c0a 	mov.w	ip, #10
 8026678:	4621      	mov	r1, r4
 802667a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802667e:	3b30      	subs	r3, #48	; 0x30
 8026680:	2b09      	cmp	r3, #9
 8026682:	d94d      	bls.n	8026720 <_svfiprintf_r+0x17c>
 8026684:	b1b0      	cbz	r0, 80266b4 <_svfiprintf_r+0x110>
 8026686:	9207      	str	r2, [sp, #28]
 8026688:	e014      	b.n	80266b4 <_svfiprintf_r+0x110>
 802668a:	eba0 0308 	sub.w	r3, r0, r8
 802668e:	fa09 f303 	lsl.w	r3, r9, r3
 8026692:	4313      	orrs	r3, r2
 8026694:	9304      	str	r3, [sp, #16]
 8026696:	46a2      	mov	sl, r4
 8026698:	e7d2      	b.n	8026640 <_svfiprintf_r+0x9c>
 802669a:	9b03      	ldr	r3, [sp, #12]
 802669c:	1d19      	adds	r1, r3, #4
 802669e:	681b      	ldr	r3, [r3, #0]
 80266a0:	9103      	str	r1, [sp, #12]
 80266a2:	2b00      	cmp	r3, #0
 80266a4:	bfbb      	ittet	lt
 80266a6:	425b      	neglt	r3, r3
 80266a8:	f042 0202 	orrlt.w	r2, r2, #2
 80266ac:	9307      	strge	r3, [sp, #28]
 80266ae:	9307      	strlt	r3, [sp, #28]
 80266b0:	bfb8      	it	lt
 80266b2:	9204      	strlt	r2, [sp, #16]
 80266b4:	7823      	ldrb	r3, [r4, #0]
 80266b6:	2b2e      	cmp	r3, #46	; 0x2e
 80266b8:	d10c      	bne.n	80266d4 <_svfiprintf_r+0x130>
 80266ba:	7863      	ldrb	r3, [r4, #1]
 80266bc:	2b2a      	cmp	r3, #42	; 0x2a
 80266be:	d134      	bne.n	802672a <_svfiprintf_r+0x186>
 80266c0:	9b03      	ldr	r3, [sp, #12]
 80266c2:	1d1a      	adds	r2, r3, #4
 80266c4:	681b      	ldr	r3, [r3, #0]
 80266c6:	9203      	str	r2, [sp, #12]
 80266c8:	2b00      	cmp	r3, #0
 80266ca:	bfb8      	it	lt
 80266cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80266d0:	3402      	adds	r4, #2
 80266d2:	9305      	str	r3, [sp, #20]
 80266d4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802679c <_svfiprintf_r+0x1f8>
 80266d8:	7821      	ldrb	r1, [r4, #0]
 80266da:	2203      	movs	r2, #3
 80266dc:	4650      	mov	r0, sl
 80266de:	f7d9 fd87 	bl	80001f0 <memchr>
 80266e2:	b138      	cbz	r0, 80266f4 <_svfiprintf_r+0x150>
 80266e4:	9b04      	ldr	r3, [sp, #16]
 80266e6:	eba0 000a 	sub.w	r0, r0, sl
 80266ea:	2240      	movs	r2, #64	; 0x40
 80266ec:	4082      	lsls	r2, r0
 80266ee:	4313      	orrs	r3, r2
 80266f0:	3401      	adds	r4, #1
 80266f2:	9304      	str	r3, [sp, #16]
 80266f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80266f8:	4825      	ldr	r0, [pc, #148]	; (8026790 <_svfiprintf_r+0x1ec>)
 80266fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80266fe:	2206      	movs	r2, #6
 8026700:	f7d9 fd76 	bl	80001f0 <memchr>
 8026704:	2800      	cmp	r0, #0
 8026706:	d038      	beq.n	802677a <_svfiprintf_r+0x1d6>
 8026708:	4b22      	ldr	r3, [pc, #136]	; (8026794 <_svfiprintf_r+0x1f0>)
 802670a:	bb1b      	cbnz	r3, 8026754 <_svfiprintf_r+0x1b0>
 802670c:	9b03      	ldr	r3, [sp, #12]
 802670e:	3307      	adds	r3, #7
 8026710:	f023 0307 	bic.w	r3, r3, #7
 8026714:	3308      	adds	r3, #8
 8026716:	9303      	str	r3, [sp, #12]
 8026718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802671a:	4433      	add	r3, r6
 802671c:	9309      	str	r3, [sp, #36]	; 0x24
 802671e:	e768      	b.n	80265f2 <_svfiprintf_r+0x4e>
 8026720:	fb0c 3202 	mla	r2, ip, r2, r3
 8026724:	460c      	mov	r4, r1
 8026726:	2001      	movs	r0, #1
 8026728:	e7a6      	b.n	8026678 <_svfiprintf_r+0xd4>
 802672a:	2300      	movs	r3, #0
 802672c:	3401      	adds	r4, #1
 802672e:	9305      	str	r3, [sp, #20]
 8026730:	4619      	mov	r1, r3
 8026732:	f04f 0c0a 	mov.w	ip, #10
 8026736:	4620      	mov	r0, r4
 8026738:	f810 2b01 	ldrb.w	r2, [r0], #1
 802673c:	3a30      	subs	r2, #48	; 0x30
 802673e:	2a09      	cmp	r2, #9
 8026740:	d903      	bls.n	802674a <_svfiprintf_r+0x1a6>
 8026742:	2b00      	cmp	r3, #0
 8026744:	d0c6      	beq.n	80266d4 <_svfiprintf_r+0x130>
 8026746:	9105      	str	r1, [sp, #20]
 8026748:	e7c4      	b.n	80266d4 <_svfiprintf_r+0x130>
 802674a:	fb0c 2101 	mla	r1, ip, r1, r2
 802674e:	4604      	mov	r4, r0
 8026750:	2301      	movs	r3, #1
 8026752:	e7f0      	b.n	8026736 <_svfiprintf_r+0x192>
 8026754:	ab03      	add	r3, sp, #12
 8026756:	9300      	str	r3, [sp, #0]
 8026758:	462a      	mov	r2, r5
 802675a:	4b0f      	ldr	r3, [pc, #60]	; (8026798 <_svfiprintf_r+0x1f4>)
 802675c:	a904      	add	r1, sp, #16
 802675e:	4638      	mov	r0, r7
 8026760:	f7fc fbe6 	bl	8022f30 <_printf_float>
 8026764:	1c42      	adds	r2, r0, #1
 8026766:	4606      	mov	r6, r0
 8026768:	d1d6      	bne.n	8026718 <_svfiprintf_r+0x174>
 802676a:	89ab      	ldrh	r3, [r5, #12]
 802676c:	065b      	lsls	r3, r3, #25
 802676e:	f53f af2d 	bmi.w	80265cc <_svfiprintf_r+0x28>
 8026772:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026774:	b01d      	add	sp, #116	; 0x74
 8026776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802677a:	ab03      	add	r3, sp, #12
 802677c:	9300      	str	r3, [sp, #0]
 802677e:	462a      	mov	r2, r5
 8026780:	4b05      	ldr	r3, [pc, #20]	; (8026798 <_svfiprintf_r+0x1f4>)
 8026782:	a904      	add	r1, sp, #16
 8026784:	4638      	mov	r0, r7
 8026786:	f7fc fe77 	bl	8023478 <_printf_i>
 802678a:	e7eb      	b.n	8026764 <_svfiprintf_r+0x1c0>
 802678c:	0802cecc 	.word	0x0802cecc
 8026790:	0802ced6 	.word	0x0802ced6
 8026794:	08022f31 	.word	0x08022f31
 8026798:	080264f1 	.word	0x080264f1
 802679c:	0802ced2 	.word	0x0802ced2

080267a0 <__sfputc_r>:
 80267a0:	6893      	ldr	r3, [r2, #8]
 80267a2:	3b01      	subs	r3, #1
 80267a4:	2b00      	cmp	r3, #0
 80267a6:	b410      	push	{r4}
 80267a8:	6093      	str	r3, [r2, #8]
 80267aa:	da08      	bge.n	80267be <__sfputc_r+0x1e>
 80267ac:	6994      	ldr	r4, [r2, #24]
 80267ae:	42a3      	cmp	r3, r4
 80267b0:	db01      	blt.n	80267b6 <__sfputc_r+0x16>
 80267b2:	290a      	cmp	r1, #10
 80267b4:	d103      	bne.n	80267be <__sfputc_r+0x1e>
 80267b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80267ba:	f7fd b95a 	b.w	8023a72 <__swbuf_r>
 80267be:	6813      	ldr	r3, [r2, #0]
 80267c0:	1c58      	adds	r0, r3, #1
 80267c2:	6010      	str	r0, [r2, #0]
 80267c4:	7019      	strb	r1, [r3, #0]
 80267c6:	4608      	mov	r0, r1
 80267c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80267cc:	4770      	bx	lr

080267ce <__sfputs_r>:
 80267ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267d0:	4606      	mov	r6, r0
 80267d2:	460f      	mov	r7, r1
 80267d4:	4614      	mov	r4, r2
 80267d6:	18d5      	adds	r5, r2, r3
 80267d8:	42ac      	cmp	r4, r5
 80267da:	d101      	bne.n	80267e0 <__sfputs_r+0x12>
 80267dc:	2000      	movs	r0, #0
 80267de:	e007      	b.n	80267f0 <__sfputs_r+0x22>
 80267e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80267e4:	463a      	mov	r2, r7
 80267e6:	4630      	mov	r0, r6
 80267e8:	f7ff ffda 	bl	80267a0 <__sfputc_r>
 80267ec:	1c43      	adds	r3, r0, #1
 80267ee:	d1f3      	bne.n	80267d8 <__sfputs_r+0xa>
 80267f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080267f4 <_vfiprintf_r>:
 80267f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80267f8:	460d      	mov	r5, r1
 80267fa:	b09d      	sub	sp, #116	; 0x74
 80267fc:	4614      	mov	r4, r2
 80267fe:	4698      	mov	r8, r3
 8026800:	4606      	mov	r6, r0
 8026802:	b118      	cbz	r0, 802680c <_vfiprintf_r+0x18>
 8026804:	6a03      	ldr	r3, [r0, #32]
 8026806:	b90b      	cbnz	r3, 802680c <_vfiprintf_r+0x18>
 8026808:	f7fc ffe4 	bl	80237d4 <__sinit>
 802680c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802680e:	07d9      	lsls	r1, r3, #31
 8026810:	d405      	bmi.n	802681e <_vfiprintf_r+0x2a>
 8026812:	89ab      	ldrh	r3, [r5, #12]
 8026814:	059a      	lsls	r2, r3, #22
 8026816:	d402      	bmi.n	802681e <_vfiprintf_r+0x2a>
 8026818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802681a:	f7fe fb3b 	bl	8024e94 <__retarget_lock_acquire_recursive>
 802681e:	89ab      	ldrh	r3, [r5, #12]
 8026820:	071b      	lsls	r3, r3, #28
 8026822:	d501      	bpl.n	8026828 <_vfiprintf_r+0x34>
 8026824:	692b      	ldr	r3, [r5, #16]
 8026826:	b99b      	cbnz	r3, 8026850 <_vfiprintf_r+0x5c>
 8026828:	4629      	mov	r1, r5
 802682a:	4630      	mov	r0, r6
 802682c:	f7fd f95e 	bl	8023aec <__swsetup_r>
 8026830:	b170      	cbz	r0, 8026850 <_vfiprintf_r+0x5c>
 8026832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026834:	07dc      	lsls	r4, r3, #31
 8026836:	d504      	bpl.n	8026842 <_vfiprintf_r+0x4e>
 8026838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802683c:	b01d      	add	sp, #116	; 0x74
 802683e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026842:	89ab      	ldrh	r3, [r5, #12]
 8026844:	0598      	lsls	r0, r3, #22
 8026846:	d4f7      	bmi.n	8026838 <_vfiprintf_r+0x44>
 8026848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802684a:	f7fe fb25 	bl	8024e98 <__retarget_lock_release_recursive>
 802684e:	e7f3      	b.n	8026838 <_vfiprintf_r+0x44>
 8026850:	2300      	movs	r3, #0
 8026852:	9309      	str	r3, [sp, #36]	; 0x24
 8026854:	2320      	movs	r3, #32
 8026856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802685a:	f8cd 800c 	str.w	r8, [sp, #12]
 802685e:	2330      	movs	r3, #48	; 0x30
 8026860:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8026a14 <_vfiprintf_r+0x220>
 8026864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026868:	f04f 0901 	mov.w	r9, #1
 802686c:	4623      	mov	r3, r4
 802686e:	469a      	mov	sl, r3
 8026870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026874:	b10a      	cbz	r2, 802687a <_vfiprintf_r+0x86>
 8026876:	2a25      	cmp	r2, #37	; 0x25
 8026878:	d1f9      	bne.n	802686e <_vfiprintf_r+0x7a>
 802687a:	ebba 0b04 	subs.w	fp, sl, r4
 802687e:	d00b      	beq.n	8026898 <_vfiprintf_r+0xa4>
 8026880:	465b      	mov	r3, fp
 8026882:	4622      	mov	r2, r4
 8026884:	4629      	mov	r1, r5
 8026886:	4630      	mov	r0, r6
 8026888:	f7ff ffa1 	bl	80267ce <__sfputs_r>
 802688c:	3001      	adds	r0, #1
 802688e:	f000 80a9 	beq.w	80269e4 <_vfiprintf_r+0x1f0>
 8026892:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026894:	445a      	add	r2, fp
 8026896:	9209      	str	r2, [sp, #36]	; 0x24
 8026898:	f89a 3000 	ldrb.w	r3, [sl]
 802689c:	2b00      	cmp	r3, #0
 802689e:	f000 80a1 	beq.w	80269e4 <_vfiprintf_r+0x1f0>
 80268a2:	2300      	movs	r3, #0
 80268a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80268a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80268ac:	f10a 0a01 	add.w	sl, sl, #1
 80268b0:	9304      	str	r3, [sp, #16]
 80268b2:	9307      	str	r3, [sp, #28]
 80268b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80268b8:	931a      	str	r3, [sp, #104]	; 0x68
 80268ba:	4654      	mov	r4, sl
 80268bc:	2205      	movs	r2, #5
 80268be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80268c2:	4854      	ldr	r0, [pc, #336]	; (8026a14 <_vfiprintf_r+0x220>)
 80268c4:	f7d9 fc94 	bl	80001f0 <memchr>
 80268c8:	9a04      	ldr	r2, [sp, #16]
 80268ca:	b9d8      	cbnz	r0, 8026904 <_vfiprintf_r+0x110>
 80268cc:	06d1      	lsls	r1, r2, #27
 80268ce:	bf44      	itt	mi
 80268d0:	2320      	movmi	r3, #32
 80268d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80268d6:	0713      	lsls	r3, r2, #28
 80268d8:	bf44      	itt	mi
 80268da:	232b      	movmi	r3, #43	; 0x2b
 80268dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80268e0:	f89a 3000 	ldrb.w	r3, [sl]
 80268e4:	2b2a      	cmp	r3, #42	; 0x2a
 80268e6:	d015      	beq.n	8026914 <_vfiprintf_r+0x120>
 80268e8:	9a07      	ldr	r2, [sp, #28]
 80268ea:	4654      	mov	r4, sl
 80268ec:	2000      	movs	r0, #0
 80268ee:	f04f 0c0a 	mov.w	ip, #10
 80268f2:	4621      	mov	r1, r4
 80268f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80268f8:	3b30      	subs	r3, #48	; 0x30
 80268fa:	2b09      	cmp	r3, #9
 80268fc:	d94d      	bls.n	802699a <_vfiprintf_r+0x1a6>
 80268fe:	b1b0      	cbz	r0, 802692e <_vfiprintf_r+0x13a>
 8026900:	9207      	str	r2, [sp, #28]
 8026902:	e014      	b.n	802692e <_vfiprintf_r+0x13a>
 8026904:	eba0 0308 	sub.w	r3, r0, r8
 8026908:	fa09 f303 	lsl.w	r3, r9, r3
 802690c:	4313      	orrs	r3, r2
 802690e:	9304      	str	r3, [sp, #16]
 8026910:	46a2      	mov	sl, r4
 8026912:	e7d2      	b.n	80268ba <_vfiprintf_r+0xc6>
 8026914:	9b03      	ldr	r3, [sp, #12]
 8026916:	1d19      	adds	r1, r3, #4
 8026918:	681b      	ldr	r3, [r3, #0]
 802691a:	9103      	str	r1, [sp, #12]
 802691c:	2b00      	cmp	r3, #0
 802691e:	bfbb      	ittet	lt
 8026920:	425b      	neglt	r3, r3
 8026922:	f042 0202 	orrlt.w	r2, r2, #2
 8026926:	9307      	strge	r3, [sp, #28]
 8026928:	9307      	strlt	r3, [sp, #28]
 802692a:	bfb8      	it	lt
 802692c:	9204      	strlt	r2, [sp, #16]
 802692e:	7823      	ldrb	r3, [r4, #0]
 8026930:	2b2e      	cmp	r3, #46	; 0x2e
 8026932:	d10c      	bne.n	802694e <_vfiprintf_r+0x15a>
 8026934:	7863      	ldrb	r3, [r4, #1]
 8026936:	2b2a      	cmp	r3, #42	; 0x2a
 8026938:	d134      	bne.n	80269a4 <_vfiprintf_r+0x1b0>
 802693a:	9b03      	ldr	r3, [sp, #12]
 802693c:	1d1a      	adds	r2, r3, #4
 802693e:	681b      	ldr	r3, [r3, #0]
 8026940:	9203      	str	r2, [sp, #12]
 8026942:	2b00      	cmp	r3, #0
 8026944:	bfb8      	it	lt
 8026946:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 802694a:	3402      	adds	r4, #2
 802694c:	9305      	str	r3, [sp, #20]
 802694e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8026a24 <_vfiprintf_r+0x230>
 8026952:	7821      	ldrb	r1, [r4, #0]
 8026954:	2203      	movs	r2, #3
 8026956:	4650      	mov	r0, sl
 8026958:	f7d9 fc4a 	bl	80001f0 <memchr>
 802695c:	b138      	cbz	r0, 802696e <_vfiprintf_r+0x17a>
 802695e:	9b04      	ldr	r3, [sp, #16]
 8026960:	eba0 000a 	sub.w	r0, r0, sl
 8026964:	2240      	movs	r2, #64	; 0x40
 8026966:	4082      	lsls	r2, r0
 8026968:	4313      	orrs	r3, r2
 802696a:	3401      	adds	r4, #1
 802696c:	9304      	str	r3, [sp, #16]
 802696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026972:	4829      	ldr	r0, [pc, #164]	; (8026a18 <_vfiprintf_r+0x224>)
 8026974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026978:	2206      	movs	r2, #6
 802697a:	f7d9 fc39 	bl	80001f0 <memchr>
 802697e:	2800      	cmp	r0, #0
 8026980:	d03f      	beq.n	8026a02 <_vfiprintf_r+0x20e>
 8026982:	4b26      	ldr	r3, [pc, #152]	; (8026a1c <_vfiprintf_r+0x228>)
 8026984:	bb1b      	cbnz	r3, 80269ce <_vfiprintf_r+0x1da>
 8026986:	9b03      	ldr	r3, [sp, #12]
 8026988:	3307      	adds	r3, #7
 802698a:	f023 0307 	bic.w	r3, r3, #7
 802698e:	3308      	adds	r3, #8
 8026990:	9303      	str	r3, [sp, #12]
 8026992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026994:	443b      	add	r3, r7
 8026996:	9309      	str	r3, [sp, #36]	; 0x24
 8026998:	e768      	b.n	802686c <_vfiprintf_r+0x78>
 802699a:	fb0c 3202 	mla	r2, ip, r2, r3
 802699e:	460c      	mov	r4, r1
 80269a0:	2001      	movs	r0, #1
 80269a2:	e7a6      	b.n	80268f2 <_vfiprintf_r+0xfe>
 80269a4:	2300      	movs	r3, #0
 80269a6:	3401      	adds	r4, #1
 80269a8:	9305      	str	r3, [sp, #20]
 80269aa:	4619      	mov	r1, r3
 80269ac:	f04f 0c0a 	mov.w	ip, #10
 80269b0:	4620      	mov	r0, r4
 80269b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80269b6:	3a30      	subs	r2, #48	; 0x30
 80269b8:	2a09      	cmp	r2, #9
 80269ba:	d903      	bls.n	80269c4 <_vfiprintf_r+0x1d0>
 80269bc:	2b00      	cmp	r3, #0
 80269be:	d0c6      	beq.n	802694e <_vfiprintf_r+0x15a>
 80269c0:	9105      	str	r1, [sp, #20]
 80269c2:	e7c4      	b.n	802694e <_vfiprintf_r+0x15a>
 80269c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80269c8:	4604      	mov	r4, r0
 80269ca:	2301      	movs	r3, #1
 80269cc:	e7f0      	b.n	80269b0 <_vfiprintf_r+0x1bc>
 80269ce:	ab03      	add	r3, sp, #12
 80269d0:	9300      	str	r3, [sp, #0]
 80269d2:	462a      	mov	r2, r5
 80269d4:	4b12      	ldr	r3, [pc, #72]	; (8026a20 <_vfiprintf_r+0x22c>)
 80269d6:	a904      	add	r1, sp, #16
 80269d8:	4630      	mov	r0, r6
 80269da:	f7fc faa9 	bl	8022f30 <_printf_float>
 80269de:	4607      	mov	r7, r0
 80269e0:	1c78      	adds	r0, r7, #1
 80269e2:	d1d6      	bne.n	8026992 <_vfiprintf_r+0x19e>
 80269e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80269e6:	07d9      	lsls	r1, r3, #31
 80269e8:	d405      	bmi.n	80269f6 <_vfiprintf_r+0x202>
 80269ea:	89ab      	ldrh	r3, [r5, #12]
 80269ec:	059a      	lsls	r2, r3, #22
 80269ee:	d402      	bmi.n	80269f6 <_vfiprintf_r+0x202>
 80269f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80269f2:	f7fe fa51 	bl	8024e98 <__retarget_lock_release_recursive>
 80269f6:	89ab      	ldrh	r3, [r5, #12]
 80269f8:	065b      	lsls	r3, r3, #25
 80269fa:	f53f af1d 	bmi.w	8026838 <_vfiprintf_r+0x44>
 80269fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026a00:	e71c      	b.n	802683c <_vfiprintf_r+0x48>
 8026a02:	ab03      	add	r3, sp, #12
 8026a04:	9300      	str	r3, [sp, #0]
 8026a06:	462a      	mov	r2, r5
 8026a08:	4b05      	ldr	r3, [pc, #20]	; (8026a20 <_vfiprintf_r+0x22c>)
 8026a0a:	a904      	add	r1, sp, #16
 8026a0c:	4630      	mov	r0, r6
 8026a0e:	f7fc fd33 	bl	8023478 <_printf_i>
 8026a12:	e7e4      	b.n	80269de <_vfiprintf_r+0x1ea>
 8026a14:	0802cecc 	.word	0x0802cecc
 8026a18:	0802ced6 	.word	0x0802ced6
 8026a1c:	08022f31 	.word	0x08022f31
 8026a20:	080267cf 	.word	0x080267cf
 8026a24:	0802ced2 	.word	0x0802ced2

08026a28 <__sflush_r>:
 8026a28:	898a      	ldrh	r2, [r1, #12]
 8026a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a2e:	4605      	mov	r5, r0
 8026a30:	0710      	lsls	r0, r2, #28
 8026a32:	460c      	mov	r4, r1
 8026a34:	d458      	bmi.n	8026ae8 <__sflush_r+0xc0>
 8026a36:	684b      	ldr	r3, [r1, #4]
 8026a38:	2b00      	cmp	r3, #0
 8026a3a:	dc05      	bgt.n	8026a48 <__sflush_r+0x20>
 8026a3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026a3e:	2b00      	cmp	r3, #0
 8026a40:	dc02      	bgt.n	8026a48 <__sflush_r+0x20>
 8026a42:	2000      	movs	r0, #0
 8026a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a4a:	2e00      	cmp	r6, #0
 8026a4c:	d0f9      	beq.n	8026a42 <__sflush_r+0x1a>
 8026a4e:	2300      	movs	r3, #0
 8026a50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026a54:	682f      	ldr	r7, [r5, #0]
 8026a56:	6a21      	ldr	r1, [r4, #32]
 8026a58:	602b      	str	r3, [r5, #0]
 8026a5a:	d032      	beq.n	8026ac2 <__sflush_r+0x9a>
 8026a5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026a5e:	89a3      	ldrh	r3, [r4, #12]
 8026a60:	075a      	lsls	r2, r3, #29
 8026a62:	d505      	bpl.n	8026a70 <__sflush_r+0x48>
 8026a64:	6863      	ldr	r3, [r4, #4]
 8026a66:	1ac0      	subs	r0, r0, r3
 8026a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026a6a:	b10b      	cbz	r3, 8026a70 <__sflush_r+0x48>
 8026a6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026a6e:	1ac0      	subs	r0, r0, r3
 8026a70:	2300      	movs	r3, #0
 8026a72:	4602      	mov	r2, r0
 8026a74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a76:	6a21      	ldr	r1, [r4, #32]
 8026a78:	4628      	mov	r0, r5
 8026a7a:	47b0      	blx	r6
 8026a7c:	1c43      	adds	r3, r0, #1
 8026a7e:	89a3      	ldrh	r3, [r4, #12]
 8026a80:	d106      	bne.n	8026a90 <__sflush_r+0x68>
 8026a82:	6829      	ldr	r1, [r5, #0]
 8026a84:	291d      	cmp	r1, #29
 8026a86:	d82b      	bhi.n	8026ae0 <__sflush_r+0xb8>
 8026a88:	4a29      	ldr	r2, [pc, #164]	; (8026b30 <__sflush_r+0x108>)
 8026a8a:	410a      	asrs	r2, r1
 8026a8c:	07d6      	lsls	r6, r2, #31
 8026a8e:	d427      	bmi.n	8026ae0 <__sflush_r+0xb8>
 8026a90:	2200      	movs	r2, #0
 8026a92:	6062      	str	r2, [r4, #4]
 8026a94:	04d9      	lsls	r1, r3, #19
 8026a96:	6922      	ldr	r2, [r4, #16]
 8026a98:	6022      	str	r2, [r4, #0]
 8026a9a:	d504      	bpl.n	8026aa6 <__sflush_r+0x7e>
 8026a9c:	1c42      	adds	r2, r0, #1
 8026a9e:	d101      	bne.n	8026aa4 <__sflush_r+0x7c>
 8026aa0:	682b      	ldr	r3, [r5, #0]
 8026aa2:	b903      	cbnz	r3, 8026aa6 <__sflush_r+0x7e>
 8026aa4:	6560      	str	r0, [r4, #84]	; 0x54
 8026aa6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026aa8:	602f      	str	r7, [r5, #0]
 8026aaa:	2900      	cmp	r1, #0
 8026aac:	d0c9      	beq.n	8026a42 <__sflush_r+0x1a>
 8026aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026ab2:	4299      	cmp	r1, r3
 8026ab4:	d002      	beq.n	8026abc <__sflush_r+0x94>
 8026ab6:	4628      	mov	r0, r5
 8026ab8:	f7ff f88c 	bl	8025bd4 <_free_r>
 8026abc:	2000      	movs	r0, #0
 8026abe:	6360      	str	r0, [r4, #52]	; 0x34
 8026ac0:	e7c0      	b.n	8026a44 <__sflush_r+0x1c>
 8026ac2:	2301      	movs	r3, #1
 8026ac4:	4628      	mov	r0, r5
 8026ac6:	47b0      	blx	r6
 8026ac8:	1c41      	adds	r1, r0, #1
 8026aca:	d1c8      	bne.n	8026a5e <__sflush_r+0x36>
 8026acc:	682b      	ldr	r3, [r5, #0]
 8026ace:	2b00      	cmp	r3, #0
 8026ad0:	d0c5      	beq.n	8026a5e <__sflush_r+0x36>
 8026ad2:	2b1d      	cmp	r3, #29
 8026ad4:	d001      	beq.n	8026ada <__sflush_r+0xb2>
 8026ad6:	2b16      	cmp	r3, #22
 8026ad8:	d101      	bne.n	8026ade <__sflush_r+0xb6>
 8026ada:	602f      	str	r7, [r5, #0]
 8026adc:	e7b1      	b.n	8026a42 <__sflush_r+0x1a>
 8026ade:	89a3      	ldrh	r3, [r4, #12]
 8026ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026ae4:	81a3      	strh	r3, [r4, #12]
 8026ae6:	e7ad      	b.n	8026a44 <__sflush_r+0x1c>
 8026ae8:	690f      	ldr	r7, [r1, #16]
 8026aea:	2f00      	cmp	r7, #0
 8026aec:	d0a9      	beq.n	8026a42 <__sflush_r+0x1a>
 8026aee:	0793      	lsls	r3, r2, #30
 8026af0:	680e      	ldr	r6, [r1, #0]
 8026af2:	bf08      	it	eq
 8026af4:	694b      	ldreq	r3, [r1, #20]
 8026af6:	600f      	str	r7, [r1, #0]
 8026af8:	bf18      	it	ne
 8026afa:	2300      	movne	r3, #0
 8026afc:	eba6 0807 	sub.w	r8, r6, r7
 8026b00:	608b      	str	r3, [r1, #8]
 8026b02:	f1b8 0f00 	cmp.w	r8, #0
 8026b06:	dd9c      	ble.n	8026a42 <__sflush_r+0x1a>
 8026b08:	6a21      	ldr	r1, [r4, #32]
 8026b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026b0c:	4643      	mov	r3, r8
 8026b0e:	463a      	mov	r2, r7
 8026b10:	4628      	mov	r0, r5
 8026b12:	47b0      	blx	r6
 8026b14:	2800      	cmp	r0, #0
 8026b16:	dc06      	bgt.n	8026b26 <__sflush_r+0xfe>
 8026b18:	89a3      	ldrh	r3, [r4, #12]
 8026b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b1e:	81a3      	strh	r3, [r4, #12]
 8026b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026b24:	e78e      	b.n	8026a44 <__sflush_r+0x1c>
 8026b26:	4407      	add	r7, r0
 8026b28:	eba8 0800 	sub.w	r8, r8, r0
 8026b2c:	e7e9      	b.n	8026b02 <__sflush_r+0xda>
 8026b2e:	bf00      	nop
 8026b30:	dfbffffe 	.word	0xdfbffffe

08026b34 <_fflush_r>:
 8026b34:	b538      	push	{r3, r4, r5, lr}
 8026b36:	690b      	ldr	r3, [r1, #16]
 8026b38:	4605      	mov	r5, r0
 8026b3a:	460c      	mov	r4, r1
 8026b3c:	b913      	cbnz	r3, 8026b44 <_fflush_r+0x10>
 8026b3e:	2500      	movs	r5, #0
 8026b40:	4628      	mov	r0, r5
 8026b42:	bd38      	pop	{r3, r4, r5, pc}
 8026b44:	b118      	cbz	r0, 8026b4e <_fflush_r+0x1a>
 8026b46:	6a03      	ldr	r3, [r0, #32]
 8026b48:	b90b      	cbnz	r3, 8026b4e <_fflush_r+0x1a>
 8026b4a:	f7fc fe43 	bl	80237d4 <__sinit>
 8026b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b52:	2b00      	cmp	r3, #0
 8026b54:	d0f3      	beq.n	8026b3e <_fflush_r+0xa>
 8026b56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026b58:	07d0      	lsls	r0, r2, #31
 8026b5a:	d404      	bmi.n	8026b66 <_fflush_r+0x32>
 8026b5c:	0599      	lsls	r1, r3, #22
 8026b5e:	d402      	bmi.n	8026b66 <_fflush_r+0x32>
 8026b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026b62:	f7fe f997 	bl	8024e94 <__retarget_lock_acquire_recursive>
 8026b66:	4628      	mov	r0, r5
 8026b68:	4621      	mov	r1, r4
 8026b6a:	f7ff ff5d 	bl	8026a28 <__sflush_r>
 8026b6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026b70:	07da      	lsls	r2, r3, #31
 8026b72:	4605      	mov	r5, r0
 8026b74:	d4e4      	bmi.n	8026b40 <_fflush_r+0xc>
 8026b76:	89a3      	ldrh	r3, [r4, #12]
 8026b78:	059b      	lsls	r3, r3, #22
 8026b7a:	d4e1      	bmi.n	8026b40 <_fflush_r+0xc>
 8026b7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026b7e:	f7fe f98b 	bl	8024e98 <__retarget_lock_release_recursive>
 8026b82:	e7dd      	b.n	8026b40 <_fflush_r+0xc>

08026b84 <__swhatbuf_r>:
 8026b84:	b570      	push	{r4, r5, r6, lr}
 8026b86:	460c      	mov	r4, r1
 8026b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b8c:	2900      	cmp	r1, #0
 8026b8e:	b096      	sub	sp, #88	; 0x58
 8026b90:	4615      	mov	r5, r2
 8026b92:	461e      	mov	r6, r3
 8026b94:	da0d      	bge.n	8026bb2 <__swhatbuf_r+0x2e>
 8026b96:	89a3      	ldrh	r3, [r4, #12]
 8026b98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8026b9c:	f04f 0100 	mov.w	r1, #0
 8026ba0:	bf0c      	ite	eq
 8026ba2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8026ba6:	2340      	movne	r3, #64	; 0x40
 8026ba8:	2000      	movs	r0, #0
 8026baa:	6031      	str	r1, [r6, #0]
 8026bac:	602b      	str	r3, [r5, #0]
 8026bae:	b016      	add	sp, #88	; 0x58
 8026bb0:	bd70      	pop	{r4, r5, r6, pc}
 8026bb2:	466a      	mov	r2, sp
 8026bb4:	f000 f8a8 	bl	8026d08 <_fstat_r>
 8026bb8:	2800      	cmp	r0, #0
 8026bba:	dbec      	blt.n	8026b96 <__swhatbuf_r+0x12>
 8026bbc:	9901      	ldr	r1, [sp, #4]
 8026bbe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8026bc2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8026bc6:	4259      	negs	r1, r3
 8026bc8:	4159      	adcs	r1, r3
 8026bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026bce:	e7eb      	b.n	8026ba8 <__swhatbuf_r+0x24>

08026bd0 <__smakebuf_r>:
 8026bd0:	898b      	ldrh	r3, [r1, #12]
 8026bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026bd4:	079d      	lsls	r5, r3, #30
 8026bd6:	4606      	mov	r6, r0
 8026bd8:	460c      	mov	r4, r1
 8026bda:	d507      	bpl.n	8026bec <__smakebuf_r+0x1c>
 8026bdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026be0:	6023      	str	r3, [r4, #0]
 8026be2:	6123      	str	r3, [r4, #16]
 8026be4:	2301      	movs	r3, #1
 8026be6:	6163      	str	r3, [r4, #20]
 8026be8:	b002      	add	sp, #8
 8026bea:	bd70      	pop	{r4, r5, r6, pc}
 8026bec:	ab01      	add	r3, sp, #4
 8026bee:	466a      	mov	r2, sp
 8026bf0:	f7ff ffc8 	bl	8026b84 <__swhatbuf_r>
 8026bf4:	9900      	ldr	r1, [sp, #0]
 8026bf6:	4605      	mov	r5, r0
 8026bf8:	4630      	mov	r0, r6
 8026bfa:	f7fb ffab 	bl	8022b54 <_malloc_r>
 8026bfe:	b948      	cbnz	r0, 8026c14 <__smakebuf_r+0x44>
 8026c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c04:	059a      	lsls	r2, r3, #22
 8026c06:	d4ef      	bmi.n	8026be8 <__smakebuf_r+0x18>
 8026c08:	f023 0303 	bic.w	r3, r3, #3
 8026c0c:	f043 0302 	orr.w	r3, r3, #2
 8026c10:	81a3      	strh	r3, [r4, #12]
 8026c12:	e7e3      	b.n	8026bdc <__smakebuf_r+0xc>
 8026c14:	89a3      	ldrh	r3, [r4, #12]
 8026c16:	6020      	str	r0, [r4, #0]
 8026c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026c1c:	81a3      	strh	r3, [r4, #12]
 8026c1e:	9b00      	ldr	r3, [sp, #0]
 8026c20:	6163      	str	r3, [r4, #20]
 8026c22:	9b01      	ldr	r3, [sp, #4]
 8026c24:	6120      	str	r0, [r4, #16]
 8026c26:	b15b      	cbz	r3, 8026c40 <__smakebuf_r+0x70>
 8026c28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026c2c:	4630      	mov	r0, r6
 8026c2e:	f000 f87d 	bl	8026d2c <_isatty_r>
 8026c32:	b128      	cbz	r0, 8026c40 <__smakebuf_r+0x70>
 8026c34:	89a3      	ldrh	r3, [r4, #12]
 8026c36:	f023 0303 	bic.w	r3, r3, #3
 8026c3a:	f043 0301 	orr.w	r3, r3, #1
 8026c3e:	81a3      	strh	r3, [r4, #12]
 8026c40:	89a3      	ldrh	r3, [r4, #12]
 8026c42:	431d      	orrs	r5, r3
 8026c44:	81a5      	strh	r5, [r4, #12]
 8026c46:	e7cf      	b.n	8026be8 <__smakebuf_r+0x18>

08026c48 <siscanf>:
 8026c48:	b40e      	push	{r1, r2, r3}
 8026c4a:	b510      	push	{r4, lr}
 8026c4c:	b09f      	sub	sp, #124	; 0x7c
 8026c4e:	ac21      	add	r4, sp, #132	; 0x84
 8026c50:	f44f 7101 	mov.w	r1, #516	; 0x204
 8026c54:	f854 2b04 	ldr.w	r2, [r4], #4
 8026c58:	9201      	str	r2, [sp, #4]
 8026c5a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8026c5e:	9004      	str	r0, [sp, #16]
 8026c60:	9008      	str	r0, [sp, #32]
 8026c62:	f7d9 fb15 	bl	8000290 <strlen>
 8026c66:	4b0c      	ldr	r3, [pc, #48]	; (8026c98 <siscanf+0x50>)
 8026c68:	9005      	str	r0, [sp, #20]
 8026c6a:	9009      	str	r0, [sp, #36]	; 0x24
 8026c6c:	930d      	str	r3, [sp, #52]	; 0x34
 8026c6e:	480b      	ldr	r0, [pc, #44]	; (8026c9c <siscanf+0x54>)
 8026c70:	9a01      	ldr	r2, [sp, #4]
 8026c72:	6800      	ldr	r0, [r0, #0]
 8026c74:	9403      	str	r4, [sp, #12]
 8026c76:	2300      	movs	r3, #0
 8026c78:	9311      	str	r3, [sp, #68]	; 0x44
 8026c7a:	9316      	str	r3, [sp, #88]	; 0x58
 8026c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8026c80:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026c84:	a904      	add	r1, sp, #16
 8026c86:	4623      	mov	r3, r4
 8026c88:	f000 f93e 	bl	8026f08 <__ssvfiscanf_r>
 8026c8c:	b01f      	add	sp, #124	; 0x7c
 8026c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026c92:	b003      	add	sp, #12
 8026c94:	4770      	bx	lr
 8026c96:	bf00      	nop
 8026c98:	08023a0b 	.word	0x08023a0b
 8026c9c:	200000a0 	.word	0x200000a0

08026ca0 <_raise_r>:
 8026ca0:	291f      	cmp	r1, #31
 8026ca2:	b538      	push	{r3, r4, r5, lr}
 8026ca4:	4604      	mov	r4, r0
 8026ca6:	460d      	mov	r5, r1
 8026ca8:	d904      	bls.n	8026cb4 <_raise_r+0x14>
 8026caa:	2316      	movs	r3, #22
 8026cac:	6003      	str	r3, [r0, #0]
 8026cae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026cb2:	bd38      	pop	{r3, r4, r5, pc}
 8026cb4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8026cb6:	b112      	cbz	r2, 8026cbe <_raise_r+0x1e>
 8026cb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026cbc:	b94b      	cbnz	r3, 8026cd2 <_raise_r+0x32>
 8026cbe:	4620      	mov	r0, r4
 8026cc0:	f000 f856 	bl	8026d70 <_getpid_r>
 8026cc4:	462a      	mov	r2, r5
 8026cc6:	4601      	mov	r1, r0
 8026cc8:	4620      	mov	r0, r4
 8026cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026cce:	f000 b83d 	b.w	8026d4c <_kill_r>
 8026cd2:	2b01      	cmp	r3, #1
 8026cd4:	d00a      	beq.n	8026cec <_raise_r+0x4c>
 8026cd6:	1c59      	adds	r1, r3, #1
 8026cd8:	d103      	bne.n	8026ce2 <_raise_r+0x42>
 8026cda:	2316      	movs	r3, #22
 8026cdc:	6003      	str	r3, [r0, #0]
 8026cde:	2001      	movs	r0, #1
 8026ce0:	e7e7      	b.n	8026cb2 <_raise_r+0x12>
 8026ce2:	2400      	movs	r4, #0
 8026ce4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026ce8:	4628      	mov	r0, r5
 8026cea:	4798      	blx	r3
 8026cec:	2000      	movs	r0, #0
 8026cee:	e7e0      	b.n	8026cb2 <_raise_r+0x12>

08026cf0 <raise>:
 8026cf0:	4b02      	ldr	r3, [pc, #8]	; (8026cfc <raise+0xc>)
 8026cf2:	4601      	mov	r1, r0
 8026cf4:	6818      	ldr	r0, [r3, #0]
 8026cf6:	f7ff bfd3 	b.w	8026ca0 <_raise_r>
 8026cfa:	bf00      	nop
 8026cfc:	200000a0 	.word	0x200000a0

08026d00 <__gettzinfo>:
 8026d00:	4800      	ldr	r0, [pc, #0]	; (8026d04 <__gettzinfo+0x4>)
 8026d02:	4770      	bx	lr
 8026d04:	200000a8 	.word	0x200000a8

08026d08 <_fstat_r>:
 8026d08:	b538      	push	{r3, r4, r5, lr}
 8026d0a:	4d07      	ldr	r5, [pc, #28]	; (8026d28 <_fstat_r+0x20>)
 8026d0c:	2300      	movs	r3, #0
 8026d0e:	4604      	mov	r4, r0
 8026d10:	4608      	mov	r0, r1
 8026d12:	4611      	mov	r1, r2
 8026d14:	602b      	str	r3, [r5, #0]
 8026d16:	f7dc febc 	bl	8003a92 <_fstat>
 8026d1a:	1c43      	adds	r3, r0, #1
 8026d1c:	d102      	bne.n	8026d24 <_fstat_r+0x1c>
 8026d1e:	682b      	ldr	r3, [r5, #0]
 8026d20:	b103      	cbz	r3, 8026d24 <_fstat_r+0x1c>
 8026d22:	6023      	str	r3, [r4, #0]
 8026d24:	bd38      	pop	{r3, r4, r5, pc}
 8026d26:	bf00      	nop
 8026d28:	200164c4 	.word	0x200164c4

08026d2c <_isatty_r>:
 8026d2c:	b538      	push	{r3, r4, r5, lr}
 8026d2e:	4d06      	ldr	r5, [pc, #24]	; (8026d48 <_isatty_r+0x1c>)
 8026d30:	2300      	movs	r3, #0
 8026d32:	4604      	mov	r4, r0
 8026d34:	4608      	mov	r0, r1
 8026d36:	602b      	str	r3, [r5, #0]
 8026d38:	f7dc febb 	bl	8003ab2 <_isatty>
 8026d3c:	1c43      	adds	r3, r0, #1
 8026d3e:	d102      	bne.n	8026d46 <_isatty_r+0x1a>
 8026d40:	682b      	ldr	r3, [r5, #0]
 8026d42:	b103      	cbz	r3, 8026d46 <_isatty_r+0x1a>
 8026d44:	6023      	str	r3, [r4, #0]
 8026d46:	bd38      	pop	{r3, r4, r5, pc}
 8026d48:	200164c4 	.word	0x200164c4

08026d4c <_kill_r>:
 8026d4c:	b538      	push	{r3, r4, r5, lr}
 8026d4e:	4d07      	ldr	r5, [pc, #28]	; (8026d6c <_kill_r+0x20>)
 8026d50:	2300      	movs	r3, #0
 8026d52:	4604      	mov	r4, r0
 8026d54:	4608      	mov	r0, r1
 8026d56:	4611      	mov	r1, r2
 8026d58:	602b      	str	r3, [r5, #0]
 8026d5a:	f7dc fe39 	bl	80039d0 <_kill>
 8026d5e:	1c43      	adds	r3, r0, #1
 8026d60:	d102      	bne.n	8026d68 <_kill_r+0x1c>
 8026d62:	682b      	ldr	r3, [r5, #0]
 8026d64:	b103      	cbz	r3, 8026d68 <_kill_r+0x1c>
 8026d66:	6023      	str	r3, [r4, #0]
 8026d68:	bd38      	pop	{r3, r4, r5, pc}
 8026d6a:	bf00      	nop
 8026d6c:	200164c4 	.word	0x200164c4

08026d70 <_getpid_r>:
 8026d70:	f7dc be26 	b.w	80039c0 <_getpid>

08026d74 <_calloc_r>:
 8026d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026d76:	fba1 2402 	umull	r2, r4, r1, r2
 8026d7a:	b94c      	cbnz	r4, 8026d90 <_calloc_r+0x1c>
 8026d7c:	4611      	mov	r1, r2
 8026d7e:	9201      	str	r2, [sp, #4]
 8026d80:	f7fb fee8 	bl	8022b54 <_malloc_r>
 8026d84:	9a01      	ldr	r2, [sp, #4]
 8026d86:	4605      	mov	r5, r0
 8026d88:	b930      	cbnz	r0, 8026d98 <_calloc_r+0x24>
 8026d8a:	4628      	mov	r0, r5
 8026d8c:	b003      	add	sp, #12
 8026d8e:	bd30      	pop	{r4, r5, pc}
 8026d90:	220c      	movs	r2, #12
 8026d92:	6002      	str	r2, [r0, #0]
 8026d94:	2500      	movs	r5, #0
 8026d96:	e7f8      	b.n	8026d8a <_calloc_r+0x16>
 8026d98:	4621      	mov	r1, r4
 8026d9a:	f7fc ff29 	bl	8023bf0 <memset>
 8026d9e:	e7f4      	b.n	8026d8a <_calloc_r+0x16>

08026da0 <__env_lock>:
 8026da0:	4801      	ldr	r0, [pc, #4]	; (8026da8 <__env_lock+0x8>)
 8026da2:	f7fe b877 	b.w	8024e94 <__retarget_lock_acquire_recursive>
 8026da6:	bf00      	nop
 8026da8:	200164c8 	.word	0x200164c8

08026dac <__env_unlock>:
 8026dac:	4801      	ldr	r0, [pc, #4]	; (8026db4 <__env_unlock+0x8>)
 8026dae:	f7fe b873 	b.w	8024e98 <__retarget_lock_release_recursive>
 8026db2:	bf00      	nop
 8026db4:	200164c8 	.word	0x200164c8

08026db8 <__ascii_mbtowc>:
 8026db8:	b082      	sub	sp, #8
 8026dba:	b901      	cbnz	r1, 8026dbe <__ascii_mbtowc+0x6>
 8026dbc:	a901      	add	r1, sp, #4
 8026dbe:	b142      	cbz	r2, 8026dd2 <__ascii_mbtowc+0x1a>
 8026dc0:	b14b      	cbz	r3, 8026dd6 <__ascii_mbtowc+0x1e>
 8026dc2:	7813      	ldrb	r3, [r2, #0]
 8026dc4:	600b      	str	r3, [r1, #0]
 8026dc6:	7812      	ldrb	r2, [r2, #0]
 8026dc8:	1e10      	subs	r0, r2, #0
 8026dca:	bf18      	it	ne
 8026dcc:	2001      	movne	r0, #1
 8026dce:	b002      	add	sp, #8
 8026dd0:	4770      	bx	lr
 8026dd2:	4610      	mov	r0, r2
 8026dd4:	e7fb      	b.n	8026dce <__ascii_mbtowc+0x16>
 8026dd6:	f06f 0001 	mvn.w	r0, #1
 8026dda:	e7f8      	b.n	8026dce <__ascii_mbtowc+0x16>

08026ddc <_realloc_r>:
 8026ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026de0:	4680      	mov	r8, r0
 8026de2:	4614      	mov	r4, r2
 8026de4:	460e      	mov	r6, r1
 8026de6:	b921      	cbnz	r1, 8026df2 <_realloc_r+0x16>
 8026de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026dec:	4611      	mov	r1, r2
 8026dee:	f7fb beb1 	b.w	8022b54 <_malloc_r>
 8026df2:	b92a      	cbnz	r2, 8026e00 <_realloc_r+0x24>
 8026df4:	f7fe feee 	bl	8025bd4 <_free_r>
 8026df8:	4625      	mov	r5, r4
 8026dfa:	4628      	mov	r0, r5
 8026dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026e00:	f000 fbbb 	bl	802757a <_malloc_usable_size_r>
 8026e04:	4284      	cmp	r4, r0
 8026e06:	4607      	mov	r7, r0
 8026e08:	d802      	bhi.n	8026e10 <_realloc_r+0x34>
 8026e0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026e0e:	d812      	bhi.n	8026e36 <_realloc_r+0x5a>
 8026e10:	4621      	mov	r1, r4
 8026e12:	4640      	mov	r0, r8
 8026e14:	f7fb fe9e 	bl	8022b54 <_malloc_r>
 8026e18:	4605      	mov	r5, r0
 8026e1a:	2800      	cmp	r0, #0
 8026e1c:	d0ed      	beq.n	8026dfa <_realloc_r+0x1e>
 8026e1e:	42bc      	cmp	r4, r7
 8026e20:	4622      	mov	r2, r4
 8026e22:	4631      	mov	r1, r6
 8026e24:	bf28      	it	cs
 8026e26:	463a      	movcs	r2, r7
 8026e28:	f7fe f83f 	bl	8024eaa <memcpy>
 8026e2c:	4631      	mov	r1, r6
 8026e2e:	4640      	mov	r0, r8
 8026e30:	f7fe fed0 	bl	8025bd4 <_free_r>
 8026e34:	e7e1      	b.n	8026dfa <_realloc_r+0x1e>
 8026e36:	4635      	mov	r5, r6
 8026e38:	e7df      	b.n	8026dfa <_realloc_r+0x1e>

08026e3a <__ascii_wctomb>:
 8026e3a:	b149      	cbz	r1, 8026e50 <__ascii_wctomb+0x16>
 8026e3c:	2aff      	cmp	r2, #255	; 0xff
 8026e3e:	bf85      	ittet	hi
 8026e40:	238a      	movhi	r3, #138	; 0x8a
 8026e42:	6003      	strhi	r3, [r0, #0]
 8026e44:	700a      	strbls	r2, [r1, #0]
 8026e46:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8026e4a:	bf98      	it	ls
 8026e4c:	2001      	movls	r0, #1
 8026e4e:	4770      	bx	lr
 8026e50:	4608      	mov	r0, r1
 8026e52:	4770      	bx	lr

08026e54 <_sungetc_r>:
 8026e54:	b538      	push	{r3, r4, r5, lr}
 8026e56:	1c4b      	adds	r3, r1, #1
 8026e58:	4614      	mov	r4, r2
 8026e5a:	d103      	bne.n	8026e64 <_sungetc_r+0x10>
 8026e5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8026e60:	4628      	mov	r0, r5
 8026e62:	bd38      	pop	{r3, r4, r5, pc}
 8026e64:	8993      	ldrh	r3, [r2, #12]
 8026e66:	f023 0320 	bic.w	r3, r3, #32
 8026e6a:	8193      	strh	r3, [r2, #12]
 8026e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026e6e:	6852      	ldr	r2, [r2, #4]
 8026e70:	b2cd      	uxtb	r5, r1
 8026e72:	b18b      	cbz	r3, 8026e98 <_sungetc_r+0x44>
 8026e74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026e76:	4293      	cmp	r3, r2
 8026e78:	dd08      	ble.n	8026e8c <_sungetc_r+0x38>
 8026e7a:	6823      	ldr	r3, [r4, #0]
 8026e7c:	1e5a      	subs	r2, r3, #1
 8026e7e:	6022      	str	r2, [r4, #0]
 8026e80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8026e84:	6863      	ldr	r3, [r4, #4]
 8026e86:	3301      	adds	r3, #1
 8026e88:	6063      	str	r3, [r4, #4]
 8026e8a:	e7e9      	b.n	8026e60 <_sungetc_r+0xc>
 8026e8c:	4621      	mov	r1, r4
 8026e8e:	f000 fb3a 	bl	8027506 <__submore>
 8026e92:	2800      	cmp	r0, #0
 8026e94:	d0f1      	beq.n	8026e7a <_sungetc_r+0x26>
 8026e96:	e7e1      	b.n	8026e5c <_sungetc_r+0x8>
 8026e98:	6921      	ldr	r1, [r4, #16]
 8026e9a:	6823      	ldr	r3, [r4, #0]
 8026e9c:	b151      	cbz	r1, 8026eb4 <_sungetc_r+0x60>
 8026e9e:	4299      	cmp	r1, r3
 8026ea0:	d208      	bcs.n	8026eb4 <_sungetc_r+0x60>
 8026ea2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8026ea6:	42a9      	cmp	r1, r5
 8026ea8:	d104      	bne.n	8026eb4 <_sungetc_r+0x60>
 8026eaa:	3b01      	subs	r3, #1
 8026eac:	3201      	adds	r2, #1
 8026eae:	6023      	str	r3, [r4, #0]
 8026eb0:	6062      	str	r2, [r4, #4]
 8026eb2:	e7d5      	b.n	8026e60 <_sungetc_r+0xc>
 8026eb4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8026eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026ebc:	6363      	str	r3, [r4, #52]	; 0x34
 8026ebe:	2303      	movs	r3, #3
 8026ec0:	63a3      	str	r3, [r4, #56]	; 0x38
 8026ec2:	4623      	mov	r3, r4
 8026ec4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8026ec8:	6023      	str	r3, [r4, #0]
 8026eca:	2301      	movs	r3, #1
 8026ecc:	e7dc      	b.n	8026e88 <_sungetc_r+0x34>

08026ece <__ssrefill_r>:
 8026ece:	b510      	push	{r4, lr}
 8026ed0:	460c      	mov	r4, r1
 8026ed2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8026ed4:	b169      	cbz	r1, 8026ef2 <__ssrefill_r+0x24>
 8026ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026eda:	4299      	cmp	r1, r3
 8026edc:	d001      	beq.n	8026ee2 <__ssrefill_r+0x14>
 8026ede:	f7fe fe79 	bl	8025bd4 <_free_r>
 8026ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026ee4:	6063      	str	r3, [r4, #4]
 8026ee6:	2000      	movs	r0, #0
 8026ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8026eea:	b113      	cbz	r3, 8026ef2 <__ssrefill_r+0x24>
 8026eec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8026eee:	6023      	str	r3, [r4, #0]
 8026ef0:	bd10      	pop	{r4, pc}
 8026ef2:	6923      	ldr	r3, [r4, #16]
 8026ef4:	6023      	str	r3, [r4, #0]
 8026ef6:	2300      	movs	r3, #0
 8026ef8:	6063      	str	r3, [r4, #4]
 8026efa:	89a3      	ldrh	r3, [r4, #12]
 8026efc:	f043 0320 	orr.w	r3, r3, #32
 8026f00:	81a3      	strh	r3, [r4, #12]
 8026f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8026f06:	e7f3      	b.n	8026ef0 <__ssrefill_r+0x22>

08026f08 <__ssvfiscanf_r>:
 8026f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f0c:	460c      	mov	r4, r1
 8026f0e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8026f12:	2100      	movs	r1, #0
 8026f14:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8026f18:	49a6      	ldr	r1, [pc, #664]	; (80271b4 <__ssvfiscanf_r+0x2ac>)
 8026f1a:	91a0      	str	r1, [sp, #640]	; 0x280
 8026f1c:	f10d 0804 	add.w	r8, sp, #4
 8026f20:	49a5      	ldr	r1, [pc, #660]	; (80271b8 <__ssvfiscanf_r+0x2b0>)
 8026f22:	4fa6      	ldr	r7, [pc, #664]	; (80271bc <__ssvfiscanf_r+0x2b4>)
 8026f24:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80271c0 <__ssvfiscanf_r+0x2b8>
 8026f28:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8026f2c:	4606      	mov	r6, r0
 8026f2e:	91a1      	str	r1, [sp, #644]	; 0x284
 8026f30:	9300      	str	r3, [sp, #0]
 8026f32:	7813      	ldrb	r3, [r2, #0]
 8026f34:	2b00      	cmp	r3, #0
 8026f36:	f000 815a 	beq.w	80271ee <__ssvfiscanf_r+0x2e6>
 8026f3a:	5cf9      	ldrb	r1, [r7, r3]
 8026f3c:	f011 0108 	ands.w	r1, r1, #8
 8026f40:	f102 0501 	add.w	r5, r2, #1
 8026f44:	d019      	beq.n	8026f7a <__ssvfiscanf_r+0x72>
 8026f46:	6863      	ldr	r3, [r4, #4]
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	dd0f      	ble.n	8026f6c <__ssvfiscanf_r+0x64>
 8026f4c:	6823      	ldr	r3, [r4, #0]
 8026f4e:	781a      	ldrb	r2, [r3, #0]
 8026f50:	5cba      	ldrb	r2, [r7, r2]
 8026f52:	0712      	lsls	r2, r2, #28
 8026f54:	d401      	bmi.n	8026f5a <__ssvfiscanf_r+0x52>
 8026f56:	462a      	mov	r2, r5
 8026f58:	e7eb      	b.n	8026f32 <__ssvfiscanf_r+0x2a>
 8026f5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8026f5c:	3201      	adds	r2, #1
 8026f5e:	9245      	str	r2, [sp, #276]	; 0x114
 8026f60:	6862      	ldr	r2, [r4, #4]
 8026f62:	3301      	adds	r3, #1
 8026f64:	3a01      	subs	r2, #1
 8026f66:	6062      	str	r2, [r4, #4]
 8026f68:	6023      	str	r3, [r4, #0]
 8026f6a:	e7ec      	b.n	8026f46 <__ssvfiscanf_r+0x3e>
 8026f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8026f6e:	4621      	mov	r1, r4
 8026f70:	4630      	mov	r0, r6
 8026f72:	4798      	blx	r3
 8026f74:	2800      	cmp	r0, #0
 8026f76:	d0e9      	beq.n	8026f4c <__ssvfiscanf_r+0x44>
 8026f78:	e7ed      	b.n	8026f56 <__ssvfiscanf_r+0x4e>
 8026f7a:	2b25      	cmp	r3, #37	; 0x25
 8026f7c:	d012      	beq.n	8026fa4 <__ssvfiscanf_r+0x9c>
 8026f7e:	469a      	mov	sl, r3
 8026f80:	6863      	ldr	r3, [r4, #4]
 8026f82:	2b00      	cmp	r3, #0
 8026f84:	f340 8091 	ble.w	80270aa <__ssvfiscanf_r+0x1a2>
 8026f88:	6822      	ldr	r2, [r4, #0]
 8026f8a:	7813      	ldrb	r3, [r2, #0]
 8026f8c:	4553      	cmp	r3, sl
 8026f8e:	f040 812e 	bne.w	80271ee <__ssvfiscanf_r+0x2e6>
 8026f92:	6863      	ldr	r3, [r4, #4]
 8026f94:	3b01      	subs	r3, #1
 8026f96:	6063      	str	r3, [r4, #4]
 8026f98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8026f9a:	3201      	adds	r2, #1
 8026f9c:	3301      	adds	r3, #1
 8026f9e:	6022      	str	r2, [r4, #0]
 8026fa0:	9345      	str	r3, [sp, #276]	; 0x114
 8026fa2:	e7d8      	b.n	8026f56 <__ssvfiscanf_r+0x4e>
 8026fa4:	9141      	str	r1, [sp, #260]	; 0x104
 8026fa6:	9143      	str	r1, [sp, #268]	; 0x10c
 8026fa8:	7853      	ldrb	r3, [r2, #1]
 8026faa:	2b2a      	cmp	r3, #42	; 0x2a
 8026fac:	bf02      	ittt	eq
 8026fae:	2310      	moveq	r3, #16
 8026fb0:	1c95      	addeq	r5, r2, #2
 8026fb2:	9341      	streq	r3, [sp, #260]	; 0x104
 8026fb4:	220a      	movs	r2, #10
 8026fb6:	46aa      	mov	sl, r5
 8026fb8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8026fbc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8026fc0:	2b09      	cmp	r3, #9
 8026fc2:	d91c      	bls.n	8026ffe <__ssvfiscanf_r+0xf6>
 8026fc4:	487e      	ldr	r0, [pc, #504]	; (80271c0 <__ssvfiscanf_r+0x2b8>)
 8026fc6:	2203      	movs	r2, #3
 8026fc8:	f7d9 f912 	bl	80001f0 <memchr>
 8026fcc:	b138      	cbz	r0, 8026fde <__ssvfiscanf_r+0xd6>
 8026fce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026fd0:	eba0 0009 	sub.w	r0, r0, r9
 8026fd4:	2301      	movs	r3, #1
 8026fd6:	4083      	lsls	r3, r0
 8026fd8:	4313      	orrs	r3, r2
 8026fda:	9341      	str	r3, [sp, #260]	; 0x104
 8026fdc:	4655      	mov	r5, sl
 8026fde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026fe2:	2b78      	cmp	r3, #120	; 0x78
 8026fe4:	d806      	bhi.n	8026ff4 <__ssvfiscanf_r+0xec>
 8026fe6:	2b57      	cmp	r3, #87	; 0x57
 8026fe8:	d810      	bhi.n	802700c <__ssvfiscanf_r+0x104>
 8026fea:	2b25      	cmp	r3, #37	; 0x25
 8026fec:	d0c7      	beq.n	8026f7e <__ssvfiscanf_r+0x76>
 8026fee:	d857      	bhi.n	80270a0 <__ssvfiscanf_r+0x198>
 8026ff0:	2b00      	cmp	r3, #0
 8026ff2:	d065      	beq.n	80270c0 <__ssvfiscanf_r+0x1b8>
 8026ff4:	2303      	movs	r3, #3
 8026ff6:	9347      	str	r3, [sp, #284]	; 0x11c
 8026ff8:	230a      	movs	r3, #10
 8026ffa:	9342      	str	r3, [sp, #264]	; 0x108
 8026ffc:	e076      	b.n	80270ec <__ssvfiscanf_r+0x1e4>
 8026ffe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8027000:	fb02 1103 	mla	r1, r2, r3, r1
 8027004:	3930      	subs	r1, #48	; 0x30
 8027006:	9143      	str	r1, [sp, #268]	; 0x10c
 8027008:	4655      	mov	r5, sl
 802700a:	e7d4      	b.n	8026fb6 <__ssvfiscanf_r+0xae>
 802700c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8027010:	2a20      	cmp	r2, #32
 8027012:	d8ef      	bhi.n	8026ff4 <__ssvfiscanf_r+0xec>
 8027014:	a101      	add	r1, pc, #4	; (adr r1, 802701c <__ssvfiscanf_r+0x114>)
 8027016:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802701a:	bf00      	nop
 802701c:	080270cf 	.word	0x080270cf
 8027020:	08026ff5 	.word	0x08026ff5
 8027024:	08026ff5 	.word	0x08026ff5
 8027028:	0802712d 	.word	0x0802712d
 802702c:	08026ff5 	.word	0x08026ff5
 8027030:	08026ff5 	.word	0x08026ff5
 8027034:	08026ff5 	.word	0x08026ff5
 8027038:	08026ff5 	.word	0x08026ff5
 802703c:	08026ff5 	.word	0x08026ff5
 8027040:	08026ff5 	.word	0x08026ff5
 8027044:	08026ff5 	.word	0x08026ff5
 8027048:	08027143 	.word	0x08027143
 802704c:	08027129 	.word	0x08027129
 8027050:	080270a7 	.word	0x080270a7
 8027054:	080270a7 	.word	0x080270a7
 8027058:	080270a7 	.word	0x080270a7
 802705c:	08026ff5 	.word	0x08026ff5
 8027060:	080270e5 	.word	0x080270e5
 8027064:	08026ff5 	.word	0x08026ff5
 8027068:	08026ff5 	.word	0x08026ff5
 802706c:	08026ff5 	.word	0x08026ff5
 8027070:	08026ff5 	.word	0x08026ff5
 8027074:	08027153 	.word	0x08027153
 8027078:	08027121 	.word	0x08027121
 802707c:	080270c7 	.word	0x080270c7
 8027080:	08026ff5 	.word	0x08026ff5
 8027084:	08026ff5 	.word	0x08026ff5
 8027088:	0802714f 	.word	0x0802714f
 802708c:	08026ff5 	.word	0x08026ff5
 8027090:	08027129 	.word	0x08027129
 8027094:	08026ff5 	.word	0x08026ff5
 8027098:	08026ff5 	.word	0x08026ff5
 802709c:	080270cf 	.word	0x080270cf
 80270a0:	3b45      	subs	r3, #69	; 0x45
 80270a2:	2b02      	cmp	r3, #2
 80270a4:	d8a6      	bhi.n	8026ff4 <__ssvfiscanf_r+0xec>
 80270a6:	2305      	movs	r3, #5
 80270a8:	e01f      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 80270aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80270ac:	4621      	mov	r1, r4
 80270ae:	4630      	mov	r0, r6
 80270b0:	4798      	blx	r3
 80270b2:	2800      	cmp	r0, #0
 80270b4:	f43f af68 	beq.w	8026f88 <__ssvfiscanf_r+0x80>
 80270b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80270ba:	2800      	cmp	r0, #0
 80270bc:	f040 808d 	bne.w	80271da <__ssvfiscanf_r+0x2d2>
 80270c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80270c4:	e08f      	b.n	80271e6 <__ssvfiscanf_r+0x2de>
 80270c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80270c8:	f042 0220 	orr.w	r2, r2, #32
 80270cc:	9241      	str	r2, [sp, #260]	; 0x104
 80270ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80270d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80270d4:	9241      	str	r2, [sp, #260]	; 0x104
 80270d6:	2210      	movs	r2, #16
 80270d8:	2b6f      	cmp	r3, #111	; 0x6f
 80270da:	9242      	str	r2, [sp, #264]	; 0x108
 80270dc:	bf34      	ite	cc
 80270de:	2303      	movcc	r3, #3
 80270e0:	2304      	movcs	r3, #4
 80270e2:	e002      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 80270e4:	2300      	movs	r3, #0
 80270e6:	9342      	str	r3, [sp, #264]	; 0x108
 80270e8:	2303      	movs	r3, #3
 80270ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80270ec:	6863      	ldr	r3, [r4, #4]
 80270ee:	2b00      	cmp	r3, #0
 80270f0:	dd3d      	ble.n	802716e <__ssvfiscanf_r+0x266>
 80270f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80270f4:	0659      	lsls	r1, r3, #25
 80270f6:	d404      	bmi.n	8027102 <__ssvfiscanf_r+0x1fa>
 80270f8:	6823      	ldr	r3, [r4, #0]
 80270fa:	781a      	ldrb	r2, [r3, #0]
 80270fc:	5cba      	ldrb	r2, [r7, r2]
 80270fe:	0712      	lsls	r2, r2, #28
 8027100:	d43c      	bmi.n	802717c <__ssvfiscanf_r+0x274>
 8027102:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8027104:	2b02      	cmp	r3, #2
 8027106:	dc4b      	bgt.n	80271a0 <__ssvfiscanf_r+0x298>
 8027108:	466b      	mov	r3, sp
 802710a:	4622      	mov	r2, r4
 802710c:	a941      	add	r1, sp, #260	; 0x104
 802710e:	4630      	mov	r0, r6
 8027110:	f000 f872 	bl	80271f8 <_scanf_chars>
 8027114:	2801      	cmp	r0, #1
 8027116:	d06a      	beq.n	80271ee <__ssvfiscanf_r+0x2e6>
 8027118:	2802      	cmp	r0, #2
 802711a:	f47f af1c 	bne.w	8026f56 <__ssvfiscanf_r+0x4e>
 802711e:	e7cb      	b.n	80270b8 <__ssvfiscanf_r+0x1b0>
 8027120:	2308      	movs	r3, #8
 8027122:	9342      	str	r3, [sp, #264]	; 0x108
 8027124:	2304      	movs	r3, #4
 8027126:	e7e0      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 8027128:	220a      	movs	r2, #10
 802712a:	e7d5      	b.n	80270d8 <__ssvfiscanf_r+0x1d0>
 802712c:	4629      	mov	r1, r5
 802712e:	4640      	mov	r0, r8
 8027130:	f000 f9b0 	bl	8027494 <__sccl>
 8027134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802713a:	9341      	str	r3, [sp, #260]	; 0x104
 802713c:	4605      	mov	r5, r0
 802713e:	2301      	movs	r3, #1
 8027140:	e7d3      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 8027142:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8027144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027148:	9341      	str	r3, [sp, #260]	; 0x104
 802714a:	2300      	movs	r3, #0
 802714c:	e7cd      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 802714e:	2302      	movs	r3, #2
 8027150:	e7cb      	b.n	80270ea <__ssvfiscanf_r+0x1e2>
 8027152:	9841      	ldr	r0, [sp, #260]	; 0x104
 8027154:	06c3      	lsls	r3, r0, #27
 8027156:	f53f aefe 	bmi.w	8026f56 <__ssvfiscanf_r+0x4e>
 802715a:	9b00      	ldr	r3, [sp, #0]
 802715c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802715e:	1d19      	adds	r1, r3, #4
 8027160:	9100      	str	r1, [sp, #0]
 8027162:	681b      	ldr	r3, [r3, #0]
 8027164:	07c0      	lsls	r0, r0, #31
 8027166:	bf4c      	ite	mi
 8027168:	801a      	strhmi	r2, [r3, #0]
 802716a:	601a      	strpl	r2, [r3, #0]
 802716c:	e6f3      	b.n	8026f56 <__ssvfiscanf_r+0x4e>
 802716e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027170:	4621      	mov	r1, r4
 8027172:	4630      	mov	r0, r6
 8027174:	4798      	blx	r3
 8027176:	2800      	cmp	r0, #0
 8027178:	d0bb      	beq.n	80270f2 <__ssvfiscanf_r+0x1ea>
 802717a:	e79d      	b.n	80270b8 <__ssvfiscanf_r+0x1b0>
 802717c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802717e:	3201      	adds	r2, #1
 8027180:	9245      	str	r2, [sp, #276]	; 0x114
 8027182:	6862      	ldr	r2, [r4, #4]
 8027184:	3a01      	subs	r2, #1
 8027186:	2a00      	cmp	r2, #0
 8027188:	6062      	str	r2, [r4, #4]
 802718a:	dd02      	ble.n	8027192 <__ssvfiscanf_r+0x28a>
 802718c:	3301      	adds	r3, #1
 802718e:	6023      	str	r3, [r4, #0]
 8027190:	e7b2      	b.n	80270f8 <__ssvfiscanf_r+0x1f0>
 8027192:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8027194:	4621      	mov	r1, r4
 8027196:	4630      	mov	r0, r6
 8027198:	4798      	blx	r3
 802719a:	2800      	cmp	r0, #0
 802719c:	d0ac      	beq.n	80270f8 <__ssvfiscanf_r+0x1f0>
 802719e:	e78b      	b.n	80270b8 <__ssvfiscanf_r+0x1b0>
 80271a0:	2b04      	cmp	r3, #4
 80271a2:	dc0f      	bgt.n	80271c4 <__ssvfiscanf_r+0x2bc>
 80271a4:	466b      	mov	r3, sp
 80271a6:	4622      	mov	r2, r4
 80271a8:	a941      	add	r1, sp, #260	; 0x104
 80271aa:	4630      	mov	r0, r6
 80271ac:	f000 f87e 	bl	80272ac <_scanf_i>
 80271b0:	e7b0      	b.n	8027114 <__ssvfiscanf_r+0x20c>
 80271b2:	bf00      	nop
 80271b4:	08026e55 	.word	0x08026e55
 80271b8:	08026ecf 	.word	0x08026ecf
 80271bc:	0802c89c 	.word	0x0802c89c
 80271c0:	0802ced2 	.word	0x0802ced2
 80271c4:	4b0b      	ldr	r3, [pc, #44]	; (80271f4 <__ssvfiscanf_r+0x2ec>)
 80271c6:	2b00      	cmp	r3, #0
 80271c8:	f43f aec5 	beq.w	8026f56 <__ssvfiscanf_r+0x4e>
 80271cc:	466b      	mov	r3, sp
 80271ce:	4622      	mov	r2, r4
 80271d0:	a941      	add	r1, sp, #260	; 0x104
 80271d2:	4630      	mov	r0, r6
 80271d4:	f3af 8000 	nop.w
 80271d8:	e79c      	b.n	8027114 <__ssvfiscanf_r+0x20c>
 80271da:	89a3      	ldrh	r3, [r4, #12]
 80271dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80271e0:	bf18      	it	ne
 80271e2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80271e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80271ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80271ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80271f0:	e7f9      	b.n	80271e6 <__ssvfiscanf_r+0x2de>
 80271f2:	bf00      	nop
 80271f4:	00000000 	.word	0x00000000

080271f8 <_scanf_chars>:
 80271f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80271fc:	4615      	mov	r5, r2
 80271fe:	688a      	ldr	r2, [r1, #8]
 8027200:	4680      	mov	r8, r0
 8027202:	460c      	mov	r4, r1
 8027204:	b932      	cbnz	r2, 8027214 <_scanf_chars+0x1c>
 8027206:	698a      	ldr	r2, [r1, #24]
 8027208:	2a00      	cmp	r2, #0
 802720a:	bf0c      	ite	eq
 802720c:	2201      	moveq	r2, #1
 802720e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8027212:	608a      	str	r2, [r1, #8]
 8027214:	6822      	ldr	r2, [r4, #0]
 8027216:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80272a8 <_scanf_chars+0xb0>
 802721a:	06d1      	lsls	r1, r2, #27
 802721c:	bf5f      	itttt	pl
 802721e:	681a      	ldrpl	r2, [r3, #0]
 8027220:	1d11      	addpl	r1, r2, #4
 8027222:	6019      	strpl	r1, [r3, #0]
 8027224:	6816      	ldrpl	r6, [r2, #0]
 8027226:	2700      	movs	r7, #0
 8027228:	69a0      	ldr	r0, [r4, #24]
 802722a:	b188      	cbz	r0, 8027250 <_scanf_chars+0x58>
 802722c:	2801      	cmp	r0, #1
 802722e:	d107      	bne.n	8027240 <_scanf_chars+0x48>
 8027230:	682a      	ldr	r2, [r5, #0]
 8027232:	7811      	ldrb	r1, [r2, #0]
 8027234:	6962      	ldr	r2, [r4, #20]
 8027236:	5c52      	ldrb	r2, [r2, r1]
 8027238:	b952      	cbnz	r2, 8027250 <_scanf_chars+0x58>
 802723a:	2f00      	cmp	r7, #0
 802723c:	d031      	beq.n	80272a2 <_scanf_chars+0xaa>
 802723e:	e022      	b.n	8027286 <_scanf_chars+0x8e>
 8027240:	2802      	cmp	r0, #2
 8027242:	d120      	bne.n	8027286 <_scanf_chars+0x8e>
 8027244:	682b      	ldr	r3, [r5, #0]
 8027246:	781b      	ldrb	r3, [r3, #0]
 8027248:	f819 3003 	ldrb.w	r3, [r9, r3]
 802724c:	071b      	lsls	r3, r3, #28
 802724e:	d41a      	bmi.n	8027286 <_scanf_chars+0x8e>
 8027250:	6823      	ldr	r3, [r4, #0]
 8027252:	06da      	lsls	r2, r3, #27
 8027254:	bf5e      	ittt	pl
 8027256:	682b      	ldrpl	r3, [r5, #0]
 8027258:	781b      	ldrbpl	r3, [r3, #0]
 802725a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802725e:	682a      	ldr	r2, [r5, #0]
 8027260:	686b      	ldr	r3, [r5, #4]
 8027262:	3201      	adds	r2, #1
 8027264:	602a      	str	r2, [r5, #0]
 8027266:	68a2      	ldr	r2, [r4, #8]
 8027268:	3b01      	subs	r3, #1
 802726a:	3a01      	subs	r2, #1
 802726c:	606b      	str	r3, [r5, #4]
 802726e:	3701      	adds	r7, #1
 8027270:	60a2      	str	r2, [r4, #8]
 8027272:	b142      	cbz	r2, 8027286 <_scanf_chars+0x8e>
 8027274:	2b00      	cmp	r3, #0
 8027276:	dcd7      	bgt.n	8027228 <_scanf_chars+0x30>
 8027278:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802727c:	4629      	mov	r1, r5
 802727e:	4640      	mov	r0, r8
 8027280:	4798      	blx	r3
 8027282:	2800      	cmp	r0, #0
 8027284:	d0d0      	beq.n	8027228 <_scanf_chars+0x30>
 8027286:	6823      	ldr	r3, [r4, #0]
 8027288:	f013 0310 	ands.w	r3, r3, #16
 802728c:	d105      	bne.n	802729a <_scanf_chars+0xa2>
 802728e:	68e2      	ldr	r2, [r4, #12]
 8027290:	3201      	adds	r2, #1
 8027292:	60e2      	str	r2, [r4, #12]
 8027294:	69a2      	ldr	r2, [r4, #24]
 8027296:	b102      	cbz	r2, 802729a <_scanf_chars+0xa2>
 8027298:	7033      	strb	r3, [r6, #0]
 802729a:	6923      	ldr	r3, [r4, #16]
 802729c:	443b      	add	r3, r7
 802729e:	6123      	str	r3, [r4, #16]
 80272a0:	2000      	movs	r0, #0
 80272a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80272a6:	bf00      	nop
 80272a8:	0802c89c 	.word	0x0802c89c

080272ac <_scanf_i>:
 80272ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272b0:	4698      	mov	r8, r3
 80272b2:	4b74      	ldr	r3, [pc, #464]	; (8027484 <_scanf_i+0x1d8>)
 80272b4:	460c      	mov	r4, r1
 80272b6:	4682      	mov	sl, r0
 80272b8:	4616      	mov	r6, r2
 80272ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80272be:	b087      	sub	sp, #28
 80272c0:	ab03      	add	r3, sp, #12
 80272c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80272c6:	4b70      	ldr	r3, [pc, #448]	; (8027488 <_scanf_i+0x1dc>)
 80272c8:	69a1      	ldr	r1, [r4, #24]
 80272ca:	4a70      	ldr	r2, [pc, #448]	; (802748c <_scanf_i+0x1e0>)
 80272cc:	2903      	cmp	r1, #3
 80272ce:	bf18      	it	ne
 80272d0:	461a      	movne	r2, r3
 80272d2:	68a3      	ldr	r3, [r4, #8]
 80272d4:	9201      	str	r2, [sp, #4]
 80272d6:	1e5a      	subs	r2, r3, #1
 80272d8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80272dc:	bf88      	it	hi
 80272de:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80272e2:	4627      	mov	r7, r4
 80272e4:	bf82      	ittt	hi
 80272e6:	eb03 0905 	addhi.w	r9, r3, r5
 80272ea:	f240 135d 	movwhi	r3, #349	; 0x15d
 80272ee:	60a3      	strhi	r3, [r4, #8]
 80272f0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80272f4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80272f8:	bf98      	it	ls
 80272fa:	f04f 0900 	movls.w	r9, #0
 80272fe:	6023      	str	r3, [r4, #0]
 8027300:	463d      	mov	r5, r7
 8027302:	f04f 0b00 	mov.w	fp, #0
 8027306:	6831      	ldr	r1, [r6, #0]
 8027308:	ab03      	add	r3, sp, #12
 802730a:	7809      	ldrb	r1, [r1, #0]
 802730c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8027310:	2202      	movs	r2, #2
 8027312:	f7d8 ff6d 	bl	80001f0 <memchr>
 8027316:	b328      	cbz	r0, 8027364 <_scanf_i+0xb8>
 8027318:	f1bb 0f01 	cmp.w	fp, #1
 802731c:	d159      	bne.n	80273d2 <_scanf_i+0x126>
 802731e:	6862      	ldr	r2, [r4, #4]
 8027320:	b92a      	cbnz	r2, 802732e <_scanf_i+0x82>
 8027322:	6822      	ldr	r2, [r4, #0]
 8027324:	2308      	movs	r3, #8
 8027326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802732a:	6063      	str	r3, [r4, #4]
 802732c:	6022      	str	r2, [r4, #0]
 802732e:	6822      	ldr	r2, [r4, #0]
 8027330:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8027334:	6022      	str	r2, [r4, #0]
 8027336:	68a2      	ldr	r2, [r4, #8]
 8027338:	1e51      	subs	r1, r2, #1
 802733a:	60a1      	str	r1, [r4, #8]
 802733c:	b192      	cbz	r2, 8027364 <_scanf_i+0xb8>
 802733e:	6832      	ldr	r2, [r6, #0]
 8027340:	1c51      	adds	r1, r2, #1
 8027342:	6031      	str	r1, [r6, #0]
 8027344:	7812      	ldrb	r2, [r2, #0]
 8027346:	f805 2b01 	strb.w	r2, [r5], #1
 802734a:	6872      	ldr	r2, [r6, #4]
 802734c:	3a01      	subs	r2, #1
 802734e:	2a00      	cmp	r2, #0
 8027350:	6072      	str	r2, [r6, #4]
 8027352:	dc07      	bgt.n	8027364 <_scanf_i+0xb8>
 8027354:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8027358:	4631      	mov	r1, r6
 802735a:	4650      	mov	r0, sl
 802735c:	4790      	blx	r2
 802735e:	2800      	cmp	r0, #0
 8027360:	f040 8085 	bne.w	802746e <_scanf_i+0x1c2>
 8027364:	f10b 0b01 	add.w	fp, fp, #1
 8027368:	f1bb 0f03 	cmp.w	fp, #3
 802736c:	d1cb      	bne.n	8027306 <_scanf_i+0x5a>
 802736e:	6863      	ldr	r3, [r4, #4]
 8027370:	b90b      	cbnz	r3, 8027376 <_scanf_i+0xca>
 8027372:	230a      	movs	r3, #10
 8027374:	6063      	str	r3, [r4, #4]
 8027376:	6863      	ldr	r3, [r4, #4]
 8027378:	4945      	ldr	r1, [pc, #276]	; (8027490 <_scanf_i+0x1e4>)
 802737a:	6960      	ldr	r0, [r4, #20]
 802737c:	1ac9      	subs	r1, r1, r3
 802737e:	f000 f889 	bl	8027494 <__sccl>
 8027382:	f04f 0b00 	mov.w	fp, #0
 8027386:	68a3      	ldr	r3, [r4, #8]
 8027388:	6822      	ldr	r2, [r4, #0]
 802738a:	2b00      	cmp	r3, #0
 802738c:	d03d      	beq.n	802740a <_scanf_i+0x15e>
 802738e:	6831      	ldr	r1, [r6, #0]
 8027390:	6960      	ldr	r0, [r4, #20]
 8027392:	f891 c000 	ldrb.w	ip, [r1]
 8027396:	f810 000c 	ldrb.w	r0, [r0, ip]
 802739a:	2800      	cmp	r0, #0
 802739c:	d035      	beq.n	802740a <_scanf_i+0x15e>
 802739e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80273a2:	d124      	bne.n	80273ee <_scanf_i+0x142>
 80273a4:	0510      	lsls	r0, r2, #20
 80273a6:	d522      	bpl.n	80273ee <_scanf_i+0x142>
 80273a8:	f10b 0b01 	add.w	fp, fp, #1
 80273ac:	f1b9 0f00 	cmp.w	r9, #0
 80273b0:	d003      	beq.n	80273ba <_scanf_i+0x10e>
 80273b2:	3301      	adds	r3, #1
 80273b4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80273b8:	60a3      	str	r3, [r4, #8]
 80273ba:	6873      	ldr	r3, [r6, #4]
 80273bc:	3b01      	subs	r3, #1
 80273be:	2b00      	cmp	r3, #0
 80273c0:	6073      	str	r3, [r6, #4]
 80273c2:	dd1b      	ble.n	80273fc <_scanf_i+0x150>
 80273c4:	6833      	ldr	r3, [r6, #0]
 80273c6:	3301      	adds	r3, #1
 80273c8:	6033      	str	r3, [r6, #0]
 80273ca:	68a3      	ldr	r3, [r4, #8]
 80273cc:	3b01      	subs	r3, #1
 80273ce:	60a3      	str	r3, [r4, #8]
 80273d0:	e7d9      	b.n	8027386 <_scanf_i+0xda>
 80273d2:	f1bb 0f02 	cmp.w	fp, #2
 80273d6:	d1ae      	bne.n	8027336 <_scanf_i+0x8a>
 80273d8:	6822      	ldr	r2, [r4, #0]
 80273da:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80273de:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80273e2:	d1bf      	bne.n	8027364 <_scanf_i+0xb8>
 80273e4:	2310      	movs	r3, #16
 80273e6:	6063      	str	r3, [r4, #4]
 80273e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80273ec:	e7a2      	b.n	8027334 <_scanf_i+0x88>
 80273ee:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80273f2:	6022      	str	r2, [r4, #0]
 80273f4:	780b      	ldrb	r3, [r1, #0]
 80273f6:	f805 3b01 	strb.w	r3, [r5], #1
 80273fa:	e7de      	b.n	80273ba <_scanf_i+0x10e>
 80273fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8027400:	4631      	mov	r1, r6
 8027402:	4650      	mov	r0, sl
 8027404:	4798      	blx	r3
 8027406:	2800      	cmp	r0, #0
 8027408:	d0df      	beq.n	80273ca <_scanf_i+0x11e>
 802740a:	6823      	ldr	r3, [r4, #0]
 802740c:	05d9      	lsls	r1, r3, #23
 802740e:	d50d      	bpl.n	802742c <_scanf_i+0x180>
 8027410:	42bd      	cmp	r5, r7
 8027412:	d909      	bls.n	8027428 <_scanf_i+0x17c>
 8027414:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8027418:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802741c:	4632      	mov	r2, r6
 802741e:	4650      	mov	r0, sl
 8027420:	4798      	blx	r3
 8027422:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8027426:	464d      	mov	r5, r9
 8027428:	42bd      	cmp	r5, r7
 802742a:	d028      	beq.n	802747e <_scanf_i+0x1d2>
 802742c:	6822      	ldr	r2, [r4, #0]
 802742e:	f012 0210 	ands.w	r2, r2, #16
 8027432:	d113      	bne.n	802745c <_scanf_i+0x1b0>
 8027434:	702a      	strb	r2, [r5, #0]
 8027436:	6863      	ldr	r3, [r4, #4]
 8027438:	9e01      	ldr	r6, [sp, #4]
 802743a:	4639      	mov	r1, r7
 802743c:	4650      	mov	r0, sl
 802743e:	47b0      	blx	r6
 8027440:	f8d8 3000 	ldr.w	r3, [r8]
 8027444:	6821      	ldr	r1, [r4, #0]
 8027446:	1d1a      	adds	r2, r3, #4
 8027448:	f8c8 2000 	str.w	r2, [r8]
 802744c:	f011 0f20 	tst.w	r1, #32
 8027450:	681b      	ldr	r3, [r3, #0]
 8027452:	d00f      	beq.n	8027474 <_scanf_i+0x1c8>
 8027454:	6018      	str	r0, [r3, #0]
 8027456:	68e3      	ldr	r3, [r4, #12]
 8027458:	3301      	adds	r3, #1
 802745a:	60e3      	str	r3, [r4, #12]
 802745c:	6923      	ldr	r3, [r4, #16]
 802745e:	1bed      	subs	r5, r5, r7
 8027460:	445d      	add	r5, fp
 8027462:	442b      	add	r3, r5
 8027464:	6123      	str	r3, [r4, #16]
 8027466:	2000      	movs	r0, #0
 8027468:	b007      	add	sp, #28
 802746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802746e:	f04f 0b00 	mov.w	fp, #0
 8027472:	e7ca      	b.n	802740a <_scanf_i+0x15e>
 8027474:	07ca      	lsls	r2, r1, #31
 8027476:	bf4c      	ite	mi
 8027478:	8018      	strhmi	r0, [r3, #0]
 802747a:	6018      	strpl	r0, [r3, #0]
 802747c:	e7eb      	b.n	8027456 <_scanf_i+0x1aa>
 802747e:	2001      	movs	r0, #1
 8027480:	e7f2      	b.n	8027468 <_scanf_i+0x1bc>
 8027482:	bf00      	nop
 8027484:	0802bee4 	.word	0x0802bee4
 8027488:	080264d9 	.word	0x080264d9
 802748c:	08022ded 	.word	0x08022ded
 8027490:	0802cef7 	.word	0x0802cef7

08027494 <__sccl>:
 8027494:	b570      	push	{r4, r5, r6, lr}
 8027496:	780b      	ldrb	r3, [r1, #0]
 8027498:	4604      	mov	r4, r0
 802749a:	2b5e      	cmp	r3, #94	; 0x5e
 802749c:	bf0b      	itete	eq
 802749e:	784b      	ldrbeq	r3, [r1, #1]
 80274a0:	1c4a      	addne	r2, r1, #1
 80274a2:	1c8a      	addeq	r2, r1, #2
 80274a4:	2100      	movne	r1, #0
 80274a6:	bf08      	it	eq
 80274a8:	2101      	moveq	r1, #1
 80274aa:	3801      	subs	r0, #1
 80274ac:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80274b0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80274b4:	42a8      	cmp	r0, r5
 80274b6:	d1fb      	bne.n	80274b0 <__sccl+0x1c>
 80274b8:	b90b      	cbnz	r3, 80274be <__sccl+0x2a>
 80274ba:	1e50      	subs	r0, r2, #1
 80274bc:	bd70      	pop	{r4, r5, r6, pc}
 80274be:	f081 0101 	eor.w	r1, r1, #1
 80274c2:	54e1      	strb	r1, [r4, r3]
 80274c4:	4610      	mov	r0, r2
 80274c6:	4602      	mov	r2, r0
 80274c8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80274cc:	2d2d      	cmp	r5, #45	; 0x2d
 80274ce:	d005      	beq.n	80274dc <__sccl+0x48>
 80274d0:	2d5d      	cmp	r5, #93	; 0x5d
 80274d2:	d016      	beq.n	8027502 <__sccl+0x6e>
 80274d4:	2d00      	cmp	r5, #0
 80274d6:	d0f1      	beq.n	80274bc <__sccl+0x28>
 80274d8:	462b      	mov	r3, r5
 80274da:	e7f2      	b.n	80274c2 <__sccl+0x2e>
 80274dc:	7846      	ldrb	r6, [r0, #1]
 80274de:	2e5d      	cmp	r6, #93	; 0x5d
 80274e0:	d0fa      	beq.n	80274d8 <__sccl+0x44>
 80274e2:	42b3      	cmp	r3, r6
 80274e4:	dcf8      	bgt.n	80274d8 <__sccl+0x44>
 80274e6:	3002      	adds	r0, #2
 80274e8:	461a      	mov	r2, r3
 80274ea:	3201      	adds	r2, #1
 80274ec:	4296      	cmp	r6, r2
 80274ee:	54a1      	strb	r1, [r4, r2]
 80274f0:	dcfb      	bgt.n	80274ea <__sccl+0x56>
 80274f2:	1af2      	subs	r2, r6, r3
 80274f4:	3a01      	subs	r2, #1
 80274f6:	1c5d      	adds	r5, r3, #1
 80274f8:	42b3      	cmp	r3, r6
 80274fa:	bfa8      	it	ge
 80274fc:	2200      	movge	r2, #0
 80274fe:	18ab      	adds	r3, r5, r2
 8027500:	e7e1      	b.n	80274c6 <__sccl+0x32>
 8027502:	4610      	mov	r0, r2
 8027504:	e7da      	b.n	80274bc <__sccl+0x28>

08027506 <__submore>:
 8027506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802750a:	460c      	mov	r4, r1
 802750c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802750e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027512:	4299      	cmp	r1, r3
 8027514:	d11d      	bne.n	8027552 <__submore+0x4c>
 8027516:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802751a:	f7fb fb1b 	bl	8022b54 <_malloc_r>
 802751e:	b918      	cbnz	r0, 8027528 <__submore+0x22>
 8027520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802752c:	63a3      	str	r3, [r4, #56]	; 0x38
 802752e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8027532:	6360      	str	r0, [r4, #52]	; 0x34
 8027534:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8027538:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802753c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8027540:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8027544:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8027548:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802754c:	6020      	str	r0, [r4, #0]
 802754e:	2000      	movs	r0, #0
 8027550:	e7e8      	b.n	8027524 <__submore+0x1e>
 8027552:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027554:	0077      	lsls	r7, r6, #1
 8027556:	463a      	mov	r2, r7
 8027558:	f7ff fc40 	bl	8026ddc <_realloc_r>
 802755c:	4605      	mov	r5, r0
 802755e:	2800      	cmp	r0, #0
 8027560:	d0de      	beq.n	8027520 <__submore+0x1a>
 8027562:	eb00 0806 	add.w	r8, r0, r6
 8027566:	4601      	mov	r1, r0
 8027568:	4632      	mov	r2, r6
 802756a:	4640      	mov	r0, r8
 802756c:	f7fd fc9d 	bl	8024eaa <memcpy>
 8027570:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8027574:	f8c4 8000 	str.w	r8, [r4]
 8027578:	e7e9      	b.n	802754e <__submore+0x48>

0802757a <_malloc_usable_size_r>:
 802757a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802757e:	1f18      	subs	r0, r3, #4
 8027580:	2b00      	cmp	r3, #0
 8027582:	bfbc      	itt	lt
 8027584:	580b      	ldrlt	r3, [r1, r0]
 8027586:	18c0      	addlt	r0, r0, r3
 8027588:	4770      	bx	lr
	...

0802758c <_init>:
 802758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802758e:	bf00      	nop
 8027590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027592:	bc08      	pop	{r3}
 8027594:	469e      	mov	lr, r3
 8027596:	4770      	bx	lr

08027598 <_fini>:
 8027598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802759a:	bf00      	nop
 802759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802759e:	bc08      	pop	{r3}
 80275a0:	469e      	mov	lr, r3
 80275a2:	4770      	bx	lr
