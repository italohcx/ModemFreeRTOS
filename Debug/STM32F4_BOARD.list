
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001facc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d28  0801fc5c  0801fc5c  0002fc5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024984  08024984  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  08024984  08024984  00034984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802498c  0802498c  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802498c  0802498c  0003498c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024990  08024990  00034990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08024994  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          0000cb10  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000cba0  2000cba0  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004245b  00000000  00000000  00040103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000989c  00000000  00000000  0008255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031f8  00000000  00000000  0008be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000291f  00000000  00000000  0008eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000370b8  00000000  00000000  00091917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048eba  00000000  00000000  000c89cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f9df2  00000000  00000000  00111889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000dc7c  00000000  00000000  0020b67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  002192f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fc44 	.word	0x0801fc44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0801fc44 	.word	0x0801fc44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b984 	b.w	80005a0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	460d      	mov	r5, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	460f      	mov	r7, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4694      	mov	ip, r2
 80002ec:	d965      	bls.n	80003ba <__udivmoddi4+0xe2>
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	b143      	cbz	r3, 8000306 <__udivmoddi4+0x2e>
 80002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	409c      	lsls	r4, r3
 8000306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030a:	fa1f f58c 	uxth.w	r5, ip
 800030e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb0e 7711 	mls	r7, lr, r1, r7
 8000318:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	4290      	cmp	r0, r2
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x62>
 8000324:	eb1c 0202 	adds.w	r2, ip, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800032c:	f080 811c 	bcs.w	8000568 <__udivmoddi4+0x290>
 8000330:	4290      	cmp	r0, r2
 8000332:	f240 8119 	bls.w	8000568 <__udivmoddi4+0x290>
 8000336:	3902      	subs	r1, #2
 8000338:	4462      	add	r2, ip
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	42a5      	cmp	r5, r4
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x90>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x294>
 800035e:	42a5      	cmp	r5, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x294>
 8000364:	4464      	add	r4, ip
 8000366:	3802      	subs	r0, #2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0xa2>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xbc>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80ed 	beq.w	8000562 <__udivmoddi4+0x28a>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d149      	bne.n	8000430 <__udivmoddi4+0x158>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d302      	bcc.n	80003a6 <__udivmoddi4+0xce>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	f200 80f8 	bhi.w	8000596 <__udivmoddi4+0x2be>
 80003a6:	1a84      	subs	r4, r0, r2
 80003a8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	4617      	mov	r7, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0e2      	beq.n	800037a <__udivmoddi4+0xa2>
 80003b4:	e9c6 4700 	strd	r4, r7, [r6]
 80003b8:	e7df      	b.n	800037a <__udivmoddi4+0xa2>
 80003ba:	b902      	cbnz	r2, 80003be <__udivmoddi4+0xe6>
 80003bc:	deff      	udf	#255	; 0xff
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003c8:	1a8a      	subs	r2, r1, r2
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2101      	movs	r1, #1
 80003d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d8:	fb07 2015 	mls	r0, r7, r5, r2
 80003dc:	0c22      	lsrs	r2, r4, #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb0e f005 	mul.w	r0, lr, r5
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ea:	eb1c 0202 	adds.w	r2, ip, r2
 80003ee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4290      	cmp	r0, r2
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2b8>
 80003fa:	4645      	mov	r5, r8
 80003fc:	1a12      	subs	r2, r2, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x14e>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x14c>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c2>
 8000424:	4610      	mov	r0, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x98>
 8000430:	f1c1 0720 	rsb	r7, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa05 f401 	lsl.w	r4, r5, r1
 8000442:	fa20 f307 	lsr.w	r3, r0, r7
 8000446:	40fd      	lsrs	r5, r7
 8000448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000452:	fa1f fe8c 	uxth.w	lr, ip
 8000456:	fb09 5518 	mls	r5, r9, r8, r5
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000460:	fb08 f50e 	mul.w	r5, r8, lr
 8000464:	42a5      	cmp	r5, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	fa00 f001 	lsl.w	r0, r0, r1
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2b4>
 800047c:	42a5      	cmp	r5, r4
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2b4>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4464      	add	r4, ip
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	b29d      	uxth	r5, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	fb03 fe0e 	mul.w	lr, r3, lr
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2ac>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2ac>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ba:	eba4 040e 	sub.w	r4, r4, lr
 80004be:	42ac      	cmp	r4, r5
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46ae      	mov	lr, r5
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x29c>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x298>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x208>
 80004ca:	ebb0 0208 	subs.w	r2, r0, r8
 80004ce:	eb64 040e 	sbc.w	r4, r4, lr
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40ca      	lsrs	r2, r1
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	4317      	orrs	r7, r2
 80004dc:	e9c6 7400 	strd	r7, r4, [r6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1c3 0120 	rsb	r1, r3, #32
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	fa20 f201 	lsr.w	r2, r0, r1
 80004f4:	fa25 f101 	lsr.w	r1, r5, r1
 80004f8:	409d      	lsls	r5, r3
 80004fa:	432a      	orrs	r2, r5
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1510 	mls	r5, r7, r0, r1
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f50e 	mul.w	r5, r0, lr
 8000516:	428d      	cmp	r5, r1
 8000518:	fa04 f403 	lsl.w	r4, r4, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x258>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b0>
 8000528:	428d      	cmp	r5, r1
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b0>
 800052c:	3802      	subs	r0, #2
 800052e:	4461      	add	r1, ip
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5f7 	udiv	r5, r1, r7
 8000538:	fb07 1115 	mls	r1, r7, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f10e 	mul.w	r1, r5, lr
 8000544:	4291      	cmp	r1, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x282>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2a8>
 8000552:	4291      	cmp	r1, r2
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2a8>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000562:	4631      	mov	r1, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xa2>
 8000568:	4639      	mov	r1, r7
 800056a:	e6e6      	b.n	800033a <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x90>
 8000570:	4548      	cmp	r0, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800057c:	3b01      	subs	r3, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f0>
 8000580:	4645      	mov	r5, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x282>
 8000584:	462b      	mov	r3, r5
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x258>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b0>
 8000590:	3d02      	subs	r5, #2
 8000592:	4462      	add	r2, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x124>
 8000596:	4608      	mov	r0, r1
 8000598:	e70a      	b.n	80003b0 <__udivmoddi4+0xd8>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x14e>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 80005aa:	4833      	ldr	r0, [pc, #204]	; (8000678 <FileSystemInit+0xd4>)
 80005ac:	f01e fca0 	bl	801eef0 <puts>

	  int status = lfs_storage_init(&cfg);
 80005b0:	4832      	ldr	r0, [pc, #200]	; (800067c <FileSystemInit+0xd8>)
 80005b2:	f000 fb49 	bl	8000c48 <lfs_storage_init>
 80005b6:	6078      	str	r0, [r7, #4]

	  if (!status)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d105      	bne.n	80005ca <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 80005be:	6879      	ldr	r1, [r7, #4]
 80005c0:	482f      	ldr	r0, [pc, #188]	; (8000680 <FileSystemInit+0xdc>)
 80005c2:	f01e fc2f 	bl	801ee24 <iprintf>
	    return status;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	e052      	b.n	8000670 <FileSystemInit+0xcc>
	  }

	  LOG2("OK");
 80005ca:	482e      	ldr	r0, [pc, #184]	; (8000684 <FileSystemInit+0xe0>)
 80005cc:	f01e fc90 	bl	801eef0 <puts>

  lfs_get_default_config(&cfg);
 80005d0:	482a      	ldr	r0, [pc, #168]	; (800067c <FileSystemInit+0xd8>)
 80005d2:	f000 fb23 	bl	8000c1c <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	e016      	b.n	800060a <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 80005dc:	4a2a      	ldr	r2, [pc, #168]	; (8000688 <FileSystemInit+0xe4>)
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	2158      	movs	r1, #88	; 0x58
 80005e2:	fb01 f303 	mul.w	r3, r1, r3
 80005e6:	4413      	add	r3, r2
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2258      	movs	r2, #88	; 0x58
 80005f0:	fb02 f303 	mul.w	r3, r2, r3
 80005f4:	4a24      	ldr	r2, [pc, #144]	; (8000688 <FileSystemInit+0xe4>)
 80005f6:	4413      	add	r3, r2
 80005f8:	3304      	adds	r3, #4
 80005fa:	2254      	movs	r2, #84	; 0x54
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f01e fd66 	bl	801f0d0 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	2b03      	cmp	r3, #3
 800060e:	dde5      	ble.n	80005dc <FileSystemInit+0x38>
  }


  LOG2("Montando sistema de arquivos ... ");
 8000610:	481e      	ldr	r0, [pc, #120]	; (800068c <FileSystemInit+0xe8>)
 8000612:	f01e fc6d 	bl	801eef0 <puts>

  status = lfs_mount(&lfs, &cfg);
 8000616:	4919      	ldr	r1, [pc, #100]	; (800067c <FileSystemInit+0xd8>)
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <FileSystemInit+0xec>)
 800061a:	f00e f818 	bl	800e64e <lfs_mount>
 800061e:	6078      	str	r0, [r7, #4]
  if (status)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d016      	beq.n	8000654 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 8000626:	6879      	ldr	r1, [r7, #4]
 8000628:	4815      	ldr	r0, [pc, #84]	; (8000680 <FileSystemInit+0xdc>)
 800062a:	f01e fbfb 	bl	801ee24 <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000634:	d10e      	bne.n	8000654 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Formatando sistema de arquivos ... ");
 8000636:	4817      	ldr	r0, [pc, #92]	; (8000694 <FileSystemInit+0xf0>)
 8000638:	f01e fc5a 	bl	801eef0 <puts>
      status = lfs_format(&lfs, &cfg);
 800063c:	490f      	ldr	r1, [pc, #60]	; (800067c <FileSystemInit+0xd8>)
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <FileSystemInit+0xec>)
 8000640:	f00d ffe8 	bl	800e614 <lfs_format>
 8000644:	6078      	str	r0, [r7, #4]
      if (status)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <FileSystemInit+0xf4>)
 8000650:	f01e fbe8 	bl	801ee24 <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d109      	bne.n	800066e <FileSystemInit+0xca>
  {
	  LOG2("OK");
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <FileSystemInit+0xe0>)
 800065c:	f01e fc48 	bl	801eef0 <puts>
    lfs_mounted = 1;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <FileSystemInit+0xf8>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 8000666:	490e      	ldr	r1, [pc, #56]	; (80006a0 <FileSystemInit+0xfc>)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <FileSystemInit+0xec>)
 800066a:	f00e f80d 	bl	800e688 <lfs_mkdir>

  }

  return status;
 800066e:	687b      	ldr	r3, [r7, #4]
}
 8000670:	4618      	mov	r0, r3
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	0801fc5c 	.word	0x0801fc5c
 800067c:	20009080 	.word	0x20009080
 8000680:	0801fc80 	.word	0x0801fc80
 8000684:	0801fc8c 	.word	0x0801fc8c
 8000688:	200000ac 	.word	0x200000ac
 800068c:	0801fc90 	.word	0x0801fc90
 8000690:	20009008 	.word	0x20009008
 8000694:	0801fcb4 	.word	0x0801fcb4
 8000698:	0801fcdc 	.word	0x0801fcdc
 800069c:	20009004 	.word	0x20009004
 80006a0:	0801fce8 	.word	0x0801fce8

080006a4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4a07      	ldr	r2, [pc, #28]	; (80006d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80006b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4a06      	ldr	r2, [pc, #24]	; (80006d4 <vApplicationGetIdleTaskMemory+0x30>)
 80006ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000214 	.word	0x20000214
 80006d4:	200002b4 	.word	0x200002b4

080006d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d8:	b5b0      	push	{r4, r5, r7, lr}
 80006da:	b08e      	sub	sp, #56	; 0x38
 80006dc:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_FREERTOS_Init+0x58>)
 80006e0:	f107 041c 	add.w	r4, r7, #28
 80006e4:	461d      	mov	r5, r3
 80006e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f005 fc35 	bl	8005f68 <osThreadCreate>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a0c      	ldr	r2, [pc, #48]	; (8000734 <MX_FREERTOS_Init+0x5c>)
 8000702:	6013      	str	r3, [r2, #0]

  /* definition and creation of tcpServerTask */
  osThreadDef(tcpServerTask, TcpSeverTask, osPriorityBelowNormal, 0, 2048);
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_FREERTOS_Init+0x60>)
 8000706:	463c      	mov	r4, r7
 8000708:	461d      	mov	r5, r3
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000712:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 tcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8000716:	463b      	mov	r3, r7
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 fc24 	bl	8005f68 <osThreadCreate>
 8000720:	4603      	mov	r3, r0
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <MX_FREERTOS_Init+0x64>)
 8000724:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000726:	bf00      	nop
 8000728:	3738      	adds	r7, #56	; 0x38
 800072a:	46bd      	mov	sp, r7
 800072c:	bdb0      	pop	{r4, r5, r7, pc}
 800072e:	bf00      	nop
 8000730:	08020038 	.word	0x08020038
 8000734:	2000020c 	.word	0x2000020c
 8000738:	08020064 	.word	0x08020064
 800073c:	20000210 	.word	0x20000210

08000740 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000748:	f004 feba 	bl	80054c0 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f005 fc57 	bl	8006000 <osDelay>
 8000752:	e7fb      	b.n	800074c <StartDefaultTask+0xc>

08000754 <TcpSeverTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TcpSeverTask */
void TcpSeverTask(void const *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a6      	sub	sp, #152	; 0x98
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	struct netbuf *buf;
	char msg[100];
	uint16_t port = 22000;
 800075c:	f245 53f0 	movw	r3, #22000	; 0x55f0
 8000760:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    bool enable_keepalive = true;
 8000764:	2301      	movs	r3, #1
 8000766:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2010      	movs	r0, #16
 8000770:	f00e f80a 	bl	800e788 <netconn_new_with_proto_and_callback>
 8000774:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8000778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <TcpSeverTask+0x34>
	{
		/* Handle error */
		printf("Failed to create TCP connection handle\r\n");
 8000780:	485c      	ldr	r0, [pc, #368]	; (80008f4 <TcpSeverTask+0x1a0>)
 8000782:	f01e fbb5 	bl	801eef0 <puts>
		return;
 8000786:	e0b1      	b.n	80008ec <TcpSeverTask+0x198>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, port) != ERR_OK) {
 8000788:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800078c:	461a      	mov	r2, r3
 800078e:	495a      	ldr	r1, [pc, #360]	; (80008f8 <TcpSeverTask+0x1a4>)
 8000790:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000794:	f00e f8b2 	bl	800e8fc <netconn_bind>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d00a      	beq.n	80007b4 <TcpSeverTask+0x60>
		/* Handle error */
		printf("Failed to bind to port %d\r\n", port);
 800079e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80007a2:	4619      	mov	r1, r3
 80007a4:	4855      	ldr	r0, [pc, #340]	; (80008fc <TcpSeverTask+0x1a8>)
 80007a6:	f01e fb3d 	bl	801ee24 <iprintf>
		netconn_delete(conn);
 80007aa:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80007ae:	f00e f889 	bl	800e8c4 <netconn_delete>
		return;
 80007b2:	e09b      	b.n	80008ec <TcpSeverTask+0x198>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK) {
 80007b4:	21ff      	movs	r1, #255	; 0xff
 80007b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80007ba:	f00e f8d7 	bl	800e96c <netconn_listen_with_backlog>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d007      	beq.n	80007d4 <TcpSeverTask+0x80>
		/* Handle error */
		printf("Failed to put the connection into LISTEN state\r\n");
 80007c4:	484e      	ldr	r0, [pc, #312]	; (8000900 <TcpSeverTask+0x1ac>)
 80007c6:	f01e fb93 	bl	801eef0 <puts>
		netconn_delete(conn);
 80007ca:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80007ce:	f00e f879 	bl	800e8c4 <netconn_delete>
		return;
 80007d2:	e08b      	b.n	80008ec <TcpSeverTask+0x198>
	}

	printf("TCP server listening on port %d\r\n", port);
 80007d4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80007d8:	4619      	mov	r1, r3
 80007da:	484a      	ldr	r0, [pc, #296]	; (8000904 <TcpSeverTask+0x1b0>)
 80007dc:	f01e fb22 	bl	801ee24 <iprintf>


	/* Infinite loop */
	for (;;) {
		/* Check for new connections */
		if (netconn_accept(conn, &newconn) == ERR_OK) {
 80007e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80007e4:	4619      	mov	r1, r3
 80007e6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80007ea:	f00e f8eb 	bl	800e9c4 <netconn_accept>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d177      	bne.n	80008e4 <TcpSeverTask+0x190>
			printf("New connection established\r\n");
 80007f4:	4844      	ldr	r0, [pc, #272]	; (8000908 <TcpSeverTask+0x1b4>)
 80007f6:	f01e fb7b 	bl	801eef0 <puts>

		    /* Set keepalive options if enabled */
		    if (enable_keepalive) {
 80007fa:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d044      	beq.n	800088c <TcpSeverTask+0x138>
		        int keepalive = 1; // Enable keepalive
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
		        int keepidle = 10; // Idle time before sending keepalive probes (in seconds)
 8000806:	230a      	movs	r3, #10
 8000808:	617b      	str	r3, [r7, #20]
		        int keepintvl = 5; // Interval between keepalive probes (in seconds)
 800080a:	2305      	movs	r3, #5
 800080c:	613b      	str	r3, [r7, #16]
		        int keepcnt = 3;   // Number of keepalive probes before the connection is considered lost
 800080e:	2303      	movs	r3, #3
 8000810:	60fb      	str	r3, [r7, #12]

		        /* Set keepalive options on the listening socket */
		        if (lwip_setsockopt(conn->socket, SOL_SOCKET, SO_KEEPALIVE, &keepalive, sizeof(keepalive)) != ERR_OK ||
 8000812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000816:	6998      	ldr	r0, [r3, #24]
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	2204      	movs	r2, #4
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	2208      	movs	r2, #8
 8000822:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000826:	f00f ff91 	bl	801074c <lwip_setsockopt>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d129      	bne.n	8000884 <TcpSeverTask+0x130>
		            lwip_setsockopt(conn->socket, IPPROTO_TCP, TCP_KEEPIDLE, &keepidle, sizeof(keepidle)) != ERR_OK ||
 8000830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000834:	6998      	ldr	r0, [r3, #24]
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2204      	movs	r2, #4
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	2203      	movs	r2, #3
 8000840:	2106      	movs	r1, #6
 8000842:	f00f ff83 	bl	801074c <lwip_setsockopt>
 8000846:	4603      	mov	r3, r0
		        if (lwip_setsockopt(conn->socket, SOL_SOCKET, SO_KEEPALIVE, &keepalive, sizeof(keepalive)) != ERR_OK ||
 8000848:	2b00      	cmp	r3, #0
 800084a:	d11b      	bne.n	8000884 <TcpSeverTask+0x130>
		            lwip_setsockopt(conn->socket, IPPROTO_TCP, TCP_KEEPINTVL, &keepintvl, sizeof(keepintvl)) != ERR_OK ||
 800084c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000850:	6998      	ldr	r0, [r3, #24]
 8000852:	f107 0310 	add.w	r3, r7, #16
 8000856:	2204      	movs	r2, #4
 8000858:	9200      	str	r2, [sp, #0]
 800085a:	2204      	movs	r2, #4
 800085c:	2106      	movs	r1, #6
 800085e:	f00f ff75 	bl	801074c <lwip_setsockopt>
 8000862:	4603      	mov	r3, r0
		            lwip_setsockopt(conn->socket, IPPROTO_TCP, TCP_KEEPIDLE, &keepidle, sizeof(keepidle)) != ERR_OK ||
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10d      	bne.n	8000884 <TcpSeverTask+0x130>
		            lwip_setsockopt(conn->socket, IPPROTO_TCP, TCP_KEEPCNT, &keepcnt, sizeof(keepcnt)) != ERR_OK) {
 8000868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800086c:	6998      	ldr	r0, [r3, #24]
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2204      	movs	r2, #4
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	2205      	movs	r2, #5
 8000878:	2106      	movs	r1, #6
 800087a:	f00f ff67 	bl	801074c <lwip_setsockopt>
 800087e:	4603      	mov	r3, r0
		            lwip_setsockopt(conn->socket, IPPROTO_TCP, TCP_KEEPINTVL, &keepintvl, sizeof(keepintvl)) != ERR_OK ||
 8000880:	2b00      	cmp	r3, #0
 8000882:	d003      	beq.n	800088c <TcpSeverTask+0x138>
		            /* Handle error */
		            printf("Failed to set keepalive options\r\n");
 8000884:	4821      	ldr	r0, [pc, #132]	; (800090c <TcpSeverTask+0x1b8>)
 8000886:	f01e fb33 	bl	801eef0 <puts>
 800088a:	e02f      	b.n	80008ec <TcpSeverTask+0x198>
		            return;
		        }
		    }

			/* Receive data from the new connection */
			if (netconn_recv(newconn, &buf) == ERR_OK) {
 800088c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000890:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000894:	4611      	mov	r1, r2
 8000896:	4618      	mov	r0, r3
 8000898:	f00e fa9c 	bl	800edd4 <netconn_recv>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d113      	bne.n	80008ca <TcpSeverTask+0x176>
				/* Process received data */
				netbuf_copy(buf, msg, sizeof(msg));
 80008a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	f107 011c 	add.w	r1, r7, #28
 80008ac:	2300      	movs	r3, #0
 80008ae:	2264      	movs	r2, #100	; 0x64
 80008b0:	f012 f92c 	bl	8012b0c <pbuf_copy_partial>
				printf("Received data: %s\r\n", msg);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4815      	ldr	r0, [pc, #84]	; (8000910 <TcpSeverTask+0x1bc>)
 80008bc:	f01e fab2 	bl	801ee24 <iprintf>

				/* Free the buffer */
				netbuf_delete(buf);
 80008c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00f fea1 	bl	801060c <netbuf_delete>
			}

			/* Close the new connection */
			netconn_close(newconn);
 80008ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80008ce:	4618      	mov	r0, r3
 80008d0:	f00e fb2a 	bl	800ef28 <netconn_close>
			netconn_delete(newconn);
 80008d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80008d8:	4618      	mov	r0, r3
 80008da:	f00d fff3 	bl	800e8c4 <netconn_delete>
			printf("Connection closed\r\n");
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <TcpSeverTask+0x1c0>)
 80008e0:	f01e fb06 	bl	801eef0 <puts>
		}

		/* Delay for a short period */
		osDelay(100);
 80008e4:	2064      	movs	r0, #100	; 0x64
 80008e6:	f005 fb8b 	bl	8006000 <osDelay>
		if (netconn_accept(conn, &newconn) == ERR_OK) {
 80008ea:	e779      	b.n	80007e0 <TcpSeverTask+0x8c>

	/* Close the main connection */
	netconn_close(conn);
	netconn_delete(conn);
	/* USER CODE END TcpSeverTask */
}
 80008ec:	3790      	adds	r7, #144	; 0x90
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08020080 	.word	0x08020080
 80008f8:	08024784 	.word	0x08024784
 80008fc:	080200a8 	.word	0x080200a8
 8000900:	080200c4 	.word	0x080200c4
 8000904:	080200f4 	.word	0x080200f4
 8000908:	08020118 	.word	0x08020118
 800090c:	08020134 	.word	0x08020134
 8000910:	08020158 	.word	0x08020158
 8000914:	0802016c 	.word	0x0802016c

08000918 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a2d      	ldr	r2, [pc, #180]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0xd4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_GPIO_Init+0xd4>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a18      	ldr	r2, [pc, #96]	; (80009ec <MX_GPIO_Init+0xd4>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <MX_GPIO_Init+0xd4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a11      	ldr	r2, [pc, #68]	; (80009ec <MX_GPIO_Init+0xd4>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_GPIO_Init+0xd4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80009ba:	2200      	movs	r2, #0
 80009bc:	f24e 1108 	movw	r1, #57608	; 0xe108
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009c2:	f002 fc59 	bl	8003278 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80009c6:	f24e 1308 	movw	r3, #57608	; 0xe108
 80009ca:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_GPIO_Init+0xd8>)
 80009e0:	f002 faae 	bl	8002f40 <HAL_GPIO_Init>

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40021000 	.word	0x40021000

080009f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f002 fc3b 	bl	80032ac <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 fa8e 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200004b4 	.word	0x200004b4
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	000186a0 	.word	0x000186a0

08000a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a19      	ldr	r2, [pc, #100]	; (8000ad4 <HAL_I2C_MspInit+0x84>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d12c      	bne.n	8000acc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a17      	ldr	r2, [pc, #92]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a94:	2312      	movs	r3, #18
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <HAL_I2C_MspInit+0x8c>)
 8000aac:	f002 fa48 	bl	8002f40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a07      	ldr	r2, [pc, #28]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000aba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_I2C_MspInit+0x88>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020400 	.word	0x40020400

08000ae0 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000ae6:	4a1a      	ldr	r2, [pc, #104]	; (8000b50 <lfs_w25qflash_config_init+0x70>)
 8000ae8:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000aec:	4a19      	ldr	r2, [pc, #100]	; (8000b54 <lfs_w25qflash_config_init+0x74>)
 8000aee:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000af2:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <lfs_w25qflash_config_init+0x78>)
 8000af4:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000af8:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <lfs_w25qflash_config_init+0x7c>)
 8000afa:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <lfs_w25qflash_config_init+0x80>)
 8000b00:	615a      	str	r2, [r3, #20]
littlefs_config.unlock = lfs_unlock;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <lfs_w25qflash_config_init+0x84>)
 8000b06:	619a      	str	r2, [r3, #24]
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <lfs_w25qflash_config_init+0x88>)
 8000b0a:	895b      	ldrh	r3, [r3, #10]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b10:	61da      	str	r2, [r3, #28]
 littlefs_config.prog_size = w25qxx.PageSize;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <lfs_w25qflash_config_init+0x88>)
 8000b14:	895b      	ldrh	r3, [r3, #10]
 8000b16:	461a      	mov	r2, r3
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b1a:	621a      	str	r2, [r3, #32]
 littlefs_config.block_size = w25qxx.SectorSize;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <lfs_w25qflash_config_init+0x88>)
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b22:	6253      	str	r3, [r2, #36]	; 0x24
 littlefs_config.block_count = w25qxx.SectorCount;
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <lfs_w25qflash_config_init+0x88>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b2a:	6293      	str	r3, [r2, #40]	; 0x28
 littlefs_config.block_cycles = 100;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b2e:	2264      	movs	r2, #100	; 0x64
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b38:	631a      	str	r2, [r3, #48]	; 0x30
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <lfs_w25qflash_config_init+0x6c>)
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000508 	.word	0x20000508
 8000b50:	08000b6d 	.word	0x08000b6d
 8000b54:	08000bad 	.word	0x08000bad
 8000b58:	08000bed 	.word	0x08000bed
 8000b5c:	08000c07 	.word	0x08000c07
 8000b60:	08000d51 	.word	0x08000d51
 8000b64:	08000d91 	.word	0x08000d91
 8000b68:	2000ca2c 	.word	0x2000ca2c

08000b6c <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
 8000b78:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6838      	ldr	r0, [r7, #0]
 8000b82:	f01d fe6f 	bl	801e864 <W25qxx_ReadSector>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d007      	beq.n	8000b9c <lfs_w25qflash_read+0x30>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <lfs_w25qflash_read+0x3c>)
 8000b94:	f01e f946 	bl	801ee24 <iprintf>

		return LFS_ERR_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e001      	b.n	8000ba0 <lfs_w25qflash_read+0x34>

	} else {

	  return LFS_ERR_CORRUPT;
 8000b9c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	08020180 	.word	0x08020180

08000bac <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	68b9      	ldr	r1, [r7, #8]
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f01d fd6d 	bl	801e6a0 <W25qxx_WriteSector>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d007      	beq.n	8000bdc <lfs_w25qflash_prog+0x30>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	68b9      	ldr	r1, [r7, #8]
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <lfs_w25qflash_prog+0x3c>)
 8000bd4:	f01e f926 	bl	801ee24 <iprintf>

		return LFS_ERR_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	e001      	b.n	8000be0 <lfs_w25qflash_prog+0x34>

	} else {

		return LFS_ERR_CORRUPT;
 8000bdc:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	080201c0 	.word	0x080201c0

08000bec <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 8000bf6:	6838      	ldr	r0, [r7, #0]
 8000bf8:	f01d fc5e 	bl	801e4b8 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 8000c0e:	2300      	movs	r3, #0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8000c24:	f7ff ff5c 	bl	8000ae0 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <lfs_get_default_config+0x28>)
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	4611      	mov	r1, r2
 8000c30:	2354      	movs	r3, #84	; 0x54
 8000c32:	461a      	mov	r2, r3
 8000c34:	f01e fb5b 	bl	801f2ee <memcpy>
    return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000508 	.word	0x20000508

08000c48 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8000c50:	f01d fb60 	bl	801e314 <W25qxx_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	81fb      	strh	r3, [r7, #14]

    return status;
 8000c58:	89fb      	ldrh	r3, [r7, #14]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <osKernelGetState>:
//*** cmsis_os2.c
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ()                  IS_IRQ_MODE()

//*** cmsis_os2.c
osKernelState_t osKernelGetState (void) {
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8000c68:	f007 fada 	bl	8008220 <xTaskGetSchedulerState>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d004      	beq.n	8000c7c <osKernelGetState+0x1a>
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d105      	bne.n	8000c82 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning_enum;
 8000c76:	2302      	movs	r3, #2
 8000c78:	607b      	str	r3, [r7, #4]
      break;
 8000c7a:	e005      	b.n	8000c88 <osKernelGetState+0x26>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	607b      	str	r3, [r7, #4]
      break;
 8000c80:	e002      	b.n	8000c88 <osKernelGetState+0x26>
    case taskSCHEDULER_NOT_STARTED:
    default:
      //if (KernelState == osKernelReady) {
      //  state = osKernelReady;
      //} else {
        state = osKernelInactive;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
      //}
      break;
 8000c86:	bf00      	nop
  }

  return (state);
 8000c88:	687b      	ldr	r3, [r7, #4]
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <osKernelLock>:

//*** cmsis_os2.c
int32_t osKernelLock (void) {
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000c98:	f3ef 8305 	mrs	r3, IPSR
 8000c9c:	603b      	str	r3, [r7, #0]
  return(result);
 8000c9e:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <osKernelLock+0x18>
    lock = (int32_t)osErrorISR;
 8000ca4:	2382      	movs	r3, #130	; 0x82
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	e013      	b.n	8000cd2 <osKernelLock+0x40>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000caa:	f007 fab9 	bl	8008220 <xTaskGetSchedulerState>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d002      	beq.n	8000cba <osKernelLock+0x28>
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d003      	beq.n	8000cc0 <osKernelLock+0x2e>
 8000cb8:	e007      	b.n	8000cca <osKernelLock+0x38>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
        break;
 8000cbe:	e008      	b.n	8000cd2 <osKernelLock+0x40>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8000cc0:	f006 fee4 	bl	8007a8c <vTaskSuspendAll>
        lock = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
        break;
 8000cc8:	e003      	b.n	8000cd2 <osKernelLock+0x40>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cce:	607b      	str	r3, [r7, #4]
        break;
 8000cd0:	bf00      	nop
    }
  }

  return (lock);
 8000cd2:	687b      	ldr	r3, [r7, #4]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <osKernelRestoreLock>:

  return (lock);
}

//*** cmsis_os2.c
int32_t osKernelRestoreLock (int32_t lock) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000ce4:	f3ef 8305 	mrs	r3, IPSR
 8000ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8000cea:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <osKernelRestoreLock+0x1a>
    lock = (int32_t)osErrorISR;
 8000cf0:	2382      	movs	r3, #130	; 0x82
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e026      	b.n	8000d44 <osKernelRestoreLock+0x68>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8000cf6:	f007 fa93 	bl	8008220 <xTaskGetSchedulerState>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <osKernelRestoreLock+0x28>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d11a      	bne.n	8000d3a <osKernelRestoreLock+0x5e>
      case taskSCHEDULER_SUSPENDED:
      case taskSCHEDULER_RUNNING:
        if (lock == 1) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d102      	bne.n	8000d10 <osKernelRestoreLock+0x34>
          vTaskSuspendAll();
 8000d0a:	f006 febf 	bl	8007a8c <vTaskSuspendAll>
                lock = (int32_t)osError;
              }
            }
          }
        }
        break;
 8000d0e:	e018      	b.n	8000d42 <osKernelRestoreLock+0x66>
          if (lock != 0) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <osKernelRestoreLock+0x42>
            lock = (int32_t)osError;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d1a:	607b      	str	r3, [r7, #4]
        break;
 8000d1c:	e011      	b.n	8000d42 <osKernelRestoreLock+0x66>
            if (xTaskResumeAll() != pdTRUE) {
 8000d1e:	f006 fec3 	bl	8007aa8 <xTaskResumeAll>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d00c      	beq.n	8000d42 <osKernelRestoreLock+0x66>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 8000d28:	f007 fa7a 	bl	8008220 <xTaskGetSchedulerState>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d007      	beq.n	8000d42 <osKernelRestoreLock+0x66>
                lock = (int32_t)osError;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	607b      	str	r3, [r7, #4]
        break;
 8000d38:	e003      	b.n	8000d42 <osKernelRestoreLock+0x66>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3e:	607b      	str	r3, [r7, #4]
        break;
 8000d40:	e000      	b.n	8000d44 <osKernelRestoreLock+0x68>
        break;
 8000d42:	bf00      	nop
    }
  }

  return (lock);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <lfs_lock>:

/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de LOCK
 */
int lfs_lock(const struct lfs_config *c)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000d58:	f7ff ff83 	bl	8000c62 <osKernelGetState>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d101      	bne.n	8000d66 <lfs_lock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e00e      	b.n	8000d84 <lfs_lock+0x34>
	}

	rtos_lockState = osKernelLock();
 8000d66:	f7ff ff94 	bl	8000c92 <osKernelLock>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <lfs_lock+0x3c>)
 8000d6e:	6013      	str	r3, [r2, #0]
	int ret = LFS_ERR_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]

	if (rtos_lockState < 0)
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <lfs_lock+0x3c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da02      	bge.n	8000d82 <lfs_lock+0x32>
	{
		ret = LFS_ERR_IO;
 8000d7c:	f06f 0304 	mvn.w	r3, #4
 8000d80:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000d82:	68fb      	ldr	r3, [r7, #12]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000055c 	.word	0x2000055c

08000d90 <lfs_unlock>:
/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de UNLOCK
 */
int lfs_unlock(const struct lfs_config *c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8000d98:	f7ff ff63 	bl	8000c62 <osKernelGetState>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <lfs_unlock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e00e      	b.n	8000dc4 <lfs_unlock+0x34>
	}

	//int state = osKernelUnlock();
	int newLockState = osKernelRestoreLock(rtos_lockState);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <lfs_unlock+0x3c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff96 	bl	8000cdc <osKernelRestoreLock>
 8000db0:	60b8      	str	r0, [r7, #8]
	int ret = LFS_ERR_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]

	if (newLockState < 0)
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da02      	bge.n	8000dc2 <lfs_unlock+0x32>
	{
		ret = LFS_ERR_IO;
 8000dbc:	f06f 0304 	mvn.w	r3, #4
 8000dc0:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000055c 	.word	0x2000055c

08000dd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd4:	f000 fd10 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd8:	f000 f844 	bl	8000e64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ddc:	f7ff fd9c 	bl	8000918 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000de0:	f000 f8c2 	bl	8000f68 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000de4:	f7ff fe06 	bl	80009f4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000de8:	f000 fb0a 	bl	8001400 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df2:	481b      	ldr	r0, [pc, #108]	; (8000e60 <main+0x90>)
 8000df4:	f002 fa40 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000df8:	2032      	movs	r0, #50	; 0x32
 8000dfa:	f000 fd3f 	bl	800187c <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e04:	4816      	ldr	r0, [pc, #88]	; (8000e60 <main+0x90>)
 8000e06:	f002 fa37 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f000 fd36 	bl	800187c <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e16:	4812      	ldr	r0, [pc, #72]	; (8000e60 <main+0x90>)
 8000e18:	f002 fa2e 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000e1c:	2032      	movs	r0, #50	; 0x32
 8000e1e:	f000 fd2d 	bl	800187c <HAL_Delay>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <main+0x90>)
 8000e2a:	f002 fa25 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000e2e:	2032      	movs	r0, #50	; 0x32
 8000e30:	f000 fd24 	bl	800187c <HAL_Delay>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <main+0x90>)
 8000e3c:	f002 fa1c 	bl	8003278 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 8000e40:	2032      	movs	r0, #50	; 0x32
 8000e42:	f000 fd1b 	bl	800187c <HAL_Delay>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <main+0x90>)
 8000e4e:	f002 fa13 	bl	8003278 <HAL_GPIO_WritePin>



  /*Initialize lib from winbond memory */
  FileSystemInit();
 8000e52:	f7ff fba7 	bl	80005a4 <FileSystemInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000e56:	f7ff fc3f 	bl	80006d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e5a:	f005 f86e 	bl	8005f3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <main+0x8e>
 8000e60:	40021000 	.word	0x40021000

08000e64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b094      	sub	sp, #80	; 0x50
 8000e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f01e f92c 	bl	801f0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	4b28      	ldr	r3, [pc, #160]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e96:	6413      	str	r3, [r2, #64]	; 0x40
 8000e98:	4b25      	ldr	r3, [pc, #148]	; (8000f30 <SystemClock_Config+0xcc>)
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <SystemClock_Config+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ed4:	2319      	movs	r3, #25
 8000ed6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 316;
 8000ed8:	f44f 739e 	mov.w	r3, #316	; 0x13c
 8000edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee6:	f107 0320 	add.w	r3, r7, #32
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fb22 	bl	8003534 <HAL_RCC_OscConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ef6:	f000 f831 	bl	8000f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efa:	230f      	movs	r3, #15
 8000efc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efe:	2302      	movs	r3, #2
 8000f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	2105      	movs	r1, #5
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 fd83 	bl	8003a24 <HAL_RCC_ClockConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f24:	f000 f81a 	bl	8000f5c <Error_Handler>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	3750      	adds	r7, #80	; 0x50
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f4a:	f000 fc77 	bl	800183c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40002000 	.word	0x40002000

08000f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f60:	b672      	cpsid	i
}
 8000f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <Error_Handler+0x8>
	...

08000f68 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000f6c:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f6e:	4a18      	ldr	r2, [pc, #96]	; (8000fd0 <MX_SPI2_Init+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f98:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fb4:	220a      	movs	r2, #10
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_SPI2_Init+0x64>)
 8000fba:	f002 ff45 	bl	8003e48 <HAL_SPI_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f7ff ffca 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000560 	.word	0x20000560
 8000fd0:	40003800 	.word	0x40003800

08000fd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_SPI_MspInit+0xc0>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d14a      	bne.n	800108c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b24      	ldr	r3, [pc, #144]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a18      	ldr	r2, [pc, #96]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b16      	ldr	r3, [pc, #88]	; (8001098 <HAL_SPI_MspInit+0xc4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800104a:	230c      	movs	r3, #12
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <HAL_SPI_MspInit+0xc8>)
 8001066:	f001 ff6b 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800107c:	2305      	movs	r3, #5
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <HAL_SPI_MspInit+0xcc>)
 8001088:	f001 ff5a 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800108c:	bf00      	nop
 800108e:	3728      	adds	r7, #40	; 0x28
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40003800 	.word	0x40003800
 8001098:	40023800 	.word	0x40023800
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_MspInit+0x54>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_MspInit+0x54>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x54>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_MspInit+0x54>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_MspInit+0x54>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_MspInit+0x54>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	210f      	movs	r1, #15
 80010e6:	f06f 0001 	mvn.w	r0, #1
 80010ea:	f000 fca3 	bl	8001a34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_InitTick+0xe4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a32      	ldr	r2, [pc, #200]	; (80011e0 <HAL_InitTick+0xe4>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b30      	ldr	r3, [pc, #192]	; (80011e0 <HAL_InitTick+0xe4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001128:	f107 0210 	add.w	r2, r7, #16
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f002 fe56 	bl	8003de4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001138:	6a3b      	ldr	r3, [r7, #32]
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	d103      	bne.n	800114a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001142:	f002 fe27 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8001146:	6378      	str	r0, [r7, #52]	; 0x34
 8001148:	e004      	b.n	8001154 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800114a:	f002 fe23 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 800114e:	4603      	mov	r3, r0
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_InitTick+0xe8>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	3b01      	subs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_InitTick+0xec>)
 8001164:	4a21      	ldr	r2, [pc, #132]	; (80011ec <HAL_InitTick+0xf0>)
 8001166:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <HAL_InitTick+0xec>)
 800116a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800116e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001170:	4a1d      	ldr	r2, [pc, #116]	; (80011e8 <HAL_InitTick+0xec>)
 8001172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001174:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_InitTick+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_InitTick+0xec>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_InitTick+0xec>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <HAL_InitTick+0xec>)
 800118a:	f003 fc33 	bl	80049f4 <HAL_TIM_Base_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11b      	bne.n	80011d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800119c:	4812      	ldr	r0, [pc, #72]	; (80011e8 <HAL_InitTick+0xec>)
 800119e:	f003 fc83 	bl	8004aa8 <HAL_TIM_Base_Start_IT>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d111      	bne.n	80011d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80011b0:	202d      	movs	r0, #45	; 0x2d
 80011b2:	f000 fc5b 	bl	8001a6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d808      	bhi.n	80011ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	202d      	movs	r0, #45	; 0x2d
 80011c2:	f000 fc37 	bl	8001a34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <HAL_InitTick+0xf4>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e002      	b.n	80011d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3738      	adds	r7, #56	; 0x38
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	431bde83 	.word	0x431bde83
 80011e8:	200005b8 	.word	0x200005b8
 80011ec:	40002000 	.word	0x40002000
 80011f0:	20000004 	.word	0x20000004

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001226:	f003 fcaf 	bl	8004b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200005b8 	.word	0x200005b8

08001234 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <ETH_IRQHandler+0x10>)
 800123a:	f000 ffab 	bl	8002194 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20005168 	.word	0x20005168

08001248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return 1;
 800124c:	2301      	movs	r3, #1
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_kill>:

int _kill(int pid, int sig)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_kill+0x20>)
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
  return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	2000cb98 	.word	0x2000cb98

0800127c <_exit>:

void _exit (int status)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff ffe5 	bl	8001258 <_kill>
  while (1) {}    /* Make sure we hang here */
 800128e:	e7fe      	b.n	800128e <_exit+0x12>

08001290 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e00a      	b.n	80012b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012a2:	f3af 8000 	nop.w
 80012a6:	4601      	mov	r1, r0
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	1c5a      	adds	r2, r3, #1
 80012ac:	60ba      	str	r2, [r7, #8]
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	3301      	adds	r3, #1
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbf0      	blt.n	80012a2 <_read+0x12>
  }

  return len;
 80012c0:	687b      	ldr	r3, [r7, #4]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3718      	adds	r7, #24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e009      	b.n	80012f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	1c5a      	adds	r2, r3, #1
 80012e0:	60ba      	str	r2, [r7, #8]
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbf1      	blt.n	80012dc <_write+0x12>
  }
  return len;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <_close>:

int _close(int file)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800132a:	605a      	str	r2, [r3, #4]
  return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <_isatty>:

int _isatty(int file)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800136c:	b480      	push	{r7}
 800136e:	b087      	sub	sp, #28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001374:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <_sbrk+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <_sbrk+0x60>)
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <_sbrk+0x64>)
 800138a:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <_sbrk+0x68>)
 800138c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	429a      	cmp	r2, r3
 800139a:	d205      	bcs.n	80013a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <_sbrk+0x6c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	e009      	b.n	80013bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <_sbrk+0x64>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <_sbrk+0x64>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <_sbrk+0x64>)
 80013b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	371c      	adds	r7, #28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	20020000 	.word	0x20020000
 80013cc:	00000400 	.word	0x00000400
 80013d0:	20000600 	.word	0x20000600
 80013d4:	2000cba0 	.word	0x2000cba0
 80013d8:	2000cb98 	.word	0x2000cb98

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <SystemInit+0x20>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <SystemInit+0x20>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART1_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001438:	f003 fd7e 	bl	8004f38 <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f7ff fd8b 	bl	8000f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000604 	.word	0x20000604
 8001450:	40011000 	.word	0x40011000

08001454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <HAL_UART_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12c      	bne.n	80014d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_UART_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147e:	4a17      	ldr	r2, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x88>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6453      	str	r3, [r2, #68]	; 0x44
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_UART_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_UART_MspInit+0x88>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_UART_MspInit+0x8c>)
 80014cc:	f001 fd38 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014e8:	f7ff ff78 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	; (8001524 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	; (8001528 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	; (8001530 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f01d fec5 	bl	801f2a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fc5b 	bl	8000dd0 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001528:	08024994 	.word	0x08024994
  ldr r2, =_sbss
 800152c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001530:	2000cba0 	.word	0x2000cba0

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>

08001536 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <DP83848_RegisterBusIO+0x28>
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <DP83848_RegisterBusIO+0x28>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <DP83848_RegisterBusIO+0x28>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	e014      	b.n	800158e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d17c      	bne.n	80016b4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d002      	beq.n	80015c8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2220      	movs	r2, #32
 80015cc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
 80015d2:	e01c      	b.n	800160e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f107 0208 	add.w	r2, r7, #8
 80015dc:	2119      	movs	r1, #25
 80015de:	6978      	ldr	r0, [r7, #20]
 80015e0:	4798      	blx	r3
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	da03      	bge.n	80015f0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80015e8:	f06f 0304 	mvn.w	r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80015ee:	e00b      	b.n	8001608 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d105      	bne.n	8001608 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
         break;
 8001606:	e005      	b.n	8001614 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b1f      	cmp	r3, #31
 8001612:	d9df      	bls.n	80015d4 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b1f      	cmp	r3, #31
 800161a:	d902      	bls.n	8001622 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 800161c:	f06f 0302 	mvn.w	r3, #2
 8001620:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d145      	bne.n	80016b4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001634:	2100      	movs	r1, #0
 8001636:	4798      	blx	r3
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	db37      	blt.n	80016ae <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6810      	ldr	r0, [r2, #0]
 8001646:	f107 0208 	add.w	r2, r7, #8
 800164a:	2100      	movs	r1, #0
 800164c:	4798      	blx	r3
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	db28      	blt.n	80016a6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	4798      	blx	r3
 800165a:	4603      	mov	r3, r0
 800165c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800165e:	e01c      	b.n	800169a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4798      	blx	r3
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001672:	d80e      	bhi.n	8001692 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6810      	ldr	r0, [r2, #0]
 800167c:	f107 0208 	add.w	r2, r7, #8
 8001680:	2100      	movs	r1, #0
 8001682:	4798      	blx	r3
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	da07      	bge.n	800169a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 800168a:	f06f 0304 	mvn.w	r3, #4
 800168e:	613b      	str	r3, [r7, #16]
                 break;
 8001690:	e010      	b.n	80016b4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001692:	f06f 0301 	mvn.w	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
               break;
 8001698:	e00c      	b.n	80016b4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1dd      	bne.n	8001660 <DP83848_Init+0xc6>
 80016a4:	e006      	b.n	80016b4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80016a6:	f06f 0304 	mvn.w	r3, #4
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	e002      	b.n	80016b4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80016ae:	f06f 0303 	mvn.w	r3, #3
 80016b2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d112      	bne.n	80016e0 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4798      	blx	r3
 80016c0:	4603      	mov	r3, r0
 80016c2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80016c4:	bf00      	nop
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4798      	blx	r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80016d8:	d9f5      	bls.n	80016c6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	605a      	str	r2, [r3, #4]
   }

   return status;
 80016e0:	693b      	ldr	r3, [r7, #16]
 }
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6810      	ldr	r0, [r2, #0]
 80016fe:	f107 020c 	add.w	r2, r7, #12
 8001702:	2101      	movs	r1, #1
 8001704:	4798      	blx	r3
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	da02      	bge.n	8001712 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800170c:	f06f 0304 	mvn.w	r3, #4
 8001710:	e06e      	b.n	80017f0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6810      	ldr	r0, [r2, #0]
 800171a:	f107 020c 	add.w	r2, r7, #12
 800171e:	2101      	movs	r1, #1
 8001720:	4798      	blx	r3
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	da02      	bge.n	800172e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001728:	f06f 0304 	mvn.w	r3, #4
 800172c:	e060      	b.n	80017f0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001738:	2301      	movs	r3, #1
 800173a:	e059      	b.n	80017f0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6810      	ldr	r0, [r2, #0]
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	2100      	movs	r1, #0
 800174a:	4798      	blx	r3
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	da02      	bge.n	8001758 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001752:	f06f 0304 	mvn.w	r3, #4
 8001756:	e04b      	b.n	80017f0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11b      	bne.n	800179a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <DP83848_GetLinkState+0x90>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001776:	2302      	movs	r3, #2
 8001778:	e03a      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001784:	2303      	movs	r3, #3
 8001786:	e033      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001792:	2304      	movs	r3, #4
 8001794:	e02c      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001796:	2305      	movs	r3, #5
 8001798:	e02a      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	6810      	ldr	r0, [r2, #0]
 80017a2:	f107 020c 	add.w	r2, r7, #12
 80017a6:	2110      	movs	r1, #16
 80017a8:	4798      	blx	r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	da02      	bge.n	80017b6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80017b0:	f06f 0304 	mvn.w	r3, #4
 80017b4:	e01c      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80017c0:	2306      	movs	r3, #6
 80017c2:	e015      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0306 	and.w	r3, r3, #6
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d101      	bne.n	80017d2 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80017ce:	2302      	movs	r3, #2
 80017d0:	e00e      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 0306 	and.w	r3, r3, #6
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80017dc:	2303      	movs	r3, #3
 80017de:	e007      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0306 	and.w	r3, r3, #6
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d101      	bne.n	80017ee <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80017ea:	2304      	movs	r3, #4
 80017ec:	e000      	b.n	80017f0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80017ee:	2305      	movs	r3, #5
    }
  }
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_Init+0x40>)
 8001802:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001806:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <HAL_Init+0x40>)
 800180e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001812:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <HAL_Init+0x40>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_Init+0x40>)
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001820:	2003      	movs	r0, #3
 8001822:	f000 f8fc 	bl	8001a1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001826:	200f      	movs	r0, #15
 8001828:	f7ff fc68 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800182c:	f7ff fc3a 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023c00 	.word	0x40023c00

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000008 	.word	0x20000008
 8001860:	2000064c 	.word	0x2000064c

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	2000064c 	.word	0x2000064c

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000008 	.word	0x20000008

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	2b00      	cmp	r3, #0
 8001938:	db0b      	blt.n	8001952 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <__NVIC_EnableIRQ+0x38>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	095b      	lsrs	r3, r3, #5
 8001948:	2001      	movs	r0, #1
 800194a:	fa00 f202 	lsl.w	r2, r0, r2
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000e100 	.word	0xe000e100

08001964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	db0a      	blt.n	800198e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	490c      	ldr	r1, [pc, #48]	; (80019b0 <__NVIC_SetPriority+0x4c>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	440b      	add	r3, r1
 8001988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800198c:	e00a      	b.n	80019a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4908      	ldr	r1, [pc, #32]	; (80019b4 <__NVIC_SetPriority+0x50>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3b04      	subs	r3, #4
 800199c:	0112      	lsls	r2, r2, #4
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	440b      	add	r3, r1
 80019a2:	761a      	strb	r2, [r3, #24]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e100 	.word	0xe000e100
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	; 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f1c3 0307 	rsb	r3, r3, #7
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	bf28      	it	cs
 80019d6:	2304      	movcs	r3, #4
 80019d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3304      	adds	r3, #4
 80019de:	2b06      	cmp	r3, #6
 80019e0:	d902      	bls.n	80019e8 <NVIC_EncodePriority+0x30>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b03      	subs	r3, #3
 80019e6:	e000      	b.n	80019ea <NVIC_EncodePriority+0x32>
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43da      	mvns	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	401a      	ands	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0a:	43d9      	mvns	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	4313      	orrs	r3, r2
         );
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff4c 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
 8001a40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a46:	f7ff ff61 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	68b9      	ldr	r1, [r7, #8]
 8001a50:	6978      	ldr	r0, [r7, #20]
 8001a52:	f7ff ffb1 	bl	80019b8 <NVIC_EncodePriority>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff80 	bl	8001964 <__NVIC_SetPriority>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff ff54 	bl	8001928 <__NVIC_EnableIRQ>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e06c      	b.n	8001b74 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2223      	movs	r2, #35	; 0x23
 8001aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f004 f815 	bl	8005adc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	4b31      	ldr	r3, [pc, #196]	; (8001b7c <HAL_ETH_Init+0xf4>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a30      	ldr	r2, [pc, #192]	; (8001b7c <HAL_ETH_Init+0xf4>)
 8001abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_ETH_Init+0xf4>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ace:	4b2c      	ldr	r3, [pc, #176]	; (8001b80 <HAL_ETH_Init+0xf8>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a2b      	ldr	r2, [pc, #172]	; (8001b80 <HAL_ETH_Init+0xf8>)
 8001ad4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ad8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ada:	4b29      	ldr	r3, [pc, #164]	; (8001b80 <HAL_ETH_Init+0xf8>)
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4927      	ldr	r1, [pc, #156]	; (8001b80 <HAL_ETH_Init+0xf8>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ae8:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_ETH_Init+0xf8>)
 8001aea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff feae 	bl	8001864 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b0a:	e011      	b.n	8001b30 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b0c:	f7ff feaa 	bl	8001864 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b1a:	d909      	bls.n	8001b30 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2204      	movs	r2, #4
 8001b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	22e0      	movs	r2, #224	; 0xe0
 8001b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e021      	b.n	8001b74 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e4      	bne.n	8001b0c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 ff56 	bl	80029f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fffd 	bl	8002b48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f001 f853 	bl	8002bfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 ffbb 	bl	8002ad8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2210      	movs	r2, #16
 8001b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40013800 	.word	0x40013800

08001b84 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b92:	2b10      	cmp	r3, #16
 8001b94:	d17f      	bne.n	8001c96 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2223      	movs	r2, #35	; 0x23
 8001b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bc8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001bdc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2204      	movs	r2, #4
 8001be4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f9f8 	bl	8001fdc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0208 	orr.w	r2, r2, #8
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f7ff fe39 	bl	800187c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f042 0204 	orr.w	r2, r2, #4
 8001c20:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	f7ff fe26 	bl	800187c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fd7c 	bl	8002736 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c54:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c6c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001c80:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001c84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c88:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2223      	movs	r2, #35	; 0x23
 8001c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
  }
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cae:	2b23      	cmp	r3, #35	; 0x23
 8001cb0:	d170      	bne.n	8001d94 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2223      	movs	r2, #35	; 0x23
 8001cb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001ccc:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001cd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cd4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cec:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	f023 0302 	bic.w	r3, r3, #2
 8001d00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d04:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0204 	bic.w	r2, r2, #4
 8001d14:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1e:	2001      	movs	r0, #1
 8001d20:	f7ff fdac 	bl	800187c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fd02 	bl	8002736 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0208 	bic.w	r2, r2, #8
 8001d40:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f7ff fd96 	bl	800187c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e00e      	b.n	8001d7c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	697a      	ldr	r2, [r7, #20]
 8001d62:	3212      	adds	r2, #18
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d9ed      	bls.n	8001d5e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db4:	f043 0201 	orr.w	r2, r3, #1
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e045      	b.n	8001e4e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dc8:	2b23      	cmp	r3, #35	; 0x23
 8001dca:	d13f      	bne.n	8001e4c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 ff7b 	bl	8002cd4 <ETH_Prepare_Tx_Descriptors>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d009      	beq.n	8001df8 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	f043 0202 	orr.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e02a      	b.n	8001e4e <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d904      	bls.n	8001e1a <HAL_ETH_Transmit_IT+0x7c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e14:	1f1a      	subs	r2, r3, #4
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00d      	beq.n	8001e48 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e34:	461a      	mov	r2, r3
 8001e36:	2304      	movs	r3, #4
 8001e38:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e42:	461a      	mov	r2, r3
 8001e44:	2300      	movs	r3, #0
 8001e46:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
  }
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b088      	sub	sp, #32
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d109      	bne.n	8001e82 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e74:	f043 0201 	orr.w	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0a8      	b.n	8001fd4 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e88:	2b23      	cmp	r3, #35	; 0x23
 8001e8a:	d001      	beq.n	8001e90 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0a1      	b.n	8001fd4 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	3212      	adds	r2, #18
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ea6:	f1c3 0304 	rsb	r3, r3, #4
 8001eaa:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001eac:	e06a      	b.n	8001f84 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_ETH_ReadData+0x88>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d040      	beq.n	8001f60 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00c      	beq.n	8001f22 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0c1b      	lsrs	r3, r3, #16
 8001f0e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f12:	3b04      	subs	r3, #4
 8001f14:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	f003 ff86 	bl	8005e50 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	441a      	add	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	3301      	adds	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d902      	bls.n	8001f72 <HAL_ETH_ReadData+0x11c>
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	3212      	adds	r2, #18
 8001f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db06      	blt.n	8001f9a <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d202      	bcs.n	8001f9a <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d089      	beq.n	8001eae <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f814 	bl	8001fdc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e000      	b.n	8001fd4 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	3212      	adds	r2, #18
 8001ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ffc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002002:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002004:	e03d      	b.n	8002082 <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d112      	bne.n	8002034 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	4618      	mov	r0, r3
 8002014:	f003 feec 	bl	8005df0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d102      	bne.n	8002024 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	74fb      	strb	r3, [r7, #19]
 8002022:	e007      	b.n	8002034 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	461a      	mov	r2, r3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	461a      	mov	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d023      	beq.n	8002082 <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203e:	2b00      	cmp	r3, #0
 8002040:	d103      	bne.n	800204a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	4a24      	ldr	r2, [pc, #144]	; (80020d8 <ETH_UpdateDescriptor+0xfc>)
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e003      	b.n	8002052 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002050:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	3301      	adds	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d902      	bls.n	8002070 <ETH_UpdateDescriptor+0x94>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b04      	subs	r3, #4
 800206e:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69fa      	ldr	r2, [r7, #28]
 8002074:	3212      	adds	r2, #18
 8002076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207a:	617b      	str	r3, [r7, #20]
      desccount--;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	3b01      	subs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <ETH_UpdateDescriptor+0xb2>
 8002088:	7cfb      	ldrb	r3, [r7, #19]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1bb      	bne.n	8002006 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	429a      	cmp	r2, r3
 8002096:	d01a      	beq.n	80020ce <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	3301      	adds	r3, #1
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80020a2:	f3bf 8f5f 	dmb	sy
}
 80020a6:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6919      	ldr	r1, [r3, #16]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	18ca      	adds	r2, r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020c0:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	80004600 	.word	0x80004600

080020dc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3318      	adds	r3, #24
 80020e8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80020fa:	e03f      	b.n	800217c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3b01      	subs	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	3304      	adds	r3, #4
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	3301      	adds	r3, #1
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002124:	7bbb      	ldrb	r3, [r7, #14]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d028      	beq.n	800217c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68d9      	ldr	r1, [r3, #12]
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	440b      	add	r3, r1
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	db1b      	blt.n	8002178 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	3304      	adds	r3, #4
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 febf 	bl	8005ed0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	3304      	adds	r3, #4
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	2200      	movs	r2, #0
 800215e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3301      	adds	r3, #1
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
 8002176:	e001      	b.n	800217c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_ETH_ReleaseTxPacket+0xac>
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1b9      	bne.n	80020fc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b40      	cmp	r3, #64	; 0x40
 80021ac:	d112      	bne.n	80021d4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d109      	bne.n	80021d4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b50      	ldr	r3, [pc, #320]	; (800230c <HAL_ETH_IRQHandler+0x178>)
 80021cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f003 f9cc 	bl	800556c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d113      	bne.n	800220e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10a      	bne.n	800220e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	461a      	mov	r2, r3
 8002202:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002206:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f003 f9bf 	bl	800558c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002220:	d14c      	bne.n	80022bc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002234:	d142      	bne.n	80022bc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f043 0208 	orr.w	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002258:	d11a      	bne.n	8002290 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_ETH_IRQHandler+0x17c>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002280:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002284:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	22e0      	movs	r2, #224	; 0xe0
 800228a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800228e:	e012      	b.n	80022b6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	f248 6380 	movw	r3, #34432	; 0x8680
 800229e:	4013      	ands	r3, r2
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ae:	461a      	mov	r2, r3
 80022b0:	f248 6380 	movw	r3, #34432	; 0x8680
 80022b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f003 f978 	bl	80055ac <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d10e      	bne.n	80022e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f81c 	bl	8002318 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80022e8:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <HAL_ETH_IRQHandler+0x180>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d006      	beq.n	8002302 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80022f4:	4b07      	ldr	r3, [pc, #28]	; (8002314 <HAL_ETH_IRQHandler+0x180>)
 80022f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80022fa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f815 	bl	800232c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00010040 	.word	0x00010040
 8002310:	007e2000 	.word	0x007e2000
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
 800234c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 031c 	and.w	r3, r3, #28
 800235c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	02db      	lsls	r3, r3, #11
 8002362:	b29b      	uxth	r3, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	019b      	lsls	r3, r3, #6
 800236e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f023 0302 	bic.w	r3, r3, #2
 800237e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002390:	f7ff fa68 	bl	8001864 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002396:	e00d      	b.n	80023b4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002398:	f7ff fa64 	bl	8001864 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d301      	bcc.n	80023ac <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e010      	b.n	80023ce <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ec      	bne.n	8002398 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 031c 	and.w	r3, r3, #28
 80023f2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	02db      	lsls	r3, r3, #11
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	019b      	lsls	r3, r3, #6
 8002404:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002430:	f7ff fa18 	bl	8001864 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002436:	e00d      	b.n	8002454 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002438:	f7ff fa14 	bl	8001864 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d301      	bcc.n	800244c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e009      	b.n	8002460 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ec      	bne.n	8002438 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d101      	bne.n	800247c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d9      	b.n	8002630 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	2b00      	cmp	r3, #0
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002550:	2b00      	cmp	r3, #0
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	0c1b      	lsrs	r3, r3, #16
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	461a      	mov	r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf14      	ite	ne
 8002620:	2301      	movne	r3, #1
 8002622:	2300      	moveq	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e00b      	b.n	8002668 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002656:	2b10      	cmp	r3, #16
 8002658:	d105      	bne.n	8002666 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f88f 	bl	8002780 <ETH_SetMACConfig>

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f023 031c 	bic.w	r3, r3, #28
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002688:	f001 fb78 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 800268c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d908      	bls.n	80026a8 <HAL_ETH_SetMDIOClockRange+0x38>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d804      	bhi.n	80026a8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f043 0308 	orr.w	r3, r3, #8
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e027      	b.n	80026f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4a18      	ldr	r2, [pc, #96]	; (800270c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d908      	bls.n	80026c2 <HAL_ETH_SetMDIOClockRange+0x52>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4a17      	ldr	r2, [pc, #92]	; (8002710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d204      	bcs.n	80026c2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f043 030c 	orr.w	r3, r3, #12
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	e01a      	b.n	80026f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d303      	bcc.n	80026d2 <HAL_ETH_SetMDIOClockRange+0x62>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	4a11      	ldr	r2, [pc, #68]	; (8002714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d911      	bls.n	80026f6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d908      	bls.n	80026ec <HAL_ETH_SetMDIOClockRange+0x7c>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d804      	bhi.n	80026ec <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e005      	b.n	80026f8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 0310 	orr.w	r3, r3, #16
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e000      	b.n	80026f8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80026f6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	611a      	str	r2, [r3, #16]
}
 8002700:	bf00      	nop
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	01312cff 	.word	0x01312cff
 800270c:	02160ebf 	.word	0x02160ebf
 8002710:	03938700 	.word	0x03938700
 8002714:	05f5e0ff 	.word	0x05f5e0ff
 8002718:	08f0d17f 	.word	0x08f0d17f

0800271c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6812      	ldr	r2, [r2, #0]
 8002750:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002754:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002758:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff f888 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002776:	6193      	str	r3, [r2, #24]
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4b51      	ldr	r3, [pc, #324]	; (80028dc <ETH_SetMACConfig+0x15c>)
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	7c1b      	ldrb	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d102      	bne.n	80027a8 <ETH_SetMACConfig+0x28>
 80027a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027a6:	e000      	b.n	80027aa <ETH_SetMACConfig+0x2a>
 80027a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	7c5b      	ldrb	r3, [r3, #17]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <ETH_SetMACConfig+0x38>
 80027b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b6:	e000      	b.n	80027ba <ETH_SetMACConfig+0x3a>
 80027b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80027ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80027c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7fdb      	ldrb	r3, [r3, #31]
 80027c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80027c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80027ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	7f92      	ldrb	r2, [r2, #30]
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	d102      	bne.n	80027de <ETH_SetMACConfig+0x5e>
 80027d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027dc:	e000      	b.n	80027e0 <ETH_SetMACConfig+0x60>
 80027de:	2200      	movs	r2, #0
                        macconf->Speed |
 80027e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f1b      	ldrb	r3, [r3, #28]
 80027e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80027e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80027ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	791b      	ldrb	r3, [r3, #4]
 80027f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80027f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetMACConfig+0x88>
 8002802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002806:	e000      	b.n	800280a <ETH_SetMACConfig+0x8a>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800280a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	7bdb      	ldrb	r3, [r3, #15]
 8002810:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002812:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002818:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002820:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002822:	4313      	orrs	r3, r2
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff f81e 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002856:	4013      	ands	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002866:	2a00      	cmp	r2, #0
 8002868:	d101      	bne.n	800286e <ETH_SetMACConfig+0xee>
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	e000      	b.n	8002870 <ETH_SetMACConfig+0xf0>
 800286e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002870:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002876:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800287e:	2a01      	cmp	r2, #1
 8002880:	d101      	bne.n	8002886 <ETH_SetMACConfig+0x106>
 8002882:	2208      	movs	r2, #8
 8002884:	e000      	b.n	8002888 <ETH_SetMACConfig+0x108>
 8002886:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002888:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002890:	2a01      	cmp	r2, #1
 8002892:	d101      	bne.n	8002898 <ETH_SetMACConfig+0x118>
 8002894:	2204      	movs	r2, #4
 8002896:	e000      	b.n	800289a <ETH_SetMACConfig+0x11a>
 8002898:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80028a2:	2a01      	cmp	r2, #1
 80028a4:	d101      	bne.n	80028aa <ETH_SetMACConfig+0x12a>
 80028a6:	2202      	movs	r2, #2
 80028a8:	e000      	b.n	80028ac <ETH_SetMACConfig+0x12c>
 80028aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028ac:	4313      	orrs	r3, r2
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028c4:	2001      	movs	r0, #1
 80028c6:	f7fe ffd9 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	619a      	str	r2, [r3, #24]
}
 80028d2:	bf00      	nop
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	ff20810f 	.word	0xff20810f

080028e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <ETH_SetDMAConfig+0x110>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	7b1b      	ldrb	r3, [r3, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <ETH_SetDMAConfig+0x2c>
 8002906:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800290a:	e000      	b.n	800290e <ETH_SetDMAConfig+0x2e>
 800290c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	7b5b      	ldrb	r3, [r3, #13]
 8002912:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002914:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	7f52      	ldrb	r2, [r2, #29]
 800291a:	2a00      	cmp	r2, #0
 800291c:	d102      	bne.n	8002924 <ETH_SetDMAConfig+0x44>
 800291e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002922:	e000      	b.n	8002926 <ETH_SetDMAConfig+0x46>
 8002924:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002926:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	7b9b      	ldrb	r3, [r3, #14]
 800292c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800292e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002934:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	7f1b      	ldrb	r3, [r3, #28]
 800293a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800293c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	7f9b      	ldrb	r3, [r3, #30]
 8002942:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002944:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800294a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002952:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002954:	4313      	orrs	r3, r2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002964:	461a      	mov	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002976:	2001      	movs	r0, #1
 8002978:	f7fe ff80 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002984:	461a      	mov	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	791b      	ldrb	r3, [r3, #4]
 800298e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002994:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800299a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80029a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80029aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80029b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80029b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7fe ff51 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6013      	str	r3, [r2, #0]
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	f8de3f23 	.word	0xf8de3f23

080029f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b0a6      	sub	sp, #152	; 0x98
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a30:	2300      	movs	r3, #0
 8002a32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002a5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fe86 	bl	8002780 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002a74:	2301      	movs	r3, #1
 8002a76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002aa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002aa8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ab4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff ff08 	bl	80028e0 <ETH_SetDMAConfig>
}
 8002ad0:	bf00      	nop
 8002ad2:	3798      	adds	r7, #152	; 0x98
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3305      	adds	r3, #5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	3204      	adds	r2, #4
 8002af0:	7812      	ldrb	r2, [r2, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <ETH_MACAddressConfig+0x68>)
 8002afa:	4413      	add	r3, r2
 8002afc:	461a      	mov	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3303      	adds	r3, #3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	061a      	lsls	r2, r3, #24
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3301      	adds	r3, #1
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	7812      	ldrb	r2, [r2, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <ETH_MACAddressConfig+0x6c>)
 8002b2a:	4413      	add	r3, r2
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	6013      	str	r3, [r2, #0]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40028040 	.word	0x40028040
 8002b44:	40028044 	.word	0x40028044

08002b48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e03e      	b.n	8002bd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68d9      	ldr	r1, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	3206      	adds	r2, #6
 8002b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d80c      	bhi.n	8002bb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68d9      	ldr	r1, [r3, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	e004      	b.n	8002bc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d9bd      	bls.n	8002b56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bec:	611a      	str	r2, [r3, #16]
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e046      	b.n	8002c96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6919      	ldr	r1, [r3, #16]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	440b      	add	r3, r1
 8002c18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002c4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c5a:	68b9      	ldr	r1, [r7, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	3212      	adds	r2, #18
 8002c62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d80c      	bhi.n	8002c86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6919      	ldr	r1, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	e004      	b.n	8002c90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d9b5      	bls.n	8002c08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc6:	60da      	str	r2, [r3, #12]
}
 8002cc8:	bf00      	nop
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b08d      	sub	sp, #52	; 0x34
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d16:	d007      	beq.n	8002d28 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e103      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	3301      	adds	r3, #1
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002d44:	f023 031f 	bic.w	r3, r3, #31
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	6852      	ldr	r2, [r2, #4]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d005      	beq.n	8002da6 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002db2:	f3bf 8f5f 	dmb	sy
}
 8002db6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002dc4:	e084      	b.n	8002ed0 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002dc6:	6a3b      	ldr	r3, [r7, #32]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d006      	beq.n	8002de6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e005      	b.n	8002df2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	3301      	adds	r3, #1
 8002df6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d902      	bls.n	8002e04 <ETH_Prepare_Tx_Descriptors+0x130>
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	3b04      	subs	r3, #4
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e26:	d007      	beq.n	8002e38 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d029      	beq.n	8002e8c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e44:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	e019      	b.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002e4c:	f3bf 8f5f 	dmb	sy
}
 8002e50:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	3301      	adds	r3, #1
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	2b03      	cmp	r3, #3
 8002e68:	d902      	bls.n	8002e70 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6c:	3b04      	subs	r3, #4
 8002e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d3e1      	bcc.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e053      	b.n	8002f34 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	3301      	adds	r3, #1
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002eaa:	f023 031f 	bic.w	r3, r3, #31
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	6852      	ldr	r2, [r2, #4]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ebe:	f3bf 8f5f 	dmb	sy
}
 8002ec2:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af76 	bne.w	8002dc6 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d006      	beq.n	8002eee <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	e005      	b.n	8002efa <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f02:	6a3b      	ldr	r3, [r7, #32]
 8002f04:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f0a:	6979      	ldr	r1, [r7, #20]
 8002f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0e:	3304      	adds	r3, #4
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f1c:	b672      	cpsid	i
}
 8002f1e:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4413      	add	r3, r2
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002f2e:	b662      	cpsie	i
}
 8002f30:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3734      	adds	r7, #52	; 0x34
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	e16b      	b.n	8003234 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	f040 815a 	bne.w	800322e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d005      	beq.n	8002f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d130      	bne.n	8002ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc8:	2201      	movs	r2, #1
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	091b      	lsrs	r3, r3, #4
 8002fde:	f003 0201 	and.w	r2, r3, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d017      	beq.n	8003030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4313      	orrs	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d123      	bne.n	8003084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	08da      	lsrs	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3208      	adds	r2, #8
 8003044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	220f      	movs	r2, #15
 8003054:	fa02 f303 	lsl.w	r3, r2, r3
 8003058:	43db      	mvns	r3, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4013      	ands	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4313      	orrs	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	08da      	lsrs	r2, r3, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3208      	adds	r2, #8
 800307e:	69b9      	ldr	r1, [r7, #24]
 8003080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0203 	and.w	r2, r3, #3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 80b4 	beq.w	800322e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	4b60      	ldr	r3, [pc, #384]	; (800324c <HAL_GPIO_Init+0x30c>)
 80030cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ce:	4a5f      	ldr	r2, [pc, #380]	; (800324c <HAL_GPIO_Init+0x30c>)
 80030d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d4:	6453      	str	r3, [r2, #68]	; 0x44
 80030d6:	4b5d      	ldr	r3, [pc, #372]	; (800324c <HAL_GPIO_Init+0x30c>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030e2:	4a5b      	ldr	r2, [pc, #364]	; (8003250 <HAL_GPIO_Init+0x310>)
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	220f      	movs	r2, #15
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4013      	ands	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a52      	ldr	r2, [pc, #328]	; (8003254 <HAL_GPIO_Init+0x314>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d02b      	beq.n	8003166 <HAL_GPIO_Init+0x226>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a51      	ldr	r2, [pc, #324]	; (8003258 <HAL_GPIO_Init+0x318>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d025      	beq.n	8003162 <HAL_GPIO_Init+0x222>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a50      	ldr	r2, [pc, #320]	; (800325c <HAL_GPIO_Init+0x31c>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01f      	beq.n	800315e <HAL_GPIO_Init+0x21e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a4f      	ldr	r2, [pc, #316]	; (8003260 <HAL_GPIO_Init+0x320>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x21a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4e      	ldr	r2, [pc, #312]	; (8003264 <HAL_GPIO_Init+0x324>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x216>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4d      	ldr	r2, [pc, #308]	; (8003268 <HAL_GPIO_Init+0x328>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x212>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a4c      	ldr	r2, [pc, #304]	; (800326c <HAL_GPIO_Init+0x32c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x20e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a4b      	ldr	r2, [pc, #300]	; (8003270 <HAL_GPIO_Init+0x330>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x20a>
 8003146:	2307      	movs	r3, #7
 8003148:	e00e      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314a:	2308      	movs	r3, #8
 800314c:	e00c      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800314e:	2306      	movs	r3, #6
 8003150:	e00a      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003152:	2305      	movs	r3, #5
 8003154:	e008      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003156:	2304      	movs	r3, #4
 8003158:	e006      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315a:	2303      	movs	r3, #3
 800315c:	e004      	b.n	8003168 <HAL_GPIO_Init+0x228>
 800315e:	2302      	movs	r3, #2
 8003160:	e002      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_GPIO_Init+0x228>
 8003166:	2300      	movs	r3, #0
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f002 0203 	and.w	r2, r2, #3
 800316e:	0092      	lsls	r2, r2, #2
 8003170:	4093      	lsls	r3, r2
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003178:	4935      	ldr	r1, [pc, #212]	; (8003250 <HAL_GPIO_Init+0x310>)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	3302      	adds	r3, #2
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003186:	4b3b      	ldr	r3, [pc, #236]	; (8003274 <HAL_GPIO_Init+0x334>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031aa:	4a32      	ldr	r2, [pc, #200]	; (8003274 <HAL_GPIO_Init+0x334>)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_GPIO_Init+0x334>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031d4:	4a27      	ldr	r2, [pc, #156]	; (8003274 <HAL_GPIO_Init+0x334>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <HAL_GPIO_Init+0x334>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fe:	4a1d      	ldr	r2, [pc, #116]	; (8003274 <HAL_GPIO_Init+0x334>)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_GPIO_Init+0x334>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_GPIO_Init+0x334>)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3301      	adds	r3, #1
 8003232:	61fb      	str	r3, [r7, #28]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	2b0f      	cmp	r3, #15
 8003238:	f67f ae90 	bls.w	8002f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800
 8003250:	40013800 	.word	0x40013800
 8003254:	40020000 	.word	0x40020000
 8003258:	40020400 	.word	0x40020400
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00
 8003264:	40021000 	.word	0x40021000
 8003268:	40021400 	.word	0x40021400
 800326c:	40021800 	.word	0x40021800
 8003270:	40021c00 	.word	0x40021c00
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	807b      	strh	r3, [r7, #2]
 8003284:	4613      	mov	r3, r2
 8003286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003288:	787b      	ldrb	r3, [r7, #1]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328e:	887a      	ldrh	r2, [r7, #2]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003294:	e003      	b.n	800329e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	041a      	lsls	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	619a      	str	r2, [r3, #24]
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e12b      	b.n	8003516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fbbc 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003310:	f000 fd40 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8003314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a81      	ldr	r2, [pc, #516]	; (8003520 <HAL_I2C_Init+0x274>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d807      	bhi.n	8003330 <HAL_I2C_Init+0x84>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a80      	ldr	r2, [pc, #512]	; (8003524 <HAL_I2C_Init+0x278>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e006      	b.n	800333e <HAL_I2C_Init+0x92>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a7d      	ldr	r2, [pc, #500]	; (8003528 <HAL_I2C_Init+0x27c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0e7      	b.n	8003516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a78      	ldr	r2, [pc, #480]	; (800352c <HAL_I2C_Init+0x280>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_I2C_Init+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d802      	bhi.n	8003380 <HAL_I2C_Init+0xd4>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	e009      	b.n	8003394 <HAL_I2C_Init+0xe8>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a69      	ldr	r2, [pc, #420]	; (8003530 <HAL_I2C_Init+0x284>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	3301      	adds	r3, #1
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	495c      	ldr	r1, [pc, #368]	; (8003520 <HAL_I2C_Init+0x274>)
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d819      	bhi.n	80033e8 <HAL_I2C_Init+0x13c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e59      	subs	r1, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c8:	400b      	ands	r3, r1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_I2C_Init+0x138>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e59      	subs	r1, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	e051      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e04f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <HAL_I2C_Init+0x168>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e012      	b.n	800343a <HAL_I2C_Init+0x18e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Init+0x196>
 800343e:	2301      	movs	r3, #1
 8003440:	e022      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <HAL_I2C_Init+0x1bc>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e58      	subs	r0, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	440b      	add	r3, r1
 8003458:	fbb0 f3f3 	udiv	r3, r0, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	e00f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1e58      	subs	r0, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	0099      	lsls	r1, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6911      	ldr	r1, [r2, #16]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68d2      	ldr	r2, [r2, #12]
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	000186a0 	.word	0x000186a0
 8003524:	001e847f 	.word	0x001e847f
 8003528:	003d08ff 	.word	0x003d08ff
 800352c:	431bde83 	.word	0x431bde83
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e267      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d075      	beq.n	800363e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b04      	cmp	r3, #4
 800355c:	d00c      	beq.n	8003578 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800355e:	4b85      	ldr	r3, [pc, #532]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003566:	2b08      	cmp	r3, #8
 8003568:	d112      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356a:	4b82      	ldr	r3, [pc, #520]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003572:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003576:	d10b      	bne.n	8003590 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	4b7e      	ldr	r3, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d05b      	beq.n	800363c <HAL_RCC_OscConfig+0x108>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d157      	bne.n	800363c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e242      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d106      	bne.n	80035a8 <HAL_RCC_OscConfig+0x74>
 800359a:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a75      	ldr	r2, [pc, #468]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	e01d      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b70      	ldr	r3, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a6f      	ldr	r2, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b6d      	ldr	r3, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a6c      	ldr	r2, [pc, #432]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e00b      	b.n	80035e4 <HAL_RCC_OscConfig+0xb0>
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a68      	ldr	r2, [pc, #416]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80035de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d013      	beq.n	8003614 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe f93a 	bl	8001864 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe f936 	bl	8001864 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	; 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e207      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003606:	4b5b      	ldr	r3, [pc, #364]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0xc0>
 8003612:	e014      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fe f926 	bl	8001864 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800361c:	f7fe f922 	bl	8001864 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b64      	cmp	r3, #100	; 0x64
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1f3      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362e:	4b51      	ldr	r3, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0xe8>
 800363a:	e000      	b.n	800363e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d063      	beq.n	8003712 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003656:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365e:	2b08      	cmp	r3, #8
 8003660:	d11c      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003662:	4b44      	ldr	r3, [pc, #272]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d116      	bne.n	800369c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e1c7      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4937      	ldr	r1, [pc, #220]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369a:	e03a      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d020      	beq.n	80036e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a4:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036a6:	2201      	movs	r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036aa:	f7fe f8db 	bl	8001864 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b2:	f7fe f8d7 	bl	8001864 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e1a8      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c4:	4b2b      	ldr	r3, [pc, #172]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d0:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4925      	ldr	r1, [pc, #148]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	600b      	str	r3, [r1, #0]
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_RCC_OscConfig+0x244>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f8ba 	bl	8001864 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fe f8b6 	bl	8001864 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e187      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003706:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d036      	beq.n	800378c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003726:	4b15      	ldr	r3, [pc, #84]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003728:	2201      	movs	r2, #1
 800372a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe f89a 	bl	8001864 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003734:	f7fe f896 	bl	8001864 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e167      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_RCC_OscConfig+0x240>)
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x200>
 8003752:	e01b      	b.n	800378c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003754:	4b09      	ldr	r3, [pc, #36]	; (800377c <HAL_RCC_OscConfig+0x248>)
 8003756:	2200      	movs	r2, #0
 8003758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fe f883 	bl	8001864 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003760:	e00e      	b.n	8003780 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003762:	f7fe f87f 	bl	8001864 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d907      	bls.n	8003780 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e150      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 8003774:	40023800 	.word	0x40023800
 8003778:	42470000 	.word	0x42470000
 800377c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003780:	4b88      	ldr	r3, [pc, #544]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ea      	bne.n	8003762 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8097 	beq.w	80038c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379a:	2300      	movs	r3, #0
 800379c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800379e:	4b81      	ldr	r3, [pc, #516]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
 80037ae:	4b7d      	ldr	r3, [pc, #500]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a7c      	ldr	r2, [pc, #496]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b7a      	ldr	r3, [pc, #488]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	60bb      	str	r3, [r7, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037c6:	2301      	movs	r3, #1
 80037c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ca:	4b77      	ldr	r3, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d118      	bne.n	8003808 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037d6:	4b74      	ldr	r3, [pc, #464]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a73      	ldr	r2, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e2:	f7fe f83f 	bl	8001864 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ea:	f7fe f83b 	bl	8001864 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e10c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x474>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0x2ea>
 8003810:	4b64      	ldr	r3, [pc, #400]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a63      	ldr	r2, [pc, #396]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
 800381c:	e01c      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b05      	cmp	r3, #5
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x30c>
 8003826:	4b5f      	ldr	r3, [pc, #380]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382a:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6713      	str	r3, [r2, #112]	; 0x70
 8003832:	4b5c      	ldr	r3, [pc, #368]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	4a5b      	ldr	r2, [pc, #364]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	6713      	str	r3, [r2, #112]	; 0x70
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0x324>
 8003840:	4b58      	ldr	r3, [pc, #352]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a57      	ldr	r2, [pc, #348]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003846:	f023 0301 	bic.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003852:	f023 0304 	bic.w	r3, r3, #4
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d015      	beq.n	800388c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fe f800 	bl	8001864 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003866:	e00a      	b.n	800387e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003868:	f7fd fffc 	bl	8001864 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f241 3288 	movw	r2, #5000	; 0x1388
 8003876:	4293      	cmp	r3, r2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e0cb      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	4b49      	ldr	r3, [pc, #292]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0ee      	beq.n	8003868 <HAL_RCC_OscConfig+0x334>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388c:	f7fd ffea 	bl	8001864 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003892:	e00a      	b.n	80038aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003894:	f7fd ffe6 	bl	8001864 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e0b5      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038aa:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1ee      	bne.n	8003894 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d105      	bne.n	80038c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80a1 	beq.w	8003a14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d2:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d05c      	beq.n	8003998 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d141      	bne.n	800396a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fd ffba 	bl	8001864 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd ffb6 	bl	8001864 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e087      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	019b      	lsls	r3, r3, #6
 8003922:	431a      	orrs	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	085b      	lsrs	r3, r3, #1
 800392a:	3b01      	subs	r3, #1
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	061b      	lsls	r3, r3, #24
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800393e:	2201      	movs	r2, #1
 8003940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd ff8f 	bl	8001864 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003948:	e008      	b.n	800395c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394a:	f7fd ff8b 	bl	8001864 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	2b02      	cmp	r3, #2
 8003956:	d901      	bls.n	800395c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e05c      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395c:	4b11      	ldr	r3, [pc, #68]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0f0      	beq.n	800394a <HAL_RCC_OscConfig+0x416>
 8003968:	e054      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396a:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_RCC_OscConfig+0x478>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fd ff78 	bl	8001864 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7fd ff74 	bl	8001864 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e045      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <HAL_RCC_OscConfig+0x470>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x444>
 8003996:	e03d      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e038      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000
 80039ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b0:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <HAL_RCC_OscConfig+0x4ec>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d028      	beq.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d121      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11a      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e0:	4013      	ands	r3, r2
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d111      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	085b      	lsrs	r3, r3, #1
 80039f8:	3b01      	subs	r3, #1
 80039fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d107      	bne.n	8003a10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0cc      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b68      	ldr	r3, [pc, #416]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d90c      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b65      	ldr	r3, [pc, #404]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0b8      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d020      	beq.n	8003aae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a78:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a90:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a9c:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	494d      	ldr	r1, [pc, #308]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d044      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d119      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e07f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ade:	2b03      	cmp	r3, #3
 8003ae0:	d107      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae2:	4b3f      	ldr	r3, [pc, #252]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	4b3b      	ldr	r3, [pc, #236]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e067      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f023 0203 	bic.w	r2, r3, #3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4934      	ldr	r1, [pc, #208]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b14:	f7fd fea6 	bl	8001864 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b1c:	f7fd fea2 	bl	8001864 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04f      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	4b2b      	ldr	r3, [pc, #172]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 020c 	and.w	r2, r3, #12
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d1eb      	bne.n	8003b1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d20c      	bcs.n	8003b6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCC_ClockConfig+0x1b8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d001      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e032      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0304 	and.w	r3, r3, #4
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d008      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b78:	4b19      	ldr	r3, [pc, #100]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	4916      	ldr	r1, [pc, #88]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d009      	beq.n	8003baa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b96:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	490e      	ldr	r1, [pc, #56]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003baa:	f000 f821 	bl	8003bf0 <HAL_RCC_GetSysClockFreq>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	091b      	lsrs	r3, r3, #4
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	490a      	ldr	r1, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	5ccb      	ldrb	r3, [r1, r3]
 8003bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc2:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fd fa96 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40023c00 	.word	0x40023c00
 8003be0:	40023800 	.word	0x40023800
 8003be4:	08024550 	.word	0x08024550
 8003be8:	20000000 	.word	0x20000000
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf4:	b090      	sub	sp, #64	; 0x40
 8003bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	2300      	movs	r3, #0
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c04:	2300      	movs	r3, #0
 8003c06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c08:	4b59      	ldr	r3, [pc, #356]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	d00d      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x40>
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	f200 80a1 	bhi.w	8003d5c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d002      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c22:	e09b      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b53      	ldr	r3, [pc, #332]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c28:	e09b      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2e:	e098      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c30:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3a:	4b4d      	ldr	r3, [pc, #308]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d028      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c46:	4b4a      	ldr	r3, [pc, #296]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	627a      	str	r2, [r7, #36]	; 0x24
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c5c:	fb03 f201 	mul.w	r2, r3, r1
 8003c60:	2300      	movs	r3, #0
 8003c62:	fb00 f303 	mul.w	r3, r0, r3
 8003c66:	4413      	add	r3, r2
 8003c68:	4a43      	ldr	r2, [pc, #268]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c70:	460a      	mov	r2, r1
 8003c72:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	4413      	add	r3, r2
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61bb      	str	r3, [r7, #24]
 8003c80:	61fa      	str	r2, [r7, #28]
 8003c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c8a:	f7fc faf9 	bl	8000280 <__aeabi_uldivmod>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	460b      	mov	r3, r1
 8003c92:	4613      	mov	r3, r2
 8003c94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c96:	e053      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c98:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	099b      	lsrs	r3, r3, #6
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	617a      	str	r2, [r7, #20]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003caa:	f04f 0b00 	mov.w	fp, #0
 8003cae:	4652      	mov	r2, sl
 8003cb0:	465b      	mov	r3, fp
 8003cb2:	f04f 0000 	mov.w	r0, #0
 8003cb6:	f04f 0100 	mov.w	r1, #0
 8003cba:	0159      	lsls	r1, r3, #5
 8003cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc0:	0150      	lsls	r0, r2, #5
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cca:	eb63 090b 	sbc.w	r9, r3, fp
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ce2:	ebb2 0408 	subs.w	r4, r2, r8
 8003ce6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	00eb      	lsls	r3, r5, #3
 8003cf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf8:	00e2      	lsls	r2, r4, #3
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	461d      	mov	r5, r3
 8003cfe:	eb14 030a 	adds.w	r3, r4, sl
 8003d02:	603b      	str	r3, [r7, #0]
 8003d04:	eb45 030b 	adc.w	r3, r5, fp
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d16:	4629      	mov	r1, r5
 8003d18:	028b      	lsls	r3, r1, #10
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d20:	4621      	mov	r1, r4
 8003d22:	028a      	lsls	r2, r1, #10
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
 8003d2e:	60fa      	str	r2, [r7, #12]
 8003d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d34:	f7fc faa4 	bl	8000280 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0c1b      	lsrs	r3, r3, #16
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3740      	adds	r7, #64	; 0x40
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	017d7840 	.word	0x017d7840

08003d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d80:	4b03      	ldr	r3, [pc, #12]	; (8003d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d82:	681b      	ldr	r3, [r3, #0]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000000 	.word	0x20000000

08003d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d98:	f7ff fff0 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0a9b      	lsrs	r3, r3, #10
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08024560 	.word	0x08024560

08003dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dc0:	f7ff ffdc 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	0b5b      	lsrs	r3, r3, #13
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	4903      	ldr	r1, [pc, #12]	; (8003de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dd2:	5ccb      	ldrb	r3, [r1, r3]
 8003dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	08024560 	.word	0x08024560

08003de4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	220f      	movs	r2, #15
 8003df2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 0203 	and.w	r2, r3, #3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e00:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	08db      	lsrs	r3, r3, #3
 8003e1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_RCC_GetClockConfig+0x60>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	601a      	str	r2, [r3, #0]
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40023800 	.word	0x40023800
 8003e44:	40023c00 	.word	0x40023c00

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd f89a 	bl	8000fd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0104 	and.w	r1, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0210 	and.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_SPI_Transmit+0x22>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e12d      	b.n	80041d8 <HAL_SPI_Transmit+0x27e>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f84:	f7fd fc6e 	bl	8001864 <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9e:	e116      	b.n	80041ce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x52>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb0:	e10d      	b.n	80041ce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d14f      	bne.n	80040e2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0xf6>
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d142      	bne.n	80040d6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004074:	e02f      	b.n	80040d6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a8:	e015      	b.n	80040d6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fd fbdb 	bl	8001864 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x168>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x16e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d106      	bne.n	80040d6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80040d4:	e07b      	b.n	80041ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1ca      	bne.n	8004076 <HAL_SPI_Transmit+0x11c>
 80040e0:	e050      	b.n	8004184 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Transmit+0x196>
 80040ea:	8afb      	ldrh	r3, [r7, #22]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d144      	bne.n	800417a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	7812      	ldrb	r2, [r2, #0]
 80040fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004116:	e030      	b.n	800417a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b02      	cmp	r3, #2
 8004124:	d113      	bne.n	800414e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
 800414c:	e015      	b.n	800417a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414e:	f7fd fb89 	bl	8001864 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d803      	bhi.n	8004166 <HAL_SPI_Transmit+0x20c>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004164:	d102      	bne.n	800416c <HAL_SPI_Transmit+0x212>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004178:	e029      	b.n	80041ce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1c9      	bne.n	8004118 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	6839      	ldr	r1, [r7, #0]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 fbdf 	bl	800494c <SPI_EndRxTxTransaction>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041a2:	2300      	movs	r3, #0
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	77fb      	strb	r3, [r7, #31]
 80041c4:	e003      	b.n	80041ce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3720      	adds	r7, #32
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004200:	2302      	movs	r3, #2
 8004202:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004204:	e0fb      	b.n	80043fe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800420e:	d112      	bne.n	8004236 <HAL_SPI_Receive+0x56>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10e      	bne.n	8004236 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2204      	movs	r2, #4
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4613      	mov	r3, r2
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f8ef 	bl	8004410 <HAL_SPI_TransmitReceive>
 8004232:	4603      	mov	r3, r0
 8004234:	e0e8      	b.n	8004408 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_SPI_Receive+0x64>
 8004240:	2302      	movs	r3, #2
 8004242:	e0e1      	b.n	8004408 <HAL_SPI_Receive+0x228>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424c:	f7fd fb0a 	bl	8001864 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Receive+0x7e>
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d102      	bne.n	8004264 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004262:	e0cc      	b.n	80043fe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2204      	movs	r2, #4
 8004268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042aa:	d10f      	bne.n	80042cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b40      	cmp	r3, #64	; 0x40
 80042d8:	d007      	beq.n	80042ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d16a      	bne.n	80043c8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042f2:	e032      	b.n	800435a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d115      	bne.n	800432e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f103 020c 	add.w	r2, r3, #12
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	7812      	ldrb	r2, [r2, #0]
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800432c:	e015      	b.n	800435a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800432e:	f7fd fa99 	bl	8001864 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d803      	bhi.n	8004346 <HAL_SPI_Receive+0x166>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004344:	d102      	bne.n	800434c <HAL_SPI_Receive+0x16c>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004358:	e051      	b.n	80043fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1c7      	bne.n	80042f4 <HAL_SPI_Receive+0x114>
 8004364:	e035      	b.n	80043d2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b01      	cmp	r3, #1
 8004372:	d113      	bne.n	800439c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	b292      	uxth	r2, r2
 8004380:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	1c9a      	adds	r2, r3, #2
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	87da      	strh	r2, [r3, #62]	; 0x3e
 800439a:	e015      	b.n	80043c8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800439c:	f7fd fa62 	bl	8001864 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d803      	bhi.n	80043b4 <HAL_SPI_Receive+0x1d4>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Receive+0x1da>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80043c6:	e01a      	b.n	80043fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1c9      	bne.n	8004366 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	6839      	ldr	r1, [r7, #0]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fa52 	bl	8004880 <SPI_EndRxTransaction>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
 80043f4:	e003      	b.n	80043fe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004406:	7dfb      	ldrb	r3, [r7, #23]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08c      	sub	sp, #48	; 0x30
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800441e:	2301      	movs	r3, #1
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004422:	2300      	movs	r3, #0
 8004424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x26>
 8004432:	2302      	movs	r3, #2
 8004434:	e198      	b.n	8004768 <HAL_SPI_TransmitReceive+0x358>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800443e:	f7fd fa11 	bl	8001864 <HAL_GetTick>
 8004442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004454:	887b      	ldrh	r3, [r7, #2]
 8004456:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800445c:	2b01      	cmp	r3, #1
 800445e:	d00f      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x70>
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004466:	d107      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d103      	bne.n	8004478 <HAL_SPI_TransmitReceive+0x68>
 8004470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004474:	2b04      	cmp	r3, #4
 8004476:	d003      	beq.n	8004480 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004478:	2302      	movs	r3, #2
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800447e:	e16d      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x82>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x82>
 800448c:	887b      	ldrh	r3, [r7, #2]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d103      	bne.n	800449a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004498:	e160      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d003      	beq.n	80044ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2205      	movs	r2, #5
 80044aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	887a      	ldrh	r2, [r7, #2]
 80044d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ee:	2b40      	cmp	r3, #64	; 0x40
 80044f0:	d007      	beq.n	8004502 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450a:	d17c      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_SPI_TransmitReceive+0x10a>
 8004514:	8b7b      	ldrh	r3, [r7, #26]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d16a      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	881a      	ldrh	r2, [r3, #0]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	1c9a      	adds	r2, r3, #2
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	e057      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d11b      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x176>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d016      	beq.n	8004586 <HAL_SPI_TransmitReceive+0x176>
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d113      	bne.n	8004586 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	881a      	ldrh	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b01      	cmp	r3, #1
 8004592:	d119      	bne.n	80045c8 <HAL_SPI_TransmitReceive+0x1b8>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004598:	b29b      	uxth	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d014      	beq.n	80045c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	b292      	uxth	r2, r2
 80045aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	1c9a      	adds	r2, r3, #2
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c4:	2301      	movs	r3, #1
 80045c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045c8:	f7fd f94c 	bl	8001864 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d80b      	bhi.n	80045f0 <HAL_SPI_TransmitReceive+0x1e0>
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045de:	d007      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80045ee:	e0b5      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1a2      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x130>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d19d      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x130>
 8004604:	e080      	b.n	8004708 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_SPI_TransmitReceive+0x204>
 800460e:	8b7b      	ldrh	r3, [r7, #26]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d16f      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	7812      	ldrb	r2, [r2, #0]
 8004620:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463a:	e05b      	b.n	80046f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b02      	cmp	r3, #2
 8004648:	d11c      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x274>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d017      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x274>
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d114      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d119      	bne.n	80046c6 <HAL_SPI_TransmitReceive+0x2b6>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d014      	beq.n	80046c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c2:	2301      	movs	r3, #1
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046c6:	f7fd f8cd 	bl	8001864 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d803      	bhi.n	80046de <HAL_SPI_TransmitReceive+0x2ce>
 80046d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046dc:	d102      	bne.n	80046e4 <HAL_SPI_TransmitReceive+0x2d4>
 80046de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80046f2:	e033      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d19e      	bne.n	800463c <HAL_SPI_TransmitReceive+0x22c>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d199      	bne.n	800463c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f91d 	bl	800494c <SPI_EndRxTxTransaction>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004724:	e01a      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10a      	bne.n	8004744 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004752:	e003      	b.n	800475c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004764:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004768:	4618      	mov	r0, r3
 800476a:	3730      	adds	r7, #48	; 0x30
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004780:	f7fd f870 	bl	8001864 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004790:	f7fd f868 	bl	8001864 <HAL_GetTick>
 8004794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	015b      	lsls	r3, r3, #5
 800479c:	0d1b      	lsrs	r3, r3, #20
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a6:	e054      	b.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ae:	d050      	beq.n	8004852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047b0:	f7fd f858 	bl	8001864 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d902      	bls.n	80047c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d13d      	bne.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047de:	d111      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047e8:	d004      	beq.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f2:	d107      	bne.n	8004804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480c:	d10f      	bne.n	800482e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e017      	b.n	8004872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	3b01      	subs	r3, #1
 8004850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4013      	ands	r3, r2
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	429a      	cmp	r2, r3
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	429a      	cmp	r2, r3
 800486e:	d19b      	bne.n	80047a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3720      	adds	r7, #32
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000000 	.word	0x20000000

08004880 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004894:	d111      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489e:	d004      	beq.n	80048aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a8:	d107      	bne.n	80048ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c2:	d12a      	bne.n	800491a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048cc:	d012      	beq.n	80048f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff49 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d02d      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e026      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	2101      	movs	r1, #1
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff36 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d01a      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e013      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	2101      	movs	r1, #1
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff ff23 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e000      	b.n	8004942 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2201      	movs	r2, #1
 8004960:	2102      	movs	r1, #2
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7ff ff04 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	f043 0220 	orr.w	r2, r3, #32
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e032      	b.n	80049e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800497e:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <SPI_EndRxTxTransaction+0xa0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1b      	ldr	r2, [pc, #108]	; (80049f0 <SPI_EndRxTxTransaction+0xa4>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	0d5b      	lsrs	r3, r3, #21
 800498a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800499c:	d112      	bne.n	80049c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff fee1 	bl	8004770 <SPI_WaitFlagStateUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d016      	beq.n	80049e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e00f      	b.n	80049e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d0f2      	beq.n	80049c4 <SPI_EndRxTxTransaction+0x78>
 80049de:	e000      	b.n	80049e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80049e0:	bf00      	nop
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000000 	.word	0x20000000
 80049f0:	165e9f81 	.word	0x165e9f81

080049f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e041      	b.n	8004a8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f839 	bl	8004a92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f000 f9c0 	bl	8004db8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
	...

08004aa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e04e      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f042 0201 	orr.w	r2, r2, #1
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <HAL_TIM_Base_Start_IT+0xc4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aea:	d01d      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a1f      	ldr	r2, [pc, #124]	; (8004b70 <HAL_TIM_Base_Start_IT+0xc8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a1e      	ldr	r2, [pc, #120]	; (8004b74 <HAL_TIM_Base_Start_IT+0xcc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a1c      	ldr	r2, [pc, #112]	; (8004b78 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a1b      	ldr	r2, [pc, #108]	; (8004b7c <HAL_TIM_Base_Start_IT+0xd4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a18      	ldr	r2, [pc, #96]	; (8004b84 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d010      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e007      	b.n	8004b5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	40010000 	.word	0x40010000
 8004b70:	40000400 	.word	0x40000400
 8004b74:	40000800 	.word	0x40000800
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	40010400 	.word	0x40010400
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40001800 	.word	0x40001800

08004b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d020      	beq.n	8004bec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d01b      	beq.n	8004bec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0202 	mvn.w	r2, #2
 8004bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f8d2 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004bd8:	e005      	b.n	8004be6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f8c4 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8d5 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d020      	beq.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d01b      	beq.n	8004c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f06f 0204 	mvn.w	r2, #4
 8004c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 f8ac 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004c24:	e005      	b.n	8004c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f89e 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8af 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d020      	beq.n	8004c84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d01b      	beq.n	8004c84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0208 	mvn.w	r2, #8
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f886 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f878 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f889 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d020      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0210 	mvn.w	r2, #16
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f860 	bl	8004d7c <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f852 	bl	8004d68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f863 	bl	8004d90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00c      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d007      	beq.n	8004cf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0201 	mvn.w	r2, #1
 8004cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc f922 	bl	8000f38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00c      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f906 	bl	8004f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00c      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f834 	bl	8004da4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00c      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d007      	beq.n	8004d60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f06f 0220 	mvn.w	r2, #32
 8004d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f8d8 	bl	8004f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a46      	ldr	r2, [pc, #280]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd6:	d00f      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a43      	ldr	r2, [pc, #268]	; (8004ee8 <TIM_Base_SetConfig+0x130>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a42      	ldr	r2, [pc, #264]	; (8004eec <TIM_Base_SetConfig+0x134>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <TIM_Base_SetConfig+0x138>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0x40>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a40      	ldr	r2, [pc, #256]	; (8004ef4 <TIM_Base_SetConfig+0x13c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d108      	bne.n	8004e0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a35      	ldr	r2, [pc, #212]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e18:	d027      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <TIM_Base_SetConfig+0x130>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d023      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a31      	ldr	r2, [pc, #196]	; (8004eec <TIM_Base_SetConfig+0x134>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01f      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a30      	ldr	r2, [pc, #192]	; (8004ef0 <TIM_Base_SetConfig+0x138>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2f      	ldr	r2, [pc, #188]	; (8004ef4 <TIM_Base_SetConfig+0x13c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d017      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2e      	ldr	r2, [pc, #184]	; (8004ef8 <TIM_Base_SetConfig+0x140>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2d      	ldr	r2, [pc, #180]	; (8004efc <TIM_Base_SetConfig+0x144>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2c      	ldr	r2, [pc, #176]	; (8004f00 <TIM_Base_SetConfig+0x148>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2b      	ldr	r2, [pc, #172]	; (8004f04 <TIM_Base_SetConfig+0x14c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a2a      	ldr	r2, [pc, #168]	; (8004f08 <TIM_Base_SetConfig+0x150>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0xb2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a29      	ldr	r2, [pc, #164]	; (8004f0c <TIM_Base_SetConfig+0x154>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a10      	ldr	r2, [pc, #64]	; (8004ee4 <TIM_Base_SetConfig+0x12c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0xf8>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <TIM_Base_SetConfig+0x13c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d103      	bne.n	8004eb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d105      	bne.n	8004ed6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	611a      	str	r2, [r3, #16]
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	40000400 	.word	0x40000400
 8004eec:	40000800 	.word	0x40000800
 8004ef0:	40000c00 	.word	0x40000c00
 8004ef4:	40010400 	.word	0x40010400
 8004ef8:	40014000 	.word	0x40014000
 8004efc:	40014400 	.word	0x40014400
 8004f00:	40014800 	.word	0x40014800
 8004f04:	40001800 	.word	0x40001800
 8004f08:	40001c00 	.word	0x40001c00
 8004f0c:	40002000 	.word	0x40002000

08004f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e042      	b.n	8004fd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7fc fa78 	bl	8001454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2224      	movs	r2, #36	; 0x24
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68da      	ldr	r2, [r3, #12]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f82b 	bl	8004fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b0c0      	sub	sp, #256	; 0x100
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	ea40 0301 	orr.w	r3, r0, r1
 8005000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005030:	f021 010c 	bic.w	r1, r1, #12
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800503e:	430b      	orrs	r3, r1
 8005040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005052:	6999      	ldr	r1, [r3, #24]
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	ea40 0301 	orr.w	r3, r0, r1
 800505e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b8f      	ldr	r3, [pc, #572]	; (80052a4 <UART_SetConfig+0x2cc>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d005      	beq.n	8005078 <UART_SetConfig+0xa0>
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8d      	ldr	r3, [pc, #564]	; (80052a8 <UART_SetConfig+0x2d0>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe fea0 	bl	8003dbc <HAL_RCC_GetPCLK2Freq>
 800507c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005080:	e003      	b.n	800508a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005082:	f7fe fe87 	bl	8003d94 <HAL_RCC_GetPCLK1Freq>
 8005086:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005094:	f040 810c 	bne.w	80052b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80050b2:	415b      	adcs	r3, r3
 80050b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ba:	4621      	mov	r1, r4
 80050bc:	eb12 0801 	adds.w	r8, r2, r1
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb43 0901 	adc.w	r9, r3, r1
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050da:	4690      	mov	r8, r2
 80050dc:	4699      	mov	r9, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	eb18 0303 	adds.w	r3, r8, r3
 80050e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050e8:	462b      	mov	r3, r5
 80050ea:	eb49 0303 	adc.w	r3, r9, r3
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80050fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005106:	460b      	mov	r3, r1
 8005108:	18db      	adds	r3, r3, r3
 800510a:	653b      	str	r3, [r7, #80]	; 0x50
 800510c:	4613      	mov	r3, r2
 800510e:	eb42 0303 	adc.w	r3, r2, r3
 8005112:	657b      	str	r3, [r7, #84]	; 0x54
 8005114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800511c:	f7fb f8b0 	bl	8000280 <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b61      	ldr	r3, [pc, #388]	; (80052ac <UART_SetConfig+0x2d4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005138:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800513c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	64b9      	str	r1, [r7, #72]	; 0x48
 8005148:	415b      	adcs	r3, r3
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800514c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005150:	4641      	mov	r1, r8
 8005152:	eb12 0a01 	adds.w	sl, r2, r1
 8005156:	4649      	mov	r1, r9
 8005158:	eb43 0b01 	adc.w	fp, r3, r1
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800516c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005170:	4692      	mov	sl, r2
 8005172:	469b      	mov	fp, r3
 8005174:	4643      	mov	r3, r8
 8005176:	eb1a 0303 	adds.w	r3, sl, r3
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800517e:	464b      	mov	r3, r9
 8005180:	eb4b 0303 	adc.w	r3, fp, r3
 8005184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005194:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	643b      	str	r3, [r7, #64]	; 0x40
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051b2:	f7fb f865 	bl	8000280 <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <UART_SetConfig+0x2d4>)
 80051be:	fba3 2301 	umull	r2, r3, r3, r1
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2264      	movs	r2, #100	; 0x64
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	1acb      	subs	r3, r1, r3
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051d2:	4b36      	ldr	r3, [pc, #216]	; (80052ac <UART_SetConfig+0x2d4>)
 80051d4:	fba3 2302 	umull	r2, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051e0:	441c      	add	r4, r3
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80051f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80051fc:	415b      	adcs	r3, r3
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6339      	str	r1, [r7, #48]	; 0x30
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005250:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	62bb      	str	r3, [r7, #40]	; 0x28
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800526a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800526e:	f7fb f807 	bl	8000280 <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <UART_SetConfig+0x2d4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	; 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	; 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	; (80052ac <UART_SetConfig+0x2d4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a0:	e106      	b.n	80054b0 <UART_SetConfig+0x4d8>
 80052a2:	bf00      	nop
 80052a4:	40011000 	.word	0x40011000
 80052a8:	40011400 	.word	0x40011400
 80052ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052c2:	4642      	mov	r2, r8
 80052c4:	464b      	mov	r3, r9
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	6239      	str	r1, [r7, #32]
 80052ca:	415b      	adcs	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052d2:	4641      	mov	r1, r8
 80052d4:	1854      	adds	r4, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0501 	adc.w	r5, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	00eb      	lsls	r3, r5, #3
 80052e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ea:	00e2      	lsls	r2, r4, #3
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	4643      	mov	r3, r8
 80052f2:	18e3      	adds	r3, r4, r3
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052f8:	464b      	mov	r3, r9
 80052fa:	eb45 0303 	adc.w	r3, r5, r3
 80052fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800530e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800531e:	4629      	mov	r1, r5
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005328:	4621      	mov	r1, r4
 800532a:	008a      	lsls	r2, r1, #2
 800532c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005330:	f7fa ffa6 	bl	8000280 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b60      	ldr	r3, [pc, #384]	; (80054bc <UART_SetConfig+0x4e4>)
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011c      	lsls	r4, r3, #4
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800534c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	61b9      	str	r1, [r7, #24]
 800535c:	415b      	adcs	r3, r3
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	6139      	str	r1, [r7, #16]
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053ce:	f7fa ff57 	bl	8000280 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b38      	ldr	r3, [pc, #224]	; (80054bc <UART_SetConfig+0x4e4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	; 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	; 0x32
 80053ec:	4a33      	ldr	r2, [pc, #204]	; (80054bc <UART_SetConfig+0x4e4>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f8:	441c      	add	r4, r3
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	673b      	str	r3, [r7, #112]	; 0x70
 8005402:	677a      	str	r2, [r7, #116]	; 0x74
 8005404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	415b      	adcs	r3, r3
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005418:	4641      	mov	r1, r8
 800541a:	1851      	adds	r1, r2, r1
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	4649      	mov	r1, r9
 8005420:	414b      	adcs	r3, r1
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005430:	4659      	mov	r1, fp
 8005432:	00cb      	lsls	r3, r1, #3
 8005434:	4651      	mov	r1, sl
 8005436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543a:	4651      	mov	r1, sl
 800543c:	00ca      	lsls	r2, r1, #3
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	4603      	mov	r3, r0
 8005444:	4642      	mov	r2, r8
 8005446:	189b      	adds	r3, r3, r2
 8005448:	66bb      	str	r3, [r7, #104]	; 0x68
 800544a:	464b      	mov	r3, r9
 800544c:	460a      	mov	r2, r1
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	663b      	str	r3, [r7, #96]	; 0x60
 800545e:	667a      	str	r2, [r7, #100]	; 0x64
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800546c:	4649      	mov	r1, r9
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	4641      	mov	r1, r8
 8005472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005476:	4641      	mov	r1, r8
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800547e:	f7fa feff 	bl	8000280 <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <UART_SetConfig+0x4e4>)
 8005488:	fba3 1302 	umull	r1, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	2164      	movs	r1, #100	; 0x64
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	3332      	adds	r3, #50	; 0x32
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <UART_SetConfig+0x4e4>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4422      	add	r2, r4
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054b6:	46bd      	mov	sp, r7
 80054b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054bc:	51eb851f 	.word	0x51eb851f

080054c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80054c0:	b5b0      	push	{r4, r5, r7, lr}
 80054c2:	b08c      	sub	sp, #48	; 0x30
 80054c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80054c6:	2100      	movs	r1, #0
 80054c8:	2000      	movs	r0, #0
 80054ca:	f00b fc99 	bl	8010e00 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <MX_LWIP_Init+0x78>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80054d4:	4b19      	ldr	r3, [pc, #100]	; (800553c <MX_LWIP_Init+0x7c>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <MX_LWIP_Init+0x80>)
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80054e0:	4b18      	ldr	r3, [pc, #96]	; (8005544 <MX_LWIP_Init+0x84>)
 80054e2:	9302      	str	r3, [sp, #8]
 80054e4:	4b18      	ldr	r3, [pc, #96]	; (8005548 <MX_LWIP_Init+0x88>)
 80054e6:	9301      	str	r3, [sp, #4]
 80054e8:	2300      	movs	r3, #0
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <MX_LWIP_Init+0x80>)
 80054ee:	4a13      	ldr	r2, [pc, #76]	; (800553c <MX_LWIP_Init+0x7c>)
 80054f0:	4911      	ldr	r1, [pc, #68]	; (8005538 <MX_LWIP_Init+0x78>)
 80054f2:	4816      	ldr	r0, [pc, #88]	; (800554c <MX_LWIP_Init+0x8c>)
 80054f4:	f00c fa4e 	bl	8011994 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80054f8:	4814      	ldr	r0, [pc, #80]	; (800554c <MX_LWIP_Init+0x8c>)
 80054fa:	f00c fc05 	bl	8011d08 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80054fe:	4813      	ldr	r0, [pc, #76]	; (800554c <MX_LWIP_Init+0x8c>)
 8005500:	f00c fc12 	bl	8011d28 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005504:	4912      	ldr	r1, [pc, #72]	; (8005550 <MX_LWIP_Init+0x90>)
 8005506:	4811      	ldr	r0, [pc, #68]	; (800554c <MX_LWIP_Init+0x8c>)
 8005508:	f00c fd14 	bl	8011f34 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 1024);
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <MX_LWIP_Init+0x94>)
 800550e:	1d3c      	adds	r4, r7, #4
 8005510:	461d      	mov	r5, r3
 8005512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800551a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800551e:	1d3b      	adds	r3, r7, #4
 8005520:	490a      	ldr	r1, [pc, #40]	; (800554c <MX_LWIP_Init+0x8c>)
 8005522:	4618      	mov	r0, r3
 8005524:	f000 fd20 	bl	8005f68 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005528:	4808      	ldr	r0, [pc, #32]	; (800554c <MX_LWIP_Init+0x8c>)
 800552a:	f014 fe0b 	bl	801a144 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800552e:	bf00      	nop
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bdb0      	pop	{r4, r5, r7, pc}
 8005536:	bf00      	nop
 8005538:	20000688 	.word	0x20000688
 800553c:	2000068c 	.word	0x2000068c
 8005540:	20000690 	.word	0x20000690
 8005544:	08010d11 	.word	0x08010d11
 8005548:	08005a31 	.word	0x08005a31
 800554c:	20000650 	.word	0x20000650
 8005550:	08005559 	.word	0x08005559
 8005554:	0802020c 	.word	0x0802020c

08005558 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_ETH_RxCpltCallback+0x1c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fe71 	bl	8006260 <osSemaphoreRelease>
}
 800557e:	bf00      	nop
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20005160 	.word	0x20005160

0800558c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <HAL_ETH_TxCpltCallback+0x1c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fe61 	bl	8006260 <osSemaphoreRelease>
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20005164 	.word	0x20005164

080055ac <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fd f8b1 	bl	800271c <HAL_ETH_GetDMAError>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c0:	2b80      	cmp	r3, #128	; 0x80
 80055c2:	d104      	bne.n	80055ce <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80055c4:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <HAL_ETH_ErrorCallback+0x2c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4618      	mov	r0, r3
 80055ca:	f000 fe49 	bl	8006260 <osSemaphoreRelease>
  }
}
 80055ce:	bf00      	nop
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	20005160 	.word	0x20005160

080055dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80055dc:	b5b0      	push	{r4, r5, r7, lr}
 80055de:	b0ac      	sub	sp, #176	; 0xb0
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80055f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80055fa:	2264      	movs	r2, #100	; 0x64
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f019 fd66 	bl	801f0d0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005604:	4b90      	ldr	r3, [pc, #576]	; (8005848 <low_level_init+0x26c>)
 8005606:	4a91      	ldr	r2, [pc, #580]	; (800584c <low_level_init+0x270>)
 8005608:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 800560a:	23ae      	movs	r3, #174	; 0xae
 800560c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 8005610:	2304      	movs	r3, #4
 8005612:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8005616:	2365      	movs	r3, #101	; 0x65
 8005618:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 800561c:	2311      	movs	r3, #17
 800561e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 8005622:	23c2      	movs	r3, #194	; 0xc2
 8005624:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8005628:	23d9      	movs	r3, #217	; 0xd9
 800562a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800562e:	4a86      	ldr	r2, [pc, #536]	; (8005848 <low_level_init+0x26c>)
 8005630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005634:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005636:	4b84      	ldr	r3, [pc, #528]	; (8005848 <low_level_init+0x26c>)
 8005638:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800563c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800563e:	4b82      	ldr	r3, [pc, #520]	; (8005848 <low_level_init+0x26c>)
 8005640:	4a83      	ldr	r2, [pc, #524]	; (8005850 <low_level_init+0x274>)
 8005642:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005644:	4b80      	ldr	r3, [pc, #512]	; (8005848 <low_level_init+0x26c>)
 8005646:	4a83      	ldr	r2, [pc, #524]	; (8005854 <low_level_init+0x278>)
 8005648:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800564a:	4b7f      	ldr	r3, [pc, #508]	; (8005848 <low_level_init+0x26c>)
 800564c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005650:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005652:	487d      	ldr	r0, [pc, #500]	; (8005848 <low_level_init+0x26c>)
 8005654:	f7fc fa18 	bl	8001a88 <HAL_ETH_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800565e:	2238      	movs	r2, #56	; 0x38
 8005660:	2100      	movs	r1, #0
 8005662:	487d      	ldr	r0, [pc, #500]	; (8005858 <low_level_init+0x27c>)
 8005664:	f019 fd34 	bl	801f0d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005668:	4b7b      	ldr	r3, [pc, #492]	; (8005858 <low_level_init+0x27c>)
 800566a:	2221      	movs	r2, #33	; 0x21
 800566c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800566e:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <low_level_init+0x27c>)
 8005670:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005674:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005676:	4b78      	ldr	r3, [pc, #480]	; (8005858 <low_level_init+0x27c>)
 8005678:	2200      	movs	r2, #0
 800567a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800567c:	4877      	ldr	r0, [pc, #476]	; (800585c <low_level_init+0x280>)
 800567e:	f00c f843 	bl	8011708 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2206      	movs	r2, #6
 8005686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800568a:	4b6f      	ldr	r3, [pc, #444]	; (8005848 <low_level_init+0x26c>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	781a      	ldrb	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005696:	4b6c      	ldr	r3, [pc, #432]	; (8005848 <low_level_init+0x26c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	785a      	ldrb	r2, [r3, #1]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80056a2:	4b69      	ldr	r3, [pc, #420]	; (8005848 <low_level_init+0x26c>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	789a      	ldrb	r2, [r3, #2]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80056ae:	4b66      	ldr	r3, [pc, #408]	; (8005848 <low_level_init+0x26c>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	78da      	ldrb	r2, [r3, #3]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80056ba:	4b63      	ldr	r3, [pc, #396]	; (8005848 <low_level_init+0x26c>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	791a      	ldrb	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80056c6:	4b60      	ldr	r3, [pc, #384]	; (8005848 <low_level_init+0x26c>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	795a      	ldrb	r2, [r3, #5]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80056d8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056e0:	f043 030a 	orr.w	r3, r3, #10
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f0:	2300      	movs	r3, #0
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80056f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056f8:	2101      	movs	r1, #1
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fd30 	bl	8006160 <osSemaphoreCreate>
 8005700:	4603      	mov	r3, r0
 8005702:	4a57      	ldr	r2, [pc, #348]	; (8005860 <low_level_init+0x284>)
 8005704:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	2300      	movs	r3, #0
 800570c:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800570e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005712:	2101      	movs	r1, #1
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fd23 	bl	8006160 <osSemaphoreCreate>
 800571a:	4603      	mov	r3, r0
 800571c:	4a51      	ldr	r2, [pc, #324]	; (8005864 <low_level_init+0x288>)
 800571e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8005720:	4b4f      	ldr	r3, [pc, #316]	; (8005860 <low_level_init+0x284>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fd4c 	bl	80061c4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800572c:	4b4d      	ldr	r3, [pc, #308]	; (8005864 <low_level_init+0x288>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fd46 	bl	80061c4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005738:	4b4b      	ldr	r3, [pc, #300]	; (8005868 <low_level_init+0x28c>)
 800573a:	f107 0408 	add.w	r4, r7, #8
 800573e:	461d      	mov	r5, r3
 8005740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fc08 	bl	8005f68 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8005758:	4944      	ldr	r1, [pc, #272]	; (800586c <low_level_init+0x290>)
 800575a:	4845      	ldr	r0, [pc, #276]	; (8005870 <low_level_init+0x294>)
 800575c:	f7fb feeb 	bl	8001536 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8005760:	4843      	ldr	r0, [pc, #268]	; (8005870 <low_level_init+0x294>)
 8005762:	f7fb ff1a 	bl	800159a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8005766:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d165      	bne.n	800583a <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800576e:	4840      	ldr	r0, [pc, #256]	; (8005870 <low_level_init+0x294>)
 8005770:	f7fb ffbb 	bl	80016ea <DP83848_GetLinkState>
 8005774:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8005778:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800577c:	2b01      	cmp	r3, #1
 800577e:	dc06      	bgt.n	800578e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f00c fba7 	bl	8011ed4 <netif_set_link_down>
      netif_set_down(netif);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f00c fb3a 	bl	8011e00 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800578c:	e057      	b.n	800583e <low_level_init+0x262>
      switch (PHYLinkState)
 800578e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005792:	3b02      	subs	r3, #2
 8005794:	2b03      	cmp	r3, #3
 8005796:	d82b      	bhi.n	80057f0 <low_level_init+0x214>
 8005798:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <low_level_init+0x1c4>)
 800579a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579e:	bf00      	nop
 80057a0:	080057b1 	.word	0x080057b1
 80057a4:	080057c3 	.word	0x080057c3
 80057a8:	080057d3 	.word	0x080057d3
 80057ac:	080057e3 	.word	0x080057e3
        duplex = ETH_FULLDUPLEX_MODE;
 80057b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80057b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80057c0:	e01f      	b.n	8005802 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80057c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80057d0:	e017      	b.n	8005802 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80057d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80057da:	2300      	movs	r3, #0
 80057dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80057e0:	e00f      	b.n	8005802 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80057ee:	e008      	b.n	8005802 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80057f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80057f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8005800:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005806:	4619      	mov	r1, r3
 8005808:	480f      	ldr	r0, [pc, #60]	; (8005848 <low_level_init+0x26c>)
 800580a:	f7fc fe2d 	bl	8002468 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8005814:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800581a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800581e:	4619      	mov	r1, r3
 8005820:	4809      	ldr	r0, [pc, #36]	; (8005848 <low_level_init+0x26c>)
 8005822:	f7fc ff0b 	bl	800263c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005826:	4808      	ldr	r0, [pc, #32]	; (8005848 <low_level_init+0x26c>)
 8005828:	f7fc f9ac 	bl	8001b84 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f00c fa7b 	bl	8011d28 <netif_set_up>
    netif_set_link_up(netif);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f00c fb16 	bl	8011e64 <netif_set_link_up>
}
 8005838:	e001      	b.n	800583e <low_level_init+0x262>
    Error_Handler();
 800583a:	f7fb fb8f 	bl	8000f5c <Error_Handler>
}
 800583e:	bf00      	nop
 8005840:	37b0      	adds	r7, #176	; 0xb0
 8005842:	46bd      	mov	sp, r7
 8005844:	bdb0      	pop	{r4, r5, r7, pc}
 8005846:	bf00      	nop
 8005848:	20005168 	.word	0x20005168
 800584c:	40028000 	.word	0x40028000
 8005850:	200050c0 	.word	0x200050c0
 8005854:	20005020 	.word	0x20005020
 8005858:	20005218 	.word	0x20005218
 800585c:	08024568 	.word	0x08024568
 8005860:	20005160 	.word	0x20005160
 8005864:	20005164 	.word	0x20005164
 8005868:	08020230 	.word	0x08020230
 800586c:	2000000c 	.word	0x2000000c
 8005870:	20005250 	.word	0x20005250

08005874 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b092      	sub	sp, #72	; 0x48
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800588c:	f107 030c 	add.w	r3, r7, #12
 8005890:	2230      	movs	r2, #48	; 0x30
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f019 fc1b 	bl	801f0d0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800589a:	f107 030c 	add.w	r3, r7, #12
 800589e:	2230      	movs	r2, #48	; 0x30
 80058a0:	2100      	movs	r1, #0
 80058a2:	4618      	mov	r0, r3
 80058a4:	f019 fc14 	bl	801f0d0 <memset>

  for(q = p; q != NULL; q = q->next)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
 80058ac:	e045      	b.n	800593a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80058ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d902      	bls.n	80058ba <low_level_output+0x46>
      return ERR_IF;
 80058b4:	f06f 030b 	mvn.w	r3, #11
 80058b8:	e06c      	b.n	8005994 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80058ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058c0:	4613      	mov	r3, r2
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	3348      	adds	r3, #72	; 0x48
 80058ca:	443b      	add	r3, r7
 80058cc:	3b3c      	subs	r3, #60	; 0x3c
 80058ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80058d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d2:	895b      	ldrh	r3, [r3, #10]
 80058d4:	4619      	mov	r1, r3
 80058d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	3348      	adds	r3, #72	; 0x48
 80058e2:	443b      	add	r3, r7
 80058e4:	3b38      	subs	r3, #56	; 0x38
 80058e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80058e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d011      	beq.n	8005912 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80058ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	f107 000c 	add.w	r0, r7, #12
 80058f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058f8:	460b      	mov	r3, r1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	18c1      	adds	r1, r0, r3
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	3348      	adds	r3, #72	; 0x48
 800590c:	443b      	add	r3, r7
 800590e:	3b34      	subs	r3, #52	; 0x34
 8005910:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d109      	bne.n	800592e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800591a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591c:	4613      	mov	r3, r2
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	4413      	add	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	3348      	adds	r3, #72	; 0x48
 8005926:	443b      	add	r3, r7
 8005928:	3b34      	subs	r3, #52	; 0x34
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800592e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005930:	3301      	adds	r3, #1
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	643b      	str	r3, [r7, #64]	; 0x40
 800593a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	d1b6      	bne.n	80058ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	891b      	ldrh	r3, [r3, #8]
 8005944:	461a      	mov	r2, r3
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <low_level_output+0x128>)
 8005948:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800594a:	4a14      	ldr	r2, [pc, #80]	; (800599c <low_level_output+0x128>)
 800594c:	f107 030c 	add.w	r3, r7, #12
 8005950:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005952:	4a12      	ldr	r2, [pc, #72]	; (800599c <low_level_output+0x128>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005958:	6838      	ldr	r0, [r7, #0]
 800595a:	f00c ff77 	bl	801284c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800595e:	490f      	ldr	r1, [pc, #60]	; (800599c <low_level_output+0x128>)
 8005960:	480f      	ldr	r0, [pc, #60]	; (80059a0 <low_level_output+0x12c>)
 8005962:	f7fc fa1c 	bl	8001d9e <HAL_ETH_Transmit_IT>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10e      	bne.n	800598a <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800596c:	bf00      	nop
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <low_level_output+0x130>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005976:	4618      	mov	r0, r3
 8005978:	f000 fc24 	bl	80061c4 <osSemaphoreWait>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1f5      	bne.n	800596e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8005982:	4807      	ldr	r0, [pc, #28]	; (80059a0 <low_level_output+0x12c>)
 8005984:	f7fc fbaa 	bl	80020dc <HAL_ETH_ReleaseTxPacket>
 8005988:	e002      	b.n	8005990 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800598a:	6838      	ldr	r0, [r7, #0]
 800598c:	f00c feb8 	bl	8012700 <pbuf_free>
  }

  return errval;
 8005990:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005994:	4618      	mov	r0, r3
 8005996:	3748      	adds	r7, #72	; 0x48
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	20005218 	.word	0x20005218
 80059a0:	20005168 	.word	0x20005168
 80059a4:	20005164 	.word	0x20005164

080059a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80059b0:	2300      	movs	r3, #0
 80059b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80059b4:	4b07      	ldr	r3, [pc, #28]	; (80059d4 <low_level_input+0x2c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d105      	bne.n	80059c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80059bc:	f107 030c 	add.w	r3, r7, #12
 80059c0:	4619      	mov	r1, r3
 80059c2:	4805      	ldr	r0, [pc, #20]	; (80059d8 <low_level_input+0x30>)
 80059c4:	f7fc fa47 	bl	8001e56 <HAL_ETH_ReadData>
  }

  return p;
 80059c8:	68fb      	ldr	r3, [r7, #12]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	2000501c 	.word	0x2000501c
 80059d8:	20005168 	.word	0x20005168

080059dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <ethernetif_input+0x50>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fbe5 	bl	80061c4 <osSemaphoreWait>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f5      	bne.n	80059ec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005a00:	68b8      	ldr	r0, [r7, #8]
 8005a02:	f7ff ffd1 	bl	80059a8 <low_level_input>
 8005a06:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	4798      	blx	r3
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f00c fe6e 	bl	8012700 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ea      	bne.n	8005a00 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005a2a:	e7df      	b.n	80059ec <ethernetif_input+0x10>
 8005a2c:	20005160 	.word	0x20005160

08005a30 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <ethernetif_init+0x1c>
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	; (8005a78 <ethernetif_init+0x48>)
 8005a40:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005a44:	490d      	ldr	r1, [pc, #52]	; (8005a7c <ethernetif_init+0x4c>)
 8005a46:	480e      	ldr	r0, [pc, #56]	; (8005a80 <ethernetif_init+0x50>)
 8005a48:	f019 f9ec 	bl	801ee24 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2273      	movs	r2, #115	; 0x73
 8005a50:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2274      	movs	r2, #116	; 0x74
 8005a58:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <ethernetif_init+0x54>)
 8005a60:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <ethernetif_init+0x58>)
 8005a66:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff fdb7 	bl	80055dc <low_level_init>

  return ERR_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	0802024c 	.word	0x0802024c
 8005a7c:	08020268 	.word	0x08020268
 8005a80:	08020278 	.word	0x08020278
 8005a84:	0801c011 	.word	0x0801c011
 8005a88:	08005875 	.word	0x08005875

08005a8c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	4809      	ldr	r0, [pc, #36]	; (8005ac0 <pbuf_free_custom+0x34>)
 8005a9c:	f00b ff24 	bl	80118e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005aa0:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <pbuf_free_custom+0x38>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005aa8:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <pbuf_free_custom+0x38>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <pbuf_free_custom+0x3c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 fbd4 	bl	8006260 <osSemaphoreRelease>
  }
}
 8005ab8:	bf00      	nop
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	08024568 	.word	0x08024568
 8005ac4:	2000501c 	.word	0x2000501c
 8005ac8:	20005160 	.word	0x20005160

08005acc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ad0:	f7fb fec8 	bl	8001864 <HAL_GetTick>
 8005ad4:	4603      	mov	r3, r0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08e      	sub	sp, #56	; 0x38
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ae8:	2200      	movs	r2, #0
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	609a      	str	r2, [r3, #8]
 8005af0:	60da      	str	r2, [r3, #12]
 8005af2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a4a      	ldr	r2, [pc, #296]	; (8005c24 <HAL_ETH_MspInit+0x148>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	f040 808d 	bne.w	8005c1a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005b00:	2300      	movs	r3, #0
 8005b02:	623b      	str	r3, [r7, #32]
 8005b04:	4b48      	ldr	r3, [pc, #288]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b08:	4a47      	ldr	r2, [pc, #284]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b10:	4b45      	ldr	r3, [pc, #276]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	61fb      	str	r3, [r7, #28]
 8005b20:	4b41      	ldr	r3, [pc, #260]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b34:	61fb      	str	r3, [r7, #28]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	4b3a      	ldr	r3, [pc, #232]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	4a39      	ldr	r2, [pc, #228]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b46:	6313      	str	r3, [r2, #48]	; 0x30
 8005b48:	4b37      	ldr	r3, [pc, #220]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b50:	61bb      	str	r3, [r7, #24]
 8005b52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b5e:	f043 0304 	orr.w	r3, r3, #4
 8005b62:	6313      	str	r3, [r2, #48]	; 0x30
 8005b64:	4b30      	ldr	r3, [pc, #192]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b70:	2300      	movs	r3, #0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	4a2b      	ldr	r2, [pc, #172]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b7a:	f043 0301 	orr.w	r3, r3, #1
 8005b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b80:	4b29      	ldr	r3, [pc, #164]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	4b25      	ldr	r3, [pc, #148]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	4a24      	ldr	r2, [pc, #144]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b96:	f043 0302 	orr.w	r3, r3, #2
 8005b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9c:	4b22      	ldr	r3, [pc, #136]	; (8005c28 <HAL_ETH_MspInit+0x14c>)
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005ba8:	2332      	movs	r3, #50	; 0x32
 8005baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bb8:	230b      	movs	r3, #11
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	481a      	ldr	r0, [pc, #104]	; (8005c2c <HAL_ETH_MspInit+0x150>)
 8005bc4:	f7fd f9bc 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005bc8:	2386      	movs	r3, #134	; 0x86
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bcc:	2302      	movs	r3, #2
 8005bce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bd8:	230b      	movs	r3, #11
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005be0:	4619      	mov	r1, r3
 8005be2:	4813      	ldr	r0, [pc, #76]	; (8005c30 <HAL_ETH_MspInit+0x154>)
 8005be4:	f7fd f9ac 	bl	8002f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8005be8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bee:	2302      	movs	r3, #2
 8005bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005bfa:	230b      	movs	r3, #11
 8005bfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c02:	4619      	mov	r1, r3
 8005c04:	480b      	ldr	r0, [pc, #44]	; (8005c34 <HAL_ETH_MspInit+0x158>)
 8005c06:	f7fd f99b 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	2105      	movs	r1, #5
 8005c0e:	203d      	movs	r0, #61	; 0x3d
 8005c10:	f7fb ff10 	bl	8001a34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005c14:	203d      	movs	r0, #61	; 0x3d
 8005c16:	f7fb ff29 	bl	8001a6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	3738      	adds	r7, #56	; 0x38
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40028000 	.word	0x40028000
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40020800 	.word	0x40020800
 8005c30:	40020000 	.word	0x40020000
 8005c34:	40020400 	.word	0x40020400

08005c38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005c3c:	4802      	ldr	r0, [pc, #8]	; (8005c48 <ETH_PHY_IO_Init+0x10>)
 8005c3e:	f7fc fd17 	bl	8002670 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20005168 	.word	0x20005168

08005c4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return 0;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	68f9      	ldr	r1, [r7, #12]
 8005c6e:	4807      	ldr	r0, [pc, #28]	; (8005c8c <ETH_PHY_IO_ReadReg+0x30>)
 8005c70:	f7fc fb66 	bl	8002340 <HAL_ETH_ReadPHYRegister>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c7e:	e000      	b.n	8005c82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20005168 	.word	0x20005168

08005c90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	68f9      	ldr	r1, [r7, #12]
 8005ca2:	4807      	ldr	r0, [pc, #28]	; (8005cc0 <ETH_PHY_IO_WriteReg+0x30>)
 8005ca4:	f7fc fb97 	bl	80023d6 <HAL_ETH_WritePHYRegister>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cb2:	e000      	b.n	8005cb6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20005168 	.word	0x20005168

08005cc4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005cc8:	f7fb fdcc 	bl	8001864 <HAL_GetTick>
 8005ccc:	4603      	mov	r3, r0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b0a0      	sub	sp, #128	; 0x80
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	2264      	movs	r2, #100	; 0x64
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f019 f9f3 	bl	801f0d0 <memset>
  int32_t PHYLinkState = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005cfe:	483a      	ldr	r0, [pc, #232]	; (8005de8 <ethernet_link_thread+0x114>)
 8005d00:	f7fb fcf3 	bl	80016ea <DP83848_GetLinkState>
 8005d04:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8005d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d0c:	089b      	lsrs	r3, r3, #2
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <ethernet_link_thread+0x5e>
 8005d18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	dc09      	bgt.n	8005d32 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005d1e:	4833      	ldr	r0, [pc, #204]	; (8005dec <ethernet_link_thread+0x118>)
 8005d20:	f7fb ffbe 	bl	8001ca0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005d24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d26:	f00c f86b 	bl	8011e00 <netif_set_down>
    netif_set_link_down(netif);
 8005d2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005d2c:	f00c f8d2 	bl	8011ed4 <netif_set_link_down>
 8005d30:	e055      	b.n	8005dde <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d14e      	bne.n	8005dde <ethernet_link_thread+0x10a>
 8005d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	dd4b      	ble.n	8005dde <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005d46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d48:	3b02      	subs	r3, #2
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d82a      	bhi.n	8005da4 <ethernet_link_thread+0xd0>
 8005d4e:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <ethernet_link_thread+0x80>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d77 	.word	0x08005d77
 8005d5c:	08005d87 	.word	0x08005d87
 8005d60:	08005d97 	.word	0x08005d97
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005d6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d70:	2301      	movs	r3, #1
 8005d72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005d74:	e017      	b.n	8005da6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005d76:	2300      	movs	r3, #0
 8005d78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d80:	2301      	movs	r3, #1
 8005d82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005d84:	e00f      	b.n	8005da6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d8a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d90:	2301      	movs	r3, #1
 8005d92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005d94:	e007      	b.n	8005da6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005da2:	e000      	b.n	8005da6 <ethernet_link_thread+0xd2>
    default:
      break;
 8005da4:	bf00      	nop
    }

    if(linkchanged)
 8005da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	4619      	mov	r1, r3
 8005db2:	480e      	ldr	r0, [pc, #56]	; (8005dec <ethernet_link_thread+0x118>)
 8005db4:	f7fc fb58 	bl	8002468 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005dc0:	f107 0308 	add.w	r3, r7, #8
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4809      	ldr	r0, [pc, #36]	; (8005dec <ethernet_link_thread+0x118>)
 8005dc8:	f7fc fc38 	bl	800263c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8005dcc:	4807      	ldr	r0, [pc, #28]	; (8005dec <ethernet_link_thread+0x118>)
 8005dce:	f7fb fed9 	bl	8001b84 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005dd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dd4:	f00b ffa8 	bl	8011d28 <netif_set_up>
      netif_set_link_up(netif);
 8005dd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005dda:	f00c f843 	bl	8011e64 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8005dde:	2064      	movs	r0, #100	; 0x64
 8005de0:	f000 f90e 	bl	8006000 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8005de4:	e78b      	b.n	8005cfe <ethernet_link_thread+0x2a>
 8005de6:	bf00      	nop
 8005de8:	20005250 	.word	0x20005250
 8005dec:	20005168 	.word	0x20005168

08005df0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005df8:	4812      	ldr	r0, [pc, #72]	; (8005e44 <HAL_ETH_RxAllocateCallback+0x54>)
 8005dfa:	f00b fd01 	bl	8011800 <memp_malloc_pool>
 8005dfe:	60f8      	str	r0, [r7, #12]
  if (p)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d014      	beq.n	8005e30 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f103 0220 	add.w	r2, r3, #32
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4a0d      	ldr	r2, [pc, #52]	; (8005e48 <HAL_ETH_RxAllocateCallback+0x58>)
 8005e14:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005e1e:	9201      	str	r2, [sp, #4]
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2241      	movs	r2, #65	; 0x41
 8005e26:	2100      	movs	r1, #0
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f00c faaf 	bl	801238c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005e2e:	e005      	b.n	8005e3c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005e30:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	08024568 	.word	0x08024568
 8005e48:	08005a8d 	.word	0x08005a8d
 8005e4c:	2000501c 	.word	0x2000501c

08005e50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	; 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
 8005e5c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3b20      	subs	r3, #32
 8005e6e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	69fa      	ldr	r2, [r7, #28]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e003      	b.n	8005e9a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69fa      	ldr	r2, [r7, #28]
 8005e98:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	69fa      	ldr	r2, [r7, #28]
 8005e9e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	e009      	b.n	8005ebc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	891a      	ldrh	r2, [r3, #8]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	4413      	add	r3, r2
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f2      	bne.n	8005ea8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	3724      	adds	r7, #36	; 0x24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f00c fc11 	bl	8012700 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	4603      	mov	r3, r0
 8005eee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ef8:	2b84      	cmp	r3, #132	; 0x84
 8005efa:	d005      	beq.n	8005f08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005efc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4413      	add	r3, r2
 8005f04:	3303      	adds	r3, #3
 8005f06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005f08:	68fb      	ldr	r3, [r7, #12]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f1c:	f3ef 8305 	mrs	r3, IPSR
 8005f20:	607b      	str	r3, [r7, #4]
  return(result);
 8005f22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005f3e:	f001 fd3b 	bl	80079b8 <vTaskStartScheduler>
  
  return osOK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005f4c:	f7ff ffe3 	bl	8005f16 <inHandlerMode>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d003      	beq.n	8005f5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005f56:	f001 fe53 	bl	8007c00 <xTaskGetTickCountFromISR>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	e002      	b.n	8005f64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005f5e:	f001 fe3f 	bl	8007be0 <xTaskGetTickCount>
 8005f62:	4603      	mov	r3, r0
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6a:	b089      	sub	sp, #36	; 0x24
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d020      	beq.n	8005fbc <osThreadCreate+0x54>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	699b      	ldr	r3, [r3, #24]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01c      	beq.n	8005fbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685c      	ldr	r4, [r3, #4]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691e      	ldr	r6, [r3, #16]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7ff ffa6 	bl	8005ee6 <makeFreeRtosPriority>
 8005f9a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fa4:	9202      	str	r2, [sp, #8]
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	9100      	str	r1, [sp, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	4632      	mov	r2, r6
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f001 fb23 	bl	80075fc <xTaskCreateStatic>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e01c      	b.n	8005ff6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685c      	ldr	r4, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fc8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff ff88 	bl	8005ee6 <makeFreeRtosPriority>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	9200      	str	r2, [sp, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4632      	mov	r2, r6
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f001 fb65 	bl	80076b6 <xTaskCreate>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	e000      	b.n	8005ff8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006000 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <osDelay+0x16>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	e000      	b.n	8006018 <osDelay+0x18>
 8006016:	2301      	movs	r3, #1
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fc99 	bl	8007950 <vTaskDelay>
  
  return osOK;
 800601e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d007      	beq.n	8006048 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4619      	mov	r1, r3
 800603e:	2001      	movs	r0, #1
 8006040:	f000 fc7d 	bl	800693e <xQueueCreateMutexStatic>
 8006044:	4603      	mov	r3, r0
 8006046:	e003      	b.n	8006050 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006048:	2001      	movs	r0, #1
 800604a:	f000 fc60 	bl	800690e <xQueueCreateMutex>
 800604e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006062:	2300      	movs	r3, #0
 8006064:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <osMutexWait+0x18>
    return osErrorParameter;
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	e03a      	b.n	80060e6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607a:	d103      	bne.n	8006084 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800607c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e009      	b.n	8006098 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d006      	beq.n	8006098 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <osMutexWait+0x40>
      ticks = 1;
 8006094:	2301      	movs	r3, #1
 8006096:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006098:	f7ff ff3d 	bl	8005f16 <inHandlerMode>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80060a2:	f107 0308 	add.w	r3, r7, #8
 80060a6:	461a      	mov	r2, r3
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f001 f874 	bl	8007198 <xQueueReceiveFromISR>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <osMutexWait+0x62>
      return osErrorOS;
 80060b6:	23ff      	movs	r3, #255	; 0xff
 80060b8:	e015      	b.n	80060e6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d011      	beq.n	80060e4 <osMutexWait+0x8c>
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <osMutexWait+0x98>)
 80060c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	e008      	b.n	80060e4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80060d2:	68f9      	ldr	r1, [r7, #12]
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 ff53 	bl	8006f80 <xQueueSemaphoreTake>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d001      	beq.n	80060e4 <osMutexWait+0x8c>
    return osErrorOS;
 80060e0:	23ff      	movs	r3, #255	; 0xff
 80060e2:	e000      	b.n	80060e6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	e000ed04 	.word	0xe000ed04

080060f4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006100:	2300      	movs	r3, #0
 8006102:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006104:	f7ff ff07 	bl	8005f16 <inHandlerMode>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d016      	beq.n	800613c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fdc6 	bl	8006ca6 <xQueueGiveFromISR>
 800611a:	4603      	mov	r3, r0
 800611c:	2b01      	cmp	r3, #1
 800611e:	d001      	beq.n	8006124 <osMutexRelease+0x30>
      return osErrorOS;
 8006120:	23ff      	movs	r3, #255	; 0xff
 8006122:	e017      	b.n	8006154 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d013      	beq.n	8006152 <osMutexRelease+0x5e>
 800612a:	4b0c      	ldr	r3, [pc, #48]	; (800615c <osMutexRelease+0x68>)
 800612c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	e00a      	b.n	8006152 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800613c:	2300      	movs	r3, #0
 800613e:	2200      	movs	r2, #0
 8006140:	2100      	movs	r1, #0
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fc16 	bl	8006974 <xQueueGenericSend>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d001      	beq.n	8006152 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800614e:	23ff      	movs	r3, #255	; 0xff
 8006150:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006152:	68fb      	ldr	r3, [r7, #12]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	e000ed04 	.word	0xe000ed04

08006160 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af02      	add	r7, sp, #8
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00f      	beq.n	8006192 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d10a      	bne.n	800618e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2203      	movs	r2, #3
 800617e:	9200      	str	r2, [sp, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	2100      	movs	r1, #0
 8006184:	2001      	movs	r0, #1
 8006186:	f000 fad7 	bl	8006738 <xQueueGenericCreateStatic>
 800618a:	4603      	mov	r3, r0
 800618c:	e016      	b.n	80061bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	e014      	b.n	80061bc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d110      	bne.n	80061ba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006198:	2203      	movs	r2, #3
 800619a:	2100      	movs	r1, #0
 800619c:	2001      	movs	r0, #1
 800619e:	f000 fb43 	bl	8006828 <xQueueGenericCreate>
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <osSemaphoreCreate+0x56>
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fbdf 	bl	8006974 <xQueueGenericSend>
      return sema;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	e000      	b.n	80061bc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80061ba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80061d8:	2380      	movs	r3, #128	; 0x80
 80061da:	e03a      	b.n	8006252 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061e6:	d103      	bne.n	80061f0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	e009      	b.n	8006204 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d006      	beq.n	8006204 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <osSemaphoreWait+0x40>
      ticks = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006204:	f7ff fe87 	bl	8005f16 <inHandlerMode>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d017      	beq.n	800623e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	461a      	mov	r2, r3
 8006214:	2100      	movs	r1, #0
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 ffbe 	bl	8007198 <xQueueReceiveFromISR>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d001      	beq.n	8006226 <osSemaphoreWait+0x62>
      return osErrorOS;
 8006222:	23ff      	movs	r3, #255	; 0xff
 8006224:	e015      	b.n	8006252 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d011      	beq.n	8006250 <osSemaphoreWait+0x8c>
 800622c:	4b0b      	ldr	r3, [pc, #44]	; (800625c <osSemaphoreWait+0x98>)
 800622e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	e008      	b.n	8006250 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fe9d 	bl	8006f80 <xQueueSemaphoreTake>
 8006246:	4603      	mov	r3, r0
 8006248:	2b01      	cmp	r3, #1
 800624a:	d001      	beq.n	8006250 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800624c:	23ff      	movs	r3, #255	; 0xff
 800624e:	e000      	b.n	8006252 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006270:	f7ff fe51 	bl	8005f16 <inHandlerMode>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d016      	beq.n	80062a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800627a:	f107 0308 	add.w	r3, r7, #8
 800627e:	4619      	mov	r1, r3
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fd10 	bl	8006ca6 <xQueueGiveFromISR>
 8006286:	4603      	mov	r3, r0
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800628c:	23ff      	movs	r3, #255	; 0xff
 800628e:	e017      	b.n	80062c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d013      	beq.n	80062be <osSemaphoreRelease+0x5e>
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <osSemaphoreRelease+0x68>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	e00a      	b.n	80062be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80062a8:	2300      	movs	r3, #0
 80062aa:	2200      	movs	r2, #0
 80062ac:	2100      	movs	r1, #0
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fb60 	bl	8006974 <xQueueGenericSend>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d001      	beq.n	80062be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80062ba:	23ff      	movs	r3, #255	; 0xff
 80062bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80062be:	68fb      	ldr	r3, [r7, #12]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80062d4:	f7ff fe1f 	bl	8005f16 <inHandlerMode>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80062de:	2382      	movs	r3, #130	; 0x82
 80062e0:	e003      	b.n	80062ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 f814 	bl	8007310 <vQueueDelete>

  return osOK; 
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80062f2:	b590      	push	{r4, r7, lr}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af02      	add	r7, sp, #8
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d011      	beq.n	8006328 <osMessageCreate+0x36>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6859      	ldr	r1, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	2400      	movs	r4, #0
 800631e:	9400      	str	r4, [sp, #0]
 8006320:	f000 fa0a 	bl	8006738 <xQueueGenericCreateStatic>
 8006324:	4603      	mov	r3, r0
 8006326:	e008      	b.n	800633a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6818      	ldr	r0, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	4619      	mov	r1, r3
 8006334:	f000 fa78 	bl	8006828 <xQueueGenericCreate>
 8006338:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bd90      	pop	{r4, r7, pc}
	...

08006344 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <osMessagePut+0x1e>
    ticks = 1;
 800635e:	2301      	movs	r3, #1
 8006360:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006362:	f7ff fdd8 	bl	8005f16 <inHandlerMode>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d018      	beq.n	800639e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800636c:	f107 0210 	add.w	r2, r7, #16
 8006370:	f107 0108 	add.w	r1, r7, #8
 8006374:	2300      	movs	r3, #0
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f000 fbfa 	bl	8006b70 <xQueueGenericSendFromISR>
 800637c:	4603      	mov	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d001      	beq.n	8006386 <osMessagePut+0x42>
      return osErrorOS;
 8006382:	23ff      	movs	r3, #255	; 0xff
 8006384:	e018      	b.n	80063b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d014      	beq.n	80063b6 <osMessagePut+0x72>
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <osMessagePut+0x7c>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	e00b      	b.n	80063b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800639e:	f107 0108 	add.w	r1, r7, #8
 80063a2:	2300      	movs	r3, #0
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f000 fae4 	bl	8006974 <xQueueGenericSend>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d001      	beq.n	80063b6 <osMessagePut+0x72>
      return osErrorOS;
 80063b2:	23ff      	movs	r3, #255	; 0xff
 80063b4:	e000      	b.n	80063b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	e000ed04 	.word	0xe000ed04

080063c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80063c4:	b590      	push	{r4, r7, lr}
 80063c6:	b08b      	sub	sp, #44	; 0x2c
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80063de:	2380      	movs	r3, #128	; 0x80
 80063e0:	617b      	str	r3, [r7, #20]
    return event;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	461c      	mov	r4, r3
 80063e6:	f107 0314 	add.w	r3, r7, #20
 80063ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063f2:	e054      	b.n	800649e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006402:	d103      	bne.n	800640c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006408:	627b      	str	r3, [r7, #36]	; 0x24
 800640a:	e009      	b.n	8006420 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d006      	beq.n	8006420 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <osMessageGet+0x5c>
      ticks = 1;
 800641c:	2301      	movs	r3, #1
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006420:	f7ff fd79 	bl	8005f16 <inHandlerMode>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01c      	beq.n	8006464 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800642a:	f107 0220 	add.w	r2, r7, #32
 800642e:	f107 0314 	add.w	r3, r7, #20
 8006432:	3304      	adds	r3, #4
 8006434:	4619      	mov	r1, r3
 8006436:	68b8      	ldr	r0, [r7, #8]
 8006438:	f000 feae 	bl	8007198 <xQueueReceiveFromISR>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d102      	bne.n	8006448 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006442:	2310      	movs	r3, #16
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e001      	b.n	800644c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01d      	beq.n	800648e <osMessageGet+0xca>
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <osMessageGet+0xe4>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	e014      	b.n	800648e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	3304      	adds	r3, #4
 800646a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646c:	4619      	mov	r1, r3
 800646e:	68b8      	ldr	r0, [r7, #8]
 8006470:	f000 fca6 	bl	8006dc0 <xQueueReceive>
 8006474:	4603      	mov	r3, r0
 8006476:	2b01      	cmp	r3, #1
 8006478:	d102      	bne.n	8006480 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800647a:	2310      	movs	r3, #16
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e006      	b.n	800648e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <osMessageGet+0xc6>
 8006486:	2300      	movs	r3, #0
 8006488:	e000      	b.n	800648c <osMessageGet+0xc8>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	461c      	mov	r4, r3
 8006492:	f107 0314 	add.w	r3, r7, #20
 8006496:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800649a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	372c      	adds	r7, #44	; 0x2c
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd90      	pop	{r4, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80064b4:	f7ff fd2f 	bl	8005f16 <inHandlerMode>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d004      	beq.n	80064c8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 ff08 	bl	80072d4 <uxQueueMessagesWaitingFromISR>
 80064c4:	4603      	mov	r3, r0
 80064c6:	e003      	b.n	80064d0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fee5 	bl	8007298 <uxQueueMessagesWaiting>
 80064ce:	4603      	mov	r3, r0
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80064e0:	f7ff fd19 	bl	8005f16 <inHandlerMode>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <osMessageDelete+0x16>
    return osErrorISR;
 80064ea:	2382      	movs	r3, #130	; 0x82
 80064ec:	e003      	b.n	80064f6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 ff0e 	bl	8007310 <vQueueDelete>

  return osOK; 
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f103 0208 	add.w	r2, r3, #8
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006516:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f103 0208 	add.w	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f103 0208 	add.w	r2, r3, #8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	601a      	str	r2, [r3, #0]
}
 8006594:	bf00      	nop
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065b6:	d103      	bne.n	80065c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	60fb      	str	r3, [r7, #12]
 80065be:	e00c      	b.n	80065da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	3308      	adds	r3, #8
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	e002      	b.n	80065ce <vListInsert+0x2e>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d2f6      	bcs.n	80065c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6892      	ldr	r2, [r2, #8]
 8006628:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6852      	ldr	r2, [r2, #4]
 8006632:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	429a      	cmp	r2, r3
 800663c:	d103      	bne.n	8006646 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1e5a      	subs	r2, r3, #1
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10a      	bne.n	8006692 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006692:	f002 f917 	bl	80088c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	441a      	add	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	3b01      	subs	r3, #1
 80066c4:	68f9      	ldr	r1, [r7, #12]
 80066c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	441a      	add	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22ff      	movs	r2, #255	; 0xff
 80066de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d114      	bne.n	8006712 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01a      	beq.n	8006726 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3310      	adds	r3, #16
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 fbd3 	bl	8007ea0 <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006700:	4b0c      	ldr	r3, [pc, #48]	; (8006734 <xQueueGenericReset+0xcc>)
 8006702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006706:	601a      	str	r2, [r3, #0]
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	e009      	b.n	8006726 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3310      	adds	r3, #16
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fef1 	bl	80064fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3324      	adds	r3, #36	; 0x24
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff feec 	bl	80064fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006726:	f002 f8fd 	bl	8008924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800672a:	2301      	movs	r3, #1
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006738:	b580      	push	{r7, lr}
 800673a:	b08e      	sub	sp, #56	; 0x38
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
 8006744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10a      	bne.n	8006762 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	627b      	str	r3, [r7, #36]	; 0x24
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <xQueueGenericCreateStatic+0x52>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <xQueueGenericCreateStatic+0x56>
 800678a:	2301      	movs	r3, #1
 800678c:	e000      	b.n	8006790 <xQueueGenericCreateStatic+0x58>
 800678e:	2300      	movs	r3, #0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	623b      	str	r3, [r7, #32]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d102      	bne.n	80067b6 <xQueueGenericCreateStatic+0x7e>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <xQueueGenericCreateStatic+0x82>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericCreateStatic+0x84>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	61fb      	str	r3, [r7, #28]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067d6:	2348      	movs	r3, #72	; 0x48
 80067d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2b48      	cmp	r3, #72	; 0x48
 80067de:	d00a      	beq.n	80067f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	61bb      	str	r3, [r7, #24]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00d      	beq.n	800681e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800680a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800680e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	4613      	mov	r3, r2
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	68b9      	ldr	r1, [r7, #8]
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 f83f 	bl	800689c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800681e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006820:	4618      	mov	r0, r3
 8006822:	3730      	adds	r7, #48	; 0x30
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	; 0x28
 800682c:	af02      	add	r7, sp, #8
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10a      	bne.n	8006852 <xQueueGenericCreate+0x2a>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	613b      	str	r3, [r7, #16]
}
 800684e:	bf00      	nop
 8006850:	e7fe      	b.n	8006850 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
 800685a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3348      	adds	r3, #72	; 0x48
 8006860:	4618      	mov	r0, r3
 8006862:	f002 f951 	bl	8008b08 <pvPortMalloc>
 8006866:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d011      	beq.n	8006892 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	3348      	adds	r3, #72	; 0x48
 8006876:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006880:	79fa      	ldrb	r2, [r7, #7]
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f805 	bl	800689c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006892:	69bb      	ldr	r3, [r7, #24]
	}
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d103      	bne.n	80068b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e002      	b.n	80068be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068ca:	2101      	movs	r1, #1
 80068cc:	69b8      	ldr	r0, [r7, #24]
 80068ce:	f7ff fecb 	bl	8006668 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00e      	beq.n	8006906 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80068fa:	2300      	movs	r3, #0
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f837 	bl	8006974 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800690e:	b580      	push	{r7, lr}
 8006910:	b086      	sub	sp, #24
 8006912:	af00      	add	r7, sp, #0
 8006914:	4603      	mov	r3, r0
 8006916:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006918:	2301      	movs	r3, #1
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	2300      	movs	r3, #0
 800691e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	461a      	mov	r2, r3
 8006924:	6939      	ldr	r1, [r7, #16]
 8006926:	6978      	ldr	r0, [r7, #20]
 8006928:	f7ff ff7e 	bl	8006828 <xQueueGenericCreate>
 800692c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff ffd3 	bl	80068da <prvInitialiseMutex>

		return xNewQueue;
 8006934:	68fb      	ldr	r3, [r7, #12]
	}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800693e:	b580      	push	{r7, lr}
 8006940:	b088      	sub	sp, #32
 8006942:	af02      	add	r7, sp, #8
 8006944:	4603      	mov	r3, r0
 8006946:	6039      	str	r1, [r7, #0]
 8006948:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800694a:	2301      	movs	r3, #1
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	2300      	movs	r3, #0
 8006950:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006952:	79fb      	ldrb	r3, [r7, #7]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2200      	movs	r2, #0
 800695a:	6939      	ldr	r1, [r7, #16]
 800695c:	6978      	ldr	r0, [r7, #20]
 800695e:	f7ff feeb 	bl	8006738 <xQueueGenericCreateStatic>
 8006962:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff ffb8 	bl	80068da <prvInitialiseMutex>

		return xNewQueue;
 800696a:	68fb      	ldr	r3, [r7, #12]
	}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08e      	sub	sp, #56	; 0x38
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006982:	2300      	movs	r3, #0
 8006984:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10a      	bne.n	80069a6 <xQueueGenericSend+0x32>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069a2:	bf00      	nop
 80069a4:	e7fe      	b.n	80069a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d103      	bne.n	80069b4 <xQueueGenericSend+0x40>
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xQueueGenericSend+0x44>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <xQueueGenericSend+0x46>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <xQueueGenericSend+0x60>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d103      	bne.n	80069e2 <xQueueGenericSend+0x6e>
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <xQueueGenericSend+0x72>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <xQueueGenericSend+0x74>
 80069e6:	2300      	movs	r3, #0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10a      	bne.n	8006a02 <xQueueGenericSend+0x8e>
	__asm volatile
 80069ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f0:	f383 8811 	msr	BASEPRI, r3
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	f3bf 8f4f 	dsb	sy
 80069fc:	623b      	str	r3, [r7, #32]
}
 80069fe:	bf00      	nop
 8006a00:	e7fe      	b.n	8006a00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a02:	f001 fc0d 	bl	8008220 <xTaskGetSchedulerState>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d102      	bne.n	8006a12 <xQueueGenericSend+0x9e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <xQueueGenericSend+0xa2>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e000      	b.n	8006a18 <xQueueGenericSend+0xa4>
 8006a16:	2300      	movs	r3, #0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10a      	bne.n	8006a32 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	61fb      	str	r3, [r7, #28]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a32:	f001 ff47 	bl	80088c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <xQueueGenericSend+0xd4>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d129      	bne.n	8006a9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4e:	f000 fc9a 	bl	8007386 <prvCopyDataToQueue>
 8006a52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d010      	beq.n	8006a7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	3324      	adds	r3, #36	; 0x24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fa1d 	bl	8007ea0 <xTaskRemoveFromEventList>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d013      	beq.n	8006a94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a6c:	4b3f      	ldr	r3, [pc, #252]	; (8006b6c <xQueueGenericSend+0x1f8>)
 8006a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	e00a      	b.n	8006a94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d007      	beq.n	8006a94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006a84:	4b39      	ldr	r3, [pc, #228]	; (8006b6c <xQueueGenericSend+0x1f8>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a94:	f001 ff46 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e063      	b.n	8006b64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006aa2:	f001 ff3f 	bl	8008924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	e05c      	b.n	8006b64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ab0:	f107 0314 	add.w	r3, r7, #20
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fa55 	bl	8007f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006aba:	2301      	movs	r3, #1
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006abe:	f001 ff31 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ac2:	f000 ffe3 	bl	8007a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ac6:	f001 fefd 	bl	80088c4 <vPortEnterCritical>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad0:	b25b      	sxtb	r3, r3
 8006ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad6:	d103      	bne.n	8006ae0 <xQueueGenericSend+0x16c>
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aec:	d103      	bne.n	8006af6 <xQueueGenericSend+0x182>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af6:	f001 ff15 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006afa:	1d3a      	adds	r2, r7, #4
 8006afc:	f107 0314 	add.w	r3, r7, #20
 8006b00:	4611      	mov	r1, r2
 8006b02:	4618      	mov	r0, r3
 8006b04:	f001 fa44 	bl	8007f90 <xTaskCheckForTimeOut>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d124      	bne.n	8006b58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b10:	f000 fd31 	bl	8007576 <prvIsQueueFull>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d018      	beq.n	8006b4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	3310      	adds	r3, #16
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4611      	mov	r1, r2
 8006b22:	4618      	mov	r0, r3
 8006b24:	f001 f998 	bl	8007e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b2a:	f000 fcbc 	bl	80074a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b2e:	f000 ffbb 	bl	8007aa8 <xTaskResumeAll>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f47f af7c 	bne.w	8006a32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <xQueueGenericSend+0x1f8>)
 8006b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	e772      	b.n	8006a32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b4e:	f000 fcaa 	bl	80074a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b52:	f000 ffa9 	bl	8007aa8 <xTaskResumeAll>
 8006b56:	e76c      	b.n	8006a32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b5a:	f000 fca4 	bl	80074a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b5e:	f000 ffa3 	bl	8007aa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3738      	adds	r7, #56	; 0x38
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b090      	sub	sp, #64	; 0x40
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
 8006b7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <xQueueGenericSendFromISR+0x3c>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <xQueueGenericSendFromISR+0x40>
 8006bac:	2301      	movs	r3, #1
 8006bae:	e000      	b.n	8006bb2 <xQueueGenericSendFromISR+0x42>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d103      	bne.n	8006bda <xQueueGenericSendFromISR+0x6a>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d101      	bne.n	8006bde <xQueueGenericSendFromISR+0x6e>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <xQueueGenericSendFromISR+0x70>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	623b      	str	r3, [r7, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bfa:	f001 ff45 	bl	8008a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006bfe:	f3ef 8211 	mrs	r2, BASEPRI
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	61fa      	str	r2, [r7, #28]
 8006c14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d302      	bcc.n	8006c2c <xQueueGenericSendFromISR+0xbc>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d12f      	bne.n	8006c8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c42:	f000 fba0 	bl	8007386 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c4e:	d112      	bne.n	8006c76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d016      	beq.n	8006c86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5a:	3324      	adds	r3, #36	; 0x24
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f001 f91f 	bl	8007ea0 <xTaskRemoveFromEventList>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00b      	beq.n	8006c86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	e007      	b.n	8006c86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	b25a      	sxtb	r2, r3
 8006c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006c86:	2301      	movs	r3, #1
 8006c88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006c8a:	e001      	b.n	8006c90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3740      	adds	r7, #64	; 0x40
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b08e      	sub	sp, #56	; 0x38
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10a      	bne.n	8006cd0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	623b      	str	r3, [r7, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <xQueueGiveFromISR+0x48>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	61fb      	str	r3, [r7, #28]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d103      	bne.n	8006cfe <xQueueGiveFromISR+0x58>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <xQueueGiveFromISR+0x5c>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <xQueueGiveFromISR+0x5e>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	61bb      	str	r3, [r7, #24]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d1e:	f001 feb3 	bl	8008a88 <vPortValidateInterruptPriority>
	__asm volatile
 8006d22:	f3ef 8211 	mrs	r2, BASEPRI
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	617a      	str	r2, [r7, #20]
 8006d38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006d3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d22b      	bcs.n	8006da6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d68:	d112      	bne.n	8006d90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d016      	beq.n	8006da0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	3324      	adds	r3, #36	; 0x24
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 f892 	bl	8007ea0 <xTaskRemoveFromEventList>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00e      	beq.n	8006da0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00b      	beq.n	8006da0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e007      	b.n	8006da0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d94:	3301      	adds	r3, #1
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	b25a      	sxtb	r2, r3
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006da0:	2301      	movs	r3, #1
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
 8006da4:	e001      	b.n	8006daa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006da6:	2300      	movs	r3, #0
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f383 8811 	msr	BASEPRI, r3
}
 8006db4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3738      	adds	r7, #56	; 0x38
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08c      	sub	sp, #48	; 0x30
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10a      	bne.n	8006df0 <xQueueReceive+0x30>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	623b      	str	r3, [r7, #32]
}
 8006dec:	bf00      	nop
 8006dee:	e7fe      	b.n	8006dee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d103      	bne.n	8006dfe <xQueueReceive+0x3e>
 8006df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <xQueueReceive+0x42>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <xQueueReceive+0x44>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <xQueueReceive+0x5e>
	__asm volatile
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	f383 8811 	msr	BASEPRI, r3
 8006e10:	f3bf 8f6f 	isb	sy
 8006e14:	f3bf 8f4f 	dsb	sy
 8006e18:	61fb      	str	r3, [r7, #28]
}
 8006e1a:	bf00      	nop
 8006e1c:	e7fe      	b.n	8006e1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e1e:	f001 f9ff 	bl	8008220 <xTaskGetSchedulerState>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <xQueueReceive+0x6e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <xQueueReceive+0x72>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <xQueueReceive+0x74>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10a      	bne.n	8006e4e <xQueueReceive+0x8e>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	61bb      	str	r3, [r7, #24]
}
 8006e4a:	bf00      	nop
 8006e4c:	e7fe      	b.n	8006e4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e4e:	f001 fd39 	bl	80088c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d01f      	beq.n	8006e9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e5e:	68b9      	ldr	r1, [r7, #8]
 8006e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e62:	f000 fafa 	bl	800745a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	1e5a      	subs	r2, r3, #1
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00f      	beq.n	8006e96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	3310      	adds	r3, #16
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f001 f810 	bl	8007ea0 <xTaskRemoveFromEventList>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e86:	4b3d      	ldr	r3, [pc, #244]	; (8006f7c <xQueueReceive+0x1bc>)
 8006e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e96:	f001 fd45 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e069      	b.n	8006f72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ea4:	f001 fd3e 	bl	8008924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	e062      	b.n	8006f72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006eb2:	f107 0310 	add.w	r3, r7, #16
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 f854 	bl	8007f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ec0:	f001 fd30 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ec4:	f000 fde2 	bl	8007a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ec8:	f001 fcfc 	bl	80088c4 <vPortEnterCritical>
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed2:	b25b      	sxtb	r3, r3
 8006ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed8:	d103      	bne.n	8006ee2 <xQueueReceive+0x122>
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eee:	d103      	bne.n	8006ef8 <xQueueReceive+0x138>
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ef8:	f001 fd14 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006efc:	1d3a      	adds	r2, r7, #4
 8006efe:	f107 0310 	add.w	r3, r7, #16
 8006f02:	4611      	mov	r1, r2
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 f843 	bl	8007f90 <xTaskCheckForTimeOut>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d123      	bne.n	8006f58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f12:	f000 fb1a 	bl	800754a <prvIsQueueEmpty>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d017      	beq.n	8006f4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 ff97 	bl	8007e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f2c:	f000 fabb 	bl	80074a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f30:	f000 fdba 	bl	8007aa8 <xTaskResumeAll>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d189      	bne.n	8006e4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <xQueueReceive+0x1bc>)
 8006f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	f3bf 8f4f 	dsb	sy
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	e780      	b.n	8006e4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f4e:	f000 faaa 	bl	80074a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f52:	f000 fda9 	bl	8007aa8 <xTaskResumeAll>
 8006f56:	e77a      	b.n	8006e4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f5a:	f000 faa4 	bl	80074a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f5e:	f000 fda3 	bl	8007aa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f64:	f000 faf1 	bl	800754a <prvIsQueueEmpty>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f43f af6f 	beq.w	8006e4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3730      	adds	r7, #48	; 0x30
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	e000ed04 	.word	0xe000ed04

08006f80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08e      	sub	sp, #56	; 0x38
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10a      	bne.n	8006fb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	623b      	str	r3, [r7, #32]
}
 8006fae:	bf00      	nop
 8006fb0:	e7fe      	b.n	8006fb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	61fb      	str	r3, [r7, #28]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fd0:	f001 f926 	bl	8008220 <xTaskGetSchedulerState>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <xQueueSemaphoreTake+0x60>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueSemaphoreTake+0x64>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueSemaphoreTake+0x66>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10a      	bne.n	8007000 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61bb      	str	r3, [r7, #24]
}
 8006ffc:	bf00      	nop
 8006ffe:	e7fe      	b.n	8006ffe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007000:	f001 fc60 	bl	80088c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d024      	beq.n	800705a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007012:	1e5a      	subs	r2, r3, #1
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007020:	f001 faa6 	bl	8008570 <pvTaskIncrementMutexHeldCount>
 8007024:	4602      	mov	r2, r0
 8007026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007028:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	3310      	adds	r3, #16
 8007036:	4618      	mov	r0, r3
 8007038:	f000 ff32 	bl	8007ea0 <xTaskRemoveFromEventList>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d007      	beq.n	8007052 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007044:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	f3bf 8f4f 	dsb	sy
 800704e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007052:	f001 fc67 	bl	8008924 <vPortExitCritical>
				return pdPASS;
 8007056:	2301      	movs	r3, #1
 8007058:	e097      	b.n	800718a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d111      	bne.n	8007084 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00a      	beq.n	800707c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	617b      	str	r3, [r7, #20]
}
 8007078:	bf00      	nop
 800707a:	e7fe      	b.n	800707a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800707c:	f001 fc52 	bl	8008924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007080:	2300      	movs	r3, #0
 8007082:	e082      	b.n	800718a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800708a:	f107 030c 	add.w	r3, r7, #12
 800708e:	4618      	mov	r0, r3
 8007090:	f000 ff68 	bl	8007f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007098:	f001 fc44 	bl	8008924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800709c:	f000 fcf6 	bl	8007a8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070a0:	f001 fc10 	bl	80088c4 <vPortEnterCritical>
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070aa:	b25b      	sxtb	r3, r3
 80070ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070b0:	d103      	bne.n	80070ba <xQueueSemaphoreTake+0x13a>
 80070b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c6:	d103      	bne.n	80070d0 <xQueueSemaphoreTake+0x150>
 80070c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070d0:	f001 fc28 	bl	8008924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070d4:	463a      	mov	r2, r7
 80070d6:	f107 030c 	add.w	r3, r7, #12
 80070da:	4611      	mov	r1, r2
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 ff57 	bl	8007f90 <xTaskCheckForTimeOut>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d132      	bne.n	800714e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ea:	f000 fa2e 	bl	800754a <prvIsQueueEmpty>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d026      	beq.n	8007142 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d109      	bne.n	8007110 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80070fc:	f001 fbe2 	bl	80088c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4618      	mov	r0, r3
 8007106:	f001 f8a9 	bl	800825c <xTaskPriorityInherit>
 800710a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800710c:	f001 fc0a 	bl	8008924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	3324      	adds	r3, #36	; 0x24
 8007114:	683a      	ldr	r2, [r7, #0]
 8007116:	4611      	mov	r1, r2
 8007118:	4618      	mov	r0, r3
 800711a:	f000 fe9d 	bl	8007e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800711e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007120:	f000 f9c1 	bl	80074a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007124:	f000 fcc0 	bl	8007aa8 <xTaskResumeAll>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f47f af68 	bne.w	8007000 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007130:	4b18      	ldr	r3, [pc, #96]	; (8007194 <xQueueSemaphoreTake+0x214>)
 8007132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	e75e      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007144:	f000 f9af 	bl	80074a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007148:	f000 fcae 	bl	8007aa8 <xTaskResumeAll>
 800714c:	e758      	b.n	8007000 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800714e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007150:	f000 f9a9 	bl	80074a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007154:	f000 fca8 	bl	8007aa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007158:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800715a:	f000 f9f6 	bl	800754a <prvIsQueueEmpty>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	f43f af4d 	beq.w	8007000 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00d      	beq.n	8007188 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800716c:	f001 fbaa 	bl	80088c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007170:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007172:	f000 f8f0 	bl	8007356 <prvGetDisinheritPriorityAfterTimeout>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800717e:	4618      	mov	r0, r3
 8007180:	f001 f968 	bl	8008454 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007184:	f001 fbce 	bl	8008924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007188:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800718a:	4618      	mov	r0, r3
 800718c:	3738      	adds	r7, #56	; 0x38
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	e000ed04 	.word	0xe000ed04

08007198 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08e      	sub	sp, #56	; 0x38
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	623b      	str	r3, [r7, #32]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <xQueueReceiveFromISR+0x3a>
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <xQueueReceiveFromISR+0x3e>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e000      	b.n	80071d8 <xQueueReceiveFromISR+0x40>
 80071d6:	2300      	movs	r3, #0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61fb      	str	r3, [r7, #28]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071f2:	f001 fc49 	bl	8008a88 <vPortValidateInterruptPriority>
	__asm volatile
 80071f6:	f3ef 8211 	mrs	r2, BASEPRI
 80071fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	61ba      	str	r2, [r7, #24]
 800720c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800720e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d02f      	beq.n	800727e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800722c:	f000 f915 	bl	800745a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	1e5a      	subs	r2, r3, #1
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007240:	d112      	bne.n	8007268 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d016      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	3310      	adds	r3, #16
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fe26 	bl	8007ea0 <xTaskRemoveFromEventList>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00b      	beq.n	8007278 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e007      	b.n	8007278 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726c:	3301      	adds	r3, #1
 800726e:	b2db      	uxtb	r3, r3
 8007270:	b25a      	sxtb	r2, r3
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007278:	2301      	movs	r3, #1
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	e001      	b.n	8007282 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800727e:	2300      	movs	r3, #0
 8007280:	637b      	str	r3, [r7, #52]	; 0x34
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f383 8811 	msr	BASEPRI, r3
}
 800728c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007290:	4618      	mov	r0, r3
 8007292:	3738      	adds	r7, #56	; 0x38
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	60bb      	str	r3, [r7, #8]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80072bc:	f001 fb02 	bl	80088c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80072c6:	f001 fb2d 	bl	8008924 <vPortExitCritical>

	return uxReturn;
 80072ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	e7fe      	b.n	80072fa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007300:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007302:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007304:	4618      	mov	r0, r3
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10a      	bne.n	8007338 <vQueueDelete+0x28>
	__asm volatile
 8007322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	60bb      	str	r3, [r7, #8]
}
 8007334:	bf00      	nop
 8007336:	e7fe      	b.n	8007336 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f935 	bl	80075a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 fca9 	bl	8008ca0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007356:	b480      	push	{r7}
 8007358:	b085      	sub	sp, #20
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	d006      	beq.n	8007374 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1c3 0307 	rsb	r3, r3, #7
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	e001      	b.n	8007378 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007378:	68fb      	ldr	r3, [r7, #12]
	}
 800737a:	4618      	mov	r0, r3
 800737c:	3714      	adds	r7, #20
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10d      	bne.n	80073c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d14d      	bne.n	8007448 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f000 ffc9 	bl	8008348 <xTaskPriorityDisinherit>
 80073b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
 80073be:	e043      	b.n	8007448 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d119      	bne.n	80073fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6858      	ldr	r0, [r3, #4]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ce:	461a      	mov	r2, r3
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	f017 ff8c 	bl	801f2ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d32b      	bcc.n	8007448 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	605a      	str	r2, [r3, #4]
 80073f8:	e026      	b.n	8007448 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	68d8      	ldr	r0, [r3, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	461a      	mov	r2, r3
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	f017 ff72 	bl	801f2ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	425b      	negs	r3, r3
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d207      	bcs.n	8007436 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	425b      	negs	r3, r3
 8007430:	441a      	add	r2, r3
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d105      	bne.n	8007448 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	3b01      	subs	r3, #1
 8007446:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007450:	697b      	ldr	r3, [r7, #20]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d018      	beq.n	800749e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	429a      	cmp	r2, r3
 8007484:	d303      	bcc.n	800748e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68d9      	ldr	r1, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	461a      	mov	r2, r3
 8007498:	6838      	ldr	r0, [r7, #0]
 800749a:	f017 ff28 	bl	801f2ee <memcpy>
	}
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074ae:	f001 fa09 	bl	80088c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ba:	e011      	b.n	80074e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d012      	beq.n	80074ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3324      	adds	r3, #36	; 0x24
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fce9 	bl	8007ea0 <xTaskRemoveFromEventList>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074d4:	f000 fdbe 	bl	8008054 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	3b01      	subs	r3, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dce9      	bgt.n	80074bc <prvUnlockQueue+0x16>
 80074e8:	e000      	b.n	80074ec <prvUnlockQueue+0x46>
					break;
 80074ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	22ff      	movs	r2, #255	; 0xff
 80074f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074f4:	f001 fa16 	bl	8008924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074f8:	f001 f9e4 	bl	80088c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007502:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007504:	e011      	b.n	800752a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d012      	beq.n	8007534 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3310      	adds	r3, #16
 8007512:	4618      	mov	r0, r3
 8007514:	f000 fcc4 	bl	8007ea0 <xTaskRemoveFromEventList>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800751e:	f000 fd99 	bl	8008054 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	3b01      	subs	r3, #1
 8007526:	b2db      	uxtb	r3, r3
 8007528:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800752a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	dce9      	bgt.n	8007506 <prvUnlockQueue+0x60>
 8007532:	e000      	b.n	8007536 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007534:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	22ff      	movs	r2, #255	; 0xff
 800753a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800753e:	f001 f9f1 	bl	8008924 <vPortExitCritical>
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007552:	f001 f9b7 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755a:	2b00      	cmp	r3, #0
 800755c:	d102      	bne.n	8007564 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e001      	b.n	8007568 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007568:	f001 f9dc 	bl	8008924 <vPortExitCritical>

	return xReturn;
 800756c:	68fb      	ldr	r3, [r7, #12]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800757e:	f001 f9a1 	bl	80088c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758a:	429a      	cmp	r2, r3
 800758c:	d102      	bne.n	8007594 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	60fb      	str	r3, [r7, #12]
 8007592:	e001      	b.n	8007598 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007598:	f001 f9c4 	bl	8008924 <vPortExitCritical>

	return xReturn;
 800759c:	68fb      	ldr	r3, [r7, #12]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e016      	b.n	80075e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <vQueueUnregisterQueue+0x50>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4413      	add	r3, r2
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d10b      	bne.n	80075de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <vQueueUnregisterQueue+0x50>)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2100      	movs	r1, #0
 80075cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <vQueueUnregisterQueue+0x50>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4413      	add	r3, r2
 80075d8:	2200      	movs	r2, #0
 80075da:	605a      	str	r2, [r3, #4]
				break;
 80075dc:	e006      	b.n	80075ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3301      	adds	r3, #1
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b07      	cmp	r3, #7
 80075e8:	d9e5      	bls.n	80075b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr
 80075f8:	20005270 	.word	0x20005270

080075fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08e      	sub	sp, #56	; 0x38
 8007600:	af04      	add	r7, sp, #16
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	623b      	str	r3, [r7, #32]
}
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xTaskCreateStatic+0x46>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	61fb      	str	r3, [r7, #28]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007642:	23a0      	movs	r3, #160	; 0xa0
 8007644:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2ba0      	cmp	r3, #160	; 0xa0
 800764a:	d00a      	beq.n	8007662 <xTaskCreateStatic+0x66>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	61bb      	str	r3, [r7, #24]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007662:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007666:	2b00      	cmp	r3, #0
 8007668:	d01e      	beq.n	80076a8 <xTaskCreateStatic+0xac>
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01b      	beq.n	80076a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007678:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	2202      	movs	r2, #2
 800767e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007682:	2300      	movs	r3, #0
 8007684:	9303      	str	r3, [sp, #12]
 8007686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007688:	9302      	str	r3, [sp, #8]
 800768a:	f107 0314 	add.w	r3, r7, #20
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	68b9      	ldr	r1, [r7, #8]
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f850 	bl	8007740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076a2:	f000 f8eb 	bl	800787c <prvAddNewTaskToReadyList>
 80076a6:	e001      	b.n	80076ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076ac:	697b      	ldr	r3, [r7, #20]
	}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3728      	adds	r7, #40	; 0x28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b08c      	sub	sp, #48	; 0x30
 80076ba:	af04      	add	r7, sp, #16
 80076bc:	60f8      	str	r0, [r7, #12]
 80076be:	60b9      	str	r1, [r7, #8]
 80076c0:	603b      	str	r3, [r7, #0]
 80076c2:	4613      	mov	r3, r2
 80076c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076c6:	88fb      	ldrh	r3, [r7, #6]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 fa1c 	bl	8008b08 <pvPortMalloc>
 80076d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076d8:	20a0      	movs	r0, #160	; 0xa0
 80076da:	f001 fa15 	bl	8008b08 <pvPortMalloc>
 80076de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	631a      	str	r2, [r3, #48]	; 0x30
 80076ec:	e005      	b.n	80076fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076ee:	6978      	ldr	r0, [r7, #20]
 80076f0:	f001 fad6 	bl	8008ca0 <vPortFree>
 80076f4:	e001      	b.n	80076fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d017      	beq.n	8007730 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007708:	88fa      	ldrh	r2, [r7, #6]
 800770a:	2300      	movs	r3, #0
 800770c:	9303      	str	r3, [sp, #12]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	9302      	str	r3, [sp, #8]
 8007712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007714:	9301      	str	r3, [sp, #4]
 8007716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	68b9      	ldr	r1, [r7, #8]
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f80e 	bl	8007740 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007724:	69f8      	ldr	r0, [r7, #28]
 8007726:	f000 f8a9 	bl	800787c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800772a:	2301      	movs	r3, #1
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e002      	b.n	8007736 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007734:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007736:	69bb      	ldr	r3, [r7, #24]
	}
 8007738:	4618      	mov	r0, r3
 800773a:	3720      	adds	r7, #32
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
 800774c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800774e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007758:	3b01      	subs	r3, #1
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f023 0307 	bic.w	r3, r3, #7
 8007766:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	f003 0307 	and.w	r3, r3, #7
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <prvInitialiseNewTask+0x48>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	617b      	str	r3, [r7, #20]
}
 8007784:	bf00      	nop
 8007786:	e7fe      	b.n	8007786 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d01f      	beq.n	80077ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e012      	b.n	80077ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	7819      	ldrb	r1, [r3, #0]
 800779c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	3334      	adds	r3, #52	; 0x34
 80077a4:	460a      	mov	r2, r1
 80077a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	3301      	adds	r3, #1
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	2b0f      	cmp	r3, #15
 80077be:	d9e9      	bls.n	8007794 <prvInitialiseNewTask+0x54>
 80077c0:	e000      	b.n	80077c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80077c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077cc:	e003      	b.n	80077d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d8:	2b06      	cmp	r3, #6
 80077da:	d901      	bls.n	80077e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077dc:	2306      	movs	r3, #6
 80077de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80077ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ee:	2200      	movs	r2, #0
 80077f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	3304      	adds	r3, #4
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fea1 	bl	800653e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	3318      	adds	r3, #24
 8007800:	4618      	mov	r0, r3
 8007802:	f7fe fe9c 	bl	800653e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800780a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	f1c3 0207 	rsb	r2, r3, #7
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	2200      	movs	r2, #0
 8007820:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	2200      	movs	r2, #0
 8007828:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	334c      	adds	r3, #76	; 0x4c
 8007830:	224c      	movs	r2, #76	; 0x4c
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f017 fc4b 	bl	801f0d0 <memset>
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <prvInitialiseNewTask+0x130>)
 800783e:	651a      	str	r2, [r3, #80]	; 0x50
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	4a0c      	ldr	r2, [pc, #48]	; (8007874 <prvInitialiseNewTask+0x134>)
 8007844:	655a      	str	r2, [r3, #84]	; 0x54
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	4a0b      	ldr	r2, [pc, #44]	; (8007878 <prvInitialiseNewTask+0x138>)
 800784a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	69b8      	ldr	r0, [r7, #24]
 8007852:	f000 ff07 	bl	8008664 <pxPortInitialiseStack>
 8007856:	4602      	mov	r2, r0
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007866:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007868:	bf00      	nop
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	2000ca5c 	.word	0x2000ca5c
 8007874:	2000cac4 	.word	0x2000cac4
 8007878:	2000cb2c 	.word	0x2000cb2c

0800787c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007884:	f001 f81e 	bl	80088c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007888:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <prvAddNewTaskToReadyList+0xb8>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3301      	adds	r3, #1
 800788e:	4a29      	ldr	r2, [pc, #164]	; (8007934 <prvAddNewTaskToReadyList+0xb8>)
 8007890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007892:	4b29      	ldr	r3, [pc, #164]	; (8007938 <prvAddNewTaskToReadyList+0xbc>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800789a:	4a27      	ldr	r2, [pc, #156]	; (8007938 <prvAddNewTaskToReadyList+0xbc>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078a0:	4b24      	ldr	r3, [pc, #144]	; (8007934 <prvAddNewTaskToReadyList+0xb8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d110      	bne.n	80078ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078a8:	f000 fbf8 	bl	800809c <prvInitialiseTaskLists>
 80078ac:	e00d      	b.n	80078ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ae:	4b23      	ldr	r3, [pc, #140]	; (800793c <prvAddNewTaskToReadyList+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078b6:	4b20      	ldr	r3, [pc, #128]	; (8007938 <prvAddNewTaskToReadyList+0xbc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d802      	bhi.n	80078ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078c4:	4a1c      	ldr	r2, [pc, #112]	; (8007938 <prvAddNewTaskToReadyList+0xbc>)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078ca:	4b1d      	ldr	r3, [pc, #116]	; (8007940 <prvAddNewTaskToReadyList+0xc4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3301      	adds	r3, #1
 80078d0:	4a1b      	ldr	r2, [pc, #108]	; (8007940 <prvAddNewTaskToReadyList+0xc4>)
 80078d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	2201      	movs	r2, #1
 80078da:	409a      	lsls	r2, r3
 80078dc:	4b19      	ldr	r3, [pc, #100]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	4a18      	ldr	r2, [pc, #96]	; (8007944 <prvAddNewTaskToReadyList+0xc8>)
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ea:	4613      	mov	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4413      	add	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4a15      	ldr	r2, [pc, #84]	; (8007948 <prvAddNewTaskToReadyList+0xcc>)
 80078f4:	441a      	add	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4619      	mov	r1, r3
 80078fc:	4610      	mov	r0, r2
 80078fe:	f7fe fe2b 	bl	8006558 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007902:	f001 f80f 	bl	8008924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007906:	4b0d      	ldr	r3, [pc, #52]	; (800793c <prvAddNewTaskToReadyList+0xc0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00e      	beq.n	800792c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <prvAddNewTaskToReadyList+0xbc>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	429a      	cmp	r2, r3
 800791a:	d207      	bcs.n	800792c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <prvAddNewTaskToReadyList+0xd0>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	200053b0 	.word	0x200053b0
 8007938:	200052b0 	.word	0x200052b0
 800793c:	200053bc 	.word	0x200053bc
 8007940:	200053cc 	.word	0x200053cc
 8007944:	200053b8 	.word	0x200053b8
 8007948:	200052b4 	.word	0x200052b4
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007958:	2300      	movs	r3, #0
 800795a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d017      	beq.n	8007992 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007962:	4b13      	ldr	r3, [pc, #76]	; (80079b0 <vTaskDelay+0x60>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <vTaskDelay+0x30>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	60bb      	str	r3, [r7, #8]
}
 800797c:	bf00      	nop
 800797e:	e7fe      	b.n	800797e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007980:	f000 f884 	bl	8007a8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fe06 	bl	8008598 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800798c:	f000 f88c 	bl	8007aa8 <xTaskResumeAll>
 8007990:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d107      	bne.n	80079a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <vTaskDelay+0x64>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079a8:	bf00      	nop
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200053d8 	.word	0x200053d8
 80079b4:	e000ed04 	.word	0xe000ed04

080079b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b08a      	sub	sp, #40	; 0x28
 80079bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079c6:	463a      	mov	r2, r7
 80079c8:	1d39      	adds	r1, r7, #4
 80079ca:	f107 0308 	add.w	r3, r7, #8
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7f8 fe68 	bl	80006a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	9202      	str	r2, [sp, #8]
 80079dc:	9301      	str	r3, [sp, #4]
 80079de:	2300      	movs	r3, #0
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	2300      	movs	r3, #0
 80079e4:	460a      	mov	r2, r1
 80079e6:	4921      	ldr	r1, [pc, #132]	; (8007a6c <vTaskStartScheduler+0xb4>)
 80079e8:	4821      	ldr	r0, [pc, #132]	; (8007a70 <vTaskStartScheduler+0xb8>)
 80079ea:	f7ff fe07 	bl	80075fc <xTaskCreateStatic>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4a20      	ldr	r2, [pc, #128]	; (8007a74 <vTaskStartScheduler+0xbc>)
 80079f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079f4:	4b1f      	ldr	r3, [pc, #124]	; (8007a74 <vTaskStartScheduler+0xbc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d002      	beq.n	8007a02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	e001      	b.n	8007a06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d11b      	bne.n	8007a44 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	613b      	str	r3, [r7, #16]
}
 8007a1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a20:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <vTaskStartScheduler+0xc0>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	334c      	adds	r3, #76	; 0x4c
 8007a26:	4a15      	ldr	r2, [pc, #84]	; (8007a7c <vTaskStartScheduler+0xc4>)
 8007a28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a2a:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <vTaskStartScheduler+0xc8>)
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a32:	4b14      	ldr	r3, [pc, #80]	; (8007a84 <vTaskStartScheduler+0xcc>)
 8007a34:	2201      	movs	r2, #1
 8007a36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <vTaskStartScheduler+0xd0>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a3e:	f000 fe9f 	bl	8008780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a42:	e00e      	b.n	8007a62 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a4a:	d10a      	bne.n	8007a62 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	60fb      	str	r3, [r7, #12]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <vTaskStartScheduler+0xa8>
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	080202a0 	.word	0x080202a0
 8007a70:	0800806d 	.word	0x0800806d
 8007a74:	200053d4 	.word	0x200053d4
 8007a78:	200052b0 	.word	0x200052b0
 8007a7c:	2000008c 	.word	0x2000008c
 8007a80:	200053d0 	.word	0x200053d0
 8007a84:	200053bc 	.word	0x200053bc
 8007a88:	200053b4 	.word	0x200053b4

08007a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <vTaskSuspendAll+0x18>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	4a03      	ldr	r2, [pc, #12]	; (8007aa4 <vTaskSuspendAll+0x18>)
 8007a98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a9a:	bf00      	nop
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	200053d8 	.word	0x200053d8

08007aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ab6:	4b41      	ldr	r3, [pc, #260]	; (8007bbc <xTaskResumeAll+0x114>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <xTaskResumeAll+0x2c>
	__asm volatile
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	603b      	str	r3, [r7, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	e7fe      	b.n	8007ad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007ad4:	f000 fef6 	bl	80088c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007ad8:	4b38      	ldr	r3, [pc, #224]	; (8007bbc <xTaskResumeAll+0x114>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3b01      	subs	r3, #1
 8007ade:	4a37      	ldr	r2, [pc, #220]	; (8007bbc <xTaskResumeAll+0x114>)
 8007ae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae2:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <xTaskResumeAll+0x114>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d161      	bne.n	8007bae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007aea:	4b35      	ldr	r3, [pc, #212]	; (8007bc0 <xTaskResumeAll+0x118>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d05d      	beq.n	8007bae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007af2:	e02e      	b.n	8007b52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af4:	4b33      	ldr	r3, [pc, #204]	; (8007bc4 <xTaskResumeAll+0x11c>)
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3318      	adds	r3, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe fd86 	bl	8006612 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	3304      	adds	r3, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fd81 	bl	8006612 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	2201      	movs	r2, #1
 8007b16:	409a      	lsls	r2, r3
 8007b18:	4b2b      	ldr	r3, [pc, #172]	; (8007bc8 <xTaskResumeAll+0x120>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	4a2a      	ldr	r2, [pc, #168]	; (8007bc8 <xTaskResumeAll+0x120>)
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b26:	4613      	mov	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4a27      	ldr	r2, [pc, #156]	; (8007bcc <xTaskResumeAll+0x124>)
 8007b30:	441a      	add	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3304      	adds	r3, #4
 8007b36:	4619      	mov	r1, r3
 8007b38:	4610      	mov	r0, r2
 8007b3a:	f7fe fd0d 	bl	8006558 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b42:	4b23      	ldr	r3, [pc, #140]	; (8007bd0 <xTaskResumeAll+0x128>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b4c:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <xTaskResumeAll+0x12c>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b52:	4b1c      	ldr	r3, [pc, #112]	; (8007bc4 <xTaskResumeAll+0x11c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1cc      	bne.n	8007af4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b60:	f000 fb3e 	bl	80081e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b64:	4b1c      	ldr	r3, [pc, #112]	; (8007bd8 <xTaskResumeAll+0x130>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d010      	beq.n	8007b92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b70:	f000 f858 	bl	8007c24 <xTaskIncrementTick>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d002      	beq.n	8007b80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b7a:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <xTaskResumeAll+0x12c>)
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f1      	bne.n	8007b70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007b8c:	4b12      	ldr	r3, [pc, #72]	; (8007bd8 <xTaskResumeAll+0x130>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b92:	4b10      	ldr	r3, [pc, #64]	; (8007bd4 <xTaskResumeAll+0x12c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <xTaskResumeAll+0x134>)
 8007ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bae:	f000 feb9 	bl	8008924 <vPortExitCritical>

	return xAlreadyYielded;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200053d8 	.word	0x200053d8
 8007bc0:	200053b0 	.word	0x200053b0
 8007bc4:	20005370 	.word	0x20005370
 8007bc8:	200053b8 	.word	0x200053b8
 8007bcc:	200052b4 	.word	0x200052b4
 8007bd0:	200052b0 	.word	0x200052b0
 8007bd4:	200053c4 	.word	0x200053c4
 8007bd8:	200053c0 	.word	0x200053c0
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007be6:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <xTaskGetTickCount+0x1c>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007bec:	687b      	ldr	r3, [r7, #4]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	200053b4 	.word	0x200053b4

08007c00 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c06:	f000 ff3f 	bl	8008a88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <xTaskGetTickCountFromISR+0x20>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c14:	683b      	ldr	r3, [r7, #0]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	200053b4 	.word	0x200053b4

08007c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2e:	4b4e      	ldr	r3, [pc, #312]	; (8007d68 <xTaskIncrementTick+0x144>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f040 808e 	bne.w	8007d54 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c38:	4b4c      	ldr	r3, [pc, #304]	; (8007d6c <xTaskIncrementTick+0x148>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c40:	4a4a      	ldr	r2, [pc, #296]	; (8007d6c <xTaskIncrementTick+0x148>)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d120      	bne.n	8007c8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c4c:	4b48      	ldr	r3, [pc, #288]	; (8007d70 <xTaskIncrementTick+0x14c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00a      	beq.n	8007c6c <xTaskIncrementTick+0x48>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	603b      	str	r3, [r7, #0]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <xTaskIncrementTick+0x46>
 8007c6c:	4b40      	ldr	r3, [pc, #256]	; (8007d70 <xTaskIncrementTick+0x14c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	4b40      	ldr	r3, [pc, #256]	; (8007d74 <xTaskIncrementTick+0x150>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a3e      	ldr	r2, [pc, #248]	; (8007d70 <xTaskIncrementTick+0x14c>)
 8007c78:	6013      	str	r3, [r2, #0]
 8007c7a:	4a3e      	ldr	r2, [pc, #248]	; (8007d74 <xTaskIncrementTick+0x150>)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	4b3d      	ldr	r3, [pc, #244]	; (8007d78 <xTaskIncrementTick+0x154>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a3c      	ldr	r2, [pc, #240]	; (8007d78 <xTaskIncrementTick+0x154>)
 8007c88:	6013      	str	r3, [r2, #0]
 8007c8a:	f000 faa9 	bl	80081e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c8e:	4b3b      	ldr	r3, [pc, #236]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d348      	bcc.n	8007d2a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c98:	4b35      	ldr	r3, [pc, #212]	; (8007d70 <xTaskIncrementTick+0x14c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d104      	bne.n	8007cac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ca2:	4b36      	ldr	r3, [pc, #216]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ca8:	601a      	str	r2, [r3, #0]
					break;
 8007caa:	e03e      	b.n	8007d2a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cac:	4b30      	ldr	r3, [pc, #192]	; (8007d70 <xTaskIncrementTick+0x14c>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cbc:	693a      	ldr	r2, [r7, #16]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d203      	bcs.n	8007ccc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cc4:	4a2d      	ldr	r2, [pc, #180]	; (8007d7c <xTaskIncrementTick+0x158>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cca:	e02e      	b.n	8007d2a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fe fc9e 	bl	8006612 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fc95 	bl	8006612 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cec:	2201      	movs	r2, #1
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	4b23      	ldr	r3, [pc, #140]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	4a22      	ldr	r2, [pc, #136]	; (8007d80 <xTaskIncrementTick+0x15c>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a1f      	ldr	r2, [pc, #124]	; (8007d84 <xTaskIncrementTick+0x160>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe fc21 	bl	8006558 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1a:	4b1b      	ldr	r3, [pc, #108]	; (8007d88 <xTaskIncrementTick+0x164>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d3b9      	bcc.n	8007c98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d24:	2301      	movs	r3, #1
 8007d26:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d28:	e7b6      	b.n	8007c98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d2a:	4b17      	ldr	r3, [pc, #92]	; (8007d88 <xTaskIncrementTick+0x164>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d30:	4914      	ldr	r1, [pc, #80]	; (8007d84 <xTaskIncrementTick+0x160>)
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d901      	bls.n	8007d46 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007d42:	2301      	movs	r3, #1
 8007d44:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <xTaskIncrementTick+0x168>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e004      	b.n	8007d5e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007d54:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <xTaskIncrementTick+0x16c>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	4a0d      	ldr	r2, [pc, #52]	; (8007d90 <xTaskIncrementTick+0x16c>)
 8007d5c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007d5e:	697b      	ldr	r3, [r7, #20]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	200053d8 	.word	0x200053d8
 8007d6c:	200053b4 	.word	0x200053b4
 8007d70:	20005368 	.word	0x20005368
 8007d74:	2000536c 	.word	0x2000536c
 8007d78:	200053c8 	.word	0x200053c8
 8007d7c:	200053d0 	.word	0x200053d0
 8007d80:	200053b8 	.word	0x200053b8
 8007d84:	200052b4 	.word	0x200052b4
 8007d88:	200052b0 	.word	0x200052b0
 8007d8c:	200053c4 	.word	0x200053c4
 8007d90:	200053c0 	.word	0x200053c0

08007d94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b087      	sub	sp, #28
 8007d98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d9a:	4b29      	ldr	r3, [pc, #164]	; (8007e40 <vTaskSwitchContext+0xac>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007da2:	4b28      	ldr	r3, [pc, #160]	; (8007e44 <vTaskSwitchContext+0xb0>)
 8007da4:	2201      	movs	r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007da8:	e044      	b.n	8007e34 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007daa:	4b26      	ldr	r3, [pc, #152]	; (8007e44 <vTaskSwitchContext+0xb0>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <vTaskSwitchContext+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	fab3 f383 	clz	r3, r3
 8007dbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dbe:	7afb      	ldrb	r3, [r7, #11]
 8007dc0:	f1c3 031f 	rsb	r3, r3, #31
 8007dc4:	617b      	str	r3, [r7, #20]
 8007dc6:	4921      	ldr	r1, [pc, #132]	; (8007e4c <vTaskSwitchContext+0xb8>)
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4413      	add	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	440b      	add	r3, r1
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	607b      	str	r3, [r7, #4]
}
 8007dec:	bf00      	nop
 8007dee:	e7fe      	b.n	8007dee <vTaskSwitchContext+0x5a>
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a14      	ldr	r2, [pc, #80]	; (8007e4c <vTaskSwitchContext+0xb8>)
 8007dfc:	4413      	add	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	3308      	adds	r3, #8
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d104      	bne.n	8007e20 <vTaskSwitchContext+0x8c>
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	605a      	str	r2, [r3, #4]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <vTaskSwitchContext+0xbc>)
 8007e28:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e2a:	4b09      	ldr	r3, [pc, #36]	; (8007e50 <vTaskSwitchContext+0xbc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	334c      	adds	r3, #76	; 0x4c
 8007e30:	4a08      	ldr	r2, [pc, #32]	; (8007e54 <vTaskSwitchContext+0xc0>)
 8007e32:	6013      	str	r3, [r2, #0]
}
 8007e34:	bf00      	nop
 8007e36:	371c      	adds	r7, #28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200053d8 	.word	0x200053d8
 8007e44:	200053c4 	.word	0x200053c4
 8007e48:	200053b8 	.word	0x200053b8
 8007e4c:	200052b4 	.word	0x200052b4
 8007e50:	200052b0 	.word	0x200052b0
 8007e54:	2000008c 	.word	0x2000008c

08007e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <vTaskPlaceOnEventList+0x44>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3318      	adds	r3, #24
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f7fe fb8a 	bl	80065a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	6838      	ldr	r0, [r7, #0]
 8007e90:	f000 fb82 	bl	8008598 <prvAddCurrentTaskToDelayedList>
}
 8007e94:	bf00      	nop
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	200052b0 	.word	0x200052b0

08007ea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10a      	bne.n	8007ecc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	60fb      	str	r3, [r7, #12]
}
 8007ec8:	bf00      	nop
 8007eca:	e7fe      	b.n	8007eca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	3318      	adds	r3, #24
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fe fb9e 	bl	8006612 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ed6:	4b1d      	ldr	r3, [pc, #116]	; (8007f4c <xTaskRemoveFromEventList+0xac>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d11c      	bne.n	8007f18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe fb95 	bl	8006612 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eec:	2201      	movs	r2, #1
 8007eee:	409a      	lsls	r2, r3
 8007ef0:	4b17      	ldr	r3, [pc, #92]	; (8007f50 <xTaskRemoveFromEventList+0xb0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	4a16      	ldr	r2, [pc, #88]	; (8007f50 <xTaskRemoveFromEventList+0xb0>)
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	4a13      	ldr	r2, [pc, #76]	; (8007f54 <xTaskRemoveFromEventList+0xb4>)
 8007f08:	441a      	add	r2, r3
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4619      	mov	r1, r3
 8007f10:	4610      	mov	r0, r2
 8007f12:	f7fe fb21 	bl	8006558 <vListInsertEnd>
 8007f16:	e005      	b.n	8007f24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	3318      	adds	r3, #24
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	480e      	ldr	r0, [pc, #56]	; (8007f58 <xTaskRemoveFromEventList+0xb8>)
 8007f20:	f7fe fb1a 	bl	8006558 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <xTaskRemoveFromEventList+0xbc>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d905      	bls.n	8007f3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f36:	4b0a      	ldr	r3, [pc, #40]	; (8007f60 <xTaskRemoveFromEventList+0xc0>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e001      	b.n	8007f42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f42:	697b      	ldr	r3, [r7, #20]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	200053d8 	.word	0x200053d8
 8007f50:	200053b8 	.word	0x200053b8
 8007f54:	200052b4 	.word	0x200052b4
 8007f58:	20005370 	.word	0x20005370
 8007f5c:	200052b0 	.word	0x200052b0
 8007f60:	200053c4 	.word	0x200053c4

08007f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	; (8007f88 <vTaskInternalSetTimeOutState+0x24>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <vTaskInternalSetTimeOutState+0x28>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	605a      	str	r2, [r3, #4]
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr
 8007f88:	200053c8 	.word	0x200053c8
 8007f8c:	200053b4 	.word	0x200053b4

08007f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d10a      	bne.n	8007fb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10a      	bne.n	8007fd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	f383 8811 	msr	BASEPRI, r3
 8007fc4:	f3bf 8f6f 	isb	sy
 8007fc8:	f3bf 8f4f 	dsb	sy
 8007fcc:	60fb      	str	r3, [r7, #12]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007fd2:	f000 fc77 	bl	80088c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <xTaskCheckForTimeOut+0xbc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	1ad3      	subs	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fee:	d102      	bne.n	8007ff6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
 8007ff4:	e023      	b.n	800803e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b15      	ldr	r3, [pc, #84]	; (8008050 <xTaskCheckForTimeOut+0xc0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d007      	beq.n	8008012 <xTaskCheckForTimeOut+0x82>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	429a      	cmp	r2, r3
 800800a:	d302      	bcc.n	8008012 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	61fb      	str	r3, [r7, #28]
 8008010:	e015      	b.n	800803e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	429a      	cmp	r2, r3
 800801a:	d20b      	bcs.n	8008034 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	1ad2      	subs	r2, r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff ff9b 	bl	8007f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	e004      	b.n	800803e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2200      	movs	r2, #0
 8008038:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800803a:	2301      	movs	r3, #1
 800803c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800803e:	f000 fc71 	bl	8008924 <vPortExitCritical>

	return xReturn;
 8008042:	69fb      	ldr	r3, [r7, #28]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	200053b4 	.word	0x200053b4
 8008050:	200053c8 	.word	0x200053c8

08008054 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008058:	4b03      	ldr	r3, [pc, #12]	; (8008068 <vTaskMissedYield+0x14>)
 800805a:	2201      	movs	r2, #1
 800805c:	601a      	str	r2, [r3, #0]
}
 800805e:	bf00      	nop
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	200053c4 	.word	0x200053c4

0800806c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008074:	f000 f852 	bl	800811c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008078:	4b06      	ldr	r3, [pc, #24]	; (8008094 <prvIdleTask+0x28>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d9f9      	bls.n	8008074 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <prvIdleTask+0x2c>)
 8008082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008086:	601a      	str	r2, [r3, #0]
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008090:	e7f0      	b.n	8008074 <prvIdleTask+0x8>
 8008092:	bf00      	nop
 8008094:	200052b4 	.word	0x200052b4
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	e00c      	b.n	80080c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4a12      	ldr	r2, [pc, #72]	; (80080fc <prvInitialiseTaskLists+0x60>)
 80080b4:	4413      	add	r3, r2
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fa21 	bl	80064fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3301      	adds	r3, #1
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b06      	cmp	r3, #6
 80080c6:	d9ef      	bls.n	80080a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080c8:	480d      	ldr	r0, [pc, #52]	; (8008100 <prvInitialiseTaskLists+0x64>)
 80080ca:	f7fe fa18 	bl	80064fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080ce:	480d      	ldr	r0, [pc, #52]	; (8008104 <prvInitialiseTaskLists+0x68>)
 80080d0:	f7fe fa15 	bl	80064fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080d4:	480c      	ldr	r0, [pc, #48]	; (8008108 <prvInitialiseTaskLists+0x6c>)
 80080d6:	f7fe fa12 	bl	80064fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080da:	480c      	ldr	r0, [pc, #48]	; (800810c <prvInitialiseTaskLists+0x70>)
 80080dc:	f7fe fa0f 	bl	80064fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080e0:	480b      	ldr	r0, [pc, #44]	; (8008110 <prvInitialiseTaskLists+0x74>)
 80080e2:	f7fe fa0c 	bl	80064fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080e6:	4b0b      	ldr	r3, [pc, #44]	; (8008114 <prvInitialiseTaskLists+0x78>)
 80080e8:	4a05      	ldr	r2, [pc, #20]	; (8008100 <prvInitialiseTaskLists+0x64>)
 80080ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <prvInitialiseTaskLists+0x7c>)
 80080ee:	4a05      	ldr	r2, [pc, #20]	; (8008104 <prvInitialiseTaskLists+0x68>)
 80080f0:	601a      	str	r2, [r3, #0]
}
 80080f2:	bf00      	nop
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	200052b4 	.word	0x200052b4
 8008100:	20005340 	.word	0x20005340
 8008104:	20005354 	.word	0x20005354
 8008108:	20005370 	.word	0x20005370
 800810c:	20005384 	.word	0x20005384
 8008110:	2000539c 	.word	0x2000539c
 8008114:	20005368 	.word	0x20005368
 8008118:	2000536c 	.word	0x2000536c

0800811c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008122:	e019      	b.n	8008158 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008124:	f000 fbce 	bl	80088c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008128:	4b10      	ldr	r3, [pc, #64]	; (800816c <prvCheckTasksWaitingTermination+0x50>)
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fa6c 	bl	8006612 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800813a:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <prvCheckTasksWaitingTermination+0x54>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	3b01      	subs	r3, #1
 8008140:	4a0b      	ldr	r2, [pc, #44]	; (8008170 <prvCheckTasksWaitingTermination+0x54>)
 8008142:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008144:	4b0b      	ldr	r3, [pc, #44]	; (8008174 <prvCheckTasksWaitingTermination+0x58>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	3b01      	subs	r3, #1
 800814a:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <prvCheckTasksWaitingTermination+0x58>)
 800814c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800814e:	f000 fbe9 	bl	8008924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f810 	bl	8008178 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008158:	4b06      	ldr	r3, [pc, #24]	; (8008174 <prvCheckTasksWaitingTermination+0x58>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1e1      	bne.n	8008124 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008160:	bf00      	nop
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20005384 	.word	0x20005384
 8008170:	200053b0 	.word	0x200053b0
 8008174:	20005398 	.word	0x20005398

08008178 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	334c      	adds	r3, #76	; 0x4c
 8008184:	4618      	mov	r0, r3
 8008186:	f016 ffe9 	bl	801f15c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8008190:	2b00      	cmp	r3, #0
 8008192:	d108      	bne.n	80081a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fd81 	bl	8008ca0 <vPortFree>
				vPortFree( pxTCB );
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fd7e 	bl	8008ca0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081a4:	e018      	b.n	80081d8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d103      	bne.n	80081b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fd75 	bl	8008ca0 <vPortFree>
	}
 80081b6:	e00f      	b.n	80081d8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d00a      	beq.n	80081d8 <prvDeleteTCB+0x60>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	60fb      	str	r3, [r7, #12]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <prvDeleteTCB+0x5e>
	}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e6:	4b0c      	ldr	r3, [pc, #48]	; (8008218 <prvResetNextTaskUnblockTime+0x38>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d104      	bne.n	80081fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081f0:	4b0a      	ldr	r3, [pc, #40]	; (800821c <prvResetNextTaskUnblockTime+0x3c>)
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081f8:	e008      	b.n	800820c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081fa:	4b07      	ldr	r3, [pc, #28]	; (8008218 <prvResetNextTaskUnblockTime+0x38>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	4a04      	ldr	r2, [pc, #16]	; (800821c <prvResetNextTaskUnblockTime+0x3c>)
 800820a:	6013      	str	r3, [r2, #0]
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	20005368 	.word	0x20005368
 800821c:	200053d0 	.word	0x200053d0

08008220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008226:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <xTaskGetSchedulerState+0x34>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d102      	bne.n	8008234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800822e:	2301      	movs	r3, #1
 8008230:	607b      	str	r3, [r7, #4]
 8008232:	e008      	b.n	8008246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008234:	4b08      	ldr	r3, [pc, #32]	; (8008258 <xTaskGetSchedulerState+0x38>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d102      	bne.n	8008242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800823c:	2302      	movs	r3, #2
 800823e:	607b      	str	r3, [r7, #4]
 8008240:	e001      	b.n	8008246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008242:	2300      	movs	r3, #0
 8008244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008246:	687b      	ldr	r3, [r7, #4]
	}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	200053bc 	.word	0x200053bc
 8008258:	200053d8 	.word	0x200053d8

0800825c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008268:	2300      	movs	r3, #0
 800826a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d05e      	beq.n	8008330 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008276:	4b31      	ldr	r3, [pc, #196]	; (800833c <xTaskPriorityInherit+0xe0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	429a      	cmp	r2, r3
 800827e:	d24e      	bcs.n	800831e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	2b00      	cmp	r3, #0
 8008286:	db06      	blt.n	8008296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008288:	4b2c      	ldr	r3, [pc, #176]	; (800833c <xTaskPriorityInherit+0xe0>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	f1c3 0207 	rsb	r2, r3, #7
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6959      	ldr	r1, [r3, #20]
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4613      	mov	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4413      	add	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4a26      	ldr	r2, [pc, #152]	; (8008340 <xTaskPriorityInherit+0xe4>)
 80082a8:	4413      	add	r3, r2
 80082aa:	4299      	cmp	r1, r3
 80082ac:	d12f      	bne.n	800830e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe f9ad 	bl	8006612 <uxListRemove>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d10a      	bne.n	80082d4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c2:	2201      	movs	r2, #1
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43da      	mvns	r2, r3
 80082ca:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <xTaskPriorityInherit+0xe8>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4013      	ands	r3, r2
 80082d0:	4a1c      	ldr	r2, [pc, #112]	; (8008344 <xTaskPriorityInherit+0xe8>)
 80082d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80082d4:	4b19      	ldr	r3, [pc, #100]	; (800833c <xTaskPriorityInherit+0xe0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	2201      	movs	r2, #1
 80082e4:	409a      	lsls	r2, r3
 80082e6:	4b17      	ldr	r3, [pc, #92]	; (8008344 <xTaskPriorityInherit+0xe8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	4a15      	ldr	r2, [pc, #84]	; (8008344 <xTaskPriorityInherit+0xe8>)
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4a10      	ldr	r2, [pc, #64]	; (8008340 <xTaskPriorityInherit+0xe4>)
 80082fe:	441a      	add	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3304      	adds	r3, #4
 8008304:	4619      	mov	r1, r3
 8008306:	4610      	mov	r0, r2
 8008308:	f7fe f926 	bl	8006558 <vListInsertEnd>
 800830c:	e004      	b.n	8008318 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <xTaskPriorityInherit+0xe0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]
 800831c:	e008      	b.n	8008330 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008322:	4b06      	ldr	r3, [pc, #24]	; (800833c <xTaskPriorityInherit+0xe0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	429a      	cmp	r2, r3
 800832a:	d201      	bcs.n	8008330 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008330:	68fb      	ldr	r3, [r7, #12]
	}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	200052b0 	.word	0x200052b0
 8008340:	200052b4 	.word	0x200052b4
 8008344:	200053b8 	.word	0x200053b8

08008348 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d06e      	beq.n	800843c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800835e:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <xTaskPriorityDisinherit+0x100>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	693a      	ldr	r2, [r7, #16]
 8008364:	429a      	cmp	r2, r3
 8008366:	d00a      	beq.n	800837e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
}
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083a0:	1e5a      	subs	r2, r3, #1
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d044      	beq.n	800843c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d140      	bne.n	800843c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3304      	adds	r3, #4
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fe f927 	bl	8006612 <uxListRemove>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d115      	bne.n	80083f6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ce:	491f      	ldr	r1, [pc, #124]	; (800844c <xTaskPriorityDisinherit+0x104>)
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	440b      	add	r3, r1
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10a      	bne.n	80083f6 <xTaskPriorityDisinherit+0xae>
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	2201      	movs	r2, #1
 80083e6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ea:	43da      	mvns	r2, r3
 80083ec:	4b18      	ldr	r3, [pc, #96]	; (8008450 <xTaskPriorityDisinherit+0x108>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4013      	ands	r3, r2
 80083f2:	4a17      	ldr	r2, [pc, #92]	; (8008450 <xTaskPriorityDisinherit+0x108>)
 80083f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	f1c3 0207 	rsb	r2, r3, #7
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	2201      	movs	r2, #1
 8008410:	409a      	lsls	r2, r3
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <xTaskPriorityDisinherit+0x108>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4313      	orrs	r3, r2
 8008418:	4a0d      	ldr	r2, [pc, #52]	; (8008450 <xTaskPriorityDisinherit+0x108>)
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008420:	4613      	mov	r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <xTaskPriorityDisinherit+0x104>)
 800842a:	441a      	add	r2, r3
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	3304      	adds	r3, #4
 8008430:	4619      	mov	r1, r3
 8008432:	4610      	mov	r0, r2
 8008434:	f7fe f890 	bl	8006558 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800843c:	697b      	ldr	r3, [r7, #20]
	}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	200052b0 	.word	0x200052b0
 800844c:	200052b4 	.word	0x200052b4
 8008450:	200053b8 	.word	0x200053b8

08008454 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008462:	2301      	movs	r3, #1
 8008464:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d077      	beq.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10a      	bne.n	800848a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	429a      	cmp	r2, r3
 8008492:	d902      	bls.n	800849a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	61fb      	str	r3, [r7, #28]
 8008498:	e002      	b.n	80084a0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d058      	beq.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d153      	bne.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80084b4:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d10a      	bne.n	80084d4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	60bb      	str	r3, [r7, #8]
}
 80084d0:	bf00      	nop
 80084d2:	e7fe      	b.n	80084d2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	699b      	ldr	r3, [r3, #24]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	db04      	blt.n	80084f2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	f1c3 0207 	rsb	r2, r3, #7
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	6959      	ldr	r1, [r3, #20]
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a19      	ldr	r2, [pc, #100]	; (8008568 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8008502:	4413      	add	r3, r2
 8008504:	4299      	cmp	r1, r3
 8008506:	d129      	bne.n	800855c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	3304      	adds	r3, #4
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe f880 	bl	8006612 <uxListRemove>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851c:	2201      	movs	r2, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	43da      	mvns	r2, r3
 8008524:	4b11      	ldr	r3, [pc, #68]	; (800856c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4013      	ands	r3, r2
 800852a:	4a10      	ldr	r2, [pc, #64]	; (800856c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800852c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	2201      	movs	r2, #1
 8008534:	409a      	lsls	r2, r3
 8008536:	4b0d      	ldr	r3, [pc, #52]	; (800856c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4313      	orrs	r3, r2
 800853c:	4a0b      	ldr	r2, [pc, #44]	; (800856c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4613      	mov	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4a06      	ldr	r2, [pc, #24]	; (8008568 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800854e:	441a      	add	r2, r3
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	3304      	adds	r3, #4
 8008554:	4619      	mov	r1, r3
 8008556:	4610      	mov	r0, r2
 8008558:	f7fd fffe 	bl	8006558 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800855c:	bf00      	nop
 800855e:	3720      	adds	r7, #32
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	200052b0 	.word	0x200052b0
 8008568:	200052b4 	.word	0x200052b4
 800856c:	200053b8 	.word	0x200053b8

08008570 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008570:	b480      	push	{r7}
 8008572:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008574:	4b07      	ldr	r3, [pc, #28]	; (8008594 <pvTaskIncrementMutexHeldCount+0x24>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800857c:	4b05      	ldr	r3, [pc, #20]	; (8008594 <pvTaskIncrementMutexHeldCount+0x24>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008582:	3201      	adds	r2, #1
 8008584:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008586:	4b03      	ldr	r3, [pc, #12]	; (8008594 <pvTaskIncrementMutexHeldCount+0x24>)
 8008588:	681b      	ldr	r3, [r3, #0]
	}
 800858a:	4618      	mov	r0, r3
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	200052b0 	.word	0x200052b0

08008598 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085a2:	4b29      	ldr	r3, [pc, #164]	; (8008648 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085a8:	4b28      	ldr	r3, [pc, #160]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3304      	adds	r3, #4
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7fe f82f 	bl	8006612 <uxListRemove>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085ba:	4b24      	ldr	r3, [pc, #144]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	2201      	movs	r2, #1
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	43da      	mvns	r2, r3
 80085c8:	4b21      	ldr	r3, [pc, #132]	; (8008650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4013      	ands	r3, r2
 80085ce:	4a20      	ldr	r2, [pc, #128]	; (8008650 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085d8:	d10a      	bne.n	80085f0 <prvAddCurrentTaskToDelayedList+0x58>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d007      	beq.n	80085f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085e0:	4b1a      	ldr	r3, [pc, #104]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4619      	mov	r1, r3
 80085e8:	481a      	ldr	r0, [pc, #104]	; (8008654 <prvAddCurrentTaskToDelayedList+0xbc>)
 80085ea:	f7fd ffb5 	bl	8006558 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085ee:	e026      	b.n	800863e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085f8:	4b14      	ldr	r3, [pc, #80]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	429a      	cmp	r2, r3
 8008606:	d209      	bcs.n	800861c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008608:	4b13      	ldr	r3, [pc, #76]	; (8008658 <prvAddCurrentTaskToDelayedList+0xc0>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	4b0f      	ldr	r3, [pc, #60]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	3304      	adds	r3, #4
 8008612:	4619      	mov	r1, r3
 8008614:	4610      	mov	r0, r2
 8008616:	f7fd ffc3 	bl	80065a0 <vListInsert>
}
 800861a:	e010      	b.n	800863e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <prvAddCurrentTaskToDelayedList+0xc4>)
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fd ffb9 	bl	80065a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800862e:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	429a      	cmp	r2, r3
 8008636:	d202      	bcs.n	800863e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008638:	4a09      	ldr	r2, [pc, #36]	; (8008660 <prvAddCurrentTaskToDelayedList+0xc8>)
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6013      	str	r3, [r2, #0]
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	200053b4 	.word	0x200053b4
 800864c:	200052b0 	.word	0x200052b0
 8008650:	200053b8 	.word	0x200053b8
 8008654:	2000539c 	.word	0x2000539c
 8008658:	2000536c 	.word	0x2000536c
 800865c:	20005368 	.word	0x20005368
 8008660:	200053d0 	.word	0x200053d0

08008664 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3b04      	subs	r3, #4
 8008674:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800867c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3b04      	subs	r3, #4
 8008682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3b04      	subs	r3, #4
 8008692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008694:	4a0c      	ldr	r2, [pc, #48]	; (80086c8 <pxPortInitialiseStack+0x64>)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	3b14      	subs	r3, #20
 800869e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3b04      	subs	r3, #4
 80086aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f06f 0202 	mvn.w	r2, #2
 80086b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3b20      	subs	r3, #32
 80086b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	080086cd 	.word	0x080086cd

080086cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086d6:	4b12      	ldr	r3, [pc, #72]	; (8008720 <prvTaskExitError+0x54>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086de:	d00a      	beq.n	80086f6 <prvTaskExitError+0x2a>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	60fb      	str	r3, [r7, #12]
}
 80086f2:	bf00      	nop
 80086f4:	e7fe      	b.n	80086f4 <prvTaskExitError+0x28>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60bb      	str	r3, [r7, #8]
}
 8008708:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800870a:	bf00      	nop
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0fc      	beq.n	800870c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008712:	bf00      	nop
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20000020 	.word	0x20000020
	...

08008730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008730:	4b07      	ldr	r3, [pc, #28]	; (8008750 <pxCurrentTCBConst2>)
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	6808      	ldr	r0, [r1, #0]
 8008736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	f380 8809 	msr	PSP, r0
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	4770      	bx	lr
 800874c:	f3af 8000 	nop.w

08008750 <pxCurrentTCBConst2>:
 8008750:	200052b0 	.word	0x200052b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop

08008758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008758:	4808      	ldr	r0, [pc, #32]	; (800877c <prvPortStartFirstTask+0x24>)
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f380 8808 	msr	MSP, r0
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8814 	msr	CONTROL, r0
 800876a:	b662      	cpsie	i
 800876c:	b661      	cpsie	f
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	df00      	svc	0
 8008778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800877a:	bf00      	nop
 800877c:	e000ed08 	.word	0xe000ed08

08008780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008786:	4b46      	ldr	r3, [pc, #280]	; (80088a0 <xPortStartScheduler+0x120>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a46      	ldr	r2, [pc, #280]	; (80088a4 <xPortStartScheduler+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10a      	bne.n	80087a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	613b      	str	r3, [r7, #16]
}
 80087a2:	bf00      	nop
 80087a4:	e7fe      	b.n	80087a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087a6:	4b3e      	ldr	r3, [pc, #248]	; (80088a0 <xPortStartScheduler+0x120>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <xPortStartScheduler+0x128>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d10a      	bne.n	80087c6 <xPortStartScheduler+0x46>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087c6:	4b39      	ldr	r3, [pc, #228]	; (80088ac <xPortStartScheduler+0x12c>)
 80087c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	22ff      	movs	r2, #255	; 0xff
 80087d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	4b31      	ldr	r3, [pc, #196]	; (80088b0 <xPortStartScheduler+0x130>)
 80087ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087ee:	4b31      	ldr	r3, [pc, #196]	; (80088b4 <xPortStartScheduler+0x134>)
 80087f0:	2207      	movs	r2, #7
 80087f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087f4:	e009      	b.n	800880a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80087f6:	4b2f      	ldr	r3, [pc, #188]	; (80088b4 <xPortStartScheduler+0x134>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <xPortStartScheduler+0x134>)
 80087fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008800:	78fb      	ldrb	r3, [r7, #3]
 8008802:	b2db      	uxtb	r3, r3
 8008804:	005b      	lsls	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800880a:	78fb      	ldrb	r3, [r7, #3]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008812:	2b80      	cmp	r3, #128	; 0x80
 8008814:	d0ef      	beq.n	80087f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008816:	4b27      	ldr	r3, [pc, #156]	; (80088b4 <xPortStartScheduler+0x134>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f1c3 0307 	rsb	r3, r3, #7
 800881e:	2b04      	cmp	r3, #4
 8008820:	d00a      	beq.n	8008838 <xPortStartScheduler+0xb8>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60bb      	str	r3, [r7, #8]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008838:	4b1e      	ldr	r3, [pc, #120]	; (80088b4 <xPortStartScheduler+0x134>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	021b      	lsls	r3, r3, #8
 800883e:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <xPortStartScheduler+0x134>)
 8008840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008842:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <xPortStartScheduler+0x134>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <xPortStartScheduler+0x134>)
 800884c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	b2da      	uxtb	r2, r3
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008856:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <xPortStartScheduler+0x138>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a17      	ldr	r2, [pc, #92]	; (80088b8 <xPortStartScheduler+0x138>)
 800885c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <xPortStartScheduler+0x138>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a14      	ldr	r2, [pc, #80]	; (80088b8 <xPortStartScheduler+0x138>)
 8008868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800886c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800886e:	f000 f8dd 	bl	8008a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <xPortStartScheduler+0x13c>)
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008878:	f000 f8fc 	bl	8008a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800887c:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <xPortStartScheduler+0x140>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a0f      	ldr	r2, [pc, #60]	; (80088c0 <xPortStartScheduler+0x140>)
 8008882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008888:	f7ff ff66 	bl	8008758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800888c:	f7ff fa82 	bl	8007d94 <vTaskSwitchContext>
	prvTaskExitError();
 8008890:	f7ff ff1c 	bl	80086cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3718      	adds	r7, #24
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	e000ed00 	.word	0xe000ed00
 80088a4:	410fc271 	.word	0x410fc271
 80088a8:	410fc270 	.word	0x410fc270
 80088ac:	e000e400 	.word	0xe000e400
 80088b0:	200053dc 	.word	0x200053dc
 80088b4:	200053e0 	.word	0x200053e0
 80088b8:	e000ed20 	.word	0xe000ed20
 80088bc:	20000020 	.word	0x20000020
 80088c0:	e000ef34 	.word	0xe000ef34

080088c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	607b      	str	r3, [r7, #4]
}
 80088dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088de:	4b0f      	ldr	r3, [pc, #60]	; (800891c <vPortEnterCritical+0x58>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	4a0d      	ldr	r2, [pc, #52]	; (800891c <vPortEnterCritical+0x58>)
 80088e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088e8:	4b0c      	ldr	r3, [pc, #48]	; (800891c <vPortEnterCritical+0x58>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10f      	bne.n	8008910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088f0:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <vPortEnterCritical+0x5c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00a      	beq.n	8008910 <vPortEnterCritical+0x4c>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	603b      	str	r3, [r7, #0]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <vPortEnterCritical+0x4a>
	}
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	20000020 	.word	0x20000020
 8008920:	e000ed04 	.word	0xe000ed04

08008924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800892a:	4b12      	ldr	r3, [pc, #72]	; (8008974 <vPortExitCritical+0x50>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10a      	bne.n	8008948 <vPortExitCritical+0x24>
	__asm volatile
 8008932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008936:	f383 8811 	msr	BASEPRI, r3
 800893a:	f3bf 8f6f 	isb	sy
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	607b      	str	r3, [r7, #4]
}
 8008944:	bf00      	nop
 8008946:	e7fe      	b.n	8008946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <vPortExitCritical+0x50>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3b01      	subs	r3, #1
 800894e:	4a09      	ldr	r2, [pc, #36]	; (8008974 <vPortExitCritical+0x50>)
 8008950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008952:	4b08      	ldr	r3, [pc, #32]	; (8008974 <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d105      	bne.n	8008966 <vPortExitCritical+0x42>
 800895a:	2300      	movs	r3, #0
 800895c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f383 8811 	msr	BASEPRI, r3
}
 8008964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000020 	.word	0x20000020
	...

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f01e 0f10 	tst.w	lr, #16
 8008990:	bf08      	it	eq
 8008992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80089a4:	f380 8811 	msr	BASEPRI, r0
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f7ff f9f0 	bl	8007d94 <vTaskSwitchContext>
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f380 8811 	msr	BASEPRI, r0
 80089bc:	bc09      	pop	{r0, r3}
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	6808      	ldr	r0, [r1, #0]
 80089c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c6:	f01e 0f10 	tst.w	lr, #16
 80089ca:	bf08      	it	eq
 80089cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089d0:	f380 8809 	msr	PSP, r0
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst>:
 80089e0:	200052b0 	.word	0x200052b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7ff f90f 	bl	8007c24 <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <SysTick_Handler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
}
 8008a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a30:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <vPortSetupTimerInterrupt+0x38>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <vPortSetupTimerInterrupt+0x3c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	; (8008a6c <vPortSetupTimerInterrupt+0x40>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	099b      	lsrs	r3, r3, #6
 8008a48:	4a09      	ldr	r2, [pc, #36]	; (8008a70 <vPortSetupTimerInterrupt+0x44>)
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a4e:	4b04      	ldr	r3, [pc, #16]	; (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000e010 	.word	0xe000e010
 8008a64:	e000e018 	.word	0xe000e018
 8008a68:	20000000 	.word	0x20000000
 8008a6c:	10624dd3 	.word	0x10624dd3
 8008a70:	e000e014 	.word	0xe000e014

08008a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a84 <vPortEnableVFP+0x10>
 8008a78:	6801      	ldr	r1, [r0, #0]
 8008a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a7e:	6001      	str	r1, [r0, #0]
 8008a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a82:	bf00      	nop
 8008a84:	e000ed88 	.word	0xe000ed88

08008a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a8e:	f3ef 8305 	mrs	r3, IPSR
 8008a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d914      	bls.n	8008ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a9a:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <vPortValidateInterruptPriority+0x70>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008aa4:	4b15      	ldr	r3, [pc, #84]	; (8008afc <vPortValidateInterruptPriority+0x74>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	7afa      	ldrb	r2, [r7, #11]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d20a      	bcs.n	8008ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ac4:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <vPortValidateInterruptPriority+0x78>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008acc:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <vPortValidateInterruptPriority+0x7c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d90a      	bls.n	8008aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad8:	f383 8811 	msr	BASEPRI, r3
 8008adc:	f3bf 8f6f 	isb	sy
 8008ae0:	f3bf 8f4f 	dsb	sy
 8008ae4:	603b      	str	r3, [r7, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <vPortValidateInterruptPriority+0x60>
	}
 8008aea:	bf00      	nop
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	e000e3f0 	.word	0xe000e3f0
 8008afc:	200053dc 	.word	0x200053dc
 8008b00:	e000ed0c 	.word	0xe000ed0c
 8008b04:	200053e0 	.word	0x200053e0

08008b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08a      	sub	sp, #40	; 0x28
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b14:	f7fe ffba 	bl	8007a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b18:	4b5b      	ldr	r3, [pc, #364]	; (8008c88 <pvPortMalloc+0x180>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d101      	bne.n	8008b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b20:	f000 f920 	bl	8008d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b24:	4b59      	ldr	r3, [pc, #356]	; (8008c8c <pvPortMalloc+0x184>)
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 8093 	bne.w	8008c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01d      	beq.n	8008b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008b38:	2208      	movs	r2, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d014      	beq.n	8008b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f023 0307 	bic.w	r3, r3, #7
 8008b50:	3308      	adds	r3, #8
 8008b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00a      	beq.n	8008b74 <pvPortMalloc+0x6c>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	617b      	str	r3, [r7, #20]
}
 8008b70:	bf00      	nop
 8008b72:	e7fe      	b.n	8008b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d06e      	beq.n	8008c58 <pvPortMalloc+0x150>
 8008b7a:	4b45      	ldr	r3, [pc, #276]	; (8008c90 <pvPortMalloc+0x188>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d869      	bhi.n	8008c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b84:	4b43      	ldr	r3, [pc, #268]	; (8008c94 <pvPortMalloc+0x18c>)
 8008b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b88:	4b42      	ldr	r3, [pc, #264]	; (8008c94 <pvPortMalloc+0x18c>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b8e:	e004      	b.n	8008b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d903      	bls.n	8008bac <pvPortMalloc+0xa4>
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1f1      	bne.n	8008b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bac:	4b36      	ldr	r3, [pc, #216]	; (8008c88 <pvPortMalloc+0x180>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d050      	beq.n	8008c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2208      	movs	r2, #8
 8008bbc:	4413      	add	r3, r2
 8008bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	005b      	lsls	r3, r3, #1
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d91f      	bls.n	8008c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4413      	add	r3, r2
 8008bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <pvPortMalloc+0xf8>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	613b      	str	r3, [r7, #16]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	1ad2      	subs	r2, r2, r3
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c12:	69b8      	ldr	r0, [r7, #24]
 8008c14:	f000 f908 	bl	8008e28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c18:	4b1d      	ldr	r3, [pc, #116]	; (8008c90 <pvPortMalloc+0x188>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	4a1b      	ldr	r2, [pc, #108]	; (8008c90 <pvPortMalloc+0x188>)
 8008c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c26:	4b1a      	ldr	r3, [pc, #104]	; (8008c90 <pvPortMalloc+0x188>)
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <pvPortMalloc+0x190>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d203      	bcs.n	8008c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c32:	4b17      	ldr	r3, [pc, #92]	; (8008c90 <pvPortMalloc+0x188>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a18      	ldr	r2, [pc, #96]	; (8008c98 <pvPortMalloc+0x190>)
 8008c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	685a      	ldr	r2, [r3, #4]
 8008c3e:	4b13      	ldr	r3, [pc, #76]	; (8008c8c <pvPortMalloc+0x184>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	431a      	orrs	r2, r3
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c4e:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <pvPortMalloc+0x194>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <pvPortMalloc+0x194>)
 8008c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c58:	f7fe ff26 	bl	8007aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <pvPortMalloc+0x174>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	60fb      	str	r3, [r7, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	e7fe      	b.n	8008c7a <pvPortMalloc+0x172>
	return pvReturn;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3728      	adds	r7, #40	; 0x28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20008fec 	.word	0x20008fec
 8008c8c:	20009000 	.word	0x20009000
 8008c90:	20008ff0 	.word	0x20008ff0
 8008c94:	20008fe4 	.word	0x20008fe4
 8008c98:	20008ff4 	.word	0x20008ff4
 8008c9c:	20008ff8 	.word	0x20008ff8

08008ca0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b086      	sub	sp, #24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d04d      	beq.n	8008d4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	697a      	ldr	r2, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	685a      	ldr	r2, [r3, #4]
 8008cc4:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <vPortFree+0xb8>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10a      	bne.n	8008ce4 <vPortFree+0x44>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00a      	beq.n	8008d02 <vPortFree+0x62>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60bb      	str	r3, [r7, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <vPortFree+0xb8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01e      	beq.n	8008d4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11a      	bne.n	8008d4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b0e      	ldr	r3, [pc, #56]	; (8008d58 <vPortFree+0xb8>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	43db      	mvns	r3, r3
 8008d22:	401a      	ands	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d28:	f7fe feb0 	bl	8007a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <vPortFree+0xbc>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4413      	add	r3, r2
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <vPortFree+0xbc>)
 8008d38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d3a:	6938      	ldr	r0, [r7, #16]
 8008d3c:	f000 f874 	bl	8008e28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <vPortFree+0xc0>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3301      	adds	r3, #1
 8008d46:	4a06      	ldr	r2, [pc, #24]	; (8008d60 <vPortFree+0xc0>)
 8008d48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d4a:	f7fe fead 	bl	8007aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d4e:	bf00      	nop
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	20009000 	.word	0x20009000
 8008d5c:	20008ff0 	.word	0x20008ff0
 8008d60:	20008ffc 	.word	0x20008ffc

08008d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d70:	4b27      	ldr	r3, [pc, #156]	; (8008e10 <prvHeapInit+0xac>)
 8008d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00c      	beq.n	8008d98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	3307      	adds	r3, #7
 8008d82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0307 	bic.w	r3, r3, #7
 8008d8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d8c:	68ba      	ldr	r2, [r7, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1f      	ldr	r2, [pc, #124]	; (8008e10 <prvHeapInit+0xac>)
 8008d94:	4413      	add	r3, r2
 8008d96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	; (8008e14 <prvHeapInit+0xb0>)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <prvHeapInit+0xb0>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008db0:	2208      	movs	r2, #8
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0307 	bic.w	r3, r3, #7
 8008dbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	4a15      	ldr	r2, [pc, #84]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <prvHeapInit+0xb4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dce:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <prvHeapInit+0xb4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	1ad2      	subs	r2, r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008de4:	4b0c      	ldr	r3, [pc, #48]	; (8008e18 <prvHeapInit+0xb4>)
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	4a0a      	ldr	r2, [pc, #40]	; (8008e1c <prvHeapInit+0xb8>)
 8008df2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a09      	ldr	r2, [pc, #36]	; (8008e20 <prvHeapInit+0xbc>)
 8008dfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dfc:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <prvHeapInit+0xc0>)
 8008dfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008e02:	601a      	str	r2, [r3, #0]
}
 8008e04:	bf00      	nop
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	200053e4 	.word	0x200053e4
 8008e14:	20008fe4 	.word	0x20008fe4
 8008e18:	20008fec 	.word	0x20008fec
 8008e1c:	20008ff4 	.word	0x20008ff4
 8008e20:	20008ff0 	.word	0x20008ff0
 8008e24:	20009000 	.word	0x20009000

08008e28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e30:	4b28      	ldr	r3, [pc, #160]	; (8008ed4 <prvInsertBlockIntoFreeList+0xac>)
 8008e32:	60fb      	str	r3, [r7, #12]
 8008e34:	e002      	b.n	8008e3c <prvInsertBlockIntoFreeList+0x14>
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d8f7      	bhi.n	8008e36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	4413      	add	r3, r2
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d108      	bne.n	8008e6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	685a      	ldr	r2, [r3, #4]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	441a      	add	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	441a      	add	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d118      	bne.n	8008eb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d00d      	beq.n	8008ea6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e008      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ea6:	4b0c      	ldr	r3, [pc, #48]	; (8008ed8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	601a      	str	r2, [r3, #0]
 8008eae:	e003      	b.n	8008eb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008eb8:	68fa      	ldr	r2, [r7, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d002      	beq.n	8008ec6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	20008fe4 	.word	0x20008fe4
 8008ed8:	20008fec 	.word	0x20008fec

08008edc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4293      	cmp	r3, r2
 8008eec:	bf38      	it	cc
 8008eee:	4613      	movcc	r3, r2
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8008f06:	683a      	ldr	r2, [r7, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	bf28      	it	cs
 8008f0e:	4613      	movcs	r3, r2
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	fb01 f202 	mul.w	r2, r1, r2
 8008f34:	1a9b      	subs	r3, r3, r2
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	1ad3      	subs	r3, r2, r3
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	370c      	adds	r7, #12
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	4413      	add	r3, r2
 8008f56:	3b01      	subs	r3, #1
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7ff ffde 	bl	8008f1c <lfs_aligndown>
 8008f60:	4603      	mov	r3, r0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8008f6a:	b480      	push	{r7}
 8008f6c:	b083      	sub	sp, #12
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	fab3 f383 	clz	r3, r3
 8008f7a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8008f8a:	b480      	push	{r7}
 8008f8c:	b083      	sub	sp, #12
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	fa93 f3a3 	rbit	r3, r3
 8008f98:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	370c      	adds	r7, #12
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr

08008fa8 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7f7 f97d 	bl	80002b0 <__popcountsi2>
 8008fb6:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3708      	adds	r7, #8
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	1ad3      	subs	r3, r2, r3
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 8008fe4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff ffee 	bl	8008fdc <lfs_fromle32>
 8009000:	4603      	mov	r3, r0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr

08009022 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff ffed 	bl	800900a <lfs_frombe32>
 8009030:	4603      	mov	r3, r0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f015 fc94 	bl	801e970 <malloc>
 8009048:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8009052:	b580      	push	{r7, lr}
 8009054:	b082      	sub	sp, #8
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f015 fc90 	bl	801e980 <free>
#else
    (void)p;
#endif
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009078:	601a      	str	r2, [r3, #0]
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8009086:	b580      	push	{r7, lr}
 8009088:	b082      	sub	sp, #8
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	68d8      	ldr	r0, [r3, #12]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800909a:	461a      	mov	r2, r3
 800909c:	21ff      	movs	r1, #255	; 0xff
 800909e:	f016 f817 	bl	801f0d0 <memset>
    pcache->block = LFS_BLOCK_NULL;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090a8:	601a      	str	r2, [r3, #0]
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
	...

080090b4 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80090b4:	b5b0      	push	{r4, r5, r7, lr}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af02      	add	r7, sp, #8
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80090c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d208      	bcs.n	80090e4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80090d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d6:	441a      	add	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (block >= lfs->cfg->block_count ||
 80090de:	429a      	cmp	r2, r3
 80090e0:	f240 811b 	bls.w	800931a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80090e4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80090e8:	e11c      	b.n	8009324 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d03f      	beq.n	8009174 <lfs_bd_read+0xc0>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d13a      	bne.n	8009174 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8009108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800910a:	429a      	cmp	r2, r3
 800910c:	d232      	bcs.n	8009174 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009114:	429a      	cmp	r2, r3
 8009116:	d324      	bcc.n	8009162 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	689a      	ldr	r2, [r3, #8]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6859      	ldr	r1, [r3, #4]
 8009120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009122:	1acb      	subs	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	4619      	mov	r1, r3
 8009128:	69b8      	ldr	r0, [r7, #24]
 800912a:	f7ff fee7 	bl	8008efc <lfs_min>
 800912e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	68da      	ldr	r2, [r3, #12]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800913a:	1acb      	subs	r3, r1, r3
 800913c:	4413      	add	r3, r2
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	4619      	mov	r1, r3
 8009142:	69f8      	ldr	r0, [r7, #28]
 8009144:	f016 f8d3 	bl	801f2ee <memcpy>

                data += diff;
 8009148:	69fa      	ldr	r2, [r7, #28]
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	4413      	add	r3, r2
 800914e:	61fb      	str	r3, [r7, #28]
                off += diff;
 8009150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	4413      	add	r3, r2
 8009156:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8009158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8009160:	e0db      	b.n	800931a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	4619      	mov	r1, r3
 800916c:	69b8      	ldr	r0, [r7, #24]
 800916e:	f7ff fec5 	bl	8008efc <lfs_min>
 8009172:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917a:	429a      	cmp	r2, r3
 800917c:	d13a      	bne.n	80091f4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	4413      	add	r3, r2
        if (block == rcache->block &&
 8009188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800918a:	429a      	cmp	r2, r3
 800918c:	d232      	bcs.n	80091f4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009194:	429a      	cmp	r2, r3
 8009196:	d324      	bcc.n	80091e2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689a      	ldr	r2, [r3, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6859      	ldr	r1, [r3, #4]
 80091a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091a2:	1acb      	subs	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	4619      	mov	r1, r3
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f7ff fea7 	bl	8008efc <lfs_min>
 80091ae:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	68da      	ldr	r2, [r3, #12]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80091ba:	1acb      	subs	r3, r1, r3
 80091bc:	4413      	add	r3, r2
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	4619      	mov	r1, r3
 80091c2:	69f8      	ldr	r0, [r7, #28]
 80091c4:	f016 f893 	bl	801f2ee <memcpy>

                data += diff;
 80091c8:	69fa      	ldr	r2, [r7, #28]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	4413      	add	r3, r2
 80091ce:	61fb      	str	r3, [r7, #28]
                off += diff;
 80091d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	4413      	add	r3, r2
 80091d6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80091d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80091e0:	e09b      	b.n	800931a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	4619      	mov	r1, r3
 80091ec:	69b8      	ldr	r0, [r7, #24]
 80091ee:	f7ff fe85 	bl	8008efc <lfs_min>
 80091f2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80091f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d336      	bcc.n	800926a <lfs_bd_read+0x1b6>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009200:	69da      	ldr	r2, [r3, #28]
 8009202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009204:	fbb3 f1f2 	udiv	r1, r3, r2
 8009208:	fb01 f202 	mul.w	r2, r1, r2
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	2b00      	cmp	r3, #0
 8009210:	d12b      	bne.n	800926a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009216:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8009218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800921a:	429a      	cmp	r2, r3
 800921c:	d325      	bcc.n	800926a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009222:	69db      	ldr	r3, [r3, #28]
 8009224:	4619      	mov	r1, r3
 8009226:	69b8      	ldr	r0, [r7, #24]
 8009228:	f7ff fe78 	bl	8008f1c <lfs_aligndown>
 800922c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009232:	685c      	ldr	r4, [r3, #4]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009242:	47a0      	blx	r4
 8009244:	6178      	str	r0, [r7, #20]
            if (err) {
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <lfs_bd_read+0x19c>
                return err;
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	e069      	b.n	8009324 <lfs_bd_read+0x270>
            }

            data += diff;
 8009250:	69fa      	ldr	r2, [r7, #28]
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	4413      	add	r3, r2
 8009256:	61fb      	str	r3, [r7, #28]
            off += diff;
 8009258:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	4413      	add	r3, r2
 800925e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8009260:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8009268:	e057      	b.n	800931a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009272:	429a      	cmp	r2, r3
 8009274:	d305      	bcc.n	8009282 <lfs_bd_read+0x1ce>
 8009276:	4b2d      	ldr	r3, [pc, #180]	; (800932c <lfs_bd_read+0x278>)
 8009278:	4a2d      	ldr	r2, [pc, #180]	; (8009330 <lfs_bd_read+0x27c>)
 800927a:	215e      	movs	r1, #94	; 0x5e
 800927c:	482d      	ldr	r0, [pc, #180]	; (8009334 <lfs_bd_read+0x280>)
 800927e:	f015 fb55 	bl	801e92c <__assert_func>
        rcache->block = block;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009286:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800928c:	69db      	ldr	r3, [r3, #28]
 800928e:	4619      	mov	r1, r3
 8009290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009292:	f7ff fe43 	bl	8008f1c <lfs_aligndown>
 8009296:	4602      	mov	r2, r0
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800929c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a6:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f7ff fe4b 	bl	8008f46 <lfs_alignup>
 80092b0:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                lfs_min(
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7ff fe1e 	bl	8008efc <lfs_min>
 80092c0:	4602      	mov	r2, r0
                - rcache->off,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 80092c6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(
 80092ce:	4619      	mov	r1, r3
 80092d0:	4610      	mov	r0, r2
 80092d2:	f7ff fe13 	bl	8008efc <lfs_min>
 80092d6:	4602      	mov	r2, r0
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e0:	685c      	ldr	r4, [r3, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6819      	ldr	r1, [r3, #0]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462b      	mov	r3, r5
 80092fa:	47a0      	blx	r4
 80092fc:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dd05      	ble.n	8009310 <lfs_bd_read+0x25c>
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <lfs_bd_read+0x284>)
 8009306:	4a0a      	ldr	r2, [pc, #40]	; (8009330 <lfs_bd_read+0x27c>)
 8009308:	2169      	movs	r1, #105	; 0x69
 800930a:	480a      	ldr	r0, [pc, #40]	; (8009334 <lfs_bd_read+0x280>)
 800930c:	f015 fb0e 	bl	801e92c <__assert_func>
        if (err) {
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <lfs_bd_read+0x266>
            return err;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	e004      	b.n	8009324 <lfs_bd_read+0x270>
    while (size > 0) {
 800931a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931c:	2b00      	cmp	r3, #0
 800931e:	f47f aee4 	bne.w	80090ea <lfs_bd_read+0x36>
        }
    }

    return 0;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bdb0      	pop	{r4, r5, r7, pc}
 800932c:	080202a8 	.word	0x080202a8
 8009330:	08024574 	.word	0x08024574
 8009334:	080202c8 	.word	0x080202c8
 8009338:	080202f4 	.word	0x080202f4

0800933c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af04      	add	r7, sp, #16
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800934a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8009352:	2300      	movs	r3, #0
 8009354:	627b      	str	r3, [r7, #36]	; 0x24
 8009356:	e039      	b.n	80093cc <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8009358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800935a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	2108      	movs	r1, #8
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fdcb 	bl	8008efc <lfs_min>
 8009366:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	1ad1      	subs	r1, r2, r3
 800936e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	4413      	add	r3, r2
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	9203      	str	r2, [sp, #12]
 8009378:	f107 0210 	add.w	r2, r7, #16
 800937c:	9202      	str	r2, [sp, #8]
 800937e:	9301      	str	r3, [sp, #4]
 8009380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	460b      	mov	r3, r1
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f7ff fe92 	bl	80090b4 <lfs_bd_read>
 8009390:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <lfs_bd_cmp+0x60>
            return res;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	e01c      	b.n	80093d6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800939c:	6a3a      	ldr	r2, [r7, #32]
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	18d1      	adds	r1, r2, r3
 80093a2:	f107 0310 	add.w	r3, r7, #16
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f015 fe81 	bl	801f0b0 <memcmp>
 80093ae:	61b8      	str	r0, [r7, #24]
        if (res) {
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d006      	beq.n	80093c4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	da01      	bge.n	80093c0 <lfs_bd_cmp+0x84>
 80093bc:	2301      	movs	r3, #1
 80093be:	e00a      	b.n	80093d6 <lfs_bd_cmp+0x9a>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e008      	b.n	80093d6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 80093c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
 80093cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d3c1      	bcc.n	8009358 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3728      	adds	r7, #40	; 0x28
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80093e0:	b5b0      	push	{r4, r5, r7, lr}
 80093e2:	b08c      	sub	sp, #48	; 0x30
 80093e4:	af04      	add	r7, sp, #16
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f6:	d061      	beq.n	80094bc <lfs_bd_flush+0xdc>
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f113 0f02 	cmn.w	r3, #2
 8009400:	d05c      	beq.n	80094bc <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800940a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800940c:	429a      	cmp	r2, r3
 800940e:	d305      	bcc.n	800941c <lfs_bd_flush+0x3c>
 8009410:	4b2d      	ldr	r3, [pc, #180]	; (80094c8 <lfs_bd_flush+0xe8>)
 8009412:	4a2e      	ldr	r2, [pc, #184]	; (80094cc <lfs_bd_flush+0xec>)
 8009414:	2197      	movs	r1, #151	; 0x97
 8009416:	482e      	ldr	r0, [pc, #184]	; (80094d0 <lfs_bd_flush+0xf0>)
 8009418:	f015 fa88 	bl	801e92c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7ff fd8c 	bl	8008f46 <lfs_alignup>
 800942e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009434:	689c      	ldr	r4, [r3, #8]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6819      	ldr	r1, [r3, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	462b      	mov	r3, r5
 800944c:	47a0      	blx	r4
 800944e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	dd05      	ble.n	8009462 <lfs_bd_flush+0x82>
 8009456:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <lfs_bd_flush+0xf4>)
 8009458:	4a1c      	ldr	r2, [pc, #112]	; (80094cc <lfs_bd_flush+0xec>)
 800945a:	219b      	movs	r1, #155	; 0x9b
 800945c:	481c      	ldr	r0, [pc, #112]	; (80094d0 <lfs_bd_flush+0xf0>)
 800945e:	f015 fa65 	bl	801e92c <__assert_func>
        if (err) {
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d001      	beq.n	800946c <lfs_bd_flush+0x8c>
            return err;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	e028      	b.n	80094be <lfs_bd_flush+0xde>
        }

        if (validate) {
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d020      	beq.n	80094b4 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8009472:	6879      	ldr	r1, [r7, #4]
 8009474:	68f8      	ldr	r0, [r7, #12]
 8009476:	f7ff fdf7 	bl	8009068 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8009486:	69f8      	ldr	r0, [r7, #28]
 8009488:	9003      	str	r0, [sp, #12]
 800948a:	9102      	str	r1, [sp, #8]
 800948c:	9201      	str	r2, [sp, #4]
 800948e:	9300      	str	r3, [sp, #0]
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	2100      	movs	r1, #0
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff ff50 	bl	800933c <lfs_bd_cmp>
 800949c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	da01      	bge.n	80094a8 <lfs_bd_flush+0xc8>
                return res;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	e00a      	b.n	80094be <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 80094ae:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80094b2:	e004      	b.n	80094be <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fde5 	bl	8009086 <lfs_cache_zero>
    }

    return 0;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bdb0      	pop	{r4, r5, r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08020300 	.word	0x08020300
 80094cc:	08024580 	.word	0x08024580
 80094d0:	080202c8 	.word	0x080202c8
 80094d4:	080202f4 	.word	0x080202f4

080094d8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
 80094e4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff fdbd 	bl	8009068 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f7ff ff73 	bl	80093e0 <lfs_bd_flush>
 80094fa:	6178      	str	r0, [r7, #20]
    if (err) {
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d001      	beq.n	8009506 <lfs_bd_sync+0x2e>
        return err;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	e011      	b.n	800952a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dd05      	ble.n	8009528 <lfs_bd_sync+0x50>
 800951c:	4b05      	ldr	r3, [pc, #20]	; (8009534 <lfs_bd_sync+0x5c>)
 800951e:	4a06      	ldr	r2, [pc, #24]	; (8009538 <lfs_bd_sync+0x60>)
 8009520:	21c1      	movs	r1, #193	; 0xc1
 8009522:	4806      	ldr	r0, [pc, #24]	; (800953c <lfs_bd_sync+0x64>)
 8009524:	f015 fa02 	bl	801e92c <__assert_func>
    return err;
 8009528:	697b      	ldr	r3, [r7, #20]
}
 800952a:	4618      	mov	r0, r3
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	080202f4 	.word	0x080202f4
 8009538:	08024590 	.word	0x08024590
 800953c:	080202c8 	.word	0x080202c8

08009540 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	f113 0f02 	cmn.w	r3, #2
 8009558:	d00b      	beq.n	8009572 <lfs_bd_prog+0x32>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009562:	429a      	cmp	r2, r3
 8009564:	d305      	bcc.n	8009572 <lfs_bd_prog+0x32>
 8009566:	4b47      	ldr	r3, [pc, #284]	; (8009684 <lfs_bd_prog+0x144>)
 8009568:	4a47      	ldr	r2, [pc, #284]	; (8009688 <lfs_bd_prog+0x148>)
 800956a:	21cc      	movs	r1, #204	; 0xcc
 800956c:	4847      	ldr	r0, [pc, #284]	; (800968c <lfs_bd_prog+0x14c>)
 800956e:	f015 f9dd 	bl	801e92c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8009572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009576:	441a      	add	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	429a      	cmp	r2, r3
 8009580:	d977      	bls.n	8009672 <lfs_bd_prog+0x132>
 8009582:	4b43      	ldr	r3, [pc, #268]	; (8009690 <lfs_bd_prog+0x150>)
 8009584:	4a40      	ldr	r2, [pc, #256]	; (8009688 <lfs_bd_prog+0x148>)
 8009586:	21cd      	movs	r1, #205	; 0xcd
 8009588:	4840      	ldr	r0, [pc, #256]	; (800968c <lfs_bd_prog+0x14c>)
 800958a:	f015 f9cf 	bl	801e92c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009594:	429a      	cmp	r2, r3
 8009596:	d151      	bne.n	800963c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800959c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d34c      	bcc.n	800963c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	685a      	ldr	r2, [r3, #4]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ac:	4413      	add	r3, r2
                off >= pcache->off &&
 80095ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d243      	bcs.n	800963c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	6859      	ldr	r1, [r3, #4]
 80095be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 80095c2:	4413      	add	r3, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80095c8:	f7ff fc98 	bl	8008efc <lfs_min>
 80095cc:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	68da      	ldr	r2, [r3, #12]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095d8:	1acb      	subs	r3, r1, r3
 80095da:	4413      	add	r3, r2
 80095dc:	69ba      	ldr	r2, [r7, #24]
 80095de:	69f9      	ldr	r1, [r7, #28]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f015 fe84 	bl	801f2ee <memcpy>

            data += diff;
 80095e6:	69fa      	ldr	r2, [r7, #28]
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	4413      	add	r3, r2
 80095ec:	61fb      	str	r3, [r7, #28]
            off += diff;
 80095ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	4413      	add	r3, r2
 80095f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 80095f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	1ad3      	subs	r3, r2, r3
 80095fc:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	6898      	ldr	r0, [r3, #8]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	685b      	ldr	r3, [r3, #4]
 8009606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	4619      	mov	r1, r3
 800960c:	f7ff fc66 	bl	8008edc <lfs_max>
 8009610:	4602      	mov	r2, r0
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	689a      	ldr	r2, [r3, #8]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800961e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009620:	429a      	cmp	r2, r3
 8009622:	d126      	bne.n	8009672 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	68b9      	ldr	r1, [r7, #8]
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fed8 	bl	80093e0 <lfs_bd_flush>
 8009630:	6178      	str	r0, [r7, #20]
                if (err) {
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d01c      	beq.n	8009672 <lfs_bd_prog+0x132>
                    return err;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	e01e      	b.n	800967a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009644:	d005      	beq.n	8009652 <lfs_bd_prog+0x112>
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <lfs_bd_prog+0x154>)
 8009648:	4a0f      	ldr	r2, [pc, #60]	; (8009688 <lfs_bd_prog+0x148>)
 800964a:	21ea      	movs	r1, #234	; 0xea
 800964c:	480f      	ldr	r0, [pc, #60]	; (800968c <lfs_bd_prog+0x14c>)
 800964e:	f015 f96d 	bl	801e92c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009656:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	4619      	mov	r1, r3
 8009660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009662:	f7ff fc5b 	bl	8008f1c <lfs_aligndown>
 8009666:	4602      	mov	r2, r0
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8009672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009674:	2b00      	cmp	r3, #0
 8009676:	d18a      	bne.n	800958e <lfs_bd_prog+0x4e>
    }

    return 0;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3720      	adds	r7, #32
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	08020328 	.word	0x08020328
 8009688:	0802459c 	.word	0x0802459c
 800968c:	080202c8 	.word	0x080202c8
 8009690:	08020364 	.word	0x08020364
 8009694:	08020388 	.word	0x08020388

08009698 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d305      	bcc.n	80096ba <lfs_bd_erase+0x22>
 80096ae:	4b0e      	ldr	r3, [pc, #56]	; (80096e8 <lfs_bd_erase+0x50>)
 80096b0:	4a0e      	ldr	r2, [pc, #56]	; (80096ec <lfs_bd_erase+0x54>)
 80096b2:	21f8      	movs	r1, #248	; 0xf8
 80096b4:	480e      	ldr	r0, [pc, #56]	; (80096f0 <lfs_bd_erase+0x58>)
 80096b6:	f015 f939 	bl	801e92c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	687a      	ldr	r2, [r7, #4]
 80096c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	4610      	mov	r0, r2
 80096c8:	4798      	blx	r3
 80096ca:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	dd05      	ble.n	80096de <lfs_bd_erase+0x46>
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <lfs_bd_erase+0x5c>)
 80096d4:	4a05      	ldr	r2, [pc, #20]	; (80096ec <lfs_bd_erase+0x54>)
 80096d6:	21fa      	movs	r1, #250	; 0xfa
 80096d8:	4805      	ldr	r0, [pc, #20]	; (80096f0 <lfs_bd_erase+0x58>)
 80096da:	f015 f927 	bl	801e92c <__assert_func>
    return err;
 80096de:	68fb      	ldr	r3, [r7, #12]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	080202a8 	.word	0x080202a8
 80096ec:	080245a8 	.word	0x080245a8
 80096f0:	080202c8 	.word	0x080202c8
 80096f4:	080202f4 	.word	0x080202f4

080096f8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	601a      	str	r2, [r3, #0]
}
 8009716:	bf00      	nop
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8009722:	b480      	push	{r7}
 8009724:	b083      	sub	sp, #12
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009732:	d005      	beq.n	8009740 <lfs_pair_isnull+0x1e>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	3304      	adds	r3, #4
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800973e:	d101      	bne.n	8009744 <lfs_pair_isnull+0x22>
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <lfs_pair_isnull+0x24>
 8009744:	2300      	movs	r3, #0
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	b2db      	uxtb	r3, r3
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681a      	ldr	r2, [r3, #0]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	429a      	cmp	r2, r3
 800976c:	d017      	beq.n	800979e <lfs_pair_cmp+0x46>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3304      	adds	r3, #4
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	3304      	adds	r3, #4
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	429a      	cmp	r2, r3
 800977c:	d00f      	beq.n	800979e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	3304      	adds	r3, #4
 8009786:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009788:	429a      	cmp	r2, r3
 800978a:	d008      	beq.n	800979e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3304      	adds	r3, #4
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8009796:	429a      	cmp	r2, r3
 8009798:	d001      	beq.n	800979e <lfs_pair_cmp+0x46>
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <lfs_pair_cmp+0x48>
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	370c      	adds	r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80097ac:	b480      	push	{r7}
 80097ae:	b083      	sub	sp, #12
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d107      	bne.n	80097d2 <lfs_pair_sync+0x26>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	3304      	adds	r3, #4
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	3304      	adds	r3, #4
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d00d      	beq.n	80097ee <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	3304      	adds	r3, #4
 80097da:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80097dc:	429a      	cmp	r2, r3
 80097de:	d108      	bne.n	80097f2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3304      	adds	r3, #4
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d101      	bne.n	80097f2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <lfs_pair_sync+0x48>
 80097f2:	2300      	movs	r3, #0
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	b2db      	uxtb	r3, r3
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8009806:	b590      	push	{r4, r7, lr}
 8009808:	b083      	sub	sp, #12
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f7ff fbe2 	bl	8008fdc <lfs_fromle32>
 8009818:	4602      	mov	r2, r0
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	3304      	adds	r3, #4
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	1d1c      	adds	r4, r3, #4
 8009828:	4610      	mov	r0, r2
 800982a:	f7ff fbd7 	bl	8008fdc <lfs_fromle32>
 800982e:	4603      	mov	r3, r0
 8009830:	6023      	str	r3, [r4, #0]
}
 8009832:	bf00      	nop
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	bd90      	pop	{r4, r7, pc}

0800983a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800983a:	b590      	push	{r4, r7, lr}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fbd3 	bl	8008ff2 <lfs_tole32>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3304      	adds	r3, #4
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	1d1c      	adds	r4, r3, #4
 800985c:	4610      	mov	r0, r2
 800985e:	f7ff fbc8 	bl	8008ff2 <lfs_tole32>
 8009862:	4603      	mov	r3, r0
 8009864:	6023      	str	r3, [r4, #0]
}
 8009866:	bf00      	nop
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	bd90      	pop	{r4, r7, pc}

0800986e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	43db      	mvns	r3, r3
 800987a:	0fdb      	lsrs	r3, r3, #31
 800987c:	b2db      	uxtb	r3, r3
}
 800987e:	4618      	mov	r0, r3
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	059b      	lsls	r3, r3, #22
 8009896:	159b      	asrs	r3, r3, #22
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800989c:	bf0c      	ite	eq
 800989e:	2301      	moveq	r3, #1
 80098a0:	2300      	movne	r3, #0
 80098a2:	b2db      	uxtb	r3, r3
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	0d1b      	lsrs	r3, r3, #20
 80098bc:	b29b      	uxth	r3, r3
 80098be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098c2:	b29b      	uxth	r3, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	370c      	adds	r7, #12
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	0d1b      	lsrs	r3, r3, #20
 80098dc:	b29b      	uxth	r3, r3
 80098de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098e2:	b29b      	uxth	r3, r3
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	0d1b      	lsrs	r3, r3, #20
 80098fc:	b2db      	uxtb	r3, r3
}
 80098fe:	4618      	mov	r0, r3
 8009900:	370c      	adds	r7, #12
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr

0800990a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800990a:	b580      	push	{r7, lr}
 800990c:	b082      	sub	sp, #8
 800990e:	af00      	add	r7, sp, #0
 8009910:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff ffec 	bl	80098f0 <lfs_tag_chunk>
 8009918:	4603      	mov	r3, r0
 800991a:	b25b      	sxtb	r3, r3
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	0a9b      	lsrs	r3, r3, #10
 8009930:	b29b      	uxth	r3, r3
 8009932:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009936:	b29b      	uxth	r3, r3
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff ff8f 	bl	800988a <lfs_tag_isdelete>
 800996c:	4603      	mov	r3, r0
 800996e:	461a      	mov	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4413      	add	r3, r2
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff ffe5 	bl	8009944 <lfs_tag_size>
 800997a:	4603      	mov	r3, r0
 800997c:	3304      	adds	r3, #4
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8009990:	2300      	movs	r3, #0
 8009992:	60fb      	str	r3, [r7, #12]
 8009994:	e012      	b.n	80099bc <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	4413      	add	r3, r2
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	4413      	add	r3, r2
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4403      	add	r3, r0
 80099b2:	404a      	eors	r2, r1
 80099b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3301      	adds	r3, #1
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dde9      	ble.n	8009996 <lfs_gstate_xor+0x10>
    }
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80099d8:	2300      	movs	r3, #0
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	e00b      	b.n	80099f6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	4413      	add	r3, r2
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <lfs_gstate_iszero+0x20>
            return false;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e006      	b.n	80099fe <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3301      	adds	r3, #1
 80099f4:	60fb      	str	r3, [r7, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	ddf0      	ble.n	80099de <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80099fc:	2301      	movs	r3, #1
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3714      	adds	r7, #20
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7ff ff94 	bl	8009944 <lfs_tag_size>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	bf14      	ite	ne
 8009a22:	2301      	movne	r3, #1
 8009a24:	2300      	moveq	r3, #0
 8009a26:	b2db      	uxtb	r3, r3
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff ff81 	bl	8009944 <lfs_tag_size>
 8009a42:	4603      	mov	r3, r0
 8009a44:	b2db      	uxtb	r3, r3
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3708      	adds	r7, #8
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7ff ff28 	bl	80098b0 <lfs_tag_type1>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7ff ff14 	bl	80098b0 <lfs_tag_type1>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <lfs_gstate_hasmovehere+0x30>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	3304      	adds	r3, #4
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7ff fe5f 	bl	8009758 <lfs_pair_cmp>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <lfs_gstate_hasmovehere+0x30>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e000      	b.n	8009aa6 <lfs_gstate_hasmovehere+0x32>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	b2db      	uxtb	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff fa8b 	bl	8008fdc <lfs_fromle32>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fa83 	bl	8008fdc <lfs_fromle32>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f7ff fa7b 	bl	8008fdc <lfs_fromle32>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	609a      	str	r2, [r3, #8]
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7ff fa76 	bl	8008ff2 <lfs_tole32>
 8009b06:	4602      	mov	r2, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f7ff fa6e 	bl	8008ff2 <lfs_tole32>
 8009b16:	4602      	mov	r2, r0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff fa66 	bl	8008ff2 <lfs_tole32>
 8009b26:	4602      	mov	r2, r0
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	609a      	str	r2, [r3, #8]
}
 8009b2c:	bf00      	nop
 8009b2e:	3708      	adds	r7, #8
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff fa4b 	bl	8008fdc <lfs_fromle32>
 8009b46:	4602      	mov	r2, r0
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7ff fa43 	bl	8008fdc <lfs_fromle32>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	605a      	str	r2, [r3, #4]
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <lfs_superblock_fromle32>:
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff fa33 	bl	8008fdc <lfs_fromle32>
 8009b76:	4602      	mov	r2, r0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff fa2b 	bl	8008fdc <lfs_fromle32>
 8009b86:	4602      	mov	r2, r0
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f7ff fa23 	bl	8008fdc <lfs_fromle32>
 8009b96:	4602      	mov	r2, r0
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7ff fa1b 	bl	8008fdc <lfs_fromle32>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f7ff fa13 	bl	8008fdc <lfs_fromle32>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fa0b 	bl	8008fdc <lfs_fromle32>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	615a      	str	r2, [r3, #20]
}
 8009bcc:	bf00      	nop
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fa06 	bl	8008ff2 <lfs_tole32>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7ff f9fe 	bl	8008ff2 <lfs_tole32>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7ff f9f6 	bl	8008ff2 <lfs_tole32>
 8009c06:	4602      	mov	r2, r0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7ff f9ee 	bl	8008ff2 <lfs_tole32>
 8009c16:	4602      	mov	r2, r0
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff f9e6 	bl	8008ff2 <lfs_tole32>
 8009c26:	4602      	mov	r2, r0
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7ff f9de 	bl	8008ff2 <lfs_tole32>
 8009c36:	4602      	mov	r2, r0
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	615a      	str	r2, [r3, #20]
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	4413      	add	r3, r2
 8009c62:	68fa      	ldr	r2, [r7, #12]
 8009c64:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009c66:	6a92      	ldr	r2, [r2, #40]	; 0x28
    lfs_block_t off = ((block - lfs->free.off)
 8009c68:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c6c:	fb01 f202 	mul.w	r2, r1, r2
 8009c70:	1a9b      	subs	r3, r3, r2
 8009c72:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d212      	bcs.n	8009ca4 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	095b      	lsrs	r3, r3, #5
 8009c86:	009a      	lsls	r2, r3, #2
 8009c88:	440a      	add	r2, r1
 8009c8a:	6811      	ldr	r1, [r2, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	f002 021f 	and.w	r2, r2, #31
 8009c92:	2001      	movs	r0, #1
 8009c94:	fa00 f202 	lsl.w	r2, r0, r2
 8009c98:	68f8      	ldr	r0, [r7, #12]
 8009c9a:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4403      	add	r3, r0
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7ff ffe4 	bl	8009cb2 <lfs_alloc_ack>
}
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
	...

08009cf4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af02      	add	r7, sp, #8
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8009cfe:	e04f      	b.n	8009da0 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d04:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	095b      	lsrs	r3, r3, #5
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f003 031f 	and.w	r3, r3, #31
 8009d2e:	2101      	movs	r1, #1
 8009d30:	fa01 f303 	lsl.w	r3, r1, r3
 8009d34:	4013      	ands	r3, r2
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d132      	bne.n	8009da0 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	4413      	add	r3, r2
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d46:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009d48:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d4c:	fb01 f202 	mul.w	r2, r1, r2
 8009d50:	1a9a      	subs	r2, r3, r2
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8009d56:	e009      	b.n	8009d6c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d66:	1e5a      	subs	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d011      	beq.n	8009d9c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d80:	095b      	lsrs	r3, r3, #5
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d8c:	f003 031f 	and.w	r3, r3, #31
 8009d90:	2101      	movs	r1, #1
 8009d92:	fa01 f303 	lsl.w	r3, r1, r3
 8009d96:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1dd      	bne.n	8009d58 <lfs_alloc+0x64>
                }

                return 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	e050      	b.n	8009e42 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d1a9      	bne.n	8009d00 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10f      	bne.n	8009dd4 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dbc:	4413      	add	r3, r2
 8009dbe:	4a23      	ldr	r2, [pc, #140]	; (8009e4c <lfs_alloc+0x158>)
 8009dc0:	9200      	str	r2, [sp, #0]
 8009dc2:	f44f 720d 	mov.w	r2, #564	; 0x234
 8009dc6:	4922      	ldr	r1, [pc, #136]	; (8009e50 <lfs_alloc+0x15c>)
 8009dc8:	4822      	ldr	r0, [pc, #136]	; (8009e54 <lfs_alloc+0x160>)
 8009dca:	f015 f82b 	bl	801ee24 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8009dce:	f06f 031b 	mvn.w	r3, #27
 8009dd2:	e036      	b.n	8009e42 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ddc:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009de2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009de8:	fb01 f202 	mul.w	r2, r1, r2
 8009dec:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	00da      	lsls	r2, r3, #3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7ff f87b 	bl	8008efc <lfs_min>
 8009e06:	4602      	mov	r2, r0
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2100      	movs	r1, #0
 8009e20:	f015 f956 	bl	801f0d0 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8009e24:	2301      	movs	r3, #1
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	490b      	ldr	r1, [pc, #44]	; (8009e58 <lfs_alloc+0x164>)
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f003 fe5a 	bl	800dae4 <lfs_fs_rawtraverse>
 8009e30:	60f8      	str	r0, [r7, #12]
        if (err) {
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f43f af62 	beq.w	8009cfe <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff ff48 	bl	8009cd0 <lfs_alloc_drop>
            return err;
 8009e40:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	080203d4 	.word	0x080203d4
 8009e50:	080202c8 	.word	0x080202c8
 8009e54:	080203ac 	.word	0x080203ac
 8009e58:	08009c45 	.word	0x08009c45

08009e5c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8009e5c:	b590      	push	{r4, r7, lr}
 8009e5e:	b08f      	sub	sp, #60	; 0x3c
 8009e60:	af04      	add	r7, sp, #16
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	691b      	ldr	r3, [r3, #16]
 8009e74:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	333c      	adds	r3, #60	; 0x3c
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7ff fdf6 	bl	8009a74 <lfs_gstate_hasmovehere>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 80ba 	beq.w	800a004 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff fd47 	bl	8009924 <lfs_tag_id>
 8009e96:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f000 80b3 	beq.w	800a004 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f7ff fd3e 	bl	8009924 <lfs_tag_id>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	461c      	mov	r4, r3
 8009eac:	6838      	ldr	r0, [r7, #0]
 8009eae:	f7ff fd39 	bl	8009924 <lfs_tag_id>
 8009eb2:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8009eb4:	429c      	cmp	r4, r3
 8009eb6:	f200 80a5 	bhi.w	800a004 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8009eba:	6a3b      	ldr	r3, [r7, #32]
 8009ebc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009ec0:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8009ec2:	e09f      	b.n	800a004 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7ff fd49 	bl	800995e <lfs_tag_dsize>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8009ed8:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 8009ede:	2204      	movs	r2, #4
 8009ee0:	9203      	str	r2, [sp, #12]
 8009ee2:	f107 0210 	add.w	r2, r7, #16
 8009ee6:	9202      	str	r2, [sp, #8]
 8009ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eea:	9201      	str	r2, [sp, #4]
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	2304      	movs	r3, #4
 8009ef0:	460a      	mov	r2, r1
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f7ff f8dd 	bl	80090b4 <lfs_bd_read>
 8009efa:	61b8      	str	r0, [r7, #24]
        if (err) {
 8009efc:	69bb      	ldr	r3, [r7, #24]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <lfs_dir_getslice+0xaa>
            return err;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	e08a      	b.n	800a01c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff f87e 	bl	800900a <lfs_frombe32>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	4053      	eors	r3, r2
 8009f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f18:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff fd02 	bl	8009924 <lfs_tag_id>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d02b      	beq.n	8009f7e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009f26:	69f8      	ldr	r0, [r7, #28]
 8009f28:	f7ff fcc2 	bl	80098b0 <lfs_tag_type1>
 8009f2c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8009f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f32:	d124      	bne.n	8009f7e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8009f34:	69f8      	ldr	r0, [r7, #28]
 8009f36:	f7ff fcf5 	bl	8009924 <lfs_tag_id>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	461c      	mov	r4, r3
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff fced 	bl	8009924 <lfs_tag_id>
 8009f4a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8009f4c:	429c      	cmp	r4, r3
 8009f4e:	d816      	bhi.n	8009f7e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	1ad2      	subs	r2, r2, r3
 8009f56:	4b33      	ldr	r3, [pc, #204]	; (800a024 <lfs_dir_getslice+0x1c8>)
 8009f58:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8009f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d102      	bne.n	8009f6e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8009f68:	f06f 0301 	mvn.w	r3, #1
 8009f6c:	e056      	b.n	800a01c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8009f6e:	69f8      	ldr	r0, [r7, #28]
 8009f70:	f7ff fccb 	bl	800990a <lfs_tag_splice>
 8009f74:	4603      	mov	r3, r0
 8009f76:	029a      	lsls	r2, r3, #10
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	401a      	ands	r2, r3
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	1ac9      	subs	r1, r1, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	400b      	ands	r3, r1
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d138      	bne.n	800a004 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8009f92:	69f8      	ldr	r0, [r7, #28]
 8009f94:	f7ff fc79 	bl	800988a <lfs_tag_isdelete>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8009f9e:	f06f 0301 	mvn.w	r3, #1
 8009fa2:	e03b      	b.n	800a01c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8009fa4:	69f8      	ldr	r0, [r7, #28]
 8009fa6:	f7ff fccd 	bl	8009944 <lfs_tag_size>
 8009faa:	4603      	mov	r3, r0
 8009fac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7fe ffa4 	bl	8008efc <lfs_min>
 8009fb4:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8009fb6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fc0:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8009fc2:	3204      	adds	r2, #4
 8009fc4:	6979      	ldr	r1, [r7, #20]
 8009fc6:	9103      	str	r1, [sp, #12]
 8009fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fca:	9102      	str	r1, [sp, #8]
 8009fcc:	9201      	str	r2, [sp, #4]
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff f86c 	bl	80090b4 <lfs_bd_read>
 8009fdc:	61b8      	str	r0, [r7, #24]
            if (err) {
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <lfs_dir_getslice+0x18c>
                return err;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	e019      	b.n	800a01c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8009fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	18d0      	adds	r0, r2, r3
 8009fee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	f015 f86a 	bl	801f0d0 <memset>

            return tag + gdiff;
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	e00b      	b.n	800a01c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	4618      	mov	r0, r3
 800a008:	f7ff fca9 	bl	800995e <lfs_tag_dsize>
 800a00c:	4603      	mov	r3, r0
 800a00e:	3304      	adds	r3, #4
 800a010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a012:	429a      	cmp	r2, r3
 800a014:	f4bf af56 	bcs.w	8009ec4 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800a018:	f06f 0301 	mvn.w	r3, #1
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	372c      	adds	r7, #44	; 0x2c
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}
 800a024:	000ffc00 	.word	0x000ffc00

0800a028 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800a028:	b580      	push	{r7, lr}
 800a02a:	b088      	sub	sp, #32
 800a02c:	af04      	add	r7, sp, #16
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
 800a034:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800a036:	6838      	ldr	r0, [r7, #0]
 800a038:	f7ff fc84 	bl	8009944 <lfs_tag_size>
 800a03c:	4603      	mov	r3, r0
 800a03e:	9302      	str	r3, [sp, #8]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	9301      	str	r3, [sp, #4]
 800a044:	2300      	movs	r3, #0
 800a046:	9300      	str	r3, [sp, #0]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	68f8      	ldr	r0, [r7, #12]
 800a050:	f7ff ff04 	bl	8009e5c <lfs_dir_getslice>
 800a054:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800a05e:	b580      	push	{r7, lr}
 800a060:	b08c      	sub	sp, #48	; 0x30
 800a062:	af04      	add	r7, sp, #16
 800a064:	60f8      	str	r0, [r7, #12]
 800a066:	60b9      	str	r1, [r7, #8]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800a06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800a070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a074:	441a      	add	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	429a      	cmp	r2, r3
 800a07e:	f240 80c0 	bls.w	800a202 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800a082:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a086:	e0c1      	b.n	800a20c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800a088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a08a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d03f      	beq.n	800a112 <lfs_dir_getread+0xb4>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f113 0f02 	cmn.w	r3, #2
 800a09a:	d13a      	bne.n	800a112 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800a0a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d232      	bcs.n	800a112 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d324      	bcc.n	800a100 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689a      	ldr	r2, [r3, #8]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6859      	ldr	r1, [r3, #4]
 800a0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c0:	1acb      	subs	r3, r1, r3
 800a0c2:	4413      	add	r3, r2
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	69b8      	ldr	r0, [r7, #24]
 800a0c8:	f7fe ff18 	bl	8008efc <lfs_min>
 800a0cc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a0d8:	1acb      	subs	r3, r1, r3
 800a0da:	4413      	add	r3, r2
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	4619      	mov	r1, r3
 800a0e0:	69f8      	ldr	r0, [r7, #28]
 800a0e2:	f015 f904 	bl	801f2ee <memcpy>

                data += diff;
 800a0e6:	69fa      	ldr	r2, [r7, #28]
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a0f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a0fe:	e080      	b.n	800a202 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	4619      	mov	r1, r3
 800a10a:	69b8      	ldr	r0, [r7, #24]
 800a10c:	f7fe fef6 	bl	8008efc <lfs_min>
 800a110:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f113 0f02 	cmn.w	r3, #2
 800a11a:	d13a      	bne.n	800a192 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800a126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a128:	429a      	cmp	r2, r3
 800a12a:	d232      	bcs.n	800a192 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a132:	429a      	cmp	r2, r3
 800a134:	d324      	bcc.n	800a180 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	689a      	ldr	r2, [r3, #8]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	6859      	ldr	r1, [r3, #4]
 800a13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a140:	1acb      	subs	r3, r1, r3
 800a142:	4413      	add	r3, r2
 800a144:	4619      	mov	r1, r3
 800a146:	69b8      	ldr	r0, [r7, #24]
 800a148:	f7fe fed8 	bl	8008efc <lfs_min>
 800a14c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a158:	1acb      	subs	r3, r1, r3
 800a15a:	4413      	add	r3, r2
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	4619      	mov	r1, r3
 800a160:	69f8      	ldr	r0, [r7, #28]
 800a162:	f015 f8c4 	bl	801f2ee <memcpy>

                data += diff;
 800a166:	69fa      	ldr	r2, [r7, #28]
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	4413      	add	r3, r2
 800a16c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a16e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	4413      	add	r3, r2
 800a174:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a17e:	e040      	b.n	800a202 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	4619      	mov	r1, r3
 800a18a:	69b8      	ldr	r0, [r7, #24]
 800a18c:	f7fe feb6 	bl	8008efc <lfs_min>
 800a190:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	f06f 0201 	mvn.w	r2, #1
 800a198:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a19e:	69db      	ldr	r3, [r3, #28]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a1a4:	f7fe feba 	bl	8008f1c <lfs_aligndown>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a1ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	441a      	add	r2, r3
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	4610      	mov	r0, r2
 800a1be:	f7fe fec2 	bl	8008f46 <lfs_alignup>
 800a1c2:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	f7fe fe95 	bl	8008efc <lfs_min>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6889      	ldr	r1, [r1, #8]
 800a1e4:	9102      	str	r1, [sp, #8]
 800a1e6:	9201      	str	r2, [sp, #4]
 800a1e8:	9300      	str	r3, [sp, #0]
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ee:	68b9      	ldr	r1, [r7, #8]
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7ff fe33 	bl	8009e5c <lfs_dir_getslice>
 800a1f6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	da01      	bge.n	800a202 <lfs_dir_getread+0x1a4>
            return err;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	e004      	b.n	800a20c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800a202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a204:	2b00      	cmp	r3, #0
 800a206:	f47f af3f 	bne.w	800a088 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3720      	adds	r7, #32
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <lfs_dir_traverse_filter+0x1e>
 800a22e:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <lfs_dir_traverse_filter+0xa8>)
 800a230:	e000      	b.n	800a234 <lfs_dir_traverse_filter+0x20>
 800a232:	4b23      	ldr	r3, [pc, #140]	; (800a2c0 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800a234:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	405a      	eors	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d014      	beq.n	800a270 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7ff fb1d 	bl	800988a <lfs_tag_isdelete>
 800a250:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10c      	bne.n	800a270 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	4a18      	ldr	r2, [pc, #96]	; (800a2bc <lfs_dir_traverse_filter+0xa8>)
 800a25a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	6819      	ldr	r1, [r3, #0]
 800a260:	4b18      	ldr	r3, [pc, #96]	; (800a2c4 <lfs_dir_traverse_filter+0xb0>)
 800a262:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a264:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a268:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d101      	bne.n	800a274 <lfs_dir_traverse_filter+0x60>
        return true;
 800a270:	2301      	movs	r3, #1
 800a272:	e01e      	b.n	800a2b2 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a274:	68b8      	ldr	r0, [r7, #8]
 800a276:	f7ff fb1b 	bl	80098b0 <lfs_tag_type1>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a280:	d116      	bne.n	800a2b0 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800a282:	68b8      	ldr	r0, [r7, #8]
 800a284:	f7ff fb4e 	bl	8009924 <lfs_tag_id>
 800a288:	4603      	mov	r3, r0
 800a28a:	461c      	mov	r4, r3
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff fb47 	bl	8009924 <lfs_tag_id>
 800a296:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800a298:	429c      	cmp	r4, r3
 800a29a:	d809      	bhi.n	800a2b0 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a29c:	68b8      	ldr	r0, [r7, #8]
 800a29e:	f7ff fb34 	bl	800990a <lfs_tag_splice>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	029a      	lsls	r2, r3, #10
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	441a      	add	r2, r3
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	601a      	str	r2, [r3, #0]
    }

    return false;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd90      	pop	{r4, r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	7ffffc00 	.word	0x7ffffc00
 800a2c0:	700ffc00 	.word	0x700ffc00
 800a2c4:	000ffc00 	.word	0x000ffc00

0800a2c8 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a2c8:	b590      	push	{r4, r7, lr}
 800a2ca:	b09d      	sub	sp, #116	; 0x74
 800a2cc:	af0a      	add	r7, sp, #40	; 0x28
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
 800a2d4:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800a2d6:	6838      	ldr	r0, [r7, #0]
 800a2d8:	f7ff fb41 	bl	800995e <lfs_tag_dsize>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d233      	bcs.n	800a352 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800a2ea:	6838      	ldr	r0, [r7, #0]
 800a2ec:	f7ff fb37 	bl	800995e <lfs_tag_dsize>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800a2f8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800a2fe:	2204      	movs	r2, #4
 800a300:	9203      	str	r2, [sp, #12]
 800a302:	f107 021c 	add.w	r2, r7, #28
 800a306:	9202      	str	r2, [sp, #8]
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	9201      	str	r2, [sp, #4]
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	2304      	movs	r3, #4
 800a310:	460a      	mov	r2, r1
 800a312:	2100      	movs	r1, #0
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f7fe fecd 	bl	80090b4 <lfs_bd_read>
 800a31a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800a31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <lfs_dir_traverse+0x5e>
                return err;
 800a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a324:	e11e      	b.n	800a564 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800a326:	69fb      	ldr	r3, [r7, #28]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fe fe6e 	bl	800900a <lfs_frombe32>
 800a32e:	4602      	mov	r2, r0
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	4053      	eors	r3, r2
 800a334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a338:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3304      	adds	r3, #4
 800a344:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800a346:	f107 0314 	add.w	r3, r7, #20
 800a34a:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	603b      	str	r3, [r7, #0]
 800a350:	e011      	b.n	800a376 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800a352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd0c      	ble.n	800a372 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800a358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800a35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800a364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a366:	3308      	adds	r3, #8
 800a368:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800a36a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a36c:	3b01      	subs	r3, #1
 800a36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a370:	e001      	b.n	800a376 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800a372:	2300      	movs	r3, #0
 800a374:	e0f6      	b.n	800a564 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800a376:	4b7d      	ldr	r3, [pc, #500]	; (800a56c <lfs_dir_traverse+0x2a4>)
 800a378:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a37e:	405a      	eors	r2, r3
 800a380:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a384:	400b      	ands	r3, r1
 800a386:	4013      	ands	r3, r2
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 80e5 	bne.w	800a558 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800a38e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a390:	f7ff fac8 	bl	8009924 <lfs_tag_id>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d038      	beq.n	800a40c <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800a39a:	f107 031c 	add.w	r3, r7, #28
 800a39e:	9308      	str	r3, [sp, #32]
 800a3a0:	4b73      	ldr	r3, [pc, #460]	; (800a570 <lfs_dir_traverse+0x2a8>)
 800a3a2:	9307      	str	r3, [sp, #28]
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9306      	str	r3, [sp, #24]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9305      	str	r3, [sp, #20]
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	9304      	str	r3, [sp, #16]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9303      	str	r3, [sp, #12]
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3be:	9300      	str	r3, [sp, #0]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	68b9      	ldr	r1, [r7, #8]
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff ff7e 	bl	800a2c8 <lfs_dir_traverse>
 800a3cc:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800a3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	da01      	bge.n	800a3d8 <lfs_dir_traverse+0x110>
                return filter;
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d6:	e0c5      	b.n	800a564 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800a3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 80be 	bne.w	800a55c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7ff fa9e 	bl	8009924 <lfs_tag_id>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	f200 80b5 	bhi.w	800a560 <lfs_dir_traverse+0x298>
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f7ff fa93 	bl	8009924 <lfs_tag_id>
 800a3fe:	4603      	mov	r3, r0
 800a400:	461a      	mov	r2, r3
 800a402:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a406:	4293      	cmp	r3, r2
 800a408:	f240 80aa 	bls.w	800a560 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7ff fa5e 	bl	80098d0 <lfs_tag_type3>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	f43f af5d 	beq.w	800a2d6 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fa56 	bl	80098d0 <lfs_tag_type3>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f240 1301 	movw	r3, #257	; 0x101
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d136      	bne.n	800a49e <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	4618      	mov	r0, r3
 800a434:	f7ff fa86 	bl	8009944 <lfs_tag_size>
 800a438:	4603      	mov	r3, r0
 800a43a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4618      	mov	r0, r3
 800a440:	f7ff fa70 	bl	8009924 <lfs_tag_id>
 800a444:	4603      	mov	r3, r0
 800a446:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800a448:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a44a:	3301      	adds	r3, #1
 800a44c:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800a44e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800a450:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a452:	1a8a      	subs	r2, r1, r2
 800a454:	b291      	uxth	r1, r2
 800a456:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800a45a:	440a      	add	r2, r1
 800a45c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800a45e:	b212      	sxth	r2, r2
 800a460:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a462:	9108      	str	r1, [sp, #32]
 800a464:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a466:	9107      	str	r1, [sp, #28]
 800a468:	9206      	str	r2, [sp, #24]
 800a46a:	9305      	str	r3, [sp, #20]
 800a46c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a474:	9303      	str	r3, [sp, #12]
 800a476:	4b3f      	ldr	r3, [pc, #252]	; (800a574 <lfs_dir_traverse+0x2ac>)
 800a478:	9302      	str	r3, [sp, #8]
 800a47a:	2300      	movs	r3, #0
 800a47c:	9301      	str	r3, [sp, #4]
 800a47e:	2300      	movs	r3, #0
 800a480:	9300      	str	r3, [sp, #0]
 800a482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a486:	2200      	movs	r2, #0
 800a488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff ff1c 	bl	800a2c8 <lfs_dir_traverse>
 800a490:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	2b00      	cmp	r3, #0
 800a496:	f43f af1e 	beq.w	800a2d6 <lfs_dir_traverse+0xe>
                return err;
 800a49a:	6a3b      	ldr	r3, [r7, #32]
 800a49c:	e062      	b.n	800a564 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff fa15 	bl	80098d0 <lfs_tag_type3>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800a4ac:	d144      	bne.n	800a538 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b2:	e038      	b.n	800a526 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a4b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	005b      	lsls	r3, r3, #1
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c6:	4413      	add	r3, r2
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a4ce:	051c      	lsls	r4, r3, #20
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7ff fa26 	bl	8009924 <lfs_tag_id>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a4e0:	4413      	add	r3, r2
 800a4e2:	029b      	lsls	r3, r3, #10
 800a4e4:	ea44 0103 	orr.w	r1, r4, r3
 800a4e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4ea:	4613      	mov	r3, r2
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	4413      	add	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	4413      	add	r3, r2
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800a4fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a4fe:	4613      	mov	r3, r2
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	4413      	add	r3, r2
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	461a      	mov	r2, r3
 800a508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50a:	4413      	add	r3, r2
 800a50c:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800a50e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a510:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a512:	4798      	blx	r3
 800a514:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d001      	beq.n	800a520 <lfs_dir_traverse+0x258>
                    return err;
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	e021      	b.n	800a564 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800a520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a522:	3301      	adds	r3, #1
 800a524:	643b      	str	r3, [r7, #64]	; 0x40
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	4618      	mov	r0, r3
 800a52a:	f7ff fa0b 	bl	8009944 <lfs_tag_size>
 800a52e:	4602      	mov	r2, r0
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	4293      	cmp	r3, r2
 800a534:	d3be      	bcc.n	800a4b4 <lfs_dir_traverse+0x1ec>
 800a536:	e6ce      	b.n	800a2d6 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800a538:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800a53c:	029a      	lsls	r2, r3, #10
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	18d1      	adds	r1, r2, r3
 800a542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a544:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a546:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800a548:	4798      	blx	r3
 800a54a:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f43f aec1 	beq.w	800a2d6 <lfs_dir_traverse+0xe>
                return err;
 800a554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a556:	e005      	b.n	800a564 <lfs_dir_traverse+0x29c>
            continue;
 800a558:	bf00      	nop
 800a55a:	e6bc      	b.n	800a2d6 <lfs_dir_traverse+0xe>
                continue;
 800a55c:	bf00      	nop
 800a55e:	e6ba      	b.n	800a2d6 <lfs_dir_traverse+0xe>
                continue;
 800a560:	bf00      	nop
    while (true) {
 800a562:	e6b8      	b.n	800a2d6 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800a564:	4618      	mov	r0, r3
 800a566:	374c      	adds	r7, #76	; 0x4c
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd90      	pop	{r4, r7, pc}
 800a56c:	7ff00000 	.word	0x7ff00000
 800a570:	0800a215 	.word	0x0800a215
 800a574:	600ffc00 	.word	0x600ffc00

0800a578 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800a578:	b590      	push	{r4, r7, lr}
 800a57a:	b09f      	sub	sp, #124	; 0x7c
 800a57c:	af04      	add	r7, sp, #16
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
 800a584:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800a586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a58a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	429a      	cmp	r2, r3
 800a598:	d207      	bcs.n	800a5aa <lfs_dir_fetchmatch+0x32>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	3304      	adds	r3, #4
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d302      	bcc.n	800a5b0 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800a5aa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a5ae:	e340      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a5bc:	2300      	movs	r3, #0
 800a5be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a5c0:	e052      	b.n	800a668 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800a5c2:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a5c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800a5cc:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800a5ce:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a5d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a5d4:	0092      	lsls	r2, r2, #2
 800a5d6:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800a5d8:	2104      	movs	r1, #4
 800a5da:	9103      	str	r1, [sp, #12]
 800a5dc:	9202      	str	r2, [sp, #8]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	9201      	str	r2, [sp, #4]
 800a5e2:	9300      	str	r3, [sp, #0]
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7fe fd62 	bl	80090b4 <lfs_bd_read>
 800a5f0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800a5f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	3368      	adds	r3, #104	; 0x68
 800a5f8:	443b      	add	r3, r7
 800a5fa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fcec 	bl	8008fdc <lfs_fromle32>
 800a604:	4602      	mov	r2, r0
 800a606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	3368      	adds	r3, #104	; 0x68
 800a60c:	443b      	add	r3, r7
 800a60e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <lfs_dir_fetchmatch+0xac>
 800a618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a61e:	d001      	beq.n	800a624 <lfs_dir_fetchmatch+0xac>
            return err;
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	e306      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a62a:	d01a      	beq.n	800a662 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800a62c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	3368      	adds	r3, #104	; 0x68
 800a632:	443b      	add	r3, r7
 800a634:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a638:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a63a:	3301      	adds	r3, #1
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	bfb8      	it	lt
 800a644:	425b      	neglt	r3, r3
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	3368      	adds	r3, #104	; 0x68
 800a64a:	443b      	add	r3, r7
 800a64c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7fe fcb4 	bl	8008fc0 <lfs_scmp>
 800a658:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	dd01      	ble.n	800a662 <lfs_dir_fetchmatch+0xea>
            r = i;
 800a65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a660:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800a662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a664:	3301      	adds	r3, #1
 800a666:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	dda9      	ble.n	800a5c2 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800a66e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a670:	2b00      	cmp	r3, #0
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	bfb8      	it	lt
 800a678:	425b      	neglt	r3, r3
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	4413      	add	r3, r2
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800a686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a688:	3301      	adds	r3, #1
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	bfb8      	it	lt
 800a692:	425b      	neglt	r3, r3
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	4413      	add	r3, r2
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800a6a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f003 0301 	and.w	r3, r3, #1
 800a6a8:	bfb8      	it	lt
 800a6aa:	425b      	neglt	r3, r3
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	3368      	adds	r3, #104	; 0x68
 800a6b0:	443b      	add	r3, r7
 800a6b2:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6c4:	e2a1      	b.n	800ac0a <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6ce:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800a6d6:	4a96      	ldr	r2, [pc, #600]	; (800a930 <lfs_dir_fetchmatch+0x3b8>)
 800a6d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a6dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6e0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800a6ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6ec:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fc7d 	bl	8008ff2 <lfs_tole32>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	3308      	adds	r3, #8
 800a702:	2204      	movs	r2, #4
 800a704:	4619      	mov	r1, r3
 800a706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a70a:	f003 ffe1 	bl	800e6d0 <lfs_crc>
 800a70e:	4603      	mov	r3, r0
 800a710:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fc60 	bl	8008fdc <lfs_fromle32>
 800a71c:	4602      	mov	r2, r0
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800a722:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a724:	f7ff f91b 	bl	800995e <lfs_tag_dsize>
 800a728:	4602      	mov	r2, r0
 800a72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a72c:	4413      	add	r3, r2
 800a72e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800a730:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a736:	6a58      	ldr	r0, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2204      	movs	r2, #4
 800a73e:	9203      	str	r2, [sp, #12]
 800a740:	f107 0220 	add.w	r2, r7, #32
 800a744:	9202      	str	r2, [sp, #8]
 800a746:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a748:	9201      	str	r2, [sp, #4]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4603      	mov	r3, r0
 800a74e:	460a      	mov	r2, r1
 800a750:	2100      	movs	r1, #0
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7fe fcae 	bl	80090b4 <lfs_bd_read>
 800a758:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800a75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d009      	beq.n	800a774 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800a760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a762:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a766:	d103      	bne.n	800a770 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	2200      	movs	r2, #0
 800a76c:	759a      	strb	r2, [r3, #22]
                    break;
 800a76e:	e1d4      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800a770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a772:	e25e      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	f107 0120 	add.w	r1, r7, #32
 800a77a:	2204      	movs	r2, #4
 800a77c:	4618      	mov	r0, r3
 800a77e:	f003 ffa7 	bl	800e6d0 <lfs_crc>
 800a782:	4603      	mov	r3, r0
 800a784:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800a786:	6a3b      	ldr	r3, [r7, #32]
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe fc3e 	bl	800900a <lfs_frombe32>
 800a78e:	4602      	mov	r2, r0
 800a790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a792:	4053      	eors	r3, r2
 800a794:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800a796:	6a3b      	ldr	r3, [r7, #32]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff f868 	bl	800986e <lfs_tag_isvalid>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	f083 0301 	eor.w	r3, r3, #1
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01b      	beq.n	800a7e2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a7aa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a7ac:	f7ff f880 	bl	80098b0 <lfs_tag_type1>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a7b6:	d10d      	bne.n	800a7d4 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a7c0:	6a12      	ldr	r2, [r2, #32]
 800a7c2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a7c6:	fb01 f202 	mul.w	r2, r1, r2
 800a7ca:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d101      	bne.n	800a7d4 <lfs_dir_fetchmatch+0x25c>
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	e000      	b.n	800a7d6 <lfs_dir_fetchmatch+0x25e>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f003 0301 	and.w	r3, r3, #1
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	759a      	strb	r2, [r3, #22]
                break;
 800a7e0:	e19b      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff f8ba 	bl	800995e <lfs_tag_dsize>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ee:	441a      	add	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d903      	bls.n	800a802 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	759a      	strb	r2, [r3, #22]
                break;
 800a800:	e18b      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	4618      	mov	r0, r3
 800a80a:	f7ff f851 	bl	80098b0 <lfs_tag_type1>
 800a80e:	4603      	mov	r3, r0
 800a810:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a814:	d164      	bne.n	800a8e0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800a816:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a81c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a824:	3204      	adds	r2, #4
 800a826:	2104      	movs	r1, #4
 800a828:	9103      	str	r1, [sp, #12]
 800a82a:	f107 011c 	add.w	r1, r7, #28
 800a82e:	9102      	str	r1, [sp, #8]
 800a830:	9201      	str	r2, [sp, #4]
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	4623      	mov	r3, r4
 800a836:	4602      	mov	r2, r0
 800a838:	2100      	movs	r1, #0
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7fe fc3a 	bl	80090b4 <lfs_bd_read>
 800a840:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800a842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a844:	2b00      	cmp	r3, #0
 800a846:	d009      	beq.n	800a85c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800a848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a84e:	d103      	bne.n	800a858 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	2200      	movs	r2, #0
 800a854:	759a      	strb	r2, [r3, #22]
                        break;
 800a856:	e160      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800a858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800a85a:	e1ea      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	4618      	mov	r0, r3
 800a860:	f7fe fbbc 	bl	8008fdc <lfs_fromle32>
 800a864:	4603      	mov	r3, r0
 800a866:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800a868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d003      	beq.n	800a878 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2200      	movs	r2, #0
 800a874:	759a      	strb	r2, [r3, #22]
                    break;
 800a876:	e150      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff f838 	bl	80098f0 <lfs_tag_chunk>
 800a880:	4603      	mov	r3, r0
 800a882:	07db      	lsls	r3, r3, #31
 800a884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a886:	4053      	eors	r3, r2
 800a888:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a892:	2204      	movs	r2, #4
 800a894:	4618      	mov	r0, r3
 800a896:	f003 ff1b 	bl	800e6d0 <lfs_crc>
 800a89a:	4602      	mov	r2, r0
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800a8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a2:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff f859 	bl	800995e <lfs_tag_dsize>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8b0:	441a      	add	r2, r3
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8ba:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a8c2:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800a8c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800a8ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a8d6:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800a8d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a8de:	e720      	b.n	800a722 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a8e0:	2304      	movs	r3, #4
 800a8e2:	647b      	str	r3, [r7, #68]	; 0x44
 800a8e4:	e032      	b.n	800a94c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800a8e6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a8f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8f6:	440a      	add	r2, r1
 800a8f8:	2101      	movs	r1, #1
 800a8fa:	9103      	str	r1, [sp, #12]
 800a8fc:	f107 011b 	add.w	r1, r7, #27
 800a900:	9102      	str	r1, [sp, #8]
 800a902:	9201      	str	r2, [sp, #4]
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	4623      	mov	r3, r4
 800a908:	4602      	mov	r2, r0
 800a90a:	2100      	movs	r1, #0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7fe fbd1 	bl	80090b4 <lfs_bd_read>
 800a912:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800a914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00c      	beq.n	800a934 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800a91a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a91c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800a920:	d103      	bne.n	800a92a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	759a      	strb	r2, [r3, #22]
 800a928:	e018      	b.n	800a95c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800a92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800a92c:	e181      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
 800a92e:	bf00      	nop
 800a930:	08020410 	.word	0x08020410
                }

                crc = lfs_crc(crc, &dat, 1);
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	f107 011b 	add.w	r1, r7, #27
 800a93a:	2201      	movs	r2, #1
 800a93c:	4618      	mov	r0, r3
 800a93e:	f003 fec7 	bl	800e6d0 <lfs_crc>
 800a942:	4603      	mov	r3, r0
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800a946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a948:	3301      	adds	r3, #1
 800a94a:	647b      	str	r3, [r7, #68]	; 0x44
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff f805 	bl	800995e <lfs_tag_dsize>
 800a954:	4602      	mov	r2, r0
 800a956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a958:	4293      	cmp	r3, r2
 800a95a:	d3c4      	bcc.n	800a8e6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe ffa6 	bl	80098b0 <lfs_tag_type1>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d113      	bne.n	800a992 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe ffd9 	bl	8009924 <lfs_tag_id>
 800a972:	4603      	mov	r3, r0
 800a974:	461a      	mov	r2, r3
 800a976:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a97a:	4293      	cmp	r3, r2
 800a97c:	f200 8081 	bhi.w	800aa82 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800a980:	6a3b      	ldr	r3, [r7, #32]
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe ffce 	bl	8009924 <lfs_tag_id>
 800a988:	4603      	mov	r3, r0
 800a98a:	3301      	adds	r3, #1
 800a98c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800a990:	e077      	b.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	4618      	mov	r0, r3
 800a996:	f7fe ff8b 	bl	80098b0 <lfs_tag_type1>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9a0:	d134      	bne.n	800aa0c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe ffb0 	bl	800990a <lfs_tag_splice>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800a9b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9ba:	4ba0      	ldr	r3, [pc, #640]	; (800ac3c <lfs_dir_fetchmatch+0x6c4>)
 800a9bc:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800a9be:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800a9c2:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d104      	bne.n	800a9d6 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800a9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a9d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9d4:	e055      	b.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800a9d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9dc:	d051      	beq.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fe ff9f 	bl	8009924 <lfs_tag_id>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	461c      	mov	r4, r3
 800a9ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fe ff99 	bl	8009924 <lfs_tag_id>
 800a9f2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d844      	bhi.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fe ff85 	bl	800990a <lfs_tag_splice>
 800aa00:	4603      	mov	r3, r0
 800aa02:	029a      	lsls	r2, r3, #10
 800aa04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa06:	4413      	add	r3, r2
 800aa08:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa0a:	e03a      	b.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe ff4e 	bl	80098b0 <lfs_tag_type1>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800aa1a:	d132      	bne.n	800aa82 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe ff66 	bl	80098f0 <lfs_tag_chunk>
 800aa24:	4603      	mov	r3, r0
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bf14      	ite	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	2300      	moveq	r3, #0
 800aa32:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800aa36:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa44:	3204      	adds	r2, #4
 800aa46:	2108      	movs	r1, #8
 800aa48:	9103      	str	r1, [sp, #12]
 800aa4a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800aa4e:	9102      	str	r1, [sp, #8]
 800aa50:	9201      	str	r2, [sp, #4]
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	4623      	mov	r3, r4
 800aa56:	4602      	mov	r2, r0
 800aa58:	2100      	movs	r1, #0
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f7fe fb2a 	bl	80090b4 <lfs_bd_read>
 800aa60:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800aa62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d007      	beq.n	800aa78 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800aa68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa6a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800aa6e:	d103      	bne.n	800aa78 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2200      	movs	r2, #0
 800aa74:	759a      	strb	r2, [r3, #22]
                        break;
 800aa76:	e050      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800aa78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7fe fec2 	bl	8009806 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800aa82:	6a3a      	ldr	r2, [r7, #32]
 800aa84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa86:	405a      	eors	r2, r3
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f47f ae48 	bne.w	800a722 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800aa92:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800aa98:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800aa9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800aa9e:	617b      	str	r3, [r7, #20]
 800aaa0:	f107 0210 	add.w	r2, r7, #16
 800aaa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aaa8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800aaac:	4798      	blx	r3
 800aaae:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800aab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	da09      	bge.n	800aaca <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800aabc:	d103      	bne.n	800aac6 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	2200      	movs	r2, #0
 800aac2:	759a      	strb	r2, [r3, #22]
 800aac4:	e029      	b.n	800ab1a <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800aac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800aac8:	e0b3      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800aaca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	64bb      	str	r3, [r7, #72]	; 0x48
 800aad4:	e625      	b.n	800a722 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800aad6:	6a3a      	ldr	r2, [r7, #32]
 800aad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aada:	405a      	eors	r2, r3
 800aadc:	4b58      	ldr	r3, [pc, #352]	; (800ac40 <lfs_dir_fetchmatch+0x6c8>)
 800aade:	4013      	ands	r3, r2
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d103      	bne.n	800aaec <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800aae4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aae8:	64bb      	str	r3, [r7, #72]	; 0x48
 800aaea:	e61a      	b.n	800a722 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800aaec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	f47f ae17 	bne.w	800a722 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fe ff14 	bl	8009924 <lfs_tag_id>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461c      	mov	r4, r3
 800ab00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fe ff0e 	bl	8009924 <lfs_tag_id>
 800ab08:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	f63f ae09 	bhi.w	800a722 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab16:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab18:	e603      	b.n	800a722 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d100      	bne.n	800ab24 <lfs_dir_fetchmatch+0x5ac>
 800ab22:	e05d      	b.n	800abe0 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	333c      	adds	r3, #60	; 0x3c
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fe ffa1 	bl	8009a74 <lfs_gstate_hasmovehere>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d028      	beq.n	800ab8a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fef1 	bl	8009924 <lfs_tag_id>
 800ab42:	4603      	mov	r3, r0
 800ab44:	461c      	mov	r4, r3
 800ab46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7fe feeb 	bl	8009924 <lfs_tag_id>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	429c      	cmp	r4, r3
 800ab52:	d104      	bne.n	800ab5e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800ab54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab5a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab5c:	e015      	b.n	800ab8a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800ab5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab64:	d011      	beq.n	800ab8a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe feda 	bl	8009924 <lfs_tag_id>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461c      	mov	r4, r3
 800ab74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe fed4 	bl	8009924 <lfs_tag_id>
 800ab7c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800ab7e:	429c      	cmp	r4, r3
 800ab80:	d203      	bcs.n	800ab8a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800ab82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab84:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ab88:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800ab8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00f      	beq.n	800abb0 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800ab90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fe fec6 	bl	8009924 <lfs_tag_id>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	461a      	mov	r2, r3
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	8a9b      	ldrh	r3, [r3, #20]
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f7fe f9aa 	bl	8008efc <lfs_min>
 800aba8:	4603      	mov	r3, r0
 800abaa:	b29a      	uxth	r2, r3
 800abac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800abae:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800abb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fe5b 	bl	800986e <lfs_tag_isvalid>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800abbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc0:	e037      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800abc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fe fead 	bl	8009924 <lfs_tag_id>
 800abca:	4603      	mov	r3, r0
 800abcc:	461a      	mov	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	8a9b      	ldrh	r3, [r3, #20]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d202      	bcs.n	800abdc <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800abd6:	f06f 0301 	mvn.w	r3, #1
 800abda:	e02a      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	e028      	b.n	800ac32 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fd88 	bl	80096f8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800abe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abea:	3301      	adds	r3, #1
 800abec:	2b00      	cmp	r3, #0
 800abee:	f003 0301 	and.w	r3, r3, #1
 800abf2:	bfb8      	it	lt
 800abf4:	425b      	neglt	r3, r3
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	3368      	adds	r3, #104	; 0x68
 800abfa:	443b      	add	r3, r7
 800abfc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800ac04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac06:	3301      	adds	r3, #1
 800ac08:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	f77f ad5a 	ble.w	800a6c6 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	490a      	ldr	r1, [pc, #40]	; (800ac44 <lfs_dir_fetchmatch+0x6cc>)
 800ac1c:	9101      	str	r1, [sp, #4]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	4613      	mov	r3, r2
 800ac22:	f240 4232 	movw	r2, #1074	; 0x432
 800ac26:	4908      	ldr	r1, [pc, #32]	; (800ac48 <lfs_dir_fetchmatch+0x6d0>)
 800ac28:	4808      	ldr	r0, [pc, #32]	; (800ac4c <lfs_dir_fetchmatch+0x6d4>)
 800ac2a:	f014 f8fb 	bl	801ee24 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800ac2e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	376c      	adds	r7, #108	; 0x6c
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd90      	pop	{r4, r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	000ffc00 	.word	0x000ffc00
 800ac40:	7ffffc00 	.word	0x7ffffc00
 800ac44:	080203d4 	.word	0x080203d4
 800ac48:	080202c8 	.word	0x080202c8
 800ac4c:	080203d8 	.word	0x080203d8

0800ac50 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af04      	add	r7, sp, #16
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9303      	str	r3, [sp, #12]
 800ac60:	2300      	movs	r3, #0
 800ac62:	9302      	str	r3, [sp, #8]
 800ac64:	2300      	movs	r3, #0
 800ac66:	9301      	str	r3, [sp, #4]
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac6c:	9300      	str	r3, [sp, #0]
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	68b9      	ldr	r1, [r7, #8]
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7ff fc7e 	bl	800a578 <lfs_dir_fetchmatch>
 800ac7c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800ac94:	f107 0310 	add.w	r3, r7, #16
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <lfs_dir_getgstate+0x5c>)
 800ac9c:	4a12      	ldr	r2, [pc, #72]	; (800ace8 <lfs_dir_getgstate+0x60>)
 800ac9e:	68b9      	ldr	r1, [r7, #8]
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff f9c1 	bl	800a028 <lfs_dir_get>
 800aca6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	da05      	bge.n	800acba <lfs_dir_getgstate+0x32>
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	f113 0f02 	cmn.w	r3, #2
 800acb4:	d001      	beq.n	800acba <lfs_dir_getgstate+0x32>
        return res;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	e00f      	b.n	800acda <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	f113 0f02 	cmn.w	r3, #2
 800acc0:	d00a      	beq.n	800acd8 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800acc2:	f107 0310 	add.w	r3, r7, #16
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fe fef4 	bl	8009ab4 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800accc:	f107 0310 	add.w	r3, r7, #16
 800acd0:	4619      	mov	r1, r3
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7fe fe57 	bl	8009986 <lfs_gstate_xor>
    }

    return 0;
 800acd8:	2300      	movs	r3, #0
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	7ff0000c 	.word	0x7ff0000c
 800ace8:	7ff00000 	.word	0x7ff00000

0800acec <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800acec:	b590      	push	{r4, r7, lr}
 800acee:	b08f      	sub	sp, #60	; 0x3c
 800acf0:	af04      	add	r7, sp, #16
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	689c      	ldr	r4, [r3, #8]
 800ad0a:	68b8      	ldr	r0, [r7, #8]
 800ad0c:	f7fe fe1a 	bl	8009944 <lfs_tag_size>
 800ad10:	4603      	mov	r3, r0
 800ad12:	4619      	mov	r1, r3
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7fe f8f1 	bl	8008efc <lfs_min>
 800ad1a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800ad1c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800ad26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad28:	6849      	ldr	r1, [r1, #4]
 800ad2a:	69b8      	ldr	r0, [r7, #24]
 800ad2c:	9003      	str	r0, [sp, #12]
 800ad2e:	9102      	str	r1, [sp, #8]
 800ad30:	9201      	str	r2, [sp, #4]
 800ad32:	9300      	str	r3, [sp, #0]
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	4622      	mov	r2, r4
 800ad38:	2100      	movs	r1, #0
 800ad3a:	6a38      	ldr	r0, [r7, #32]
 800ad3c:	f7fe fafe 	bl	800933c <lfs_bd_cmp>
 800ad40:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <lfs_dir_find_match+0x60>
        return res;
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	e014      	b.n	800ad76 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	689c      	ldr	r4, [r3, #8]
 800ad50:	68b8      	ldr	r0, [r7, #8]
 800ad52:	f7fe fdf7 	bl	8009944 <lfs_tag_size>
 800ad56:	4603      	mov	r3, r0
 800ad58:	429c      	cmp	r4, r3
 800ad5a:	d00b      	beq.n	800ad74 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	689c      	ldr	r4, [r3, #8]
 800ad60:	68b8      	ldr	r0, [r7, #8]
 800ad62:	f7fe fdef 	bl	8009944 <lfs_tag_size>
 800ad66:	4603      	mov	r3, r0
 800ad68:	429c      	cmp	r4, r3
 800ad6a:	d201      	bcs.n	800ad70 <lfs_dir_find_match+0x84>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e002      	b.n	800ad76 <lfs_dir_find_match+0x8a>
 800ad70:	2302      	movs	r3, #2
 800ad72:	e000      	b.n	800ad76 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800ad74:	2300      	movs	r3, #0
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	372c      	adds	r7, #44	; 0x2c
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd90      	pop	{r4, r7, pc}
	...

0800ad80 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800ad80:	b590      	push	{r4, r7, lr}
 800ad82:	b093      	sub	sp, #76	; 0x4c
 800ad84:	af04      	add	r7, sp, #16
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
 800ad8c:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ada0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800ada2:	4b6e      	ldr	r3, [pc, #440]	; (800af5c <lfs_dir_find+0x1dc>)
 800ada4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	6a1a      	ldr	r2, [r3, #32]
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800adb6:	496a      	ldr	r1, [pc, #424]	; (800af60 <lfs_dir_find+0x1e0>)
 800adb8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adba:	f014 f9af 	bl	801f11c <strspn>
 800adbe:	4602      	mov	r2, r0
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	4413      	add	r3, r2
 800adc4:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800adc6:	4966      	ldr	r1, [pc, #408]	; (800af60 <lfs_dir_find+0x1e0>)
 800adc8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adca:	f014 f996 	bl	801f0fa <strcspn>
 800adce:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	2b01      	cmp	r3, #1
 800add4:	d105      	bne.n	800ade2 <lfs_dir_find+0x62>
 800add6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add8:	781a      	ldrb	r2, [r3, #0]
 800adda:	4b62      	ldr	r3, [pc, #392]	; (800af64 <lfs_dir_find+0x1e4>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d00a      	beq.n	800adf8 <lfs_dir_find+0x78>
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d10c      	bne.n	800ae02 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800ade8:	2202      	movs	r2, #2
 800adea:	495f      	ldr	r1, [pc, #380]	; (800af68 <lfs_dir_find+0x1e8>)
 800adec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800adee:	f014 f95f 	bl	801f0b0 <memcmp>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <lfs_dir_find+0x82>
            name += namelen;
 800adf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	4413      	add	r3, r2
 800adfe:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800ae00:	e7d9      	b.n	800adb6 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800ae02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	4413      	add	r3, r2
 800ae08:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800ae0e:	4954      	ldr	r1, [pc, #336]	; (800af60 <lfs_dir_find+0x1e0>)
 800ae10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae12:	f014 f983 	bl	801f11c <strspn>
 800ae16:	4602      	mov	r2, r0
 800ae18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae1a:	4413      	add	r3, r2
 800ae1c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800ae1e:	4950      	ldr	r1, [pc, #320]	; (800af60 <lfs_dir_find+0x1e0>)
 800ae20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae22:	f014 f96a 	bl	801f0fa <strcspn>
 800ae26:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01d      	beq.n	800ae6a <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d112      	bne.n	800ae5a <lfs_dir_find+0xda>
 800ae34:	2202      	movs	r2, #2
 800ae36:	494c      	ldr	r1, [pc, #304]	; (800af68 <lfs_dir_find+0x1e8>)
 800ae38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ae3a:	f014 f939 	bl	801f0b0 <memcmp>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10a      	bne.n	800ae5a <lfs_dir_find+0xda>
                depth -= 1;
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	3b01      	subs	r3, #1
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800ae4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d107      	bne.n	800ae60 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800ae50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	4413      	add	r3, r2
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800ae58:	e7ad      	b.n	800adb6 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800ae60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae62:	6a3b      	ldr	r3, [r7, #32]
 800ae64:	4413      	add	r3, r2
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800ae68:	e7d1      	b.n	800ae0e <lfs_dir_find+0x8e>
                break;
 800ae6a:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <lfs_dir_find+0xf8>
            return tag;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	e06c      	b.n	800af52 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7c:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fe fd25 	bl	80098d0 <lfs_tag_type3>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d002      	beq.n	800ae92 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800ae8c:	f06f 0313 	mvn.w	r3, #19
 800ae90:	e05f      	b.n	800af52 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fe fd45 	bl	8009924 <lfs_tag_id>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d01c      	beq.n	800aee0 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe fd3b 	bl	8009924 <lfs_tag_id>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800aeb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aeb6:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800aebe:	9200      	str	r2, [sp, #0]
 800aec0:	4a2a      	ldr	r2, [pc, #168]	; (800af6c <lfs_dir_find+0x1ec>)
 800aec2:	68b9      	ldr	r1, [r7, #8]
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7ff f8af 	bl	800a028 <lfs_dir_get>
 800aeca:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	da01      	bge.n	800aed6 <lfs_dir_find+0x156>
                return res;
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	e03d      	b.n	800af52 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	3318      	adds	r3, #24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7fe fc93 	bl	8009806 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800aee6:	212f      	movs	r1, #47	; 0x2f
 800aee8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800aeea:	f014 f8f9 	bl	801f0e0 <strchr>
 800aeee:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <lfs_dir_find+0x178>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	e000      	b.n	800aefa <lfs_dir_find+0x17a>
 800aef8:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800aefa:	68fa      	ldr	r2, [r7, #12]
 800aefc:	613a      	str	r2, [r7, #16]
 800aefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af00:	617a      	str	r2, [r7, #20]
 800af02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af04:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800af06:	f107 0210 	add.w	r2, r7, #16
 800af0a:	9203      	str	r2, [sp, #12]
 800af0c:	4a18      	ldr	r2, [pc, #96]	; (800af70 <lfs_dir_find+0x1f0>)
 800af0e:	9202      	str	r2, [sp, #8]
 800af10:	9301      	str	r3, [sp, #4]
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af14:	9300      	str	r3, [sp, #0]
 800af16:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800af1a:	4622      	mov	r2, r4
 800af1c:	68b9      	ldr	r1, [r7, #8]
 800af1e:	68f8      	ldr	r0, [r7, #12]
 800af20:	f7ff fb2a 	bl	800a578 <lfs_dir_fetchmatch>
 800af24:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	da01      	bge.n	800af30 <lfs_dir_find+0x1b0>
                return tag;
 800af2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af2e:	e010      	b.n	800af52 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	2b00      	cmp	r3, #0
 800af34:	d004      	beq.n	800af40 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800af36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3a:	4413      	add	r3, r2
 800af3c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800af3e:	e73a      	b.n	800adb6 <lfs_dir_find+0x36>
            if (!dir->split) {
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	7ddb      	ldrb	r3, [r3, #23]
 800af44:	f083 0301 	eor.w	r3, r3, #1
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0c8      	beq.n	800aee0 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800af4e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800af52:	4618      	mov	r0, r3
 800af54:	373c      	adds	r7, #60	; 0x3c
 800af56:	46bd      	mov	sp, r7
 800af58:	bd90      	pop	{r4, r7, pc}
 800af5a:	bf00      	nop
 800af5c:	002ffc00 	.word	0x002ffc00
 800af60:	08020418 	.word	0x08020418
 800af64:	0802041c 	.word	0x0802041c
 800af68:	08020420 	.word	0x08020420
 800af6c:	700ffc00 	.word	0x700ffc00
 800af70:	0800aced 	.word	0x0800aced

0800af74 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b08b      	sub	sp, #44	; 0x2c
 800af78:	af04      	add	r7, sp, #16
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
 800af80:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f103 0010 	add.w	r0, r3, #16
 800af88:	68fc      	ldr	r4, [r7, #12]
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	6852      	ldr	r2, [r2, #4]
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	9103      	str	r1, [sp, #12]
 800af96:	6879      	ldr	r1, [r7, #4]
 800af98:	9102      	str	r1, [sp, #8]
 800af9a:	9201      	str	r2, [sp, #4]
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2300      	movs	r3, #0
 800afa0:	4622      	mov	r2, r4
 800afa2:	4601      	mov	r1, r0
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f7fe facb 	bl	8009540 <lfs_bd_prog>
 800afaa:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d001      	beq.n	800afb6 <lfs_dir_commitprog+0x42>
        return err;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	e010      	b.n	800afd8 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	683a      	ldr	r2, [r7, #0]
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f003 fb86 	bl	800e6d0 <lfs_crc>
 800afc4:	4602      	mov	r2, r0
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	441a      	add	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	605a      	str	r2, [r3, #4]
    return 0;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	371c      	adds	r7, #28
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd90      	pop	{r4, r7, pc}

0800afe0 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800afe0:	b590      	push	{r4, r7, lr}
 800afe2:	b08f      	sub	sp, #60	; 0x3c
 800afe4:	af04      	add	r7, sp, #16
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
 800afec:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7fe fcb5 	bl	800995e <lfs_tag_dsize>
 800aff4:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	441a      	add	r2, r3
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	429a      	cmp	r2, r3
 800b004:	d902      	bls.n	800b00c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800b006:	f06f 031b 	mvn.w	r3, #27
 800b00a:	e065      	b.n	800b0d8 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	4053      	eors	r3, r2
 800b018:	4618      	mov	r0, r3
 800b01a:	f7fe f802 	bl	8009022 <lfs_tobe32>
 800b01e:	4603      	mov	r3, r0
 800b020:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800b022:	f107 0214 	add.w	r2, r7, #20
 800b026:	2304      	movs	r3, #4
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f7ff ffa2 	bl	800af74 <lfs_dir_commitprog>
 800b030:	61f8      	str	r0, [r7, #28]
    if (err) {
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <lfs_dir_commitattr+0x5c>
        return err;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	e04d      	b.n	800b0d8 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	db0c      	blt.n	800b05c <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	3b04      	subs	r3, #4
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	68b9      	ldr	r1, [r7, #8]
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f7ff ff92 	bl	800af74 <lfs_dir_commitprog>
 800b050:	61f8      	str	r0, [r7, #28]
        if (err) {
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d039      	beq.n	800b0cc <lfs_dir_commitattr+0xec>
            return err;
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	e03d      	b.n	800b0d8 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b060:	2300      	movs	r3, #0
 800b062:	627b      	str	r3, [r7, #36]	; 0x24
 800b064:	e02d      	b.n	800b0c2 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b066:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800b068:	6a3a      	ldr	r2, [r7, #32]
 800b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06c:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b06e:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800b070:	69bb      	ldr	r3, [r7, #24]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	69ba      	ldr	r2, [r7, #24]
 800b076:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800b078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b07a:	440a      	add	r2, r1
 800b07c:	2101      	movs	r1, #1
 800b07e:	9103      	str	r1, [sp, #12]
 800b080:	f107 0113 	add.w	r1, r7, #19
 800b084:	9102      	str	r1, [sp, #8]
 800b086:	9201      	str	r2, [sp, #4]
 800b088:	9300      	str	r3, [sp, #0]
 800b08a:	4623      	mov	r3, r4
 800b08c:	4602      	mov	r2, r0
 800b08e:	2100      	movs	r1, #0
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f7fe f80f 	bl	80090b4 <lfs_bd_read>
 800b096:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <lfs_dir_commitattr+0xc2>
                return err;
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	e01a      	b.n	800b0d8 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800b0a2:	f107 0213 	add.w	r2, r7, #19
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff ff62 	bl	800af74 <lfs_dir_commitprog>
 800b0b0:	61f8      	str	r0, [r7, #28]
            if (err) {
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d001      	beq.n	800b0bc <lfs_dir_commitattr+0xdc>
                return err;
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	e00d      	b.n	800b0d8 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	3301      	adds	r3, #1
 800b0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c2:	6a3b      	ldr	r3, [r7, #32]
 800b0c4:	3b04      	subs	r3, #4
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d3cc      	bcc.n	800b066 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	609a      	str	r2, [r3, #8]
    return 0;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	372c      	adds	r7, #44	; 0x2c
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd90      	pop	{r4, r7, pc}

0800b0e0 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800b0e0:	b590      	push	{r4, r7, lr}
 800b0e2:	b097      	sub	sp, #92	; 0x5c
 800b0e4:	af04      	add	r7, sp, #16
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800b0f8:	4619      	mov	r1, r3
 800b0fa:	4610      	mov	r0, r2
 800b0fc:	f7fd ff23 	bl	8008f46 <lfs_alignup>
 800b100:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800b102:	2300      	movs	r3, #0
 800b104:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800b10a:	e0a6      	b.n	800b25a <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	3304      	adds	r3, #4
 800b112:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800b114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b11e:	4618      	mov	r0, r3
 800b120:	f7fd feec 	bl	8008efc <lfs_min>
 800b124:	4602      	mov	r2, r0
 800b126:	6a3b      	ldr	r3, [r7, #32]
 800b128:	4413      	add	r3, r2
 800b12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800b12c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	429a      	cmp	r2, r3
 800b132:	d206      	bcs.n	800b142 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	3b08      	subs	r3, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b13c:	f7fd fede 	bl	8008efc <lfs_min>
 800b140:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800b142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b146:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	2204      	movs	r2, #4
 800b150:	9203      	str	r2, [sp, #12]
 800b152:	f107 0214 	add.w	r2, r7, #20
 800b156:	9202      	str	r2, [sp, #8]
 800b158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b15a:	9201      	str	r2, [sp, #4]
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	2304      	movs	r3, #4
 800b160:	460a      	mov	r2, r1
 800b162:	2100      	movs	r1, #0
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7fd ffa5 	bl	80090b4 <lfs_bd_read>
 800b16a:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d005      	beq.n	800b17e <lfs_dir_commitcrc+0x9e>
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b178:	d001      	beq.n	800b17e <lfs_dir_commitcrc+0x9e>
            return err;
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	e0e8      	b.n	800b350 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	4618      	mov	r0, r3
 800b182:	f7fd ff42 	bl	800900a <lfs_frombe32>
 800b186:	4603      	mov	r3, r0
 800b188:	43db      	mvns	r3, r3
 800b18a:	0fdb      	lsrs	r3, r3, #31
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	bf14      	ite	ne
 800b190:	2301      	movne	r3, #1
 800b192:	2300      	moveq	r3, #0
 800b194:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800b196:	7efb      	ldrb	r3, [r7, #27]
 800b198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b19c:	051a      	lsls	r2, r3, #20
 800b19e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1a0:	6a3b      	ldr	r3, [r7, #32]
 800b1a2:	1acb      	subs	r3, r1, r3
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800b1aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800b1ae:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	4053      	eors	r3, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fd ff32 	bl	8009022 <lfs_tobe32>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	f107 010c 	add.w	r1, r7, #12
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f003 fa7f 	bl	800e6d0 <lfs_crc>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	68db      	ldr	r3, [r3, #12]
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fd ff08 	bl	8008ff2 <lfs_tole32>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f103 0010 	add.w	r0, r3, #16
 800b1ec:	687c      	ldr	r4, [r7, #4]
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	6852      	ldr	r2, [r2, #4]
 800b1f6:	2108      	movs	r1, #8
 800b1f8:	9103      	str	r1, [sp, #12]
 800b1fa:	f107 010c 	add.w	r1, r7, #12
 800b1fe:	9102      	str	r1, [sp, #8]
 800b200:	9201      	str	r2, [sp, #4]
 800b202:	9300      	str	r3, [sp, #0]
 800b204:	2300      	movs	r3, #0
 800b206:	4622      	mov	r2, r4
 800b208:	4601      	mov	r1, r0
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fe f998 	bl	8009540 <lfs_bd_prog>
 800b210:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <lfs_dir_commitcrc+0x13c>
            return err;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	e099      	b.n	800b350 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800b21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d106      	bne.n	800b230 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	3304      	adds	r3, #4
 800b228:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	4618      	mov	r0, r3
 800b234:	f7fe fb86 	bl	8009944 <lfs_tag_size>
 800b238:	4603      	mov	r3, r0
 800b23a:	1d1a      	adds	r2, r3, #4
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	441a      	add	r2, r3
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800b246:	7efb      	ldrb	r3, [r7, #27]
 800b248:	07da      	lsls	r2, r3, #31
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	405a      	eors	r2, r3
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b258:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b260:	429a      	cmp	r2, r3
 800b262:	f63f af53 	bhi.w	800b10c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f103 0110 	add.w	r1, r3, #16
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	2300      	movs	r3, #0
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7fe f931 	bl	80094d8 <lfs_bd_sync>
 800b276:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <lfs_dir_commitcrc+0x1a2>
        return err;
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	e066      	b.n	800b350 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800b288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b28c:	e05b      	b.n	800b346 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b292:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b296:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b298:	e030      	b.n	800b2fc <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800b29a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d106      	bne.n	800b2b0 <lfs_dir_commitcrc+0x1d0>
 800b2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d002      	beq.n	800b2b0 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800b2aa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b2ae:	e04f      	b.n	800b350 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800b2b0:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800b2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800b2b8:	1d18      	adds	r0, r3, #4
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	9203      	str	r2, [sp, #12]
 800b2c2:	f107 020b 	add.w	r2, r7, #11
 800b2c6:	9202      	str	r2, [sp, #8]
 800b2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2ca:	9201      	str	r2, [sp, #4]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	460a      	mov	r2, r1
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7fd feed 	bl	80090b4 <lfs_bd_read>
 800b2da:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <lfs_dir_commitcrc+0x206>
                return err;
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	e034      	b.n	800b350 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800b2e6:	f107 030b 	add.w	r3, r7, #11
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2f0:	f003 f9ee 	bl	800e6d0 <lfs_crc>
 800b2f4:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800b2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2fe:	3304      	adds	r3, #4
 800b300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b302:	429a      	cmp	r2, r3
 800b304:	d3c9      	bcc.n	800b29a <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800b30c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b310:	e01e      	b.n	800b350 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800b312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd fded 	bl	8008efc <lfs_min>
 800b322:	4602      	mov	r2, r0
 800b324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b326:	4413      	add	r3, r2
 800b328:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800b32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	429a      	cmp	r2, r3
 800b330:	d206      	bcs.n	800b340 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800b332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b334:	3b08      	subs	r3, #8
 800b336:	4619      	mov	r1, r3
 800b338:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b33a:	f7fd fddf 	bl	8008efc <lfs_min>
 800b33e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	3304      	adds	r3, #4
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800b346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d39f      	bcc.n	800b28e <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	374c      	adds	r7, #76	; 0x4c
 800b354:	46bd      	mov	sp, r7
 800b356:	bd90      	pop	{r4, r7, pc}

0800b358 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af04      	add	r7, sp, #16
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800b362:	2300      	movs	r3, #0
 800b364:	617b      	str	r3, [r7, #20]
 800b366:	e016      	b.n	800b396 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	3301      	adds	r3, #1
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	bfb8      	it	lt
 800b374:	425b      	neglt	r3, r3
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	4413      	add	r3, r2
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f7fe fcb8 	bl	8009cf4 <lfs_alloc>
 800b384:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <lfs_dir_alloc+0x38>
            return err;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	e058      	b.n	800b442 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	3301      	adds	r3, #1
 800b394:	617b      	str	r3, [r7, #20]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	dde5      	ble.n	800b368 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800b3ac:	2004      	movs	r0, #4
 800b3ae:	9003      	str	r0, [sp, #12]
 800b3b0:	9202      	str	r2, [sp, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	9201      	str	r2, [sp, #4]
 800b3b6:	9300      	str	r3, [sp, #0]
 800b3b8:	2304      	movs	r3, #4
 800b3ba:	460a      	mov	r2, r1
 800b3bc:	2100      	movs	r1, #0
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fd fe78 	bl	80090b4 <lfs_bd_read>
 800b3c4:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fd fe06 	bl	8008fdc <lfs_fromle32>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d005      	beq.n	800b3e8 <lfs_dir_alloc+0x90>
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b3e2:	d001      	beq.n	800b3e8 <lfs_dir_alloc+0x90>
        return err;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	e02c      	b.n	800b442 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dd0e      	ble.n	800b410 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689a      	ldr	r2, [r3, #8]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7fd fd9e 	bl	8008f46 <lfs_alignup>
 800b40a:	4602      	mov	r2, r0
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2204      	movs	r2, #4
 800b414:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b41c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2200      	movs	r2, #0
 800b422:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b42a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b432:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	2200      	movs	r2, #0
 800b438:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2200      	movs	r2, #0
 800b43e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3718      	adds	r7, #24
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
	...

0800b44c <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b08a      	sub	sp, #40	; 0x28
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	3348      	adds	r3, #72	; 0x48
 800b45c:	461a      	mov	r2, r3
 800b45e:	6879      	ldr	r1, [r7, #4]
 800b460:	68f8      	ldr	r0, [r7, #12]
 800b462:	f7ff fc11 	bl	800ac88 <lfs_dir_getgstate>
 800b466:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <lfs_dir_drop+0x26>
        return err;
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	e022      	b.n	800b4b8 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	3318      	adds	r3, #24
 800b476:	4618      	mov	r0, r3
 800b478:	f7fe f9df 	bl	800983a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7ddb      	ldrb	r3, [r3, #23]
 800b480:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b484:	051a      	lsls	r2, r3, #20
 800b486:	4b0e      	ldr	r3, [pc, #56]	; (800b4c0 <lfs_dir_drop+0x74>)
 800b488:	4313      	orrs	r3, r2
 800b48a:	61fb      	str	r3, [r7, #28]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	3318      	adds	r3, #24
 800b490:	623b      	str	r3, [r7, #32]
 800b492:	f107 021c 	add.w	r2, r7, #28
 800b496:	2301      	movs	r3, #1
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 fbac 	bl	800bbf8 <lfs_dir_commit>
 800b4a0:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	3318      	adds	r3, #24
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7fe f9ad 	bl	8009806 <lfs_pair_fromle32>
    if (err) {
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d001      	beq.n	800b4b6 <lfs_dir_drop+0x6a>
        return err;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	e000      	b.n	800b4b8 <lfs_dir_drop+0x6c>
    }

    return 0;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3728      	adds	r7, #40	; 0x28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	000ffc08 	.word	0x000ffc08

0800b4c4 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b092      	sub	sp, #72	; 0x48
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	607a      	str	r2, [r7, #4]
 800b4d0:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f7fe fbed 	bl	8009cb2 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800b4d8:	f107 0314 	add.w	r3, r7, #20
 800b4dc:	4619      	mov	r1, r3
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff ff3a 	bl	800b358 <lfs_dir_alloc>
 800b4e4:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <lfs_dir_split+0x2c>
        return err;
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ee:	e03c      	b.n	800b56a <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	7ddb      	ldrb	r3, [r3, #23]
 800b4f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800b504:	f107 0114 	add.w	r1, r7, #20
 800b508:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b50c:	9302      	str	r3, [sp, #8]
 800b50e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b512:	9301      	str	r3, [sp, #4]
 800b514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f853 	bl	800b5c8 <lfs_dir_compact>
 800b522:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800b524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b526:	2b00      	cmp	r3, #0
 800b528:	d001      	beq.n	800b52e <lfs_dir_split+0x6a>
        return err;
 800b52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52c:	e01d      	b.n	800b56a <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800b534:	69ba      	ldr	r2, [r7, #24]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2201      	movs	r2, #1
 800b53e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	3320      	adds	r3, #32
 800b546:	4619      	mov	r1, r3
 800b548:	4610      	mov	r0, r2
 800b54a:	f7fe f905 	bl	8009758 <lfs_pair_cmp>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d109      	bne.n	800b568 <lfs_dir_split+0xa4>
 800b554:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d105      	bne.n	800b568 <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800b55c:	697a      	ldr	r2, [r7, #20]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800b562:	69ba      	ldr	r2, [r7, #24]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3738      	adds	r7, #56	; 0x38
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800b572:	b580      	push	{r7, lr}
 800b574:	b086      	sub	sp, #24
 800b576:	af00      	add	r7, sp, #0
 800b578:	60f8      	str	r0, [r7, #12]
 800b57a:	60b9      	str	r1, [r7, #8]
 800b57c:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800b582:	68b8      	ldr	r0, [r7, #8]
 800b584:	f7fe f9eb 	bl	800995e <lfs_tag_dsize>
 800b588:	4602      	mov	r2, r0
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	441a      	add	r2, r3
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	601a      	str	r2, [r3, #0]
    return 0;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3718      	adds	r7, #24
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b086      	sub	sp, #24
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	60f8      	str	r0, [r7, #12]
 800b5a6:	60b9      	str	r1, [r7, #8]
 800b5a8:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	6818      	ldr	r0, [r3, #0]
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	6859      	ldr	r1, [r3, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	f7ff fd11 	bl	800afe0 <lfs_dir_commitattr>
 800b5be:	4603      	mov	r3, r0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3718      	adds	r7, #24
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800b5c8:	b590      	push	{r4, r7, lr}
 800b5ca:	b0ad      	sub	sp, #180	; 0xb4
 800b5cc:	af0a      	add	r7, sp, #40	; 0x28
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	663b      	str	r3, [r7, #96]	; 0x60
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800b5ee:	e08f      	b.n	800b710 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800b5f4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b5f8:	425b      	negs	r3, r3
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	b21b      	sxth	r3, r3
 800b5fe:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800b602:	9208      	str	r2, [sp, #32]
 800b604:	4aa4      	ldr	r2, [pc, #656]	; (800b898 <lfs_dir_compact+0x2d0>)
 800b606:	9207      	str	r2, [sp, #28]
 800b608:	9306      	str	r3, [sp, #24]
 800b60a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b60e:	9305      	str	r3, [sp, #20]
 800b610:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b614:	9304      	str	r3, [sp, #16]
 800b616:	2300      	movs	r3, #0
 800b618:	9303      	str	r3, [sp, #12]
 800b61a:	4ba0      	ldr	r3, [pc, #640]	; (800b89c <lfs_dir_compact+0x2d4>)
 800b61c:	9302      	str	r3, [sp, #8]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7fe fe49 	bl	800a2c8 <lfs_dir_traverse>
 800b636:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800b63a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d002      	beq.n	800b648 <lfs_dir_compact+0x80>
            return err;
 800b642:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b646:	e2cc      	b.n	800bbe2 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800b648:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b64c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	2bfe      	cmp	r3, #254	; 0xfe
 800b654:	dc22      	bgt.n	800b69c <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65c:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b666:	2b00      	cmp	r3, #0
 800b668:	d004      	beq.n	800b674 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b670:	085b      	lsrs	r3, r3, #1
 800b672:	e003      	b.n	800b67c <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b67a:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b680:	6a12      	ldr	r2, [r2, #32]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800b682:	4611      	mov	r1, r2
 800b684:	4618      	mov	r0, r3
 800b686:	f7fd fc5e 	bl	8008f46 <lfs_alignup>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4619      	mov	r1, r3
 800b68e:	4620      	mov	r0, r4
 800b690:	f7fd fc34 	bl	8008efc <lfs_min>
 800b694:	4602      	mov	r2, r0
 800b696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800b698:	429a      	cmp	r2, r3
 800b69a:	d242      	bcs.n	800b722 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800b69c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b6a0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	0fda      	lsrs	r2, r3, #31
 800b6a8:	4413      	add	r3, r2
 800b6aa:	105b      	asrs	r3, r3, #1
 800b6ac:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b6b0:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b6b4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b6b8:	4413      	add	r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b6c0:	9202      	str	r2, [sp, #8]
 800b6c2:	9301      	str	r3, [sp, #4]
 800b6c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	68b9      	ldr	r1, [r7, #8]
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f7ff fef7 	bl	800b4c4 <lfs_dir_split>
 800b6d6:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800b6da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00f      	beq.n	800b702 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800b6e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b6e6:	f113 0f1c 	cmn.w	r3, #28
 800b6ea:	d107      	bne.n	800b6fc <lfs_dir_compact+0x134>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800b6f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d214      	bcs.n	800b726 <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800b6fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b700:	e26f      	b.n	800bbe2 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800b702:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800b706:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800b70a:	4413      	add	r3, r2
 800b70c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800b710:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800b714:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	f73f af68 	bgt.w	800b5f0 <lfs_dir_compact+0x28>
 800b720:	e002      	b.n	800b728 <lfs_dir_compact+0x160>
            break;
 800b722:	bf00      	nop
 800b724:	e000      	b.n	800b728 <lfs_dir_compact+0x160>
                break;
 800b726:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	1c5a      	adds	r2, r3, #1
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dd5b      	ble.n	800b7f4 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	68fa      	ldr	r2, [r7, #12]
 800b742:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b744:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b746:	3201      	adds	r2, #1
 800b748:	f042 0201 	orr.w	r2, r2, #1
 800b74c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b750:	fb01 f202 	mul.w	r2, r1, r2
 800b754:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800b756:	2b00      	cmp	r3, #0
 800b758:	d14c      	bne.n	800b7f4 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2200      	movs	r2, #0
 800b75e:	657a      	str	r2, [r7, #84]	; 0x54
 800b760:	2201      	movs	r2, #1
 800b762:	65ba      	str	r2, [r7, #88]	; 0x58
 800b764:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b768:	4611      	mov	r1, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fd fff4 	bl	8009758 <lfs_pair_cmp>
 800b770:	4603      	mov	r3, r0
 800b772:	2b00      	cmp	r3, #0
 800b774:	d13a      	bne.n	800b7ec <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f002 ff32 	bl	800e5e0 <lfs_fs_rawsize>
 800b77c:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800b77e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b780:	2b00      	cmp	r3, #0
 800b782:	da01      	bge.n	800b788 <lfs_dir_compact+0x1c0>
                return res;
 800b784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b786:	e22c      	b.n	800bbe2 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	085a      	lsrs	r2, r3, #1
 800b790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b792:	429a      	cmp	r2, r3
 800b794:	d92e      	bls.n	800b7f4 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	4a41      	ldr	r2, [pc, #260]	; (800b8a0 <lfs_dir_compact+0x2d8>)
 800b79c:	9200      	str	r2, [sp, #0]
 800b79e:	f240 626c 	movw	r2, #1644	; 0x66c
 800b7a2:	4940      	ldr	r1, [pc, #256]	; (800b8a4 <lfs_dir_compact+0x2dc>)
 800b7a4:	4840      	ldr	r0, [pc, #256]	; (800b8a8 <lfs_dir_compact+0x2e0>)
 800b7a6:	f013 fb3d 	bl	801ee24 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800b7aa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b7ae:	9302      	str	r3, [sp, #8]
 800b7b0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	68b9      	ldr	r1, [r7, #8]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff fe7e 	bl	800b4c4 <lfs_dir_split>
 800b7c8:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800b7ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d005      	beq.n	800b7dc <lfs_dir_compact+0x214>
 800b7d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d2:	f113 0f1c 	cmn.w	r3, #28
 800b7d6:	d001      	beq.n	800b7dc <lfs_dir_compact+0x214>
                    return err;
 800b7d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7da:	e202      	b.n	800bbe2 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800b7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d108      	bne.n	800b7f4 <lfs_dir_compact+0x22c>
                    end = begin;
 800b7e2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b7e6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800b7ea:	e003      	b.n	800b7f4 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800b7f2:	e16b      	b.n	800bacc <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800b7f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	643b      	str	r3, [r7, #64]	; 0x40
 800b7fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b802:	647b      	str	r3, [r7, #68]	; 0x44
 800b804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b808:	64bb      	str	r3, [r7, #72]	; 0x48
 800b80a:	2300      	movs	r3, #0
 800b80c:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800b814:	2b00      	cmp	r3, #0
 800b816:	d004      	beq.n	800b822 <lfs_dir_compact+0x25a>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81e:	3b08      	subs	r3, #8
 800b820:	e003      	b.n	800b82a <lfs_dir_compact+0x262>
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800b82a:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	4619      	mov	r1, r3
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f7fd ff30 	bl	8009698 <lfs_bd_erase>
 800b838:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800b83a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d006      	beq.n	800b84e <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800b840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b842:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b846:	f000 8136 	beq.w	800bab6 <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800b84a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b84c:	e1c9      	b.n	800bbe2 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	4618      	mov	r0, r3
 800b854:	f7fd fbcd 	bl	8008ff2 <lfs_tole32>
 800b858:	4602      	mov	r2, r0
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800b864:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b868:	2304      	movs	r3, #4
 800b86a:	68f8      	ldr	r0, [r7, #12]
 800b86c:	f7ff fb82 	bl	800af74 <lfs_dir_commitprog>
 800b870:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	4618      	mov	r0, r3
 800b878:	f7fd fbb0 	bl	8008fdc <lfs_fromle32>
 800b87c:	4602      	mov	r2, r0
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	609a      	str	r2, [r3, #8]
            if (err) {
 800b882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b884:	2b00      	cmp	r3, #0
 800b886:	d011      	beq.n	800b8ac <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800b888:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b88a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b88e:	f000 8114 	beq.w	800baba <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800b892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b894:	e1a5      	b.n	800bbe2 <lfs_dir_compact+0x61a>
 800b896:	bf00      	nop
 800b898:	0800b573 	.word	0x0800b573
 800b89c:	400ffc00 	.word	0x400ffc00
 800b8a0:	080203d4 	.word	0x080203d4
 800b8a4:	080202c8 	.word	0x080202c8
 800b8a8:	08020424 	.word	0x08020424
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800b8ac:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b8b0:	425b      	negs	r3, r3
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	637a      	str	r2, [r7, #52]	; 0x34
 800b8ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b8be:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800b8c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b8c4:	9208      	str	r2, [sp, #32]
 800b8c6:	4aaa      	ldr	r2, [pc, #680]	; (800bb70 <lfs_dir_compact+0x5a8>)
 800b8c8:	9207      	str	r2, [sp, #28]
 800b8ca:	9306      	str	r3, [sp, #24]
 800b8cc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800b8d0:	9305      	str	r3, [sp, #20]
 800b8d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b8d6:	9304      	str	r3, [sp, #16]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	4ba5      	ldr	r3, [pc, #660]	; (800bb74 <lfs_dir_compact+0x5ac>)
 800b8de:	9302      	str	r3, [sp, #8]
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	9301      	str	r3, [sp, #4]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7fe fce8 	bl	800a2c8 <lfs_dir_traverse>
 800b8f8:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800b8fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800b900:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b902:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b906:	f000 80da 	beq.w	800babe <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800b90a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b90c:	e169      	b.n	800bbe2 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	3318      	adds	r3, #24
 800b912:	4618      	mov	r0, r3
 800b914:	f7fd ff05 	bl	8009722 <lfs_pair_isnull>
 800b918:	4603      	mov	r3, r0
 800b91a:	f083 0301 	eor.w	r3, r3, #1
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b00      	cmp	r3, #0
 800b922:	d022      	beq.n	800b96a <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	3318      	adds	r3, #24
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fd ff86 	bl	800983a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	7ddb      	ldrb	r3, [r3, #23]
 800b932:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800b936:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800b938:	4a8f      	ldr	r2, [pc, #572]	; (800bb78 <lfs_dir_compact+0x5b0>)
 800b93a:	431a      	orrs	r2, r3
                        dir->tail);
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800b940:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f7ff fb4b 	bl	800afe0 <lfs_dir_commitattr>
 800b94a:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	3318      	adds	r3, #24
 800b950:	4618      	mov	r0, r3
 800b952:	f7fd ff58 	bl	8009806 <lfs_pair_fromle32>
                if (err) {
 800b956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d006      	beq.n	800b96a <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800b95c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b95e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800b962:	f000 80ae 	beq.w	800bac2 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800b966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b968:	e13b      	b.n	800bbe2 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800b96a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b96e:	2200      	movs	r2, #0
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	605a      	str	r2, [r3, #4]
 800b974:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800b976:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800b97a:	f083 0301 	eor.w	r3, r3, #1
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d011      	beq.n	800b9a8 <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800b98a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b98e:	4611      	mov	r1, r2
 800b990:	4618      	mov	r0, r3
 800b992:	f7fd fff8 	bl	8009986 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b99c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7fd ffef 	bl	8009986 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800b9ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fd ffe6 	bl	8009986 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800b9c0:	f023 0303 	bic.w	r3, r3, #3
 800b9c4:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800b9c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	68b9      	ldr	r1, [r7, #8]
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff f95a 	bl	800ac88 <lfs_dir_getgstate>
 800b9d4:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800b9d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <lfs_dir_compact+0x418>
                return err;
 800b9dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9de:	e100      	b.n	800bbe2 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800b9e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fd fff3 	bl	80099d0 <lfs_gstate_iszero>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f083 0301 	eor.w	r3, r3, #1
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d016      	beq.n	800ba24 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800b9f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7fe f87a 	bl	8009af4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800ba00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba04:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ba08:	4a5c      	ldr	r2, [pc, #368]	; (800bb7c <lfs_dir_compact+0x5b4>)
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fae8 	bl	800afe0 <lfs_dir_commitattr>
 800ba10:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800ba12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d005      	beq.n	800ba24 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800ba18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba1a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba1e:	d052      	beq.n	800bac6 <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800ba20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba22:	e0de      	b.n	800bbe2 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800ba24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ba28:	4619      	mov	r1, r3
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff fb58 	bl	800b0e0 <lfs_dir_commitcrc>
 800ba30:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800ba32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800ba38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba3a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ba3e:	d044      	beq.n	800baca <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800ba40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ba42:	e0ce      	b.n	800bbe2 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800ba44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ba4a:	6a12      	ldr	r2, [r2, #32]
 800ba4c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ba50:	fb01 f202 	mul.w	r2, r1, r2
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d006      	beq.n	800ba68 <lfs_dir_compact+0x4a0>
 800ba5a:	4b49      	ldr	r3, [pc, #292]	; (800bb80 <lfs_dir_compact+0x5b8>)
 800ba5c:	4a49      	ldr	r2, [pc, #292]	; (800bb84 <lfs_dir_compact+0x5bc>)
 800ba5e:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800ba62:	4849      	ldr	r0, [pc, #292]	; (800bb88 <lfs_dir_compact+0x5c0>)
 800ba64:	f012 ff62 	bl	801e92c <__assert_func>
            lfs_pair_swap(dir->pair);
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd fe44 	bl	80096f8 <lfs_pair_swap>
            dir->count = end - begin;
 800ba70:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800ba74:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800ba80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800ba86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	3348      	adds	r3, #72	; 0x48
 800ba90:	2200      	movs	r2, #0
 800ba92:	601a      	str	r2, [r3, #0]
 800ba94:	605a      	str	r2, [r3, #4]
 800ba96:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800ba98:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800ba9c:	f083 0301 	eor.w	r3, r3, #1
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d078      	beq.n	800bb98 <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	333c      	adds	r3, #60	; 0x3c
 800baac:	3230      	adds	r2, #48	; 0x30
 800baae:	ca07      	ldmia	r2, {r0, r1, r2}
 800bab0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800bab4:	e070      	b.n	800bb98 <lfs_dir_compact+0x5d0>
                    goto relocate;
 800bab6:	bf00      	nop
 800bab8:	e008      	b.n	800bacc <lfs_dir_compact+0x504>
                    goto relocate;
 800baba:	bf00      	nop
 800babc:	e006      	b.n	800bacc <lfs_dir_compact+0x504>
                    goto relocate;
 800babe:	bf00      	nop
 800bac0:	e004      	b.n	800bacc <lfs_dir_compact+0x504>
                        goto relocate;
 800bac2:	bf00      	nop
 800bac4:	e002      	b.n	800bacc <lfs_dir_compact+0x504>
                        goto relocate;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <lfs_dir_compact+0x504>
                    goto relocate;
 800baca:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800bacc:	2301      	movs	r3, #1
 800bace:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3310      	adds	r3, #16
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7fd fac5 	bl	8009068 <lfs_cache_drop>
        if (!tired) {
 800bade:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bae2:	f083 0301 	eor.w	r3, r3, #1
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d009      	beq.n	800bb00 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	4a26      	ldr	r2, [pc, #152]	; (800bb8c <lfs_dir_compact+0x5c4>)
 800baf2:	9200      	str	r2, [sp, #0]
 800baf4:	f240 7202 	movw	r2, #1794	; 0x702
 800baf8:	4923      	ldr	r1, [pc, #140]	; (800bb88 <lfs_dir_compact+0x5c0>)
 800bafa:	4825      	ldr	r0, [pc, #148]	; (800bb90 <lfs_dir_compact+0x5c8>)
 800bafc:	f013 f992 	bl	801ee24 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2200      	movs	r2, #0
 800bb04:	617a      	str	r2, [r7, #20]
 800bb06:	2201      	movs	r2, #1
 800bb08:	61ba      	str	r2, [r7, #24]
 800bb0a:	f107 0214 	add.w	r2, r7, #20
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fd fe21 	bl	8009758 <lfs_pair_cmp>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10c      	bne.n	800bb36 <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	4a1a      	ldr	r2, [pc, #104]	; (800bb8c <lfs_dir_compact+0x5c4>)
 800bb22:	9200      	str	r2, [sp, #0]
 800bb24:	f240 7207 	movw	r2, #1799	; 0x707
 800bb28:	4917      	ldr	r1, [pc, #92]	; (800bb88 <lfs_dir_compact+0x5c0>)
 800bb2a:	481a      	ldr	r0, [pc, #104]	; (800bb94 <lfs_dir_compact+0x5cc>)
 800bb2c:	f013 f97a 	bl	801ee24 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800bb30:	f06f 031b 	mvn.w	r3, #27
 800bb34:	e055      	b.n	800bbe2 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	3304      	adds	r3, #4
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fe f8d9 	bl	8009cf4 <lfs_alloc>
 800bb42:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800bb44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00c      	beq.n	800bb64 <lfs_dir_compact+0x59c>
 800bb4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb4c:	f113 0f1c 	cmn.w	r3, #28
 800bb50:	d106      	bne.n	800bb60 <lfs_dir_compact+0x598>
 800bb52:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800bb56:	f083 0301 	eor.w	r3, r3, #1
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <lfs_dir_compact+0x59c>
            return err;
 800bb60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb62:	e03e      	b.n	800bbe2 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800bb64:	2300      	movs	r3, #0
 800bb66:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800bb6a:	bf00      	nop
    while (true) {
 800bb6c:	e642      	b.n	800b7f4 <lfs_dir_compact+0x22c>
 800bb6e:	bf00      	nop
 800bb70:	0800b59f 	.word	0x0800b59f
 800bb74:	400ffc00 	.word	0x400ffc00
 800bb78:	000ffc08 	.word	0x000ffc08
 800bb7c:	7ffffc0c 	.word	0x7ffffc0c
 800bb80:	08020454 	.word	0x08020454
 800bb84:	080245b8 	.word	0x080245b8
 800bb88:	080202c8 	.word	0x080202c8
 800bb8c:	080203d4 	.word	0x080203d4
 800bb90:	0802047c 	.word	0x0802047c
 800bb94:	080204a0 	.word	0x080204a0
        break;
 800bb98:	bf00      	nop
    }

    if (relocated) {
 800bb9a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d01e      	beq.n	800bbe0 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800bba2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800bba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	6812      	ldr	r2, [r2, #0]
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	6849      	ldr	r1, [r1, #4]
 800bbae:	4c0f      	ldr	r4, [pc, #60]	; (800bbec <lfs_dir_compact+0x624>)
 800bbb0:	9403      	str	r4, [sp, #12]
 800bbb2:	9102      	str	r1, [sp, #8]
 800bbb4:	9201      	str	r2, [sp, #4]
 800bbb6:	9300      	str	r3, [sp, #0]
 800bbb8:	4603      	mov	r3, r0
 800bbba:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800bbbe:	490c      	ldr	r1, [pc, #48]	; (800bbf0 <lfs_dir_compact+0x628>)
 800bbc0:	480c      	ldr	r0, [pc, #48]	; (800bbf4 <lfs_dir_compact+0x62c>)
 800bbc2:	f013 f92f 	bl	801ee24 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800bbcc:	4619      	mov	r1, r3
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f002 f98e 	bl	800def0 <lfs_fs_relocate>
 800bbd4:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800bbd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <lfs_dir_compact+0x618>
            return err;
 800bbdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbde:	e000      	b.n	800bbe2 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	378c      	adds	r7, #140	; 0x8c
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd90      	pop	{r4, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	080203d4 	.word	0x080203d4
 800bbf0:	080202c8 	.word	0x080202c8
 800bbf4:	080204d8 	.word	0x080204d8

0800bbf8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800bbf8:	b5b0      	push	{r4, r5, r7, lr}
 800bbfa:	b0b8      	sub	sp, #224	; 0xe0
 800bbfc:	af0a      	add	r7, sp, #40	; 0x28
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc0e:	e045      	b.n	800bc9c <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800bc10:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc14:	3308      	adds	r3, #8
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d03a      	beq.n	800bc92 <lfs_dir_commit+0x9a>
 800bc1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc20:	3308      	adds	r3, #8
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	4611      	mov	r1, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7fd fd96 	bl	8009758 <lfs_pair_cmp>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d12f      	bne.n	800bc92 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bc32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc36:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	d12a      	bne.n	800bc92 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bc3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d023      	beq.n	800bc92 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800bc4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d91b      	bls.n	800bc92 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800bc5a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f000 ffbe 	bl	800cbe0 <lfs_file_outline>
 800bc64:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800bc68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <lfs_dir_commit+0x7e>
                return err;
 800bc70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc74:	e36e      	b.n	800c354 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800bc76:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 ffd2 	bl	800cc24 <lfs_file_flush>
 800bc80:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800bc84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d002      	beq.n	800bc92 <lfs_dir_commit+0x9a>
                return err;
 800bc8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc90:	e360      	b.n	800c354 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800bc92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d1b5      	bne.n	800bc10 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bcaa:	461d      	mov	r5, r3
 800bcac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bcae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bcb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800bcb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcc4:	e075      	b.n	800bdb2 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800bcc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	4413      	add	r3, r2
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fd fdfc 	bl	80098d0 <lfs_tag_type3>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	461a      	mov	r2, r3
 800bcdc:	f240 4301 	movw	r3, #1025	; 0x401
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d106      	bne.n	800bcf2 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	8a9b      	ldrh	r3, [r3, #20]
 800bce8:	3301      	adds	r3, #1
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	829a      	strh	r2, [r3, #20]
 800bcf0:	e05a      	b.n	800bda8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800bcf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bcf6:	00db      	lsls	r3, r3, #3
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7fd fde6 	bl	80098d0 <lfs_tag_type3>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d114      	bne.n	800bd3a <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	8a9b      	ldrh	r3, [r3, #20]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d106      	bne.n	800bd26 <lfs_dir_commit+0x12e>
 800bd18:	4bac      	ldr	r3, [pc, #688]	; (800bfcc <lfs_dir_commit+0x3d4>)
 800bd1a:	4aad      	ldr	r2, [pc, #692]	; (800bfd0 <lfs_dir_commit+0x3d8>)
 800bd1c:	f240 7141 	movw	r1, #1857	; 0x741
 800bd20:	48ac      	ldr	r0, [pc, #688]	; (800bfd4 <lfs_dir_commit+0x3dc>)
 800bd22:	f012 fe03 	bl	801e92c <__assert_func>
            dir->count -= 1;
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	8a9b      	ldrh	r3, [r3, #20]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800bd32:	2301      	movs	r3, #1
 800bd34:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800bd38:	e036      	b.n	800bda8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800bd3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	4413      	add	r3, r2
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f7fd fdb2 	bl	80098b0 <lfs_tag_type1>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800bd52:	d129      	bne.n	800bda8 <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800bd54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd58:	00db      	lsls	r3, r3, #3
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800bd66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	687a      	ldr	r2, [r7, #4]
 800bd6e:	4413      	add	r3, r2
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	685a      	ldr	r2, [r3, #4]
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800bd78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fd fdb3 	bl	80098f0 <lfs_tag_chunk>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f003 0301 	and.w	r3, r3, #1
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bf14      	ite	ne
 800bd94:	2301      	movne	r3, #1
 800bd96:	2300      	moveq	r3, #0
 800bd98:	b2da      	uxtb	r2, r3
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3318      	adds	r3, #24
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fd fd2f 	bl	8009806 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800bda8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdac:	3301      	adds	r3, #1
 800bdae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	db84      	blt.n	800bcc6 <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800bdbc:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d045      	beq.n	800be50 <lfs_dir_commit+0x258>
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	8a9b      	ldrh	r3, [r3, #20]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d141      	bne.n	800be50 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f107 0214 	add.w	r2, r7, #20
 800bdd2:	4619      	mov	r1, r3
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f001 ffab 	bl	800dd30 <lfs_fs_pred>
 800bdda:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800bdde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d011      	beq.n	800be0a <lfs_dir_commit+0x212>
 800bde6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bdea:	f113 0f02 	cmn.w	r3, #2
 800bdee:	d00c      	beq.n	800be0a <lfs_dir_commit+0x212>
            *dir = olddir;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	461d      	mov	r5, r3
 800bdf4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bdf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bdfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bdfc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800be04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be08:	e2a4      	b.n	800c354 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800be0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be0e:	f113 0f02 	cmn.w	r3, #2
 800be12:	d01d      	beq.n	800be50 <lfs_dir_commit+0x258>
 800be14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d019      	beq.n	800be50 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800be1c:	f107 0314 	add.w	r3, r7, #20
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	4619      	mov	r1, r3
 800be24:	68f8      	ldr	r0, [r7, #12]
 800be26:	f7ff fb11 	bl	800b44c <lfs_dir_drop>
 800be2a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800be2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00c      	beq.n	800be50 <lfs_dir_commit+0x258>
                *dir = olddir;
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	461d      	mov	r5, r3
 800be3a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800be3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800be42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800be46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800be4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be4e:	e281      	b.n	800c354 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	7d9b      	ldrb	r3, [r3, #22]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d104      	bne.n	800be62 <lfs_dir_commit+0x26a>
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	8a9b      	ldrh	r3, [r3, #20]
 800be5c:	2bfe      	cmp	r3, #254	; 0xfe
 800be5e:	f240 8130 	bls.w	800c0c2 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800be66:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800be6c:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800be72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be78:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800be7e:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <lfs_dir_commit+0x29c>
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be90:	3b08      	subs	r3, #8
 800be92:	e003      	b.n	800be9c <lfs_dir_commit+0x2a4>
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be9a:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800be9c:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	3318      	adds	r3, #24
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7fd fcc9 	bl	800983a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800beb8:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800beba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800bebe:	9308      	str	r3, [sp, #32]
 800bec0:	4b45      	ldr	r3, [pc, #276]	; (800bfd8 <lfs_dir_commit+0x3e0>)
 800bec2:	9307      	str	r3, [sp, #28]
 800bec4:	2300      	movs	r3, #0
 800bec6:	9306      	str	r3, [sp, #24]
 800bec8:	2300      	movs	r3, #0
 800beca:	9305      	str	r3, [sp, #20]
 800becc:	2300      	movs	r3, #0
 800bece:	9304      	str	r3, [sp, #16]
 800bed0:	2300      	movs	r3, #0
 800bed2:	9303      	str	r3, [sp, #12]
 800bed4:	2300      	movs	r3, #0
 800bed6:	9302      	str	r3, [sp, #8]
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	460b      	mov	r3, r1
 800bee2:	68b9      	ldr	r1, [r7, #8]
 800bee4:	68f8      	ldr	r0, [r7, #12]
 800bee6:	f7fe f9ef 	bl	800a2c8 <lfs_dir_traverse>
 800beea:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fd fc87 	bl	8009806 <lfs_pair_fromle32>
        if (err) {
 800bef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800befc:	2b00      	cmp	r3, #0
 800befe:	d018      	beq.n	800bf32 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800bf00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf04:	f113 0f1c 	cmn.w	r3, #28
 800bf08:	f000 80dd 	beq.w	800c0c6 <lfs_dir_commit+0x4ce>
 800bf0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf10:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bf14:	f000 80d7 	beq.w	800c0c6 <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	461d      	mov	r5, r3
 800bf1c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bf20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bf22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bf24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bf28:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800bf2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf30:	e210      	b.n	800c354 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800bf32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	605a      	str	r2, [r3, #4]
 800bf3c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bf44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf48:	4611      	mov	r1, r2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fd fd1b 	bl	8009986 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bf56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf5a:	4611      	mov	r1, r2
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7fd fd12 	bl	8009986 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800bf68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf6c:	4611      	mov	r1, r2
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7fd fd09 	bl	8009986 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800bf74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bf7a:	f023 0303 	bic.w	r3, r3, #3
 800bf7e:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800bf80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7fd fd23 	bl	80099d0 <lfs_gstate_iszero>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	f083 0301 	eor.w	r3, r3, #1
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d04c      	beq.n	800c030 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800bf96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	68b9      	ldr	r1, [r7, #8]
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	f7fe fe72 	bl	800ac88 <lfs_dir_getgstate>
 800bfa4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800bfa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d015      	beq.n	800bfdc <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	461d      	mov	r5, r3
 800bfb4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800bfb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bfbc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800bfc0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800bfc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfc8:	e1c4      	b.n	800c354 <lfs_dir_commit+0x75c>
 800bfca:	bf00      	nop
 800bfcc:	08020514 	.word	0x08020514
 800bfd0:	080245c8 	.word	0x080245c8
 800bfd4:	080202c8 	.word	0x080202c8
 800bfd8:	0800b59f 	.word	0x0800b59f
            }

            lfs_gstate_tole32(&delta);
 800bfdc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7fd fd87 	bl	8009af4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800bfe6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800bfea:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800bfee:	4aba      	ldr	r2, [pc, #744]	; (800c2d8 <lfs_dir_commit+0x6e0>)
 800bff0:	68f8      	ldr	r0, [r7, #12]
 800bff2:	f7fe fff5 	bl	800afe0 <lfs_dir_commitattr>
 800bff6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800bffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d016      	beq.n	800c030 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c002:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c006:	f113 0f1c 	cmn.w	r3, #28
 800c00a:	d05e      	beq.n	800c0ca <lfs_dir_commit+0x4d2>
 800c00c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c010:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c014:	d059      	beq.n	800c0ca <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	461d      	mov	r5, r3
 800c01a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c01e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c022:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c026:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800c02a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c02e:	e191      	b.n	800c354 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800c030:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800c034:	4619      	mov	r1, r3
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff f852 	bl	800b0e0 <lfs_dir_commitcrc>
 800c03c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800c040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c044:	2b00      	cmp	r3, #0
 800c046:	d016      	beq.n	800c076 <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800c048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c04c:	f113 0f1c 	cmn.w	r3, #28
 800c050:	d03d      	beq.n	800c0ce <lfs_dir_commit+0x4d6>
 800c052:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c056:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c05a:	d038      	beq.n	800c0ce <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	461d      	mov	r5, r3
 800c060:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c068:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c06c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c074:	e16e      	b.n	800c354 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800c076:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c07c:	6a12      	ldr	r2, [r2, #32]
 800c07e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c082:	fb01 f202 	mul.w	r2, r1, r2
 800c086:	1a9b      	subs	r3, r3, r2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d006      	beq.n	800c09a <lfs_dir_commit+0x4a2>
 800c08c:	4b93      	ldr	r3, [pc, #588]	; (800c2dc <lfs_dir_commit+0x6e4>)
 800c08e:	4a94      	ldr	r2, [pc, #592]	; (800c2e0 <lfs_dir_commit+0x6e8>)
 800c090:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800c094:	4893      	ldr	r0, [pc, #588]	; (800c2e4 <lfs_dir_commit+0x6ec>)
 800c096:	f012 fc49 	bl	801e92c <__assert_func>
        dir->off = commit.off;
 800c09a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800c0a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	333c      	adds	r3, #60	; 0x3c
 800c0ac:	3230      	adds	r2, #48	; 0x30
 800c0ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	3348      	adds	r3, #72	; 0x48
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
 800c0bc:	605a      	str	r2, [r3, #4]
 800c0be:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800c0c0:	e02c      	b.n	800c11c <lfs_dir_commit+0x524>
    } else {
compact:
 800c0c2:	bf00      	nop
 800c0c4:	e004      	b.n	800c0d0 <lfs_dir_commit+0x4d8>
                goto compact;
 800c0c6:	bf00      	nop
 800c0c8:	e002      	b.n	800c0d0 <lfs_dir_commit+0x4d8>
                    goto compact;
 800c0ca:	bf00      	nop
 800c0cc:	e000      	b.n	800c0d0 <lfs_dir_commit+0x4d8>
                goto compact;
 800c0ce:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	3310      	adds	r3, #16
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7fc ffc6 	bl	8009068 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	8a9b      	ldrh	r3, [r3, #20]
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	9300      	str	r3, [sp, #0]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	68b9      	ldr	r1, [r7, #8]
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7ff fa69 	bl	800b5c8 <lfs_dir_compact>
 800c0f6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800c0fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d00c      	beq.n	800c11c <lfs_dir_commit+0x524>
            *dir = olddir;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	461d      	mov	r5, r3
 800c106:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c10a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c10c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c10e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c112:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800c116:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c11a:	e11b      	b.n	800c354 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c120:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c124:	e0c1      	b.n	800c2aa <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c12a:	3308      	adds	r3, #8
 800c12c:	68ba      	ldr	r2, [r7, #8]
 800c12e:	429a      	cmp	r2, r3
 800c130:	f000 80b6 	beq.w	800c2a0 <lfs_dir_commit+0x6a8>
 800c134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c138:	3308      	adds	r3, #8
 800c13a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7fd fb09 	bl	8009758 <lfs_pair_cmp>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f040 80a9 	bne.w	800c2a0 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800c14e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	f103 0408 	add.w	r4, r3, #8
 800c158:	4615      	mov	r5, r2
 800c15a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c15c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c15e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800c166:	2300      	movs	r3, #0
 800c168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c16c:	e092      	b.n	800c294 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c16e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	4413      	add	r3, r2
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fd fba8 	bl	80098d0 <lfs_tag_type3>
 800c180:	4603      	mov	r3, r0
 800c182:	461a      	mov	r2, r3
 800c184:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c188:	429a      	cmp	r2, r3
 800c18a:	d119      	bne.n	800c1c0 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800c18c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c190:	889c      	ldrh	r4, [r3, #4]
 800c192:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	4413      	add	r3, r2
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fd fbc0 	bl	8009924 <lfs_tag_id>
 800c1a4:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c1a6:	429c      	cmp	r4, r3
 800c1a8:	d10a      	bne.n	800c1c0 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800c1aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1b2:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800c1b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1bc:	60da      	str	r2, [r3, #12]
 800c1be:	e064      	b.n	800c28a <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c1c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fd fb7f 	bl	80098d0 <lfs_tag_type3>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	d123      	bne.n	800c226 <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800c1de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1e2:	889c      	ldrh	r4, [r3, #4]
 800c1e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1e8:	00db      	lsls	r3, r3, #3
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7fd fb97 	bl	8009924 <lfs_tag_id>
 800c1f6:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	d914      	bls.n	800c226 <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800c1fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c200:	889b      	ldrh	r3, [r3, #4]
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c20a:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c20c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c210:	799b      	ldrb	r3, [r3, #6]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d139      	bne.n	800c28a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800c216:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c21c:	1e5a      	subs	r2, r3, #1
 800c21e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800c224:	e031      	b.n	800c28a <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c22a:	00db      	lsls	r3, r3, #3
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	4413      	add	r3, r2
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4618      	mov	r0, r3
 800c234:	f7fd fb4c 	bl	80098d0 <lfs_tag_type3>
 800c238:	4603      	mov	r3, r0
 800c23a:	461a      	mov	r2, r3
 800c23c:	f240 4301 	movw	r3, #1025	; 0x401
 800c240:	429a      	cmp	r2, r3
 800c242:	d122      	bne.n	800c28a <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800c244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c248:	889c      	ldrh	r4, [r3, #4]
 800c24a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c24e:	00db      	lsls	r3, r3, #3
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	4413      	add	r3, r2
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4618      	mov	r0, r3
 800c258:	f7fd fb64 	bl	8009924 <lfs_tag_id>
 800c25c:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800c25e:	429c      	cmp	r4, r3
 800c260:	d313      	bcc.n	800c28a <lfs_dir_commit+0x692>
                    d->id += 1;
 800c262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c266:	889b      	ldrh	r3, [r3, #4]
 800c268:	3301      	adds	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c270:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800c272:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c276:	799b      	ldrb	r3, [r3, #6]
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d106      	bne.n	800c28a <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800c27c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c282:	1c5a      	adds	r2, r3, #1
 800c284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c288:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800c28a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c28e:	3301      	adds	r3, #1
 800c290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c294:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	f6ff af67 	blt.w	800c16e <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c2a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f47f af39 	bne.w	800c126 <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c2bc:	e045      	b.n	800c34a <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800c2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800c2c8:	4611      	mov	r1, r2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fd fa44 	bl	8009758 <lfs_pair_cmp>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d134      	bne.n	800c340 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800c2d6:	e026      	b.n	800c326 <lfs_dir_commit+0x72e>
 800c2d8:	7ffffc0c 	.word	0x7ffffc0c
 800c2dc:	08020454 	.word	0x08020454
 800c2e0:	080245c8 	.word	0x080245c8
 800c2e4:	080202c8 	.word	0x080202c8
                // we split and id is on tail now
                d->id -= d->m.count;
 800c2e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2ec:	889a      	ldrh	r2, [r3, #4]
 800c2ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2f2:	8b9b      	ldrh	r3, [r3, #28]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	b29a      	uxth	r2, r3
 800c2f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2fc:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800c2fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c302:	f103 0108 	add.w	r1, r3, #8
 800c306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c30a:	3320      	adds	r3, #32
 800c30c:	461a      	mov	r2, r3
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f7fe fc9e 	bl	800ac50 <lfs_dir_fetch>
 800c314:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800c318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d002      	beq.n	800c326 <lfs_dir_commit+0x72e>
                    return err;
 800c320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c324:	e016      	b.n	800c354 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800c326:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c32a:	889a      	ldrh	r2, [r3, #4]
 800c32c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c330:	8b9b      	ldrh	r3, [r3, #28]
 800c332:	429a      	cmp	r2, r3
 800c334:	d304      	bcc.n	800c340 <lfs_dir_commit+0x748>
 800c336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c33a:	7fdb      	ldrb	r3, [r3, #31]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1d3      	bne.n	800c2e8 <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800c340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c34a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1b5      	bne.n	800c2be <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	37b8      	adds	r7, #184	; 0xb8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bdb0      	pop	{r4, r5, r7, pc}

0800c35c <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800c35c:	b5b0      	push	{r4, r5, r7, lr}
 800c35e:	b0b8      	sub	sp, #224	; 0xe0
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f002 f90c 	bl	800e584 <lfs_fs_forceconsistency>
 800c36c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <lfs_rawmkdir+0x22>
        return err;
 800c378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c37c:	e128      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c382:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800c386:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800c38a:	463a      	mov	r2, r7
 800c38c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c390:	f103 0108 	add.w	r1, r3, #8
 800c394:	4603      	mov	r3, r0
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7fe fcf2 	bl	800ad80 <lfs_dir_find>
 800c39c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800c3a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3a4:	f113 0f02 	cmn.w	r3, #2
 800c3a8:	d105      	bne.n	800c3b6 <lfs_rawmkdir+0x5a>
 800c3aa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c3ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d109      	bne.n	800c3ca <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800c3b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	da02      	bge.n	800c3c4 <lfs_rawmkdir+0x68>
 800c3be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3c2:	e105      	b.n	800c5d0 <lfs_rawmkdir+0x274>
 800c3c4:	f06f 0310 	mvn.w	r3, #16
 800c3c8:	e102      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7f3 feff 	bl	80001d0 <strlen>
 800c3d2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d902      	bls.n	800c3e8 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800c3e2:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800c3e6:	e0f3      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7fd fc62 	bl	8009cb2 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800c3ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7fe ffaf 	bl	800b358 <lfs_dir_alloc>
 800c3fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800c3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <lfs_rawmkdir+0xb0>
        return err;
 800c406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c40a:	e0e1      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800c40c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800c410:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800c414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800c41c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800c420:	e012      	b.n	800c448 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800c422:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c426:	f103 0218 	add.w	r2, r3, #24
 800c42a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7fe fc0d 	bl	800ac50 <lfs_dir_fetch>
 800c436:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d002      	beq.n	800c448 <lfs_rawmkdir+0xec>
            return err;
 800c442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c446:	e0c3      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800c448:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e8      	bne.n	800c422 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800c450:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c454:	3318      	adds	r3, #24
 800c456:	4618      	mov	r0, r3
 800c458:	f7fd f9ef 	bl	800983a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800c45c:	4b5e      	ldr	r3, [pc, #376]	; (800c5d8 <lfs_rawmkdir+0x27c>)
 800c45e:	667b      	str	r3, [r7, #100]	; 0x64
 800c460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c464:	3318      	adds	r3, #24
 800c466:	66bb      	str	r3, [r7, #104]	; 0x68
 800c468:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800c46c:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800c470:	2301      	movs	r3, #1
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7ff fbc0 	bl	800bbf8 <lfs_dir_commit>
 800c478:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800c47c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800c480:	3318      	adds	r3, #24
 800c482:	4618      	mov	r0, r3
 800c484:	f7fd f9bf 	bl	8009806 <lfs_pair_fromle32>
    if (err) {
 800c488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <lfs_rawmkdir+0x13a>
        return err;
 800c490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c494:	e09c      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800c496:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d04c      	beq.n	800c538 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800c49e:	2101      	movs	r1, #1
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f001 fe8d 	bl	800e1c0 <lfs_fs_preporphans>
 800c4a6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c4aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <lfs_rawmkdir+0x15c>
            return err;
 800c4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4b6:	e08b      	b.n	800c5d0 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800c4ca:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800c4cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fd f9b2 	bl	800983a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800c4d6:	4b40      	ldr	r3, [pc, #256]	; (800c5d8 <lfs_rawmkdir+0x27c>)
 800c4d8:	617b      	str	r3, [r7, #20]
 800c4da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c4de:	61bb      	str	r3, [r7, #24]
 800c4e0:	f107 0214 	add.w	r2, r7, #20
 800c4e4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff fb84 	bl	800bbf8 <lfs_dir_commit>
 800c4f0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800c4f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fd f984 	bl	8009806 <lfs_pair_fromle32>
        if (err) {
 800c4fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c502:	2b00      	cmp	r3, #0
 800c504:	d006      	beq.n	800c514 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800c506:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800c50e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c512:	e05d      	b.n	800c5d0 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800c514:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800c51c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 fe4d 	bl	800e1c0 <lfs_fs_preporphans>
 800c526:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800c52a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <lfs_rawmkdir+0x1dc>
            return err;
 800c532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c536:	e04b      	b.n	800c5d0 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800c538:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fd f97c 	bl	800983a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800c542:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c54c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c550:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c552:	2300      	movs	r3, #0
 800c554:	643b      	str	r3, [r7, #64]	; 0x40
 800c556:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c55a:	029a      	lsls	r2, r3, #10
 800c55c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c560:	4313      	orrs	r3, r2
 800c562:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c566:	647b      	str	r3, [r7, #68]	; 0x44
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c56c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800c570:	029b      	lsls	r3, r3, #10
 800c572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c576:	f043 0308 	orr.w	r3, r3, #8
 800c57a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c57c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c580:	653b      	str	r3, [r7, #80]	; 0x50
 800c582:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800c586:	f083 0301 	eor.w	r3, r3, #1
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <lfs_rawmkdir+0x238>
 800c590:	4b11      	ldr	r3, [pc, #68]	; (800c5d8 <lfs_rawmkdir+0x27c>)
 800c592:	e000      	b.n	800c596 <lfs_rawmkdir+0x23a>
 800c594:	2300      	movs	r3, #0
 800c596:	657b      	str	r3, [r7, #84]	; 0x54
 800c598:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c59c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c59e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800c5a2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800c5a6:	f103 0108 	add.w	r1, r3, #8
 800c5aa:	2304      	movs	r3, #4
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff fb23 	bl	800bbf8 <lfs_dir_commit>
 800c5b2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800c5b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fd f923 	bl	8009806 <lfs_pair_fromle32>
    if (err) {
 800c5c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d002      	beq.n	800c5ce <lfs_rawmkdir+0x272>
        return err;
 800c5c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5cc:	e000      	b.n	800c5d0 <lfs_rawmkdir+0x274>
    }

    return 0;
 800c5ce:	2300      	movs	r3, #0
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	37e0      	adds	r7, #224	; 0xe0
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c5d8:	600ffc08 	.word	0x600ffc08

0800c5dc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5f2:	3b08      	subs	r3, #8
 800c5f4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800c5f6:	697a      	ldr	r2, [r7, #20]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5fe:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d101      	bne.n	800c60a <lfs_ctz_index+0x2e>
        return 0;
 800c606:	2300      	movs	r3, #0
 800c608:	e01c      	b.n	800c644 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fc fcca 	bl	8008fa8 <lfs_popc>
 800c614:	4603      	mov	r3, r0
 800c616:	3302      	adds	r3, #2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	1ad2      	subs	r2, r2, r3
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	fbb2 f3f3 	udiv	r3, r2, r3
 800c624:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
 800c62e:	697a      	ldr	r2, [r7, #20]
 800c630:	1ad4      	subs	r4, r2, r3
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7fc fcb8 	bl	8008fa8 <lfs_popc>
 800c638:	4603      	mov	r3, r0
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	1ae2      	subs	r2, r4, r3
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	601a      	str	r2, [r3, #0]
    return i;
 800c642:	68fb      	ldr	r3, [r7, #12]
}
 800c644:	4618      	mov	r0, r3
 800c646:	371c      	adds	r7, #28
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd90      	pop	{r4, r7, pc}

0800c64c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800c64c:	b590      	push	{r4, r7, lr}
 800c64e:	b08f      	sub	sp, #60	; 0x3c
 800c650:	af04      	add	r7, sp, #16
 800c652:	60f8      	str	r0, [r7, #12]
 800c654:	60b9      	str	r1, [r7, #8]
 800c656:	607a      	str	r2, [r7, #4]
 800c658:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800c65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d108      	bne.n	800c672 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800c660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c662:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c666:	601a      	str	r2, [r3, #0]
        *off = 0;
 800c668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c66a:	2200      	movs	r2, #0
 800c66c:	601a      	str	r2, [r3, #0]
        return 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	e053      	b.n	800c71a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800c672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c674:	3b01      	subs	r3, #1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	f107 0314 	add.w	r3, r7, #20
 800c67c:	4619      	mov	r1, r3
 800c67e:	68f8      	ldr	r0, [r7, #12]
 800c680:	f7ff ffac 	bl	800c5dc <lfs_ctz_index>
 800c684:	4603      	mov	r3, r0
 800c686:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800c688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800c68c:	4619      	mov	r1, r3
 800c68e:	68f8      	ldr	r0, [r7, #12]
 800c690:	f7ff ffa4 	bl	800c5dc <lfs_ctz_index>
 800c694:	4603      	mov	r3, r0
 800c696:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800c698:	e034      	b.n	800c704 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800c69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	1ad3      	subs	r3, r2, r3
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fc fc61 	bl	8008f6a <lfs_npw2>
 800c6a8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800c6aa:	1e5c      	subs	r4, r3, #1
 800c6ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c6ae:	f7fc fc6c 	bl	8008f8a <lfs_ctz>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7fc fc20 	bl	8008efc <lfs_min>
 800c6bc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	0092      	lsls	r2, r2, #2
 800c6c4:	2104      	movs	r1, #4
 800c6c6:	9103      	str	r1, [sp, #12]
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	9102      	str	r1, [sp, #8]
 800c6cc:	9201      	str	r2, [sp, #4]
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	2304      	movs	r3, #4
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	68b9      	ldr	r1, [r7, #8]
 800c6d6:	68f8      	ldr	r0, [r7, #12]
 800c6d8:	f7fc fcec 	bl	80090b4 <lfs_bd_read>
 800c6dc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7fc fc7b 	bl	8008fdc <lfs_fromle32>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	603b      	str	r3, [r7, #0]
        if (err) {
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <lfs_ctz_find+0xa8>
            return err;
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	e012      	b.n	800c71a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	69fb      	ldr	r3, [r7, #28]
 800c6f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c6fc:	461a      	mov	r2, r3
 800c6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c700:	1a9b      	subs	r3, r3, r2
 800c702:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800c704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c706:	6a3b      	ldr	r3, [r7, #32]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d8c6      	bhi.n	800c69a <lfs_ctz_find+0x4e>
    }

    *block = head;
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c710:	601a      	str	r2, [r3, #0]
    *off = pos;
 800c712:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c716:	601a      	str	r2, [r3, #0]
    return 0;
 800c718:	2300      	movs	r3, #0
}
 800c71a:	4618      	mov	r0, r3
 800c71c:	372c      	adds	r7, #44	; 0x2c
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd90      	pop	{r4, r7, pc}
	...

0800c724 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800c724:	b580      	push	{r7, lr}
 800c726:	b092      	sub	sp, #72	; 0x48
 800c728:	af04      	add	r7, sp, #16
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800c732:	f107 0320 	add.w	r3, r7, #32
 800c736:	4619      	mov	r1, r3
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f7fd fadb 	bl	8009cf4 <lfs_alloc>
 800c73e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800c740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c742:	2b00      	cmp	r3, #0
 800c744:	d001      	beq.n	800c74a <lfs_ctz_extend+0x26>
            return err;
 800c746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c748:	e0e9      	b.n	800c91e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	4619      	mov	r1, r3
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f7fc ffa2 	bl	8009698 <lfs_bd_erase>
 800c754:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d006      	beq.n	800c76a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c762:	f000 80cb 	beq.w	800c8fc <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800c766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c768:	e0d9      	b.n	800c91e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800c76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d107      	bne.n	800c780 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800c770:	6a3a      	ldr	r2, [r7, #32]
 800c772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c774:	601a      	str	r2, [r3, #0]
                *off = 0;
 800c776:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
                return 0;
 800c77c:	2300      	movs	r3, #0
 800c77e:	e0ce      	b.n	800c91e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800c780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c782:	3b01      	subs	r3, #1
 800c784:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800c786:	f107 031c 	add.w	r3, r7, #28
 800c78a:	4619      	mov	r1, r3
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f7ff ff25 	bl	800c5dc <lfs_ctz_index>
 800c792:	4603      	mov	r3, r0
 800c794:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800c796:	69fb      	ldr	r3, [r7, #28]
 800c798:	3301      	adds	r3, #1
 800c79a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d044      	beq.n	800c832 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ac:	e035      	b.n	800c81a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800c7ae:	69fa      	ldr	r2, [r7, #28]
 800c7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b2:	1ad2      	subs	r2, r2, r3
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	9303      	str	r3, [sp, #12]
 800c7b8:	f107 0317 	add.w	r3, r7, #23
 800c7bc:	9302      	str	r3, [sp, #8]
 800c7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c0:	9301      	str	r3, [sp, #4]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	2100      	movs	r1, #0
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f7fc fc71 	bl	80090b4 <lfs_bd_read>
 800c7d2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <lfs_ctz_extend+0xba>
                        return err;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	e09f      	b.n	800c91e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800c7de:	6a3b      	ldr	r3, [r7, #32]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	9203      	str	r2, [sp, #12]
 800c7e4:	f107 0217 	add.w	r2, r7, #23
 800c7e8:	9202      	str	r2, [sp, #8]
 800c7ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ec:	9201      	str	r2, [sp, #4]
 800c7ee:	9300      	str	r3, [sp, #0]
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	68b9      	ldr	r1, [r7, #8]
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7fc fea2 	bl	8009540 <lfs_bd_prog>
 800c7fc:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800c7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c800:	2b00      	cmp	r3, #0
 800c802:	d007      	beq.n	800c814 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c80a:	d101      	bne.n	800c810 <lfs_ctz_extend+0xec>
                            goto relocate;
 800c80c:	bf00      	nop
                    goto relocate;
 800c80e:	e075      	b.n	800c8fc <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800c812:	e084      	b.n	800c91e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800c814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c816:	3301      	adds	r3, #1
 800c818:	637b      	str	r3, [r7, #52]	; 0x34
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c81e:	429a      	cmp	r2, r3
 800c820:	d3c5      	bcc.n	800c7ae <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800c822:	6a3a      	ldr	r2, [r7, #32]
 800c824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c826:	601a      	str	r2, [r3, #0]
                *off = noff;
 800c828:	69fa      	ldr	r2, [r7, #28]
 800c82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c82c:	601a      	str	r2, [r3, #0]
                return 0;
 800c82e:	2300      	movs	r3, #0
 800c830:	e075      	b.n	800c91e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800c832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c834:	3301      	adds	r3, #1
 800c836:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800c838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c83a:	f7fc fba6 	bl	8008f8a <lfs_ctz>
 800c83e:	4603      	mov	r3, r0
 800c840:	3301      	adds	r3, #1
 800c842:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800c848:	2300      	movs	r3, #0
 800c84a:	633b      	str	r3, [r7, #48]	; 0x30
 800c84c:	e049      	b.n	800c8e2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	4618      	mov	r0, r3
 800c852:	f7fc fbce 	bl	8008ff2 <lfs_tole32>
 800c856:	4603      	mov	r3, r0
 800c858:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	2104      	movs	r1, #4
 800c862:	9103      	str	r1, [sp, #12]
 800c864:	f107 0118 	add.w	r1, r7, #24
 800c868:	9102      	str	r1, [sp, #8]
 800c86a:	9201      	str	r2, [sp, #4]
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	2301      	movs	r3, #1
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	68b9      	ldr	r1, [r7, #8]
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7fc fe63 	bl	8009540 <lfs_bd_prog>
 800c87a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800c87c:	69bb      	ldr	r3, [r7, #24]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fc fbac 	bl	8008fdc <lfs_fromle32>
 800c884:	4603      	mov	r3, r0
 800c886:	61bb      	str	r3, [r7, #24]
                if (err) {
 800c888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800c88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c890:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c894:	d034      	beq.n	800c900 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	e041      	b.n	800c91e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	3b01      	subs	r3, #1
 800c89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d01b      	beq.n	800c8dc <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8a8:	0092      	lsls	r2, r2, #2
 800c8aa:	2104      	movs	r1, #4
 800c8ac:	9103      	str	r1, [sp, #12]
 800c8ae:	f107 0118 	add.w	r1, r7, #24
 800c8b2:	9102      	str	r1, [sp, #8]
 800c8b4:	9201      	str	r2, [sp, #4]
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	2304      	movs	r3, #4
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	2100      	movs	r1, #0
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7fc fbf8 	bl	80090b4 <lfs_bd_read>
 800c8c4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800c8c6:	69bb      	ldr	r3, [r7, #24]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7fc fb87 	bl	8008fdc <lfs_fromle32>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d001      	beq.n	800c8dc <lfs_ctz_extend+0x1b8>
                        return err;
 800c8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8da:	e020      	b.n	800c91e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800c8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8de:	3301      	adds	r3, #1
 800c8e0:	633b      	str	r3, [r7, #48]	; 0x30
 800c8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d3b1      	bcc.n	800c84e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800c8ea:	6a3a      	ldr	r2, [r7, #32]
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ee:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f2:	009a      	lsls	r2, r3, #2
 800c8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8f6:	601a      	str	r2, [r3, #0]
            return 0;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	e010      	b.n	800c91e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800c8fc:	bf00      	nop
 800c8fe:	e000      	b.n	800c902 <lfs_ctz_extend+0x1de>
                        goto relocate;
 800c900:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	4a08      	ldr	r2, [pc, #32]	; (800c928 <lfs_ctz_extend+0x204>)
 800c906:	9200      	str	r2, [sp, #0]
 800c908:	f640 126a 	movw	r2, #2410	; 0x96a
 800c90c:	4907      	ldr	r1, [pc, #28]	; (800c92c <lfs_ctz_extend+0x208>)
 800c90e:	4808      	ldr	r0, [pc, #32]	; (800c930 <lfs_ctz_extend+0x20c>)
 800c910:	f012 fa88 	bl	801ee24 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800c914:	68b9      	ldr	r1, [r7, #8]
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7fc fba6 	bl	8009068 <lfs_cache_drop>
    while (true) {
 800c91c:	e709      	b.n	800c732 <lfs_ctz_extend+0xe>
    }
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3738      	adds	r7, #56	; 0x38
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	080203d4 	.word	0x080203d4
 800c92c:	080202c8 	.word	0x080202c8
 800c930:	0802047c 	.word	0x0802047c

0800c934 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800c934:	b580      	push	{r7, lr}
 800c936:	b090      	sub	sp, #64	; 0x40
 800c938:	af04      	add	r7, sp, #16
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	60b9      	str	r1, [r7, #8]
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	2b00      	cmp	r3, #0
 800c946:	d101      	bne.n	800c94c <lfs_ctz_traverse+0x18>
        return 0;
 800c948:	2300      	movs	r3, #0
 800c94a:	e06b      	b.n	800ca24 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3b01      	subs	r3, #1
 800c950:	61fb      	str	r3, [r7, #28]
 800c952:	f107 031c 	add.w	r3, r7, #28
 800c956:	4619      	mov	r1, r3
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7ff fe3f 	bl	800c5dc <lfs_ctz_index>
 800c95e:	4603      	mov	r3, r0
 800c960:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800c962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c964:	6839      	ldr	r1, [r7, #0]
 800c966:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c968:	4798      	blx	r3
 800c96a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d001      	beq.n	800c976 <lfs_ctz_traverse+0x42>
            return err;
 800c972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c974:	e056      	b.n	800ca24 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800c976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d101      	bne.n	800c980 <lfs_ctz_traverse+0x4c>
            return 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e051      	b.n	800ca24 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	f003 0301 	and.w	r3, r3, #1
 800c986:	f1c3 0302 	rsb	r3, r3, #2
 800c98a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800c98c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800c98e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800c990:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800c992:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800c994:	9303      	str	r3, [sp, #12]
 800c996:	f107 0314 	add.w	r3, r7, #20
 800c99a:	9302      	str	r3, [sp, #8]
 800c99c:	2300      	movs	r3, #0
 800c99e:	9301      	str	r3, [sp, #4]
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	9300      	str	r3, [sp, #0]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	68b9      	ldr	r1, [r7, #8]
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7fc fb82 	bl	80090b4 <lfs_bd_read>
 800c9b0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7fc fb11 	bl	8008fdc <lfs_fromle32>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800c9be:	69bb      	ldr	r3, [r7, #24]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fc fb0b 	bl	8008fdc <lfs_fromle32>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	61bb      	str	r3, [r7, #24]
        if (err) {
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <lfs_ctz_traverse+0xa0>
            return err;
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d2:	e027      	b.n	800ca24 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d8:	e012      	b.n	800ca00 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800c9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9dc:	009b      	lsls	r3, r3, #2
 800c9de:	3330      	adds	r3, #48	; 0x30
 800c9e0:	443b      	add	r3, r7
 800c9e2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800c9ec:	4798      	blx	r3
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <lfs_ctz_traverse+0xc6>
                return err;
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	e014      	b.n	800ca24 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	3301      	adds	r3, #1
 800c9fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	3b01      	subs	r3, #1
 800ca04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca06:	429a      	cmp	r2, r3
 800ca08:	dbe7      	blt.n	800c9da <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800ca0a:	6a3b      	ldr	r3, [r7, #32]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	3330      	adds	r3, #48	; 0x30
 800ca12:	443b      	add	r3, r7
 800ca14:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800ca18:	603b      	str	r3, [r7, #0]
        index -= count;
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800ca22:	e79e      	b.n	800c962 <lfs_ctz_traverse+0x2e>
    }
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3730      	adds	r7, #48	; 0x30
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <lfs_file_relocate>:
    return err;
}


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800ca2c:	b590      	push	{r4, r7, lr}
 800ca2e:	b08d      	sub	sp, #52	; 0x34
 800ca30:	af06      	add	r7, sp, #24
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800ca36:	f107 030c 	add.w	r3, r7, #12
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f7fd f959 	bl	8009cf4 <lfs_alloc>
 800ca42:	6138      	str	r0, [r7, #16]
        if (err) {
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d001      	beq.n	800ca4e <lfs_file_relocate+0x22>
            return err;
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	e0bb      	b.n	800cbc6 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	4619      	mov	r1, r3
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f7fc fe20 	bl	8009698 <lfs_bd_erase>
 800ca58:	6138      	str	r0, [r7, #16]
        if (err) {
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d006      	beq.n	800ca6e <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ca66:	f000 809b 	beq.w	800cba0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	e0ab      	b.n	800cbc6 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800ca6e:	2300      	movs	r3, #0
 800ca70:	617b      	str	r3, [r7, #20]
 800ca72:	e069      	b.n	800cb48 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d027      	beq.n	800cad0 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	f103 0008 	add.w	r0, r3, #8
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	889b      	ldrh	r3, [r3, #4]
 800ca98:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800ca9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caa2:	2101      	movs	r1, #1
 800caa4:	9105      	str	r1, [sp, #20]
 800caa6:	f107 010b 	add.w	r1, r7, #11
 800caaa:	9104      	str	r1, [sp, #16]
 800caac:	6979      	ldr	r1, [r7, #20]
 800caae:	9103      	str	r1, [sp, #12]
 800cab0:	9302      	str	r3, [sp, #8]
 800cab2:	4b47      	ldr	r3, [pc, #284]	; (800cbd0 <lfs_file_relocate+0x1a4>)
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	9200      	str	r2, [sp, #0]
 800cab8:	4623      	mov	r3, r4
 800caba:	2200      	movs	r2, #0
 800cabc:	4601      	mov	r1, r0
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7fd facd 	bl	800a05e <lfs_dir_getread>
 800cac4:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <lfs_file_relocate+0xde>
                    return err;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	e07a      	b.n	800cbc6 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800cad6:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	1ad4      	subs	r4, r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cae4:	2201      	movs	r2, #1
 800cae6:	9203      	str	r2, [sp, #12]
 800cae8:	f107 020b 	add.w	r2, r7, #11
 800caec:	9202      	str	r2, [sp, #8]
 800caee:	697a      	ldr	r2, [r7, #20]
 800caf0:	9201      	str	r2, [sp, #4]
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	4623      	mov	r3, r4
 800caf6:	4602      	mov	r2, r0
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7fc fadb 	bl	80090b4 <lfs_bd_read>
 800cafe:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <lfs_file_relocate+0xde>
                    return err;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	e05d      	b.n	800cbc6 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 0110 	add.w	r1, r3, #16
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2201      	movs	r2, #1
 800cb16:	9203      	str	r2, [sp, #12]
 800cb18:	f107 020b 	add.w	r2, r7, #11
 800cb1c:	9202      	str	r2, [sp, #8]
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	9201      	str	r2, [sp, #4]
 800cb22:	9300      	str	r3, [sp, #0]
 800cb24:	2301      	movs	r3, #1
 800cb26:	4602      	mov	r2, r0
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7fc fd09 	bl	8009540 <lfs_bd_prog>
 800cb2e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800cb36:	693b      	ldr	r3, [r7, #16]
 800cb38:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cb3c:	d032      	beq.n	800cba4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	e041      	b.n	800cbc6 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	3301      	adds	r3, #1
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d390      	bcc.n	800ca74 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	69d9      	ldr	r1, [r3, #28]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb60:	461a      	mov	r2, r3
 800cb62:	f012 fbc4 	bl	801f2ee <memcpy>
        file->cache.block = lfs->pcache.block;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	691a      	ldr	r2, [r3, #16]
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	695a      	ldr	r2, [r3, #20]
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699a      	ldr	r2, [r3, #24]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	3310      	adds	r3, #16
 800cb82:	4619      	mov	r1, r3
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7fc fa7e 	bl	8009086 <lfs_cache_zero>

        file->block = nblock;
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	e012      	b.n	800cbc6 <lfs_file_relocate+0x19a>
                goto relocate;
 800cba0:	bf00      	nop
 800cba2:	e000      	b.n	800cba6 <lfs_file_relocate+0x17a>
                    goto relocate;
 800cba4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	4a0a      	ldr	r2, [pc, #40]	; (800cbd4 <lfs_file_relocate+0x1a8>)
 800cbaa:	9200      	str	r2, [sp, #0]
 800cbac:	f640 229b 	movw	r2, #2715	; 0xa9b
 800cbb0:	4909      	ldr	r1, [pc, #36]	; (800cbd8 <lfs_file_relocate+0x1ac>)
 800cbb2:	480a      	ldr	r0, [pc, #40]	; (800cbdc <lfs_file_relocate+0x1b0>)
 800cbb4:	f012 f936 	bl	801ee24 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3310      	adds	r3, #16
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7fc fa52 	bl	8009068 <lfs_cache_drop>
    while (true) {
 800cbc4:	e737      	b.n	800ca36 <lfs_file_relocate+0xa>
    }
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	371c      	adds	r7, #28
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd90      	pop	{r4, r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	fff7fc00 	.word	0xfff7fc00
 800cbd4:	080203d4 	.word	0x080203d4
 800cbd8:	080202c8 	.word	0x080202c8
 800cbdc:	0802047c 	.word	0x0802047c

0800cbe0 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7fd f85d 	bl	8009cb2 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800cbf8:	6839      	ldr	r1, [r7, #0]
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff ff16 	bl	800ca2c <lfs_file_relocate>
 800cc00:	60f8      	str	r0, [r7, #12]
    if (err) {
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d001      	beq.n	800cc0c <lfs_file_outline+0x2c>
        return err;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	e006      	b.n	800cc1a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800cc18:	2300      	movs	r3, #0
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
	...

0800cc24 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800cc24:	b590      	push	{r4, r7, lr}
 800cc26:	b09f      	sub	sp, #124	; 0x7c
 800cc28:	af02      	add	r7, sp, #8
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d011      	beq.n	800cc5e <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d105      	bne.n	800cc52 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	3340      	adds	r3, #64	; 0x40
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7fc fa0b 	bl	8009068 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc56:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	f000 80a4 	beq.w	800cdb4 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc70:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d176      	bne.n	800cd6c <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800cc7e:	f107 030c 	add.w	r3, r7, #12
 800cc82:	2254      	movs	r2, #84	; 0x54
 800cc84:	2100      	movs	r1, #0
 800cc86:	4618      	mov	r0, r3
 800cc88:	f012 fa22 	bl	801f0d0 <memset>
                .ctz.head = file->ctz.head,
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800cc90:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800cc96:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc98:	2301      	movs	r3, #1
 800cc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800cca0:	643b      	str	r3, [r7, #64]	; 0x40
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800cca8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ccaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7fc f9d8 	bl	8009068 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800ccb8:	e02b      	b.n	800cd12 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 800ccba:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ccbe:	f107 010c 	add.w	r1, r7, #12
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f881 	bl	800cdcc <lfs_file_rawread>
 800ccca:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800cccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	da01      	bge.n	800ccd6 <lfs_file_flush+0xb2>
                    return res;
 800ccd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccd4:	e06f      	b.n	800cdb6 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 800ccd6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800ccda:	2301      	movs	r3, #1
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f000 f968 	bl	800cfb4 <lfs_file_rawwrite>
 800cce4:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800cce6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	da01      	bge.n	800ccf0 <lfs_file_flush+0xcc>
                    return res;
 800ccec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccee:	e062      	b.n	800cdb6 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ccf8:	d00b      	beq.n	800cd12 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800ccfa:	f107 030c 	add.w	r3, r7, #12
 800ccfe:	3340      	adds	r3, #64	; 0x40
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7fc f9b0 	bl	8009068 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7fc f9ab 	bl	8009068 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d3cd      	bcc.n	800ccba <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	2301      	movs	r3, #1
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7fc fb59 	bl	80093e0 <lfs_bd_flush>
 800cd2e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800cd30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d026      	beq.n	800cd84 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800cd36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd38:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cd3c:	d001      	beq.n	800cd42 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800cd3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd40:	e039      	b.n	800cdb6 <lfs_file_flush+0x192>
                        goto relocate;
 800cd42:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd48:	4a1d      	ldr	r2, [pc, #116]	; (800cdc0 <lfs_file_flush+0x19c>)
 800cd4a:	9200      	str	r2, [sp, #0]
 800cd4c:	f640 22ea 	movw	r2, #2794	; 0xaea
 800cd50:	491c      	ldr	r1, [pc, #112]	; (800cdc4 <lfs_file_flush+0x1a0>)
 800cd52:	481d      	ldr	r0, [pc, #116]	; (800cdc8 <lfs_file_flush+0x1a4>)
 800cd54:	f012 f866 	bl	801ee24 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fe66 	bl	800ca2c <lfs_file_relocate>
 800cd60:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800cd62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d0da      	beq.n	800cd1e <lfs_file_flush+0xfa>
                    return err;
 800cd68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd6a:	e024      	b.n	800cdb6 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd74:	4619      	mov	r1, r3
 800cd76:	4610      	mov	r0, r2
 800cd78:	f7fc f8b0 	bl	8008edc <lfs_max>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	635a      	str	r2, [r3, #52]	; 0x34
 800cd82:	e000      	b.n	800cd86 <lfs_file_flush+0x162>
                break;
 800cd84:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdb2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3774      	adds	r7, #116	; 0x74
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd90      	pop	{r4, r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	080203d4 	.word	0x080203d4
 800cdc4:	080202c8 	.word	0x080202c8
 800cdc8:	0802047c 	.word	0x0802047c

0800cdcc <lfs_file_rawread>:
    return 0;
}
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800cdcc:	b5b0      	push	{r4, r5, r7, lr}
 800cdce:	b092      	sub	sp, #72	; 0x48
 800cdd0:	af06      	add	r7, sp, #24
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <lfs_file_rawread+0x28>
 800cde6:	4b6f      	ldr	r3, [pc, #444]	; (800cfa4 <lfs_file_rawread+0x1d8>)
 800cde8:	4a6f      	ldr	r2, [pc, #444]	; (800cfa8 <lfs_file_rawread+0x1dc>)
 800cdea:	f640 3138 	movw	r1, #2872	; 0xb38
 800cdee:	486f      	ldr	r0, [pc, #444]	; (800cfac <lfs_file_rawread+0x1e0>)
 800cdf0:	f011 fd9c 	bl	801e92c <__assert_func>

    uint8_t *data = buffer;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800cdfc:	68bb      	ldr	r3, [r7, #8]
 800cdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d009      	beq.n	800ce1c <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800ce08:	68b9      	ldr	r1, [r7, #8]
 800ce0a:	68f8      	ldr	r0, [r7, #12]
 800ce0c:	f7ff ff0a 	bl	800cc24 <lfs_file_flush>
 800ce10:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <lfs_file_rawread+0x50>
            return err;
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1a:	e0bf      	b.n	800cf9c <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d301      	bcc.n	800ce2c <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	e0b7      	b.n	800cf9c <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	4619      	mov	r1, r3
 800ce38:	6838      	ldr	r0, [r7, #0]
 800ce3a:	f7fc f85f 	bl	8008efc <lfs_min>
 800ce3e:	6038      	str	r0, [r7, #0]
    nsize = size;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 800ce44:	e0a5      	b.n	800cf92 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d006      	beq.n	800ce60 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 800ce52:	68bb      	ldr	r3, [r7, #8]
 800ce54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_READING) ||
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d130      	bne.n	800cec2 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d11c      	bne.n	800cea6 <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	3138      	adds	r1, #56	; 0x38
 800ce82:	68b8      	ldr	r0, [r7, #8]
 800ce84:	303c      	adds	r0, #60	; 0x3c
 800ce86:	9003      	str	r0, [sp, #12]
 800ce88:	9102      	str	r1, [sp, #8]
 800ce8a:	9201      	str	r2, [sp, #4]
 800ce8c:	9300      	str	r3, [sp, #0]
 800ce8e:	462b      	mov	r3, r5
 800ce90:	4622      	mov	r2, r4
 800ce92:	2100      	movs	r1, #0
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f7ff fbd9 	bl	800c64c <lfs_ctz_find>
 800ce9a:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d009      	beq.n	800ceb6 <lfs_file_rawread+0xea>
                    return err;
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	e07a      	b.n	800cf9c <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	f06f 0201 	mvn.w	r2, #1
 800ceac:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	4619      	mov	r1, r3
 800ced0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ced2:	f7fc f813 	bl	8008efc <lfs_min>
 800ced6:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cedc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d026      	beq.n	800cf32 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f103 0408 	add.w	r4, r3, #8
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	889b      	ldrh	r3, [r3, #4]
 800cefa:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800cefc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf04:	68b9      	ldr	r1, [r7, #8]
 800cf06:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800cf08:	69f8      	ldr	r0, [r7, #28]
 800cf0a:	9005      	str	r0, [sp, #20]
 800cf0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0e:	9004      	str	r0, [sp, #16]
 800cf10:	9103      	str	r1, [sp, #12]
 800cf12:	9302      	str	r3, [sp, #8]
 800cf14:	4b26      	ldr	r3, [pc, #152]	; (800cfb0 <lfs_file_rawread+0x1e4>)
 800cf16:	9301      	str	r3, [sp, #4]
 800cf18:	9200      	str	r2, [sp, #0]
 800cf1a:	462b      	mov	r3, r5
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	4621      	mov	r1, r4
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f7fd f89c 	bl	800a05e <lfs_dir_getread>
 800cf26:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 800cf28:	697b      	ldr	r3, [r7, #20]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d01d      	beq.n	800cf6a <lfs_file_rawread+0x19e>
                return err;
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	e034      	b.n	800cf9c <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800cf32:	68bb      	ldr	r3, [r7, #8]
 800cf34:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf46:	69f9      	ldr	r1, [r7, #28]
 800cf48:	9103      	str	r1, [sp, #12]
 800cf4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf4c:	9102      	str	r1, [sp, #8]
 800cf4e:	9201      	str	r2, [sp, #4]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	4623      	mov	r3, r4
 800cf54:	4602      	mov	r2, r0
 800cf56:	2100      	movs	r1, #0
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7fc f8ab 	bl	80090b4 <lfs_bd_read>
 800cf5e:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d001      	beq.n	800cf6a <lfs_file_rawread+0x19e>
                return err;
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	e018      	b.n	800cf9c <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	441a      	add	r2, r3
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	441a      	add	r2, r3
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800cf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	4413      	add	r3, r2
 800cf88:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800cf8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 800cf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f47f af56 	bne.w	800ce46 <lfs_file_rawread+0x7a>
    }

    return size;
 800cf9a:	683b      	ldr	r3, [r7, #0]
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3730      	adds	r7, #48	; 0x30
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bdb0      	pop	{r4, r5, r7, pc}
 800cfa4:	08020524 	.word	0x08020524
 800cfa8:	080245d8 	.word	0x080245d8
 800cfac:	080202c8 	.word	0x080202c8
 800cfb0:	fff7fc00 	.word	0xfff7fc00

0800cfb4 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800cfb4:	b5b0      	push	{r4, r5, r7, lr}
 800cfb6:	b094      	sub	sp, #80	; 0x50
 800cfb8:	af04      	add	r7, sp, #16
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
 800cfc0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d106      	bne.n	800cfdc <lfs_file_rawwrite+0x28>
 800cfce:	4b85      	ldr	r3, [pc, #532]	; (800d1e4 <lfs_file_rawwrite+0x230>)
 800cfd0:	4a85      	ldr	r2, [pc, #532]	; (800d1e8 <lfs_file_rawwrite+0x234>)
 800cfd2:	f640 3182 	movw	r1, #2946	; 0xb82
 800cfd6:	4885      	ldr	r0, [pc, #532]	; (800d1ec <lfs_file_rawwrite+0x238>)
 800cfd8:	f011 fca8 	bl	801e92c <__assert_func>

    const uint8_t *data = buffer;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 800cfe0:	683b      	ldr	r3, [r7, #0]
 800cfe2:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800cff0:	68b9      	ldr	r1, [r7, #8]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff fe16 	bl	800cc24 <lfs_file_flush>
 800cff8:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 800cffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <lfs_file_rawwrite+0x50>
            return err;
 800d000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d002:	e166      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d009      	beq.n	800d024 <lfs_file_rawwrite+0x70>
 800d010:	68bb      	ldr	r3, [r7, #8]
 800d012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d018:	429a      	cmp	r2, r3
 800d01a:	d203      	bcs.n	800d024 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	441a      	add	r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d030:	429a      	cmp	r2, r3
 800d032:	d902      	bls.n	800d03a <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800d034:	f06f 031a 	mvn.w	r3, #26
 800d038:	e14b      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d03e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d042:	2b00      	cmp	r3, #0
 800d044:	d121      	bne.n	800d08a <lfs_file_rawwrite+0xd6>
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04e:	429a      	cmp	r2, r3
 800d050:	d91b      	bls.n	800d08a <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800d060:	e00e      	b.n	800d080 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 800d062:	2300      	movs	r3, #0
 800d064:	75fb      	strb	r3, [r7, #23]
 800d066:	f107 0217 	add.w	r2, r7, #23
 800d06a:	2301      	movs	r3, #1
 800d06c:	68b9      	ldr	r1, [r7, #8]
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f7ff ffa0 	bl	800cfb4 <lfs_file_rawwrite>
 800d074:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800d076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	da01      	bge.n	800d080 <lfs_file_rawwrite+0xcc>
                return res;
 800d07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07e:	e128      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d086:	429a      	cmp	r2, r3
 800d088:	d8eb      	bhi.n	800d062 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d08e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 8112 	beq.w	800d2bc <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09e:	441a      	add	r2, r3
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	f7fb ff18 	bl	8008edc <lfs_max>
 800d0ac:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                (lfs->cfg->metadata_max ?
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800d0c4:	08db      	lsrs	r3, r3, #3
 800d0c6:	e003      	b.n	800d0d0 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            lfs_min(0x3fe, lfs_min(
 800d0ce:	08db      	lsrs	r3, r3, #3
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	4610      	mov	r0, r2
 800d0d4:	f7fb ff12 	bl	8008efc <lfs_min>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	4619      	mov	r1, r3
 800d0dc:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800d0e0:	f7fb ff0c 	bl	8008efc <lfs_min>
 800d0e4:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800d0e6:	429c      	cmp	r4, r3
 800d0e8:	f240 80e8 	bls.w	800d2bc <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800d0ec:	68b9      	ldr	r1, [r7, #8]
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7ff fd76 	bl	800cbe0 <lfs_file_outline>
 800d0f4:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 800d0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80df 	beq.w	800d2bc <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	e0e1      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d116:	2b00      	cmp	r3, #0
 800d118:	d006      	beq.n	800d128 <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 800d124:	429a      	cmp	r2, r3
 800d126:	d171      	bne.n	800d20c <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d15d      	bne.n	800d1f0 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d12d      	bne.n	800d19c <lfs_file_rawwrite+0x1e8>
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d144:	2b00      	cmp	r3, #0
 800d146:	d029      	beq.n	800d19c <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800d156:	68ba      	ldr	r2, [r7, #8]
 800d158:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800d15a:	3a01      	subs	r2, #1
 800d15c:	68b9      	ldr	r1, [r7, #8]
 800d15e:	3138      	adds	r1, #56	; 0x38
 800d160:	68b8      	ldr	r0, [r7, #8]
 800d162:	303c      	adds	r0, #60	; 0x3c
 800d164:	9003      	str	r0, [sp, #12]
 800d166:	9102      	str	r1, [sp, #8]
 800d168:	9201      	str	r2, [sp, #4]
 800d16a:	9300      	str	r3, [sp, #0]
 800d16c:	462b      	mov	r3, r5
 800d16e:	4622      	mov	r2, r4
 800d170:	2100      	movs	r1, #0
 800d172:	68f8      	ldr	r0, [r7, #12]
 800d174:	f7ff fa6a 	bl	800c64c <lfs_ctz_find>
 800d178:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d007      	beq.n	800d190 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d184:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	e0a0      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	3340      	adds	r3, #64	; 0x40
 800d194:	4619      	mov	r1, r3
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7fb ff75 	bl	8009086 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7fc fd88 	bl	8009cb2 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d1a8:	68fc      	ldr	r4, [r7, #12]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	3238      	adds	r2, #56	; 0x38
 800d1b6:	68b9      	ldr	r1, [r7, #8]
 800d1b8:	313c      	adds	r1, #60	; 0x3c
 800d1ba:	9102      	str	r1, [sp, #8]
 800d1bc:	9201      	str	r2, [sp, #4]
 800d1be:	9300      	str	r3, [sp, #0]
 800d1c0:	462b      	mov	r3, r5
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	4601      	mov	r1, r0
 800d1c6:	68f8      	ldr	r0, [r7, #12]
 800d1c8:	f7ff faac 	bl	800c724 <lfs_ctz_extend>
 800d1cc:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d015      	beq.n	800d200 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800d1e0:	6a3b      	ldr	r3, [r7, #32]
 800d1e2:	e076      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
 800d1e4:	08020554 	.word	0x08020554
 800d1e8:	080245ec 	.word	0x080245ec
 800d1ec:	080202c8 	.word	0x080202c8
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	f06f 0201 	mvn.w	r2, #1
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d204:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	4619      	mov	r1, r3
 800d21a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d21c:	f7fb fe6e 	bl	8008efc <lfs_min>
 800d220:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d228:	68fc      	ldr	r4, [r7, #12]
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22e:	68ba      	ldr	r2, [r7, #8]
 800d230:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d232:	69f9      	ldr	r1, [r7, #28]
 800d234:	9103      	str	r1, [sp, #12]
 800d236:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d238:	9102      	str	r1, [sp, #8]
 800d23a:	9201      	str	r2, [sp, #4]
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	2301      	movs	r3, #1
 800d240:	4622      	mov	r2, r4
 800d242:	4601      	mov	r1, r0
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f7fc f97b 	bl	8009540 <lfs_bd_prog>
 800d24a:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01c      	beq.n	800d28c <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d258:	d007      	beq.n	800d26a <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	e033      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 800d26a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800d26c:	68b9      	ldr	r1, [r7, #8]
 800d26e:	68f8      	ldr	r0, [r7, #12]
 800d270:	f7ff fbdc 	bl	800ca2c <lfs_file_relocate>
 800d274:	61b8      	str	r0, [r7, #24]
            if (err) {
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0d2      	beq.n	800d222 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d280:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800d288:	69bb      	ldr	r3, [r7, #24]
 800d28a:	e022      	b.n	800d2d2 <lfs_file_rawwrite+0x31e>
            break;
 800d28c:	bf00      	nop
            }
        }

        file->pos += diff;
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	441a      	add	r2, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800d2a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 800d2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7fc fcfb 	bl	8009cb2 <lfs_alloc_ack>
    while (nsize > 0) {
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f47f af25 	bne.w	800d10e <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 800d2d0:	683b      	ldr	r3, [r7, #0]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3740      	adds	r7, #64	; 0x40
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2da:	bf00      	nop

0800d2dc <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b08c      	sub	sp, #48	; 0x30
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
 800d2e4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	683a      	ldr	r2, [r7, #0]
 800d2ea:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2f4:	69db      	ldr	r3, [r3, #28]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d106      	bne.n	800d308 <lfs_init+0x2c>
 800d2fa:	4b92      	ldr	r3, [pc, #584]	; (800d544 <lfs_init+0x268>)
 800d2fc:	4a92      	ldr	r2, [pc, #584]	; (800d548 <lfs_init+0x26c>)
 800d2fe:	f640 51a4 	movw	r1, #3492	; 0xda4
 800d302:	4892      	ldr	r0, [pc, #584]	; (800d54c <lfs_init+0x270>)
 800d304:	f011 fb12 	bl	801e92c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d30c:	6a1b      	ldr	r3, [r3, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <lfs_init+0x44>
 800d312:	4b8f      	ldr	r3, [pc, #572]	; (800d550 <lfs_init+0x274>)
 800d314:	4a8c      	ldr	r2, [pc, #560]	; (800d548 <lfs_init+0x26c>)
 800d316:	f640 51a5 	movw	r1, #3493	; 0xda5
 800d31a:	488c      	ldr	r0, [pc, #560]	; (800d54c <lfs_init+0x270>)
 800d31c:	f011 fb06 	bl	801e92c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <lfs_init+0x5c>
 800d32a:	4b8a      	ldr	r3, [pc, #552]	; (800d554 <lfs_init+0x278>)
 800d32c:	4a86      	ldr	r2, [pc, #536]	; (800d548 <lfs_init+0x26c>)
 800d32e:	f640 51a6 	movw	r1, #3494	; 0xda6
 800d332:	4886      	ldr	r0, [pc, #536]	; (800d54c <lfs_init+0x270>)
 800d334:	f011 fafa 	bl	801e92c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33e:	687a      	ldr	r2, [r7, #4]
 800d340:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d342:	69d2      	ldr	r2, [r2, #28]
 800d344:	fbb3 f1f2 	udiv	r1, r3, r2
 800d348:	fb01 f202 	mul.w	r2, r1, r2
 800d34c:	1a9b      	subs	r3, r3, r2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d006      	beq.n	800d360 <lfs_init+0x84>
 800d352:	4b81      	ldr	r3, [pc, #516]	; (800d558 <lfs_init+0x27c>)
 800d354:	4a7c      	ldr	r2, [pc, #496]	; (800d548 <lfs_init+0x26c>)
 800d356:	f640 51aa 	movw	r1, #3498	; 0xdaa
 800d35a:	487c      	ldr	r0, [pc, #496]	; (800d54c <lfs_init+0x270>)
 800d35c:	f011 fae6 	bl	801e92c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d36a:	6a12      	ldr	r2, [r2, #32]
 800d36c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d370:	fb01 f202 	mul.w	r2, r1, r2
 800d374:	1a9b      	subs	r3, r3, r2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d006      	beq.n	800d388 <lfs_init+0xac>
 800d37a:	4b78      	ldr	r3, [pc, #480]	; (800d55c <lfs_init+0x280>)
 800d37c:	4a72      	ldr	r2, [pc, #456]	; (800d548 <lfs_init+0x26c>)
 800d37e:	f640 51ab 	movw	r1, #3499	; 0xdab
 800d382:	4872      	ldr	r0, [pc, #456]	; (800d54c <lfs_init+0x270>)
 800d384:	f011 fad2 	bl	801e92c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d392:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d394:	fbb3 f1f2 	udiv	r1, r3, r2
 800d398:	fb01 f202 	mul.w	r2, r1, r2
 800d39c:	1a9b      	subs	r3, r3, r2
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d006      	beq.n	800d3b0 <lfs_init+0xd4>
 800d3a2:	4b6f      	ldr	r3, [pc, #444]	; (800d560 <lfs_init+0x284>)
 800d3a4:	4a68      	ldr	r2, [pc, #416]	; (800d548 <lfs_init+0x26c>)
 800d3a6:	f640 51ac 	movw	r1, #3500	; 0xdac
 800d3aa:	4868      	ldr	r0, [pc, #416]	; (800d54c <lfs_init+0x270>)
 800d3ac:	f011 fabe 	bl	801e92c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b6:	3b08      	subs	r3, #8
 800d3b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fb fdd2 	bl	8008f6a <lfs_npw2>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	009a      	lsls	r2, r3, #2
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d906      	bls.n	800d3e2 <lfs_init+0x106>
 800d3d4:	4b63      	ldr	r3, [pc, #396]	; (800d564 <lfs_init+0x288>)
 800d3d6:	4a5c      	ldr	r2, [pc, #368]	; (800d548 <lfs_init+0x26c>)
 800d3d8:	f640 51af 	movw	r1, #3503	; 0xdaf
 800d3dc:	485b      	ldr	r0, [pc, #364]	; (800d54c <lfs_init+0x270>)
 800d3de:	f011 faa5 	bl	801e92c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d106      	bne.n	800d3fa <lfs_init+0x11e>
 800d3ec:	4b5e      	ldr	r3, [pc, #376]	; (800d568 <lfs_init+0x28c>)
 800d3ee:	4a56      	ldr	r2, [pc, #344]	; (800d548 <lfs_init+0x26c>)
 800d3f0:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800d3f4:	4855      	ldr	r0, [pc, #340]	; (800d54c <lfs_init+0x270>)
 800d3f6:	f011 fa99 	bl	801e92c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	2b00      	cmp	r3, #0
 800d402:	d005      	beq.n	800d410 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60da      	str	r2, [r3, #12]
 800d40e:	e010      	b.n	800d432 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d416:	4618      	mov	r0, r3
 800d418:	f7fb fe0f 	bl	800903a <lfs_malloc>
 800d41c:	4602      	mov	r2, r0
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	68db      	ldr	r3, [r3, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d103      	bne.n	800d432 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800d42a:	f06f 030b 	mvn.w	r3, #11
 800d42e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d430:	e0fd      	b.n	800d62e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d005      	beq.n	800d448 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	61da      	str	r2, [r3, #28]
 800d446:	e010      	b.n	800d46a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fb fdf3 	bl	800903a <lfs_malloc>
 800d454:	4602      	mov	r2, r0
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	69db      	ldr	r3, [r3, #28]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d103      	bne.n	800d46a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800d462:	f06f 030b 	mvn.w	r3, #11
 800d466:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d468:	e0e1      	b.n	800d62e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4619      	mov	r1, r3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f7fb fe09 	bl	8009086 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	3310      	adds	r3, #16
 800d478:	4619      	mov	r1, r3
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f7fb fe03 	bl	8009086 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d486:	2b00      	cmp	r3, #0
 800d488:	d106      	bne.n	800d498 <lfs_init+0x1bc>
 800d48a:	4b38      	ldr	r3, [pc, #224]	; (800d56c <lfs_init+0x290>)
 800d48c:	4a2e      	ldr	r2, [pc, #184]	; (800d548 <lfs_init+0x26c>)
 800d48e:	f640 51d6 	movw	r1, #3542	; 0xdd6
 800d492:	482e      	ldr	r0, [pc, #184]	; (800d54c <lfs_init+0x270>)
 800d494:	f011 fa4a 	bl	801e92c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d49e:	f003 0307 	and.w	r3, r3, #7
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d106      	bne.n	800d4b4 <lfs_init+0x1d8>
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ac:	f003 0303 	and.w	r3, r3, #3
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d006      	beq.n	800d4c2 <lfs_init+0x1e6>
 800d4b4:	4b2e      	ldr	r3, [pc, #184]	; (800d570 <lfs_init+0x294>)
 800d4b6:	4a24      	ldr	r2, [pc, #144]	; (800d548 <lfs_init+0x26c>)
 800d4b8:	f640 51d7 	movw	r1, #3543	; 0xdd7
 800d4bc:	4823      	ldr	r0, [pc, #140]	; (800d54c <lfs_init+0x270>)
 800d4be:	f011 fa35 	bl	801e92c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d005      	beq.n	800d4d8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	665a      	str	r2, [r3, #100]	; 0x64
 800d4d6:	e010      	b.n	800d4fa <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fb fdab 	bl	800903a <lfs_malloc>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d103      	bne.n	800d4fa <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800d4f2:	f06f 030b 	mvn.w	r3, #11
 800d4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800d4f8:	e099      	b.n	800d62e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d500:	2bff      	cmp	r3, #255	; 0xff
 800d502:	d906      	bls.n	800d512 <lfs_init+0x236>
 800d504:	4b1b      	ldr	r3, [pc, #108]	; (800d574 <lfs_init+0x298>)
 800d506:	4a10      	ldr	r2, [pc, #64]	; (800d548 <lfs_init+0x26c>)
 800d508:	f640 51e4 	movw	r1, #3556	; 0xde4
 800d50c:	480f      	ldr	r0, [pc, #60]	; (800d54c <lfs_init+0x270>)
 800d50e:	f011 fa0d 	bl	801e92c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d516:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d102      	bne.n	800d52a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	22ff      	movs	r2, #255	; 0xff
 800d528:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d530:	2b00      	cmp	r3, #0
 800d532:	da23      	bge.n	800d57c <lfs_init+0x2a0>
 800d534:	4b10      	ldr	r3, [pc, #64]	; (800d578 <lfs_init+0x29c>)
 800d536:	4a04      	ldr	r2, [pc, #16]	; (800d548 <lfs_init+0x26c>)
 800d538:	f640 51ea 	movw	r1, #3562	; 0xdea
 800d53c:	4803      	ldr	r0, [pc, #12]	; (800d54c <lfs_init+0x270>)
 800d53e:	f011 f9f5 	bl	801e92c <__assert_func>
 800d542:	bf00      	nop
 800d544:	08020584 	.word	0x08020584
 800d548:	08024600 	.word	0x08024600
 800d54c:	080202c8 	.word	0x080202c8
 800d550:	080205a0 	.word	0x080205a0
 800d554:	080205bc 	.word	0x080205bc
 800d558:	080205d8 	.word	0x080205d8
 800d55c:	08020608 	.word	0x08020608
 800d560:	08020638 	.word	0x08020638
 800d564:	0802066c 	.word	0x0802066c
 800d568:	080206b8 	.word	0x080206b8
 800d56c:	080206d4 	.word	0x080206d4
 800d570:	080206f4 	.word	0x080206f4
 800d574:	08020748 	.word	0x08020748
 800d578:	08020764 	.word	0x08020764
    lfs->file_max = lfs->cfg->file_max;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d103      	bne.n	800d596 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800d594:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d59a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d59c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d906      	bls.n	800d5b2 <lfs_init+0x2d6>
 800d5a4:	4b26      	ldr	r3, [pc, #152]	; (800d640 <lfs_init+0x364>)
 800d5a6:	4a27      	ldr	r2, [pc, #156]	; (800d644 <lfs_init+0x368>)
 800d5a8:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 800d5ac:	4826      	ldr	r0, [pc, #152]	; (800d648 <lfs_init+0x36c>)
 800d5ae:	f011 f9bd 	bl	801e92c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d103      	bne.n	800d5cc <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d5ca:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d906      	bls.n	800d5ea <lfs_init+0x30e>
 800d5dc:	4b1b      	ldr	r3, [pc, #108]	; (800d64c <lfs_init+0x370>)
 800d5de:	4a19      	ldr	r2, [pc, #100]	; (800d644 <lfs_init+0x368>)
 800d5e0:	f640 51f6 	movw	r1, #3574	; 0xdf6
 800d5e4:	4818      	ldr	r0, [pc, #96]	; (800d648 <lfs_init+0x36c>)
 800d5e6:	f011 f9a1 	bl	801e92c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5f8:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2200      	movs	r2, #0
 800d604:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	333c      	adds	r3, #60	; 0x3c
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
 800d60e:	605a      	str	r2, [r3, #4]
 800d610:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	3330      	adds	r3, #48	; 0x30
 800d616:	2200      	movs	r2, #0
 800d618:	601a      	str	r2, [r3, #0]
 800d61a:	605a      	str	r2, [r3, #4]
 800d61c:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3348      	adds	r3, #72	; 0x48
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	605a      	str	r2, [r3, #4]
 800d628:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	e003      	b.n	800d636 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f80e 	bl	800d650 <lfs_deinit>
    return err;
 800d634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d636:	4618      	mov	r0, r3
 800d638:	3730      	adds	r7, #48	; 0x30
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	08020788 	.word	0x08020788
 800d644:	08024600 	.word	0x08024600
 800d648:	080202c8 	.word	0x080202c8
 800d64c:	080207a4 	.word	0x080207a4

0800d650 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d104      	bne.n	800d66c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	4618      	mov	r0, r3
 800d668:	f7fb fcf3 	bl	8009052 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	2b00      	cmp	r3, #0
 800d674:	d104      	bne.n	800d680 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fb fce9 	bl	8009052 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d686:	2b00      	cmp	r3, #0
 800d688:	d104      	bne.n	800d694 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fb fcdf 	bl	8009052 <lfs_free>
    }

    return 0;
 800d694:	2300      	movs	r3, #0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}
	...

0800d6a0 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b0a0      	sub	sp, #128	; 0x80
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
    int err = 0;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800d6ae:	6839      	ldr	r1, [r7, #0]
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f7ff fe13 	bl	800d2dc <lfs_init>
 800d6b6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d6b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <lfs_rawformat+0x22>
            return err;
 800d6be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d6c0:	e082      	b.n	800d7c8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f011 fcfe 	bl	801f0d0 <memset>
        lfs->free.off = 0;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e0:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	f7fb fc06 	bl	8008efc <lfs_min>
 800d6f0:	4602      	mov	r2, r0
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7fc fad8 	bl	8009cb2 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800d702:	f107 030c 	add.w	r3, r7, #12
 800d706:	4619      	mov	r1, r3
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f7fd fe25 	bl	800b358 <lfs_dir_alloc>
 800d70e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d710:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d712:	2b00      	cmp	r3, #0
 800d714:	d14f      	bne.n	800d7b6 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800d716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d71a:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_superblock_t superblock = {
 800d722:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs_superblock_t superblock = {
 800d72a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800d730:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800d736:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800d73c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800d73e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d742:	4618      	mov	r0, r3
 800d744:	f7fc fa46 	bl	8009bd4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800d748:	4b21      	ldr	r3, [pc, #132]	; (800d7d0 <lfs_rawformat+0x130>)
 800d74a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d74c:	2300      	movs	r3, #0
 800d74e:	653b      	str	r3, [r7, #80]	; 0x50
 800d750:	4b20      	ldr	r3, [pc, #128]	; (800d7d4 <lfs_rawformat+0x134>)
 800d752:	657b      	str	r3, [r7, #84]	; 0x54
 800d754:	4b20      	ldr	r3, [pc, #128]	; (800d7d8 <lfs_rawformat+0x138>)
 800d756:	65bb      	str	r3, [r7, #88]	; 0x58
 800d758:	4b20      	ldr	r3, [pc, #128]	; (800d7dc <lfs_rawformat+0x13c>)
 800d75a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d75c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800d760:	663b      	str	r3, [r7, #96]	; 0x60
 800d762:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800d766:	f107 010c 	add.w	r1, r7, #12
 800d76a:	2303      	movs	r3, #3
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f7fe fa43 	bl	800bbf8 <lfs_dir_commit>
 800d772:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800d774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d776:	2b00      	cmp	r3, #0
 800d778:	d11f      	bne.n	800d7ba <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800d77a:	2300      	movs	r3, #0
 800d77c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800d780:	f107 010c 	add.w	r1, r7, #12
 800d784:	2300      	movs	r3, #0
 800d786:	2200      	movs	r2, #0
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7fe fa35 	bl	800bbf8 <lfs_dir_commit>
 800d78e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d790:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d792:	2b00      	cmp	r3, #0
 800d794:	d113      	bne.n	800d7be <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800d796:	2300      	movs	r3, #0
 800d798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d79a:	2301      	movs	r3, #1
 800d79c:	633b      	str	r3, [r7, #48]	; 0x30
 800d79e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d7a2:	f107 030c 	add.w	r3, r7, #12
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7fd fa51 	bl	800ac50 <lfs_dir_fetch>
 800d7ae:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800d7b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	e004      	b.n	800d7c0 <lfs_rawformat+0x120>
            goto cleanup;
 800d7b6:	bf00      	nop
 800d7b8:	e002      	b.n	800d7c0 <lfs_rawformat+0x120>
            goto cleanup;
 800d7ba:	bf00      	nop
 800d7bc:	e000      	b.n	800d7c0 <lfs_rawformat+0x120>
            goto cleanup;
 800d7be:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7ff ff45 	bl	800d650 <lfs_deinit>
    return err;
 800d7c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3780      	adds	r7, #128	; 0x80
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}
 800d7d0:	40100000 	.word	0x40100000
 800d7d4:	0ff00008 	.word	0x0ff00008
 800d7d8:	080207d4 	.word	0x080207d4
 800d7dc:	20100018 	.word	0x20100018

0800d7e0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b09c      	sub	sp, #112	; 0x70
 800d7e4:	af04      	add	r7, sp, #16
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7ff fd75 	bl	800d2dc <lfs_init>
 800d7f2:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800d7f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d001      	beq.n	800d7fe <lfs_rawmount+0x1e>
        return err;
 800d7fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7fc:	e149      	b.n	800da92 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800d7fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d802:	2220      	movs	r2, #32
 800d804:	2100      	movs	r1, #0
 800d806:	4618      	mov	r0, r3
 800d808:	f011 fc62 	bl	801f0d0 <memset>
 800d80c:	2301      	movs	r3, #1
 800d80e:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800d814:	e0dc      	b.n	800d9d0 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81c:	085b      	lsrs	r3, r3, #1
 800d81e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d820:	429a      	cmp	r2, r3
 800d822:	d303      	bcc.n	800d82c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800d824:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d828:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d82a:	e12e      	b.n	800da8a <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 800d82c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d82e:	3301      	adds	r3, #1
 800d830:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	627b      	str	r3, [r7, #36]	; 0x24
 800d836:	4b99      	ldr	r3, [pc, #612]	; (800da9c <lfs_rawmount+0x2bc>)
 800d838:	62bb      	str	r3, [r7, #40]	; 0x28
 800d83a:	2308      	movs	r3, #8
 800d83c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800d83e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d842:	f103 0218 	add.w	r2, r3, #24
 800d846:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d84a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d84e:	9303      	str	r3, [sp, #12]
 800d850:	4b93      	ldr	r3, [pc, #588]	; (800daa0 <lfs_rawmount+0x2c0>)
 800d852:	9302      	str	r3, [sp, #8]
 800d854:	2300      	movs	r3, #0
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	4b92      	ldr	r3, [pc, #584]	; (800daa4 <lfs_rawmount+0x2c4>)
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4b92      	ldr	r3, [pc, #584]	; (800daa8 <lfs_rawmount+0x2c8>)
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f7fc fe8a 	bl	800a578 <lfs_dir_fetchmatch>
 800d864:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800d866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d868:	2b00      	cmp	r3, #0
 800d86a:	da02      	bge.n	800d872 <lfs_rawmount+0x92>
            err = tag;
 800d86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d86e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800d870:	e10b      	b.n	800da8a <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800d872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d874:	2b00      	cmp	r3, #0
 800d876:	f000 809e 	beq.w	800d9b6 <lfs_rawmount+0x1d6>
 800d87a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fc f804 	bl	800988a <lfs_tag_isdelete>
 800d882:	4603      	mov	r3, r0
 800d884:	f083 0301 	eor.w	r3, r3, #1
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 8093 	beq.w	800d9b6 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 800d890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800d896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800d89c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800d8a0:	f107 030c 	add.w	r3, r7, #12
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	4b81      	ldr	r3, [pc, #516]	; (800daac <lfs_rawmount+0x2cc>)
 800d8a8:	4a7f      	ldr	r2, [pc, #508]	; (800daa8 <lfs_rawmount+0x2c8>)
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f7fc fbbc 	bl	800a028 <lfs_dir_get>
 800d8b0:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800d8b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	da02      	bge.n	800d8be <lfs_rawmount+0xde>
                err = tag;
 800d8b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800d8bc:	e0e5      	b.n	800da8a <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 800d8be:	f107 030c 	add.w	r3, r7, #12
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fc f94e 	bl	8009b64 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	0c1b      	lsrs	r3, r3, #16
 800d8cc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800d8d6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800d8da:	2b02      	cmp	r3, #2
 800d8dc:	d103      	bne.n	800d8e6 <lfs_rawmount+0x106>
 800d8de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d011      	beq.n	800d90a <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800d8e6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800d8ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800d8ee:	4970      	ldr	r1, [pc, #448]	; (800dab0 <lfs_rawmount+0x2d0>)
 800d8f0:	9101      	str	r1, [sp, #4]
 800d8f2:	9300      	str	r3, [sp, #0]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	f640 6291 	movw	r2, #3729	; 0xe91
 800d8fa:	496e      	ldr	r1, [pc, #440]	; (800dab4 <lfs_rawmount+0x2d4>)
 800d8fc:	486e      	ldr	r0, [pc, #440]	; (800dab8 <lfs_rawmount+0x2d8>)
 800d8fe:	f011 fa91 	bl	801ee24 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800d902:	f06f 0315 	mvn.w	r3, #21
 800d906:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800d908:	e054      	b.n	800d9b4 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800d90a:	69bb      	ldr	r3, [r7, #24]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d018      	beq.n	800d942 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800d910:	69ba      	ldr	r2, [r7, #24]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d916:	429a      	cmp	r2, r3
 800d918:	d910      	bls.n	800d93c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d920:	4963      	ldr	r1, [pc, #396]	; (800dab0 <lfs_rawmount+0x2d0>)
 800d922:	9101      	str	r1, [sp, #4]
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	4613      	mov	r3, r2
 800d928:	f640 629a 	movw	r2, #3738	; 0xe9a
 800d92c:	4961      	ldr	r1, [pc, #388]	; (800dab4 <lfs_rawmount+0x2d4>)
 800d92e:	4863      	ldr	r0, [pc, #396]	; (800dabc <lfs_rawmount+0x2dc>)
 800d930:	f011 fa78 	bl	801ee24 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800d934:	f06f 0315 	mvn.w	r3, #21
 800d938:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800d93a:	e03b      	b.n	800d9b4 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 800d93c:	69ba      	ldr	r2, [r7, #24]
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800d942:	69fb      	ldr	r3, [r7, #28]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d018      	beq.n	800d97a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800d948:	69fa      	ldr	r2, [r7, #28]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94e:	429a      	cmp	r2, r3
 800d950:	d910      	bls.n	800d974 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800d952:	69fa      	ldr	r2, [r7, #28]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d958:	4955      	ldr	r1, [pc, #340]	; (800dab0 <lfs_rawmount+0x2d0>)
 800d95a:	9101      	str	r1, [sp, #4]
 800d95c:	9300      	str	r3, [sp, #0]
 800d95e:	4613      	mov	r3, r2
 800d960:	f640 62a5 	movw	r2, #3749	; 0xea5
 800d964:	4953      	ldr	r1, [pc, #332]	; (800dab4 <lfs_rawmount+0x2d4>)
 800d966:	4856      	ldr	r0, [pc, #344]	; (800dac0 <lfs_rawmount+0x2e0>)
 800d968:	f011 fa5c 	bl	801ee24 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800d96c:	f06f 0315 	mvn.w	r3, #21
 800d970:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800d972:	e01f      	b.n	800d9b4 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 800d974:	69fa      	ldr	r2, [r7, #28]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d01a      	beq.n	800d9b6 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 800d980:	6a3a      	ldr	r2, [r7, #32]
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d986:	429a      	cmp	r2, r3
 800d988:	d910      	bls.n	800d9ac <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800d98a:	6a3a      	ldr	r2, [r7, #32]
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d990:	4947      	ldr	r1, [pc, #284]	; (800dab0 <lfs_rawmount+0x2d0>)
 800d992:	9101      	str	r1, [sp, #4]
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	4613      	mov	r3, r2
 800d998:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 800d99c:	4945      	ldr	r1, [pc, #276]	; (800dab4 <lfs_rawmount+0x2d4>)
 800d99e:	4849      	ldr	r0, [pc, #292]	; (800dac4 <lfs_rawmount+0x2e4>)
 800d9a0:	f011 fa40 	bl	801ee24 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800d9a4:	f06f 0315 	mvn.w	r3, #21
 800d9a8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800d9aa:	e003      	b.n	800d9b4 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 800d9ac:	6a3a      	ldr	r2, [r7, #32]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	675a      	str	r2, [r3, #116]	; 0x74
 800d9b2:	e000      	b.n	800d9b6 <lfs_rawmount+0x1d6>
            goto cleanup;
 800d9b4:	e069      	b.n	800da8a <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d9bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7fd f960 	bl	800ac88 <lfs_dir_getgstate>
 800d9c8:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800d9ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d15b      	bne.n	800da88 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 800d9d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d9d4:	3318      	adds	r3, #24
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f7fb fea3 	bl	8009722 <lfs_pair_isnull>
 800d9dc:	4603      	mov	r3, r0
 800d9de:	f083 0301 	eor.w	r3, r3, #1
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f47f af16 	bne.w	800d816 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	3320      	adds	r3, #32
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7fb fe97 	bl	8009722 <lfs_pair_isnull>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 800d9fa:	f06f 0315 	mvn.w	r3, #21
 800d9fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800da00:	e043      	b.n	800da8a <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	3330      	adds	r3, #48	; 0x30
 800da06:	4618      	mov	r0, r3
 800da08:	f7fb ffe2 	bl	80099d0 <lfs_gstate_iszero>
 800da0c:	4603      	mov	r3, r0
 800da0e:	f083 0301 	eor.w	r3, r3, #1
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b00      	cmp	r3, #0
 800da16:	d010      	beq.n	800da3a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800da24:	4822      	ldr	r0, [pc, #136]	; (800dab0 <lfs_rawmount+0x2d0>)
 800da26:	9002      	str	r0, [sp, #8]
 800da28:	9201      	str	r2, [sp, #4]
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	460b      	mov	r3, r1
 800da2e:	f640 62c9 	movw	r2, #3785	; 0xec9
 800da32:	4920      	ldr	r1, [pc, #128]	; (800dab4 <lfs_rawmount+0x2d4>)
 800da34:	4824      	ldr	r0, [pc, #144]	; (800dac8 <lfs_rawmount+0x2e8>)
 800da36:	f011 f9f5 	bl	801ee24 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da3e:	4618      	mov	r0, r3
 800da40:	f7fb ff15 	bl	800986e <lfs_tag_isvalid>
 800da44:	4603      	mov	r3, r0
 800da46:	f083 0301 	eor.w	r3, r3, #1
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	461a      	mov	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da52:	441a      	add	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	333c      	adds	r3, #60	; 0x3c
 800da5e:	3230      	adds	r2, #48	; 0x30
 800da60:	ca07      	ldmia	r2, {r0, r1, r2}
 800da62:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800da6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800da70:	fbb3 f1f2 	udiv	r1, r3, r2
 800da74:	fb01 f202 	mul.w	r2, r1, r2
 800da78:	1a9a      	subs	r2, r3, r2
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fc f926 	bl	8009cd0 <lfs_alloc_drop>

    return 0;
 800da84:	2300      	movs	r3, #0
 800da86:	e004      	b.n	800da92 <lfs_rawmount+0x2b2>
            goto cleanup;
 800da88:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 f81e 	bl	800dacc <lfs_rawunmount>
    return err;
 800da90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800da92:	4618      	mov	r0, r3
 800da94:	3760      	adds	r7, #96	; 0x60
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
 800da9a:	bf00      	nop
 800da9c:	080207d4 	.word	0x080207d4
 800daa0:	0800aced 	.word	0x0800aced
 800daa4:	0ff00008 	.word	0x0ff00008
 800daa8:	7ffffc00 	.word	0x7ffffc00
 800daac:	20100018 	.word	0x20100018
 800dab0:	080203d4 	.word	0x080203d4
 800dab4:	080202c8 	.word	0x080202c8
 800dab8:	080207e0 	.word	0x080207e0
 800dabc:	0802080c 	.word	0x0802080c
 800dac0:	08020840 	.word	0x08020840
 800dac4:	08020874 	.word	0x08020874
 800dac8:	080208a8 	.word	0x080208a8

0800dacc <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800dacc:	b580      	push	{r7, lr}
 800dace:	b082      	sub	sp, #8
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fdbb 	bl	800d650 <lfs_deinit>
 800dada:	4603      	mov	r3, r0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}

0800dae4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800dae4:	b590      	push	{r4, r7, lr}
 800dae6:	b09d      	sub	sp, #116	; 0x74
 800dae8:	af04      	add	r7, sp, #16
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800daf2:	f107 0318 	add.w	r3, r7, #24
 800daf6:	2220      	movs	r2, #32
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f011 fae8 	bl	801f0d0 <memset>
 800db00:	2301      	movs	r3, #1
 800db02:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800db04:	2300      	movs	r3, #0
 800db06:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800db08:	e0a7      	b.n	800dc5a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db10:	085b      	lsrs	r3, r3, #1
 800db12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db14:	429a      	cmp	r2, r3
 800db16:	d302      	bcc.n	800db1e <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800db18:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800db1c:	e102      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800db1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db20:	3301      	adds	r3, #1
 800db22:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800db24:	2300      	movs	r3, #0
 800db26:	65bb      	str	r3, [r7, #88]	; 0x58
 800db28:	e013      	b.n	800db52 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800db2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db2c:	3306      	adds	r3, #6
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	3360      	adds	r3, #96	; 0x60
 800db32:	443b      	add	r3, r7
 800db34:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	4611      	mov	r1, r2
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	4798      	blx	r3
 800db40:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800db42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db44:	2b00      	cmp	r3, #0
 800db46:	d001      	beq.n	800db4c <lfs_fs_rawtraverse+0x68>
                return err;
 800db48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4a:	e0eb      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800db4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db4e:	3301      	adds	r3, #1
 800db50:	65bb      	str	r3, [r7, #88]	; 0x58
 800db52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db54:	2b01      	cmp	r3, #1
 800db56:	dde8      	ble.n	800db2a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800db58:	f107 0318 	add.w	r3, r7, #24
 800db5c:	f103 0218 	add.w	r2, r3, #24
 800db60:	f107 0318 	add.w	r3, r7, #24
 800db64:	4619      	mov	r1, r3
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f7fd f872 	bl	800ac50 <lfs_dir_fetch>
 800db6c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800db6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db70:	2b00      	cmp	r3, #0
 800db72:	d001      	beq.n	800db78 <lfs_fs_rawtraverse+0x94>
            return err;
 800db74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db76:	e0d5      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800db78:	2300      	movs	r3, #0
 800db7a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800db7e:	e067      	b.n	800dc50 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800db80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800db84:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800db86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db8a:	f043 0308 	orr.w	r3, r3, #8
 800db8e:	f107 0118 	add.w	r1, r7, #24
 800db92:	f107 0210 	add.w	r2, r7, #16
 800db96:	9200      	str	r2, [sp, #0]
 800db98:	4a64      	ldr	r2, [pc, #400]	; (800dd2c <lfs_fs_rawtraverse+0x248>)
 800db9a:	68f8      	ldr	r0, [r7, #12]
 800db9c:	f7fc fa44 	bl	800a028 <lfs_dir_get>
 800dba0:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800dba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	da05      	bge.n	800dbb4 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800dba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbaa:	f113 0f02 	cmn.w	r3, #2
 800dbae:	d049      	beq.n	800dc44 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800dbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb2:	e0b7      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800dbb4:	f107 0310 	add.w	r3, r7, #16
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7fb ffbb 	bl	8009b34 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800dbbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f7fb fe85 	bl	80098d0 <lfs_tag_type3>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f240 2302 	movw	r3, #514	; 0x202
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d113      	bne.n	800dbfa <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800dbd2:	68f9      	ldr	r1, [r7, #12]
 800dbd4:	6938      	ldr	r0, [r7, #16]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	9202      	str	r2, [sp, #8]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	9201      	str	r2, [sp, #4]
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	460a      	mov	r2, r1
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7fe fea3 	bl	800c934 <lfs_ctz_traverse>
 800dbee:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800dbf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d027      	beq.n	800dc46 <lfs_fs_rawtraverse+0x162>
                    return err;
 800dbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbf8:	e094      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800dbfa:	78fb      	ldrb	r3, [r7, #3]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d022      	beq.n	800dc46 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800dc00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fb fe64 	bl	80098d0 <lfs_tag_type3>
 800dc08:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800dc0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc0e:	d11a      	bne.n	800dc46 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800dc10:	2300      	movs	r3, #0
 800dc12:	653b      	str	r3, [r7, #80]	; 0x50
 800dc14:	e012      	b.n	800dc3c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800dc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	f107 0210 	add.w	r2, r7, #16
 800dc1e:	4413      	add	r3, r2
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	4611      	mov	r1, r2
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	4798      	blx	r3
 800dc2a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800dc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d001      	beq.n	800dc36 <lfs_fs_rawtraverse+0x152>
                        return err;
 800dc32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc34:	e076      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800dc36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc38:	3301      	adds	r3, #1
 800dc3a:	653b      	str	r3, [r7, #80]	; 0x50
 800dc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	dde9      	ble.n	800dc16 <lfs_fs_rawtraverse+0x132>
 800dc42:	e000      	b.n	800dc46 <lfs_fs_rawtraverse+0x162>
                    continue;
 800dc44:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800dc46:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800dc50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dc52:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d392      	bcc.n	800db80 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800dc5a:	f107 0318 	add.w	r3, r7, #24
 800dc5e:	3318      	adds	r3, #24
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7fb fd5e 	bl	8009722 <lfs_pair_isnull>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f083 0301 	eor.w	r3, r3, #1
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f47f af4b 	bne.w	800db0a <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc78:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dc7a:	e04f      	b.n	800dd1c <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800dc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc7e:	799b      	ldrb	r3, [r3, #6]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d147      	bne.n	800dd14 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800dc84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d01d      	beq.n	800dccc <lfs_fs_rawtraverse+0x1e8>
 800dc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d117      	bne.n	800dccc <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800dc9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc9e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dca2:	68f8      	ldr	r0, [r7, #12]
 800dca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dca6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800dca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	9202      	str	r2, [sp, #8]
 800dcb0:	68ba      	ldr	r2, [r7, #8]
 800dcb2:	9201      	str	r2, [sp, #4]
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	4623      	mov	r3, r4
 800dcb8:	4602      	mov	r2, r0
 800dcba:	68f8      	ldr	r0, [r7, #12]
 800dcbc:	f7fe fe3a 	bl	800c934 <lfs_ctz_traverse>
 800dcc0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800dcc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d001      	beq.n	800dccc <lfs_fs_rawtraverse+0x1e8>
                return err;
 800dcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcca:	e02b      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800dccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d01e      	beq.n	800dd16 <lfs_fs_rawtraverse+0x232>
 800dcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d118      	bne.n	800dd16 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800dce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dce6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcee:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800dcf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	9202      	str	r2, [sp, #8]
 800dcf8:	68ba      	ldr	r2, [r7, #8]
 800dcfa:	9201      	str	r2, [sp, #4]
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	4623      	mov	r3, r4
 800dd00:	4602      	mov	r2, r0
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7fe fe16 	bl	800c934 <lfs_ctz_traverse>
 800dd08:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800dd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <lfs_fs_rawtraverse+0x232>
                return err;
 800dd10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd12:	e007      	b.n	800dd24 <lfs_fs_rawtraverse+0x240>
            continue;
 800dd14:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800dd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d1ac      	bne.n	800dc7c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3764      	adds	r7, #100	; 0x64
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	bd90      	pop	{r4, r7, pc}
 800dd2c:	700ffc00 	.word	0x700ffc00

0800dd30 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800dd4c:	e024      	b.n	800dd98 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd54:	085b      	lsrs	r3, r3, #1
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d302      	bcc.n	800dd62 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800dd5c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dd60:	e027      	b.n	800ddb2 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	3301      	adds	r3, #1
 800dd66:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3318      	adds	r3, #24
 800dd6c:	68b9      	ldr	r1, [r7, #8]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fb fcf2 	bl	8009758 <lfs_pair_cmp>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d101      	bne.n	800dd7e <lfs_fs_pred+0x4e>
            return 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	e019      	b.n	800ddb2 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	3318      	adds	r3, #24
 800dd82:	461a      	mov	r2, r3
 800dd84:	6879      	ldr	r1, [r7, #4]
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7fc ff62 	bl	800ac50 <lfs_dir_fetch>
 800dd8c:	6138      	str	r0, [r7, #16]
        if (err) {
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d001      	beq.n	800dd98 <lfs_fs_pred+0x68>
            return err;
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	e00c      	b.n	800ddb2 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	3318      	adds	r3, #24
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fb fcc0 	bl	8009722 <lfs_pair_isnull>
 800dda2:	4603      	mov	r3, r0
 800dda4:	f083 0301 	eor.w	r3, r3, #1
 800dda8:	b2db      	uxtb	r3, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d1cf      	bne.n	800dd4e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800ddae:	f06f 0301 	mvn.w	r3, #1
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3718      	adds	r7, #24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800ddba:	b5b0      	push	{r4, r5, r7, lr}
 800ddbc:	b08e      	sub	sp, #56	; 0x38
 800ddbe:	af04      	add	r7, sp, #16
 800ddc0:	60f8      	str	r0, [r7, #12]
 800ddc2:	60b9      	str	r1, [r7, #8]
 800ddc4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800ddca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800ddd4:	6a3b      	ldr	r3, [r7, #32]
 800ddd6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800ddda:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800dddc:	6a3b      	ldr	r3, [r7, #32]
 800ddde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dde0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
            disk->block, disk->off, &child, sizeof(child));
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	69fa      	ldr	r2, [r7, #28]
 800dde8:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800ddea:	2108      	movs	r1, #8
 800ddec:	9103      	str	r1, [sp, #12]
 800ddee:	f107 0110 	add.w	r1, r7, #16
 800ddf2:	9102      	str	r1, [sp, #8]
 800ddf4:	9201      	str	r2, [sp, #4]
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	462b      	mov	r3, r5
 800ddfa:	4622      	mov	r2, r4
 800ddfc:	4601      	mov	r1, r0
 800ddfe:	6a38      	ldr	r0, [r7, #32]
 800de00:	f7fb f958 	bl	80090b4 <lfs_bd_read>
 800de04:	61b8      	str	r0, [r7, #24]
    if (err) {
 800de06:	69bb      	ldr	r3, [r7, #24]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <lfs_fs_parent_match+0x56>
        return err;
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	e012      	b.n	800de36 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800de10:	f107 0310 	add.w	r3, r7, #16
 800de14:	4618      	mov	r0, r3
 800de16:	f7fb fcf6 	bl	8009806 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800de1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1c:	1d1a      	adds	r2, r3, #4
 800de1e:	f107 0310 	add.w	r3, r7, #16
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f7fb fc97 	bl	8009758 <lfs_pair_cmp>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	bf14      	ite	ne
 800de30:	2301      	movne	r3, #1
 800de32:	2300      	moveq	r3, #0
 800de34:	b2db      	uxtb	r3, r3
}
 800de36:	4618      	mov	r0, r3
 800de38:	3728      	adds	r7, #40	; 0x28
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800de40 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800de40:	b580      	push	{r7, lr}
 800de42:	b08e      	sub	sp, #56	; 0x38
 800de44:	af04      	add	r7, sp, #16
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2201      	movs	r2, #1
 800de56:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800de58:	2300      	movs	r3, #0
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800de5c:	e030      	b.n	800dec0 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de64:	085b      	lsrs	r3, r3, #1
 800de66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de68:	429a      	cmp	r2, r3
 800de6a:	d302      	bcc.n	800de72 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800de6c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800de70:	e033      	b.n	800deda <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	3301      	adds	r3, #1
 800de76:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800de86:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	3304      	adds	r3, #4
 800de8c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800de8e:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800de90:	f107 0314 	add.w	r3, r7, #20
 800de94:	9303      	str	r3, [sp, #12]
 800de96:	4b13      	ldr	r3, [pc, #76]	; (800dee4 <lfs_fs_parent+0xa4>)
 800de98:	9302      	str	r3, [sp, #8]
 800de9a:	2300      	movs	r3, #0
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	4b12      	ldr	r3, [pc, #72]	; (800dee8 <lfs_fs_parent+0xa8>)
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	4b12      	ldr	r3, [pc, #72]	; (800deec <lfs_fs_parent+0xac>)
 800dea4:	6879      	ldr	r1, [r7, #4]
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	f7fc fb66 	bl	800a578 <lfs_dir_fetchmatch>
 800deac:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800deae:	6a3b      	ldr	r3, [r7, #32]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <lfs_fs_parent+0x80>
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	f113 0f02 	cmn.w	r3, #2
 800deba:	d001      	beq.n	800dec0 <lfs_fs_parent+0x80>
            return tag;
 800debc:	6a3b      	ldr	r3, [r7, #32]
 800debe:	e00c      	b.n	800deda <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3318      	adds	r3, #24
 800dec4:	4618      	mov	r0, r3
 800dec6:	f7fb fc2c 	bl	8009722 <lfs_pair_isnull>
 800deca:	4603      	mov	r3, r0
 800decc:	f083 0301 	eor.w	r3, r3, #1
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1c3      	bne.n	800de5e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800ded6:	f06f 0301 	mvn.w	r3, #1
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3728      	adds	r7, #40	; 0x28
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	0800ddbb 	.word	0x0800ddbb
 800dee8:	20000008 	.word	0x20000008
 800deec:	7ff003ff 	.word	0x7ff003ff

0800def0 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b0a6      	sub	sp, #152	; 0x98
 800def4:	af04      	add	r7, sp, #16
 800def6:	60f8      	str	r0, [r7, #12]
 800def8:	60b9      	str	r1, [r7, #8]
 800defa:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3320      	adds	r3, #32
 800df00:	4619      	mov	r1, r3
 800df02:	68b8      	ldr	r0, [r7, #8]
 800df04:	f7fb fc28 	bl	8009758 <lfs_pair_cmp>
 800df08:	4603      	mov	r3, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d107      	bne.n	800df1e <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	685a      	ldr	r2, [r3, #4]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df26:	e031      	b.n	800df8c <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800df28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df2c:	3308      	adds	r3, #8
 800df2e:	4619      	mov	r1, r3
 800df30:	68b8      	ldr	r0, [r7, #8]
 800df32:	f7fb fc11 	bl	8009758 <lfs_pair_cmp>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d109      	bne.n	800df50 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df44:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df4e:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 800df50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df54:	799b      	ldrb	r3, [r3, #6]
 800df56:	2b02      	cmp	r3, #2
 800df58:	d113      	bne.n	800df82 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 800df5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df5e:	332c      	adds	r3, #44	; 0x2c
 800df60:	4619      	mov	r1, r3
 800df62:	68b8      	ldr	r0, [r7, #8]
 800df64:	f7fb fbf8 	bl	8009758 <lfs_pair_cmp>
 800df68:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d109      	bne.n	800df82 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df76:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df80:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800df82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800df90:	2b00      	cmp	r3, #0
 800df92:	d1c9      	bne.n	800df28 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800df94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df98:	461a      	mov	r2, r3
 800df9a:	68b9      	ldr	r1, [r7, #8]
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	f7ff ff4f 	bl	800de40 <lfs_fs_parent>
 800dfa2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800dfa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	da07      	bge.n	800dfbe <lfs_fs_relocate+0xce>
 800dfae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfb2:	f113 0f02 	cmn.w	r3, #2
 800dfb6:	d002      	beq.n	800dfbe <lfs_fs_relocate+0xce>
        return tag;
 800dfb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfbc:	e0f3      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 800dfbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dfc2:	f113 0f02 	cmn.w	r3, #2
 800dfc6:	d07c      	beq.n	800e0c2 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 800dfc8:	2101      	movs	r1, #1
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f000 f8f8 	bl	800e1c0 <lfs_fs_preporphans>
 800dfd0:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800dfd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <lfs_fs_relocate+0xec>
            return err;
 800dfd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dfda:	e0e4      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800dfdc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800dfe0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	3330      	adds	r3, #48	; 0x30
 800dfe8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800dfec:	4611      	mov	r1, r2
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fb fd40 	bl	8009a74 <lfs_gstate_hasmovehere>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d02d      	beq.n	800e056 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fb fc90 	bl	8009924 <lfs_tag_id>
 800e004:	4603      	mov	r3, r0
 800e006:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 800e00a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e00c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e00e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800e012:	4867      	ldr	r0, [pc, #412]	; (800e1b0 <lfs_fs_relocate+0x2c0>)
 800e014:	9002      	str	r0, [sp, #8]
 800e016:	9201      	str	r2, [sp, #4]
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	460b      	mov	r3, r1
 800e01c:	f640 72c4 	movw	r2, #4036	; 0xfc4
 800e020:	4964      	ldr	r1, [pc, #400]	; (800e1b4 <lfs_fs_relocate+0x2c4>)
 800e022:	4865      	ldr	r0, [pc, #404]	; (800e1b8 <lfs_fs_relocate+0x2c8>)
 800e024:	f010 fefe 	bl	801ee24 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e028:	2200      	movs	r2, #0
 800e02a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f000 f900 	bl	800e234 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 800e034:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fb fc73 	bl	8009924 <lfs_tag_id>
 800e03e:	4603      	mov	r3, r0
 800e040:	461a      	mov	r2, r3
 800e042:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e046:	4293      	cmp	r3, r2
 800e048:	d205      	bcs.n	800e056 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 800e04a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e04e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7fb fbef 	bl	800983a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e05c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e060:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e064:	4293      	cmp	r3, r2
 800e066:	d007      	beq.n	800e078 <lfs_fs_relocate+0x188>
 800e068:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800e06c:	029b      	lsls	r3, r3, #10
 800e06e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e072:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e076:	e000      	b.n	800e07a <lfs_fs_relocate+0x18a>
 800e078:	2300      	movs	r3, #0
 800e07a:	647b      	str	r3, [r7, #68]	; 0x44
 800e07c:	2300      	movs	r3, #0
 800e07e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e084:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	653b      	str	r3, [r7, #80]	; 0x50
 800e08a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e08e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e092:	2302      	movs	r3, #2
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f7fd fdaf 	bl	800bbf8 <lfs_dir_commit>
 800e09a:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7fb fbb2 	bl	8009806 <lfs_pair_fromle32>
        if (err) {
 800e0a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d001      	beq.n	800e0ac <lfs_fs_relocate+0x1bc>
            return err;
 800e0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0aa:	e07c      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 800e0ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f000 f885 	bl	800e1c0 <lfs_fs_preporphans>
 800e0b6:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800e0b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d001      	beq.n	800e0c2 <lfs_fs_relocate+0x1d2>
            return err;
 800e0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e0c0:	e071      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800e0c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e0c6:	461a      	mov	r2, r3
 800e0c8:	68b9      	ldr	r1, [r7, #8]
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff fe30 	bl	800dd30 <lfs_fs_pred>
 800e0d0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 800e0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d005      	beq.n	800e0e4 <lfs_fs_relocate+0x1f4>
 800e0d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0da:	f113 0f02 	cmn.w	r3, #2
 800e0de:	d001      	beq.n	800e0e4 <lfs_fs_relocate+0x1f4>
        return err;
 800e0e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0e2:	e060      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800e0e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e0e6:	f113 0f02 	cmn.w	r3, #2
 800e0ea:	d05b      	beq.n	800e1a4 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800e0ec:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800e0f0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	3330      	adds	r3, #48	; 0x30
 800e0f8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	4618      	mov	r0, r3
 800e100:	f7fb fcb8 	bl	8009a74 <lfs_gstate_hasmovehere>
 800e104:	4603      	mov	r3, r0
 800e106:	2b00      	cmp	r3, #0
 800e108:	d01c      	beq.n	800e144 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fb fc08 	bl	8009924 <lfs_tag_id>
 800e114:	4603      	mov	r3, r0
 800e116:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 800e11a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e11c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e11e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800e122:	4823      	ldr	r0, [pc, #140]	; (800e1b0 <lfs_fs_relocate+0x2c0>)
 800e124:	9002      	str	r0, [sp, #8]
 800e126:	9201      	str	r2, [sp, #4]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	460b      	mov	r3, r1
 800e12c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 800e130:	4920      	ldr	r1, [pc, #128]	; (800e1b4 <lfs_fs_relocate+0x2c4>)
 800e132:	4821      	ldr	r0, [pc, #132]	; (800e1b8 <lfs_fs_relocate+0x2c8>)
 800e134:	f010 fe76 	bl	801ee24 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e138:	2200      	movs	r2, #0
 800e13a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 f878 	bl	800e234 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f7fb fb78 	bl	800983a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800e14a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e14e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e152:	4293      	cmp	r3, r2
 800e154:	d007      	beq.n	800e166 <lfs_fs_relocate+0x276>
 800e156:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800e15a:	029b      	lsls	r3, r3, #10
 800e15c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e160:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e164:	e000      	b.n	800e168 <lfs_fs_relocate+0x278>
 800e166:	2300      	movs	r3, #0
 800e168:	627b      	str	r3, [r7, #36]	; 0x24
 800e16a:	2300      	movs	r3, #0
 800e16c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e16e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800e172:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800e176:	051a      	lsls	r2, r3, #20
 800e178:	4b10      	ldr	r3, [pc, #64]	; (800e1bc <lfs_fs_relocate+0x2cc>)
 800e17a:	4313      	orrs	r3, r2
 800e17c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	633b      	str	r3, [r7, #48]	; 0x30
 800e182:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e186:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800e18a:	2302      	movs	r3, #2
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f7fd fd33 	bl	800bbf8 <lfs_dir_commit>
 800e192:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7fb fb36 	bl	8009806 <lfs_pair_fromle32>
        if (err) {
 800e19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d001      	beq.n	800e1a4 <lfs_fs_relocate+0x2b4>
            return err;
 800e1a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e1a2:	e000      	b.n	800e1a6 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3788      	adds	r7, #136	; 0x88
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	080203d4 	.word	0x080203d4
 800e1b4:	080202c8 	.word	0x080202c8
 800e1b8:	080208e0 	.word	0x080208e0
 800e1bc:	000ffc08 	.word	0x000ffc08

0800e1c0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800e1c0:	b590      	push	{r4, r7, lr}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fb fbb7 	bl	8009944 <lfs_tag_size>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10a      	bne.n	800e1f2 <lfs_fs_preporphans+0x32>
 800e1dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	da06      	bge.n	800e1f2 <lfs_fs_preporphans+0x32>
 800e1e4:	4b10      	ldr	r3, [pc, #64]	; (800e228 <lfs_fs_preporphans+0x68>)
 800e1e6:	4a11      	ldr	r2, [pc, #68]	; (800e22c <lfs_fs_preporphans+0x6c>)
 800e1e8:	f241 0103 	movw	r1, #4099	; 0x1003
 800e1ec:	4810      	ldr	r0, [pc, #64]	; (800e230 <lfs_fs_preporphans+0x70>)
 800e1ee:	f010 fb9d 	bl	801e92c <__assert_func>
    lfs->gstate.tag += orphans;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1fa:	441a      	add	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e204:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3330      	adds	r3, #48	; 0x30
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fb fbfc 	bl	8009a0a <lfs_gstate_hasorphans>
 800e212:	4603      	mov	r3, r0
 800e214:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800e216:	ea44 0203 	orr.w	r2, r4, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	bd90      	pop	{r4, r7, pc}
 800e228:	08020924 	.word	0x08020924
 800e22c:	0802460c 	.word	0x0802460c
 800e230:	080202c8 	.word	0x080202c8

0800e234 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	460b      	mov	r3, r1
 800e23e:	607a      	str	r2, [r7, #4]
 800e240:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e246:	4a17      	ldr	r2, [pc, #92]	; (800e2a4 <lfs_fs_prepmove+0x70>)
 800e248:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800e24a:	897b      	ldrh	r3, [r7, #10]
 800e24c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e250:	428b      	cmp	r3, r1
 800e252:	d006      	beq.n	800e262 <lfs_fs_prepmove+0x2e>
 800e254:	897b      	ldrh	r3, [r7, #10]
 800e256:	029b      	lsls	r3, r3, #10
 800e258:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e25c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e260:	e000      	b.n	800e264 <lfs_fs_prepmove+0x30>
 800e262:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800e264:	431a      	orrs	r2, r3
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800e26a:	897b      	ldrh	r3, [r7, #10]
 800e26c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e270:	4293      	cmp	r3, r2
 800e272:	d002      	beq.n	800e27a <lfs_fs_prepmove+0x46>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	e000      	b.n	800e27c <lfs_fs_prepmove+0x48>
 800e27a:	2300      	movs	r3, #0
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800e280:	897b      	ldrh	r3, [r7, #10]
 800e282:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e286:	4293      	cmp	r3, r2
 800e288:	d003      	beq.n	800e292 <lfs_fs_prepmove+0x5e>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	3304      	adds	r3, #4
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	e000      	b.n	800e294 <lfs_fs_prepmove+0x60>
 800e292:	2300      	movs	r3, #0
 800e294:	68fa      	ldr	r2, [r7, #12]
 800e296:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e298:	bf00      	nop
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	800003ff 	.word	0x800003ff

0800e2a8 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800e2a8:	b5b0      	push	{r4, r5, r7, lr}
 800e2aa:	b094      	sub	sp, #80	; 0x50
 800e2ac:	af04      	add	r7, sp, #16
 800e2ae:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	333c      	adds	r3, #60	; 0x3c
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fb fbca 	bl	8009a4e <lfs_gstate_hasmove>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	f083 0301 	eor.w	r3, r3, #1
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d001      	beq.n	800e2ca <lfs_fs_demove+0x22>
        return 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e049      	b.n	800e35e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fb fb24 	bl	8009924 <lfs_tag_id>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	461a      	mov	r2, r3
 800e2e0:	4b21      	ldr	r3, [pc, #132]	; (800e368 <lfs_fs_demove+0xc0>)
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	9201      	str	r2, [sp, #4]
 800e2e6:	9400      	str	r4, [sp, #0]
 800e2e8:	462b      	mov	r3, r5
 800e2ea:	f241 021d 	movw	r2, #4125	; 0x101d
 800e2ee:	491f      	ldr	r1, [pc, #124]	; (800e36c <lfs_fs_demove+0xc4>)
 800e2f0:	481f      	ldr	r0, [pc, #124]	; (800e370 <lfs_fs_demove+0xc8>)
 800e2f2:	f010 fd97 	bl	801ee24 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e2fc:	f107 0318 	add.w	r3, r7, #24
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7fc fca4 	bl	800ac50 <lfs_dir_fetch>
 800e308:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800e30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <lfs_fs_demove+0x6c>
        return err;
 800e310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e312:	e024      	b.n	800e35e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fb fb03 	bl	8009924 <lfs_tag_id>
 800e31e:	4603      	mov	r3, r0
 800e320:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800e322:	2200      	movs	r2, #0
 800e324:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff ff83 	bl	800e234 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800e32e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e330:	029b      	lsls	r3, r3, #10
 800e332:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800e336:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800e33a:	613b      	str	r3, [r7, #16]
 800e33c:	2300      	movs	r3, #0
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	f107 0210 	add.w	r2, r7, #16
 800e344:	f107 0118 	add.w	r1, r7, #24
 800e348:	2301      	movs	r3, #1
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7fd fc54 	bl	800bbf8 <lfs_dir_commit>
 800e350:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800e352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <lfs_fs_demove+0xb4>
        return err;
 800e358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e35a:	e000      	b.n	800e35e <lfs_fs_demove+0xb6>
    }

    return 0;
 800e35c:	2300      	movs	r3, #0
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3740      	adds	r7, #64	; 0x40
 800e362:	46bd      	mov	sp, r7
 800e364:	bdb0      	pop	{r4, r5, r7, pc}
 800e366:	bf00      	nop
 800e368:	080203d4 	.word	0x080203d4
 800e36c:	080202c8 	.word	0x080202c8
 800e370:	08020958 	.word	0x08020958

0800e374 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 800e374:	b5b0      	push	{r4, r5, r7, lr}
 800e376:	b0a8      	sub	sp, #160	; 0xa0
 800e378:	af04      	add	r7, sp, #16
 800e37a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3330      	adds	r3, #48	; 0x30
 800e380:	4618      	mov	r0, r3
 800e382:	f7fb fb42 	bl	8009a0a <lfs_gstate_hasorphans>
 800e386:	4603      	mov	r3, r0
 800e388:	f083 0301 	eor.w	r3, r3, #1
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <lfs_fs_deorphan+0x22>
        return 0;
 800e392:	2300      	movs	r3, #0
 800e394:	e0e6      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800e396:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e39a:	2220      	movs	r2, #32
 800e39c:	2100      	movs	r1, #0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f010 fe96 	bl	801f0d0 <memset>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 800e3b0:	e0bd      	b.n	800e52e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800e3b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e3b6:	f103 0218 	add.w	r2, r3, #24
 800e3ba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7fc fc45 	bl	800ac50 <lfs_dir_fetch>
 800e3c6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 800e3ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d002      	beq.n	800e3d8 <lfs_fs_deorphan+0x64>
            return err;
 800e3d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e3d6:	e0c5      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 800e3d8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e3dc:	f083 0301 	eor.w	r3, r3, #1
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8099 	beq.w	800e51a <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800e3e8:	f107 020c 	add.w	r2, r7, #12
 800e3ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e3f0:	3318      	adds	r3, #24
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff fd23 	bl	800de40 <lfs_fs_parent>
 800e3fa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800e3fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e402:	2b00      	cmp	r3, #0
 800e404:	da07      	bge.n	800e416 <lfs_fs_deorphan+0xa2>
 800e406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e40a:	f113 0f02 	cmn.w	r3, #2
 800e40e:	d002      	beq.n	800e416 <lfs_fs_deorphan+0xa2>
                return tag;
 800e410:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e414:	e0a6      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 800e416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e41a:	f113 0f02 	cmn.w	r3, #2
 800e41e:	d11d      	bne.n	800e45c <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800e420:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e422:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e426:	4951      	ldr	r1, [pc, #324]	; (800e56c <lfs_fs_deorphan+0x1f8>)
 800e428:	9101      	str	r1, [sp, #4]
 800e42a:	9300      	str	r3, [sp, #0]
 800e42c:	4613      	mov	r3, r2
 800e42e:	f241 0252 	movw	r2, #4178	; 0x1052
 800e432:	494f      	ldr	r1, [pc, #316]	; (800e570 <lfs_fs_deorphan+0x1fc>)
 800e434:	484f      	ldr	r0, [pc, #316]	; (800e574 <lfs_fs_deorphan+0x200>)
 800e436:	f010 fcf5 	bl	801ee24 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 800e43a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e43e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e442:	4619      	mov	r1, r3
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fd f801 	bl	800b44c <lfs_dir_drop>
 800e44a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 800e44e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e452:	2b00      	cmp	r3, #0
 800e454:	d05d      	beq.n	800e512 <lfs_fs_deorphan+0x19e>
                    return err;
 800e456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e45a:	e083      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800e45c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e460:	f107 010c 	add.w	r1, r7, #12
 800e464:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e468:	9300      	str	r3, [sp, #0]
 800e46a:	4613      	mov	r3, r2
 800e46c:	4a42      	ldr	r2, [pc, #264]	; (800e578 <lfs_fs_deorphan+0x204>)
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f7fb fdda 	bl	800a028 <lfs_dir_get>
 800e474:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 800e478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	da02      	bge.n	800e486 <lfs_fs_deorphan+0x112>
                return res;
 800e480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e484:	e06e      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 800e486:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fb f9bb 	bl	8009806 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 800e490:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e494:	f103 0218 	add.w	r2, r3, #24
 800e498:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e49c:	4611      	mov	r1, r2
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fb f984 	bl	80097ac <lfs_pair_sync>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f083 0301 	eor.w	r3, r3, #1
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d034      	beq.n	800e51a <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 800e4b0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800e4b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e4ba:	4c2c      	ldr	r4, [pc, #176]	; (800e56c <lfs_fs_deorphan+0x1f8>)
 800e4bc:	9403      	str	r4, [sp, #12]
 800e4be:	9102      	str	r1, [sp, #8]
 800e4c0:	9201      	str	r2, [sp, #4]
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f241 0268 	movw	r2, #4200	; 0x1068
 800e4ca:	4929      	ldr	r1, [pc, #164]	; (800e570 <lfs_fs_deorphan+0x1fc>)
 800e4cc:	482b      	ldr	r0, [pc, #172]	; (800e57c <lfs_fs_deorphan+0x208>)
 800e4ce:	f010 fca9 	bl	801ee24 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 800e4d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7fb f9af 	bl	800983a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 800e4dc:	4b28      	ldr	r3, [pc, #160]	; (800e580 <lfs_fs_deorphan+0x20c>)
 800e4de:	637b      	str	r3, [r7, #52]	; 0x34
 800e4e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e4e4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4e6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e4ea:	f107 0164 	add.w	r1, r7, #100	; 0x64
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7fd fb81 	bl	800bbf8 <lfs_dir_commit>
 800e4f6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 800e4fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fb f981 	bl	8009806 <lfs_pair_fromle32>
                if (err) {
 800e504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d004      	beq.n	800e516 <lfs_fs_deorphan+0x1a2>
                    return err;
 800e50c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 800e510:	e028      	b.n	800e564 <lfs_fs_deorphan+0x1f0>
                continue;
 800e512:	bf00      	nop
 800e514:	e00b      	b.n	800e52e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 800e516:	bf00      	nop
 800e518:	e009      	b.n	800e52e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 800e51a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800e51e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 800e522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e526:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e52a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 800e52e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e532:	3318      	adds	r3, #24
 800e534:	4618      	mov	r0, r3
 800e536:	f7fb f8f4 	bl	8009722 <lfs_pair_isnull>
 800e53a:	4603      	mov	r3, r0
 800e53c:	f083 0301 	eor.w	r3, r3, #1
 800e540:	b2db      	uxtb	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	f47f af35 	bne.w	800e3b2 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3330      	adds	r3, #48	; 0x30
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fb fa6f 	bl	8009a30 <lfs_gstate_getorphans>
 800e552:	4603      	mov	r3, r0
 800e554:	425b      	negs	r3, r3
 800e556:	b2db      	uxtb	r3, r3
 800e558:	b25b      	sxtb	r3, r3
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7ff fe2f 	bl	800e1c0 <lfs_fs_preporphans>
 800e562:	4603      	mov	r3, r0
}
 800e564:	4618      	mov	r0, r3
 800e566:	3790      	adds	r7, #144	; 0x90
 800e568:	46bd      	mov	sp, r7
 800e56a:	bdb0      	pop	{r4, r5, r7, pc}
 800e56c:	080203d4 	.word	0x080203d4
 800e570:	080202c8 	.word	0x080202c8
 800e574:	0802098c 	.word	0x0802098c
 800e578:	7ffffc00 	.word	0x7ffffc00
 800e57c:	080209bc 	.word	0x080209bc
 800e580:	600ffc08 	.word	0x600ffc08

0800e584 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f7ff fe8b 	bl	800e2a8 <lfs_fs_demove>
 800e592:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d001      	beq.n	800e59e <lfs_fs_forceconsistency+0x1a>
        return err;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	e009      	b.n	800e5b2 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fee8 	bl	800e374 <lfs_fs_deorphan>
 800e5a4:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d001      	beq.n	800e5b0 <lfs_fs_forceconsistency+0x2c>
        return err;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	e000      	b.n	800e5b2 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}

0800e5ba <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 800e5ba:	b480      	push	{r7}
 800e5bc:	b085      	sub	sp, #20
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	6078      	str	r0, [r7, #4]
 800e5c2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	1c5a      	adds	r2, r3, #1
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	601a      	str	r2, [r3, #0]
    return 0;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3714      	adds	r7, #20
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5de:	4770      	bx	lr

0800e5e0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 800e5ec:	f107 0208 	add.w	r2, r7, #8
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4907      	ldr	r1, [pc, #28]	; (800e610 <lfs_fs_rawsize+0x30>)
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f7ff fa75 	bl	800dae4 <lfs_fs_rawtraverse>
 800e5fa:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d001      	beq.n	800e606 <lfs_fs_rawsize+0x26>
        return err;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	e000      	b.n	800e608 <lfs_fs_rawsize+0x28>
    }

    return size;
 800e606:	68bb      	ldr	r3, [r7, #8]
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3710      	adds	r7, #16
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	0800e5bb 	.word	0x0800e5bb

0800e614 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	695b      	ldr	r3, [r3, #20]
 800e622:	6838      	ldr	r0, [r7, #0]
 800e624:	4798      	blx	r3
 800e626:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d001      	beq.n	800e632 <lfs_format+0x1e>
        return err;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	e009      	b.n	800e646 <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f7ff f833 	bl	800d6a0 <lfs_rawformat>
 800e63a:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	6838      	ldr	r0, [r7, #0]
 800e642:	4798      	blx	r3
    return err;
 800e644:	68fb      	ldr	r3, [r7, #12]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 800e64e:	b580      	push	{r7, lr}
 800e650:	b084      	sub	sp, #16
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
 800e656:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	695b      	ldr	r3, [r3, #20]
 800e65c:	6838      	ldr	r0, [r7, #0]
 800e65e:	4798      	blx	r3
 800e660:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d001      	beq.n	800e66c <lfs_mount+0x1e>
        return err;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	e009      	b.n	800e680 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff f8b6 	bl	800d7e0 <lfs_rawmount>
 800e674:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	699b      	ldr	r3, [r3, #24]
 800e67a:	6838      	ldr	r0, [r7, #0]
 800e67c:	4798      	blx	r3
    return err;
 800e67e:	68fb      	ldr	r3, [r7, #12]
}
 800e680:	4618      	mov	r0, r3
 800e682:	3710      	adds	r7, #16
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e69c:	4610      	mov	r0, r2
 800e69e:	4798      	blx	r3
 800e6a0:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d001      	beq.n	800e6ac <lfs_mkdir+0x24>
        return err;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	e00c      	b.n	800e6c6 <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 800e6ac:	6839      	ldr	r1, [r7, #0]
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fd fe54 	bl	800c35c <lfs_rawmkdir>
 800e6b4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e6c0:	4610      	mov	r0, r2
 800e6c2:	4798      	blx	r3
    return err;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
	...

0800e6d0 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 800e6d0:	b480      	push	{r7}
 800e6d2:	b087      	sub	sp, #28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	617b      	str	r3, [r7, #20]
 800e6e4:	e024      	b.n	800e730 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	091a      	lsrs	r2, r3, #4
 800e6ea:	6939      	ldr	r1, [r7, #16]
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	440b      	add	r3, r1
 800e6f0:	781b      	ldrb	r3, [r3, #0]
 800e6f2:	4619      	mov	r1, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	404b      	eors	r3, r1
 800e6f8:	f003 030f 	and.w	r3, r3, #15
 800e6fc:	4912      	ldr	r1, [pc, #72]	; (800e748 <lfs_crc+0x78>)
 800e6fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e702:	4053      	eors	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	091a      	lsrs	r2, r3, #4
 800e70a:	6939      	ldr	r1, [r7, #16]
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	440b      	add	r3, r1
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	091b      	lsrs	r3, r3, #4
 800e714:	b2db      	uxtb	r3, r3
 800e716:	4619      	mov	r1, r3
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	404b      	eors	r3, r1
 800e71c:	f003 030f 	and.w	r3, r3, #15
 800e720:	4909      	ldr	r1, [pc, #36]	; (800e748 <lfs_crc+0x78>)
 800e722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800e726:	4053      	eors	r3, r2
 800e728:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	3301      	adds	r3, #1
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	429a      	cmp	r2, r3
 800e736:	d3d6      	bcc.n	800e6e6 <lfs_crc+0x16>
    }

    return crc;
 800e738:	68fb      	ldr	r3, [r7, #12]
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	371c      	adds	r7, #28
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	08024620 	.word	0x08024620

0800e74c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	330c      	adds	r3, #12
 800e75c:	461a      	mov	r2, r3
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f002 fb37 	bl	8010dd4 <tcpip_send_msg_wait_sem>
 800e766:	4603      	mov	r3, r0
 800e768:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d103      	bne.n	800e77a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e778:	e001      	b.n	800e77e <netconn_apimsg+0x32>
  }
  return err;
 800e77a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
	...

0800e788 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b08c      	sub	sp, #48	; 0x30
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	4603      	mov	r3, r0
 800e790:	603a      	str	r2, [r7, #0]
 800e792:	71fb      	strb	r3, [r7, #7]
 800e794:	460b      	mov	r3, r1
 800e796:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	6839      	ldr	r1, [r7, #0]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f001 f851 	bl	800f844 <netconn_alloc>
 800e7a2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800e7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d054      	beq.n	800e854 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e7aa:	79bb      	ldrb	r3, [r7, #6]
 800e7ac:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e7b2:	f107 0308 	add.w	r3, r7, #8
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	4829      	ldr	r0, [pc, #164]	; (800e860 <netconn_new_with_proto_and_callback+0xd8>)
 800e7ba:	f7ff ffc7 	bl	800e74c <netconn_apimsg>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800e7c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d043      	beq.n	800e854 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d005      	beq.n	800e7e0 <netconn_new_with_proto_and_callback+0x58>
 800e7d4:	4b23      	ldr	r3, [pc, #140]	; (800e864 <netconn_new_with_proto_and_callback+0xdc>)
 800e7d6:	22a3      	movs	r2, #163	; 0xa3
 800e7d8:	4923      	ldr	r1, [pc, #140]	; (800e868 <netconn_new_with_proto_and_callback+0xe0>)
 800e7da:	4824      	ldr	r0, [pc, #144]	; (800e86c <netconn_new_with_proto_and_callback+0xe4>)
 800e7dc:	f010 fb22 	bl	801ee24 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e2:	3310      	adds	r3, #16
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f00f fb54 	bl	801de92 <sys_mbox_valid>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d105      	bne.n	800e7fc <netconn_new_with_proto_and_callback+0x74>
 800e7f0:	4b1c      	ldr	r3, [pc, #112]	; (800e864 <netconn_new_with_proto_and_callback+0xdc>)
 800e7f2:	22a4      	movs	r2, #164	; 0xa4
 800e7f4:	491e      	ldr	r1, [pc, #120]	; (800e870 <netconn_new_with_proto_and_callback+0xe8>)
 800e7f6:	481d      	ldr	r0, [pc, #116]	; (800e86c <netconn_new_with_proto_and_callback+0xe4>)
 800e7f8:	f010 fb14 	bl	801ee24 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fe:	3314      	adds	r3, #20
 800e800:	4618      	mov	r0, r3
 800e802:	f00f fb46 	bl	801de92 <sys_mbox_valid>
 800e806:	4603      	mov	r3, r0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d005      	beq.n	800e818 <netconn_new_with_proto_and_callback+0x90>
 800e80c:	4b15      	ldr	r3, [pc, #84]	; (800e864 <netconn_new_with_proto_and_callback+0xdc>)
 800e80e:	22a6      	movs	r2, #166	; 0xa6
 800e810:	4918      	ldr	r1, [pc, #96]	; (800e874 <netconn_new_with_proto_and_callback+0xec>)
 800e812:	4816      	ldr	r0, [pc, #88]	; (800e86c <netconn_new_with_proto_and_callback+0xe4>)
 800e814:	f010 fb06 	bl	801ee24 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81a:	330c      	adds	r3, #12
 800e81c:	4618      	mov	r0, r3
 800e81e:	f00f fbc9 	bl	801dfb4 <sys_sem_valid>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d105      	bne.n	800e834 <netconn_new_with_proto_and_callback+0xac>
 800e828:	4b0e      	ldr	r3, [pc, #56]	; (800e864 <netconn_new_with_proto_and_callback+0xdc>)
 800e82a:	22a9      	movs	r2, #169	; 0xa9
 800e82c:	4912      	ldr	r1, [pc, #72]	; (800e878 <netconn_new_with_proto_and_callback+0xf0>)
 800e82e:	480f      	ldr	r0, [pc, #60]	; (800e86c <netconn_new_with_proto_and_callback+0xe4>)
 800e830:	f010 faf8 	bl	801ee24 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	330c      	adds	r3, #12
 800e838:	4618      	mov	r0, r3
 800e83a:	f00f fbae 	bl	801df9a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e840:	3310      	adds	r3, #16
 800e842:	4618      	mov	r0, r3
 800e844:	f00f fa9e 	bl	801dd84 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e848:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e84a:	2007      	movs	r0, #7
 800e84c:	f003 f870 	bl	8011930 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e850:	2300      	movs	r3, #0
 800e852:	e000      	b.n	800e856 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e856:	4618      	mov	r0, r3
 800e858:	3730      	adds	r7, #48	; 0x30
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	0800f819 	.word	0x0800f819
 800e864:	08020aa8 	.word	0x08020aa8
 800e868:	08020adc 	.word	0x08020adc
 800e86c:	08020b00 	.word	0x08020b00
 800e870:	08020b28 	.word	0x08020b28
 800e874:	08020b40 	.word	0x08020b40
 800e878:	08020b64 	.word	0x08020b64

0800e87c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08c      	sub	sp, #48	; 0x30
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d101      	bne.n	800e88e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800e88a:	2300      	movs	r3, #0
 800e88c:	e014      	b.n	800e8b8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e892:	2329      	movs	r3, #41	; 0x29
 800e894:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e896:	f107 030c 	add.w	r3, r7, #12
 800e89a:	4619      	mov	r1, r3
 800e89c:	4808      	ldr	r0, [pc, #32]	; (800e8c0 <netconn_prepare_delete+0x44>)
 800e89e:	f7ff ff55 	bl	800e74c <netconn_apimsg>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e8a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d002      	beq.n	800e8b6 <netconn_prepare_delete+0x3a>
    return err;
 800e8b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e8b4:	e000      	b.n	800e8b8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3730      	adds	r7, #48	; 0x30
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	0800fd85 	.word	0x0800fd85

0800e8c4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <netconn_delete+0x12>
    return ERR_OK;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	e00d      	b.n	800e8f2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff ffd0 	bl	800e87c <netconn_prepare_delete>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800e8e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <netconn_delete+0x2a>
    netconn_free(conn);
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f001 f819 	bl	800f920 <netconn_free>
  }
  return err;
 800e8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3710      	adds	r7, #16
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08e      	sub	sp, #56	; 0x38
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	4613      	mov	r3, r2
 800e908:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d109      	bne.n	800e924 <netconn_bind+0x28>
 800e910:	4b11      	ldr	r3, [pc, #68]	; (800e958 <netconn_bind+0x5c>)
 800e912:	f44f 729c 	mov.w	r2, #312	; 0x138
 800e916:	4911      	ldr	r1, [pc, #68]	; (800e95c <netconn_bind+0x60>)
 800e918:	4811      	ldr	r0, [pc, #68]	; (800e960 <netconn_bind+0x64>)
 800e91a:	f010 fa83 	bl	801ee24 <iprintf>
 800e91e:	f06f 030f 	mvn.w	r3, #15
 800e922:	e015      	b.n	800e950 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d101      	bne.n	800e92e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800e92a:	4b0e      	ldr	r3, [pc, #56]	; (800e964 <netconn_bind+0x68>)
 800e92c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e936:	88fb      	ldrh	r3, [r7, #6]
 800e938:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e93a:	f107 0314 	add.w	r3, r7, #20
 800e93e:	4619      	mov	r1, r3
 800e940:	4809      	ldr	r0, [pc, #36]	; (800e968 <netconn_bind+0x6c>)
 800e942:	f7ff ff03 	bl	800e74c <netconn_apimsg>
 800e946:	4603      	mov	r3, r0
 800e948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800e94c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800e950:	4618      	mov	r0, r3
 800e952:	3738      	adds	r7, #56	; 0x38
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}
 800e958:	08020aa8 	.word	0x08020aa8
 800e95c:	08020be0 	.word	0x08020be0
 800e960:	08020b00 	.word	0x08020b00
 800e964:	08024784 	.word	0x08024784
 800e968:	0800ff4d 	.word	0x0800ff4d

0800e96c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b08c      	sub	sp, #48	; 0x30
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d109      	bne.n	800e992 <netconn_listen_with_backlog+0x26>
 800e97e:	4b0d      	ldr	r3, [pc, #52]	; (800e9b4 <netconn_listen_with_backlog+0x48>)
 800e980:	f240 12bb 	movw	r2, #443	; 0x1bb
 800e984:	490c      	ldr	r1, [pc, #48]	; (800e9b8 <netconn_listen_with_backlog+0x4c>)
 800e986:	480d      	ldr	r0, [pc, #52]	; (800e9bc <netconn_listen_with_backlog+0x50>)
 800e988:	f010 fa4c 	bl	801ee24 <iprintf>
 800e98c:	f06f 030f 	mvn.w	r3, #15
 800e990:	e00c      	b.n	800e9ac <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e996:	f107 030c 	add.w	r3, r7, #12
 800e99a:	4619      	mov	r1, r3
 800e99c:	4808      	ldr	r0, [pc, #32]	; (800e9c0 <netconn_listen_with_backlog+0x54>)
 800e99e:	f7ff fed5 	bl	800e74c <netconn_apimsg>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800e9a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3730      	adds	r7, #48	; 0x30
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}
 800e9b4:	08020aa8 	.word	0x08020aa8
 800e9b8:	08020c60 	.word	0x08020c60
 800e9bc:	08020b00 	.word	0x08020b00
 800e9c0:	0800ffc1 	.word	0x0800ffc1

0800e9c4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d109      	bne.n	800e9e8 <netconn_accept+0x24>
 800e9d4:	4b3d      	ldr	r3, [pc, #244]	; (800eacc <netconn_accept+0x108>)
 800e9d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e9da:	493d      	ldr	r1, [pc, #244]	; (800ead0 <netconn_accept+0x10c>)
 800e9dc:	483d      	ldr	r0, [pc, #244]	; (800ead4 <netconn_accept+0x110>)
 800e9de:	f010 fa21 	bl	801ee24 <iprintf>
 800e9e2:	f06f 030f 	mvn.w	r3, #15
 800e9e6:	e06c      	b.n	800eac2 <netconn_accept+0xfe>
  *new_conn = NULL;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d109      	bne.n	800ea08 <netconn_accept+0x44>
 800e9f4:	4b35      	ldr	r3, [pc, #212]	; (800eacc <netconn_accept+0x108>)
 800e9f6:	f240 12e3 	movw	r2, #483	; 0x1e3
 800e9fa:	4937      	ldr	r1, [pc, #220]	; (800ead8 <netconn_accept+0x114>)
 800e9fc:	4835      	ldr	r0, [pc, #212]	; (800ead4 <netconn_accept+0x110>)
 800e9fe:	f010 fa11 	bl	801ee24 <iprintf>
 800ea02:	f06f 030f 	mvn.w	r3, #15
 800ea06:	e05c      	b.n	800eac2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f000 fa9a 	bl	800ef42 <netconn_err>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ea12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d002      	beq.n	800ea20 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ea1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea1e:	e050      	b.n	800eac2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	3314      	adds	r3, #20
 800ea24:	4618      	mov	r0, r3
 800ea26:	f00f fa34 	bl	801de92 <sys_mbox_valid>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <netconn_accept+0x78>
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7f1b      	ldrb	r3, [r3, #28]
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d002      	beq.n	800ea42 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800ea3c:	f06f 030e 	mvn.w	r3, #14
 800ea40:	e03f      	b.n	800eac2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7f1b      	ldrb	r3, [r3, #28]
 800ea46:	f003 0302 	and.w	r3, r3, #2
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00e      	beq.n	800ea6c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	3314      	adds	r3, #20
 800ea52:	f107 020c 	add.w	r2, r7, #12
 800ea56:	4611      	mov	r1, r2
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f00f f9fe 	bl	801de5a <sys_arch_mbox_tryfetch>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea64:	d10a      	bne.n	800ea7c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800ea66:	f06f 0306 	mvn.w	r3, #6
 800ea6a:	e02a      	b.n	800eac2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3314      	adds	r3, #20
 800ea70:	f107 010c 	add.w	r1, r7, #12
 800ea74:	2200      	movs	r2, #0
 800ea76:	4618      	mov	r0, r3
 800ea78:	f00f f9b0 	bl	801dddc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d005      	beq.n	800ea90 <netconn_accept+0xcc>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f107 0213 	add.w	r2, r7, #19
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 faa3 	bl	800efe4 <lwip_netconn_is_err_msg>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d002      	beq.n	800eaaa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800eaa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eaa8:	e00b      	b.n	800eac2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d102      	bne.n	800eab6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800eab0:	f06f 030e 	mvn.w	r3, #14
 800eab4:	e005      	b.n	800eac2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	697a      	ldr	r2, [r7, #20]
 800eabe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800eac0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	08020aa8 	.word	0x08020aa8
 800ead0:	08020c80 	.word	0x08020c80
 800ead4:	08020b00 	.word	0x08020b00
 800ead8:	08020ca0 	.word	0x08020ca0

0800eadc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b088      	sub	sp, #32
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	60f8      	str	r0, [r7, #12]
 800eae4:	60b9      	str	r1, [r7, #8]
 800eae6:	4613      	mov	r3, r2
 800eae8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800eaea:	2300      	movs	r3, #0
 800eaec:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d109      	bne.n	800eb08 <netconn_recv_data+0x2c>
 800eaf4:	4b58      	ldr	r3, [pc, #352]	; (800ec58 <netconn_recv_data+0x17c>)
 800eaf6:	f44f 7212 	mov.w	r2, #584	; 0x248
 800eafa:	4958      	ldr	r1, [pc, #352]	; (800ec5c <netconn_recv_data+0x180>)
 800eafc:	4858      	ldr	r0, [pc, #352]	; (800ec60 <netconn_recv_data+0x184>)
 800eafe:	f010 f991 	bl	801ee24 <iprintf>
 800eb02:	f06f 030f 	mvn.w	r3, #15
 800eb06:	e0a2      	b.n	800ec4e <netconn_recv_data+0x172>
  *new_buf = NULL;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d109      	bne.n	800eb28 <netconn_recv_data+0x4c>
 800eb14:	4b50      	ldr	r3, [pc, #320]	; (800ec58 <netconn_recv_data+0x17c>)
 800eb16:	f240 224a 	movw	r2, #586	; 0x24a
 800eb1a:	4952      	ldr	r1, [pc, #328]	; (800ec64 <netconn_recv_data+0x188>)
 800eb1c:	4850      	ldr	r0, [pc, #320]	; (800ec60 <netconn_recv_data+0x184>)
 800eb1e:	f010 f981 	bl	801ee24 <iprintf>
 800eb22:	f06f 030f 	mvn.w	r3, #15
 800eb26:	e092      	b.n	800ec4e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	3310      	adds	r3, #16
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f00f f9b0 	bl	801de92 <sys_mbox_valid>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10e      	bne.n	800eb56 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f000 fa02 	bl	800ef42 <netconn_err>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800eb42:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800eb4a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800eb4e:	e07e      	b.n	800ec4e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800eb50:	f06f 030a 	mvn.w	r3, #10
 800eb54:	e07b      	b.n	800ec4e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	7f1b      	ldrb	r3, [r3, #28]
 800eb5a:	f003 0302 	and.w	r3, r3, #2
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d10f      	bne.n	800eb82 <netconn_recv_data+0xa6>
 800eb62:	79fb      	ldrb	r3, [r7, #7]
 800eb64:	f003 0304 	and.w	r3, r3, #4
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	7f1b      	ldrb	r3, [r3, #28]
 800eb70:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d104      	bne.n	800eb82 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d023      	beq.n	800ebca <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	3310      	adds	r3, #16
 800eb86:	f107 0218 	add.w	r2, r7, #24
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f00f f964 	bl	801de5a <sys_arch_mbox_tryfetch>
 800eb92:	4603      	mov	r3, r0
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb98:	d11f      	bne.n	800ebda <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f000 f9d1 	bl	800ef42 <netconn_err>
 800eba0:	4603      	mov	r3, r0
 800eba2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800eba4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d002      	beq.n	800ebb2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800ebac:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ebb0:	e04d      	b.n	800ec4e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	7f1b      	ldrb	r3, [r3, #28]
 800ebb6:	f003 0301 	and.w	r3, r3, #1
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800ebbe:	f06f 030a 	mvn.w	r3, #10
 800ebc2:	e044      	b.n	800ec4e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800ebc4:	f06f 0306 	mvn.w	r3, #6
 800ebc8:	e041      	b.n	800ec4e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3310      	adds	r3, #16
 800ebce:	f107 0118 	add.w	r1, r7, #24
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f00f f901 	bl	801dddc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ebe2:	2b10      	cmp	r3, #16
 800ebe4:	d117      	bne.n	800ec16 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	f107 0217 	add.w	r2, r7, #23
 800ebec:	4611      	mov	r1, r2
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 f9f8 	bl	800efe4 <lwip_netconn_is_err_msg>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d009      	beq.n	800ec0e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ebfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ebfe:	f113 0f0f 	cmn.w	r3, #15
 800ec02:	d101      	bne.n	800ec08 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	e022      	b.n	800ec4e <netconn_recv_data+0x172>
      }
      return err;
 800ec08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec0c:	e01f      	b.n	800ec4e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	891b      	ldrh	r3, [r3, #8]
 800ec12:	83fb      	strh	r3, [r7, #30]
 800ec14:	e00d      	b.n	800ec32 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ec16:	69bb      	ldr	r3, [r7, #24]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d106      	bne.n	800ec2a <netconn_recv_data+0x14e>
 800ec1c:	4b0e      	ldr	r3, [pc, #56]	; (800ec58 <netconn_recv_data+0x17c>)
 800ec1e:	f240 2291 	movw	r2, #657	; 0x291
 800ec22:	4911      	ldr	r1, [pc, #68]	; (800ec68 <netconn_recv_data+0x18c>)
 800ec24:	480e      	ldr	r0, [pc, #56]	; (800ec60 <netconn_recv_data+0x184>)
 800ec26:	f010 f8fd 	bl	801ee24 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	891b      	ldrh	r3, [r3, #8]
 800ec30:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d005      	beq.n	800ec46 <netconn_recv_data+0x16a>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3e:	8bfa      	ldrh	r2, [r7, #30]
 800ec40:	2101      	movs	r1, #1
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3720      	adds	r7, #32
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	08020aa8 	.word	0x08020aa8
 800ec5c:	08020cc0 	.word	0x08020cc0
 800ec60:	08020b00 	.word	0x08020b00
 800ec64:	08020ce0 	.word	0x08020ce0
 800ec68:	08020cfc 	.word	0x08020cfc

0800ec6c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d005      	beq.n	800ec8a <netconn_tcp_recvd_msg+0x1e>
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ec86:	2b10      	cmp	r3, #16
 800ec88:	d009      	beq.n	800ec9e <netconn_tcp_recvd_msg+0x32>
 800ec8a:	4b0c      	ldr	r3, [pc, #48]	; (800ecbc <netconn_tcp_recvd_msg+0x50>)
 800ec8c:	f240 22a7 	movw	r2, #679	; 0x2a7
 800ec90:	490b      	ldr	r1, [pc, #44]	; (800ecc0 <netconn_tcp_recvd_msg+0x54>)
 800ec92:	480c      	ldr	r0, [pc, #48]	; (800ecc4 <netconn_tcp_recvd_msg+0x58>)
 800ec94:	f010 f8c6 	bl	801ee24 <iprintf>
 800ec98:	f06f 030f 	mvn.w	r3, #15
 800ec9c:	e00a      	b.n	800ecb4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	68ba      	ldr	r2, [r7, #8]
 800eca8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	4806      	ldr	r0, [pc, #24]	; (800ecc8 <netconn_tcp_recvd_msg+0x5c>)
 800ecae:	f7ff fd4d 	bl	800e74c <netconn_apimsg>
 800ecb2:	4603      	mov	r3, r0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3710      	adds	r7, #16
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}
 800ecbc:	08020aa8 	.word	0x08020aa8
 800ecc0:	08020d08 	.word	0x08020d08
 800ecc4:	08020b00 	.word	0x08020b00
 800ecc8:	080100f1 	.word	0x080100f1

0800eccc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b090      	sub	sp, #64	; 0x40
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	4613      	mov	r3, r2
 800ecd8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	3310      	adds	r3, #16
 800ecde:	4618      	mov	r0, r3
 800ece0:	f00f f8d7 	bl	801de92 <sys_mbox_valid>
 800ece4:	4603      	mov	r3, r0
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d102      	bne.n	800ecf0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800ecea:	f06f 030a 	mvn.w	r3, #10
 800ecee:	e06d      	b.n	800edcc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	7f1b      	ldrb	r3, [r3, #28]
 800ecf4:	b25b      	sxtb	r3, r3
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	da07      	bge.n	800ed0a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	7f1b      	ldrb	r3, [r3, #28]
 800ecfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed02:	b2da      	uxtb	r2, r3
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800ed08:	e039      	b.n	800ed7e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ed0a:	79fb      	ldrb	r3, [r7, #7]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	68b9      	ldr	r1, [r7, #8]
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f7ff fee3 	bl	800eadc <netconn_recv_data>
 800ed16:	4603      	mov	r3, r0
 800ed18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ed1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ed24:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ed28:	e050      	b.n	800edcc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ed30:	79fb      	ldrb	r3, [r7, #7]
 800ed32:	f003 0308 	and.w	r3, r3, #8
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d10e      	bne.n	800ed58 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d002      	beq.n	800ed46 <netconn_recv_data_tcp+0x7a>
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	891b      	ldrh	r3, [r3, #8]
 800ed44:	e000      	b.n	800ed48 <netconn_recv_data_tcp+0x7c>
 800ed46:	2301      	movs	r3, #1
 800ed48:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ed4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed4c:	f107 0214 	add.w	r2, r7, #20
 800ed50:	4619      	mov	r1, r3
 800ed52:	68f8      	ldr	r0, [r7, #12]
 800ed54:	f7ff ff8a 	bl	800ec6c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d134      	bne.n	800edc8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ed5e:	79fb      	ldrb	r3, [r7, #7]
 800ed60:	f003 0310 	and.w	r3, r3, #16
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d009      	beq.n	800ed7c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	7f1b      	ldrb	r3, [r3, #28]
 800ed6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ed70:	b2da      	uxtb	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ed76:	f06f 0306 	mvn.w	r3, #6
 800ed7a:	e027      	b.n	800edcc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ed7c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d005      	beq.n	800ed92 <netconn_recv_data_tcp+0xc6>
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10f      	bne.n	800edba <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f000 f8d1 	bl	800ef42 <netconn_err>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800eda6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d002      	beq.n	800edb4 <netconn_recv_data_tcp+0xe8>
          return err;
 800edae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800edb2:	e00b      	b.n	800edcc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800edb4:	f06f 030d 	mvn.w	r3, #13
 800edb8:	e008      	b.n	800edcc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800edba:	2101      	movs	r1, #1
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f000 f883 	bl	800eec8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800edc2:	f06f 030e 	mvn.w	r3, #14
 800edc6:	e001      	b.n	800edcc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800edc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3740      	adds	r7, #64	; 0x40
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800edde:	2300      	movs	r3, #0
 800ede0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d109      	bne.n	800edfc <netconn_recv+0x28>
 800ede8:	4b32      	ldr	r3, [pc, #200]	; (800eeb4 <netconn_recv+0xe0>)
 800edea:	f240 3263 	movw	r2, #867	; 0x363
 800edee:	4932      	ldr	r1, [pc, #200]	; (800eeb8 <netconn_recv+0xe4>)
 800edf0:	4832      	ldr	r0, [pc, #200]	; (800eebc <netconn_recv+0xe8>)
 800edf2:	f010 f817 	bl	801ee24 <iprintf>
 800edf6:	f06f 030f 	mvn.w	r3, #15
 800edfa:	e056      	b.n	800eeaa <netconn_recv+0xd6>
  *new_buf = NULL;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2200      	movs	r2, #0
 800ee00:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d109      	bne.n	800ee1c <netconn_recv+0x48>
 800ee08:	4b2a      	ldr	r3, [pc, #168]	; (800eeb4 <netconn_recv+0xe0>)
 800ee0a:	f240 3265 	movw	r2, #869	; 0x365
 800ee0e:	492c      	ldr	r1, [pc, #176]	; (800eec0 <netconn_recv+0xec>)
 800ee10:	482a      	ldr	r0, [pc, #168]	; (800eebc <netconn_recv+0xe8>)
 800ee12:	f010 f807 	bl	801ee24 <iprintf>
 800ee16:	f06f 030f 	mvn.w	r3, #15
 800ee1a:	e046      	b.n	800eeaa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee24:	2b10      	cmp	r3, #16
 800ee26:	d13a      	bne.n	800ee9e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ee2c:	2006      	movs	r0, #6
 800ee2e:	f002 fd09 	bl	8011844 <memp_malloc>
 800ee32:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d102      	bne.n	800ee40 <netconn_recv+0x6c>
      return ERR_MEM;
 800ee3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee3e:	e034      	b.n	800eeaa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ee40:	f107 030c 	add.w	r3, r7, #12
 800ee44:	2200      	movs	r2, #0
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff ff3f 	bl	800eccc <netconn_recv_data_tcp>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ee52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d006      	beq.n	800ee68 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ee5a:	6979      	ldr	r1, [r7, #20]
 800ee5c:	2006      	movs	r0, #6
 800ee5e:	f002 fd67 	bl	8011930 <memp_free>
      return err;
 800ee62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee66:	e020      	b.n	800eeaa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d106      	bne.n	800ee7c <netconn_recv+0xa8>
 800ee6e:	4b11      	ldr	r3, [pc, #68]	; (800eeb4 <netconn_recv+0xe0>)
 800ee70:	f240 3279 	movw	r2, #889	; 0x379
 800ee74:	4913      	ldr	r1, [pc, #76]	; (800eec4 <netconn_recv+0xf0>)
 800ee76:	4811      	ldr	r0, [pc, #68]	; (800eebc <netconn_recv+0xe8>)
 800ee78:	f00f ffd4 	bl	801ee24 <iprintf>

    buf->p = p;
 800ee7c:	68fa      	ldr	r2, [r7, #12]
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ee82:	68fa      	ldr	r2, [r7, #12]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2200      	movs	r2, #0
 800ee92:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	697a      	ldr	r2, [r7, #20]
 800ee98:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	e005      	b.n	800eeaa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ee9e:	2200      	movs	r2, #0
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f7ff fe1a 	bl	800eadc <netconn_recv_data>
 800eea8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3718      	adds	r7, #24
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	08020aa8 	.word	0x08020aa8
 800eeb8:	08020cc0 	.word	0x08020cc0
 800eebc:	08020b00 	.word	0x08020b00
 800eec0:	08020ce0 	.word	0x08020ce0
 800eec4:	08020d58 	.word	0x08020d58

0800eec8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b08c      	sub	sp, #48	; 0x30
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	460b      	mov	r3, r1
 800eed2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d109      	bne.n	800eeee <netconn_close_shutdown+0x26>
 800eeda:	4b0f      	ldr	r3, [pc, #60]	; (800ef18 <netconn_close_shutdown+0x50>)
 800eedc:	f240 4247 	movw	r2, #1095	; 0x447
 800eee0:	490e      	ldr	r1, [pc, #56]	; (800ef1c <netconn_close_shutdown+0x54>)
 800eee2:	480f      	ldr	r0, [pc, #60]	; (800ef20 <netconn_close_shutdown+0x58>)
 800eee4:	f00f ff9e 	bl	801ee24 <iprintf>
 800eee8:	f06f 030f 	mvn.w	r3, #15
 800eeec:	e010      	b.n	800ef10 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800eef2:	78fb      	ldrb	r3, [r7, #3]
 800eef4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800eef6:	2329      	movs	r3, #41	; 0x29
 800eef8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800eefa:	f107 030c 	add.w	r3, r7, #12
 800eefe:	4619      	mov	r1, r3
 800ef00:	4808      	ldr	r0, [pc, #32]	; (800ef24 <netconn_close_shutdown+0x5c>)
 800ef02:	f7ff fc23 	bl	800e74c <netconn_apimsg>
 800ef06:	4603      	mov	r3, r0
 800ef08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ef0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3730      	adds	r7, #48	; 0x30
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	08020aa8 	.word	0x08020aa8
 800ef1c:	08020de4 	.word	0x08020de4
 800ef20:	08020b00 	.word	0x08020b00
 800ef24:	080104f5 	.word	0x080104f5

0800ef28 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ef30:	2103      	movs	r1, #3
 800ef32:	6878      	ldr	r0, [r7, #4]
 800ef34:	f7ff ffc8 	bl	800eec8 <netconn_close_shutdown>
 800ef38:	4603      	mov	r3, r0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3708      	adds	r7, #8
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}

0800ef42 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ef42:	b580      	push	{r7, lr}
 800ef44:	b084      	sub	sp, #16
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d101      	bne.n	800ef54 <netconn_err+0x12>
    return ERR_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	e00d      	b.n	800ef70 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ef54:	f00f f8b8 	bl	801e0c8 <sys_arch_protect>
 800ef58:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	7a1b      	ldrb	r3, [r3, #8]
 800ef5e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2200      	movs	r2, #0
 800ef64:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ef66:	68f8      	ldr	r0, [r7, #12]
 800ef68:	f00f f8bc 	bl	801e0e4 <sys_arch_unprotect>
  return err;
 800ef6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	3710      	adds	r7, #16
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4603      	mov	r3, r0
 800ef80:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ef82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ef86:	f113 0f0d 	cmn.w	r3, #13
 800ef8a:	d009      	beq.n	800efa0 <lwip_netconn_err_to_msg+0x28>
 800ef8c:	f113 0f0d 	cmn.w	r3, #13
 800ef90:	dc0c      	bgt.n	800efac <lwip_netconn_err_to_msg+0x34>
 800ef92:	f113 0f0f 	cmn.w	r3, #15
 800ef96:	d007      	beq.n	800efa8 <lwip_netconn_err_to_msg+0x30>
 800ef98:	f113 0f0e 	cmn.w	r3, #14
 800ef9c:	d002      	beq.n	800efa4 <lwip_netconn_err_to_msg+0x2c>
 800ef9e:	e005      	b.n	800efac <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800efa0:	4b0a      	ldr	r3, [pc, #40]	; (800efcc <lwip_netconn_err_to_msg+0x54>)
 800efa2:	e00e      	b.n	800efc2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800efa4:	4b0a      	ldr	r3, [pc, #40]	; (800efd0 <lwip_netconn_err_to_msg+0x58>)
 800efa6:	e00c      	b.n	800efc2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800efa8:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <lwip_netconn_err_to_msg+0x5c>)
 800efaa:	e00a      	b.n	800efc2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800efac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <lwip_netconn_err_to_msg+0x48>
 800efb4:	4b08      	ldr	r3, [pc, #32]	; (800efd8 <lwip_netconn_err_to_msg+0x60>)
 800efb6:	227d      	movs	r2, #125	; 0x7d
 800efb8:	4908      	ldr	r1, [pc, #32]	; (800efdc <lwip_netconn_err_to_msg+0x64>)
 800efba:	4809      	ldr	r0, [pc, #36]	; (800efe0 <lwip_netconn_err_to_msg+0x68>)
 800efbc:	f00f ff32 	bl	801ee24 <iprintf>
      return NULL;
 800efc0:	2300      	movs	r3, #0
  }
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3708      	adds	r7, #8
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
 800efca:	bf00      	nop
 800efcc:	08024660 	.word	0x08024660
 800efd0:	08024661 	.word	0x08024661
 800efd4:	08024662 	.word	0x08024662
 800efd8:	08020e00 	.word	0x08020e00
 800efdc:	08020e34 	.word	0x08020e34
 800efe0:	08020e44 	.word	0x08020e44

0800efe4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d105      	bne.n	800f000 <lwip_netconn_is_err_msg+0x1c>
 800eff4:	4b12      	ldr	r3, [pc, #72]	; (800f040 <lwip_netconn_is_err_msg+0x5c>)
 800eff6:	2285      	movs	r2, #133	; 0x85
 800eff8:	4912      	ldr	r1, [pc, #72]	; (800f044 <lwip_netconn_is_err_msg+0x60>)
 800effa:	4813      	ldr	r0, [pc, #76]	; (800f048 <lwip_netconn_is_err_msg+0x64>)
 800effc:	f00f ff12 	bl	801ee24 <iprintf>

  if (msg == &netconn_aborted) {
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a12      	ldr	r2, [pc, #72]	; (800f04c <lwip_netconn_is_err_msg+0x68>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d104      	bne.n	800f012 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	22f3      	movs	r2, #243	; 0xf3
 800f00c:	701a      	strb	r2, [r3, #0]
    return 1;
 800f00e:	2301      	movs	r3, #1
 800f010:	e012      	b.n	800f038 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4a0e      	ldr	r2, [pc, #56]	; (800f050 <lwip_netconn_is_err_msg+0x6c>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d104      	bne.n	800f024 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	22f2      	movs	r2, #242	; 0xf2
 800f01e:	701a      	strb	r2, [r3, #0]
    return 1;
 800f020:	2301      	movs	r3, #1
 800f022:	e009      	b.n	800f038 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a0b      	ldr	r2, [pc, #44]	; (800f054 <lwip_netconn_is_err_msg+0x70>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d104      	bne.n	800f036 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	22f1      	movs	r2, #241	; 0xf1
 800f030:	701a      	strb	r2, [r3, #0]
    return 1;
 800f032:	2301      	movs	r3, #1
 800f034:	e000      	b.n	800f038 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f036:	2300      	movs	r3, #0
}
 800f038:	4618      	mov	r0, r3
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08020e00 	.word	0x08020e00
 800f044:	08020e6c 	.word	0x08020e6c
 800f048:	08020e44 	.word	0x08020e44
 800f04c:	08024660 	.word	0x08024660
 800f050:	08024661 	.word	0x08024661
 800f054:	08024662 	.word	0x08024662

0800f058 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b088      	sub	sp, #32
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
 800f064:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d105      	bne.n	800f078 <recv_udp+0x20>
 800f06c:	4b34      	ldr	r3, [pc, #208]	; (800f140 <recv_udp+0xe8>)
 800f06e:	22e5      	movs	r2, #229	; 0xe5
 800f070:	4934      	ldr	r1, [pc, #208]	; (800f144 <recv_udp+0xec>)
 800f072:	4835      	ldr	r0, [pc, #212]	; (800f148 <recv_udp+0xf0>)
 800f074:	f00f fed6 	bl	801ee24 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d105      	bne.n	800f08a <recv_udp+0x32>
 800f07e:	4b30      	ldr	r3, [pc, #192]	; (800f140 <recv_udp+0xe8>)
 800f080:	22e6      	movs	r2, #230	; 0xe6
 800f082:	4932      	ldr	r1, [pc, #200]	; (800f14c <recv_udp+0xf4>)
 800f084:	4830      	ldr	r0, [pc, #192]	; (800f148 <recv_udp+0xf0>)
 800f086:	f00f fecd 	bl	801ee24 <iprintf>
  conn = (struct netconn *)arg;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <recv_udp+0x44>
    pbuf_free(p);
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	f003 fb33 	bl	8012700 <pbuf_free>
    return;
 800f09a:	e04d      	b.n	800f138 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	429a      	cmp	r2, r3
 800f0a4:	d005      	beq.n	800f0b2 <recv_udp+0x5a>
 800f0a6:	4b26      	ldr	r3, [pc, #152]	; (800f140 <recv_udp+0xe8>)
 800f0a8:	22ee      	movs	r2, #238	; 0xee
 800f0aa:	4929      	ldr	r1, [pc, #164]	; (800f150 <recv_udp+0xf8>)
 800f0ac:	4826      	ldr	r0, [pc, #152]	; (800f148 <recv_udp+0xf0>)
 800f0ae:	f00f feb9 	bl	801ee24 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f0b2:	69fb      	ldr	r3, [r7, #28]
 800f0b4:	3310      	adds	r3, #16
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f00e feeb 	bl	801de92 <sys_mbox_valid>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d103      	bne.n	800f0ca <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f003 fb1c 	bl	8012700 <pbuf_free>
    return;
 800f0c8:	e036      	b.n	800f138 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f0ca:	2006      	movs	r0, #6
 800f0cc:	f002 fbba 	bl	8011844 <memp_malloc>
 800f0d0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f0d2:	69bb      	ldr	r3, [r7, #24]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d103      	bne.n	800f0e0 <recv_udp+0x88>
    pbuf_free(p);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f003 fb11 	bl	8012700 <pbuf_free>
    return;
 800f0de:	e02b      	b.n	800f138 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f0e0:	69bb      	ldr	r3, [r7, #24]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	687a      	ldr	r2, [r7, #4]
 800f0ea:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d002      	beq.n	800f0f8 <recv_udp+0xa0>
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	e000      	b.n	800f0fa <recv_udp+0xa2>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	69ba      	ldr	r2, [r7, #24]
 800f0fc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f102:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	891b      	ldrh	r3, [r3, #8]
 800f108:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f10a:	69fb      	ldr	r3, [r7, #28]
 800f10c:	3310      	adds	r3, #16
 800f10e:	69b9      	ldr	r1, [r7, #24]
 800f110:	4618      	mov	r0, r3
 800f112:	f00e fe49 	bl	801dda8 <sys_mbox_trypost>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d003      	beq.n	800f124 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f11c:	69b8      	ldr	r0, [r7, #24]
 800f11e:	f001 fa75 	bl	801060c <netbuf_delete>
    return;
 800f122:	e009      	b.n	800f138 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f124:	69fb      	ldr	r3, [r7, #28]
 800f126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d005      	beq.n	800f138 <recv_udp+0xe0>
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f130:	8afa      	ldrh	r2, [r7, #22]
 800f132:	2100      	movs	r1, #0
 800f134:	69f8      	ldr	r0, [r7, #28]
 800f136:	4798      	blx	r3
  }
}
 800f138:	3720      	adds	r7, #32
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	08020e00 	.word	0x08020e00
 800f144:	08020e78 	.word	0x08020e78
 800f148:	08020e44 	.word	0x08020e44
 800f14c:	08020e9c 	.word	0x08020e9c
 800f150:	08020ebc 	.word	0x08020ebc

0800f154 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b088      	sub	sp, #32
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
 800f160:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d106      	bne.n	800f176 <recv_tcp+0x22>
 800f168:	4b36      	ldr	r3, [pc, #216]	; (800f244 <recv_tcp+0xf0>)
 800f16a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f16e:	4936      	ldr	r1, [pc, #216]	; (800f248 <recv_tcp+0xf4>)
 800f170:	4836      	ldr	r0, [pc, #216]	; (800f24c <recv_tcp+0xf8>)
 800f172:	f00f fe57 	bl	801ee24 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d106      	bne.n	800f18a <recv_tcp+0x36>
 800f17c:	4b31      	ldr	r3, [pc, #196]	; (800f244 <recv_tcp+0xf0>)
 800f17e:	f240 122d 	movw	r2, #301	; 0x12d
 800f182:	4933      	ldr	r1, [pc, #204]	; (800f250 <recv_tcp+0xfc>)
 800f184:	4831      	ldr	r0, [pc, #196]	; (800f24c <recv_tcp+0xf8>)
 800f186:	f00f fe4d 	bl	801ee24 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f18a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d006      	beq.n	800f1a0 <recv_tcp+0x4c>
 800f192:	4b2c      	ldr	r3, [pc, #176]	; (800f244 <recv_tcp+0xf0>)
 800f194:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f198:	492e      	ldr	r1, [pc, #184]	; (800f254 <recv_tcp+0x100>)
 800f19a:	482c      	ldr	r0, [pc, #176]	; (800f24c <recv_tcp+0xf8>)
 800f19c:	f00f fe42 	bl	801ee24 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d102      	bne.n	800f1b0 <recv_tcp+0x5c>
    return ERR_VAL;
 800f1aa:	f06f 0305 	mvn.w	r3, #5
 800f1ae:	e045      	b.n	800f23c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f1b0:	697b      	ldr	r3, [r7, #20]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d006      	beq.n	800f1c8 <recv_tcp+0x74>
 800f1ba:	4b22      	ldr	r3, [pc, #136]	; (800f244 <recv_tcp+0xf0>)
 800f1bc:	f240 1235 	movw	r2, #309	; 0x135
 800f1c0:	4925      	ldr	r1, [pc, #148]	; (800f258 <recv_tcp+0x104>)
 800f1c2:	4822      	ldr	r0, [pc, #136]	; (800f24c <recv_tcp+0xf8>)
 800f1c4:	f00f fe2e 	bl	801ee24 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	3310      	adds	r3, #16
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f00e fe60 	bl	801de92 <sys_mbox_valid>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10d      	bne.n	800f1f4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d008      	beq.n	800f1f0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	891b      	ldrh	r3, [r3, #8]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	68b8      	ldr	r0, [r7, #8]
 800f1e6:	f004 fa6d 	bl	80136c4 <tcp_recved>
      pbuf_free(p);
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f003 fa88 	bl	8012700 <pbuf_free>
    }
    return ERR_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e023      	b.n	800f23c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d005      	beq.n	800f206 <recv_tcp+0xb2>
    msg = p;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	891b      	ldrh	r3, [r3, #8]
 800f202:	83fb      	strh	r3, [r7, #30]
 800f204:	e003      	b.n	800f20e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f206:	4b15      	ldr	r3, [pc, #84]	; (800f25c <recv_tcp+0x108>)
 800f208:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	3310      	adds	r3, #16
 800f212:	69b9      	ldr	r1, [r7, #24]
 800f214:	4618      	mov	r0, r3
 800f216:	f00e fdc7 	bl	801dda8 <sys_mbox_trypost>
 800f21a:	4603      	mov	r3, r0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d002      	beq.n	800f226 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f224:	e00a      	b.n	800f23c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d005      	beq.n	800f23a <recv_tcp+0xe6>
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f232:	8bfa      	ldrh	r2, [r7, #30]
 800f234:	2100      	movs	r1, #0
 800f236:	6978      	ldr	r0, [r7, #20]
 800f238:	4798      	blx	r3
  }

  return ERR_OK;
 800f23a:	2300      	movs	r3, #0
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	08020e00 	.word	0x08020e00
 800f248:	08020edc 	.word	0x08020edc
 800f24c:	08020e44 	.word	0x08020e44
 800f250:	08020f00 	.word	0x08020f00
 800f254:	08020f20 	.word	0x08020f20
 800f258:	08020f38 	.word	0x08020f38
 800f25c:	08024662 	.word	0x08024662

0800f260 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b084      	sub	sp, #16
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d106      	bne.n	800f282 <poll_tcp+0x22>
 800f274:	4b29      	ldr	r3, [pc, #164]	; (800f31c <poll_tcp+0xbc>)
 800f276:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f27a:	4929      	ldr	r1, [pc, #164]	; (800f320 <poll_tcp+0xc0>)
 800f27c:	4829      	ldr	r0, [pc, #164]	; (800f324 <poll_tcp+0xc4>)
 800f27e:	f00f fdd1 	bl	801ee24 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	785b      	ldrb	r3, [r3, #1]
 800f286:	2b01      	cmp	r3, #1
 800f288:	d104      	bne.n	800f294 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f28a:	2101      	movs	r1, #1
 800f28c:	68f8      	ldr	r0, [r7, #12]
 800f28e:	f000 ff65 	bl	801015c <lwip_netconn_do_writemore>
 800f292:	e016      	b.n	800f2c2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	785b      	ldrb	r3, [r3, #1]
 800f298:	2b04      	cmp	r3, #4
 800f29a:	d112      	bne.n	800f2c2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6a1b      	ldr	r3, [r3, #32]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00a      	beq.n	800f2ba <poll_tcp+0x5a>
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	6a1b      	ldr	r3, [r3, #32]
 800f2a8:	7a5b      	ldrb	r3, [r3, #9]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d005      	beq.n	800f2ba <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	7a5a      	ldrb	r2, [r3, #9]
 800f2b4:	3a01      	subs	r2, #1
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f2ba:	2101      	movs	r1, #1
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f000 fbf7 	bl	800fab0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	7f1b      	ldrb	r3, [r3, #28]
 800f2c6:	f003 0310 	and.w	r3, r3, #16
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d021      	beq.n	800f312 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d01d      	beq.n	800f312 <poll_tcp+0xb2>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f2de:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f2e2:	d316      	bcc.n	800f312 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f2ec:	2b04      	cmp	r3, #4
 800f2ee:	d810      	bhi.n	800f312 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	7f1b      	ldrb	r3, [r3, #28]
 800f2f4:	f023 0310 	bic.w	r3, r3, #16
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	2b00      	cmp	r3, #0
 800f304:	d005      	beq.n	800f312 <poll_tcp+0xb2>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30a:	2200      	movs	r2, #0
 800f30c:	2102      	movs	r1, #2
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f312:	2300      	movs	r3, #0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3710      	adds	r7, #16
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	08020e00 	.word	0x08020e00
 800f320:	08020f58 	.word	0x08020f58
 800f324:	08020e44 	.word	0x08020e44

0800f328 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	4613      	mov	r3, r2
 800f334:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d106      	bne.n	800f34e <sent_tcp+0x26>
 800f340:	4b20      	ldr	r3, [pc, #128]	; (800f3c4 <sent_tcp+0x9c>)
 800f342:	f240 1293 	movw	r2, #403	; 0x193
 800f346:	4920      	ldr	r1, [pc, #128]	; (800f3c8 <sent_tcp+0xa0>)
 800f348:	4820      	ldr	r0, [pc, #128]	; (800f3cc <sent_tcp+0xa4>)
 800f34a:	f00f fd6b 	bl	801ee24 <iprintf>

  if (conn) {
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d032      	beq.n	800f3ba <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	785b      	ldrb	r3, [r3, #1]
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d104      	bne.n	800f366 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f35c:	2101      	movs	r1, #1
 800f35e:	6978      	ldr	r0, [r7, #20]
 800f360:	f000 fefc 	bl	801015c <lwip_netconn_do_writemore>
 800f364:	e007      	b.n	800f376 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	785b      	ldrb	r3, [r3, #1]
 800f36a:	2b04      	cmp	r3, #4
 800f36c:	d103      	bne.n	800f376 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f36e:	2101      	movs	r1, #1
 800f370:	6978      	ldr	r0, [r7, #20]
 800f372:	f000 fb9d 	bl	800fab0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d01d      	beq.n	800f3ba <sent_tcp+0x92>
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f386:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f38a:	d316      	bcc.n	800f3ba <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f394:	2b04      	cmp	r3, #4
 800f396:	d810      	bhi.n	800f3ba <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	7f1b      	ldrb	r3, [r3, #28]
 800f39c:	f023 0310 	bic.w	r3, r3, #16
 800f3a0:	b2da      	uxtb	r2, r3
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d005      	beq.n	800f3ba <sent_tcp+0x92>
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b2:	88fa      	ldrh	r2, [r7, #6]
 800f3b4:	2102      	movs	r1, #2
 800f3b6:	6978      	ldr	r0, [r7, #20]
 800f3b8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3718      	adds	r7, #24
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	08020e00 	.word	0x08020e00
 800f3c8:	08020f58 	.word	0x08020f58
 800f3cc:	08020e44 	.word	0x08020e44

0800f3d0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b088      	sub	sp, #32
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	460b      	mov	r3, r1
 800f3da:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d106      	bne.n	800f3f4 <err_tcp+0x24>
 800f3e6:	4b5f      	ldr	r3, [pc, #380]	; (800f564 <err_tcp+0x194>)
 800f3e8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800f3ec:	495e      	ldr	r1, [pc, #376]	; (800f568 <err_tcp+0x198>)
 800f3ee:	485f      	ldr	r0, [pc, #380]	; (800f56c <err_tcp+0x19c>)
 800f3f0:	f00f fd18 	bl	801ee24 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800f3f4:	f00e fe68 	bl	801e0c8 <sys_arch_protect>
 800f3f8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	78fa      	ldrb	r2, [r7, #3]
 800f404:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	7f1b      	ldrb	r3, [r3, #28]
 800f40a:	f043 0301 	orr.w	r3, r3, #1
 800f40e:	b2da      	uxtb	r2, r3
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800f414:	69fb      	ldr	r3, [r7, #28]
 800f416:	785b      	ldrb	r3, [r3, #1]
 800f418:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	2200      	movs	r2, #0
 800f41e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800f420:	69b8      	ldr	r0, [r7, #24]
 800f422:	f00e fe5f 	bl	801e0e4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d005      	beq.n	800f43a <err_tcp+0x6a>
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f432:	2200      	movs	r2, #0
 800f434:	2104      	movs	r1, #4
 800f436:	69f8      	ldr	r0, [r7, #28]
 800f438:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d005      	beq.n	800f44e <err_tcp+0x7e>
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f446:	2200      	movs	r2, #0
 800f448:	2100      	movs	r1, #0
 800f44a:	69f8      	ldr	r0, [r7, #28]
 800f44c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f452:	2b00      	cmp	r3, #0
 800f454:	d005      	beq.n	800f462 <err_tcp+0x92>
 800f456:	69fb      	ldr	r3, [r7, #28]
 800f458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45a:	2200      	movs	r2, #0
 800f45c:	2102      	movs	r1, #2
 800f45e:	69f8      	ldr	r0, [r7, #28]
 800f460:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800f462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff fd86 	bl	800ef78 <lwip_netconn_err_to_msg>
 800f46c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f46e:	69fb      	ldr	r3, [r7, #28]
 800f470:	3310      	adds	r3, #16
 800f472:	4618      	mov	r0, r3
 800f474:	f00e fd0d 	bl	801de92 <sys_mbox_valid>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d005      	beq.n	800f48a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	3310      	adds	r3, #16
 800f482:	6939      	ldr	r1, [r7, #16]
 800f484:	4618      	mov	r0, r3
 800f486:	f00e fc8f 	bl	801dda8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	3314      	adds	r3, #20
 800f48e:	4618      	mov	r0, r3
 800f490:	f00e fcff 	bl	801de92 <sys_mbox_valid>
 800f494:	4603      	mov	r3, r0
 800f496:	2b00      	cmp	r3, #0
 800f498:	d005      	beq.n	800f4a6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800f49a:	69fb      	ldr	r3, [r7, #28]
 800f49c:	3314      	adds	r3, #20
 800f49e:	6939      	ldr	r1, [r7, #16]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f00e fc81 	bl	801dda8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800f4a6:	7dfb      	ldrb	r3, [r7, #23]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d005      	beq.n	800f4b8 <err_tcp+0xe8>
 800f4ac:	7dfb      	ldrb	r3, [r7, #23]
 800f4ae:	2b04      	cmp	r3, #4
 800f4b0:	d002      	beq.n	800f4b8 <err_tcp+0xe8>
 800f4b2:	7dfb      	ldrb	r3, [r7, #23]
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d143      	bne.n	800f540 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	7f1b      	ldrb	r3, [r3, #28]
 800f4bc:	f003 0304 	and.w	r3, r3, #4
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	bf14      	ite	ne
 800f4c4:	2301      	movne	r3, #1
 800f4c6:	2300      	moveq	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	7f1b      	ldrb	r3, [r3, #28]
 800f4d0:	f023 0304 	bic.w	r3, r3, #4
 800f4d4:	b2da      	uxtb	r2, r3
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d13b      	bne.n	800f558 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f4e0:	69fb      	ldr	r3, [r7, #28]
 800f4e2:	6a1b      	ldr	r3, [r3, #32]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d106      	bne.n	800f4f6 <err_tcp+0x126>
 800f4e8:	4b1e      	ldr	r3, [pc, #120]	; (800f564 <err_tcp+0x194>)
 800f4ea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f4ee:	4920      	ldr	r1, [pc, #128]	; (800f570 <err_tcp+0x1a0>)
 800f4f0:	481e      	ldr	r0, [pc, #120]	; (800f56c <err_tcp+0x19c>)
 800f4f2:	f00f fc97 	bl	801ee24 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800f4f6:	7dfb      	ldrb	r3, [r7, #23]
 800f4f8:	2b04      	cmp	r3, #4
 800f4fa:	d104      	bne.n	800f506 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	6a1b      	ldr	r3, [r3, #32]
 800f500:	2200      	movs	r2, #0
 800f502:	711a      	strb	r2, [r3, #4]
 800f504:	e003      	b.n	800f50e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800f506:	69fb      	ldr	r3, [r7, #28]
 800f508:	6a1b      	ldr	r3, [r3, #32]
 800f50a:	78fa      	ldrb	r2, [r7, #3]
 800f50c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	6a1b      	ldr	r3, [r3, #32]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	330c      	adds	r3, #12
 800f516:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800f518:	68b8      	ldr	r0, [r7, #8]
 800f51a:	f00e fd4b 	bl	801dfb4 <sys_sem_valid>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <err_tcp+0x162>
 800f524:	4b0f      	ldr	r3, [pc, #60]	; (800f564 <err_tcp+0x194>)
 800f526:	f240 12ef 	movw	r2, #495	; 0x1ef
 800f52a:	4912      	ldr	r1, [pc, #72]	; (800f574 <err_tcp+0x1a4>)
 800f52c:	480f      	ldr	r0, [pc, #60]	; (800f56c <err_tcp+0x19c>)
 800f52e:	f00f fc79 	bl	801ee24 <iprintf>
      conn->current_msg = NULL;
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	2200      	movs	r2, #0
 800f536:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800f538:	68b8      	ldr	r0, [r7, #8]
 800f53a:	f00e fd21 	bl	801df80 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800f53e:	e00b      	b.n	800f558 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	6a1b      	ldr	r3, [r3, #32]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d008      	beq.n	800f55a <err_tcp+0x18a>
 800f548:	4b06      	ldr	r3, [pc, #24]	; (800f564 <err_tcp+0x194>)
 800f54a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800f54e:	490a      	ldr	r1, [pc, #40]	; (800f578 <err_tcp+0x1a8>)
 800f550:	4806      	ldr	r0, [pc, #24]	; (800f56c <err_tcp+0x19c>)
 800f552:	f00f fc67 	bl	801ee24 <iprintf>
  }
}
 800f556:	e000      	b.n	800f55a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800f558:	bf00      	nop
}
 800f55a:	bf00      	nop
 800f55c:	3720      	adds	r7, #32
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	08020e00 	.word	0x08020e00
 800f568:	08020f58 	.word	0x08020f58
 800f56c:	08020e44 	.word	0x08020e44
 800f570:	08020f68 	.word	0x08020f68
 800f574:	08020f84 	.word	0x08020f84
 800f578:	08020fa0 	.word	0x08020fa0

0800f57c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800f58a:	6879      	ldr	r1, [r7, #4]
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f004 ff5f 	bl	8014450 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800f592:	490a      	ldr	r1, [pc, #40]	; (800f5bc <setup_tcp+0x40>)
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f004 ff6d 	bl	8014474 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800f59a:	4909      	ldr	r1, [pc, #36]	; (800f5c0 <setup_tcp+0x44>)
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f004 ff8b 	bl	80144b8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800f5a2:	2202      	movs	r2, #2
 800f5a4:	4907      	ldr	r1, [pc, #28]	; (800f5c4 <setup_tcp+0x48>)
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f004 ffe2 	bl	8014570 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800f5ac:	4906      	ldr	r1, [pc, #24]	; (800f5c8 <setup_tcp+0x4c>)
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f004 ffa4 	bl	80144fc <tcp_err>
}
 800f5b4:	bf00      	nop
 800f5b6:	3710      	adds	r7, #16
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	0800f155 	.word	0x0800f155
 800f5c0:	0800f329 	.word	0x0800f329
 800f5c4:	0800f261 	.word	0x0800f261
 800f5c8:	0800f3d1 	.word	0x0800f3d1

0800f5cc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800f5cc:	b590      	push	{r4, r7, lr}
 800f5ce:	b089      	sub	sp, #36	; 0x24
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	60f8      	str	r0, [r7, #12]
 800f5d4:	60b9      	str	r1, [r7, #8]
 800f5d6:	4613      	mov	r3, r2
 800f5d8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d102      	bne.n	800f5ea <accept_function+0x1e>
    return ERR_VAL;
 800f5e4:	f06f 0305 	mvn.w	r3, #5
 800f5e8:	e0a1      	b.n	800f72e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	3314      	adds	r3, #20
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f00e fc4f 	bl	801de92 <sys_mbox_valid>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d102      	bne.n	800f600 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800f5fa:	f06f 0305 	mvn.w	r3, #5
 800f5fe:	e096      	b.n	800f72e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d11b      	bne.n	800f63e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f606:	69fb      	ldr	r3, [r7, #28]
 800f608:	f103 0414 	add.w	r4, r3, #20
 800f60c:	f06f 000c 	mvn.w	r0, #12
 800f610:	f7ff fcb2 	bl	800ef78 <lwip_netconn_err_to_msg>
 800f614:	4603      	mov	r3, r0
 800f616:	4619      	mov	r1, r3
 800f618:	4620      	mov	r0, r4
 800f61a:	f00e fbc5 	bl	801dda8 <sys_mbox_trypost>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d109      	bne.n	800f638 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d005      	beq.n	800f638 <accept_function+0x6c>
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f630:	2200      	movs	r2, #0
 800f632:	2100      	movs	r1, #0
 800f634:	69f8      	ldr	r0, [r7, #28]
 800f636:	4798      	blx	r3
    }
    return ERR_VAL;
 800f638:	f06f 0305 	mvn.w	r3, #5
 800f63c:	e077      	b.n	800f72e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800f63e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d006      	beq.n	800f654 <accept_function+0x88>
 800f646:	4b3c      	ldr	r3, [pc, #240]	; (800f738 <accept_function+0x16c>)
 800f648:	f240 222a 	movw	r2, #554	; 0x22a
 800f64c:	493b      	ldr	r1, [pc, #236]	; (800f73c <accept_function+0x170>)
 800f64e:	483c      	ldr	r0, [pc, #240]	; (800f740 <accept_function+0x174>)
 800f650:	f00f fbe8 	bl	801ee24 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800f654:	69fb      	ldr	r3, [r7, #28]
 800f656:	781a      	ldrb	r2, [r3, #0]
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f65c:	4619      	mov	r1, r3
 800f65e:	4610      	mov	r0, r2
 800f660:	f000 f8f0 	bl	800f844 <netconn_alloc>
 800f664:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800f666:	69bb      	ldr	r3, [r7, #24]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d11b      	bne.n	800f6a4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800f66c:	69fb      	ldr	r3, [r7, #28]
 800f66e:	f103 0414 	add.w	r4, r3, #20
 800f672:	f06f 000c 	mvn.w	r0, #12
 800f676:	f7ff fc7f 	bl	800ef78 <lwip_netconn_err_to_msg>
 800f67a:	4603      	mov	r3, r0
 800f67c:	4619      	mov	r1, r3
 800f67e:	4620      	mov	r0, r4
 800f680:	f00e fb92 	bl	801dda8 <sys_mbox_trypost>
 800f684:	4603      	mov	r3, r0
 800f686:	2b00      	cmp	r3, #0
 800f688:	d109      	bne.n	800f69e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f68a:	69fb      	ldr	r3, [r7, #28]
 800f68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d005      	beq.n	800f69e <accept_function+0xd2>
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f696:	2200      	movs	r2, #0
 800f698:	2100      	movs	r1, #0
 800f69a:	69f8      	ldr	r0, [r7, #28]
 800f69c:	4798      	blx	r3
    }
    return ERR_MEM;
 800f69e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f6a2:	e044      	b.n	800f72e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800f6aa:	69b8      	ldr	r0, [r7, #24]
 800f6ac:	f7ff ff66 	bl	800f57c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	3314      	adds	r3, #20
 800f6b4:	69b9      	ldr	r1, [r7, #24]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f00e fb76 	bl	801dda8 <sys_mbox_trypost>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d02a      	beq.n	800f718 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800f6c2:	69bb      	ldr	r3, [r7, #24]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800f6c8:	2100      	movs	r1, #0
 800f6ca:	6978      	ldr	r0, [r7, #20]
 800f6cc:	f004 fec0 	bl	8014450 <tcp_arg>
    tcp_recv(pcb, NULL);
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	6978      	ldr	r0, [r7, #20]
 800f6d4:	f004 fece 	bl	8014474 <tcp_recv>
    tcp_sent(pcb, NULL);
 800f6d8:	2100      	movs	r1, #0
 800f6da:	6978      	ldr	r0, [r7, #20]
 800f6dc:	f004 feec 	bl	80144b8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	2100      	movs	r1, #0
 800f6e4:	6978      	ldr	r0, [r7, #20]
 800f6e6:	f004 ff43 	bl	8014570 <tcp_poll>
    tcp_err(pcb, NULL);
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	6978      	ldr	r0, [r7, #20]
 800f6ee:	f004 ff05 	bl	80144fc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f6f2:	69bb      	ldr	r3, [r7, #24]
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	3310      	adds	r3, #16
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f00e fb41 	bl	801dd84 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	3310      	adds	r3, #16
 800f706:	4618      	mov	r0, r3
 800f708:	f00e fbd4 	bl	801deb4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f70c:	69b8      	ldr	r0, [r7, #24]
 800f70e:	f000 f907 	bl	800f920 <netconn_free>
    return ERR_MEM;
 800f712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f716:	e00a      	b.n	800f72e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d005      	beq.n	800f72c <accept_function+0x160>
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f724:	2200      	movs	r2, #0
 800f726:	2100      	movs	r1, #0
 800f728:	69f8      	ldr	r0, [r7, #28]
 800f72a:	4798      	blx	r3
  }

  return ERR_OK;
 800f72c:	2300      	movs	r3, #0
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3724      	adds	r7, #36	; 0x24
 800f732:	46bd      	mov	sp, r7
 800f734:	bd90      	pop	{r4, r7, pc}
 800f736:	bf00      	nop
 800f738:	08020e00 	.word	0x08020e00
 800f73c:	08020fbc 	.word	0x08020fbc
 800f740:	08020e44 	.word	0x08020e44

0800f744 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f744:	b590      	push	{r4, r7, lr}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f74c:	2300      	movs	r3, #0
 800f74e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	685b      	ldr	r3, [r3, #4]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d006      	beq.n	800f768 <pcb_new+0x24>
 800f75a:	4b2b      	ldr	r3, [pc, #172]	; (800f808 <pcb_new+0xc4>)
 800f75c:	f240 2265 	movw	r2, #613	; 0x265
 800f760:	492a      	ldr	r1, [pc, #168]	; (800f80c <pcb_new+0xc8>)
 800f762:	482b      	ldr	r0, [pc, #172]	; (800f810 <pcb_new+0xcc>)
 800f764:	f00f fb5e 	bl	801ee24 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f772:	2b10      	cmp	r3, #16
 800f774:	d022      	beq.n	800f7bc <pcb_new+0x78>
 800f776:	2b20      	cmp	r3, #32
 800f778:	d133      	bne.n	800f7e2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681c      	ldr	r4, [r3, #0]
 800f77e:	7bfb      	ldrb	r3, [r7, #15]
 800f780:	4618      	mov	r0, r3
 800f782:	f00a f926 	bl	80199d2 <udp_new_ip_type>
 800f786:	4603      	mov	r3, r0
 800f788:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d02a      	beq.n	800f7ea <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	2b22      	cmp	r3, #34	; 0x22
 800f79c:	d104      	bne.n	800f7a8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	2201      	movs	r2, #1
 800f7a6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6858      	ldr	r0, [r3, #4]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4917      	ldr	r1, [pc, #92]	; (800f814 <pcb_new+0xd0>)
 800f7b6:	f00a f893 	bl	80198e0 <udp_recv>
      }
      break;
 800f7ba:	e016      	b.n	800f7ea <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681c      	ldr	r4, [r3, #0]
 800f7c0:	7bfb      	ldrb	r3, [r7, #15]
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f004 fe36 	bl	8014434 <tcp_new_ip_type>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00b      	beq.n	800f7ee <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7ff fece 	bl	800f57c <setup_tcp>
      }
      break;
 800f7e0:	e005      	b.n	800f7ee <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	22fa      	movs	r2, #250	; 0xfa
 800f7e6:	711a      	strb	r2, [r3, #4]
      return;
 800f7e8:	e00a      	b.n	800f800 <pcb_new+0xbc>
      break;
 800f7ea:	bf00      	nop
 800f7ec:	e000      	b.n	800f7f0 <pcb_new+0xac>
      break;
 800f7ee:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d102      	bne.n	800f800 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	22ff      	movs	r2, #255	; 0xff
 800f7fe:	711a      	strb	r2, [r3, #4]
  }
}
 800f800:	3714      	adds	r7, #20
 800f802:	46bd      	mov	sp, r7
 800f804:	bd90      	pop	{r4, r7, pc}
 800f806:	bf00      	nop
 800f808:	08020e00 	.word	0x08020e00
 800f80c:	08020fe4 	.word	0x08020fe4
 800f810:	08020e44 	.word	0x08020e44
 800f814:	0800f059 	.word	0x0800f059

0800f818 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	2200      	movs	r2, #0
 800f828:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d102      	bne.n	800f83a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f7ff ff85 	bl	800f744 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
	...

0800f844 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	6039      	str	r1, [r7, #0]
 800f84e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800f850:	2300      	movs	r3, #0
 800f852:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f854:	2007      	movs	r0, #7
 800f856:	f001 fff5 	bl	8011844 <memp_malloc>
 800f85a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d101      	bne.n	800f866 <netconn_alloc+0x22>
    return NULL;
 800f862:	2300      	movs	r3, #0
 800f864:	e052      	b.n	800f90c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2200      	movs	r2, #0
 800f86a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	79fa      	ldrb	r2, [r7, #7]
 800f870:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f87e:	2b10      	cmp	r3, #16
 800f880:	d004      	beq.n	800f88c <netconn_alloc+0x48>
 800f882:	2b20      	cmp	r3, #32
 800f884:	d105      	bne.n	800f892 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f886:	2306      	movs	r3, #6
 800f888:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f88a:	e00a      	b.n	800f8a2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f88c:	2306      	movs	r3, #6
 800f88e:	617b      	str	r3, [r7, #20]
      break;
 800f890:	e007      	b.n	800f8a2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f892:	4b20      	ldr	r3, [pc, #128]	; (800f914 <netconn_alloc+0xd0>)
 800f894:	f240 22e5 	movw	r2, #741	; 0x2e5
 800f898:	491f      	ldr	r1, [pc, #124]	; (800f918 <netconn_alloc+0xd4>)
 800f89a:	4820      	ldr	r0, [pc, #128]	; (800f91c <netconn_alloc+0xd8>)
 800f89c:	f00f fac2 	bl	801ee24 <iprintf>
      goto free_and_return;
 800f8a0:	e02f      	b.n	800f902 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	3310      	adds	r3, #16
 800f8a6:	6979      	ldr	r1, [r7, #20]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f00e fa49 	bl	801dd40 <sys_mbox_new>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d125      	bne.n	800f900 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	330c      	adds	r3, #12
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f00e fb07 	bl	801dece <sys_sem_new>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d005      	beq.n	800f8d2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	3310      	adds	r3, #16
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f00e fa5a 	bl	801dd84 <sys_mbox_free>
    goto free_and_return;
 800f8d0:	e017      	b.n	800f902 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	3314      	adds	r3, #20
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f00e faec 	bl	801deb4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8e8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	683a      	ldr	r2, [r7, #0]
 800f8ee:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	7cfa      	ldrb	r2, [r7, #19]
 800f8fa:	771a      	strb	r2, [r3, #28]
  return conn;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	e005      	b.n	800f90c <netconn_alloc+0xc8>
    goto free_and_return;
 800f900:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f902:	68f9      	ldr	r1, [r7, #12]
 800f904:	2007      	movs	r0, #7
 800f906:	f002 f813 	bl	8011930 <memp_free>
  return NULL;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3718      	adds	r7, #24
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	08020e00 	.word	0x08020e00
 800f918:	08021004 	.word	0x08021004
 800f91c:	08020e44 	.word	0x08020e44

0800f920 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d006      	beq.n	800f93e <netconn_free+0x1e>
 800f930:	4b1b      	ldr	r3, [pc, #108]	; (800f9a0 <netconn_free+0x80>)
 800f932:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f936:	491b      	ldr	r1, [pc, #108]	; (800f9a4 <netconn_free+0x84>)
 800f938:	481b      	ldr	r0, [pc, #108]	; (800f9a8 <netconn_free+0x88>)
 800f93a:	f00f fa73 	bl	801ee24 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	3310      	adds	r3, #16
 800f942:	4618      	mov	r0, r3
 800f944:	f00e faa5 	bl	801de92 <sys_mbox_valid>
 800f948:	4603      	mov	r3, r0
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d006      	beq.n	800f95c <netconn_free+0x3c>
 800f94e:	4b14      	ldr	r3, [pc, #80]	; (800f9a0 <netconn_free+0x80>)
 800f950:	f240 3223 	movw	r2, #803	; 0x323
 800f954:	4915      	ldr	r1, [pc, #84]	; (800f9ac <netconn_free+0x8c>)
 800f956:	4814      	ldr	r0, [pc, #80]	; (800f9a8 <netconn_free+0x88>)
 800f958:	f00f fa64 	bl	801ee24 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	3314      	adds	r3, #20
 800f960:	4618      	mov	r0, r3
 800f962:	f00e fa96 	bl	801de92 <sys_mbox_valid>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d006      	beq.n	800f97a <netconn_free+0x5a>
 800f96c:	4b0c      	ldr	r3, [pc, #48]	; (800f9a0 <netconn_free+0x80>)
 800f96e:	f240 3226 	movw	r2, #806	; 0x326
 800f972:	490f      	ldr	r1, [pc, #60]	; (800f9b0 <netconn_free+0x90>)
 800f974:	480c      	ldr	r0, [pc, #48]	; (800f9a8 <netconn_free+0x88>)
 800f976:	f00f fa55 	bl	801ee24 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	330c      	adds	r3, #12
 800f97e:	4618      	mov	r0, r3
 800f980:	f00e fb0b 	bl	801df9a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	330c      	adds	r3, #12
 800f988:	4618      	mov	r0, r3
 800f98a:	f00e fb24 	bl	801dfd6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f98e:	6879      	ldr	r1, [r7, #4]
 800f990:	2007      	movs	r0, #7
 800f992:	f001 ffcd 	bl	8011930 <memp_free>
}
 800f996:	bf00      	nop
 800f998:	3708      	adds	r7, #8
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	08020e00 	.word	0x08020e00
 800f9a4:	0802102c 	.word	0x0802102c
 800f9a8:	08020e44 	.word	0x08020e44
 800f9ac:	0802105c 	.word	0x0802105c
 800f9b0:	08021098 	.word	0x08021098

0800f9b4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b086      	sub	sp, #24
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	3310      	adds	r3, #16
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f00e fa66 	bl	801de92 <sys_mbox_valid>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d02f      	beq.n	800fa2c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f9cc:	e018      	b.n	800fa00 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9d6:	2b10      	cmp	r3, #16
 800f9d8:	d10e      	bne.n	800f9f8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	f107 020f 	add.w	r2, r7, #15
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	f7ff fafe 	bl	800efe4 <lwip_netconn_is_err_msg>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d108      	bne.n	800fa00 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800f9ee:	693b      	ldr	r3, [r7, #16]
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f002 fe85 	bl	8012700 <pbuf_free>
 800f9f6:	e003      	b.n	800fa00 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800f9f8:	693b      	ldr	r3, [r7, #16]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 fe06 	bl	801060c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	3310      	adds	r3, #16
 800fa04:	f107 0210 	add.w	r2, r7, #16
 800fa08:	4611      	mov	r1, r2
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f00e fa25 	bl	801de5a <sys_arch_mbox_tryfetch>
 800fa10:	4603      	mov	r3, r0
 800fa12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa16:	d1da      	bne.n	800f9ce <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	3310      	adds	r3, #16
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f00e f9b1 	bl	801dd84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	3310      	adds	r3, #16
 800fa26:	4618      	mov	r0, r3
 800fa28:	f00e fa44 	bl	801deb4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	3314      	adds	r3, #20
 800fa30:	4618      	mov	r0, r3
 800fa32:	f00e fa2e 	bl	801de92 <sys_mbox_valid>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d034      	beq.n	800faa6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fa3c:	e01d      	b.n	800fa7a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	f107 020e 	add.w	r2, r7, #14
 800fa44:	4611      	mov	r1, r2
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7ff facc 	bl	800efe4 <lwip_netconn_is_err_msg>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d113      	bne.n	800fa7a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800fa56:	6978      	ldr	r0, [r7, #20]
 800fa58:	f7ff ffac 	bl	800f9b4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d007      	beq.n	800fa74 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f003 fc49 	bl	8013300 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2200      	movs	r2, #0
 800fa72:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800fa74:	6978      	ldr	r0, [r7, #20]
 800fa76:	f7ff ff53 	bl	800f920 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3314      	adds	r3, #20
 800fa7e:	f107 0210 	add.w	r2, r7, #16
 800fa82:	4611      	mov	r1, r2
 800fa84:	4618      	mov	r0, r3
 800fa86:	f00e f9e8 	bl	801de5a <sys_arch_mbox_tryfetch>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa90:	d1d5      	bne.n	800fa3e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	3314      	adds	r3, #20
 800fa96:	4618      	mov	r0, r3
 800fa98:	f00e f974 	bl	801dd84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	3314      	adds	r3, #20
 800faa0:	4618      	mov	r0, r3
 800faa2:	f00e fa07 	bl	801deb4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800faa6:	bf00      	nop
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
	...

0800fab0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b086      	sub	sp, #24
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	460b      	mov	r3, r1
 800faba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800fabc:	2300      	movs	r3, #0
 800fabe:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d106      	bne.n	800fad4 <lwip_netconn_do_close_internal+0x24>
 800fac6:	4b87      	ldr	r3, [pc, #540]	; (800fce4 <lwip_netconn_do_close_internal+0x234>)
 800fac8:	f240 32a2 	movw	r2, #930	; 0x3a2
 800facc:	4986      	ldr	r1, [pc, #536]	; (800fce8 <lwip_netconn_do_close_internal+0x238>)
 800face:	4887      	ldr	r0, [pc, #540]	; (800fcec <lwip_netconn_do_close_internal+0x23c>)
 800fad0:	f00f f9a8 	bl	801ee24 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fadc:	2b10      	cmp	r3, #16
 800fade:	d006      	beq.n	800faee <lwip_netconn_do_close_internal+0x3e>
 800fae0:	4b80      	ldr	r3, [pc, #512]	; (800fce4 <lwip_netconn_do_close_internal+0x234>)
 800fae2:	f240 32a3 	movw	r2, #931	; 0x3a3
 800fae6:	4982      	ldr	r1, [pc, #520]	; (800fcf0 <lwip_netconn_do_close_internal+0x240>)
 800fae8:	4880      	ldr	r0, [pc, #512]	; (800fcec <lwip_netconn_do_close_internal+0x23c>)
 800faea:	f00f f99b 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	785b      	ldrb	r3, [r3, #1]
 800faf2:	2b04      	cmp	r3, #4
 800faf4:	d006      	beq.n	800fb04 <lwip_netconn_do_close_internal+0x54>
 800faf6:	4b7b      	ldr	r3, [pc, #492]	; (800fce4 <lwip_netconn_do_close_internal+0x234>)
 800faf8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800fafc:	497d      	ldr	r1, [pc, #500]	; (800fcf4 <lwip_netconn_do_close_internal+0x244>)
 800fafe:	487b      	ldr	r0, [pc, #492]	; (800fcec <lwip_netconn_do_close_internal+0x23c>)
 800fb00:	f00f f990 	bl	801ee24 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d106      	bne.n	800fb1a <lwip_netconn_do_close_internal+0x6a>
 800fb0c:	4b75      	ldr	r3, [pc, #468]	; (800fce4 <lwip_netconn_do_close_internal+0x234>)
 800fb0e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800fb12:	4979      	ldr	r1, [pc, #484]	; (800fcf8 <lwip_netconn_do_close_internal+0x248>)
 800fb14:	4875      	ldr	r0, [pc, #468]	; (800fcec <lwip_netconn_do_close_internal+0x23c>)
 800fb16:	f00f f985 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6a1b      	ldr	r3, [r3, #32]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <lwip_netconn_do_close_internal+0x80>
 800fb22:	4b70      	ldr	r3, [pc, #448]	; (800fce4 <lwip_netconn_do_close_internal+0x234>)
 800fb24:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fb28:	4974      	ldr	r1, [pc, #464]	; (800fcfc <lwip_netconn_do_close_internal+0x24c>)
 800fb2a:	4870      	ldr	r0, [pc, #448]	; (800fcec <lwip_netconn_do_close_internal+0x23c>)
 800fb2c:	f00f f97a 	bl	801ee24 <iprintf>

  tpcb = conn->pcb.tcp;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6a1b      	ldr	r3, [r3, #32]
 800fb3a:	7a1b      	ldrb	r3, [r3, #8]
 800fb3c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800fb3e:	7bfb      	ldrb	r3, [r7, #15]
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800fb4e:	7bfb      	ldrb	r3, [r7, #15]
 800fb50:	2b03      	cmp	r3, #3
 800fb52:	d102      	bne.n	800fb5a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800fb54:	2301      	movs	r3, #1
 800fb56:	75bb      	strb	r3, [r7, #22]
 800fb58:	e01f      	b.n	800fb9a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800fb5a:	7bbb      	ldrb	r3, [r7, #14]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00e      	beq.n	800fb7e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800fb60:	693b      	ldr	r3, [r7, #16]
 800fb62:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800fb64:	2b05      	cmp	r3, #5
 800fb66:	d007      	beq.n	800fb78 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800fb6c:	2b06      	cmp	r3, #6
 800fb6e:	d003      	beq.n	800fb78 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800fb74:	2b08      	cmp	r3, #8
 800fb76:	d102      	bne.n	800fb7e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800fb78:	2301      	movs	r3, #1
 800fb7a:	75bb      	strb	r3, [r7, #22]
 800fb7c:	e00d      	b.n	800fb9a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800fb7e:	7b7b      	ldrb	r3, [r7, #13]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d008      	beq.n	800fb96 <lwip_netconn_do_close_internal+0xe6>
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	8b5b      	ldrh	r3, [r3, #26]
 800fb88:	f003 0310 	and.w	r3, r3, #16
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800fb90:	2301      	movs	r3, #1
 800fb92:	75bb      	strb	r3, [r7, #22]
 800fb94:	e001      	b.n	800fb9a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800fb96:	2300      	movs	r3, #0
 800fb98:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800fb9a:	7dbb      	ldrb	r3, [r7, #22]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d003      	beq.n	800fba8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800fba0:	2100      	movs	r1, #0
 800fba2:	6938      	ldr	r0, [r7, #16]
 800fba4:	f004 fc54 	bl	8014450 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d104      	bne.n	800fbba <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	6938      	ldr	r0, [r7, #16]
 800fbb4:	f004 fcc4 	bl	8014540 <tcp_accept>
 800fbb8:	e01d      	b.n	800fbf6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800fbba:	7bbb      	ldrb	r3, [r7, #14]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d007      	beq.n	800fbd0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	6938      	ldr	r0, [r7, #16]
 800fbc4:	f004 fc56 	bl	8014474 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800fbc8:	2100      	movs	r1, #0
 800fbca:	6938      	ldr	r0, [r7, #16]
 800fbcc:	f004 fcb8 	bl	8014540 <tcp_accept>
    }
    if (shut_tx) {
 800fbd0:	7b7b      	ldrb	r3, [r7, #13]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d003      	beq.n	800fbde <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	6938      	ldr	r0, [r7, #16]
 800fbda:	f004 fc6d 	bl	80144b8 <tcp_sent>
    }
    if (shut_close) {
 800fbde:	7dbb      	ldrb	r3, [r7, #22]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d008      	beq.n	800fbf6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	2100      	movs	r1, #0
 800fbe8:	6938      	ldr	r0, [r7, #16]
 800fbea:	f004 fcc1 	bl	8014570 <tcp_poll>
      tcp_err(tpcb, NULL);
 800fbee:	2100      	movs	r1, #0
 800fbf0:	6938      	ldr	r0, [r7, #16]
 800fbf2:	f004 fc83 	bl	80144fc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800fbf6:	7dbb      	ldrb	r3, [r7, #22]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d005      	beq.n	800fc08 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800fbfc:	6938      	ldr	r0, [r7, #16]
 800fbfe:	f003 fa39 	bl	8013074 <tcp_close>
 800fc02:	4603      	mov	r3, r0
 800fc04:	75fb      	strb	r3, [r7, #23]
 800fc06:	e007      	b.n	800fc18 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800fc08:	7bbb      	ldrb	r3, [r7, #14]
 800fc0a:	7b7a      	ldrb	r2, [r7, #13]
 800fc0c:	4619      	mov	r1, r3
 800fc0e:	6938      	ldr	r0, [r7, #16]
 800fc10:	f003 fa5c 	bl	80130cc <tcp_shutdown>
 800fc14:	4603      	mov	r3, r0
 800fc16:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800fc18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d102      	bne.n	800fc26 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800fc20:	2301      	movs	r3, #1
 800fc22:	757b      	strb	r3, [r7, #21]
 800fc24:	e016      	b.n	800fc54 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800fc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc2e:	d10f      	bne.n	800fc50 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	6a1b      	ldr	r3, [r3, #32]
 800fc34:	7a5b      	ldrb	r3, [r3, #9]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10c      	bne.n	800fc54 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800fc3e:	7dbb      	ldrb	r3, [r7, #22]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d007      	beq.n	800fc54 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800fc44:	6938      	ldr	r0, [r7, #16]
 800fc46:	f003 fb5b 	bl	8013300 <tcp_abort>
          err = ERR_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	75fb      	strb	r3, [r7, #23]
 800fc4e:	e001      	b.n	800fc54 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800fc50:	2301      	movs	r3, #1
 800fc52:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800fc54:	7d7b      	ldrb	r3, [r7, #21]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d052      	beq.n	800fd00 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6a1b      	ldr	r3, [r3, #32]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	330c      	adds	r3, #12
 800fc62:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6a1b      	ldr	r3, [r3, #32]
 800fc68:	7dfa      	ldrb	r2, [r7, #23]
 800fc6a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2200      	movs	r2, #0
 800fc76:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800fc78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d129      	bne.n	800fcd4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800fc80:	7dbb      	ldrb	r3, [r7, #22]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d00c      	beq.n	800fca0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d005      	beq.n	800fca0 <lwip_netconn_do_close_internal+0x1f0>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc98:	2200      	movs	r2, #0
 800fc9a:	2104      	movs	r1, #4
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	4798      	blx	r3
      }
      if (shut_rx) {
 800fca0:	7bbb      	ldrb	r3, [r7, #14]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d009      	beq.n	800fcba <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d005      	beq.n	800fcba <lwip_netconn_do_close_internal+0x20a>
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	6878      	ldr	r0, [r7, #4]
 800fcb8:	4798      	blx	r3
      }
      if (shut_tx) {
 800fcba:	7b7b      	ldrb	r3, [r7, #13]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d009      	beq.n	800fcd4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d005      	beq.n	800fcd4 <lwip_netconn_do_close_internal+0x224>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fccc:	2200      	movs	r2, #0
 800fcce:	2102      	movs	r1, #2
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fcd4:	78fb      	ldrb	r3, [r7, #3]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f00e f950 	bl	801df80 <sys_sem_signal>
    }
    return ERR_OK;
 800fce0:	2300      	movs	r3, #0
 800fce2:	e03c      	b.n	800fd5e <lwip_netconn_do_close_internal+0x2ae>
 800fce4:	08020e00 	.word	0x08020e00
 800fce8:	080210d4 	.word	0x080210d4
 800fcec:	08020e44 	.word	0x08020e44
 800fcf0:	080210e4 	.word	0x080210e4
 800fcf4:	08021104 	.word	0x08021104
 800fcf8:	08021128 	.word	0x08021128
 800fcfc:	08020f68 	.word	0x08020f68
  }
  if (!close_finished) {
 800fd00:	7d7b      	ldrb	r3, [r7, #21]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d11e      	bne.n	800fd44 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800fd06:	693b      	ldr	r3, [r7, #16]
 800fd08:	7d1b      	ldrb	r3, [r3, #20]
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d106      	bne.n	800fd1c <lwip_netconn_do_close_internal+0x26c>
 800fd0e:	4b16      	ldr	r3, [pc, #88]	; (800fd68 <lwip_netconn_do_close_internal+0x2b8>)
 800fd10:	f240 4241 	movw	r2, #1089	; 0x441
 800fd14:	4915      	ldr	r1, [pc, #84]	; (800fd6c <lwip_netconn_do_close_internal+0x2bc>)
 800fd16:	4816      	ldr	r0, [pc, #88]	; (800fd70 <lwip_netconn_do_close_internal+0x2c0>)
 800fd18:	f00f f884 	bl	801ee24 <iprintf>
    if (shut_tx) {
 800fd1c:	7b7b      	ldrb	r3, [r7, #13]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d003      	beq.n	800fd2a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800fd22:	4914      	ldr	r1, [pc, #80]	; (800fd74 <lwip_netconn_do_close_internal+0x2c4>)
 800fd24:	6938      	ldr	r0, [r7, #16]
 800fd26:	f004 fbc7 	bl	80144b8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	4912      	ldr	r1, [pc, #72]	; (800fd78 <lwip_netconn_do_close_internal+0x2c8>)
 800fd2e:	6938      	ldr	r0, [r7, #16]
 800fd30:	f004 fc1e 	bl	8014570 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800fd34:	4911      	ldr	r1, [pc, #68]	; (800fd7c <lwip_netconn_do_close_internal+0x2cc>)
 800fd36:	6938      	ldr	r0, [r7, #16]
 800fd38:	f004 fbe0 	bl	80144fc <tcp_err>
    tcp_arg(tpcb, conn);
 800fd3c:	6879      	ldr	r1, [r7, #4]
 800fd3e:	6938      	ldr	r0, [r7, #16]
 800fd40:	f004 fb86 	bl	8014450 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800fd44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d106      	bne.n	800fd5a <lwip_netconn_do_close_internal+0x2aa>
 800fd4c:	4b06      	ldr	r3, [pc, #24]	; (800fd68 <lwip_netconn_do_close_internal+0x2b8>)
 800fd4e:	f240 424d 	movw	r2, #1101	; 0x44d
 800fd52:	490b      	ldr	r1, [pc, #44]	; (800fd80 <lwip_netconn_do_close_internal+0x2d0>)
 800fd54:	4806      	ldr	r0, [pc, #24]	; (800fd70 <lwip_netconn_do_close_internal+0x2c0>)
 800fd56:	f00f f865 	bl	801ee24 <iprintf>
  return err;
 800fd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3718      	adds	r7, #24
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
 800fd66:	bf00      	nop
 800fd68:	08020e00 	.word	0x08020e00
 800fd6c:	0802113c 	.word	0x0802113c
 800fd70:	08020e44 	.word	0x08020e44
 800fd74:	0800f329 	.word	0x0800f329
 800fd78:	0800f261 	.word	0x0800f261
 800fd7c:	0800f3d1 	.word	0x0800f3d1
 800fd80:	08021160 	.word	0x08021160

0800fd84 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	785b      	ldrb	r3, [r3, #1]
 800fd96:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800fd98:	7afb      	ldrb	r3, [r7, #11]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d00d      	beq.n	800fdba <lwip_netconn_do_delconn+0x36>
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fda8:	2b10      	cmp	r3, #16
 800fdaa:	d006      	beq.n	800fdba <lwip_netconn_do_delconn+0x36>
 800fdac:	4b60      	ldr	r3, [pc, #384]	; (800ff30 <lwip_netconn_do_delconn+0x1ac>)
 800fdae:	f240 425e 	movw	r2, #1118	; 0x45e
 800fdb2:	4960      	ldr	r1, [pc, #384]	; (800ff34 <lwip_netconn_do_delconn+0x1b0>)
 800fdb4:	4860      	ldr	r0, [pc, #384]	; (800ff38 <lwip_netconn_do_delconn+0x1b4>)
 800fdb6:	f00f f835 	bl	801ee24 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800fdba:	7afb      	ldrb	r3, [r7, #11]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d005      	beq.n	800fdcc <lwip_netconn_do_delconn+0x48>
 800fdc0:	7afb      	ldrb	r3, [r7, #11]
 800fdc2:	2b02      	cmp	r3, #2
 800fdc4:	d002      	beq.n	800fdcc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800fdc6:	7afb      	ldrb	r3, [r7, #11]
 800fdc8:	2b03      	cmp	r3, #3
 800fdca:	d109      	bne.n	800fde0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800fdcc:	7afb      	ldrb	r3, [r7, #11]
 800fdce:	2b03      	cmp	r3, #3
 800fdd0:	d10a      	bne.n	800fde8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	7f1b      	ldrb	r3, [r3, #28]
 800fdd8:	f003 0304 	and.w	r3, r3, #4
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d103      	bne.n	800fde8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	22fb      	movs	r2, #251	; 0xfb
 800fde4:	711a      	strb	r2, [r3, #4]
 800fde6:	e097      	b.n	800ff18 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800fde8:	7afb      	ldrb	r3, [r7, #11]
 800fdea:	2b03      	cmp	r3, #3
 800fdec:	d10d      	bne.n	800fe0a <lwip_netconn_do_delconn+0x86>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	7f1b      	ldrb	r3, [r3, #28]
 800fdf4:	f003 0304 	and.w	r3, r3, #4
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d106      	bne.n	800fe0a <lwip_netconn_do_delconn+0x86>
 800fdfc:	4b4c      	ldr	r3, [pc, #304]	; (800ff30 <lwip_netconn_do_delconn+0x1ac>)
 800fdfe:	f240 427a 	movw	r2, #1146	; 0x47a
 800fe02:	494e      	ldr	r1, [pc, #312]	; (800ff3c <lwip_netconn_do_delconn+0x1b8>)
 800fe04:	484c      	ldr	r0, [pc, #304]	; (800ff38 <lwip_netconn_do_delconn+0x1b4>)
 800fe06:	f00f f80d 	bl	801ee24 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7ff fdcd 	bl	800f9b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d05f      	beq.n	800fee4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe2e:	2b10      	cmp	r3, #16
 800fe30:	d00d      	beq.n	800fe4e <lwip_netconn_do_delconn+0xca>
 800fe32:	2b20      	cmp	r3, #32
 800fe34:	d151      	bne.n	800feda <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	685b      	ldr	r3, [r3, #4]
 800fe46:	4618      	mov	r0, r3
 800fe48:	f009 fd6a 	bl	8019920 <udp_remove>
          break;
 800fe4c:	e046      	b.n	800fedc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	6a1b      	ldr	r3, [r3, #32]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d006      	beq.n	800fe66 <lwip_netconn_do_delconn+0xe2>
 800fe58:	4b35      	ldr	r3, [pc, #212]	; (800ff30 <lwip_netconn_do_delconn+0x1ac>)
 800fe5a:	f240 4294 	movw	r2, #1172	; 0x494
 800fe5e:	4938      	ldr	r1, [pc, #224]	; (800ff40 <lwip_netconn_do_delconn+0x1bc>)
 800fe60:	4835      	ldr	r0, [pc, #212]	; (800ff38 <lwip_netconn_do_delconn+0x1b4>)
 800fe62:	f00e ffdf 	bl	801ee24 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2204      	movs	r2, #4
 800fe6c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2203      	movs	r2, #3
 800fe72:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2100      	movs	r1, #0
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7ff fe14 	bl	800fab0 <lwip_netconn_do_close_internal>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d04b      	beq.n	800ff26 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	785b      	ldrb	r3, [r3, #1]
 800fe94:	2b04      	cmp	r3, #4
 800fe96:	d006      	beq.n	800fea6 <lwip_netconn_do_delconn+0x122>
 800fe98:	4b25      	ldr	r3, [pc, #148]	; (800ff30 <lwip_netconn_do_delconn+0x1ac>)
 800fe9a:	f240 429a 	movw	r2, #1178	; 0x49a
 800fe9e:	4929      	ldr	r1, [pc, #164]	; (800ff44 <lwip_netconn_do_delconn+0x1c0>)
 800fea0:	4825      	ldr	r0, [pc, #148]	; (800ff38 <lwip_netconn_do_delconn+0x1b4>)
 800fea2:	f00e ffbf 	bl	801ee24 <iprintf>
            UNLOCK_TCPIP_CORE();
 800fea6:	4828      	ldr	r0, [pc, #160]	; (800ff48 <lwip_netconn_do_delconn+0x1c4>)
 800fea8:	f00e f8db 	bl	801e062 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	330c      	adds	r3, #12
 800feb2:	2100      	movs	r1, #0
 800feb4:	4618      	mov	r0, r3
 800feb6:	f00e f832 	bl	801df1e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800feba:	4823      	ldr	r0, [pc, #140]	; (800ff48 <lwip_netconn_do_delconn+0x1c4>)
 800febc:	f00e f8c2 	bl	801e044 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	785b      	ldrb	r3, [r3, #1]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d02d      	beq.n	800ff26 <lwip_netconn_do_delconn+0x1a2>
 800feca:	4b19      	ldr	r3, [pc, #100]	; (800ff30 <lwip_netconn_do_delconn+0x1ac>)
 800fecc:	f240 429e 	movw	r2, #1182	; 0x49e
 800fed0:	491c      	ldr	r1, [pc, #112]	; (800ff44 <lwip_netconn_do_delconn+0x1c0>)
 800fed2:	4819      	ldr	r0, [pc, #100]	; (800ff38 <lwip_netconn_do_delconn+0x1b4>)
 800fed4:	f00e ffa6 	bl	801ee24 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800fed8:	e025      	b.n	800ff26 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800feda:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	2200      	movs	r2, #0
 800fee2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feea:	2b00      	cmp	r3, #0
 800feec:	d007      	beq.n	800fefe <lwip_netconn_do_delconn+0x17a>
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef4:	68fa      	ldr	r2, [r7, #12]
 800fef6:	6810      	ldr	r0, [r2, #0]
 800fef8:	2200      	movs	r2, #0
 800fefa:	2100      	movs	r1, #0
 800fefc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d007      	beq.n	800ff18 <lwip_netconn_do_delconn+0x194>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	6810      	ldr	r0, [r2, #0]
 800ff12:	2200      	movs	r2, #0
 800ff14:	2102      	movs	r1, #2
 800ff16:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	330c      	adds	r3, #12
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f00e f848 	bl	801dfb4 <sys_sem_valid>
 800ff24:	e000      	b.n	800ff28 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ff26:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ff28:	3710      	adds	r7, #16
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	08020e00 	.word	0x08020e00
 800ff34:	08021170 	.word	0x08021170
 800ff38:	08020e44 	.word	0x08020e44
 800ff3c:	08021184 	.word	0x08021184
 800ff40:	080211a4 	.word	0x080211a4
 800ff44:	080211c0 	.word	0x080211c0
 800ff48:	20009120 	.word	0x20009120

0800ff4c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d025      	beq.n	800ffae <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	781b      	ldrb	r3, [r3, #0]
 800ff68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff6c:	2b10      	cmp	r3, #16
 800ff6e:	d00e      	beq.n	800ff8e <lwip_netconn_do_bind+0x42>
 800ff70:	2b20      	cmp	r3, #32
 800ff72:	d119      	bne.n	800ffa8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	6858      	ldr	r0, [r3, #4]
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	6899      	ldr	r1, [r3, #8]
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	899b      	ldrh	r3, [r3, #12]
 800ff82:	461a      	mov	r2, r3
 800ff84:	f009 fb9c 	bl	80196c0 <udp_bind>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	73fb      	strb	r3, [r7, #15]
        break;
 800ff8c:	e011      	b.n	800ffb2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	6858      	ldr	r0, [r3, #4]
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	6899      	ldr	r1, [r3, #8]
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	899b      	ldrh	r3, [r3, #12]
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	f003 f9bb 	bl	8013318 <tcp_bind>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	73fb      	strb	r3, [r7, #15]
        break;
 800ffa6:	e004      	b.n	800ffb2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ffa8:	23fa      	movs	r3, #250	; 0xfa
 800ffaa:	73fb      	strb	r3, [r7, #15]
        break;
 800ffac:	e001      	b.n	800ffb2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ffae:	23fa      	movs	r3, #250	; 0xfa
 800ffb0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	7bfa      	ldrb	r2, [r7, #15]
 800ffb6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ffb8:	bf00      	nop
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d07f      	beq.n	80100d6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ffe0:	2b10      	cmp	r3, #16
 800ffe2:	d175      	bne.n	80100d0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	785b      	ldrb	r3, [r3, #1]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d165      	bne.n	80100ba <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	7d1b      	ldrb	r3, [r3, #20]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d002      	beq.n	8010000 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800fffa:	23fa      	movs	r3, #250	; 0xfa
 800fffc:	72fb      	strb	r3, [r7, #11]
 800fffe:	e06c      	b.n	80100da <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8010000:	23ff      	movs	r3, #255	; 0xff
 8010002:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	f107 020b 	add.w	r2, r7, #11
 801000e:	7cf9      	ldrb	r1, [r7, #19]
 8010010:	4618      	mov	r0, r3
 8010012:	f003 fa53 	bl	80134bc <tcp_listen_with_backlog_and_err>
 8010016:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d05d      	beq.n	80100da <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	3310      	adds	r3, #16
 8010024:	4618      	mov	r0, r3
 8010026:	f00d ff34 	bl	801de92 <sys_mbox_valid>
 801002a:	4603      	mov	r3, r0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d00b      	beq.n	8010048 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3310      	adds	r3, #16
 8010036:	4618      	mov	r0, r3
 8010038:	f00d fea4 	bl	801dd84 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3310      	adds	r3, #16
 8010042:	4618      	mov	r0, r3
 8010044:	f00d ff36 	bl	801deb4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8010048:	2300      	movs	r3, #0
 801004a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3314      	adds	r3, #20
 8010052:	4618      	mov	r0, r3
 8010054:	f00d ff1d 	bl	801de92 <sys_mbox_valid>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d108      	bne.n	8010070 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	3314      	adds	r3, #20
 8010064:	2106      	movs	r1, #6
 8010066:	4618      	mov	r0, r3
 8010068:	f00d fe6a 	bl	801dd40 <sys_mbox_new>
 801006c:	4603      	mov	r3, r0
 801006e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010070:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d118      	bne.n	80100aa <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2202      	movs	r2, #2
 801007e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	68fa      	ldr	r2, [r7, #12]
 8010086:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4619      	mov	r1, r3
 8010094:	4610      	mov	r0, r2
 8010096:	f004 f9db 	bl	8014450 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	4912      	ldr	r1, [pc, #72]	; (80100ec <lwip_netconn_do_listen+0x12c>)
 80100a2:	4618      	mov	r0, r3
 80100a4:	f004 fa4c 	bl	8014540 <tcp_accept>
 80100a8:	e017      	b.n	80100da <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 80100aa:	68f8      	ldr	r0, [r7, #12]
 80100ac:	f002 ffe2 	bl	8013074 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2200      	movs	r2, #0
 80100b6:	605a      	str	r2, [r3, #4]
 80100b8:	e00f      	b.n	80100da <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	785b      	ldrb	r3, [r3, #1]
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	d102      	bne.n	80100ca <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	72fb      	strb	r3, [r7, #11]
 80100c8:	e007      	b.n	80100da <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80100ca:	23f5      	movs	r3, #245	; 0xf5
 80100cc:	72fb      	strb	r3, [r7, #11]
 80100ce:	e004      	b.n	80100da <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80100d0:	23f0      	movs	r3, #240	; 0xf0
 80100d2:	72fb      	strb	r3, [r7, #11]
 80100d4:	e001      	b.n	80100da <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80100d6:	23f5      	movs	r3, #245	; 0xf5
 80100d8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80100da:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80100e2:	bf00      	nop
 80100e4:	3718      	adds	r7, #24
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	0800f5cd 	.word	0x0800f5cd

080100f0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	2200      	movs	r2, #0
 8010100:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d022      	beq.n	8010152 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010116:	2b10      	cmp	r3, #16
 8010118:	d11b      	bne.n	8010152 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010126:	d202      	bcs.n	801012e <lwip_netconn_do_recv+0x3e>
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	b29b      	uxth	r3, r3
 801012c:	e001      	b.n	8010132 <lwip_netconn_do_recv+0x42>
 801012e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010132:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	89fa      	ldrh	r2, [r7, #14]
 801013c:	4611      	mov	r1, r2
 801013e:	4618      	mov	r0, r3
 8010140:	f003 fac0 	bl	80136c4 <tcp_recved>
        remaining -= recved;
 8010144:	89fb      	ldrh	r3, [r7, #14]
 8010146:	697a      	ldr	r2, [r7, #20]
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801014c:	697b      	ldr	r3, [r7, #20]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d1e6      	bne.n	8010120 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010152:	bf00      	nop
 8010154:	3718      	adds	r7, #24
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
	...

0801015c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010168:	2300      	movs	r3, #0
 801016a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d106      	bne.n	8010180 <lwip_netconn_do_writemore+0x24>
 8010172:	4b96      	ldr	r3, [pc, #600]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 8010174:	f240 6273 	movw	r2, #1651	; 0x673
 8010178:	4995      	ldr	r1, [pc, #596]	; (80103d0 <lwip_netconn_do_writemore+0x274>)
 801017a:	4896      	ldr	r0, [pc, #600]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 801017c:	f00e fe52 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	785b      	ldrb	r3, [r3, #1]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d006      	beq.n	8010196 <lwip_netconn_do_writemore+0x3a>
 8010188:	4b90      	ldr	r3, [pc, #576]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 801018a:	f240 6274 	movw	r2, #1652	; 0x674
 801018e:	4992      	ldr	r1, [pc, #584]	; (80103d8 <lwip_netconn_do_writemore+0x27c>)
 8010190:	4890      	ldr	r0, [pc, #576]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 8010192:	f00e fe47 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a1b      	ldr	r3, [r3, #32]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d106      	bne.n	80101ac <lwip_netconn_do_writemore+0x50>
 801019e:	4b8b      	ldr	r3, [pc, #556]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 80101a0:	f240 6275 	movw	r2, #1653	; 0x675
 80101a4:	498d      	ldr	r1, [pc, #564]	; (80103dc <lwip_netconn_do_writemore+0x280>)
 80101a6:	488b      	ldr	r0, [pc, #556]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 80101a8:	f00e fe3c 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d106      	bne.n	80101c2 <lwip_netconn_do_writemore+0x66>
 80101b4:	4b85      	ldr	r3, [pc, #532]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 80101b6:	f240 6276 	movw	r2, #1654	; 0x676
 80101ba:	4989      	ldr	r1, [pc, #548]	; (80103e0 <lwip_netconn_do_writemore+0x284>)
 80101bc:	4885      	ldr	r0, [pc, #532]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 80101be:	f00e fe31 	bl	801ee24 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a1b      	ldr	r3, [r3, #32]
 80101c6:	699a      	ldr	r2, [r3, #24]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6a1b      	ldr	r3, [r3, #32]
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d306      	bcc.n	80101e0 <lwip_netconn_do_writemore+0x84>
 80101d2:	4b7e      	ldr	r3, [pc, #504]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 80101d4:	f240 6277 	movw	r2, #1655	; 0x677
 80101d8:	4982      	ldr	r1, [pc, #520]	; (80103e4 <lwip_netconn_do_writemore+0x288>)
 80101da:	487e      	ldr	r0, [pc, #504]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 80101dc:	f00e fe22 	bl	801ee24 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	899b      	ldrh	r3, [r3, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d106      	bne.n	80101f8 <lwip_netconn_do_writemore+0x9c>
 80101ea:	4b78      	ldr	r3, [pc, #480]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 80101ec:	f240 6279 	movw	r2, #1657	; 0x679
 80101f0:	497d      	ldr	r1, [pc, #500]	; (80103e8 <lwip_netconn_do_writemore+0x28c>)
 80101f2:	4878      	ldr	r0, [pc, #480]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 80101f4:	f00e fe16 	bl	801ee24 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6a1b      	ldr	r3, [r3, #32]
 80101fc:	7f1b      	ldrb	r3, [r3, #28]
 80101fe:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	7f1b      	ldrb	r3, [r3, #28]
 8010204:	f003 0302 	and.w	r3, r3, #2
 8010208:	2b00      	cmp	r3, #0
 801020a:	d104      	bne.n	8010216 <lwip_netconn_do_writemore+0xba>
 801020c:	7ebb      	ldrb	r3, [r7, #26]
 801020e:	f003 0304 	and.w	r3, r3, #4
 8010212:	2b00      	cmp	r3, #0
 8010214:	d001      	beq.n	801021a <lwip_netconn_do_writemore+0xbe>
 8010216:	2301      	movs	r3, #1
 8010218:	e000      	b.n	801021c <lwip_netconn_do_writemore+0xc0>
 801021a:	2300      	movs	r3, #0
 801021c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6a1b      	ldr	r3, [r3, #32]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	6a1b      	ldr	r3, [r3, #32]
 801022a:	691b      	ldr	r3, [r3, #16]
 801022c:	4413      	add	r3, r2
 801022e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a1b      	ldr	r3, [r3, #32]
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	685a      	ldr	r2, [r3, #4]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a1b      	ldr	r3, [r3, #32]
 801023c:	691b      	ldr	r3, [r3, #16]
 801023e:	1ad3      	subs	r3, r2, r3
 8010240:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010248:	d307      	bcc.n	801025a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 801024a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801024e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010250:	7ebb      	ldrb	r3, [r7, #26]
 8010252:	f043 0302 	orr.w	r3, r3, #2
 8010256:	76bb      	strb	r3, [r7, #26]
 8010258:	e001      	b.n	801025e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010266:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010268:	89fa      	ldrh	r2, [r7, #14]
 801026a:	8bbb      	ldrh	r3, [r7, #28]
 801026c:	429a      	cmp	r2, r3
 801026e:	d216      	bcs.n	801029e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010270:	89fb      	ldrh	r3, [r7, #14]
 8010272:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010274:	7e3b      	ldrb	r3, [r7, #24]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00d      	beq.n	8010296 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801027a:	8bbb      	ldrh	r3, [r7, #28]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10e      	bne.n	801029e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6a1b      	ldr	r3, [r3, #32]
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d102      	bne.n	8010290 <lwip_netconn_do_writemore+0x134>
 801028a:	f06f 0306 	mvn.w	r3, #6
 801028e:	e000      	b.n	8010292 <lwip_netconn_do_writemore+0x136>
 8010290:	2300      	movs	r3, #0
 8010292:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010294:	e07d      	b.n	8010392 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010296:	7ebb      	ldrb	r3, [r7, #26]
 8010298:	f043 0302 	orr.w	r3, r3, #2
 801029c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6a1b      	ldr	r3, [r3, #32]
 80102a2:	691a      	ldr	r2, [r3, #16]
 80102a4:	8bbb      	ldrh	r3, [r7, #28]
 80102a6:	441a      	add	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a1b      	ldr	r3, [r3, #32]
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d906      	bls.n	80102c2 <lwip_netconn_do_writemore+0x166>
 80102b4:	4b45      	ldr	r3, [pc, #276]	; (80103cc <lwip_netconn_do_writemore+0x270>)
 80102b6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80102ba:	494c      	ldr	r1, [pc, #304]	; (80103ec <lwip_netconn_do_writemore+0x290>)
 80102bc:	4845      	ldr	r0, [pc, #276]	; (80103d4 <lwip_netconn_do_writemore+0x278>)
 80102be:	f00e fdb1 	bl	801ee24 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80102c2:	8bbb      	ldrh	r3, [r7, #28]
 80102c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c8:	4293      	cmp	r3, r2
 80102ca:	d103      	bne.n	80102d4 <lwip_netconn_do_writemore+0x178>
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102d2:	d209      	bcs.n	80102e8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80102d8:	8bba      	ldrh	r2, [r7, #28]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d10b      	bne.n	80102f6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a1b      	ldr	r3, [r3, #32]
 80102e2:	899b      	ldrh	r3, [r3, #12]
 80102e4:	2b01      	cmp	r3, #1
 80102e6:	d906      	bls.n	80102f6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80102e8:	2301      	movs	r3, #1
 80102ea:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80102ec:	7ebb      	ldrb	r3, [r7, #26]
 80102ee:	f043 0302 	orr.w	r3, r3, #2
 80102f2:	76bb      	strb	r3, [r7, #26]
 80102f4:	e001      	b.n	80102fa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80102f6:	2300      	movs	r3, #0
 80102f8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6858      	ldr	r0, [r3, #4]
 80102fe:	7ebb      	ldrb	r3, [r7, #26]
 8010300:	8bba      	ldrh	r2, [r7, #28]
 8010302:	6979      	ldr	r1, [r7, #20]
 8010304:	f006 ffe6 	bl	80172d4 <tcp_write>
 8010308:	4603      	mov	r3, r0
 801030a:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801030c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d12c      	bne.n	801036e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	6a1b      	ldr	r3, [r3, #32]
 8010318:	6999      	ldr	r1, [r3, #24]
 801031a:	8bba      	ldrh	r2, [r7, #28]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6a1b      	ldr	r3, [r3, #32]
 8010320:	440a      	add	r2, r1
 8010322:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6a1b      	ldr	r3, [r3, #32]
 8010328:	6919      	ldr	r1, [r3, #16]
 801032a:	8bba      	ldrh	r2, [r7, #28]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6a1b      	ldr	r3, [r3, #32]
 8010330:	440a      	add	r2, r1
 8010332:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a1b      	ldr	r3, [r3, #32]
 8010338:	691a      	ldr	r2, [r3, #16]
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6a1b      	ldr	r3, [r3, #32]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	429a      	cmp	r2, r3
 8010344:	d113      	bne.n	801036e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6a1b      	ldr	r3, [r3, #32]
 801034a:	899a      	ldrh	r2, [r3, #12]
 801034c:	3a01      	subs	r2, #1
 801034e:	b292      	uxth	r2, r2
 8010350:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6a1b      	ldr	r3, [r3, #32]
 8010356:	899b      	ldrh	r3, [r3, #12]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d008      	beq.n	801036e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a1b      	ldr	r3, [r3, #32]
 8010360:	689a      	ldr	r2, [r3, #8]
 8010362:	3208      	adds	r2, #8
 8010364:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6a1b      	ldr	r3, [r3, #32]
 801036a:	2200      	movs	r2, #0
 801036c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801036e:	7e7b      	ldrb	r3, [r7, #25]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d004      	beq.n	801037e <lwip_netconn_do_writemore+0x222>
 8010374:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010378:	2b00      	cmp	r3, #0
 801037a:	f43f af50 	beq.w	801021e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801037e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d004      	beq.n	8010390 <lwip_netconn_do_writemore+0x234>
 8010386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801038a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801038e:	d146      	bne.n	801041e <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010390:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010392:	7e3b      	ldrb	r3, [r7, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d02b      	beq.n	80103f0 <lwip_netconn_do_writemore+0x294>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a1b      	ldr	r3, [r3, #32]
 801039c:	699a      	ldr	r2, [r3, #24]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6a1b      	ldr	r3, [r3, #32]
 80103a2:	695b      	ldr	r3, [r3, #20]
 80103a4:	429a      	cmp	r2, r3
 80103a6:	d223      	bcs.n	80103f0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d005      	beq.n	80103bc <lwip_netconn_do_writemore+0x260>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b4:	2200      	movs	r2, #0
 80103b6:	2103      	movs	r1, #3
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7f1b      	ldrb	r3, [r3, #28]
 80103c0:	f043 0310 	orr.w	r3, r3, #16
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	771a      	strb	r2, [r3, #28]
 80103ca:	e028      	b.n	801041e <lwip_netconn_do_writemore+0x2c2>
 80103cc:	08020e00 	.word	0x08020e00
 80103d0:	08020f58 	.word	0x08020f58
 80103d4:	08020e44 	.word	0x08020e44
 80103d8:	08021260 	.word	0x08021260
 80103dc:	08020f68 	.word	0x08020f68
 80103e0:	08021280 	.word	0x08021280
 80103e4:	08021298 	.word	0x08021298
 80103e8:	080212d8 	.word	0x080212d8
 80103ec:	08021300 	.word	0x08021300
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	685b      	ldr	r3, [r3, #4]
 80103f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80103f8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80103fc:	d305      	bcc.n	801040a <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010406:	2b04      	cmp	r3, #4
 8010408:	d909      	bls.n	801041e <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	2b00      	cmp	r3, #0
 8010410:	d005      	beq.n	801041e <lwip_netconn_do_writemore+0x2c2>
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010416:	2200      	movs	r2, #0
 8010418:	2103      	movs	r1, #3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801041e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d11d      	bne.n	8010462 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6a1b      	ldr	r3, [r3, #32]
 801042a:	699a      	ldr	r2, [r3, #24]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6a1b      	ldr	r3, [r3, #32]
 8010430:	695b      	ldr	r3, [r3, #20]
 8010432:	429a      	cmp	r2, r3
 8010434:	d002      	beq.n	801043c <lwip_netconn_do_writemore+0x2e0>
 8010436:	7e3b      	ldrb	r3, [r7, #24]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801043c:	2301      	movs	r3, #1
 801043e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	4618      	mov	r0, r3
 8010446:	f007 fd2f 	bl	8017ea8 <tcp_output>
 801044a:	4603      	mov	r3, r0
 801044c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801044e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010452:	f113 0f04 	cmn.w	r3, #4
 8010456:	d12c      	bne.n	80104b2 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010458:	7b3b      	ldrb	r3, [r7, #12]
 801045a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801045c:	2301      	movs	r3, #1
 801045e:	76fb      	strb	r3, [r7, #27]
 8010460:	e027      	b.n	80104b2 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801046a:	d120      	bne.n	80104ae <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	4618      	mov	r0, r3
 8010472:	f007 fd19 	bl	8017ea8 <tcp_output>
 8010476:	4603      	mov	r3, r0
 8010478:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801047a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801047e:	f113 0f04 	cmn.w	r3, #4
 8010482:	d104      	bne.n	801048e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010484:	7b7b      	ldrb	r3, [r7, #13]
 8010486:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010488:	2301      	movs	r3, #1
 801048a:	76fb      	strb	r3, [r7, #27]
 801048c:	e011      	b.n	80104b2 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801048e:	7e3b      	ldrb	r3, [r7, #24]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d00e      	beq.n	80104b2 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a1b      	ldr	r3, [r3, #32]
 8010498:	699b      	ldr	r3, [r3, #24]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d102      	bne.n	80104a4 <lwip_netconn_do_writemore+0x348>
 801049e:	f06f 0306 	mvn.w	r3, #6
 80104a2:	e000      	b.n	80104a6 <lwip_netconn_do_writemore+0x34a>
 80104a4:	2300      	movs	r3, #0
 80104a6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80104a8:	2301      	movs	r3, #1
 80104aa:	76fb      	strb	r3, [r7, #27]
 80104ac:	e001      	b.n	80104b2 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80104ae:	2301      	movs	r3, #1
 80104b0:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80104b2:	7efb      	ldrb	r3, [r7, #27]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d015      	beq.n	80104e4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a1b      	ldr	r3, [r3, #32]
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	330c      	adds	r3, #12
 80104c0:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	7ffa      	ldrb	r2, [r7, #31]
 80104c8:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2200      	movs	r2, #0
 80104ce:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2200      	movs	r2, #0
 80104d4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80104d6:	78fb      	ldrb	r3, [r7, #3]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d006      	beq.n	80104ea <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80104dc:	68b8      	ldr	r0, [r7, #8]
 80104de:	f00d fd4f 	bl	801df80 <sys_sem_signal>
 80104e2:	e002      	b.n	80104ea <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80104e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104e8:	e000      	b.n	80104ec <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80104ea:	2300      	movs	r3, #0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	785b      	ldrb	r3, [r3, #1]
 8010506:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	685b      	ldr	r3, [r3, #4]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d069      	beq.n	80105e6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801051c:	2b10      	cmp	r3, #16
 801051e:	d162      	bne.n	80105e6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010524:	2b03      	cmp	r3, #3
 8010526:	d002      	beq.n	801052e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010528:	7afb      	ldrb	r3, [r7, #11]
 801052a:	2b02      	cmp	r3, #2
 801052c:	d05b      	beq.n	80105e6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 801052e:	7afb      	ldrb	r3, [r7, #11]
 8010530:	2b03      	cmp	r3, #3
 8010532:	d103      	bne.n	801053c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	22f5      	movs	r2, #245	; 0xf5
 8010538:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801053a:	e059      	b.n	80105f0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 801053c:	7afb      	ldrb	r3, [r7, #11]
 801053e:	2b01      	cmp	r3, #1
 8010540:	d103      	bne.n	801054a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	22fb      	movs	r2, #251	; 0xfb
 8010546:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010548:	e052      	b.n	80105f0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	7a1b      	ldrb	r3, [r3, #8]
 801054e:	f003 0301 	and.w	r3, r3, #1
 8010552:	2b00      	cmp	r3, #0
 8010554:	d004      	beq.n	8010560 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	4618      	mov	r0, r3
 801055c:	f7ff fa2a 	bl	800f9b4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	6a1b      	ldr	r3, [r3, #32]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d006      	beq.n	8010578 <lwip_netconn_do_close+0x84>
 801056a:	4b23      	ldr	r3, [pc, #140]	; (80105f8 <lwip_netconn_do_close+0x104>)
 801056c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010570:	4922      	ldr	r1, [pc, #136]	; (80105fc <lwip_netconn_do_close+0x108>)
 8010572:	4823      	ldr	r0, [pc, #140]	; (8010600 <lwip_netconn_do_close+0x10c>)
 8010574:	f00e fc56 	bl	801ee24 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2204      	movs	r2, #4
 801057e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	68fa      	ldr	r2, [r7, #12]
 8010586:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2100      	movs	r1, #0
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff fa8e 	bl	800fab0 <lwip_netconn_do_close_internal>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d029      	beq.n	80105ee <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	785b      	ldrb	r3, [r3, #1]
 80105a0:	2b04      	cmp	r3, #4
 80105a2:	d006      	beq.n	80105b2 <lwip_netconn_do_close+0xbe>
 80105a4:	4b14      	ldr	r3, [pc, #80]	; (80105f8 <lwip_netconn_do_close+0x104>)
 80105a6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80105aa:	4916      	ldr	r1, [pc, #88]	; (8010604 <lwip_netconn_do_close+0x110>)
 80105ac:	4814      	ldr	r0, [pc, #80]	; (8010600 <lwip_netconn_do_close+0x10c>)
 80105ae:	f00e fc39 	bl	801ee24 <iprintf>
        UNLOCK_TCPIP_CORE();
 80105b2:	4815      	ldr	r0, [pc, #84]	; (8010608 <lwip_netconn_do_close+0x114>)
 80105b4:	f00d fd55 	bl	801e062 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	330c      	adds	r3, #12
 80105be:	2100      	movs	r1, #0
 80105c0:	4618      	mov	r0, r3
 80105c2:	f00d fcac 	bl	801df1e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80105c6:	4810      	ldr	r0, [pc, #64]	; (8010608 <lwip_netconn_do_close+0x114>)
 80105c8:	f00d fd3c 	bl	801e044 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	785b      	ldrb	r3, [r3, #1]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00b      	beq.n	80105ee <lwip_netconn_do_close+0xfa>
 80105d6:	4b08      	ldr	r3, [pc, #32]	; (80105f8 <lwip_netconn_do_close+0x104>)
 80105d8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80105dc:	4909      	ldr	r1, [pc, #36]	; (8010604 <lwip_netconn_do_close+0x110>)
 80105de:	4808      	ldr	r0, [pc, #32]	; (8010600 <lwip_netconn_do_close+0x10c>)
 80105e0:	f00e fc20 	bl	801ee24 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80105e4:	e003      	b.n	80105ee <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	22f5      	movs	r2, #245	; 0xf5
 80105ea:	711a      	strb	r2, [r3, #4]
 80105ec:	e000      	b.n	80105f0 <lwip_netconn_do_close+0xfc>
      return;
 80105ee:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80105f0:	3710      	adds	r7, #16
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}
 80105f6:	bf00      	nop
 80105f8:	08020e00 	.word	0x08020e00
 80105fc:	080211a4 	.word	0x080211a4
 8010600:	08020e44 	.word	0x08020e44
 8010604:	080211c0 	.word	0x080211c0
 8010608:	20009120 	.word	0x20009120

0801060c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d013      	beq.n	8010642 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00b      	beq.n	801063a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4618      	mov	r0, r3
 8010628:	f002 f86a 	bl	8012700 <pbuf_free>
      buf->p = buf->ptr = NULL;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	605a      	str	r2, [r3, #4]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	685a      	ldr	r2, [r3, #4]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801063a:	6879      	ldr	r1, [r7, #4]
 801063c:	2006      	movs	r0, #6
 801063e:	f001 f977 	bl	8011930 <memp_free>
  }
}
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 801064c:	b480      	push	{r7}
 801064e:	b085      	sub	sp, #20
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2b00      	cmp	r3, #0
 801065c:	db02      	blt.n	8010664 <tryget_socket_unconn_nouse+0x18>
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2b03      	cmp	r3, #3
 8010662:	dd01      	ble.n	8010668 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	e003      	b.n	8010670 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	011b      	lsls	r3, r3, #4
 801066c:	4a03      	ldr	r2, [pc, #12]	; (801067c <tryget_socket_unconn_nouse+0x30>)
 801066e:	4413      	add	r3, r2
}
 8010670:	4618      	mov	r0, r3
 8010672:	3714      	adds	r7, #20
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	200090d4 	.word	0x200090d4

08010680 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b084      	sub	sp, #16
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7ff ffdf 	bl	801064c <tryget_socket_unconn_nouse>
 801068e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 8010690:	68fb      	ldr	r3, [r7, #12]
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b084      	sub	sp, #16
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f7ff ffec 	bl	8010680 <tryget_socket_unconn>
 80106a8:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d005      	beq.n	80106bc <tryget_socket+0x22>
    if (sock->conn) {
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d001      	beq.n	80106bc <tryget_socket+0x22>
      return sock;
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	e000      	b.n	80106be <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3710      	adds	r7, #16
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
	...

080106c8 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7ff ffe2 	bl	801069a <tryget_socket>
 80106d6:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d104      	bne.n	80106e8 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 80106de:	4b05      	ldr	r3, [pc, #20]	; (80106f4 <get_socket+0x2c>)
 80106e0:	2209      	movs	r2, #9
 80106e2:	601a      	str	r2, [r3, #0]
    return NULL;
 80106e4:	2300      	movs	r3, #0
 80106e6:	e000      	b.n	80106ea <get_socket+0x22>
  }
  return sock;
 80106e8:	68fb      	ldr	r3, [r7, #12]
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	2000cb98 	.word	0x2000cb98

080106f8 <lwip_sockopt_to_ipopt>:
}
#endif  /* LWIP_TCPIP_CORE_LOCKING */

static int
lwip_sockopt_to_ipopt(int optname)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b082      	sub	sp, #8
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  /* Map SO_* values to our internal SOF_* values
   * We should not rely on #defines in socket.h
   * being in sync with ip.h.
   */
  switch (optname) {
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b20      	cmp	r3, #32
 8010704:	d009      	beq.n	801071a <lwip_sockopt_to_ipopt+0x22>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2b20      	cmp	r3, #32
 801070a:	dc0c      	bgt.n	8010726 <lwip_sockopt_to_ipopt+0x2e>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b04      	cmp	r3, #4
 8010710:	d007      	beq.n	8010722 <lwip_sockopt_to_ipopt+0x2a>
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	2b08      	cmp	r3, #8
 8010716:	d002      	beq.n	801071e <lwip_sockopt_to_ipopt+0x26>
 8010718:	e005      	b.n	8010726 <lwip_sockopt_to_ipopt+0x2e>
  case SO_BROADCAST:
    return SOF_BROADCAST;
 801071a:	2320      	movs	r3, #32
 801071c:	e00b      	b.n	8010736 <lwip_sockopt_to_ipopt+0x3e>
  case SO_KEEPALIVE:
    return SOF_KEEPALIVE;
 801071e:	2308      	movs	r3, #8
 8010720:	e009      	b.n	8010736 <lwip_sockopt_to_ipopt+0x3e>
  case SO_REUSEADDR:
    return SOF_REUSEADDR;
 8010722:	2304      	movs	r3, #4
 8010724:	e007      	b.n	8010736 <lwip_sockopt_to_ipopt+0x3e>
  default:
    LWIP_ASSERT("Unknown socket option", 0);
 8010726:	4b06      	ldr	r3, [pc, #24]	; (8010740 <lwip_sockopt_to_ipopt+0x48>)
 8010728:	f640 3239 	movw	r2, #2873	; 0xb39
 801072c:	4905      	ldr	r1, [pc, #20]	; (8010744 <lwip_sockopt_to_ipopt+0x4c>)
 801072e:	4806      	ldr	r0, [pc, #24]	; (8010748 <lwip_sockopt_to_ipopt+0x50>)
 8010730:	f00e fb78 	bl	801ee24 <iprintf>
    return 0;
 8010734:	2300      	movs	r3, #0
  }
}
 8010736:	4618      	mov	r0, r3
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
 801073e:	bf00      	nop
 8010740:	08021358 	.word	0x08021358
 8010744:	080216e4 	.word	0x080216e4
 8010748:	080213ac 	.word	0x080213ac

0801074c <lwip_setsockopt>:
  return err;
}

int
lwip_setsockopt(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b08a      	sub	sp, #40	; 0x28
 8010750:	af02      	add	r7, sp, #8
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	607a      	str	r2, [r7, #4]
 8010758:	603b      	str	r3, [r7, #0]
  int err = 0;
 801075a:	2300      	movs	r3, #0
 801075c:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = get_socket(s);
 801075e:	68f8      	ldr	r0, [r7, #12]
 8010760:	f7ff ffb2 	bl	80106c8 <get_socket>
 8010764:	61b8      	str	r0, [r7, #24]
#if !LWIP_TCPIP_CORE_LOCKING
  err_t cberr;
  LWIP_SETGETSOCKOPT_DATA_VAR_DECLARE(data);
#endif /* !LWIP_TCPIP_CORE_LOCKING */

  if (!sock) {
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <lwip_setsockopt+0x26>
    return -1;
 801076c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010770:	e02b      	b.n	80107ca <lwip_setsockopt+0x7e>
  }

  if (NULL == optval) {
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10a      	bne.n	801078e <lwip_setsockopt+0x42>
    sock_set_errno(sock, EFAULT);
 8010778:	230e      	movs	r3, #14
 801077a:	613b      	str	r3, [r7, #16]
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d002      	beq.n	8010788 <lwip_setsockopt+0x3c>
 8010782:	4a14      	ldr	r2, [pc, #80]	; (80107d4 <lwip_setsockopt+0x88>)
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 8010788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801078c:	e01d      	b.n	80107ca <lwip_setsockopt+0x7e>
  }

#if LWIP_TCPIP_CORE_LOCKING
  /* core-locking can just call the -impl function */
  LOCK_TCPIP_CORE();
 801078e:	4812      	ldr	r0, [pc, #72]	; (80107d8 <lwip_setsockopt+0x8c>)
 8010790:	f00d fc58 	bl	801e044 <sys_mutex_lock>
  err = lwip_setsockopt_impl(s, level, optname, optval, optlen);
 8010794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010796:	9300      	str	r3, [sp, #0]
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	687a      	ldr	r2, [r7, #4]
 801079c:	68b9      	ldr	r1, [r7, #8]
 801079e:	68f8      	ldr	r0, [r7, #12]
 80107a0:	f000 f81c 	bl	80107dc <lwip_setsockopt_impl>
 80107a4:	61f8      	str	r0, [r7, #28]
  UNLOCK_TCPIP_CORE();
 80107a6:	480c      	ldr	r0, [pc, #48]	; (80107d8 <lwip_setsockopt+0x8c>)
 80107a8:	f00d fc5b 	bl	801e062 <sys_mutex_unlock>
  /* maybe lwip_getsockopt_internal has changed err */
  err = LWIP_SETGETSOCKOPT_DATA_VAR_REF(data).err;
  LWIP_SETGETSOCKOPT_DATA_VAR_FREE(data);
#endif  /* LWIP_TCPIP_CORE_LOCKING */

  sock_set_errno(sock, err);
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	617b      	str	r3, [r7, #20]
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d002      	beq.n	80107bc <lwip_setsockopt+0x70>
 80107b6:	4a07      	ldr	r2, [pc, #28]	; (80107d4 <lwip_setsockopt+0x88>)
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return err ? -1 : 0;
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d002      	beq.n	80107c8 <lwip_setsockopt+0x7c>
 80107c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107c6:	e000      	b.n	80107ca <lwip_setsockopt+0x7e>
 80107c8:	2300      	movs	r3, #0
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3720      	adds	r7, #32
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	2000cb98 	.word	0x2000cb98
 80107d8:	20009120 	.word	0x20009120

080107dc <lwip_setsockopt_impl>:
/** lwip_setsockopt_impl: the actual implementation of setsockopt:
 * same argument as lwip_setsockopt, either called directly or through callback
 */
static int
lwip_setsockopt_impl(int s, int level, int optname, const void *optval, socklen_t optlen)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b088      	sub	sp, #32
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	607a      	str	r2, [r7, #4]
 80107e8:	603b      	str	r3, [r7, #0]
  int err = 0;
 80107ea:	2300      	movs	r3, #0
 80107ec:	61fb      	str	r3, [r7, #28]
  struct lwip_sock *sock = tryget_socket(s);
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff ff53 	bl	801069a <tryget_socket>
 80107f4:	6178      	str	r0, [r7, #20]
  if (!sock) {
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d101      	bne.n	8010800 <lwip_setsockopt_impl+0x24>
    return EBADF;
 80107fc:	2309      	movs	r3, #9
 80107fe:	e187      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
  if (LWIP_HOOK_SOCKETS_SETSOCKOPT(s, sock, level, optname, optval, optlen, &err)) {
    return err;
  }
#endif

  switch (level) {
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	f640 72ff 	movw	r2, #4095	; 0xfff
 8010806:	4293      	cmp	r3, r2
 8010808:	d015      	beq.n	8010836 <lwip_setsockopt_impl+0x5a>
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010810:	f280 817a 	bge.w	8010b08 <lwip_setsockopt_impl+0x32c>
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	2bff      	cmp	r3, #255	; 0xff
 8010818:	f000 8172 	beq.w	8010b00 <lwip_setsockopt_impl+0x324>
 801081c:	68bb      	ldr	r3, [r7, #8]
 801081e:	2bff      	cmp	r3, #255	; 0xff
 8010820:	f300 8172 	bgt.w	8010b08 <lwip_setsockopt_impl+0x32c>
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	f000 80e0 	beq.w	80109ec <lwip_setsockopt_impl+0x210>
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b06      	cmp	r3, #6
 8010830:	f000 8116 	beq.w	8010a60 <lwip_setsockopt_impl+0x284>
 8010834:	e168      	b.n	8010b08 <lwip_setsockopt_impl+0x32c>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f241 020b 	movw	r2, #4107	; 0x100b
 801083c:	4293      	cmp	r3, r2
 801083e:	f000 8091 	beq.w	8010964 <lwip_setsockopt_impl+0x188>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	f241 020b 	movw	r2, #4107	; 0x100b
 8010848:	4293      	cmp	r3, r2
 801084a:	f300 80cb 	bgt.w	80109e4 <lwip_setsockopt_impl+0x208>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f241 020a 	movw	r2, #4106	; 0x100a
 8010854:	4293      	cmp	r3, r2
 8010856:	d050      	beq.n	80108fa <lwip_setsockopt_impl+0x11e>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f241 020a 	movw	r2, #4106	; 0x100a
 801085e:	4293      	cmp	r3, r2
 8010860:	f300 80c0 	bgt.w	80109e4 <lwip_setsockopt_impl+0x208>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2b08      	cmp	r3, #8
 8010868:	d003      	beq.n	8010872 <lwip_setsockopt_impl+0x96>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2b20      	cmp	r3, #32
 801086e:	f040 80b9 	bne.w	80109e4 <lwip_setsockopt_impl+0x208>
        case SO_BROADCAST:
        case SO_KEEPALIVE:
#if SO_REUSE
        case SO_REUSEADDR:
#endif /* SO_REUSE */
          if ((optname == SO_BROADCAST) &&
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b20      	cmp	r3, #32
 8010876:	d108      	bne.n	801088a <lwip_setsockopt_impl+0xae>
              (NETCONNTYPE_GROUP(sock->conn->type) != NETCONN_UDP)) {
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if ((optname == SO_BROADCAST) &&
 8010882:	2b20      	cmp	r3, #32
 8010884:	d001      	beq.n	801088a <lwip_setsockopt_impl+0xae>
            done_socket(sock);
            return ENOPROTOOPT;
 8010886:	235c      	movs	r3, #92	; 0x5c
 8010888:	e142      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
          }

          optname = lwip_sockopt_to_ipopt(optname);
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f7ff ff34 	bl	80106f8 <lwip_sockopt_to_ipopt>
 8010890:	6078      	str	r0, [r7, #4]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010894:	2b03      	cmp	r3, #3
 8010896:	d801      	bhi.n	801089c <lwip_setsockopt_impl+0xc0>
 8010898:	2316      	movs	r3, #22
 801089a:	e139      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 801089c:	697b      	ldr	r3, [r7, #20]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d004      	beq.n	80108ae <lwip_setsockopt_impl+0xd2>
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	685b      	ldr	r3, [r3, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d101      	bne.n	80108b2 <lwip_setsockopt_impl+0xd6>
 80108ae:	2316      	movs	r3, #22
 80108b0:	e12e      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
          if (*(const int *)optval) {
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00e      	beq.n	80108d8 <lwip_setsockopt_impl+0xfc>
            ip_set_option(sock->conn->pcb.ip, optname);
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	685b      	ldr	r3, [r3, #4]
 80108c0:	7a5b      	ldrb	r3, [r3, #9]
 80108c2:	b25a      	sxtb	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	b25b      	sxtb	r3, r3
 80108c8:	4313      	orrs	r3, r2
 80108ca:	b25a      	sxtb	r2, r3
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	b2d2      	uxtb	r2, r2
 80108d4:	725a      	strb	r2, [r3, #9]
          } else {
            ip_reset_option(sock->conn->pcb.ip, optname);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, optname=0x%x, ..) -> %s\n",
                                      s, optname, (*(const int *)optval ? "on" : "off")));
          break;
 80108d6:	e088      	b.n	80109ea <lwip_setsockopt_impl+0x20e>
            ip_reset_option(sock->conn->pcb.ip, optname);
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	7a5b      	ldrb	r3, [r3, #9]
 80108e0:	b25a      	sxtb	r2, r3
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	b25b      	sxtb	r3, r3
 80108e6:	43db      	mvns	r3, r3
 80108e8:	b25b      	sxtb	r3, r3
 80108ea:	4013      	ands	r3, r2
 80108ec:	b25a      	sxtb	r2, r3
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	b2d2      	uxtb	r2, r2
 80108f6:	725a      	strb	r2, [r3, #9]
          break;
 80108f8:	e077      	b.n	80109ea <lwip_setsockopt_impl+0x20e>
        }
        break;
#endif /* LWIP_SO_LINGER */
#if LWIP_UDP
        case SO_NO_CHECK:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_UDP);
 80108fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d801      	bhi.n	8010904 <lwip_setsockopt_impl+0x128>
 8010900:	2316      	movs	r3, #22
 8010902:	e105      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d004      	beq.n	8010916 <lwip_setsockopt_impl+0x13a>
 801090c:	697b      	ldr	r3, [r7, #20]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d101      	bne.n	801091a <lwip_setsockopt_impl+0x13e>
 8010916:	2316      	movs	r3, #22
 8010918:	e0fa      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010924:	2b20      	cmp	r3, #32
 8010926:	d001      	beq.n	801092c <lwip_setsockopt_impl+0x150>
 8010928:	235c      	movs	r3, #92	; 0x5c
 801092a:	e0f1      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
            /* this flag is only available for UDP, not for UDP lite */
            done_socket(sock);
            return EAFNOSUPPORT;
          }
#endif /* LWIP_UDPLITE */
          if (*(const int *)optval) {
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d00b      	beq.n	801094c <lwip_setsockopt_impl+0x170>
            udp_set_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	685b      	ldr	r3, [r3, #4]
 801093a:	7c1a      	ldrb	r2, [r3, #16]
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	f042 0201 	orr.w	r2, r2, #1
 8010946:	b2d2      	uxtb	r2, r2
 8010948:	741a      	strb	r2, [r3, #16]
          } else {
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
          }
          break;
 801094a:	e04e      	b.n	80109ea <lwip_setsockopt_impl+0x20e>
            udp_clear_flags(sock->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	7c1a      	ldrb	r2, [r3, #16]
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	f022 0201 	bic.w	r2, r2, #1
 801095e:	b2d2      	uxtb	r2, r2
 8010960:	741a      	strb	r2, [r3, #16]
          break;
 8010962:	e042      	b.n	80109ea <lwip_setsockopt_impl+0x20e>
#endif /* LWIP_UDP */
        case SO_BINDTODEVICE: {
          const struct ifreq *iface;
          struct netif *n = NULL;
 8010964:	2300      	movs	r3, #0
 8010966:	61bb      	str	r3, [r7, #24]

          LWIP_SOCKOPT_CHECK_OPTLEN_CONN(sock, optlen, struct ifreq);
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	2b05      	cmp	r3, #5
 801096c:	d801      	bhi.n	8010972 <lwip_setsockopt_impl+0x196>
 801096e:	2316      	movs	r3, #22
 8010970:	e0ce      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010972:	697b      	ldr	r3, [r7, #20]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d101      	bne.n	801097e <lwip_setsockopt_impl+0x1a2>
 801097a:	2316      	movs	r3, #22
 801097c:	e0c8      	b.n	8010b10 <lwip_setsockopt_impl+0x334>

          iface = (const struct ifreq *)optval;
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	613b      	str	r3, [r7, #16]
          if (iface->ifr_name[0] != 0) {
 8010982:	693b      	ldr	r3, [r7, #16]
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d009      	beq.n	801099e <lwip_setsockopt_impl+0x1c2>
            n = netif_find(iface->ifr_name);
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	4618      	mov	r0, r3
 801098e:	f001 fb17 	bl	8011fc0 <netif_find>
 8010992:	61b8      	str	r0, [r7, #24]
            if (n == NULL) {
 8010994:	69bb      	ldr	r3, [r7, #24]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d101      	bne.n	801099e <lwip_setsockopt_impl+0x1c2>
              done_socket(sock);
              return ENODEV;
 801099a:	2313      	movs	r3, #19
 801099c:	e0b8      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
            }
          }

          switch (NETCONNTYPE_GROUP(netconn_type(sock->conn))) {
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	781b      	ldrb	r3, [r3, #0]
 80109a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109a8:	2b10      	cmp	r3, #16
 80109aa:	d002      	beq.n	80109b2 <lwip_setsockopt_impl+0x1d6>
 80109ac:	2b20      	cmp	r3, #32
 80109ae:	d008      	beq.n	80109c2 <lwip_setsockopt_impl+0x1e6>
 80109b0:	e00f      	b.n	80109d2 <lwip_setsockopt_impl+0x1f6>
#if LWIP_TCP
            case NETCONN_TCP:
              tcp_bind_netif(sock->conn->pcb.tcp, n);
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	69b9      	ldr	r1, [r7, #24]
 80109ba:	4618      	mov	r0, r3
 80109bc:	f002 fd44 	bl	8013448 <tcp_bind_netif>
              break;
 80109c0:	e00f      	b.n	80109e2 <lwip_setsockopt_impl+0x206>
#endif
#if LWIP_UDP
            case NETCONN_UDP:
              udp_bind_netif(sock->conn->pcb.udp, n);
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	69b9      	ldr	r1, [r7, #24]
 80109ca:	4618      	mov	r0, r3
 80109cc:	f008 ff00 	bl	80197d0 <udp_bind_netif>
              break;
 80109d0:	e007      	b.n	80109e2 <lwip_setsockopt_impl+0x206>
            case NETCONN_RAW:
              raw_bind_netif(sock->conn->pcb.raw, n);
              break;
#endif
            default:
              LWIP_ASSERT("Unhandled netconn type in SO_BINDTODEVICE", 0);
 80109d2:	4b51      	ldr	r3, [pc, #324]	; (8010b18 <lwip_setsockopt_impl+0x33c>)
 80109d4:	f640 527d 	movw	r2, #3453	; 0xd7d
 80109d8:	4950      	ldr	r1, [pc, #320]	; (8010b1c <lwip_setsockopt_impl+0x340>)
 80109da:	4851      	ldr	r0, [pc, #324]	; (8010b20 <lwip_setsockopt_impl+0x344>)
 80109dc:	f00e fa22 	bl	801ee24 <iprintf>
              break;
 80109e0:	bf00      	nop
          }
        }
        break;
 80109e2:	e002      	b.n	80109ea <lwip_setsockopt_impl+0x20e>
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, SOL_SOCKET, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 80109e4:	235c      	movs	r3, #92	; 0x5c
 80109e6:	61fb      	str	r3, [r7, #28]
          break;
 80109e8:	bf00      	nop
      }  /* switch (optname) */
      break;
 80109ea:	e090      	b.n	8010b0e <lwip_setsockopt_impl+0x332>
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d01a      	beq.n	8010a28 <lwip_setsockopt_impl+0x24c>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d12f      	bne.n	8010a58 <lwip_setsockopt_impl+0x27c>

    /* Level: IPPROTO_IP */
    case IPPROTO_IP:
      switch (optname) {
        case IP_TTL:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 80109f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109fa:	2b03      	cmp	r3, #3
 80109fc:	d801      	bhi.n	8010a02 <lwip_setsockopt_impl+0x226>
 80109fe:	2316      	movs	r3, #22
 8010a00:	e086      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010a02:	697b      	ldr	r3, [r7, #20]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d004      	beq.n	8010a14 <lwip_setsockopt_impl+0x238>
 8010a0a:	697b      	ldr	r3, [r7, #20]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	685b      	ldr	r3, [r3, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d101      	bne.n	8010a18 <lwip_setsockopt_impl+0x23c>
 8010a14:	2316      	movs	r3, #22
 8010a16:	e07b      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->ttl = (u8_t)(*(const int *)optval);
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	685b      	ldr	r3, [r3, #4]
 8010a22:	b2d2      	uxtb	r2, r2
 8010a24:	72da      	strb	r2, [r3, #11]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TTL, ..) -> %d\n",
                                      s, sock->conn->pcb.ip->ttl));
          break;
 8010a26:	e01a      	b.n	8010a5e <lwip_setsockopt_impl+0x282>
        case IP_TOS:
          LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB(sock, optlen, int);
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	2b03      	cmp	r3, #3
 8010a2c:	d801      	bhi.n	8010a32 <lwip_setsockopt_impl+0x256>
 8010a2e:	2316      	movs	r3, #22
 8010a30:	e06e      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010a32:	697b      	ldr	r3, [r7, #20]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d004      	beq.n	8010a44 <lwip_setsockopt_impl+0x268>
 8010a3a:	697b      	ldr	r3, [r7, #20]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <lwip_setsockopt_impl+0x26c>
 8010a44:	2316      	movs	r3, #22
 8010a46:	e063      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
          sock->conn->pcb.ip->tos = (u8_t)(*(const int *)optval);
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	697b      	ldr	r3, [r7, #20]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	b2d2      	uxtb	r2, r2
 8010a54:	729a      	strb	r2, [r3, #10]
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, IP_TOS, ..)-> %d\n",
                                      s, sock->conn->pcb.ip->tos));
          break;
 8010a56:	e002      	b.n	8010a5e <lwip_setsockopt_impl+0x282>
        break;
#endif /* LWIP_IGMP */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_IP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010a58:	235c      	movs	r3, #92	; 0x5c
 8010a5a:	61fb      	str	r3, [r7, #28]
          break;
 8010a5c:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010a5e:	e056      	b.n	8010b0e <lwip_setsockopt_impl+0x332>

#if LWIP_TCP
    /* Level: IPPROTO_TCP */
    case IPPROTO_TCP:
      /* Special case: all IPPROTO_TCP option take an int */
      LWIP_SOCKOPT_CHECK_OPTLEN_CONN_PCB_TYPE(sock, optlen, int, NETCONN_TCP);
 8010a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a62:	2b03      	cmp	r3, #3
 8010a64:	d801      	bhi.n	8010a6a <lwip_setsockopt_impl+0x28e>
 8010a66:	2316      	movs	r3, #22
 8010a68:	e052      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d004      	beq.n	8010a7c <lwip_setsockopt_impl+0x2a0>
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <lwip_setsockopt_impl+0x2a4>
 8010a7c:	2316      	movs	r3, #22
 8010a7e:	e047      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a8a:	2b10      	cmp	r3, #16
 8010a8c:	d001      	beq.n	8010a92 <lwip_setsockopt_impl+0x2b6>
 8010a8e:	235c      	movs	r3, #92	; 0x5c
 8010a90:	e03e      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
      if (sock->conn->pcb.tcp->state == LISTEN) {
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	685b      	ldr	r3, [r3, #4]
 8010a98:	7d1b      	ldrb	r3, [r3, #20]
 8010a9a:	2b01      	cmp	r3, #1
 8010a9c:	d101      	bne.n	8010aa2 <lwip_setsockopt_impl+0x2c6>
        done_socket(sock);
        return EINVAL;
 8010a9e:	2316      	movs	r3, #22
 8010aa0:	e036      	b.n	8010b10 <lwip_setsockopt_impl+0x334>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d003      	beq.n	8010ab0 <lwip_setsockopt_impl+0x2d4>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2b02      	cmp	r3, #2
 8010aac:	d01c      	beq.n	8010ae8 <lwip_setsockopt_impl+0x30c>
 8010aae:	e023      	b.n	8010af8 <lwip_setsockopt_impl+0x31c>
      }
      switch (optname) {
        case TCP_NODELAY:
          if (*(const int *)optval) {
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d00b      	beq.n	8010ad0 <lwip_setsockopt_impl+0x2f4>
            tcp_nagle_disable(sock->conn->pcb.tcp);
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	685b      	ldr	r3, [r3, #4]
 8010abe:	8b5a      	ldrh	r2, [r3, #26]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010aca:	b292      	uxth	r2, r2
 8010acc:	835a      	strh	r2, [r3, #26]
          } else {
            tcp_nagle_enable(sock->conn->pcb.tcp);
          }
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_NODELAY) -> %s\n",
                                      s, (*(const int *)optval) ? "on" : "off") );
          break;
 8010ace:	e016      	b.n	8010afe <lwip_setsockopt_impl+0x322>
            tcp_nagle_enable(sock->conn->pcb.tcp);
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	8b5a      	ldrh	r2, [r3, #26]
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010ae2:	b292      	uxth	r2, r2
 8010ae4:	835a      	strh	r2, [r3, #26]
          break;
 8010ae6:	e00a      	b.n	8010afe <lwip_setsockopt_impl+0x322>
        case TCP_KEEPALIVE:
          sock->conn->pcb.tcp->keep_idle = (u32_t)(*(const int *)optval);
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	685b      	ldr	r3, [r3, #4]
 8010af2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, TCP_KEEPALIVE) -> %"U32_F"\n",
                                      s, sock->conn->pcb.tcp->keep_idle));
          break;
 8010af6:	e002      	b.n	8010afe <lwip_setsockopt_impl+0x322>
          break;
#endif /* LWIP_TCP_KEEPALIVE */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_TCP, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010af8:	235c      	movs	r3, #92	; 0x5c
 8010afa:	61fb      	str	r3, [r7, #28]
          break;
 8010afc:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010afe:	e006      	b.n	8010b0e <lwip_setsockopt_impl+0x332>
          break;
#endif /* LWIP_IPV6 && LWIP_RAW */
        default:
          LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, IPPROTO_RAW, UNIMPL: optname=0x%x, ..)\n",
                                      s, optname));
          err = ENOPROTOOPT;
 8010b00:	235c      	movs	r3, #92	; 0x5c
 8010b02:	61fb      	str	r3, [r7, #28]
          break;
 8010b04:	bf00      	nop
      }  /* switch (optname) */
      break;
 8010b06:	e002      	b.n	8010b0e <lwip_setsockopt_impl+0x332>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_setsockopt(%d, level=0x%x, UNIMPL: optname=0x%x, ..)\n",
                                  s, level, optname));
      err = ENOPROTOOPT;
 8010b08:	235c      	movs	r3, #92	; 0x5c
 8010b0a:	61fb      	str	r3, [r7, #28]
      break;
 8010b0c:	bf00      	nop
  }  /* switch (level) */

  done_socket(sock);
  return err;
 8010b0e:	69fb      	ldr	r3, [r7, #28]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3720      	adds	r7, #32
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	08021358 	.word	0x08021358
 8010b1c:	080216fc 	.word	0x080216fc
 8010b20:	080213ac 	.word	0x080213ac

08010b24 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010b2e:	f008 fa73 	bl	8019018 <sys_timeouts_sleeptime>
 8010b32:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b3a:	d10b      	bne.n	8010b54 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010b3c:	4813      	ldr	r0, [pc, #76]	; (8010b8c <tcpip_timeouts_mbox_fetch+0x68>)
 8010b3e:	f00d fa90 	bl	801e062 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010b42:	2200      	movs	r2, #0
 8010b44:	6839      	ldr	r1, [r7, #0]
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f00d f948 	bl	801dddc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010b4c:	480f      	ldr	r0, [pc, #60]	; (8010b8c <tcpip_timeouts_mbox_fetch+0x68>)
 8010b4e:	f00d fa79 	bl	801e044 <sys_mutex_lock>
    return;
 8010b52:	e018      	b.n	8010b86 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d102      	bne.n	8010b60 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010b5a:	f008 fa23 	bl	8018fa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010b5e:	e7e6      	b.n	8010b2e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010b60:	480a      	ldr	r0, [pc, #40]	; (8010b8c <tcpip_timeouts_mbox_fetch+0x68>)
 8010b62:	f00d fa7e 	bl	801e062 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8010b66:	68fa      	ldr	r2, [r7, #12]
 8010b68:	6839      	ldr	r1, [r7, #0]
 8010b6a:	6878      	ldr	r0, [r7, #4]
 8010b6c:	f00d f936 	bl	801dddc <sys_arch_mbox_fetch>
 8010b70:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8010b72:	4806      	ldr	r0, [pc, #24]	; (8010b8c <tcpip_timeouts_mbox_fetch+0x68>)
 8010b74:	f00d fa66 	bl	801e044 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010b78:	68bb      	ldr	r3, [r7, #8]
 8010b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b7e:	d102      	bne.n	8010b86 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010b80:	f008 fa10 	bl	8018fa4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010b84:	e7d3      	b.n	8010b2e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8010b86:	3710      	adds	r7, #16
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	20009120 	.word	0x20009120

08010b90 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010b98:	4810      	ldr	r0, [pc, #64]	; (8010bdc <tcpip_thread+0x4c>)
 8010b9a:	f00d fa53 	bl	801e044 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010b9e:	4b10      	ldr	r3, [pc, #64]	; (8010be0 <tcpip_thread+0x50>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d005      	beq.n	8010bb2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8010ba6:	4b0e      	ldr	r3, [pc, #56]	; (8010be0 <tcpip_thread+0x50>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4a0e      	ldr	r2, [pc, #56]	; (8010be4 <tcpip_thread+0x54>)
 8010bac:	6812      	ldr	r2, [r2, #0]
 8010bae:	4610      	mov	r0, r2
 8010bb0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010bb2:	f107 030c 	add.w	r3, r7, #12
 8010bb6:	4619      	mov	r1, r3
 8010bb8:	480b      	ldr	r0, [pc, #44]	; (8010be8 <tcpip_thread+0x58>)
 8010bba:	f7ff ffb3 	bl	8010b24 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d106      	bne.n	8010bd2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010bc4:	4b09      	ldr	r3, [pc, #36]	; (8010bec <tcpip_thread+0x5c>)
 8010bc6:	2291      	movs	r2, #145	; 0x91
 8010bc8:	4909      	ldr	r1, [pc, #36]	; (8010bf0 <tcpip_thread+0x60>)
 8010bca:	480a      	ldr	r0, [pc, #40]	; (8010bf4 <tcpip_thread+0x64>)
 8010bcc:	f00e f92a 	bl	801ee24 <iprintf>
      continue;
 8010bd0:	e003      	b.n	8010bda <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 f80f 	bl	8010bf8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010bda:	e7ea      	b.n	8010bb2 <tcpip_thread+0x22>
 8010bdc:	20009120 	.word	0x20009120
 8010be0:	20009114 	.word	0x20009114
 8010be4:	20009118 	.word	0x20009118
 8010be8:	2000911c 	.word	0x2000911c
 8010bec:	08021728 	.word	0x08021728
 8010bf0:	08021758 	.word	0x08021758
 8010bf4:	08021778 	.word	0x08021778

08010bf8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	781b      	ldrb	r3, [r3, #0]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d026      	beq.n	8010c56 <tcpip_thread_handle_msg+0x5e>
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	dc2b      	bgt.n	8010c64 <tcpip_thread_handle_msg+0x6c>
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <tcpip_thread_handle_msg+0x1e>
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d015      	beq.n	8010c40 <tcpip_thread_handle_msg+0x48>
 8010c14:	e026      	b.n	8010c64 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	6850      	ldr	r0, [r2, #4]
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	6892      	ldr	r2, [r2, #8]
 8010c22:	4611      	mov	r1, r2
 8010c24:	4798      	blx	r3
 8010c26:	4603      	mov	r3, r0
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d004      	beq.n	8010c36 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f001 fd65 	bl	8012700 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010c36:	6879      	ldr	r1, [r7, #4]
 8010c38:	2009      	movs	r0, #9
 8010c3a:	f000 fe79 	bl	8011930 <memp_free>
      break;
 8010c3e:	e018      	b.n	8010c72 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	685b      	ldr	r3, [r3, #4]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	6892      	ldr	r2, [r2, #8]
 8010c48:	4610      	mov	r0, r2
 8010c4a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010c4c:	6879      	ldr	r1, [r7, #4]
 8010c4e:	2008      	movs	r0, #8
 8010c50:	f000 fe6e 	bl	8011930 <memp_free>
      break;
 8010c54:	e00d      	b.n	8010c72 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	6892      	ldr	r2, [r2, #8]
 8010c5e:	4610      	mov	r0, r2
 8010c60:	4798      	blx	r3
      break;
 8010c62:	e006      	b.n	8010c72 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010c64:	4b05      	ldr	r3, [pc, #20]	; (8010c7c <tcpip_thread_handle_msg+0x84>)
 8010c66:	22cf      	movs	r2, #207	; 0xcf
 8010c68:	4905      	ldr	r1, [pc, #20]	; (8010c80 <tcpip_thread_handle_msg+0x88>)
 8010c6a:	4806      	ldr	r0, [pc, #24]	; (8010c84 <tcpip_thread_handle_msg+0x8c>)
 8010c6c:	f00e f8da 	bl	801ee24 <iprintf>
      break;
 8010c70:	bf00      	nop
  }
}
 8010c72:	bf00      	nop
 8010c74:	3708      	adds	r7, #8
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	08021728 	.word	0x08021728
 8010c80:	08021758 	.word	0x08021758
 8010c84:	08021778 	.word	0x08021778

08010c88 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b086      	sub	sp, #24
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010c94:	481a      	ldr	r0, [pc, #104]	; (8010d00 <tcpip_inpkt+0x78>)
 8010c96:	f00d f8fc 	bl	801de92 <sys_mbox_valid>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d105      	bne.n	8010cac <tcpip_inpkt+0x24>
 8010ca0:	4b18      	ldr	r3, [pc, #96]	; (8010d04 <tcpip_inpkt+0x7c>)
 8010ca2:	22fc      	movs	r2, #252	; 0xfc
 8010ca4:	4918      	ldr	r1, [pc, #96]	; (8010d08 <tcpip_inpkt+0x80>)
 8010ca6:	4819      	ldr	r0, [pc, #100]	; (8010d0c <tcpip_inpkt+0x84>)
 8010ca8:	f00e f8bc 	bl	801ee24 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010cac:	2009      	movs	r0, #9
 8010cae:	f000 fdc9 	bl	8011844 <memp_malloc>
 8010cb2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d102      	bne.n	8010cc0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cbe:	e01a      	b.n	8010cf6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	68ba      	ldr	r2, [r7, #8]
 8010cd0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010cd8:	6979      	ldr	r1, [r7, #20]
 8010cda:	4809      	ldr	r0, [pc, #36]	; (8010d00 <tcpip_inpkt+0x78>)
 8010cdc:	f00d f864 	bl	801dda8 <sys_mbox_trypost>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d006      	beq.n	8010cf4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010ce6:	6979      	ldr	r1, [r7, #20]
 8010ce8:	2009      	movs	r0, #9
 8010cea:	f000 fe21 	bl	8011930 <memp_free>
    return ERR_MEM;
 8010cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cf2:	e000      	b.n	8010cf6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010cf4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3718      	adds	r7, #24
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2000911c 	.word	0x2000911c
 8010d04:	08021728 	.word	0x08021728
 8010d08:	080217a0 	.word	0x080217a0
 8010d0c:	08021778 	.word	0x08021778

08010d10 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b082      	sub	sp, #8
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010d1a:	683b      	ldr	r3, [r7, #0]
 8010d1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010d20:	f003 0318 	and.w	r3, r3, #24
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d006      	beq.n	8010d36 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010d28:	4a08      	ldr	r2, [pc, #32]	; (8010d4c <tcpip_input+0x3c>)
 8010d2a:	6839      	ldr	r1, [r7, #0]
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff ffab 	bl	8010c88 <tcpip_inpkt>
 8010d32:	4603      	mov	r3, r0
 8010d34:	e005      	b.n	8010d42 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8010d36:	4a06      	ldr	r2, [pc, #24]	; (8010d50 <tcpip_input+0x40>)
 8010d38:	6839      	ldr	r1, [r7, #0]
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff ffa4 	bl	8010c88 <tcpip_inpkt>
 8010d40:	4603      	mov	r3, r0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3708      	adds	r7, #8
 8010d46:	46bd      	mov	sp, r7
 8010d48:	bd80      	pop	{r7, pc}
 8010d4a:	bf00      	nop
 8010d4c:	0801db95 	.word	0x0801db95
 8010d50:	0801ca61 	.word	0x0801ca61

08010d54 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010d5e:	4819      	ldr	r0, [pc, #100]	; (8010dc4 <tcpip_try_callback+0x70>)
 8010d60:	f00d f897 	bl	801de92 <sys_mbox_valid>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcpip_try_callback+0x24>
 8010d6a:	4b17      	ldr	r3, [pc, #92]	; (8010dc8 <tcpip_try_callback+0x74>)
 8010d6c:	f240 125d 	movw	r2, #349	; 0x15d
 8010d70:	4916      	ldr	r1, [pc, #88]	; (8010dcc <tcpip_try_callback+0x78>)
 8010d72:	4817      	ldr	r0, [pc, #92]	; (8010dd0 <tcpip_try_callback+0x7c>)
 8010d74:	f00e f856 	bl	801ee24 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010d78:	2008      	movs	r0, #8
 8010d7a:	f000 fd63 	bl	8011844 <memp_malloc>
 8010d7e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8010d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d8a:	e017      	b.n	8010dbc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	687a      	ldr	r2, [r7, #4]
 8010d96:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	683a      	ldr	r2, [r7, #0]
 8010d9c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010d9e:	68f9      	ldr	r1, [r7, #12]
 8010da0:	4808      	ldr	r0, [pc, #32]	; (8010dc4 <tcpip_try_callback+0x70>)
 8010da2:	f00d f801 	bl	801dda8 <sys_mbox_trypost>
 8010da6:	4603      	mov	r3, r0
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d006      	beq.n	8010dba <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010dac:	68f9      	ldr	r1, [r7, #12]
 8010dae:	2008      	movs	r0, #8
 8010db0:	f000 fdbe 	bl	8011930 <memp_free>
    return ERR_MEM;
 8010db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010db8:	e000      	b.n	8010dbc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010dba:	2300      	movs	r3, #0
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3710      	adds	r7, #16
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}
 8010dc4:	2000911c 	.word	0x2000911c
 8010dc8:	08021728 	.word	0x08021728
 8010dcc:	080217a0 	.word	0x080217a0
 8010dd0:	08021778 	.word	0x08021778

08010dd4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	60f8      	str	r0, [r7, #12]
 8010ddc:	60b9      	str	r1, [r7, #8]
 8010dde:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010de0:	4806      	ldr	r0, [pc, #24]	; (8010dfc <tcpip_send_msg_wait_sem+0x28>)
 8010de2:	f00d f92f 	bl	801e044 <sys_mutex_lock>
  fn(apimsg);
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	68b8      	ldr	r0, [r7, #8]
 8010dea:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8010dec:	4803      	ldr	r0, [pc, #12]	; (8010dfc <tcpip_send_msg_wait_sem+0x28>)
 8010dee:	f00d f938 	bl	801e062 <sys_mutex_unlock>
  return ERR_OK;
 8010df2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	20009120 	.word	0x20009120

08010e00 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	b084      	sub	sp, #16
 8010e04:	af02      	add	r7, sp, #8
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010e0a:	f000 f871 	bl	8010ef0 <lwip_init>

  tcpip_init_done = initfunc;
 8010e0e:	4a17      	ldr	r2, [pc, #92]	; (8010e6c <tcpip_init+0x6c>)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010e14:	4a16      	ldr	r2, [pc, #88]	; (8010e70 <tcpip_init+0x70>)
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010e1a:	2106      	movs	r1, #6
 8010e1c:	4815      	ldr	r0, [pc, #84]	; (8010e74 <tcpip_init+0x74>)
 8010e1e:	f00c ff8f 	bl	801dd40 <sys_mbox_new>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d006      	beq.n	8010e36 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010e28:	4b13      	ldr	r3, [pc, #76]	; (8010e78 <tcpip_init+0x78>)
 8010e2a:	f240 2261 	movw	r2, #609	; 0x261
 8010e2e:	4913      	ldr	r1, [pc, #76]	; (8010e7c <tcpip_init+0x7c>)
 8010e30:	4813      	ldr	r0, [pc, #76]	; (8010e80 <tcpip_init+0x80>)
 8010e32:	f00d fff7 	bl	801ee24 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010e36:	4813      	ldr	r0, [pc, #76]	; (8010e84 <tcpip_init+0x84>)
 8010e38:	f00d f8e8 	bl	801e00c <sys_mutex_new>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d006      	beq.n	8010e50 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010e42:	4b0d      	ldr	r3, [pc, #52]	; (8010e78 <tcpip_init+0x78>)
 8010e44:	f240 2265 	movw	r2, #613	; 0x265
 8010e48:	490f      	ldr	r1, [pc, #60]	; (8010e88 <tcpip_init+0x88>)
 8010e4a:	480d      	ldr	r0, [pc, #52]	; (8010e80 <tcpip_init+0x80>)
 8010e4c:	f00d ffea 	bl	801ee24 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010e50:	2300      	movs	r3, #0
 8010e52:	9300      	str	r3, [sp, #0]
 8010e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e58:	2200      	movs	r2, #0
 8010e5a:	490c      	ldr	r1, [pc, #48]	; (8010e8c <tcpip_init+0x8c>)
 8010e5c:	480c      	ldr	r0, [pc, #48]	; (8010e90 <tcpip_init+0x90>)
 8010e5e:	f00d f90d 	bl	801e07c <sys_thread_new>
}
 8010e62:	bf00      	nop
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	20009114 	.word	0x20009114
 8010e70:	20009118 	.word	0x20009118
 8010e74:	2000911c 	.word	0x2000911c
 8010e78:	08021728 	.word	0x08021728
 8010e7c:	080217b0 	.word	0x080217b0
 8010e80:	08021778 	.word	0x08021778
 8010e84:	20009120 	.word	0x20009120
 8010e88:	080217d4 	.word	0x080217d4
 8010e8c:	08010b91 	.word	0x08010b91
 8010e90:	080217f8 	.word	0x080217f8

08010e94 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b083      	sub	sp, #12
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010e9e:	88fb      	ldrh	r3, [r7, #6]
 8010ea0:	021b      	lsls	r3, r3, #8
 8010ea2:	b21a      	sxth	r2, r3
 8010ea4:	88fb      	ldrh	r3, [r7, #6]
 8010ea6:	0a1b      	lsrs	r3, r3, #8
 8010ea8:	b29b      	uxth	r3, r3
 8010eaa:	b21b      	sxth	r3, r3
 8010eac:	4313      	orrs	r3, r2
 8010eae:	b21b      	sxth	r3, r3
 8010eb0:	b29b      	uxth	r3, r3
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	370c      	adds	r7, #12
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ebc:	4770      	bx	lr

08010ebe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010ebe:	b480      	push	{r7}
 8010ec0:	b083      	sub	sp, #12
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	061a      	lsls	r2, r3, #24
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	021b      	lsls	r3, r3, #8
 8010ece:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010ed2:	431a      	orrs	r2, r3
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	0a1b      	lsrs	r3, r3, #8
 8010ed8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010edc:	431a      	orrs	r2, r3
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	0e1b      	lsrs	r3, r3, #24
 8010ee2:	4313      	orrs	r3, r2
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b082      	sub	sp, #8
 8010ef4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010efa:	f00d f879 	bl	801dff0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010efe:	f000 f8d5 	bl	80110ac <mem_init>
  memp_init();
 8010f02:	f000 fc31 	bl	8011768 <memp_init>
  pbuf_init();
  netif_init();
 8010f06:	f000 fd3d 	bl	8011984 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010f0a:	f008 f8bd 	bl	8019088 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010f0e:	f001 fea1 	bl	8012c54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010f12:	f007 ffff 	bl	8018f14 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010f16:	bf00      	nop
 8010f18:	3708      	adds	r7, #8
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
	...

08010f20 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	4603      	mov	r3, r0
 8010f28:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010f2a:	4b05      	ldr	r3, [pc, #20]	; (8010f40 <ptr_to_mem+0x20>)
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	88fb      	ldrh	r3, [r7, #6]
 8010f30:	4413      	add	r3, r2
}
 8010f32:	4618      	mov	r0, r3
 8010f34:	370c      	adds	r7, #12
 8010f36:	46bd      	mov	sp, r7
 8010f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3c:	4770      	bx	lr
 8010f3e:	bf00      	nop
 8010f40:	20009790 	.word	0x20009790

08010f44 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b083      	sub	sp, #12
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010f4c:	4b05      	ldr	r3, [pc, #20]	; (8010f64 <mem_to_ptr+0x20>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	1ad3      	subs	r3, r2, r3
 8010f54:	b29b      	uxth	r3, r3
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	370c      	adds	r7, #12
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f60:	4770      	bx	lr
 8010f62:	bf00      	nop
 8010f64:	20009790 	.word	0x20009790

08010f68 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010f68:	b590      	push	{r4, r7, lr}
 8010f6a:	b085      	sub	sp, #20
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010f70:	4b45      	ldr	r3, [pc, #276]	; (8011088 <plug_holes+0x120>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	d206      	bcs.n	8010f88 <plug_holes+0x20>
 8010f7a:	4b44      	ldr	r3, [pc, #272]	; (801108c <plug_holes+0x124>)
 8010f7c:	f240 12df 	movw	r2, #479	; 0x1df
 8010f80:	4943      	ldr	r1, [pc, #268]	; (8011090 <plug_holes+0x128>)
 8010f82:	4844      	ldr	r0, [pc, #272]	; (8011094 <plug_holes+0x12c>)
 8010f84:	f00d ff4e 	bl	801ee24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010f88:	4b43      	ldr	r3, [pc, #268]	; (8011098 <plug_holes+0x130>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	687a      	ldr	r2, [r7, #4]
 8010f8e:	429a      	cmp	r2, r3
 8010f90:	d306      	bcc.n	8010fa0 <plug_holes+0x38>
 8010f92:	4b3e      	ldr	r3, [pc, #248]	; (801108c <plug_holes+0x124>)
 8010f94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010f98:	4940      	ldr	r1, [pc, #256]	; (801109c <plug_holes+0x134>)
 8010f9a:	483e      	ldr	r0, [pc, #248]	; (8011094 <plug_holes+0x12c>)
 8010f9c:	f00d ff42 	bl	801ee24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	791b      	ldrb	r3, [r3, #4]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d006      	beq.n	8010fb6 <plug_holes+0x4e>
 8010fa8:	4b38      	ldr	r3, [pc, #224]	; (801108c <plug_holes+0x124>)
 8010faa:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010fae:	493c      	ldr	r1, [pc, #240]	; (80110a0 <plug_holes+0x138>)
 8010fb0:	4838      	ldr	r0, [pc, #224]	; (8011094 <plug_holes+0x12c>)
 8010fb2:	f00d ff37 	bl	801ee24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	881b      	ldrh	r3, [r3, #0]
 8010fba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010fbe:	d906      	bls.n	8010fce <plug_holes+0x66>
 8010fc0:	4b32      	ldr	r3, [pc, #200]	; (801108c <plug_holes+0x124>)
 8010fc2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010fc6:	4937      	ldr	r1, [pc, #220]	; (80110a4 <plug_holes+0x13c>)
 8010fc8:	4832      	ldr	r0, [pc, #200]	; (8011094 <plug_holes+0x12c>)
 8010fca:	f00d ff2b 	bl	801ee24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff ffa4 	bl	8010f20 <ptr_to_mem>
 8010fd8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010fda:	687a      	ldr	r2, [r7, #4]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d024      	beq.n	801102c <plug_holes+0xc4>
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	791b      	ldrb	r3, [r3, #4]
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d120      	bne.n	801102c <plug_holes+0xc4>
 8010fea:	4b2b      	ldr	r3, [pc, #172]	; (8011098 <plug_holes+0x130>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d01b      	beq.n	801102c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010ff4:	4b2c      	ldr	r3, [pc, #176]	; (80110a8 <plug_holes+0x140>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d102      	bne.n	8011004 <plug_holes+0x9c>
      lfree = mem;
 8010ffe:	4a2a      	ldr	r2, [pc, #168]	; (80110a8 <plug_holes+0x140>)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	881a      	ldrh	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	881b      	ldrh	r3, [r3, #0]
 8011010:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011014:	d00a      	beq.n	801102c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	4618      	mov	r0, r3
 801101c:	f7ff ff80 	bl	8010f20 <ptr_to_mem>
 8011020:	4604      	mov	r4, r0
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7ff ff8e 	bl	8010f44 <mem_to_ptr>
 8011028:	4603      	mov	r3, r0
 801102a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	885b      	ldrh	r3, [r3, #2]
 8011030:	4618      	mov	r0, r3
 8011032:	f7ff ff75 	bl	8010f20 <ptr_to_mem>
 8011036:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011038:	68ba      	ldr	r2, [r7, #8]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	429a      	cmp	r2, r3
 801103e:	d01f      	beq.n	8011080 <plug_holes+0x118>
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	791b      	ldrb	r3, [r3, #4]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d11b      	bne.n	8011080 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011048:	4b17      	ldr	r3, [pc, #92]	; (80110a8 <plug_holes+0x140>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	687a      	ldr	r2, [r7, #4]
 801104e:	429a      	cmp	r2, r3
 8011050:	d102      	bne.n	8011058 <plug_holes+0xf0>
      lfree = pmem;
 8011052:	4a15      	ldr	r2, [pc, #84]	; (80110a8 <plug_holes+0x140>)
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	881a      	ldrh	r2, [r3, #0]
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	881b      	ldrh	r3, [r3, #0]
 8011064:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011068:	d00a      	beq.n	8011080 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	881b      	ldrh	r3, [r3, #0]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ff ff56 	bl	8010f20 <ptr_to_mem>
 8011074:	4604      	mov	r4, r0
 8011076:	68b8      	ldr	r0, [r7, #8]
 8011078:	f7ff ff64 	bl	8010f44 <mem_to_ptr>
 801107c:	4603      	mov	r3, r0
 801107e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011080:	bf00      	nop
 8011082:	3714      	adds	r7, #20
 8011084:	46bd      	mov	sp, r7
 8011086:	bd90      	pop	{r4, r7, pc}
 8011088:	20009790 	.word	0x20009790
 801108c:	08021808 	.word	0x08021808
 8011090:	08021838 	.word	0x08021838
 8011094:	08021850 	.word	0x08021850
 8011098:	20009794 	.word	0x20009794
 801109c:	08021878 	.word	0x08021878
 80110a0:	08021894 	.word	0x08021894
 80110a4:	080218b0 	.word	0x080218b0
 80110a8:	2000979c 	.word	0x2000979c

080110ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80110b2:	4b1f      	ldr	r3, [pc, #124]	; (8011130 <mem_init+0x84>)
 80110b4:	3303      	adds	r3, #3
 80110b6:	f023 0303 	bic.w	r3, r3, #3
 80110ba:	461a      	mov	r2, r3
 80110bc:	4b1d      	ldr	r3, [pc, #116]	; (8011134 <mem_init+0x88>)
 80110be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80110c0:	4b1c      	ldr	r3, [pc, #112]	; (8011134 <mem_init+0x88>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80110cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2200      	movs	r2, #0
 80110d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80110da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80110de:	f7ff ff1f 	bl	8010f20 <ptr_to_mem>
 80110e2:	4603      	mov	r3, r0
 80110e4:	4a14      	ldr	r2, [pc, #80]	; (8011138 <mem_init+0x8c>)
 80110e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80110e8:	4b13      	ldr	r3, [pc, #76]	; (8011138 <mem_init+0x8c>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2201      	movs	r2, #1
 80110ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80110f0:	4b11      	ldr	r3, [pc, #68]	; (8011138 <mem_init+0x8c>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80110f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80110fa:	4b0f      	ldr	r3, [pc, #60]	; (8011138 <mem_init+0x8c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011102:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011104:	4b0b      	ldr	r3, [pc, #44]	; (8011134 <mem_init+0x88>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	4a0c      	ldr	r2, [pc, #48]	; (801113c <mem_init+0x90>)
 801110a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801110c:	480c      	ldr	r0, [pc, #48]	; (8011140 <mem_init+0x94>)
 801110e:	f00c ff7d 	bl	801e00c <sys_mutex_new>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d006      	beq.n	8011126 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011118:	4b0a      	ldr	r3, [pc, #40]	; (8011144 <mem_init+0x98>)
 801111a:	f240 221f 	movw	r2, #543	; 0x21f
 801111e:	490a      	ldr	r1, [pc, #40]	; (8011148 <mem_init+0x9c>)
 8011120:	480a      	ldr	r0, [pc, #40]	; (801114c <mem_init+0xa0>)
 8011122:	f00d fe7f 	bl	801ee24 <iprintf>
  }
}
 8011126:	bf00      	nop
 8011128:	3708      	adds	r7, #8
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	2000913c 	.word	0x2000913c
 8011134:	20009790 	.word	0x20009790
 8011138:	20009794 	.word	0x20009794
 801113c:	2000979c 	.word	0x2000979c
 8011140:	20009798 	.word	0x20009798
 8011144:	08021808 	.word	0x08021808
 8011148:	080218dc 	.word	0x080218dc
 801114c:	08021850 	.word	0x08021850

08011150 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b086      	sub	sp, #24
 8011154:	af00      	add	r7, sp, #0
 8011156:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f7ff fef3 	bl	8010f44 <mem_to_ptr>
 801115e:	4603      	mov	r3, r0
 8011160:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	881b      	ldrh	r3, [r3, #0]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff feda 	bl	8010f20 <ptr_to_mem>
 801116c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	885b      	ldrh	r3, [r3, #2]
 8011172:	4618      	mov	r0, r3
 8011174:	f7ff fed4 	bl	8010f20 <ptr_to_mem>
 8011178:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011182:	d818      	bhi.n	80111b6 <mem_link_valid+0x66>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	885b      	ldrh	r3, [r3, #2]
 8011188:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801118c:	d813      	bhi.n	80111b6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011192:	8afa      	ldrh	r2, [r7, #22]
 8011194:	429a      	cmp	r2, r3
 8011196:	d004      	beq.n	80111a2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	8afa      	ldrh	r2, [r7, #22]
 801119e:	429a      	cmp	r2, r3
 80111a0:	d109      	bne.n	80111b6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80111a2:	4b08      	ldr	r3, [pc, #32]	; (80111c4 <mem_link_valid+0x74>)
 80111a4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80111a6:	693a      	ldr	r2, [r7, #16]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d006      	beq.n	80111ba <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	885b      	ldrh	r3, [r3, #2]
 80111b0:	8afa      	ldrh	r2, [r7, #22]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d001      	beq.n	80111ba <mem_link_valid+0x6a>
    return 0;
 80111b6:	2300      	movs	r3, #0
 80111b8:	e000      	b.n	80111bc <mem_link_valid+0x6c>
  }
  return 1;
 80111ba:	2301      	movs	r3, #1
}
 80111bc:	4618      	mov	r0, r3
 80111be:	3718      	adds	r7, #24
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}
 80111c4:	20009794 	.word	0x20009794

080111c8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b088      	sub	sp, #32
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d070      	beq.n	80112b8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	f003 0303 	and.w	r3, r3, #3
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d00d      	beq.n	80111fc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80111e0:	4b37      	ldr	r3, [pc, #220]	; (80112c0 <mem_free+0xf8>)
 80111e2:	f240 2273 	movw	r2, #627	; 0x273
 80111e6:	4937      	ldr	r1, [pc, #220]	; (80112c4 <mem_free+0xfc>)
 80111e8:	4837      	ldr	r0, [pc, #220]	; (80112c8 <mem_free+0x100>)
 80111ea:	f00d fe1b 	bl	801ee24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80111ee:	f00c ff6b 	bl	801e0c8 <sys_arch_protect>
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	68f8      	ldr	r0, [r7, #12]
 80111f6:	f00c ff75 	bl	801e0e4 <sys_arch_unprotect>
    return;
 80111fa:	e05e      	b.n	80112ba <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	3b08      	subs	r3, #8
 8011200:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011202:	4b32      	ldr	r3, [pc, #200]	; (80112cc <mem_free+0x104>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	69fa      	ldr	r2, [r7, #28]
 8011208:	429a      	cmp	r2, r3
 801120a:	d306      	bcc.n	801121a <mem_free+0x52>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f103 020c 	add.w	r2, r3, #12
 8011212:	4b2f      	ldr	r3, [pc, #188]	; (80112d0 <mem_free+0x108>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	429a      	cmp	r2, r3
 8011218:	d90d      	bls.n	8011236 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801121a:	4b29      	ldr	r3, [pc, #164]	; (80112c0 <mem_free+0xf8>)
 801121c:	f240 227f 	movw	r2, #639	; 0x27f
 8011220:	492c      	ldr	r1, [pc, #176]	; (80112d4 <mem_free+0x10c>)
 8011222:	4829      	ldr	r0, [pc, #164]	; (80112c8 <mem_free+0x100>)
 8011224:	f00d fdfe 	bl	801ee24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011228:	f00c ff4e 	bl	801e0c8 <sys_arch_protect>
 801122c:	6138      	str	r0, [r7, #16]
 801122e:	6938      	ldr	r0, [r7, #16]
 8011230:	f00c ff58 	bl	801e0e4 <sys_arch_unprotect>
    return;
 8011234:	e041      	b.n	80112ba <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011236:	4828      	ldr	r0, [pc, #160]	; (80112d8 <mem_free+0x110>)
 8011238:	f00c ff04 	bl	801e044 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	791b      	ldrb	r3, [r3, #4]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d110      	bne.n	8011266 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011244:	4b1e      	ldr	r3, [pc, #120]	; (80112c0 <mem_free+0xf8>)
 8011246:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801124a:	4924      	ldr	r1, [pc, #144]	; (80112dc <mem_free+0x114>)
 801124c:	481e      	ldr	r0, [pc, #120]	; (80112c8 <mem_free+0x100>)
 801124e:	f00d fde9 	bl	801ee24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011252:	4821      	ldr	r0, [pc, #132]	; (80112d8 <mem_free+0x110>)
 8011254:	f00c ff05 	bl	801e062 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011258:	f00c ff36 	bl	801e0c8 <sys_arch_protect>
 801125c:	6178      	str	r0, [r7, #20]
 801125e:	6978      	ldr	r0, [r7, #20]
 8011260:	f00c ff40 	bl	801e0e4 <sys_arch_unprotect>
    return;
 8011264:	e029      	b.n	80112ba <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011266:	69f8      	ldr	r0, [r7, #28]
 8011268:	f7ff ff72 	bl	8011150 <mem_link_valid>
 801126c:	4603      	mov	r3, r0
 801126e:	2b00      	cmp	r3, #0
 8011270:	d110      	bne.n	8011294 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011272:	4b13      	ldr	r3, [pc, #76]	; (80112c0 <mem_free+0xf8>)
 8011274:	f240 2295 	movw	r2, #661	; 0x295
 8011278:	4919      	ldr	r1, [pc, #100]	; (80112e0 <mem_free+0x118>)
 801127a:	4813      	ldr	r0, [pc, #76]	; (80112c8 <mem_free+0x100>)
 801127c:	f00d fdd2 	bl	801ee24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011280:	4815      	ldr	r0, [pc, #84]	; (80112d8 <mem_free+0x110>)
 8011282:	f00c feee 	bl	801e062 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011286:	f00c ff1f 	bl	801e0c8 <sys_arch_protect>
 801128a:	61b8      	str	r0, [r7, #24]
 801128c:	69b8      	ldr	r0, [r7, #24]
 801128e:	f00c ff29 	bl	801e0e4 <sys_arch_unprotect>
    return;
 8011292:	e012      	b.n	80112ba <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	2200      	movs	r2, #0
 8011298:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801129a:	4b12      	ldr	r3, [pc, #72]	; (80112e4 <mem_free+0x11c>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	69fa      	ldr	r2, [r7, #28]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d202      	bcs.n	80112aa <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80112a4:	4a0f      	ldr	r2, [pc, #60]	; (80112e4 <mem_free+0x11c>)
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80112aa:	69f8      	ldr	r0, [r7, #28]
 80112ac:	f7ff fe5c 	bl	8010f68 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80112b0:	4809      	ldr	r0, [pc, #36]	; (80112d8 <mem_free+0x110>)
 80112b2:	f00c fed6 	bl	801e062 <sys_mutex_unlock>
 80112b6:	e000      	b.n	80112ba <mem_free+0xf2>
    return;
 80112b8:	bf00      	nop
}
 80112ba:	3720      	adds	r7, #32
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	08021808 	.word	0x08021808
 80112c4:	080218f8 	.word	0x080218f8
 80112c8:	08021850 	.word	0x08021850
 80112cc:	20009790 	.word	0x20009790
 80112d0:	20009794 	.word	0x20009794
 80112d4:	0802191c 	.word	0x0802191c
 80112d8:	20009798 	.word	0x20009798
 80112dc:	08021938 	.word	0x08021938
 80112e0:	08021960 	.word	0x08021960
 80112e4:	2000979c 	.word	0x2000979c

080112e8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b088      	sub	sp, #32
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	460b      	mov	r3, r1
 80112f2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80112f4:	887b      	ldrh	r3, [r7, #2]
 80112f6:	3303      	adds	r3, #3
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f023 0303 	bic.w	r3, r3, #3
 80112fe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011300:	8bfb      	ldrh	r3, [r7, #30]
 8011302:	2b0b      	cmp	r3, #11
 8011304:	d801      	bhi.n	801130a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011306:	230c      	movs	r3, #12
 8011308:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801130a:	8bfb      	ldrh	r3, [r7, #30]
 801130c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011310:	d803      	bhi.n	801131a <mem_trim+0x32>
 8011312:	8bfa      	ldrh	r2, [r7, #30]
 8011314:	887b      	ldrh	r3, [r7, #2]
 8011316:	429a      	cmp	r2, r3
 8011318:	d201      	bcs.n	801131e <mem_trim+0x36>
    return NULL;
 801131a:	2300      	movs	r3, #0
 801131c:	e0d8      	b.n	80114d0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801131e:	4b6e      	ldr	r3, [pc, #440]	; (80114d8 <mem_trim+0x1f0>)
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	429a      	cmp	r2, r3
 8011326:	d304      	bcc.n	8011332 <mem_trim+0x4a>
 8011328:	4b6c      	ldr	r3, [pc, #432]	; (80114dc <mem_trim+0x1f4>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	687a      	ldr	r2, [r7, #4]
 801132e:	429a      	cmp	r2, r3
 8011330:	d306      	bcc.n	8011340 <mem_trim+0x58>
 8011332:	4b6b      	ldr	r3, [pc, #428]	; (80114e0 <mem_trim+0x1f8>)
 8011334:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011338:	496a      	ldr	r1, [pc, #424]	; (80114e4 <mem_trim+0x1fc>)
 801133a:	486b      	ldr	r0, [pc, #428]	; (80114e8 <mem_trim+0x200>)
 801133c:	f00d fd72 	bl	801ee24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011340:	4b65      	ldr	r3, [pc, #404]	; (80114d8 <mem_trim+0x1f0>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	429a      	cmp	r2, r3
 8011348:	d304      	bcc.n	8011354 <mem_trim+0x6c>
 801134a:	4b64      	ldr	r3, [pc, #400]	; (80114dc <mem_trim+0x1f4>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	687a      	ldr	r2, [r7, #4]
 8011350:	429a      	cmp	r2, r3
 8011352:	d307      	bcc.n	8011364 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011354:	f00c feb8 	bl	801e0c8 <sys_arch_protect>
 8011358:	60b8      	str	r0, [r7, #8]
 801135a:	68b8      	ldr	r0, [r7, #8]
 801135c:	f00c fec2 	bl	801e0e4 <sys_arch_unprotect>
    return rmem;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	e0b5      	b.n	80114d0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	3b08      	subs	r3, #8
 8011368:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801136a:	69b8      	ldr	r0, [r7, #24]
 801136c:	f7ff fdea 	bl	8010f44 <mem_to_ptr>
 8011370:	4603      	mov	r3, r0
 8011372:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011374:	69bb      	ldr	r3, [r7, #24]
 8011376:	881a      	ldrh	r2, [r3, #0]
 8011378:	8afb      	ldrh	r3, [r7, #22]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	b29b      	uxth	r3, r3
 801137e:	3b08      	subs	r3, #8
 8011380:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011382:	8bfa      	ldrh	r2, [r7, #30]
 8011384:	8abb      	ldrh	r3, [r7, #20]
 8011386:	429a      	cmp	r2, r3
 8011388:	d906      	bls.n	8011398 <mem_trim+0xb0>
 801138a:	4b55      	ldr	r3, [pc, #340]	; (80114e0 <mem_trim+0x1f8>)
 801138c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011390:	4956      	ldr	r1, [pc, #344]	; (80114ec <mem_trim+0x204>)
 8011392:	4855      	ldr	r0, [pc, #340]	; (80114e8 <mem_trim+0x200>)
 8011394:	f00d fd46 	bl	801ee24 <iprintf>
  if (newsize > size) {
 8011398:	8bfa      	ldrh	r2, [r7, #30]
 801139a:	8abb      	ldrh	r3, [r7, #20]
 801139c:	429a      	cmp	r2, r3
 801139e:	d901      	bls.n	80113a4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80113a0:	2300      	movs	r3, #0
 80113a2:	e095      	b.n	80114d0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80113a4:	8bfa      	ldrh	r2, [r7, #30]
 80113a6:	8abb      	ldrh	r3, [r7, #20]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d101      	bne.n	80113b0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	e08f      	b.n	80114d0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80113b0:	484f      	ldr	r0, [pc, #316]	; (80114f0 <mem_trim+0x208>)
 80113b2:	f00c fe47 	bl	801e044 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	881b      	ldrh	r3, [r3, #0]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fdb0 	bl	8010f20 <ptr_to_mem>
 80113c0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	791b      	ldrb	r3, [r3, #4]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d13f      	bne.n	801144a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	881b      	ldrh	r3, [r3, #0]
 80113ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80113d2:	d106      	bne.n	80113e2 <mem_trim+0xfa>
 80113d4:	4b42      	ldr	r3, [pc, #264]	; (80114e0 <mem_trim+0x1f8>)
 80113d6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80113da:	4946      	ldr	r1, [pc, #280]	; (80114f4 <mem_trim+0x20c>)
 80113dc:	4842      	ldr	r0, [pc, #264]	; (80114e8 <mem_trim+0x200>)
 80113de:	f00d fd21 	bl	801ee24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	881b      	ldrh	r3, [r3, #0]
 80113e6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80113e8:	8afa      	ldrh	r2, [r7, #22]
 80113ea:	8bfb      	ldrh	r3, [r7, #30]
 80113ec:	4413      	add	r3, r2
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	3308      	adds	r3, #8
 80113f2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80113f4:	4b40      	ldr	r3, [pc, #256]	; (80114f8 <mem_trim+0x210>)
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d106      	bne.n	801140c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80113fe:	89fb      	ldrh	r3, [r7, #14]
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff fd8d 	bl	8010f20 <ptr_to_mem>
 8011406:	4603      	mov	r3, r0
 8011408:	4a3b      	ldr	r2, [pc, #236]	; (80114f8 <mem_trim+0x210>)
 801140a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801140c:	89fb      	ldrh	r3, [r7, #14]
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff fd86 	bl	8010f20 <ptr_to_mem>
 8011414:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	2200      	movs	r2, #0
 801141a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	89ba      	ldrh	r2, [r7, #12]
 8011420:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	8afa      	ldrh	r2, [r7, #22]
 8011426:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	89fa      	ldrh	r2, [r7, #14]
 801142c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011436:	d047      	beq.n	80114c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	881b      	ldrh	r3, [r3, #0]
 801143c:	4618      	mov	r0, r3
 801143e:	f7ff fd6f 	bl	8010f20 <ptr_to_mem>
 8011442:	4602      	mov	r2, r0
 8011444:	89fb      	ldrh	r3, [r7, #14]
 8011446:	8053      	strh	r3, [r2, #2]
 8011448:	e03e      	b.n	80114c8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801144a:	8bfb      	ldrh	r3, [r7, #30]
 801144c:	f103 0214 	add.w	r2, r3, #20
 8011450:	8abb      	ldrh	r3, [r7, #20]
 8011452:	429a      	cmp	r2, r3
 8011454:	d838      	bhi.n	80114c8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011456:	8afa      	ldrh	r2, [r7, #22]
 8011458:	8bfb      	ldrh	r3, [r7, #30]
 801145a:	4413      	add	r3, r2
 801145c:	b29b      	uxth	r3, r3
 801145e:	3308      	adds	r3, #8
 8011460:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	881b      	ldrh	r3, [r3, #0]
 8011466:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801146a:	d106      	bne.n	801147a <mem_trim+0x192>
 801146c:	4b1c      	ldr	r3, [pc, #112]	; (80114e0 <mem_trim+0x1f8>)
 801146e:	f240 3216 	movw	r2, #790	; 0x316
 8011472:	4920      	ldr	r1, [pc, #128]	; (80114f4 <mem_trim+0x20c>)
 8011474:	481c      	ldr	r0, [pc, #112]	; (80114e8 <mem_trim+0x200>)
 8011476:	f00d fcd5 	bl	801ee24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801147a:	89fb      	ldrh	r3, [r7, #14]
 801147c:	4618      	mov	r0, r3
 801147e:	f7ff fd4f 	bl	8010f20 <ptr_to_mem>
 8011482:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011484:	4b1c      	ldr	r3, [pc, #112]	; (80114f8 <mem_trim+0x210>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	429a      	cmp	r2, r3
 801148c:	d202      	bcs.n	8011494 <mem_trim+0x1ac>
      lfree = mem2;
 801148e:	4a1a      	ldr	r2, [pc, #104]	; (80114f8 <mem_trim+0x210>)
 8011490:	693b      	ldr	r3, [r7, #16]
 8011492:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	2200      	movs	r2, #0
 8011498:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	881a      	ldrh	r2, [r3, #0]
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	8afa      	ldrh	r2, [r7, #22]
 80114a6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	89fa      	ldrh	r2, [r7, #14]
 80114ac:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80114ae:	693b      	ldr	r3, [r7, #16]
 80114b0:	881b      	ldrh	r3, [r3, #0]
 80114b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80114b6:	d007      	beq.n	80114c8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	881b      	ldrh	r3, [r3, #0]
 80114bc:	4618      	mov	r0, r3
 80114be:	f7ff fd2f 	bl	8010f20 <ptr_to_mem>
 80114c2:	4602      	mov	r2, r0
 80114c4:	89fb      	ldrh	r3, [r7, #14]
 80114c6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80114c8:	4809      	ldr	r0, [pc, #36]	; (80114f0 <mem_trim+0x208>)
 80114ca:	f00c fdca 	bl	801e062 <sys_mutex_unlock>
  return rmem;
 80114ce:	687b      	ldr	r3, [r7, #4]
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3720      	adds	r7, #32
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20009790 	.word	0x20009790
 80114dc:	20009794 	.word	0x20009794
 80114e0:	08021808 	.word	0x08021808
 80114e4:	08021994 	.word	0x08021994
 80114e8:	08021850 	.word	0x08021850
 80114ec:	080219ac 	.word	0x080219ac
 80114f0:	20009798 	.word	0x20009798
 80114f4:	080219cc 	.word	0x080219cc
 80114f8:	2000979c 	.word	0x2000979c

080114fc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b088      	sub	sp, #32
 8011500:	af00      	add	r7, sp, #0
 8011502:	4603      	mov	r3, r0
 8011504:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011506:	88fb      	ldrh	r3, [r7, #6]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <mem_malloc+0x14>
    return NULL;
 801150c:	2300      	movs	r3, #0
 801150e:	e0e2      	b.n	80116d6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011510:	88fb      	ldrh	r3, [r7, #6]
 8011512:	3303      	adds	r3, #3
 8011514:	b29b      	uxth	r3, r3
 8011516:	f023 0303 	bic.w	r3, r3, #3
 801151a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801151c:	8bbb      	ldrh	r3, [r7, #28]
 801151e:	2b0b      	cmp	r3, #11
 8011520:	d801      	bhi.n	8011526 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011522:	230c      	movs	r3, #12
 8011524:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011526:	8bbb      	ldrh	r3, [r7, #28]
 8011528:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801152c:	d803      	bhi.n	8011536 <mem_malloc+0x3a>
 801152e:	8bba      	ldrh	r2, [r7, #28]
 8011530:	88fb      	ldrh	r3, [r7, #6]
 8011532:	429a      	cmp	r2, r3
 8011534:	d201      	bcs.n	801153a <mem_malloc+0x3e>
    return NULL;
 8011536:	2300      	movs	r3, #0
 8011538:	e0cd      	b.n	80116d6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801153a:	4869      	ldr	r0, [pc, #420]	; (80116e0 <mem_malloc+0x1e4>)
 801153c:	f00c fd82 	bl	801e044 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011540:	4b68      	ldr	r3, [pc, #416]	; (80116e4 <mem_malloc+0x1e8>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4618      	mov	r0, r3
 8011546:	f7ff fcfd 	bl	8010f44 <mem_to_ptr>
 801154a:	4603      	mov	r3, r0
 801154c:	83fb      	strh	r3, [r7, #30]
 801154e:	e0b7      	b.n	80116c0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011550:	8bfb      	ldrh	r3, [r7, #30]
 8011552:	4618      	mov	r0, r3
 8011554:	f7ff fce4 	bl	8010f20 <ptr_to_mem>
 8011558:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	791b      	ldrb	r3, [r3, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	f040 80a7 	bne.w	80116b2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	461a      	mov	r2, r3
 801156a:	8bfb      	ldrh	r3, [r7, #30]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	f1a3 0208 	sub.w	r2, r3, #8
 8011572:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011574:	429a      	cmp	r2, r3
 8011576:	f0c0 809c 	bcc.w	80116b2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	881b      	ldrh	r3, [r3, #0]
 801157e:	461a      	mov	r2, r3
 8011580:	8bfb      	ldrh	r3, [r7, #30]
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	f1a3 0208 	sub.w	r2, r3, #8
 8011588:	8bbb      	ldrh	r3, [r7, #28]
 801158a:	3314      	adds	r3, #20
 801158c:	429a      	cmp	r2, r3
 801158e:	d333      	bcc.n	80115f8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011590:	8bfa      	ldrh	r2, [r7, #30]
 8011592:	8bbb      	ldrh	r3, [r7, #28]
 8011594:	4413      	add	r3, r2
 8011596:	b29b      	uxth	r3, r3
 8011598:	3308      	adds	r3, #8
 801159a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801159c:	8a7b      	ldrh	r3, [r7, #18]
 801159e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80115a2:	d106      	bne.n	80115b2 <mem_malloc+0xb6>
 80115a4:	4b50      	ldr	r3, [pc, #320]	; (80116e8 <mem_malloc+0x1ec>)
 80115a6:	f240 3287 	movw	r2, #903	; 0x387
 80115aa:	4950      	ldr	r1, [pc, #320]	; (80116ec <mem_malloc+0x1f0>)
 80115ac:	4850      	ldr	r0, [pc, #320]	; (80116f0 <mem_malloc+0x1f4>)
 80115ae:	f00d fc39 	bl	801ee24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80115b2:	8a7b      	ldrh	r3, [r7, #18]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fcb3 	bl	8010f20 <ptr_to_mem>
 80115ba:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2200      	movs	r2, #0
 80115c0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	881a      	ldrh	r2, [r3, #0]
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	8bfa      	ldrh	r2, [r7, #30]
 80115ce:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	8a7a      	ldrh	r2, [r7, #18]
 80115d4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	2201      	movs	r2, #1
 80115da:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	881b      	ldrh	r3, [r3, #0]
 80115e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80115e4:	d00b      	beq.n	80115fe <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7ff fc98 	bl	8010f20 <ptr_to_mem>
 80115f0:	4602      	mov	r2, r0
 80115f2:	8a7b      	ldrh	r3, [r7, #18]
 80115f4:	8053      	strh	r3, [r2, #2]
 80115f6:	e002      	b.n	80115fe <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	2201      	movs	r2, #1
 80115fc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80115fe:	4b39      	ldr	r3, [pc, #228]	; (80116e4 <mem_malloc+0x1e8>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	429a      	cmp	r2, r3
 8011606:	d127      	bne.n	8011658 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011608:	4b36      	ldr	r3, [pc, #216]	; (80116e4 <mem_malloc+0x1e8>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801160e:	e005      	b.n	801161c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	881b      	ldrh	r3, [r3, #0]
 8011614:	4618      	mov	r0, r3
 8011616:	f7ff fc83 	bl	8010f20 <ptr_to_mem>
 801161a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	791b      	ldrb	r3, [r3, #4]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d004      	beq.n	801162e <mem_malloc+0x132>
 8011624:	4b33      	ldr	r3, [pc, #204]	; (80116f4 <mem_malloc+0x1f8>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	69ba      	ldr	r2, [r7, #24]
 801162a:	429a      	cmp	r2, r3
 801162c:	d1f0      	bne.n	8011610 <mem_malloc+0x114>
          }
          lfree = cur;
 801162e:	4a2d      	ldr	r2, [pc, #180]	; (80116e4 <mem_malloc+0x1e8>)
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011634:	4b2b      	ldr	r3, [pc, #172]	; (80116e4 <mem_malloc+0x1e8>)
 8011636:	681a      	ldr	r2, [r3, #0]
 8011638:	4b2e      	ldr	r3, [pc, #184]	; (80116f4 <mem_malloc+0x1f8>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	429a      	cmp	r2, r3
 801163e:	d00b      	beq.n	8011658 <mem_malloc+0x15c>
 8011640:	4b28      	ldr	r3, [pc, #160]	; (80116e4 <mem_malloc+0x1e8>)
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	791b      	ldrb	r3, [r3, #4]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d006      	beq.n	8011658 <mem_malloc+0x15c>
 801164a:	4b27      	ldr	r3, [pc, #156]	; (80116e8 <mem_malloc+0x1ec>)
 801164c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011650:	4929      	ldr	r1, [pc, #164]	; (80116f8 <mem_malloc+0x1fc>)
 8011652:	4827      	ldr	r0, [pc, #156]	; (80116f0 <mem_malloc+0x1f4>)
 8011654:	f00d fbe6 	bl	801ee24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011658:	4821      	ldr	r0, [pc, #132]	; (80116e0 <mem_malloc+0x1e4>)
 801165a:	f00c fd02 	bl	801e062 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801165e:	8bba      	ldrh	r2, [r7, #28]
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	4413      	add	r3, r2
 8011664:	3308      	adds	r3, #8
 8011666:	4a23      	ldr	r2, [pc, #140]	; (80116f4 <mem_malloc+0x1f8>)
 8011668:	6812      	ldr	r2, [r2, #0]
 801166a:	4293      	cmp	r3, r2
 801166c:	d906      	bls.n	801167c <mem_malloc+0x180>
 801166e:	4b1e      	ldr	r3, [pc, #120]	; (80116e8 <mem_malloc+0x1ec>)
 8011670:	f240 32b9 	movw	r2, #953	; 0x3b9
 8011674:	4921      	ldr	r1, [pc, #132]	; (80116fc <mem_malloc+0x200>)
 8011676:	481e      	ldr	r0, [pc, #120]	; (80116f0 <mem_malloc+0x1f4>)
 8011678:	f00d fbd4 	bl	801ee24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	f003 0303 	and.w	r3, r3, #3
 8011682:	2b00      	cmp	r3, #0
 8011684:	d006      	beq.n	8011694 <mem_malloc+0x198>
 8011686:	4b18      	ldr	r3, [pc, #96]	; (80116e8 <mem_malloc+0x1ec>)
 8011688:	f240 32bb 	movw	r2, #955	; 0x3bb
 801168c:	491c      	ldr	r1, [pc, #112]	; (8011700 <mem_malloc+0x204>)
 801168e:	4818      	ldr	r0, [pc, #96]	; (80116f0 <mem_malloc+0x1f4>)
 8011690:	f00d fbc8 	bl	801ee24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	f003 0303 	and.w	r3, r3, #3
 801169a:	2b00      	cmp	r3, #0
 801169c:	d006      	beq.n	80116ac <mem_malloc+0x1b0>
 801169e:	4b12      	ldr	r3, [pc, #72]	; (80116e8 <mem_malloc+0x1ec>)
 80116a0:	f240 32bd 	movw	r2, #957	; 0x3bd
 80116a4:	4917      	ldr	r1, [pc, #92]	; (8011704 <mem_malloc+0x208>)
 80116a6:	4812      	ldr	r0, [pc, #72]	; (80116f0 <mem_malloc+0x1f4>)
 80116a8:	f00d fbbc 	bl	801ee24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	3308      	adds	r3, #8
 80116b0:	e011      	b.n	80116d6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80116b2:	8bfb      	ldrh	r3, [r7, #30]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7ff fc33 	bl	8010f20 <ptr_to_mem>
 80116ba:	4603      	mov	r3, r0
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80116c0:	8bfa      	ldrh	r2, [r7, #30]
 80116c2:	8bbb      	ldrh	r3, [r7, #28]
 80116c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80116c8:	429a      	cmp	r2, r3
 80116ca:	f4ff af41 	bcc.w	8011550 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80116ce:	4804      	ldr	r0, [pc, #16]	; (80116e0 <mem_malloc+0x1e4>)
 80116d0:	f00c fcc7 	bl	801e062 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80116d4:	2300      	movs	r3, #0
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3720      	adds	r7, #32
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}
 80116de:	bf00      	nop
 80116e0:	20009798 	.word	0x20009798
 80116e4:	2000979c 	.word	0x2000979c
 80116e8:	08021808 	.word	0x08021808
 80116ec:	080219cc 	.word	0x080219cc
 80116f0:	08021850 	.word	0x08021850
 80116f4:	20009794 	.word	0x20009794
 80116f8:	080219e0 	.word	0x080219e0
 80116fc:	080219fc 	.word	0x080219fc
 8011700:	08021a2c 	.word	0x08021a2c
 8011704:	08021a5c 	.word	0x08021a5c

08011708 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011708:	b480      	push	{r7}
 801170a:	b085      	sub	sp, #20
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	689b      	ldr	r3, [r3, #8]
 8011714:	2200      	movs	r2, #0
 8011716:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	3303      	adds	r3, #3
 801171e:	f023 0303 	bic.w	r3, r3, #3
 8011722:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011724:	2300      	movs	r3, #0
 8011726:	60fb      	str	r3, [r7, #12]
 8011728:	e011      	b.n	801174e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	881b      	ldrh	r3, [r3, #0]
 8011740:	461a      	mov	r2, r3
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	4413      	add	r3, r2
 8011746:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	3301      	adds	r3, #1
 801174c:	60fb      	str	r3, [r7, #12]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	885b      	ldrh	r3, [r3, #2]
 8011752:	461a      	mov	r2, r3
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	4293      	cmp	r3, r2
 8011758:	dbe7      	blt.n	801172a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801175a:	bf00      	nop
 801175c:	bf00      	nop
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801176e:	2300      	movs	r3, #0
 8011770:	80fb      	strh	r3, [r7, #6]
 8011772:	e009      	b.n	8011788 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011774:	88fb      	ldrh	r3, [r7, #6]
 8011776:	4a08      	ldr	r2, [pc, #32]	; (8011798 <memp_init+0x30>)
 8011778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff ffc3 	bl	8011708 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011782:	88fb      	ldrh	r3, [r7, #6]
 8011784:	3301      	adds	r3, #1
 8011786:	80fb      	strh	r3, [r7, #6]
 8011788:	88fb      	ldrh	r3, [r7, #6]
 801178a:	2b0c      	cmp	r3, #12
 801178c:	d9f2      	bls.n	8011774 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801178e:	bf00      	nop
 8011790:	bf00      	nop
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}
 8011798:	08024700 	.word	0x08024700

0801179c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80117a4:	f00c fc90 	bl	801e0c8 <sys_arch_protect>
 80117a8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	689b      	ldr	r3, [r3, #8]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d015      	beq.n	80117e4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	68ba      	ldr	r2, [r7, #8]
 80117be:	6812      	ldr	r2, [r2, #0]
 80117c0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	f003 0303 	and.w	r3, r3, #3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d006      	beq.n	80117da <do_memp_malloc_pool+0x3e>
 80117cc:	4b09      	ldr	r3, [pc, #36]	; (80117f4 <do_memp_malloc_pool+0x58>)
 80117ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 80117d2:	4909      	ldr	r1, [pc, #36]	; (80117f8 <do_memp_malloc_pool+0x5c>)
 80117d4:	4809      	ldr	r0, [pc, #36]	; (80117fc <do_memp_malloc_pool+0x60>)
 80117d6:	f00d fb25 	bl	801ee24 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f00c fc82 	bl	801e0e4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	e003      	b.n	80117ec <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f00c fc7d 	bl	801e0e4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80117ea:	2300      	movs	r3, #0
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3710      	adds	r7, #16
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	08021a80 	.word	0x08021a80
 80117f8:	08021ab0 	.word	0x08021ab0
 80117fc:	08021ad4 	.word	0x08021ad4

08011800 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b082      	sub	sp, #8
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d106      	bne.n	801181c <memp_malloc_pool+0x1c>
 801180e:	4b0a      	ldr	r3, [pc, #40]	; (8011838 <memp_malloc_pool+0x38>)
 8011810:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011814:	4909      	ldr	r1, [pc, #36]	; (801183c <memp_malloc_pool+0x3c>)
 8011816:	480a      	ldr	r0, [pc, #40]	; (8011840 <memp_malloc_pool+0x40>)
 8011818:	f00d fb04 	bl	801ee24 <iprintf>
  if (desc == NULL) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d101      	bne.n	8011826 <memp_malloc_pool+0x26>
    return NULL;
 8011822:	2300      	movs	r3, #0
 8011824:	e003      	b.n	801182e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011826:	6878      	ldr	r0, [r7, #4]
 8011828:	f7ff ffb8 	bl	801179c <do_memp_malloc_pool>
 801182c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801182e:	4618      	mov	r0, r3
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	08021a80 	.word	0x08021a80
 801183c:	08021afc 	.word	0x08021afc
 8011840:	08021ad4 	.word	0x08021ad4

08011844 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	4603      	mov	r3, r0
 801184c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801184e:	79fb      	ldrb	r3, [r7, #7]
 8011850:	2b0c      	cmp	r3, #12
 8011852:	d908      	bls.n	8011866 <memp_malloc+0x22>
 8011854:	4b0a      	ldr	r3, [pc, #40]	; (8011880 <memp_malloc+0x3c>)
 8011856:	f240 1257 	movw	r2, #343	; 0x157
 801185a:	490a      	ldr	r1, [pc, #40]	; (8011884 <memp_malloc+0x40>)
 801185c:	480a      	ldr	r0, [pc, #40]	; (8011888 <memp_malloc+0x44>)
 801185e:	f00d fae1 	bl	801ee24 <iprintf>
 8011862:	2300      	movs	r3, #0
 8011864:	e008      	b.n	8011878 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011866:	79fb      	ldrb	r3, [r7, #7]
 8011868:	4a08      	ldr	r2, [pc, #32]	; (801188c <memp_malloc+0x48>)
 801186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801186e:	4618      	mov	r0, r3
 8011870:	f7ff ff94 	bl	801179c <do_memp_malloc_pool>
 8011874:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011876:	68fb      	ldr	r3, [r7, #12]
}
 8011878:	4618      	mov	r0, r3
 801187a:	3710      	adds	r7, #16
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	08021a80 	.word	0x08021a80
 8011884:	08021b10 	.word	0x08021b10
 8011888:	08021ad4 	.word	0x08021ad4
 801188c:	08024700 	.word	0x08024700

08011890 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	f003 0303 	and.w	r3, r3, #3
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d006      	beq.n	80118b2 <do_memp_free_pool+0x22>
 80118a4:	4b0d      	ldr	r3, [pc, #52]	; (80118dc <do_memp_free_pool+0x4c>)
 80118a6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80118aa:	490d      	ldr	r1, [pc, #52]	; (80118e0 <do_memp_free_pool+0x50>)
 80118ac:	480d      	ldr	r0, [pc, #52]	; (80118e4 <do_memp_free_pool+0x54>)
 80118ae:	f00d fab9 	bl	801ee24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80118b6:	f00c fc07 	bl	801e0c8 <sys_arch_protect>
 80118ba:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	689b      	ldr	r3, [r3, #8]
 80118c0:	681a      	ldr	r2, [r3, #0]
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	689b      	ldr	r3, [r3, #8]
 80118ca:	68fa      	ldr	r2, [r7, #12]
 80118cc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80118ce:	68b8      	ldr	r0, [r7, #8]
 80118d0:	f00c fc08 	bl	801e0e4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80118d4:	bf00      	nop
 80118d6:	3710      	adds	r7, #16
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	08021a80 	.word	0x08021a80
 80118e0:	08021b30 	.word	0x08021b30
 80118e4:	08021ad4 	.word	0x08021ad4

080118e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b082      	sub	sp, #8
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d106      	bne.n	8011906 <memp_free_pool+0x1e>
 80118f8:	4b0a      	ldr	r3, [pc, #40]	; (8011924 <memp_free_pool+0x3c>)
 80118fa:	f240 1295 	movw	r2, #405	; 0x195
 80118fe:	490a      	ldr	r1, [pc, #40]	; (8011928 <memp_free_pool+0x40>)
 8011900:	480a      	ldr	r0, [pc, #40]	; (801192c <memp_free_pool+0x44>)
 8011902:	f00d fa8f 	bl	801ee24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d007      	beq.n	801191c <memp_free_pool+0x34>
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8011912:	6839      	ldr	r1, [r7, #0]
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7ff ffbb 	bl	8011890 <do_memp_free_pool>
 801191a:	e000      	b.n	801191e <memp_free_pool+0x36>
    return;
 801191c:	bf00      	nop
}
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	08021a80 	.word	0x08021a80
 8011928:	08021afc 	.word	0x08021afc
 801192c:	08021ad4 	.word	0x08021ad4

08011930 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b082      	sub	sp, #8
 8011934:	af00      	add	r7, sp, #0
 8011936:	4603      	mov	r3, r0
 8011938:	6039      	str	r1, [r7, #0]
 801193a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801193c:	79fb      	ldrb	r3, [r7, #7]
 801193e:	2b0c      	cmp	r3, #12
 8011940:	d907      	bls.n	8011952 <memp_free+0x22>
 8011942:	4b0c      	ldr	r3, [pc, #48]	; (8011974 <memp_free+0x44>)
 8011944:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011948:	490b      	ldr	r1, [pc, #44]	; (8011978 <memp_free+0x48>)
 801194a:	480c      	ldr	r0, [pc, #48]	; (801197c <memp_free+0x4c>)
 801194c:	f00d fa6a 	bl	801ee24 <iprintf>
 8011950:	e00c      	b.n	801196c <memp_free+0x3c>

  if (mem == NULL) {
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d008      	beq.n	801196a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011958:	79fb      	ldrb	r3, [r7, #7]
 801195a:	4a09      	ldr	r2, [pc, #36]	; (8011980 <memp_free+0x50>)
 801195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	4618      	mov	r0, r3
 8011964:	f7ff ff94 	bl	8011890 <do_memp_free_pool>
 8011968:	e000      	b.n	801196c <memp_free+0x3c>
    return;
 801196a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801196c:	3708      	adds	r7, #8
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	08021a80 	.word	0x08021a80
 8011978:	08021b50 	.word	0x08021b50
 801197c:	08021ad4 	.word	0x08021ad4
 8011980:	08024700 	.word	0x08024700

08011984 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011984:	b480      	push	{r7}
 8011986:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011988:	bf00      	nop
 801198a:	46bd      	mov	sp, r7
 801198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011990:	4770      	bx	lr
	...

08011994 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b086      	sub	sp, #24
 8011998:	af00      	add	r7, sp, #0
 801199a:	60f8      	str	r0, [r7, #12]
 801199c:	60b9      	str	r1, [r7, #8]
 801199e:	607a      	str	r2, [r7, #4]
 80119a0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d108      	bne.n	80119ba <netif_add+0x26>
 80119a8:	4b5b      	ldr	r3, [pc, #364]	; (8011b18 <netif_add+0x184>)
 80119aa:	f240 1227 	movw	r2, #295	; 0x127
 80119ae:	495b      	ldr	r1, [pc, #364]	; (8011b1c <netif_add+0x188>)
 80119b0:	485b      	ldr	r0, [pc, #364]	; (8011b20 <netif_add+0x18c>)
 80119b2:	f00d fa37 	bl	801ee24 <iprintf>
 80119b6:	2300      	movs	r3, #0
 80119b8:	e0a9      	b.n	8011b0e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80119ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d108      	bne.n	80119d2 <netif_add+0x3e>
 80119c0:	4b55      	ldr	r3, [pc, #340]	; (8011b18 <netif_add+0x184>)
 80119c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80119c6:	4957      	ldr	r1, [pc, #348]	; (8011b24 <netif_add+0x190>)
 80119c8:	4855      	ldr	r0, [pc, #340]	; (8011b20 <netif_add+0x18c>)
 80119ca:	f00d fa2b 	bl	801ee24 <iprintf>
 80119ce:	2300      	movs	r3, #0
 80119d0:	e09d      	b.n	8011b0e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d101      	bne.n	80119dc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80119d8:	4b53      	ldr	r3, [pc, #332]	; (8011b28 <netif_add+0x194>)
 80119da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d101      	bne.n	80119e6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80119e2:	4b51      	ldr	r3, [pc, #324]	; (8011b28 <netif_add+0x194>)
 80119e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80119e6:	683b      	ldr	r3, [r7, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d101      	bne.n	80119f0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80119ec:	4b4e      	ldr	r3, [pc, #312]	; (8011b28 <netif_add+0x194>)
 80119ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2200      	movs	r2, #0
 80119fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	2200      	movs	r2, #0
 8011a00:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	4a49      	ldr	r2, [pc, #292]	; (8011b2c <netif_add+0x198>)
 8011a06:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2200      	movs	r2, #0
 8011a12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	3324      	adds	r3, #36	; 0x24
 8011a1a:	2204      	movs	r2, #4
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f00d fb56 	bl	801f0d0 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2200      	movs	r2, #0
 8011a28:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	6a3a      	ldr	r2, [r7, #32]
 8011a2e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011a30:	4b3f      	ldr	r3, [pc, #252]	; (8011b30 <netif_add+0x19c>)
 8011a32:	781a      	ldrb	r2, [r3, #0]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a3e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	687a      	ldr	r2, [r7, #4]
 8011a44:	68b9      	ldr	r1, [r7, #8]
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f000 f914 	bl	8011c74 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	4798      	blx	r3
 8011a52:	4603      	mov	r3, r0
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d001      	beq.n	8011a5c <netif_add+0xc8>
    return NULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	e058      	b.n	8011b0e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a62:	2bff      	cmp	r3, #255	; 0xff
 8011a64:	d103      	bne.n	8011a6e <netif_add+0xda>
        netif->num = 0;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011a72:	4b30      	ldr	r3, [pc, #192]	; (8011b34 <netif_add+0x1a0>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	617b      	str	r3, [r7, #20]
 8011a78:	e02b      	b.n	8011ad2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011a7a:	697a      	ldr	r2, [r7, #20]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d106      	bne.n	8011a90 <netif_add+0xfc>
 8011a82:	4b25      	ldr	r3, [pc, #148]	; (8011b18 <netif_add+0x184>)
 8011a84:	f240 128b 	movw	r2, #395	; 0x18b
 8011a88:	492b      	ldr	r1, [pc, #172]	; (8011b38 <netif_add+0x1a4>)
 8011a8a:	4825      	ldr	r0, [pc, #148]	; (8011b20 <netif_add+0x18c>)
 8011a8c:	f00d f9ca 	bl	801ee24 <iprintf>
        num_netifs++;
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	3301      	adds	r3, #1
 8011a94:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	2bff      	cmp	r3, #255	; 0xff
 8011a9a:	dd06      	ble.n	8011aaa <netif_add+0x116>
 8011a9c:	4b1e      	ldr	r3, [pc, #120]	; (8011b18 <netif_add+0x184>)
 8011a9e:	f240 128d 	movw	r2, #397	; 0x18d
 8011aa2:	4926      	ldr	r1, [pc, #152]	; (8011b3c <netif_add+0x1a8>)
 8011aa4:	481e      	ldr	r0, [pc, #120]	; (8011b20 <netif_add+0x18c>)
 8011aa6:	f00d f9bd 	bl	801ee24 <iprintf>
        if (netif2->num == netif->num) {
 8011aaa:	697b      	ldr	r3, [r7, #20]
 8011aac:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d108      	bne.n	8011acc <netif_add+0x138>
          netif->num++;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ac0:	3301      	adds	r3, #1
 8011ac2:	b2da      	uxtb	r2, r3
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8011aca:	e005      	b.n	8011ad8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	617b      	str	r3, [r7, #20]
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d1d0      	bne.n	8011a7a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1be      	bne.n	8011a5c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011ae4:	2bfe      	cmp	r3, #254	; 0xfe
 8011ae6:	d103      	bne.n	8011af0 <netif_add+0x15c>
    netif_num = 0;
 8011ae8:	4b11      	ldr	r3, [pc, #68]	; (8011b30 <netif_add+0x19c>)
 8011aea:	2200      	movs	r2, #0
 8011aec:	701a      	strb	r2, [r3, #0]
 8011aee:	e006      	b.n	8011afe <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011af6:	3301      	adds	r3, #1
 8011af8:	b2da      	uxtb	r2, r3
 8011afa:	4b0d      	ldr	r3, [pc, #52]	; (8011b30 <netif_add+0x19c>)
 8011afc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011afe:	4b0d      	ldr	r3, [pc, #52]	; (8011b34 <netif_add+0x1a0>)
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011b06:	4a0b      	ldr	r2, [pc, #44]	; (8011b34 <netif_add+0x1a0>)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3718      	adds	r7, #24
 8011b12:	46bd      	mov	sp, r7
 8011b14:	bd80      	pop	{r7, pc}
 8011b16:	bf00      	nop
 8011b18:	08021b6c 	.word	0x08021b6c
 8011b1c:	08021c00 	.word	0x08021c00
 8011b20:	08021bbc 	.word	0x08021bbc
 8011b24:	08021c1c 	.word	0x08021c1c
 8011b28:	08024784 	.word	0x08024784
 8011b2c:	08011f57 	.word	0x08011f57
 8011b30:	2000c894 	.word	0x2000c894
 8011b34:	2000c88c 	.word	0x2000c88c
 8011b38:	08021c40 	.word	0x08021c40
 8011b3c:	08021c54 	.word	0x08021c54

08011b40 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b082      	sub	sp, #8
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011b4a:	6839      	ldr	r1, [r7, #0]
 8011b4c:	6878      	ldr	r0, [r7, #4]
 8011b4e:	f002 feb5 	bl	80148bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011b52:	6839      	ldr	r1, [r7, #0]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f007 ff49 	bl	80199ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011b5a:	bf00      	nop
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
	...

08011b64 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b086      	sub	sp, #24
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	60f8      	str	r0, [r7, #12]
 8011b6c:	60b9      	str	r1, [r7, #8]
 8011b6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011b70:	68bb      	ldr	r3, [r7, #8]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d106      	bne.n	8011b84 <netif_do_set_ipaddr+0x20>
 8011b76:	4b1d      	ldr	r3, [pc, #116]	; (8011bec <netif_do_set_ipaddr+0x88>)
 8011b78:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011b7c:	491c      	ldr	r1, [pc, #112]	; (8011bf0 <netif_do_set_ipaddr+0x8c>)
 8011b7e:	481d      	ldr	r0, [pc, #116]	; (8011bf4 <netif_do_set_ipaddr+0x90>)
 8011b80:	f00d f950 	bl	801ee24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <netif_do_set_ipaddr+0x34>
 8011b8a:	4b18      	ldr	r3, [pc, #96]	; (8011bec <netif_do_set_ipaddr+0x88>)
 8011b8c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8011b90:	4917      	ldr	r1, [pc, #92]	; (8011bf0 <netif_do_set_ipaddr+0x8c>)
 8011b92:	4818      	ldr	r0, [pc, #96]	; (8011bf4 <netif_do_set_ipaddr+0x90>)
 8011b94:	f00d f946 	bl	801ee24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	681a      	ldr	r2, [r3, #0]
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	3304      	adds	r3, #4
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d01c      	beq.n	8011be0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	3304      	adds	r3, #4
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011bb6:	f107 0314 	add.w	r3, r7, #20
 8011bba:	4619      	mov	r1, r3
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7ff ffbf 	bl	8011b40 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011bc2:	68bb      	ldr	r3, [r7, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d002      	beq.n	8011bce <netif_do_set_ipaddr+0x6a>
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	e000      	b.n	8011bd0 <netif_do_set_ipaddr+0x6c>
 8011bce:	2300      	movs	r3, #0
 8011bd0:	68fa      	ldr	r2, [r7, #12]
 8011bd2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011bd4:	2101      	movs	r1, #1
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f000 f8d2 	bl	8011d80 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011bdc:	2301      	movs	r3, #1
 8011bde:	e000      	b.n	8011be2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011be0:	2300      	movs	r3, #0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
 8011bea:	bf00      	nop
 8011bec:	08021b6c 	.word	0x08021b6c
 8011bf0:	08021c84 	.word	0x08021c84
 8011bf4:	08021bbc 	.word	0x08021bbc

08011bf8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011c04:	68bb      	ldr	r3, [r7, #8]
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3308      	adds	r3, #8
 8011c0c:	681b      	ldr	r3, [r3, #0]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d00a      	beq.n	8011c28 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011c12:	68bb      	ldr	r3, [r7, #8]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d002      	beq.n	8011c1e <netif_do_set_netmask+0x26>
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	e000      	b.n	8011c20 <netif_do_set_netmask+0x28>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011c24:	2301      	movs	r3, #1
 8011c26:	e000      	b.n	8011c2a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3714      	adds	r7, #20
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c34:	4770      	bx	lr

08011c36 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011c36:	b480      	push	{r7}
 8011c38:	b085      	sub	sp, #20
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	60f8      	str	r0, [r7, #12]
 8011c3e:	60b9      	str	r1, [r7, #8]
 8011c40:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	681a      	ldr	r2, [r3, #0]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	330c      	adds	r3, #12
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	429a      	cmp	r2, r3
 8011c4e:	d00a      	beq.n	8011c66 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d002      	beq.n	8011c5c <netif_do_set_gw+0x26>
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	e000      	b.n	8011c5e <netif_do_set_gw+0x28>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011c62:	2301      	movs	r3, #1
 8011c64:	e000      	b.n	8011c68 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011c66:	2300      	movs	r3, #0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3714      	adds	r7, #20
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr

08011c74 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b088      	sub	sp, #32
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	607a      	str	r2, [r7, #4]
 8011c80:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011c86:	2300      	movs	r3, #0
 8011c88:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011c90:	4b1c      	ldr	r3, [pc, #112]	; (8011d04 <netif_set_addr+0x90>)
 8011c92:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011c9a:	4b1a      	ldr	r3, [pc, #104]	; (8011d04 <netif_set_addr+0x90>)
 8011c9c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d101      	bne.n	8011ca8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011ca4:	4b17      	ldr	r3, [pc, #92]	; (8011d04 <netif_set_addr+0x90>)
 8011ca6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d003      	beq.n	8011cb6 <netif_set_addr+0x42>
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d101      	bne.n	8011cba <netif_set_addr+0x46>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e000      	b.n	8011cbc <netif_set_addr+0x48>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d006      	beq.n	8011cd2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011cc4:	f107 0310 	add.w	r3, r7, #16
 8011cc8:	461a      	mov	r2, r3
 8011cca:	68b9      	ldr	r1, [r7, #8]
 8011ccc:	68f8      	ldr	r0, [r7, #12]
 8011cce:	f7ff ff49 	bl	8011b64 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011cd2:	69fa      	ldr	r2, [r7, #28]
 8011cd4:	6879      	ldr	r1, [r7, #4]
 8011cd6:	68f8      	ldr	r0, [r7, #12]
 8011cd8:	f7ff ff8e 	bl	8011bf8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011cdc:	69ba      	ldr	r2, [r7, #24]
 8011cde:	6839      	ldr	r1, [r7, #0]
 8011ce0:	68f8      	ldr	r0, [r7, #12]
 8011ce2:	f7ff ffa8 	bl	8011c36 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d106      	bne.n	8011cfa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011cec:	f107 0310 	add.w	r3, r7, #16
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	68b9      	ldr	r1, [r7, #8]
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f7ff ff35 	bl	8011b64 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011cfa:	bf00      	nop
 8011cfc:	3720      	adds	r7, #32
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	08024784 	.word	0x08024784

08011d08 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b083      	sub	sp, #12
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011d10:	4a04      	ldr	r2, [pc, #16]	; (8011d24 <netif_set_default+0x1c>)
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011d16:	bf00      	nop
 8011d18:	370c      	adds	r7, #12
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d20:	4770      	bx	lr
 8011d22:	bf00      	nop
 8011d24:	2000c890 	.word	0x2000c890

08011d28 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d107      	bne.n	8011d46 <netif_set_up+0x1e>
 8011d36:	4b0f      	ldr	r3, [pc, #60]	; (8011d74 <netif_set_up+0x4c>)
 8011d38:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011d3c:	490e      	ldr	r1, [pc, #56]	; (8011d78 <netif_set_up+0x50>)
 8011d3e:	480f      	ldr	r0, [pc, #60]	; (8011d7c <netif_set_up+0x54>)
 8011d40:	f00d f870 	bl	801ee24 <iprintf>
 8011d44:	e013      	b.n	8011d6e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d4c:	f003 0301 	and.w	r3, r3, #1
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d10c      	bne.n	8011d6e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011d5a:	f043 0301 	orr.w	r3, r3, #1
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011d66:	2103      	movs	r1, #3
 8011d68:	6878      	ldr	r0, [r7, #4]
 8011d6a:	f000 f809 	bl	8011d80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	08021b6c 	.word	0x08021b6c
 8011d78:	08021cf4 	.word	0x08021cf4
 8011d7c:	08021bbc 	.word	0x08021bbc

08011d80 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	460b      	mov	r3, r1
 8011d8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <netif_issue_reports+0x20>
 8011d92:	4b18      	ldr	r3, [pc, #96]	; (8011df4 <netif_issue_reports+0x74>)
 8011d94:	f240 326d 	movw	r2, #877	; 0x36d
 8011d98:	4917      	ldr	r1, [pc, #92]	; (8011df8 <netif_issue_reports+0x78>)
 8011d9a:	4818      	ldr	r0, [pc, #96]	; (8011dfc <netif_issue_reports+0x7c>)
 8011d9c:	f00d f842 	bl	801ee24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011da6:	f003 0304 	and.w	r3, r3, #4
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d01e      	beq.n	8011dec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011db4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d017      	beq.n	8011dec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011dbc:	78fb      	ldrb	r3, [r7, #3]
 8011dbe:	f003 0301 	and.w	r3, r3, #1
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d013      	beq.n	8011dee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d00e      	beq.n	8011dee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011dd6:	f003 0308 	and.w	r3, r3, #8
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d007      	beq.n	8011dee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	3304      	adds	r3, #4
 8011de2:	4619      	mov	r1, r3
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f00a fc01 	bl	801c5ec <etharp_request>
 8011dea:	e000      	b.n	8011dee <netif_issue_reports+0x6e>
    return;
 8011dec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	08021b6c 	.word	0x08021b6c
 8011df8:	08021d10 	.word	0x08021d10
 8011dfc:	08021bbc 	.word	0x08021bbc

08011e00 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d107      	bne.n	8011e1e <netif_set_down+0x1e>
 8011e0e:	4b12      	ldr	r3, [pc, #72]	; (8011e58 <netif_set_down+0x58>)
 8011e10:	f240 329b 	movw	r2, #923	; 0x39b
 8011e14:	4911      	ldr	r1, [pc, #68]	; (8011e5c <netif_set_down+0x5c>)
 8011e16:	4812      	ldr	r0, [pc, #72]	; (8011e60 <netif_set_down+0x60>)
 8011e18:	f00d f804 	bl	801ee24 <iprintf>
 8011e1c:	e019      	b.n	8011e52 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d012      	beq.n	8011e52 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e32:	f023 0301 	bic.w	r3, r3, #1
 8011e36:	b2da      	uxtb	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e44:	f003 0308 	and.w	r3, r3, #8
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d002      	beq.n	8011e52 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f009 ff87 	bl	801bd60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011e52:	3708      	adds	r7, #8
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}
 8011e58:	08021b6c 	.word	0x08021b6c
 8011e5c:	08021d34 	.word	0x08021d34
 8011e60:	08021bbc 	.word	0x08021bbc

08011e64 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b082      	sub	sp, #8
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d107      	bne.n	8011e82 <netif_set_link_up+0x1e>
 8011e72:	4b15      	ldr	r3, [pc, #84]	; (8011ec8 <netif_set_link_up+0x64>)
 8011e74:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011e78:	4914      	ldr	r1, [pc, #80]	; (8011ecc <netif_set_link_up+0x68>)
 8011e7a:	4815      	ldr	r0, [pc, #84]	; (8011ed0 <netif_set_link_up+0x6c>)
 8011e7c:	f00c ffd2 	bl	801ee24 <iprintf>
 8011e80:	e01e      	b.n	8011ec0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e88:	f003 0304 	and.w	r3, r3, #4
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d117      	bne.n	8011ec0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011e96:	f043 0304 	orr.w	r3, r3, #4
 8011e9a:	b2da      	uxtb	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f008 f9cc 	bl	801a240 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011ea8:	2103      	movs	r1, #3
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff ff68 	bl	8011d80 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	69db      	ldr	r3, [r3, #28]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d003      	beq.n	8011ec0 <netif_set_link_up+0x5c>
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	69db      	ldr	r3, [r3, #28]
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011ec0:	3708      	adds	r7, #8
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	08021b6c 	.word	0x08021b6c
 8011ecc:	08021d54 	.word	0x08021d54
 8011ed0:	08021bbc 	.word	0x08021bbc

08011ed4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d107      	bne.n	8011ef2 <netif_set_link_down+0x1e>
 8011ee2:	4b11      	ldr	r3, [pc, #68]	; (8011f28 <netif_set_link_down+0x54>)
 8011ee4:	f240 4206 	movw	r2, #1030	; 0x406
 8011ee8:	4910      	ldr	r1, [pc, #64]	; (8011f2c <netif_set_link_down+0x58>)
 8011eea:	4811      	ldr	r0, [pc, #68]	; (8011f30 <netif_set_link_down+0x5c>)
 8011eec:	f00c ff9a 	bl	801ee24 <iprintf>
 8011ef0:	e017      	b.n	8011f22 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011ef8:	f003 0304 	and.w	r3, r3, #4
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d010      	beq.n	8011f22 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f06:	f023 0304 	bic.w	r3, r3, #4
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	69db      	ldr	r3, [r3, #28]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d003      	beq.n	8011f22 <netif_set_link_down+0x4e>
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	69db      	ldr	r3, [r3, #28]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011f22:	3708      	adds	r7, #8
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bd80      	pop	{r7, pc}
 8011f28:	08021b6c 	.word	0x08021b6c
 8011f2c:	08021d78 	.word	0x08021d78
 8011f30:	08021bbc 	.word	0x08021bbc

08011f34 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b083      	sub	sp, #12
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	61da      	str	r2, [r3, #28]
  }
}
 8011f4a:	bf00      	nop
 8011f4c:	370c      	adds	r7, #12
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr

08011f56 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011f56:	b480      	push	{r7}
 8011f58:	b085      	sub	sp, #20
 8011f5a:	af00      	add	r7, sp, #0
 8011f5c:	60f8      	str	r0, [r7, #12]
 8011f5e:	60b9      	str	r1, [r7, #8]
 8011f60:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011f62:	f06f 030b 	mvn.w	r3, #11
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f70:	4770      	bx	lr
	...

08011f74 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b085      	sub	sp, #20
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011f7e:	79fb      	ldrb	r3, [r7, #7]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d013      	beq.n	8011fac <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011f84:	4b0d      	ldr	r3, [pc, #52]	; (8011fbc <netif_get_by_index+0x48>)
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	60fb      	str	r3, [r7, #12]
 8011f8a:	e00c      	b.n	8011fa6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f92:	3301      	adds	r3, #1
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	79fa      	ldrb	r2, [r7, #7]
 8011f98:	429a      	cmp	r2, r3
 8011f9a:	d101      	bne.n	8011fa0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	e006      	b.n	8011fae <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	60fb      	str	r3, [r7, #12]
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1ef      	bne.n	8011f8c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3714      	adds	r7, #20
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	2000c88c 	.word	0x2000c88c

08011fc0 <netif_find>:
 * @param name the name of the netif (like netif->name) plus concatenated number
 * in ascii representation (e.g. 'en0')
 */
struct netif *
netif_find(const char *name)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  struct netif *netif;
  u8_t num;

  LWIP_ASSERT_CORE_LOCKED();

  if (name == NULL) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d101      	bne.n	8011fd2 <netif_find+0x12>
    return NULL;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	e028      	b.n	8012024 <netif_find+0x64>
  }

  num = (u8_t)atoi(&name[2]);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3302      	adds	r3, #2
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f00c fcc6 	bl	801e968 <atoi>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	72fb      	strb	r3, [r7, #11]

  NETIF_FOREACH(netif) {
 8011fe0:	4b12      	ldr	r3, [pc, #72]	; (801202c <netif_find+0x6c>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	60fb      	str	r3, [r7, #12]
 8011fe6:	e019      	b.n	801201c <netif_find+0x5c>
    if (num == netif->num &&
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011fee:	7afa      	ldrb	r2, [r7, #11]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d110      	bne.n	8012016 <netif_find+0x56>
        name[0] == netif->name[0] &&
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	781a      	ldrb	r2, [r3, #0]
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
    if (num == netif->num &&
 8011ffe:	429a      	cmp	r2, r3
 8012000:	d109      	bne.n	8012016 <netif_find+0x56>
        name[1] == netif->name[1]) {
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	3301      	adds	r3, #1
 8012006:	781a      	ldrb	r2, [r3, #0]
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
        name[0] == netif->name[0] &&
 801200e:	429a      	cmp	r2, r3
 8012010:	d101      	bne.n	8012016 <netif_find+0x56>
      LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: found %c%c\n", name[0], name[1]));
      return netif;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	e006      	b.n	8012024 <netif_find+0x64>
  NETIF_FOREACH(netif) {
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d1e2      	bne.n	8011fe8 <netif_find+0x28>
    }
  }
  LWIP_DEBUGF(NETIF_DEBUG, ("netif_find: didn't find %c%c\n", name[0], name[1]));
  return NULL;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3710      	adds	r7, #16
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	2000c88c 	.word	0x2000c88c

08012030 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012036:	f00c f847 	bl	801e0c8 <sys_arch_protect>
 801203a:	6038      	str	r0, [r7, #0]
 801203c:	4b0d      	ldr	r3, [pc, #52]	; (8012074 <pbuf_free_ooseq+0x44>)
 801203e:	2200      	movs	r2, #0
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	6838      	ldr	r0, [r7, #0]
 8012044:	f00c f84e 	bl	801e0e4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012048:	4b0b      	ldr	r3, [pc, #44]	; (8012078 <pbuf_free_ooseq+0x48>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	607b      	str	r3, [r7, #4]
 801204e:	e00a      	b.n	8012066 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012054:	2b00      	cmp	r3, #0
 8012056:	d003      	beq.n	8012060 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012058:	6878      	ldr	r0, [r7, #4]
 801205a:	f002 fc6d 	bl	8014938 <tcp_free_ooseq>
      return;
 801205e:	e005      	b.n	801206c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	607b      	str	r3, [r7, #4]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d1f1      	bne.n	8012050 <pbuf_free_ooseq+0x20>
    }
  }
}
 801206c:	3708      	adds	r7, #8
 801206e:	46bd      	mov	sp, r7
 8012070:	bd80      	pop	{r7, pc}
 8012072:	bf00      	nop
 8012074:	2000c895 	.word	0x2000c895
 8012078:	2000c8a4 	.word	0x2000c8a4

0801207c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b082      	sub	sp, #8
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012084:	f7ff ffd4 	bl	8012030 <pbuf_free_ooseq>
}
 8012088:	bf00      	nop
 801208a:	3708      	adds	r7, #8
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012096:	f00c f817 	bl	801e0c8 <sys_arch_protect>
 801209a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 801209c:	4b0f      	ldr	r3, [pc, #60]	; (80120dc <pbuf_pool_is_empty+0x4c>)
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80120a2:	4b0e      	ldr	r3, [pc, #56]	; (80120dc <pbuf_pool_is_empty+0x4c>)
 80120a4:	2201      	movs	r2, #1
 80120a6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f00c f81b 	bl	801e0e4 <sys_arch_unprotect>

  if (!queued) {
 80120ae:	78fb      	ldrb	r3, [r7, #3]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d10f      	bne.n	80120d4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80120b4:	2100      	movs	r1, #0
 80120b6:	480a      	ldr	r0, [pc, #40]	; (80120e0 <pbuf_pool_is_empty+0x50>)
 80120b8:	f7fe fe4c 	bl	8010d54 <tcpip_try_callback>
 80120bc:	4603      	mov	r3, r0
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d008      	beq.n	80120d4 <pbuf_pool_is_empty+0x44>
 80120c2:	f00c f801 	bl	801e0c8 <sys_arch_protect>
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	4b04      	ldr	r3, [pc, #16]	; (80120dc <pbuf_pool_is_empty+0x4c>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	701a      	strb	r2, [r3, #0]
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f00c f808 	bl	801e0e4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	2000c895 	.word	0x2000c895
 80120e0:	0801207d 	.word	0x0801207d

080120e4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80120e4:	b480      	push	{r7}
 80120e6:	b085      	sub	sp, #20
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	60f8      	str	r0, [r7, #12]
 80120ec:	60b9      	str	r1, [r7, #8]
 80120ee:	4611      	mov	r1, r2
 80120f0:	461a      	mov	r2, r3
 80120f2:	460b      	mov	r3, r1
 80120f4:	80fb      	strh	r3, [r7, #6]
 80120f6:	4613      	mov	r3, r2
 80120f8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2200      	movs	r2, #0
 80120fe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	88fa      	ldrh	r2, [r7, #6]
 801210a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	88ba      	ldrh	r2, [r7, #4]
 8012110:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012112:	8b3b      	ldrh	r3, [r7, #24]
 8012114:	b2da      	uxtb	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	7f3a      	ldrb	r2, [r7, #28]
 801211e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	2201      	movs	r2, #1
 8012124:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	2200      	movs	r2, #0
 801212a:	73da      	strb	r2, [r3, #15]
}
 801212c:	bf00      	nop
 801212e:	3714      	adds	r7, #20
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b08c      	sub	sp, #48	; 0x30
 801213c:	af02      	add	r7, sp, #8
 801213e:	4603      	mov	r3, r0
 8012140:	71fb      	strb	r3, [r7, #7]
 8012142:	460b      	mov	r3, r1
 8012144:	80bb      	strh	r3, [r7, #4]
 8012146:	4613      	mov	r3, r2
 8012148:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801214a:	79fb      	ldrb	r3, [r7, #7]
 801214c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801214e:	887b      	ldrh	r3, [r7, #2]
 8012150:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012154:	d07f      	beq.n	8012256 <pbuf_alloc+0x11e>
 8012156:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801215a:	f300 80c8 	bgt.w	80122ee <pbuf_alloc+0x1b6>
 801215e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012162:	d010      	beq.n	8012186 <pbuf_alloc+0x4e>
 8012164:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012168:	f300 80c1 	bgt.w	80122ee <pbuf_alloc+0x1b6>
 801216c:	2b01      	cmp	r3, #1
 801216e:	d002      	beq.n	8012176 <pbuf_alloc+0x3e>
 8012170:	2b41      	cmp	r3, #65	; 0x41
 8012172:	f040 80bc 	bne.w	80122ee <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012176:	887a      	ldrh	r2, [r7, #2]
 8012178:	88bb      	ldrh	r3, [r7, #4]
 801217a:	4619      	mov	r1, r3
 801217c:	2000      	movs	r0, #0
 801217e:	f000 f8d1 	bl	8012324 <pbuf_alloc_reference>
 8012182:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012184:	e0bd      	b.n	8012302 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012186:	2300      	movs	r3, #0
 8012188:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801218a:	2300      	movs	r3, #0
 801218c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801218e:	88bb      	ldrh	r3, [r7, #4]
 8012190:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012192:	200c      	movs	r0, #12
 8012194:	f7ff fb56 	bl	8011844 <memp_malloc>
 8012198:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d109      	bne.n	80121b4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80121a0:	f7ff ff76 	bl	8012090 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80121a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d002      	beq.n	80121b0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80121aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121ac:	f000 faa8 	bl	8012700 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80121b0:	2300      	movs	r3, #0
 80121b2:	e0a7      	b.n	8012304 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80121b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121b6:	3303      	adds	r3, #3
 80121b8:	b29b      	uxth	r3, r3
 80121ba:	f023 0303 	bic.w	r3, r3, #3
 80121be:	b29b      	uxth	r3, r3
 80121c0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	8b7a      	ldrh	r2, [r7, #26]
 80121c8:	4293      	cmp	r3, r2
 80121ca:	bf28      	it	cs
 80121cc:	4613      	movcs	r3, r2
 80121ce:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80121d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80121d2:	3310      	adds	r3, #16
 80121d4:	693a      	ldr	r2, [r7, #16]
 80121d6:	4413      	add	r3, r2
 80121d8:	3303      	adds	r3, #3
 80121da:	f023 0303 	bic.w	r3, r3, #3
 80121de:	4618      	mov	r0, r3
 80121e0:	89f9      	ldrh	r1, [r7, #14]
 80121e2:	8b7a      	ldrh	r2, [r7, #26]
 80121e4:	2300      	movs	r3, #0
 80121e6:	9301      	str	r3, [sp, #4]
 80121e8:	887b      	ldrh	r3, [r7, #2]
 80121ea:	9300      	str	r3, [sp, #0]
 80121ec:	460b      	mov	r3, r1
 80121ee:	4601      	mov	r1, r0
 80121f0:	6938      	ldr	r0, [r7, #16]
 80121f2:	f7ff ff77 	bl	80120e4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80121f6:	693b      	ldr	r3, [r7, #16]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	f003 0303 	and.w	r3, r3, #3
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d006      	beq.n	8012210 <pbuf_alloc+0xd8>
 8012202:	4b42      	ldr	r3, [pc, #264]	; (801230c <pbuf_alloc+0x1d4>)
 8012204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012208:	4941      	ldr	r1, [pc, #260]	; (8012310 <pbuf_alloc+0x1d8>)
 801220a:	4842      	ldr	r0, [pc, #264]	; (8012314 <pbuf_alloc+0x1dc>)
 801220c:	f00c fe0a 	bl	801ee24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012212:	3303      	adds	r3, #3
 8012214:	f023 0303 	bic.w	r3, r3, #3
 8012218:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801221c:	d106      	bne.n	801222c <pbuf_alloc+0xf4>
 801221e:	4b3b      	ldr	r3, [pc, #236]	; (801230c <pbuf_alloc+0x1d4>)
 8012220:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012224:	493c      	ldr	r1, [pc, #240]	; (8012318 <pbuf_alloc+0x1e0>)
 8012226:	483b      	ldr	r0, [pc, #236]	; (8012314 <pbuf_alloc+0x1dc>)
 8012228:	f00c fdfc 	bl	801ee24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801222e:	2b00      	cmp	r3, #0
 8012230:	d102      	bne.n	8012238 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012232:	693b      	ldr	r3, [r7, #16]
 8012234:	627b      	str	r3, [r7, #36]	; 0x24
 8012236:	e002      	b.n	801223e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	693a      	ldr	r2, [r7, #16]
 801223c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012242:	8b7a      	ldrh	r2, [r7, #26]
 8012244:	89fb      	ldrh	r3, [r7, #14]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801224a:	2300      	movs	r3, #0
 801224c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801224e:	8b7b      	ldrh	r3, [r7, #26]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d19e      	bne.n	8012192 <pbuf_alloc+0x5a>
      break;
 8012254:	e055      	b.n	8012302 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012258:	3303      	adds	r3, #3
 801225a:	b29b      	uxth	r3, r3
 801225c:	f023 0303 	bic.w	r3, r3, #3
 8012260:	b29a      	uxth	r2, r3
 8012262:	88bb      	ldrh	r3, [r7, #4]
 8012264:	3303      	adds	r3, #3
 8012266:	b29b      	uxth	r3, r3
 8012268:	f023 0303 	bic.w	r3, r3, #3
 801226c:	b29b      	uxth	r3, r3
 801226e:	4413      	add	r3, r2
 8012270:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012272:	8b3b      	ldrh	r3, [r7, #24]
 8012274:	3310      	adds	r3, #16
 8012276:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012278:	8b3a      	ldrh	r2, [r7, #24]
 801227a:	88bb      	ldrh	r3, [r7, #4]
 801227c:	3303      	adds	r3, #3
 801227e:	f023 0303 	bic.w	r3, r3, #3
 8012282:	429a      	cmp	r2, r3
 8012284:	d306      	bcc.n	8012294 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012286:	8afa      	ldrh	r2, [r7, #22]
 8012288:	88bb      	ldrh	r3, [r7, #4]
 801228a:	3303      	adds	r3, #3
 801228c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012290:	429a      	cmp	r2, r3
 8012292:	d201      	bcs.n	8012298 <pbuf_alloc+0x160>
        return NULL;
 8012294:	2300      	movs	r3, #0
 8012296:	e035      	b.n	8012304 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012298:	8afb      	ldrh	r3, [r7, #22]
 801229a:	4618      	mov	r0, r3
 801229c:	f7ff f92e 	bl	80114fc <mem_malloc>
 80122a0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80122a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d101      	bne.n	80122ac <pbuf_alloc+0x174>
        return NULL;
 80122a8:	2300      	movs	r3, #0
 80122aa:	e02b      	b.n	8012304 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80122ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80122ae:	3310      	adds	r3, #16
 80122b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122b2:	4413      	add	r3, r2
 80122b4:	3303      	adds	r3, #3
 80122b6:	f023 0303 	bic.w	r3, r3, #3
 80122ba:	4618      	mov	r0, r3
 80122bc:	88b9      	ldrh	r1, [r7, #4]
 80122be:	88ba      	ldrh	r2, [r7, #4]
 80122c0:	2300      	movs	r3, #0
 80122c2:	9301      	str	r3, [sp, #4]
 80122c4:	887b      	ldrh	r3, [r7, #2]
 80122c6:	9300      	str	r3, [sp, #0]
 80122c8:	460b      	mov	r3, r1
 80122ca:	4601      	mov	r1, r0
 80122cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122ce:	f7ff ff09 	bl	80120e4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	f003 0303 	and.w	r3, r3, #3
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d010      	beq.n	8012300 <pbuf_alloc+0x1c8>
 80122de:	4b0b      	ldr	r3, [pc, #44]	; (801230c <pbuf_alloc+0x1d4>)
 80122e0:	f44f 7291 	mov.w	r2, #290	; 0x122
 80122e4:	490d      	ldr	r1, [pc, #52]	; (801231c <pbuf_alloc+0x1e4>)
 80122e6:	480b      	ldr	r0, [pc, #44]	; (8012314 <pbuf_alloc+0x1dc>)
 80122e8:	f00c fd9c 	bl	801ee24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80122ec:	e008      	b.n	8012300 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80122ee:	4b07      	ldr	r3, [pc, #28]	; (801230c <pbuf_alloc+0x1d4>)
 80122f0:	f240 1227 	movw	r2, #295	; 0x127
 80122f4:	490a      	ldr	r1, [pc, #40]	; (8012320 <pbuf_alloc+0x1e8>)
 80122f6:	4807      	ldr	r0, [pc, #28]	; (8012314 <pbuf_alloc+0x1dc>)
 80122f8:	f00c fd94 	bl	801ee24 <iprintf>
      return NULL;
 80122fc:	2300      	movs	r3, #0
 80122fe:	e001      	b.n	8012304 <pbuf_alloc+0x1cc>
      break;
 8012300:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012304:	4618      	mov	r0, r3
 8012306:	3728      	adds	r7, #40	; 0x28
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}
 801230c:	08021d9c 	.word	0x08021d9c
 8012310:	08021dcc 	.word	0x08021dcc
 8012314:	08021dfc 	.word	0x08021dfc
 8012318:	08021e24 	.word	0x08021e24
 801231c:	08021e58 	.word	0x08021e58
 8012320:	08021e84 	.word	0x08021e84

08012324 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b086      	sub	sp, #24
 8012328:	af02      	add	r7, sp, #8
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	460b      	mov	r3, r1
 801232e:	807b      	strh	r3, [r7, #2]
 8012330:	4613      	mov	r3, r2
 8012332:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012334:	883b      	ldrh	r3, [r7, #0]
 8012336:	2b41      	cmp	r3, #65	; 0x41
 8012338:	d009      	beq.n	801234e <pbuf_alloc_reference+0x2a>
 801233a:	883b      	ldrh	r3, [r7, #0]
 801233c:	2b01      	cmp	r3, #1
 801233e:	d006      	beq.n	801234e <pbuf_alloc_reference+0x2a>
 8012340:	4b0f      	ldr	r3, [pc, #60]	; (8012380 <pbuf_alloc_reference+0x5c>)
 8012342:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012346:	490f      	ldr	r1, [pc, #60]	; (8012384 <pbuf_alloc_reference+0x60>)
 8012348:	480f      	ldr	r0, [pc, #60]	; (8012388 <pbuf_alloc_reference+0x64>)
 801234a:	f00c fd6b 	bl	801ee24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801234e:	200b      	movs	r0, #11
 8012350:	f7ff fa78 	bl	8011844 <memp_malloc>
 8012354:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d101      	bne.n	8012360 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801235c:	2300      	movs	r3, #0
 801235e:	e00b      	b.n	8012378 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012360:	8879      	ldrh	r1, [r7, #2]
 8012362:	887a      	ldrh	r2, [r7, #2]
 8012364:	2300      	movs	r3, #0
 8012366:	9301      	str	r3, [sp, #4]
 8012368:	883b      	ldrh	r3, [r7, #0]
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	460b      	mov	r3, r1
 801236e:	6879      	ldr	r1, [r7, #4]
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7ff feb7 	bl	80120e4 <pbuf_init_alloced_pbuf>
  return p;
 8012376:	68fb      	ldr	r3, [r7, #12]
}
 8012378:	4618      	mov	r0, r3
 801237a:	3710      	adds	r7, #16
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	08021d9c 	.word	0x08021d9c
 8012384:	08021ea0 	.word	0x08021ea0
 8012388:	08021dfc 	.word	0x08021dfc

0801238c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b088      	sub	sp, #32
 8012390:	af02      	add	r7, sp, #8
 8012392:	607b      	str	r3, [r7, #4]
 8012394:	4603      	mov	r3, r0
 8012396:	73fb      	strb	r3, [r7, #15]
 8012398:	460b      	mov	r3, r1
 801239a:	81bb      	strh	r3, [r7, #12]
 801239c:	4613      	mov	r3, r2
 801239e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80123a0:	7bfb      	ldrb	r3, [r7, #15]
 80123a2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80123a4:	8a7b      	ldrh	r3, [r7, #18]
 80123a6:	3303      	adds	r3, #3
 80123a8:	f023 0203 	bic.w	r2, r3, #3
 80123ac:	89bb      	ldrh	r3, [r7, #12]
 80123ae:	441a      	add	r2, r3
 80123b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d901      	bls.n	80123ba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80123b6:	2300      	movs	r3, #0
 80123b8:	e018      	b.n	80123ec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80123ba:	6a3b      	ldr	r3, [r7, #32]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d007      	beq.n	80123d0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80123c0:	8a7b      	ldrh	r3, [r7, #18]
 80123c2:	3303      	adds	r3, #3
 80123c4:	f023 0303 	bic.w	r3, r3, #3
 80123c8:	6a3a      	ldr	r2, [r7, #32]
 80123ca:	4413      	add	r3, r2
 80123cc:	617b      	str	r3, [r7, #20]
 80123ce:	e001      	b.n	80123d4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80123d0:	2300      	movs	r3, #0
 80123d2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	89b9      	ldrh	r1, [r7, #12]
 80123d8:	89ba      	ldrh	r2, [r7, #12]
 80123da:	2302      	movs	r3, #2
 80123dc:	9301      	str	r3, [sp, #4]
 80123de:	897b      	ldrh	r3, [r7, #10]
 80123e0:	9300      	str	r3, [sp, #0]
 80123e2:	460b      	mov	r3, r1
 80123e4:	6979      	ldr	r1, [r7, #20]
 80123e6:	f7ff fe7d 	bl	80120e4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80123ea:	687b      	ldr	r3, [r7, #4]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3718      	adds	r7, #24
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d106      	bne.n	8012414 <pbuf_realloc+0x20>
 8012406:	4b3a      	ldr	r3, [pc, #232]	; (80124f0 <pbuf_realloc+0xfc>)
 8012408:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801240c:	4939      	ldr	r1, [pc, #228]	; (80124f4 <pbuf_realloc+0x100>)
 801240e:	483a      	ldr	r0, [pc, #232]	; (80124f8 <pbuf_realloc+0x104>)
 8012410:	f00c fd08 	bl	801ee24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	891b      	ldrh	r3, [r3, #8]
 8012418:	887a      	ldrh	r2, [r7, #2]
 801241a:	429a      	cmp	r2, r3
 801241c:	d263      	bcs.n	80124e6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	891a      	ldrh	r2, [r3, #8]
 8012422:	887b      	ldrh	r3, [r7, #2]
 8012424:	1ad3      	subs	r3, r2, r3
 8012426:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012428:	887b      	ldrh	r3, [r7, #2]
 801242a:	817b      	strh	r3, [r7, #10]
  q = p;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012430:	e018      	b.n	8012464 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	895b      	ldrh	r3, [r3, #10]
 8012436:	897a      	ldrh	r2, [r7, #10]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	891a      	ldrh	r2, [r3, #8]
 8012440:	893b      	ldrh	r3, [r7, #8]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	b29a      	uxth	r2, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d106      	bne.n	8012464 <pbuf_realloc+0x70>
 8012456:	4b26      	ldr	r3, [pc, #152]	; (80124f0 <pbuf_realloc+0xfc>)
 8012458:	f240 12af 	movw	r2, #431	; 0x1af
 801245c:	4927      	ldr	r1, [pc, #156]	; (80124fc <pbuf_realloc+0x108>)
 801245e:	4826      	ldr	r0, [pc, #152]	; (80124f8 <pbuf_realloc+0x104>)
 8012460:	f00c fce0 	bl	801ee24 <iprintf>
  while (rem_len > q->len) {
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	895b      	ldrh	r3, [r3, #10]
 8012468:	897a      	ldrh	r2, [r7, #10]
 801246a:	429a      	cmp	r2, r3
 801246c:	d8e1      	bhi.n	8012432 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	7b1b      	ldrb	r3, [r3, #12]
 8012472:	f003 030f 	and.w	r3, r3, #15
 8012476:	2b00      	cmp	r3, #0
 8012478:	d121      	bne.n	80124be <pbuf_realloc+0xca>
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	895b      	ldrh	r3, [r3, #10]
 801247e:	897a      	ldrh	r2, [r7, #10]
 8012480:	429a      	cmp	r2, r3
 8012482:	d01c      	beq.n	80124be <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	7b5b      	ldrb	r3, [r3, #13]
 8012488:	f003 0302 	and.w	r3, r3, #2
 801248c:	2b00      	cmp	r3, #0
 801248e:	d116      	bne.n	80124be <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	685a      	ldr	r2, [r3, #4]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	1ad3      	subs	r3, r2, r3
 8012498:	b29a      	uxth	r2, r3
 801249a:	897b      	ldrh	r3, [r7, #10]
 801249c:	4413      	add	r3, r2
 801249e:	b29b      	uxth	r3, r3
 80124a0:	4619      	mov	r1, r3
 80124a2:	68f8      	ldr	r0, [r7, #12]
 80124a4:	f7fe ff20 	bl	80112e8 <mem_trim>
 80124a8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d106      	bne.n	80124be <pbuf_realloc+0xca>
 80124b0:	4b0f      	ldr	r3, [pc, #60]	; (80124f0 <pbuf_realloc+0xfc>)
 80124b2:	f240 12bd 	movw	r2, #445	; 0x1bd
 80124b6:	4912      	ldr	r1, [pc, #72]	; (8012500 <pbuf_realloc+0x10c>)
 80124b8:	480f      	ldr	r0, [pc, #60]	; (80124f8 <pbuf_realloc+0x104>)
 80124ba:	f00c fcb3 	bl	801ee24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	897a      	ldrh	r2, [r7, #10]
 80124c2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	895a      	ldrh	r2, [r3, #10]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d004      	beq.n	80124de <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 f911 	bl	8012700 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	2200      	movs	r2, #0
 80124e2:	601a      	str	r2, [r3, #0]
 80124e4:	e000      	b.n	80124e8 <pbuf_realloc+0xf4>
    return;
 80124e6:	bf00      	nop

}
 80124e8:	3710      	adds	r7, #16
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	08021d9c 	.word	0x08021d9c
 80124f4:	08021eb4 	.word	0x08021eb4
 80124f8:	08021dfc 	.word	0x08021dfc
 80124fc:	08021ecc 	.word	0x08021ecc
 8012500:	08021ee4 	.word	0x08021ee4

08012504 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b086      	sub	sp, #24
 8012508:	af00      	add	r7, sp, #0
 801250a:	60f8      	str	r0, [r7, #12]
 801250c:	60b9      	str	r1, [r7, #8]
 801250e:	4613      	mov	r3, r2
 8012510:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d106      	bne.n	8012526 <pbuf_add_header_impl+0x22>
 8012518:	4b2b      	ldr	r3, [pc, #172]	; (80125c8 <pbuf_add_header_impl+0xc4>)
 801251a:	f240 12df 	movw	r2, #479	; 0x1df
 801251e:	492b      	ldr	r1, [pc, #172]	; (80125cc <pbuf_add_header_impl+0xc8>)
 8012520:	482b      	ldr	r0, [pc, #172]	; (80125d0 <pbuf_add_header_impl+0xcc>)
 8012522:	f00c fc7f 	bl	801ee24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d003      	beq.n	8012534 <pbuf_add_header_impl+0x30>
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012532:	d301      	bcc.n	8012538 <pbuf_add_header_impl+0x34>
    return 1;
 8012534:	2301      	movs	r3, #1
 8012536:	e043      	b.n	80125c0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d101      	bne.n	8012542 <pbuf_add_header_impl+0x3e>
    return 0;
 801253e:	2300      	movs	r3, #0
 8012540:	e03e      	b.n	80125c0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	891a      	ldrh	r2, [r3, #8]
 801254a:	8a7b      	ldrh	r3, [r7, #18]
 801254c:	4413      	add	r3, r2
 801254e:	b29b      	uxth	r3, r3
 8012550:	8a7a      	ldrh	r2, [r7, #18]
 8012552:	429a      	cmp	r2, r3
 8012554:	d901      	bls.n	801255a <pbuf_add_header_impl+0x56>
    return 1;
 8012556:	2301      	movs	r3, #1
 8012558:	e032      	b.n	80125c0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	7b1b      	ldrb	r3, [r3, #12]
 801255e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012560:	8a3b      	ldrh	r3, [r7, #16]
 8012562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012566:	2b00      	cmp	r3, #0
 8012568:	d00c      	beq.n	8012584 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	685a      	ldr	r2, [r3, #4]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	425b      	negs	r3, r3
 8012572:	4413      	add	r3, r2
 8012574:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	3310      	adds	r3, #16
 801257a:	697a      	ldr	r2, [r7, #20]
 801257c:	429a      	cmp	r2, r3
 801257e:	d20d      	bcs.n	801259c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012580:	2301      	movs	r3, #1
 8012582:	e01d      	b.n	80125c0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012584:	79fb      	ldrb	r3, [r7, #7]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d006      	beq.n	8012598 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	685a      	ldr	r2, [r3, #4]
 801258e:	68bb      	ldr	r3, [r7, #8]
 8012590:	425b      	negs	r3, r3
 8012592:	4413      	add	r3, r2
 8012594:	617b      	str	r3, [r7, #20]
 8012596:	e001      	b.n	801259c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012598:	2301      	movs	r3, #1
 801259a:	e011      	b.n	80125c0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	697a      	ldr	r2, [r7, #20]
 80125a0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	895a      	ldrh	r2, [r3, #10]
 80125a6:	8a7b      	ldrh	r3, [r7, #18]
 80125a8:	4413      	add	r3, r2
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	891a      	ldrh	r2, [r3, #8]
 80125b4:	8a7b      	ldrh	r3, [r7, #18]
 80125b6:	4413      	add	r3, r2
 80125b8:	b29a      	uxth	r2, r3
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	811a      	strh	r2, [r3, #8]


  return 0;
 80125be:	2300      	movs	r3, #0
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3718      	adds	r7, #24
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	08021d9c 	.word	0x08021d9c
 80125cc:	08021f00 	.word	0x08021f00
 80125d0:	08021dfc 	.word	0x08021dfc

080125d4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80125de:	2200      	movs	r2, #0
 80125e0:	6839      	ldr	r1, [r7, #0]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ff8e 	bl	8012504 <pbuf_add_header_impl>
 80125e8:	4603      	mov	r3, r0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}
	...

080125f4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b084      	sub	sp, #16
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d106      	bne.n	8012612 <pbuf_remove_header+0x1e>
 8012604:	4b20      	ldr	r3, [pc, #128]	; (8012688 <pbuf_remove_header+0x94>)
 8012606:	f240 224b 	movw	r2, #587	; 0x24b
 801260a:	4920      	ldr	r1, [pc, #128]	; (801268c <pbuf_remove_header+0x98>)
 801260c:	4820      	ldr	r0, [pc, #128]	; (8012690 <pbuf_remove_header+0x9c>)
 801260e:	f00c fc09 	bl	801ee24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d003      	beq.n	8012620 <pbuf_remove_header+0x2c>
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801261e:	d301      	bcc.n	8012624 <pbuf_remove_header+0x30>
    return 1;
 8012620:	2301      	movs	r3, #1
 8012622:	e02c      	b.n	801267e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d101      	bne.n	801262e <pbuf_remove_header+0x3a>
    return 0;
 801262a:	2300      	movs	r3, #0
 801262c:	e027      	b.n	801267e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	895b      	ldrh	r3, [r3, #10]
 8012636:	89fa      	ldrh	r2, [r7, #14]
 8012638:	429a      	cmp	r2, r3
 801263a:	d908      	bls.n	801264e <pbuf_remove_header+0x5a>
 801263c:	4b12      	ldr	r3, [pc, #72]	; (8012688 <pbuf_remove_header+0x94>)
 801263e:	f240 2255 	movw	r2, #597	; 0x255
 8012642:	4914      	ldr	r1, [pc, #80]	; (8012694 <pbuf_remove_header+0xa0>)
 8012644:	4812      	ldr	r0, [pc, #72]	; (8012690 <pbuf_remove_header+0x9c>)
 8012646:	f00c fbed 	bl	801ee24 <iprintf>
 801264a:	2301      	movs	r3, #1
 801264c:	e017      	b.n	801267e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	685a      	ldr	r2, [r3, #4]
 8012658:	683b      	ldr	r3, [r7, #0]
 801265a:	441a      	add	r2, r3
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	895a      	ldrh	r2, [r3, #10]
 8012664:	89fb      	ldrh	r3, [r7, #14]
 8012666:	1ad3      	subs	r3, r2, r3
 8012668:	b29a      	uxth	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	891a      	ldrh	r2, [r3, #8]
 8012672:	89fb      	ldrh	r3, [r7, #14]
 8012674:	1ad3      	subs	r3, r2, r3
 8012676:	b29a      	uxth	r2, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801267c:	2300      	movs	r3, #0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3710      	adds	r7, #16
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	08021d9c 	.word	0x08021d9c
 801268c:	08021f00 	.word	0x08021f00
 8012690:	08021dfc 	.word	0x08021dfc
 8012694:	08021f0c 	.word	0x08021f0c

08012698 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
 80126a0:	460b      	mov	r3, r1
 80126a2:	807b      	strh	r3, [r7, #2]
 80126a4:	4613      	mov	r3, r2
 80126a6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80126a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	da08      	bge.n	80126c2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80126b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80126b4:	425b      	negs	r3, r3
 80126b6:	4619      	mov	r1, r3
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f7ff ff9b 	bl	80125f4 <pbuf_remove_header>
 80126be:	4603      	mov	r3, r0
 80126c0:	e007      	b.n	80126d2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80126c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80126c6:	787a      	ldrb	r2, [r7, #1]
 80126c8:	4619      	mov	r1, r3
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f7ff ff1a 	bl	8012504 <pbuf_add_header_impl>
 80126d0:	4603      	mov	r3, r0
  }
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	460b      	mov	r3, r1
 80126e4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80126e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80126ea:	2201      	movs	r2, #1
 80126ec:	4619      	mov	r1, r3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7ff ffd2 	bl	8012698 <pbuf_header_impl>
 80126f4:	4603      	mov	r3, r0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	3708      	adds	r7, #8
 80126fa:	46bd      	mov	sp, r7
 80126fc:	bd80      	pop	{r7, pc}
	...

08012700 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b088      	sub	sp, #32
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d10b      	bne.n	8012726 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d106      	bne.n	8012722 <pbuf_free+0x22>
 8012714:	4b3b      	ldr	r3, [pc, #236]	; (8012804 <pbuf_free+0x104>)
 8012716:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801271a:	493b      	ldr	r1, [pc, #236]	; (8012808 <pbuf_free+0x108>)
 801271c:	483b      	ldr	r0, [pc, #236]	; (801280c <pbuf_free+0x10c>)
 801271e:	f00c fb81 	bl	801ee24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012722:	2300      	movs	r3, #0
 8012724:	e069      	b.n	80127fa <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012726:	2300      	movs	r3, #0
 8012728:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801272a:	e062      	b.n	80127f2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801272c:	f00b fccc 	bl	801e0c8 <sys_arch_protect>
 8012730:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	7b9b      	ldrb	r3, [r3, #14]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d106      	bne.n	8012748 <pbuf_free+0x48>
 801273a:	4b32      	ldr	r3, [pc, #200]	; (8012804 <pbuf_free+0x104>)
 801273c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012740:	4933      	ldr	r1, [pc, #204]	; (8012810 <pbuf_free+0x110>)
 8012742:	4832      	ldr	r0, [pc, #200]	; (801280c <pbuf_free+0x10c>)
 8012744:	f00c fb6e 	bl	801ee24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	7b9b      	ldrb	r3, [r3, #14]
 801274c:	3b01      	subs	r3, #1
 801274e:	b2da      	uxtb	r2, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	739a      	strb	r2, [r3, #14]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7b9b      	ldrb	r3, [r3, #14]
 8012758:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801275a:	69b8      	ldr	r0, [r7, #24]
 801275c:	f00b fcc2 	bl	801e0e4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012760:	7dfb      	ldrb	r3, [r7, #23]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d143      	bne.n	80127ee <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	7b1b      	ldrb	r3, [r3, #12]
 8012770:	f003 030f 	and.w	r3, r3, #15
 8012774:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	7b5b      	ldrb	r3, [r3, #13]
 801277a:	f003 0302 	and.w	r3, r3, #2
 801277e:	2b00      	cmp	r3, #0
 8012780:	d011      	beq.n	80127a6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	691b      	ldr	r3, [r3, #16]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d106      	bne.n	801279c <pbuf_free+0x9c>
 801278e:	4b1d      	ldr	r3, [pc, #116]	; (8012804 <pbuf_free+0x104>)
 8012790:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012794:	491f      	ldr	r1, [pc, #124]	; (8012814 <pbuf_free+0x114>)
 8012796:	481d      	ldr	r0, [pc, #116]	; (801280c <pbuf_free+0x10c>)
 8012798:	f00c fb44 	bl	801ee24 <iprintf>
        pc->custom_free_function(p);
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	691b      	ldr	r3, [r3, #16]
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	4798      	blx	r3
 80127a4:	e01d      	b.n	80127e2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80127a6:	7bfb      	ldrb	r3, [r7, #15]
 80127a8:	2b02      	cmp	r3, #2
 80127aa:	d104      	bne.n	80127b6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	200c      	movs	r0, #12
 80127b0:	f7ff f8be 	bl	8011930 <memp_free>
 80127b4:	e015      	b.n	80127e2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80127b6:	7bfb      	ldrb	r3, [r7, #15]
 80127b8:	2b01      	cmp	r3, #1
 80127ba:	d104      	bne.n	80127c6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	200b      	movs	r0, #11
 80127c0:	f7ff f8b6 	bl	8011930 <memp_free>
 80127c4:	e00d      	b.n	80127e2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d103      	bne.n	80127d4 <pbuf_free+0xd4>
          mem_free(p);
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7fe fcfb 	bl	80111c8 <mem_free>
 80127d2:	e006      	b.n	80127e2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80127d4:	4b0b      	ldr	r3, [pc, #44]	; (8012804 <pbuf_free+0x104>)
 80127d6:	f240 320f 	movw	r2, #783	; 0x30f
 80127da:	490f      	ldr	r1, [pc, #60]	; (8012818 <pbuf_free+0x118>)
 80127dc:	480b      	ldr	r0, [pc, #44]	; (801280c <pbuf_free+0x10c>)
 80127de:	f00c fb21 	bl	801ee24 <iprintf>
        }
      }
      count++;
 80127e2:	7ffb      	ldrb	r3, [r7, #31]
 80127e4:	3301      	adds	r3, #1
 80127e6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	607b      	str	r3, [r7, #4]
 80127ec:	e001      	b.n	80127f2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80127ee:	2300      	movs	r3, #0
 80127f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d199      	bne.n	801272c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80127f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80127fa:	4618      	mov	r0, r3
 80127fc:	3720      	adds	r7, #32
 80127fe:	46bd      	mov	sp, r7
 8012800:	bd80      	pop	{r7, pc}
 8012802:	bf00      	nop
 8012804:	08021d9c 	.word	0x08021d9c
 8012808:	08021f00 	.word	0x08021f00
 801280c:	08021dfc 	.word	0x08021dfc
 8012810:	08021f2c 	.word	0x08021f2c
 8012814:	08021f44 	.word	0x08021f44
 8012818:	08021f68 	.word	0x08021f68

0801281c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8012828:	e005      	b.n	8012836 <pbuf_clen+0x1a>
    ++len;
 801282a:	89fb      	ldrh	r3, [r7, #14]
 801282c:	3301      	adds	r3, #1
 801282e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d1f6      	bne.n	801282a <pbuf_clen+0xe>
  }
  return len;
 801283c:	89fb      	ldrh	r3, [r7, #14]
}
 801283e:	4618      	mov	r0, r3
 8012840:	3714      	adds	r7, #20
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr
	...

0801284c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d016      	beq.n	8012888 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801285a:	f00b fc35 	bl	801e0c8 <sys_arch_protect>
 801285e:	60f8      	str	r0, [r7, #12]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	7b9b      	ldrb	r3, [r3, #14]
 8012864:	3301      	adds	r3, #1
 8012866:	b2da      	uxtb	r2, r3
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	739a      	strb	r2, [r3, #14]
 801286c:	68f8      	ldr	r0, [r7, #12]
 801286e:	f00b fc39 	bl	801e0e4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	7b9b      	ldrb	r3, [r3, #14]
 8012876:	2b00      	cmp	r3, #0
 8012878:	d106      	bne.n	8012888 <pbuf_ref+0x3c>
 801287a:	4b05      	ldr	r3, [pc, #20]	; (8012890 <pbuf_ref+0x44>)
 801287c:	f240 3242 	movw	r2, #834	; 0x342
 8012880:	4904      	ldr	r1, [pc, #16]	; (8012894 <pbuf_ref+0x48>)
 8012882:	4805      	ldr	r0, [pc, #20]	; (8012898 <pbuf_ref+0x4c>)
 8012884:	f00c face 	bl	801ee24 <iprintf>
  }
}
 8012888:	bf00      	nop
 801288a:	3710      	adds	r7, #16
 801288c:	46bd      	mov	sp, r7
 801288e:	bd80      	pop	{r7, pc}
 8012890:	08021d9c 	.word	0x08021d9c
 8012894:	08021f7c 	.word	0x08021f7c
 8012898:	08021dfc 	.word	0x08021dfc

0801289c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b084      	sub	sp, #16
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d002      	beq.n	80128b2 <pbuf_cat+0x16>
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d107      	bne.n	80128c2 <pbuf_cat+0x26>
 80128b2:	4b20      	ldr	r3, [pc, #128]	; (8012934 <pbuf_cat+0x98>)
 80128b4:	f240 3259 	movw	r2, #857	; 0x359
 80128b8:	491f      	ldr	r1, [pc, #124]	; (8012938 <pbuf_cat+0x9c>)
 80128ba:	4820      	ldr	r0, [pc, #128]	; (801293c <pbuf_cat+0xa0>)
 80128bc:	f00c fab2 	bl	801ee24 <iprintf>
 80128c0:	e034      	b.n	801292c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	60fb      	str	r3, [r7, #12]
 80128c6:	e00a      	b.n	80128de <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	891a      	ldrh	r2, [r3, #8]
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	891b      	ldrh	r3, [r3, #8]
 80128d0:	4413      	add	r3, r2
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	60fb      	str	r3, [r7, #12]
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1f0      	bne.n	80128c8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	891a      	ldrh	r2, [r3, #8]
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	895b      	ldrh	r3, [r3, #10]
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d006      	beq.n	8012900 <pbuf_cat+0x64>
 80128f2:	4b10      	ldr	r3, [pc, #64]	; (8012934 <pbuf_cat+0x98>)
 80128f4:	f240 3262 	movw	r2, #866	; 0x362
 80128f8:	4911      	ldr	r1, [pc, #68]	; (8012940 <pbuf_cat+0xa4>)
 80128fa:	4810      	ldr	r0, [pc, #64]	; (801293c <pbuf_cat+0xa0>)
 80128fc:	f00c fa92 	bl	801ee24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d006      	beq.n	8012916 <pbuf_cat+0x7a>
 8012908:	4b0a      	ldr	r3, [pc, #40]	; (8012934 <pbuf_cat+0x98>)
 801290a:	f240 3263 	movw	r2, #867	; 0x363
 801290e:	490d      	ldr	r1, [pc, #52]	; (8012944 <pbuf_cat+0xa8>)
 8012910:	480a      	ldr	r0, [pc, #40]	; (801293c <pbuf_cat+0xa0>)
 8012912:	f00c fa87 	bl	801ee24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	891a      	ldrh	r2, [r3, #8]
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	891b      	ldrh	r3, [r3, #8]
 801291e:	4413      	add	r3, r2
 8012920:	b29a      	uxth	r2, r3
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	683a      	ldr	r2, [r7, #0]
 801292a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801292c:	3710      	adds	r7, #16
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}
 8012932:	bf00      	nop
 8012934:	08021d9c 	.word	0x08021d9c
 8012938:	08021f90 	.word	0x08021f90
 801293c:	08021dfc 	.word	0x08021dfc
 8012940:	08021fc8 	.word	0x08021fc8
 8012944:	08021ff8 	.word	0x08021ff8

08012948 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b082      	sub	sp, #8
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8012952:	6839      	ldr	r1, [r7, #0]
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7ff ffa1 	bl	801289c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801295a:	6838      	ldr	r0, [r7, #0]
 801295c:	f7ff ff76 	bl	801284c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012960:	bf00      	nop
 8012962:	3708      	adds	r7, #8
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012972:	2300      	movs	r3, #0
 8012974:	617b      	str	r3, [r7, #20]
 8012976:	2300      	movs	r3, #0
 8012978:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d008      	beq.n	8012992 <pbuf_copy+0x2a>
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d005      	beq.n	8012992 <pbuf_copy+0x2a>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	891a      	ldrh	r2, [r3, #8]
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	891b      	ldrh	r3, [r3, #8]
 801298e:	429a      	cmp	r2, r3
 8012990:	d209      	bcs.n	80129a6 <pbuf_copy+0x3e>
 8012992:	4b57      	ldr	r3, [pc, #348]	; (8012af0 <pbuf_copy+0x188>)
 8012994:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012998:	4956      	ldr	r1, [pc, #344]	; (8012af4 <pbuf_copy+0x18c>)
 801299a:	4857      	ldr	r0, [pc, #348]	; (8012af8 <pbuf_copy+0x190>)
 801299c:	f00c fa42 	bl	801ee24 <iprintf>
 80129a0:	f06f 030f 	mvn.w	r3, #15
 80129a4:	e09f      	b.n	8012ae6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	895b      	ldrh	r3, [r3, #10]
 80129aa:	461a      	mov	r2, r3
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	1ad2      	subs	r2, r2, r3
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	895b      	ldrh	r3, [r3, #10]
 80129b4:	4619      	mov	r1, r3
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	1acb      	subs	r3, r1, r3
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d306      	bcc.n	80129cc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	895b      	ldrh	r3, [r3, #10]
 80129c2:	461a      	mov	r2, r3
 80129c4:	693b      	ldr	r3, [r7, #16]
 80129c6:	1ad3      	subs	r3, r2, r3
 80129c8:	60fb      	str	r3, [r7, #12]
 80129ca:	e005      	b.n	80129d8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	895b      	ldrh	r3, [r3, #10]
 80129d0:	461a      	mov	r2, r3
 80129d2:	697b      	ldr	r3, [r7, #20]
 80129d4:	1ad3      	subs	r3, r2, r3
 80129d6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	685a      	ldr	r2, [r3, #4]
 80129dc:	697b      	ldr	r3, [r7, #20]
 80129de:	18d0      	adds	r0, r2, r3
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	685a      	ldr	r2, [r3, #4]
 80129e4:	693b      	ldr	r3, [r7, #16]
 80129e6:	4413      	add	r3, r2
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	4619      	mov	r1, r3
 80129ec:	f00c fc7f 	bl	801f2ee <memcpy>
    offset_to += len;
 80129f0:	697a      	ldr	r2, [r7, #20]
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	4413      	add	r3, r2
 80129f6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80129f8:	693a      	ldr	r2, [r7, #16]
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	4413      	add	r3, r2
 80129fe:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	895b      	ldrh	r3, [r3, #10]
 8012a04:	461a      	mov	r2, r3
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	4293      	cmp	r3, r2
 8012a0a:	d906      	bls.n	8012a1a <pbuf_copy+0xb2>
 8012a0c:	4b38      	ldr	r3, [pc, #224]	; (8012af0 <pbuf_copy+0x188>)
 8012a0e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012a12:	493a      	ldr	r1, [pc, #232]	; (8012afc <pbuf_copy+0x194>)
 8012a14:	4838      	ldr	r0, [pc, #224]	; (8012af8 <pbuf_copy+0x190>)
 8012a16:	f00c fa05 	bl	801ee24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8012a1a:	683b      	ldr	r3, [r7, #0]
 8012a1c:	895b      	ldrh	r3, [r3, #10]
 8012a1e:	461a      	mov	r2, r3
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d906      	bls.n	8012a34 <pbuf_copy+0xcc>
 8012a26:	4b32      	ldr	r3, [pc, #200]	; (8012af0 <pbuf_copy+0x188>)
 8012a28:	f240 32da 	movw	r2, #986	; 0x3da
 8012a2c:	4934      	ldr	r1, [pc, #208]	; (8012b00 <pbuf_copy+0x198>)
 8012a2e:	4832      	ldr	r0, [pc, #200]	; (8012af8 <pbuf_copy+0x190>)
 8012a30:	f00c f9f8 	bl	801ee24 <iprintf>
    if (offset_from >= p_from->len) {
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	895b      	ldrh	r3, [r3, #10]
 8012a38:	461a      	mov	r2, r3
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d304      	bcc.n	8012a4a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8012a40:	2300      	movs	r3, #0
 8012a42:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	895b      	ldrh	r3, [r3, #10]
 8012a4e:	461a      	mov	r2, r3
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d114      	bne.n	8012a80 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8012a56:	2300      	movs	r3, #0
 8012a58:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10c      	bne.n	8012a80 <pbuf_copy+0x118>
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d009      	beq.n	8012a80 <pbuf_copy+0x118>
 8012a6c:	4b20      	ldr	r3, [pc, #128]	; (8012af0 <pbuf_copy+0x188>)
 8012a6e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8012a72:	4924      	ldr	r1, [pc, #144]	; (8012b04 <pbuf_copy+0x19c>)
 8012a74:	4820      	ldr	r0, [pc, #128]	; (8012af8 <pbuf_copy+0x190>)
 8012a76:	f00c f9d5 	bl	801ee24 <iprintf>
 8012a7a:	f06f 030f 	mvn.w	r3, #15
 8012a7e:	e032      	b.n	8012ae6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d013      	beq.n	8012aae <pbuf_copy+0x146>
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	895a      	ldrh	r2, [r3, #10]
 8012a8a:	683b      	ldr	r3, [r7, #0]
 8012a8c:	891b      	ldrh	r3, [r3, #8]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d10d      	bne.n	8012aae <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012a92:	683b      	ldr	r3, [r7, #0]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d009      	beq.n	8012aae <pbuf_copy+0x146>
 8012a9a:	4b15      	ldr	r3, [pc, #84]	; (8012af0 <pbuf_copy+0x188>)
 8012a9c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012aa0:	4919      	ldr	r1, [pc, #100]	; (8012b08 <pbuf_copy+0x1a0>)
 8012aa2:	4815      	ldr	r0, [pc, #84]	; (8012af8 <pbuf_copy+0x190>)
 8012aa4:	f00c f9be 	bl	801ee24 <iprintf>
 8012aa8:	f06f 0305 	mvn.w	r3, #5
 8012aac:	e01b      	b.n	8012ae6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d013      	beq.n	8012adc <pbuf_copy+0x174>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	895a      	ldrh	r2, [r3, #10]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	891b      	ldrh	r3, [r3, #8]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d10d      	bne.n	8012adc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d009      	beq.n	8012adc <pbuf_copy+0x174>
 8012ac8:	4b09      	ldr	r3, [pc, #36]	; (8012af0 <pbuf_copy+0x188>)
 8012aca:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012ace:	490e      	ldr	r1, [pc, #56]	; (8012b08 <pbuf_copy+0x1a0>)
 8012ad0:	4809      	ldr	r0, [pc, #36]	; (8012af8 <pbuf_copy+0x190>)
 8012ad2:	f00c f9a7 	bl	801ee24 <iprintf>
 8012ad6:	f06f 0305 	mvn.w	r3, #5
 8012ada:	e004      	b.n	8012ae6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012adc:	683b      	ldr	r3, [r7, #0]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f47f af61 	bne.w	80129a6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3718      	adds	r7, #24
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
 8012aee:	bf00      	nop
 8012af0:	08021d9c 	.word	0x08021d9c
 8012af4:	08022044 	.word	0x08022044
 8012af8:	08021dfc 	.word	0x08021dfc
 8012afc:	08022074 	.word	0x08022074
 8012b00:	0802208c 	.word	0x0802208c
 8012b04:	080220a8 	.word	0x080220a8
 8012b08:	080220b8 	.word	0x080220b8

08012b0c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b088      	sub	sp, #32
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	60f8      	str	r0, [r7, #12]
 8012b14:	60b9      	str	r1, [r7, #8]
 8012b16:	4611      	mov	r1, r2
 8012b18:	461a      	mov	r2, r3
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	80fb      	strh	r3, [r7, #6]
 8012b1e:	4613      	mov	r3, r2
 8012b20:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012b22:	2300      	movs	r3, #0
 8012b24:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012b26:	2300      	movs	r3, #0
 8012b28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d108      	bne.n	8012b42 <pbuf_copy_partial+0x36>
 8012b30:	4b2b      	ldr	r3, [pc, #172]	; (8012be0 <pbuf_copy_partial+0xd4>)
 8012b32:	f240 420a 	movw	r2, #1034	; 0x40a
 8012b36:	492b      	ldr	r1, [pc, #172]	; (8012be4 <pbuf_copy_partial+0xd8>)
 8012b38:	482b      	ldr	r0, [pc, #172]	; (8012be8 <pbuf_copy_partial+0xdc>)
 8012b3a:	f00c f973 	bl	801ee24 <iprintf>
 8012b3e:	2300      	movs	r3, #0
 8012b40:	e04a      	b.n	8012bd8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d108      	bne.n	8012b5a <pbuf_copy_partial+0x4e>
 8012b48:	4b25      	ldr	r3, [pc, #148]	; (8012be0 <pbuf_copy_partial+0xd4>)
 8012b4a:	f240 420b 	movw	r2, #1035	; 0x40b
 8012b4e:	4927      	ldr	r1, [pc, #156]	; (8012bec <pbuf_copy_partial+0xe0>)
 8012b50:	4825      	ldr	r0, [pc, #148]	; (8012be8 <pbuf_copy_partial+0xdc>)
 8012b52:	f00c f967 	bl	801ee24 <iprintf>
 8012b56:	2300      	movs	r3, #0
 8012b58:	e03e      	b.n	8012bd8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	61fb      	str	r3, [r7, #28]
 8012b5e:	e034      	b.n	8012bca <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012b60:	88bb      	ldrh	r3, [r7, #4]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00a      	beq.n	8012b7c <pbuf_copy_partial+0x70>
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	895b      	ldrh	r3, [r3, #10]
 8012b6a:	88ba      	ldrh	r2, [r7, #4]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d305      	bcc.n	8012b7c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	895b      	ldrh	r3, [r3, #10]
 8012b74:	88ba      	ldrh	r2, [r7, #4]
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	80bb      	strh	r3, [r7, #4]
 8012b7a:	e023      	b.n	8012bc4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	895a      	ldrh	r2, [r3, #10]
 8012b80:	88bb      	ldrh	r3, [r7, #4]
 8012b82:	1ad3      	subs	r3, r2, r3
 8012b84:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012b86:	8b3a      	ldrh	r2, [r7, #24]
 8012b88:	88fb      	ldrh	r3, [r7, #6]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d901      	bls.n	8012b92 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012b8e:	88fb      	ldrh	r3, [r7, #6]
 8012b90:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012b92:	8b7b      	ldrh	r3, [r7, #26]
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	18d0      	adds	r0, r2, r3
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	685a      	ldr	r2, [r3, #4]
 8012b9c:	88bb      	ldrh	r3, [r7, #4]
 8012b9e:	4413      	add	r3, r2
 8012ba0:	8b3a      	ldrh	r2, [r7, #24]
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	f00c fba3 	bl	801f2ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012ba8:	8afa      	ldrh	r2, [r7, #22]
 8012baa:	8b3b      	ldrh	r3, [r7, #24]
 8012bac:	4413      	add	r3, r2
 8012bae:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012bb0:	8b7a      	ldrh	r2, [r7, #26]
 8012bb2:	8b3b      	ldrh	r3, [r7, #24]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012bb8:	88fa      	ldrh	r2, [r7, #6]
 8012bba:	8b3b      	ldrh	r3, [r7, #24]
 8012bbc:	1ad3      	subs	r3, r2, r3
 8012bbe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012bc4:	69fb      	ldr	r3, [r7, #28]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	61fb      	str	r3, [r7, #28]
 8012bca:	88fb      	ldrh	r3, [r7, #6]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d002      	beq.n	8012bd6 <pbuf_copy_partial+0xca>
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1c4      	bne.n	8012b60 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012bd6:	8afb      	ldrh	r3, [r7, #22]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3720      	adds	r7, #32
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	08021d9c 	.word	0x08021d9c
 8012be4:	080220e4 	.word	0x080220e4
 8012be8:	08021dfc 	.word	0x08021dfc
 8012bec:	08022104 	.word	0x08022104

08012bf0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b084      	sub	sp, #16
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	603a      	str	r2, [r7, #0]
 8012bfa:	71fb      	strb	r3, [r7, #7]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	8919      	ldrh	r1, [r3, #8]
 8012c04:	88ba      	ldrh	r2, [r7, #4]
 8012c06:	79fb      	ldrb	r3, [r7, #7]
 8012c08:	4618      	mov	r0, r3
 8012c0a:	f7ff fa95 	bl	8012138 <pbuf_alloc>
 8012c0e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d101      	bne.n	8012c1a <pbuf_clone+0x2a>
    return NULL;
 8012c16:	2300      	movs	r3, #0
 8012c18:	e011      	b.n	8012c3e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012c1a:	6839      	ldr	r1, [r7, #0]
 8012c1c:	68f8      	ldr	r0, [r7, #12]
 8012c1e:	f7ff fea3 	bl	8012968 <pbuf_copy>
 8012c22:	4603      	mov	r3, r0
 8012c24:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012c26:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d006      	beq.n	8012c3c <pbuf_clone+0x4c>
 8012c2e:	4b06      	ldr	r3, [pc, #24]	; (8012c48 <pbuf_clone+0x58>)
 8012c30:	f240 5224 	movw	r2, #1316	; 0x524
 8012c34:	4905      	ldr	r1, [pc, #20]	; (8012c4c <pbuf_clone+0x5c>)
 8012c36:	4806      	ldr	r0, [pc, #24]	; (8012c50 <pbuf_clone+0x60>)
 8012c38:	f00c f8f4 	bl	801ee24 <iprintf>
  return q;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	08021d9c 	.word	0x08021d9c
 8012c4c:	08022210 	.word	0x08022210
 8012c50:	08021dfc 	.word	0x08021dfc

08012c54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012c58:	f00b ff46 	bl	801eae8 <rand>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012c6a:	b29a      	uxth	r2, r3
 8012c6c:	4b01      	ldr	r3, [pc, #4]	; (8012c74 <tcp_init+0x20>)
 8012c6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012c70:	bf00      	nop
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	20000024 	.word	0x20000024

08012c78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	7d1b      	ldrb	r3, [r3, #20]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d105      	bne.n	8012c94 <tcp_free+0x1c>
 8012c88:	4b06      	ldr	r3, [pc, #24]	; (8012ca4 <tcp_free+0x2c>)
 8012c8a:	22d4      	movs	r2, #212	; 0xd4
 8012c8c:	4906      	ldr	r1, [pc, #24]	; (8012ca8 <tcp_free+0x30>)
 8012c8e:	4807      	ldr	r0, [pc, #28]	; (8012cac <tcp_free+0x34>)
 8012c90:	f00c f8c8 	bl	801ee24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012c94:	6879      	ldr	r1, [r7, #4]
 8012c96:	2001      	movs	r0, #1
 8012c98:	f7fe fe4a 	bl	8011930 <memp_free>
}
 8012c9c:	bf00      	nop
 8012c9e:	3708      	adds	r7, #8
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	0802229c 	.word	0x0802229c
 8012ca8:	080222cc 	.word	0x080222cc
 8012cac:	080222e0 	.word	0x080222e0

08012cb0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b082      	sub	sp, #8
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	7d1b      	ldrb	r3, [r3, #20]
 8012cbc:	2b01      	cmp	r3, #1
 8012cbe:	d105      	bne.n	8012ccc <tcp_free_listen+0x1c>
 8012cc0:	4b06      	ldr	r3, [pc, #24]	; (8012cdc <tcp_free_listen+0x2c>)
 8012cc2:	22df      	movs	r2, #223	; 0xdf
 8012cc4:	4906      	ldr	r1, [pc, #24]	; (8012ce0 <tcp_free_listen+0x30>)
 8012cc6:	4807      	ldr	r0, [pc, #28]	; (8012ce4 <tcp_free_listen+0x34>)
 8012cc8:	f00c f8ac 	bl	801ee24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012ccc:	6879      	ldr	r1, [r7, #4]
 8012cce:	2002      	movs	r0, #2
 8012cd0:	f7fe fe2e 	bl	8011930 <memp_free>
}
 8012cd4:	bf00      	nop
 8012cd6:	3708      	adds	r7, #8
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	0802229c 	.word	0x0802229c
 8012ce0:	08022308 	.word	0x08022308
 8012ce4:	080222e0 	.word	0x080222e0

08012ce8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012cec:	f001 f8c0 	bl	8013e70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012cf0:	4b07      	ldr	r3, [pc, #28]	; (8012d10 <tcp_tmr+0x28>)
 8012cf2:	781b      	ldrb	r3, [r3, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	4b05      	ldr	r3, [pc, #20]	; (8012d10 <tcp_tmr+0x28>)
 8012cfa:	701a      	strb	r2, [r3, #0]
 8012cfc:	4b04      	ldr	r3, [pc, #16]	; (8012d10 <tcp_tmr+0x28>)
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	f003 0301 	and.w	r3, r3, #1
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d001      	beq.n	8012d0c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012d08:	f000 fd72 	bl	80137f0 <tcp_slowtmr>
  }
}
 8012d0c:	bf00      	nop
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	2000c8ad 	.word	0x2000c8ad

08012d14 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b084      	sub	sp, #16
 8012d18:	af00      	add	r7, sp, #0
 8012d1a:	6078      	str	r0, [r7, #4]
 8012d1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d105      	bne.n	8012d30 <tcp_remove_listener+0x1c>
 8012d24:	4b0d      	ldr	r3, [pc, #52]	; (8012d5c <tcp_remove_listener+0x48>)
 8012d26:	22ff      	movs	r2, #255	; 0xff
 8012d28:	490d      	ldr	r1, [pc, #52]	; (8012d60 <tcp_remove_listener+0x4c>)
 8012d2a:	480e      	ldr	r0, [pc, #56]	; (8012d64 <tcp_remove_listener+0x50>)
 8012d2c:	f00c f87a 	bl	801ee24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	e00a      	b.n	8012d4c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d3a:	683a      	ldr	r2, [r7, #0]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d102      	bne.n	8012d46 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	2200      	movs	r2, #0
 8012d44:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	60fb      	str	r3, [r7, #12]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d1f1      	bne.n	8012d36 <tcp_remove_listener+0x22>
    }
  }
}
 8012d52:	bf00      	nop
 8012d54:	bf00      	nop
 8012d56:	3710      	adds	r7, #16
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	0802229c 	.word	0x0802229c
 8012d60:	08022324 	.word	0x08022324
 8012d64:	080222e0 	.word	0x080222e0

08012d68 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b084      	sub	sp, #16
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d106      	bne.n	8012d84 <tcp_listen_closed+0x1c>
 8012d76:	4b14      	ldr	r3, [pc, #80]	; (8012dc8 <tcp_listen_closed+0x60>)
 8012d78:	f240 1211 	movw	r2, #273	; 0x111
 8012d7c:	4913      	ldr	r1, [pc, #76]	; (8012dcc <tcp_listen_closed+0x64>)
 8012d7e:	4814      	ldr	r0, [pc, #80]	; (8012dd0 <tcp_listen_closed+0x68>)
 8012d80:	f00c f850 	bl	801ee24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	7d1b      	ldrb	r3, [r3, #20]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d006      	beq.n	8012d9a <tcp_listen_closed+0x32>
 8012d8c:	4b0e      	ldr	r3, [pc, #56]	; (8012dc8 <tcp_listen_closed+0x60>)
 8012d8e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012d92:	4910      	ldr	r1, [pc, #64]	; (8012dd4 <tcp_listen_closed+0x6c>)
 8012d94:	480e      	ldr	r0, [pc, #56]	; (8012dd0 <tcp_listen_closed+0x68>)
 8012d96:	f00c f845 	bl	801ee24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	60fb      	str	r3, [r7, #12]
 8012d9e:	e00b      	b.n	8012db8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012da0:	4a0d      	ldr	r2, [pc, #52]	; (8012dd8 <tcp_listen_closed+0x70>)
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	6879      	ldr	r1, [r7, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7ff ffb1 	bl	8012d14 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	3301      	adds	r3, #1
 8012db6:	60fb      	str	r3, [r7, #12]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	2b03      	cmp	r3, #3
 8012dbc:	d9f0      	bls.n	8012da0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012dbe:	bf00      	nop
 8012dc0:	bf00      	nop
 8012dc2:	3710      	adds	r7, #16
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	0802229c 	.word	0x0802229c
 8012dcc:	0802234c 	.word	0x0802234c
 8012dd0:	080222e0 	.word	0x080222e0
 8012dd4:	08022358 	.word	0x08022358
 8012dd8:	0802474c 	.word	0x0802474c

08012ddc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012ddc:	b5b0      	push	{r4, r5, r7, lr}
 8012dde:	b088      	sub	sp, #32
 8012de0:	af04      	add	r7, sp, #16
 8012de2:	6078      	str	r0, [r7, #4]
 8012de4:	460b      	mov	r3, r1
 8012de6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d106      	bne.n	8012dfc <tcp_close_shutdown+0x20>
 8012dee:	4b63      	ldr	r3, [pc, #396]	; (8012f7c <tcp_close_shutdown+0x1a0>)
 8012df0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012df4:	4962      	ldr	r1, [pc, #392]	; (8012f80 <tcp_close_shutdown+0x1a4>)
 8012df6:	4863      	ldr	r0, [pc, #396]	; (8012f84 <tcp_close_shutdown+0x1a8>)
 8012df8:	f00c f814 	bl	801ee24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012dfc:	78fb      	ldrb	r3, [r7, #3]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d066      	beq.n	8012ed0 <tcp_close_shutdown+0xf4>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	7d1b      	ldrb	r3, [r3, #20]
 8012e06:	2b04      	cmp	r3, #4
 8012e08:	d003      	beq.n	8012e12 <tcp_close_shutdown+0x36>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	7d1b      	ldrb	r3, [r3, #20]
 8012e0e:	2b07      	cmp	r3, #7
 8012e10:	d15e      	bne.n	8012ed0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d104      	bne.n	8012e24 <tcp_close_shutdown+0x48>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012e22:	d055      	beq.n	8012ed0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	8b5b      	ldrh	r3, [r3, #26]
 8012e28:	f003 0310 	and.w	r3, r3, #16
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d106      	bne.n	8012e3e <tcp_close_shutdown+0x62>
 8012e30:	4b52      	ldr	r3, [pc, #328]	; (8012f7c <tcp_close_shutdown+0x1a0>)
 8012e32:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8012e36:	4954      	ldr	r1, [pc, #336]	; (8012f88 <tcp_close_shutdown+0x1ac>)
 8012e38:	4852      	ldr	r0, [pc, #328]	; (8012f84 <tcp_close_shutdown+0x1a8>)
 8012e3a:	f00b fff3 	bl	801ee24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012e46:	687d      	ldr	r5, [r7, #4]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	8ad2      	ldrh	r2, [r2, #22]
 8012e50:	6879      	ldr	r1, [r7, #4]
 8012e52:	8b09      	ldrh	r1, [r1, #24]
 8012e54:	9102      	str	r1, [sp, #8]
 8012e56:	9201      	str	r2, [sp, #4]
 8012e58:	9300      	str	r3, [sp, #0]
 8012e5a:	462b      	mov	r3, r5
 8012e5c:	4622      	mov	r2, r4
 8012e5e:	4601      	mov	r1, r0
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f005 fdd5 	bl	8018a10 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f001 fbb2 	bl	80145d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8012e6c:	4b47      	ldr	r3, [pc, #284]	; (8012f8c <tcp_close_shutdown+0x1b0>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	687a      	ldr	r2, [r7, #4]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d105      	bne.n	8012e82 <tcp_close_shutdown+0xa6>
 8012e76:	4b45      	ldr	r3, [pc, #276]	; (8012f8c <tcp_close_shutdown+0x1b0>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	4a43      	ldr	r2, [pc, #268]	; (8012f8c <tcp_close_shutdown+0x1b0>)
 8012e7e:	6013      	str	r3, [r2, #0]
 8012e80:	e013      	b.n	8012eaa <tcp_close_shutdown+0xce>
 8012e82:	4b42      	ldr	r3, [pc, #264]	; (8012f8c <tcp_close_shutdown+0x1b0>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	60fb      	str	r3, [r7, #12]
 8012e88:	e00c      	b.n	8012ea4 <tcp_close_shutdown+0xc8>
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	68db      	ldr	r3, [r3, #12]
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d104      	bne.n	8012e9e <tcp_close_shutdown+0xc2>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	68da      	ldr	r2, [r3, #12]
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	60da      	str	r2, [r3, #12]
 8012e9c:	e005      	b.n	8012eaa <tcp_close_shutdown+0xce>
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	68db      	ldr	r3, [r3, #12]
 8012ea2:	60fb      	str	r3, [r7, #12]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d1ef      	bne.n	8012e8a <tcp_close_shutdown+0xae>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	60da      	str	r2, [r3, #12]
 8012eb0:	4b37      	ldr	r3, [pc, #220]	; (8012f90 <tcp_close_shutdown+0x1b4>)
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012eb6:	4b37      	ldr	r3, [pc, #220]	; (8012f94 <tcp_close_shutdown+0x1b8>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d102      	bne.n	8012ec6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012ec0:	f004 f84a 	bl	8016f58 <tcp_trigger_input_pcb_close>
 8012ec4:	e002      	b.n	8012ecc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7ff fed6 	bl	8012c78 <tcp_free>
      }
      return ERR_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e050      	b.n	8012f72 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	7d1b      	ldrb	r3, [r3, #20]
 8012ed4:	2b02      	cmp	r3, #2
 8012ed6:	d03b      	beq.n	8012f50 <tcp_close_shutdown+0x174>
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	dc44      	bgt.n	8012f66 <tcp_close_shutdown+0x18a>
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d002      	beq.n	8012ee6 <tcp_close_shutdown+0x10a>
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d02a      	beq.n	8012f3a <tcp_close_shutdown+0x15e>
 8012ee4:	e03f      	b.n	8012f66 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	8adb      	ldrh	r3, [r3, #22]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d021      	beq.n	8012f32 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012eee:	4b2a      	ldr	r3, [pc, #168]	; (8012f98 <tcp_close_shutdown+0x1bc>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	687a      	ldr	r2, [r7, #4]
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	d105      	bne.n	8012f04 <tcp_close_shutdown+0x128>
 8012ef8:	4b27      	ldr	r3, [pc, #156]	; (8012f98 <tcp_close_shutdown+0x1bc>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	68db      	ldr	r3, [r3, #12]
 8012efe:	4a26      	ldr	r2, [pc, #152]	; (8012f98 <tcp_close_shutdown+0x1bc>)
 8012f00:	6013      	str	r3, [r2, #0]
 8012f02:	e013      	b.n	8012f2c <tcp_close_shutdown+0x150>
 8012f04:	4b24      	ldr	r3, [pc, #144]	; (8012f98 <tcp_close_shutdown+0x1bc>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	60bb      	str	r3, [r7, #8]
 8012f0a:	e00c      	b.n	8012f26 <tcp_close_shutdown+0x14a>
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	68db      	ldr	r3, [r3, #12]
 8012f10:	687a      	ldr	r2, [r7, #4]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d104      	bne.n	8012f20 <tcp_close_shutdown+0x144>
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	68da      	ldr	r2, [r3, #12]
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	60da      	str	r2, [r3, #12]
 8012f1e:	e005      	b.n	8012f2c <tcp_close_shutdown+0x150>
 8012f20:	68bb      	ldr	r3, [r7, #8]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	60bb      	str	r3, [r7, #8]
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d1ef      	bne.n	8012f0c <tcp_close_shutdown+0x130>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f7ff fea0 	bl	8012c78 <tcp_free>
      break;
 8012f38:	e01a      	b.n	8012f70 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8012f3a:	6878      	ldr	r0, [r7, #4]
 8012f3c:	f7ff ff14 	bl	8012d68 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012f40:	6879      	ldr	r1, [r7, #4]
 8012f42:	4816      	ldr	r0, [pc, #88]	; (8012f9c <tcp_close_shutdown+0x1c0>)
 8012f44:	f001 fb94 	bl	8014670 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7ff feb1 	bl	8012cb0 <tcp_free_listen>
      break;
 8012f4e:	e00f      	b.n	8012f70 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012f50:	6879      	ldr	r1, [r7, #4]
 8012f52:	480e      	ldr	r0, [pc, #56]	; (8012f8c <tcp_close_shutdown+0x1b0>)
 8012f54:	f001 fb8c 	bl	8014670 <tcp_pcb_remove>
 8012f58:	4b0d      	ldr	r3, [pc, #52]	; (8012f90 <tcp_close_shutdown+0x1b4>)
 8012f5a:	2201      	movs	r2, #1
 8012f5c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8012f5e:	6878      	ldr	r0, [r7, #4]
 8012f60:	f7ff fe8a 	bl	8012c78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8012f64:	e004      	b.n	8012f70 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8012f66:	6878      	ldr	r0, [r7, #4]
 8012f68:	f000 f81a 	bl	8012fa0 <tcp_close_shutdown_fin>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	e000      	b.n	8012f72 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3710      	adds	r7, #16
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bdb0      	pop	{r4, r5, r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	0802229c 	.word	0x0802229c
 8012f80:	08022370 	.word	0x08022370
 8012f84:	080222e0 	.word	0x080222e0
 8012f88:	08022390 	.word	0x08022390
 8012f8c:	2000c8a4 	.word	0x2000c8a4
 8012f90:	2000c8ac 	.word	0x2000c8ac
 8012f94:	2000c8e4 	.word	0x2000c8e4
 8012f98:	2000c89c 	.word	0x2000c89c
 8012f9c:	2000c8a0 	.word	0x2000c8a0

08012fa0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d106      	bne.n	8012fbc <tcp_close_shutdown_fin+0x1c>
 8012fae:	4b2e      	ldr	r3, [pc, #184]	; (8013068 <tcp_close_shutdown_fin+0xc8>)
 8012fb0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012fb4:	492d      	ldr	r1, [pc, #180]	; (801306c <tcp_close_shutdown_fin+0xcc>)
 8012fb6:	482e      	ldr	r0, [pc, #184]	; (8013070 <tcp_close_shutdown_fin+0xd0>)
 8012fb8:	f00b ff34 	bl	801ee24 <iprintf>

  switch (pcb->state) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	7d1b      	ldrb	r3, [r3, #20]
 8012fc0:	2b07      	cmp	r3, #7
 8012fc2:	d020      	beq.n	8013006 <tcp_close_shutdown_fin+0x66>
 8012fc4:	2b07      	cmp	r3, #7
 8012fc6:	dc2b      	bgt.n	8013020 <tcp_close_shutdown_fin+0x80>
 8012fc8:	2b03      	cmp	r3, #3
 8012fca:	d002      	beq.n	8012fd2 <tcp_close_shutdown_fin+0x32>
 8012fcc:	2b04      	cmp	r3, #4
 8012fce:	d00d      	beq.n	8012fec <tcp_close_shutdown_fin+0x4c>
 8012fd0:	e026      	b.n	8013020 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f004 fe2a 	bl	8017c2c <tcp_send_fin>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d11f      	bne.n	8013024 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2205      	movs	r2, #5
 8012fe8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012fea:	e01b      	b.n	8013024 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012fec:	6878      	ldr	r0, [r7, #4]
 8012fee:	f004 fe1d 	bl	8017c2c <tcp_send_fin>
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d114      	bne.n	8013028 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2205      	movs	r2, #5
 8013002:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013004:	e010      	b.n	8013028 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f004 fe10 	bl	8017c2c <tcp_send_fin>
 801300c:	4603      	mov	r3, r0
 801300e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d109      	bne.n	801302c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2209      	movs	r2, #9
 801301c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801301e:	e005      	b.n	801302c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	e01c      	b.n	801305e <tcp_close_shutdown_fin+0xbe>
      break;
 8013024:	bf00      	nop
 8013026:	e002      	b.n	801302e <tcp_close_shutdown_fin+0x8e>
      break;
 8013028:	bf00      	nop
 801302a:	e000      	b.n	801302e <tcp_close_shutdown_fin+0x8e>
      break;
 801302c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801302e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d103      	bne.n	801303e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f004 ff36 	bl	8017ea8 <tcp_output>
 801303c:	e00d      	b.n	801305a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013042:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013046:	d108      	bne.n	801305a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	8b5b      	ldrh	r3, [r3, #26]
 801304c:	f043 0308 	orr.w	r3, r3, #8
 8013050:	b29a      	uxth	r2, r3
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013056:	2300      	movs	r3, #0
 8013058:	e001      	b.n	801305e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801305a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801305e:	4618      	mov	r0, r3
 8013060:	3710      	adds	r7, #16
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	0802229c 	.word	0x0802229c
 801306c:	0802234c 	.word	0x0802234c
 8013070:	080222e0 	.word	0x080222e0

08013074 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d109      	bne.n	8013096 <tcp_close+0x22>
 8013082:	4b0f      	ldr	r3, [pc, #60]	; (80130c0 <tcp_close+0x4c>)
 8013084:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013088:	490e      	ldr	r1, [pc, #56]	; (80130c4 <tcp_close+0x50>)
 801308a:	480f      	ldr	r0, [pc, #60]	; (80130c8 <tcp_close+0x54>)
 801308c:	f00b feca 	bl	801ee24 <iprintf>
 8013090:	f06f 030f 	mvn.w	r3, #15
 8013094:	e00f      	b.n	80130b6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	7d1b      	ldrb	r3, [r3, #20]
 801309a:	2b01      	cmp	r3, #1
 801309c:	d006      	beq.n	80130ac <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	8b5b      	ldrh	r3, [r3, #26]
 80130a2:	f043 0310 	orr.w	r3, r3, #16
 80130a6:	b29a      	uxth	r2, r3
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80130ac:	2101      	movs	r1, #1
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff fe94 	bl	8012ddc <tcp_close_shutdown>
 80130b4:	4603      	mov	r3, r0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	0802229c 	.word	0x0802229c
 80130c4:	080223ac 	.word	0x080223ac
 80130c8:	080222e0 	.word	0x080222e0

080130cc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	60f8      	str	r0, [r7, #12]
 80130d4:	60b9      	str	r1, [r7, #8]
 80130d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d109      	bne.n	80130f2 <tcp_shutdown+0x26>
 80130de:	4b26      	ldr	r3, [pc, #152]	; (8013178 <tcp_shutdown+0xac>)
 80130e0:	f240 2207 	movw	r2, #519	; 0x207
 80130e4:	4925      	ldr	r1, [pc, #148]	; (801317c <tcp_shutdown+0xb0>)
 80130e6:	4826      	ldr	r0, [pc, #152]	; (8013180 <tcp_shutdown+0xb4>)
 80130e8:	f00b fe9c 	bl	801ee24 <iprintf>
 80130ec:	f06f 030f 	mvn.w	r3, #15
 80130f0:	e03d      	b.n	801316e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	7d1b      	ldrb	r3, [r3, #20]
 80130f6:	2b01      	cmp	r3, #1
 80130f8:	d102      	bne.n	8013100 <tcp_shutdown+0x34>
    return ERR_CONN;
 80130fa:	f06f 030a 	mvn.w	r3, #10
 80130fe:	e036      	b.n	801316e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d01b      	beq.n	801313e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	8b5b      	ldrh	r3, [r3, #26]
 801310a:	f043 0310 	orr.w	r3, r3, #16
 801310e:	b29a      	uxth	r2, r3
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d005      	beq.n	8013126 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801311a:	2101      	movs	r1, #1
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f7ff fe5d 	bl	8012ddc <tcp_close_shutdown>
 8013122:	4603      	mov	r3, r0
 8013124:	e023      	b.n	801316e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801312a:	2b00      	cmp	r3, #0
 801312c:	d007      	beq.n	801313e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013132:	4618      	mov	r0, r3
 8013134:	f7ff fae4 	bl	8012700 <pbuf_free>
      pcb->refused_data = NULL;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2200      	movs	r2, #0
 801313c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d013      	beq.n	801316c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	7d1b      	ldrb	r3, [r3, #20]
 8013148:	2b04      	cmp	r3, #4
 801314a:	dc02      	bgt.n	8013152 <tcp_shutdown+0x86>
 801314c:	2b03      	cmp	r3, #3
 801314e:	da02      	bge.n	8013156 <tcp_shutdown+0x8a>
 8013150:	e009      	b.n	8013166 <tcp_shutdown+0x9a>
 8013152:	2b07      	cmp	r3, #7
 8013154:	d107      	bne.n	8013166 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	b2db      	uxtb	r3, r3
 801315a:	4619      	mov	r1, r3
 801315c:	68f8      	ldr	r0, [r7, #12]
 801315e:	f7ff fe3d 	bl	8012ddc <tcp_close_shutdown>
 8013162:	4603      	mov	r3, r0
 8013164:	e003      	b.n	801316e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013166:	f06f 030a 	mvn.w	r3, #10
 801316a:	e000      	b.n	801316e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801316c:	2300      	movs	r3, #0
}
 801316e:	4618      	mov	r0, r3
 8013170:	3710      	adds	r7, #16
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	0802229c 	.word	0x0802229c
 801317c:	080223c4 	.word	0x080223c4
 8013180:	080222e0 	.word	0x080222e0

08013184 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b08e      	sub	sp, #56	; 0x38
 8013188:	af04      	add	r7, sp, #16
 801318a:	6078      	str	r0, [r7, #4]
 801318c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d107      	bne.n	80131a4 <tcp_abandon+0x20>
 8013194:	4b52      	ldr	r3, [pc, #328]	; (80132e0 <tcp_abandon+0x15c>)
 8013196:	f240 223d 	movw	r2, #573	; 0x23d
 801319a:	4952      	ldr	r1, [pc, #328]	; (80132e4 <tcp_abandon+0x160>)
 801319c:	4852      	ldr	r0, [pc, #328]	; (80132e8 <tcp_abandon+0x164>)
 801319e:	f00b fe41 	bl	801ee24 <iprintf>
 80131a2:	e099      	b.n	80132d8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	7d1b      	ldrb	r3, [r3, #20]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d106      	bne.n	80131ba <tcp_abandon+0x36>
 80131ac:	4b4c      	ldr	r3, [pc, #304]	; (80132e0 <tcp_abandon+0x15c>)
 80131ae:	f44f 7210 	mov.w	r2, #576	; 0x240
 80131b2:	494e      	ldr	r1, [pc, #312]	; (80132ec <tcp_abandon+0x168>)
 80131b4:	484c      	ldr	r0, [pc, #304]	; (80132e8 <tcp_abandon+0x164>)
 80131b6:	f00b fe35 	bl	801ee24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	7d1b      	ldrb	r3, [r3, #20]
 80131be:	2b0a      	cmp	r3, #10
 80131c0:	d107      	bne.n	80131d2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80131c2:	6879      	ldr	r1, [r7, #4]
 80131c4:	484a      	ldr	r0, [pc, #296]	; (80132f0 <tcp_abandon+0x16c>)
 80131c6:	f001 fa53 	bl	8014670 <tcp_pcb_remove>
    tcp_free(pcb);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7ff fd54 	bl	8012c78 <tcp_free>
 80131d0:	e082      	b.n	80132d8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80131d2:	2300      	movs	r3, #0
 80131d4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80131d6:	2300      	movs	r3, #0
 80131d8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131de:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131e4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131ec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	691b      	ldr	r3, [r3, #16]
 80131f2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	7d1b      	ldrb	r3, [r3, #20]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d126      	bne.n	801324a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	8adb      	ldrh	r3, [r3, #22]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d02e      	beq.n	8013262 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013204:	4b3b      	ldr	r3, [pc, #236]	; (80132f4 <tcp_abandon+0x170>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	429a      	cmp	r2, r3
 801320c:	d105      	bne.n	801321a <tcp_abandon+0x96>
 801320e:	4b39      	ldr	r3, [pc, #228]	; (80132f4 <tcp_abandon+0x170>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	4a37      	ldr	r2, [pc, #220]	; (80132f4 <tcp_abandon+0x170>)
 8013216:	6013      	str	r3, [r2, #0]
 8013218:	e013      	b.n	8013242 <tcp_abandon+0xbe>
 801321a:	4b36      	ldr	r3, [pc, #216]	; (80132f4 <tcp_abandon+0x170>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	61fb      	str	r3, [r7, #28]
 8013220:	e00c      	b.n	801323c <tcp_abandon+0xb8>
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	687a      	ldr	r2, [r7, #4]
 8013228:	429a      	cmp	r2, r3
 801322a:	d104      	bne.n	8013236 <tcp_abandon+0xb2>
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	68da      	ldr	r2, [r3, #12]
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	60da      	str	r2, [r3, #12]
 8013234:	e005      	b.n	8013242 <tcp_abandon+0xbe>
 8013236:	69fb      	ldr	r3, [r7, #28]
 8013238:	68db      	ldr	r3, [r3, #12]
 801323a:	61fb      	str	r3, [r7, #28]
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	2b00      	cmp	r3, #0
 8013240:	d1ef      	bne.n	8013222 <tcp_abandon+0x9e>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	60da      	str	r2, [r3, #12]
 8013248:	e00b      	b.n	8013262 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	8adb      	ldrh	r3, [r3, #22]
 8013252:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013254:	6879      	ldr	r1, [r7, #4]
 8013256:	4828      	ldr	r0, [pc, #160]	; (80132f8 <tcp_abandon+0x174>)
 8013258:	f001 fa0a 	bl	8014670 <tcp_pcb_remove>
 801325c:	4b27      	ldr	r3, [pc, #156]	; (80132fc <tcp_abandon+0x178>)
 801325e:	2201      	movs	r2, #1
 8013260:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013266:	2b00      	cmp	r3, #0
 8013268:	d004      	beq.n	8013274 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801326e:	4618      	mov	r0, r3
 8013270:	f000 fede 	bl	8014030 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013278:	2b00      	cmp	r3, #0
 801327a:	d004      	beq.n	8013286 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013280:	4618      	mov	r0, r3
 8013282:	f000 fed5 	bl	8014030 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801328a:	2b00      	cmp	r3, #0
 801328c:	d004      	beq.n	8013298 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013292:	4618      	mov	r0, r3
 8013294:	f000 fecc 	bl	8014030 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00e      	beq.n	80132bc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801329e:	6879      	ldr	r1, [r7, #4]
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	3304      	adds	r3, #4
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	8b12      	ldrh	r2, [r2, #24]
 80132a8:	9202      	str	r2, [sp, #8]
 80132aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80132ac:	9201      	str	r2, [sp, #4]
 80132ae:	9300      	str	r3, [sp, #0]
 80132b0:	460b      	mov	r3, r1
 80132b2:	697a      	ldr	r2, [r7, #20]
 80132b4:	69b9      	ldr	r1, [r7, #24]
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f005 fbaa 	bl	8018a10 <tcp_rst>
    }
    last_state = pcb->state;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7d1b      	ldrb	r3, [r3, #20]
 80132c0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f7ff fcd8 	bl	8012c78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d004      	beq.n	80132d8 <tcp_abandon+0x154>
 80132ce:	693b      	ldr	r3, [r7, #16]
 80132d0:	f06f 010c 	mvn.w	r1, #12
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	4798      	blx	r3
  }
}
 80132d8:	3728      	adds	r7, #40	; 0x28
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}
 80132de:	bf00      	nop
 80132e0:	0802229c 	.word	0x0802229c
 80132e4:	080223e0 	.word	0x080223e0
 80132e8:	080222e0 	.word	0x080222e0
 80132ec:	080223fc 	.word	0x080223fc
 80132f0:	2000c8a8 	.word	0x2000c8a8
 80132f4:	2000c89c 	.word	0x2000c89c
 80132f8:	2000c8a4 	.word	0x2000c8a4
 80132fc:	2000c8ac 	.word	0x2000c8ac

08013300 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b082      	sub	sp, #8
 8013304:	af00      	add	r7, sp, #0
 8013306:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013308:	2101      	movs	r1, #1
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7ff ff3a 	bl	8013184 <tcp_abandon>
}
 8013310:	bf00      	nop
 8013312:	3708      	adds	r7, #8
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b088      	sub	sp, #32
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	4613      	mov	r3, r2
 8013324:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013326:	2304      	movs	r3, #4
 8013328:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d101      	bne.n	8013334 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013330:	4b3e      	ldr	r3, [pc, #248]	; (801342c <tcp_bind+0x114>)
 8013332:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d109      	bne.n	801334e <tcp_bind+0x36>
 801333a:	4b3d      	ldr	r3, [pc, #244]	; (8013430 <tcp_bind+0x118>)
 801333c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013340:	493c      	ldr	r1, [pc, #240]	; (8013434 <tcp_bind+0x11c>)
 8013342:	483d      	ldr	r0, [pc, #244]	; (8013438 <tcp_bind+0x120>)
 8013344:	f00b fd6e 	bl	801ee24 <iprintf>
 8013348:	f06f 030f 	mvn.w	r3, #15
 801334c:	e06a      	b.n	8013424 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	7d1b      	ldrb	r3, [r3, #20]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d009      	beq.n	801336a <tcp_bind+0x52>
 8013356:	4b36      	ldr	r3, [pc, #216]	; (8013430 <tcp_bind+0x118>)
 8013358:	f240 22ab 	movw	r2, #683	; 0x2ab
 801335c:	4937      	ldr	r1, [pc, #220]	; (801343c <tcp_bind+0x124>)
 801335e:	4836      	ldr	r0, [pc, #216]	; (8013438 <tcp_bind+0x120>)
 8013360:	f00b fd60 	bl	801ee24 <iprintf>
 8013364:	f06f 0305 	mvn.w	r3, #5
 8013368:	e05c      	b.n	8013424 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801336a:	88fb      	ldrh	r3, [r7, #6]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d109      	bne.n	8013384 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013370:	f000 f9f8 	bl	8013764 <tcp_new_port>
 8013374:	4603      	mov	r3, r0
 8013376:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013378:	88fb      	ldrh	r3, [r7, #6]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d135      	bne.n	80133ea <tcp_bind+0xd2>
      return ERR_BUF;
 801337e:	f06f 0301 	mvn.w	r3, #1
 8013382:	e04f      	b.n	8013424 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013384:	2300      	movs	r3, #0
 8013386:	61fb      	str	r3, [r7, #28]
 8013388:	e02b      	b.n	80133e2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801338a:	4a2d      	ldr	r2, [pc, #180]	; (8013440 <tcp_bind+0x128>)
 801338c:	69fb      	ldr	r3, [r7, #28]
 801338e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	61bb      	str	r3, [r7, #24]
 8013396:	e01e      	b.n	80133d6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	8adb      	ldrh	r3, [r3, #22]
 801339c:	88fa      	ldrh	r2, [r7, #6]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d116      	bne.n	80133d0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80133a2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d010      	beq.n	80133ca <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d00c      	beq.n	80133ca <tcp_bind+0xb2>
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d009      	beq.n	80133ca <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d005      	beq.n	80133ca <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	681a      	ldr	r2, [r3, #0]
 80133c2:	68bb      	ldr	r3, [r7, #8]
 80133c4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d102      	bne.n	80133d0 <tcp_bind+0xb8>
              return ERR_USE;
 80133ca:	f06f 0307 	mvn.w	r3, #7
 80133ce:	e029      	b.n	8013424 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	68db      	ldr	r3, [r3, #12]
 80133d4:	61bb      	str	r3, [r7, #24]
 80133d6:	69bb      	ldr	r3, [r7, #24]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d1dd      	bne.n	8013398 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	3301      	adds	r3, #1
 80133e0:	61fb      	str	r3, [r7, #28]
 80133e2:	69fa      	ldr	r2, [r7, #28]
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	429a      	cmp	r2, r3
 80133e8:	dbcf      	blt.n	801338a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d00c      	beq.n	801340a <tcp_bind+0xf2>
 80133f0:	68bb      	ldr	r3, [r7, #8]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d008      	beq.n	801340a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80133f8:	68bb      	ldr	r3, [r7, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d002      	beq.n	8013404 <tcp_bind+0xec>
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	e000      	b.n	8013406 <tcp_bind+0xee>
 8013404:	2300      	movs	r3, #0
 8013406:	68fa      	ldr	r2, [r7, #12]
 8013408:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	88fa      	ldrh	r2, [r7, #6]
 801340e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013410:	4b0c      	ldr	r3, [pc, #48]	; (8013444 <tcp_bind+0x12c>)
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	60da      	str	r2, [r3, #12]
 8013418:	4a0a      	ldr	r2, [pc, #40]	; (8013444 <tcp_bind+0x12c>)
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	6013      	str	r3, [r2, #0]
 801341e:	f005 fcb9 	bl	8018d94 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013422:	2300      	movs	r3, #0
}
 8013424:	4618      	mov	r0, r3
 8013426:	3720      	adds	r7, #32
 8013428:	46bd      	mov	sp, r7
 801342a:	bd80      	pop	{r7, pc}
 801342c:	08024784 	.word	0x08024784
 8013430:	0802229c 	.word	0x0802229c
 8013434:	08022430 	.word	0x08022430
 8013438:	080222e0 	.word	0x080222e0
 801343c:	08022448 	.word	0x08022448
 8013440:	0802474c 	.word	0x0802474c
 8013444:	2000c89c 	.word	0x2000c89c

08013448 <tcp_bind_netif>:
 * @param pcb the tcp_pcb to bind.
 * @param netif the netif to bind to. Can be NULL.
 */
void
tcp_bind_netif(struct tcp_pcb *pcb, const struct netif *netif)
{
 8013448:	b480      	push	{r7}
 801344a:	b083      	sub	sp, #12
 801344c:	af00      	add	r7, sp, #0
 801344e:	6078      	str	r0, [r7, #4]
 8013450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (netif != NULL) {
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d007      	beq.n	8013468 <tcp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801345e:	3301      	adds	r3, #1
 8013460:	b2da      	uxtb	r2, r3
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 8013466:	e002      	b.n	801346e <tcp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2200      	movs	r2, #0
 801346c:	721a      	strb	r2, [r3, #8]
}
 801346e:	bf00      	nop
 8013470:	370c      	adds	r7, #12
 8013472:	46bd      	mov	sp, r7
 8013474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013478:	4770      	bx	lr
	...

0801347c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801347c:	b580      	push	{r7, lr}
 801347e:	b084      	sub	sp, #16
 8013480:	af00      	add	r7, sp, #0
 8013482:	60f8      	str	r0, [r7, #12]
 8013484:	60b9      	str	r1, [r7, #8]
 8013486:	4613      	mov	r3, r2
 8013488:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d106      	bne.n	801349e <tcp_accept_null+0x22>
 8013490:	4b07      	ldr	r3, [pc, #28]	; (80134b0 <tcp_accept_null+0x34>)
 8013492:	f240 320f 	movw	r2, #783	; 0x30f
 8013496:	4907      	ldr	r1, [pc, #28]	; (80134b4 <tcp_accept_null+0x38>)
 8013498:	4807      	ldr	r0, [pc, #28]	; (80134b8 <tcp_accept_null+0x3c>)
 801349a:	f00b fcc3 	bl	801ee24 <iprintf>

  tcp_abort(pcb);
 801349e:	68b8      	ldr	r0, [r7, #8]
 80134a0:	f7ff ff2e 	bl	8013300 <tcp_abort>

  return ERR_ABRT;
 80134a4:	f06f 030c 	mvn.w	r3, #12
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	0802229c 	.word	0x0802229c
 80134b4:	08022470 	.word	0x08022470
 80134b8:	080222e0 	.word	0x080222e0

080134bc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b088      	sub	sp, #32
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	460b      	mov	r3, r1
 80134c6:	607a      	str	r2, [r7, #4]
 80134c8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80134ca:	2300      	movs	r3, #0
 80134cc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d109      	bne.n	80134e8 <tcp_listen_with_backlog_and_err+0x2c>
 80134d4:	4b47      	ldr	r3, [pc, #284]	; (80135f4 <tcp_listen_with_backlog_and_err+0x138>)
 80134d6:	f240 3259 	movw	r2, #857	; 0x359
 80134da:	4947      	ldr	r1, [pc, #284]	; (80135f8 <tcp_listen_with_backlog_and_err+0x13c>)
 80134dc:	4847      	ldr	r0, [pc, #284]	; (80135fc <tcp_listen_with_backlog_and_err+0x140>)
 80134de:	f00b fca1 	bl	801ee24 <iprintf>
 80134e2:	23f0      	movs	r3, #240	; 0xf0
 80134e4:	76fb      	strb	r3, [r7, #27]
 80134e6:	e079      	b.n	80135dc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	7d1b      	ldrb	r3, [r3, #20]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d009      	beq.n	8013504 <tcp_listen_with_backlog_and_err+0x48>
 80134f0:	4b40      	ldr	r3, [pc, #256]	; (80135f4 <tcp_listen_with_backlog_and_err+0x138>)
 80134f2:	f240 325a 	movw	r2, #858	; 0x35a
 80134f6:	4942      	ldr	r1, [pc, #264]	; (8013600 <tcp_listen_with_backlog_and_err+0x144>)
 80134f8:	4840      	ldr	r0, [pc, #256]	; (80135fc <tcp_listen_with_backlog_and_err+0x140>)
 80134fa:	f00b fc93 	bl	801ee24 <iprintf>
 80134fe:	23f1      	movs	r3, #241	; 0xf1
 8013500:	76fb      	strb	r3, [r7, #27]
 8013502:	e06b      	b.n	80135dc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	7d1b      	ldrb	r3, [r3, #20]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d104      	bne.n	8013516 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013510:	23f7      	movs	r3, #247	; 0xf7
 8013512:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013514:	e062      	b.n	80135dc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013516:	2002      	movs	r0, #2
 8013518:	f7fe f994 	bl	8011844 <memp_malloc>
 801351c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d102      	bne.n	801352a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013524:	23ff      	movs	r3, #255	; 0xff
 8013526:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013528:	e058      	b.n	80135dc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	691a      	ldr	r2, [r3, #16]
 801352e:	69fb      	ldr	r3, [r7, #28]
 8013530:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	8ada      	ldrh	r2, [r3, #22]
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	2201      	movs	r2, #1
 801353e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	7d5a      	ldrb	r2, [r3, #21]
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	7a5a      	ldrb	r2, [r3, #9]
 801354c:	69fb      	ldr	r3, [r7, #28]
 801354e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	2200      	movs	r2, #0
 8013554:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	7ada      	ldrb	r2, [r3, #11]
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	7a9a      	ldrb	r2, [r3, #10]
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681a      	ldr	r2, [r3, #0]
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	8adb      	ldrh	r3, [r3, #22]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d021      	beq.n	80135ba <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013576:	4b23      	ldr	r3, [pc, #140]	; (8013604 <tcp_listen_with_backlog_and_err+0x148>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	68fa      	ldr	r2, [r7, #12]
 801357c:	429a      	cmp	r2, r3
 801357e:	d105      	bne.n	801358c <tcp_listen_with_backlog_and_err+0xd0>
 8013580:	4b20      	ldr	r3, [pc, #128]	; (8013604 <tcp_listen_with_backlog_and_err+0x148>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	68db      	ldr	r3, [r3, #12]
 8013586:	4a1f      	ldr	r2, [pc, #124]	; (8013604 <tcp_listen_with_backlog_and_err+0x148>)
 8013588:	6013      	str	r3, [r2, #0]
 801358a:	e013      	b.n	80135b4 <tcp_listen_with_backlog_and_err+0xf8>
 801358c:	4b1d      	ldr	r3, [pc, #116]	; (8013604 <tcp_listen_with_backlog_and_err+0x148>)
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	617b      	str	r3, [r7, #20]
 8013592:	e00c      	b.n	80135ae <tcp_listen_with_backlog_and_err+0xf2>
 8013594:	697b      	ldr	r3, [r7, #20]
 8013596:	68db      	ldr	r3, [r3, #12]
 8013598:	68fa      	ldr	r2, [r7, #12]
 801359a:	429a      	cmp	r2, r3
 801359c:	d104      	bne.n	80135a8 <tcp_listen_with_backlog_and_err+0xec>
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	68da      	ldr	r2, [r3, #12]
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	60da      	str	r2, [r3, #12]
 80135a6:	e005      	b.n	80135b4 <tcp_listen_with_backlog_and_err+0xf8>
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	617b      	str	r3, [r7, #20]
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d1ef      	bne.n	8013594 <tcp_listen_with_backlog_and_err+0xd8>
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2200      	movs	r2, #0
 80135b8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80135ba:	68f8      	ldr	r0, [r7, #12]
 80135bc:	f7ff fb5c 	bl	8012c78 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	4a11      	ldr	r2, [pc, #68]	; (8013608 <tcp_listen_with_backlog_and_err+0x14c>)
 80135c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80135c6:	4b11      	ldr	r3, [pc, #68]	; (801360c <tcp_listen_with_backlog_and_err+0x150>)
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	60da      	str	r2, [r3, #12]
 80135ce:	4a0f      	ldr	r2, [pc, #60]	; (801360c <tcp_listen_with_backlog_and_err+0x150>)
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	6013      	str	r3, [r2, #0]
 80135d4:	f005 fbde 	bl	8018d94 <tcp_timer_needed>
  res = ERR_OK;
 80135d8:	2300      	movs	r3, #0
 80135da:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d002      	beq.n	80135e8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	7efa      	ldrb	r2, [r7, #27]
 80135e6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80135e8:	69fb      	ldr	r3, [r7, #28]
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3720      	adds	r7, #32
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	0802229c 	.word	0x0802229c
 80135f8:	08022490 	.word	0x08022490
 80135fc:	080222e0 	.word	0x080222e0
 8013600:	080224c0 	.word	0x080224c0
 8013604:	2000c89c 	.word	0x2000c89c
 8013608:	0801347d 	.word	0x0801347d
 801360c:	2000c8a0 	.word	0x2000c8a0

08013610 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b084      	sub	sp, #16
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d106      	bne.n	801362c <tcp_update_rcv_ann_wnd+0x1c>
 801361e:	4b25      	ldr	r3, [pc, #148]	; (80136b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013620:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013624:	4924      	ldr	r1, [pc, #144]	; (80136b8 <tcp_update_rcv_ann_wnd+0xa8>)
 8013626:	4825      	ldr	r0, [pc, #148]	; (80136bc <tcp_update_rcv_ann_wnd+0xac>)
 8013628:	f00b fbfc 	bl	801ee24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013630:	687a      	ldr	r2, [r7, #4]
 8013632:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013634:	4413      	add	r3, r2
 8013636:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013640:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013644:	bf28      	it	cs
 8013646:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801364a:	b292      	uxth	r2, r2
 801364c:	4413      	add	r3, r2
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	1ad3      	subs	r3, r2, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	db08      	blt.n	8013668 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013662:	68fa      	ldr	r2, [r7, #12]
 8013664:	1ad3      	subs	r3, r2, r3
 8013666:	e020      	b.n	80136aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013670:	1ad3      	subs	r3, r2, r3
 8013672:	2b00      	cmp	r3, #0
 8013674:	dd03      	ble.n	801367e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2200      	movs	r2, #0
 801367a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801367c:	e014      	b.n	80136a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013686:	1ad3      	subs	r3, r2, r3
 8013688:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013690:	d306      	bcc.n	80136a0 <tcp_update_rcv_ann_wnd+0x90>
 8013692:	4b08      	ldr	r3, [pc, #32]	; (80136b4 <tcp_update_rcv_ann_wnd+0xa4>)
 8013694:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013698:	4909      	ldr	r1, [pc, #36]	; (80136c0 <tcp_update_rcv_ann_wnd+0xb0>)
 801369a:	4808      	ldr	r0, [pc, #32]	; (80136bc <tcp_update_rcv_ann_wnd+0xac>)
 801369c:	f00b fbc2 	bl	801ee24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80136a8:	2300      	movs	r3, #0
  }
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}
 80136b2:	bf00      	nop
 80136b4:	0802229c 	.word	0x0802229c
 80136b8:	080224f8 	.word	0x080224f8
 80136bc:	080222e0 	.word	0x080222e0
 80136c0:	0802251c 	.word	0x0802251c

080136c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	460b      	mov	r3, r1
 80136ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d107      	bne.n	80136e6 <tcp_recved+0x22>
 80136d6:	4b1f      	ldr	r3, [pc, #124]	; (8013754 <tcp_recved+0x90>)
 80136d8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80136dc:	491e      	ldr	r1, [pc, #120]	; (8013758 <tcp_recved+0x94>)
 80136de:	481f      	ldr	r0, [pc, #124]	; (801375c <tcp_recved+0x98>)
 80136e0:	f00b fba0 	bl	801ee24 <iprintf>
 80136e4:	e032      	b.n	801374c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	7d1b      	ldrb	r3, [r3, #20]
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d106      	bne.n	80136fc <tcp_recved+0x38>
 80136ee:	4b19      	ldr	r3, [pc, #100]	; (8013754 <tcp_recved+0x90>)
 80136f0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80136f4:	491a      	ldr	r1, [pc, #104]	; (8013760 <tcp_recved+0x9c>)
 80136f6:	4819      	ldr	r0, [pc, #100]	; (801375c <tcp_recved+0x98>)
 80136f8:	f00b fb94 	bl	801ee24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013700:	887b      	ldrh	r3, [r7, #2]
 8013702:	4413      	add	r3, r2
 8013704:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013706:	89fb      	ldrh	r3, [r7, #14]
 8013708:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801370c:	d804      	bhi.n	8013718 <tcp_recved+0x54>
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013712:	89fa      	ldrh	r2, [r7, #14]
 8013714:	429a      	cmp	r2, r3
 8013716:	d204      	bcs.n	8013722 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801371e:	851a      	strh	r2, [r3, #40]	; 0x28
 8013720:	e002      	b.n	8013728 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	89fa      	ldrh	r2, [r7, #14]
 8013726:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f7ff ff71 	bl	8013610 <tcp_update_rcv_ann_wnd>
 801372e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013736:	d309      	bcc.n	801374c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	8b5b      	ldrh	r3, [r3, #26]
 801373c:	f043 0302 	orr.w	r3, r3, #2
 8013740:	b29a      	uxth	r2, r3
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f004 fbae 	bl	8017ea8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}
 8013752:	bf00      	nop
 8013754:	0802229c 	.word	0x0802229c
 8013758:	08022538 	.word	0x08022538
 801375c:	080222e0 	.word	0x080222e0
 8013760:	08022550 	.word	0x08022550

08013764 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801376a:	2300      	movs	r3, #0
 801376c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801376e:	4b1e      	ldr	r3, [pc, #120]	; (80137e8 <tcp_new_port+0x84>)
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	3301      	adds	r3, #1
 8013774:	b29a      	uxth	r2, r3
 8013776:	4b1c      	ldr	r3, [pc, #112]	; (80137e8 <tcp_new_port+0x84>)
 8013778:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801377a:	4b1b      	ldr	r3, [pc, #108]	; (80137e8 <tcp_new_port+0x84>)
 801377c:	881b      	ldrh	r3, [r3, #0]
 801377e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013782:	4293      	cmp	r3, r2
 8013784:	d103      	bne.n	801378e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013786:	4b18      	ldr	r3, [pc, #96]	; (80137e8 <tcp_new_port+0x84>)
 8013788:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801378c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801378e:	2300      	movs	r3, #0
 8013790:	71fb      	strb	r3, [r7, #7]
 8013792:	e01e      	b.n	80137d2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013794:	79fb      	ldrb	r3, [r7, #7]
 8013796:	4a15      	ldr	r2, [pc, #84]	; (80137ec <tcp_new_port+0x88>)
 8013798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	603b      	str	r3, [r7, #0]
 80137a0:	e011      	b.n	80137c6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80137a2:	683b      	ldr	r3, [r7, #0]
 80137a4:	8ada      	ldrh	r2, [r3, #22]
 80137a6:	4b10      	ldr	r3, [pc, #64]	; (80137e8 <tcp_new_port+0x84>)
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d108      	bne.n	80137c0 <tcp_new_port+0x5c>
        n++;
 80137ae:	88bb      	ldrh	r3, [r7, #4]
 80137b0:	3301      	adds	r3, #1
 80137b2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80137b4:	88bb      	ldrh	r3, [r7, #4]
 80137b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80137ba:	d3d8      	bcc.n	801376e <tcp_new_port+0xa>
          return 0;
 80137bc:	2300      	movs	r3, #0
 80137be:	e00d      	b.n	80137dc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	68db      	ldr	r3, [r3, #12]
 80137c4:	603b      	str	r3, [r7, #0]
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d1ea      	bne.n	80137a2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80137cc:	79fb      	ldrb	r3, [r7, #7]
 80137ce:	3301      	adds	r3, #1
 80137d0:	71fb      	strb	r3, [r7, #7]
 80137d2:	79fb      	ldrb	r3, [r7, #7]
 80137d4:	2b03      	cmp	r3, #3
 80137d6:	d9dd      	bls.n	8013794 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80137d8:	4b03      	ldr	r3, [pc, #12]	; (80137e8 <tcp_new_port+0x84>)
 80137da:	881b      	ldrh	r3, [r3, #0]
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr
 80137e8:	20000024 	.word	0x20000024
 80137ec:	0802474c 	.word	0x0802474c

080137f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80137f0:	b5b0      	push	{r4, r5, r7, lr}
 80137f2:	b090      	sub	sp, #64	; 0x40
 80137f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80137fc:	4b94      	ldr	r3, [pc, #592]	; (8013a50 <tcp_slowtmr+0x260>)
 80137fe:	681b      	ldr	r3, [r3, #0]
 8013800:	3301      	adds	r3, #1
 8013802:	4a93      	ldr	r2, [pc, #588]	; (8013a50 <tcp_slowtmr+0x260>)
 8013804:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8013806:	4b93      	ldr	r3, [pc, #588]	; (8013a54 <tcp_slowtmr+0x264>)
 8013808:	781b      	ldrb	r3, [r3, #0]
 801380a:	3301      	adds	r3, #1
 801380c:	b2da      	uxtb	r2, r3
 801380e:	4b91      	ldr	r3, [pc, #580]	; (8013a54 <tcp_slowtmr+0x264>)
 8013810:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8013812:	2300      	movs	r3, #0
 8013814:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8013816:	4b90      	ldr	r3, [pc, #576]	; (8013a58 <tcp_slowtmr+0x268>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801381c:	e29f      	b.n	8013d5e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801381e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013820:	7d1b      	ldrb	r3, [r3, #20]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d106      	bne.n	8013834 <tcp_slowtmr+0x44>
 8013826:	4b8d      	ldr	r3, [pc, #564]	; (8013a5c <tcp_slowtmr+0x26c>)
 8013828:	f240 42be 	movw	r2, #1214	; 0x4be
 801382c:	498c      	ldr	r1, [pc, #560]	; (8013a60 <tcp_slowtmr+0x270>)
 801382e:	488d      	ldr	r0, [pc, #564]	; (8013a64 <tcp_slowtmr+0x274>)
 8013830:	f00b faf8 	bl	801ee24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013836:	7d1b      	ldrb	r3, [r3, #20]
 8013838:	2b01      	cmp	r3, #1
 801383a:	d106      	bne.n	801384a <tcp_slowtmr+0x5a>
 801383c:	4b87      	ldr	r3, [pc, #540]	; (8013a5c <tcp_slowtmr+0x26c>)
 801383e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8013842:	4989      	ldr	r1, [pc, #548]	; (8013a68 <tcp_slowtmr+0x278>)
 8013844:	4887      	ldr	r0, [pc, #540]	; (8013a64 <tcp_slowtmr+0x274>)
 8013846:	f00b faed 	bl	801ee24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384c:	7d1b      	ldrb	r3, [r3, #20]
 801384e:	2b0a      	cmp	r3, #10
 8013850:	d106      	bne.n	8013860 <tcp_slowtmr+0x70>
 8013852:	4b82      	ldr	r3, [pc, #520]	; (8013a5c <tcp_slowtmr+0x26c>)
 8013854:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8013858:	4984      	ldr	r1, [pc, #528]	; (8013a6c <tcp_slowtmr+0x27c>)
 801385a:	4882      	ldr	r0, [pc, #520]	; (8013a64 <tcp_slowtmr+0x274>)
 801385c:	f00b fae2 	bl	801ee24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013862:	7f9a      	ldrb	r2, [r3, #30]
 8013864:	4b7b      	ldr	r3, [pc, #492]	; (8013a54 <tcp_slowtmr+0x264>)
 8013866:	781b      	ldrb	r3, [r3, #0]
 8013868:	429a      	cmp	r2, r3
 801386a:	d105      	bne.n	8013878 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013872:	68db      	ldr	r3, [r3, #12]
 8013874:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8013876:	e272      	b.n	8013d5e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8013878:	4b76      	ldr	r3, [pc, #472]	; (8013a54 <tcp_slowtmr+0x264>)
 801387a:	781a      	ldrb	r2, [r3, #0]
 801387c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801387e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8013880:	2300      	movs	r3, #0
 8013882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8013886:	2300      	movs	r3, #0
 8013888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801388e:	7d1b      	ldrb	r3, [r3, #20]
 8013890:	2b02      	cmp	r3, #2
 8013892:	d10a      	bne.n	80138aa <tcp_slowtmr+0xba>
 8013894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801389a:	2b05      	cmp	r3, #5
 801389c:	d905      	bls.n	80138aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 801389e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138a2:	3301      	adds	r3, #1
 80138a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80138a8:	e11e      	b.n	8013ae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80138aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80138b0:	2b0b      	cmp	r3, #11
 80138b2:	d905      	bls.n	80138c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80138b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138b8:	3301      	adds	r3, #1
 80138ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80138be:	e113      	b.n	8013ae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80138c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d075      	beq.n	80139b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80138ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d006      	beq.n	80138e0 <tcp_slowtmr+0xf0>
 80138d2:	4b62      	ldr	r3, [pc, #392]	; (8013a5c <tcp_slowtmr+0x26c>)
 80138d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80138d8:	4965      	ldr	r1, [pc, #404]	; (8013a70 <tcp_slowtmr+0x280>)
 80138da:	4862      	ldr	r0, [pc, #392]	; (8013a64 <tcp_slowtmr+0x274>)
 80138dc:	f00b faa2 	bl	801ee24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80138e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d106      	bne.n	80138f6 <tcp_slowtmr+0x106>
 80138e8:	4b5c      	ldr	r3, [pc, #368]	; (8013a5c <tcp_slowtmr+0x26c>)
 80138ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80138ee:	4961      	ldr	r1, [pc, #388]	; (8013a74 <tcp_slowtmr+0x284>)
 80138f0:	485c      	ldr	r0, [pc, #368]	; (8013a64 <tcp_slowtmr+0x274>)
 80138f2:	f00b fa97 	bl	801ee24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80138f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80138fc:	2b0b      	cmp	r3, #11
 80138fe:	d905      	bls.n	801390c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8013900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013904:	3301      	adds	r3, #1
 8013906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801390a:	e0ed      	b.n	8013ae8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801390e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013912:	3b01      	subs	r3, #1
 8013914:	4a58      	ldr	r2, [pc, #352]	; (8013a78 <tcp_slowtmr+0x288>)
 8013916:	5cd3      	ldrb	r3, [r2, r3]
 8013918:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801391c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8013920:	7c7a      	ldrb	r2, [r7, #17]
 8013922:	429a      	cmp	r2, r3
 8013924:	d907      	bls.n	8013936 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8013926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801392c:	3301      	adds	r3, #1
 801392e:	b2da      	uxtb	r2, r3
 8013930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013932:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8013936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013938:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801393c:	7c7a      	ldrb	r2, [r7, #17]
 801393e:	429a      	cmp	r2, r3
 8013940:	f200 80d2 	bhi.w	8013ae8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8013944:	2301      	movs	r3, #1
 8013946:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8013948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801394a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801394e:	2b00      	cmp	r3, #0
 8013950:	d108      	bne.n	8013964 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013954:	f005 f950 	bl	8018bf8 <tcp_zero_window_probe>
 8013958:	4603      	mov	r3, r0
 801395a:	2b00      	cmp	r3, #0
 801395c:	d014      	beq.n	8013988 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801395e:	2300      	movs	r3, #0
 8013960:	623b      	str	r3, [r7, #32]
 8013962:	e011      	b.n	8013988 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801396a:	4619      	mov	r1, r3
 801396c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801396e:	f004 f815 	bl	801799c <tcp_split_unsent_seg>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d107      	bne.n	8013988 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801397a:	f004 fa95 	bl	8017ea8 <tcp_output>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d101      	bne.n	8013988 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013984:	2300      	movs	r3, #0
 8013986:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013988:	6a3b      	ldr	r3, [r7, #32]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f000 80ac 	beq.w	8013ae8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8013990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013992:	2200      	movs	r2, #0
 8013994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801399e:	2b06      	cmp	r3, #6
 80139a0:	f200 80a2 	bhi.w	8013ae8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80139a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80139aa:	3301      	adds	r3, #1
 80139ac:	b2da      	uxtb	r2, r3
 80139ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80139b4:	e098      	b.n	8013ae8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80139b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139bc:	2b00      	cmp	r3, #0
 80139be:	db0f      	blt.n	80139e0 <tcp_slowtmr+0x1f0>
 80139c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d008      	beq.n	80139e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80139ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80139d4:	b29b      	uxth	r3, r3
 80139d6:	3301      	adds	r3, #1
 80139d8:	b29b      	uxth	r3, r3
 80139da:	b21a      	sxth	r2, r3
 80139dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80139e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80139e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80139ec:	429a      	cmp	r2, r3
 80139ee:	db7b      	blt.n	8013ae8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80139f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80139f2:	f004 fd4d 	bl	8018490 <tcp_rexmit_rto_prepare>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d007      	beq.n	8013a0c <tcp_slowtmr+0x21c>
 80139fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d171      	bne.n	8013ae8 <tcp_slowtmr+0x2f8>
 8013a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d06d      	beq.n	8013ae8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8013a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a0e:	7d1b      	ldrb	r3, [r3, #20]
 8013a10:	2b02      	cmp	r3, #2
 8013a12:	d03a      	beq.n	8013a8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a1a:	2b0c      	cmp	r3, #12
 8013a1c:	bf28      	it	cs
 8013a1e:	230c      	movcs	r3, #12
 8013a20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013a28:	10db      	asrs	r3, r3, #3
 8013a2a:	b21b      	sxth	r3, r3
 8013a2c:	461a      	mov	r2, r3
 8013a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013a34:	4413      	add	r3, r2
 8013a36:	7efa      	ldrb	r2, [r7, #27]
 8013a38:	4910      	ldr	r1, [pc, #64]	; (8013a7c <tcp_slowtmr+0x28c>)
 8013a3a:	5c8a      	ldrb	r2, [r1, r2]
 8013a3c:	4093      	lsls	r3, r2
 8013a3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8013a46:	4293      	cmp	r3, r2
 8013a48:	dc1a      	bgt.n	8013a80 <tcp_slowtmr+0x290>
 8013a4a:	697b      	ldr	r3, [r7, #20]
 8013a4c:	b21a      	sxth	r2, r3
 8013a4e:	e019      	b.n	8013a84 <tcp_slowtmr+0x294>
 8013a50:	2000c898 	.word	0x2000c898
 8013a54:	2000c8ae 	.word	0x2000c8ae
 8013a58:	2000c8a4 	.word	0x2000c8a4
 8013a5c:	0802229c 	.word	0x0802229c
 8013a60:	080225e0 	.word	0x080225e0
 8013a64:	080222e0 	.word	0x080222e0
 8013a68:	0802260c 	.word	0x0802260c
 8013a6c:	08022638 	.word	0x08022638
 8013a70:	08022668 	.word	0x08022668
 8013a74:	0802269c 	.word	0x0802269c
 8013a78:	08024744 	.word	0x08024744
 8013a7c:	08024734 	.word	0x08024734
 8013a80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	bf28      	it	cs
 8013aa0:	4613      	movcs	r3, r2
 8013aa2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013aa4:	8a7b      	ldrh	r3, [r7, #18]
 8013aa6:	085b      	lsrs	r3, r3, #1
 8013aa8:	b29a      	uxth	r2, r3
 8013aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8013ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013aba:	005b      	lsls	r3, r3, #1
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	d206      	bcs.n	8013ad0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8013ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ac6:	005b      	lsls	r3, r3, #1
 8013ac8:	b29a      	uxth	r2, r3
 8013aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013acc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8013ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013adc:	2200      	movs	r2, #0
 8013ade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8013ae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013ae4:	f004 fd44 	bl	8018570 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aea:	7d1b      	ldrb	r3, [r3, #20]
 8013aec:	2b06      	cmp	r3, #6
 8013aee:	d111      	bne.n	8013b14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	8b5b      	ldrh	r3, [r3, #26]
 8013af4:	f003 0310 	and.w	r3, r3, #16
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00b      	beq.n	8013b14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013afc:	4b9d      	ldr	r3, [pc, #628]	; (8013d74 <tcp_slowtmr+0x584>)
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b02:	6a1b      	ldr	r3, [r3, #32]
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	2b28      	cmp	r3, #40	; 0x28
 8013b08:	d904      	bls.n	8013b14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b0e:	3301      	adds	r3, #1
 8013b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b16:	7a5b      	ldrb	r3, [r3, #9]
 8013b18:	f003 0308 	and.w	r3, r3, #8
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d04c      	beq.n	8013bba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013b24:	2b04      	cmp	r3, #4
 8013b26:	d003      	beq.n	8013b30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013b2c:	2b07      	cmp	r3, #7
 8013b2e:	d144      	bne.n	8013bba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013b30:	4b90      	ldr	r3, [pc, #576]	; (8013d74 <tcp_slowtmr+0x584>)
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b36:	6a1b      	ldr	r3, [r3, #32]
 8013b38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8013b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8013b40:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8013b44:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8013b48:	498b      	ldr	r1, [pc, #556]	; (8013d78 <tcp_slowtmr+0x588>)
 8013b4a:	fba1 1303 	umull	r1, r3, r1, r3
 8013b4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d90a      	bls.n	8013b6a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8013b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b58:	3301      	adds	r3, #1
 8013b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013b5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b62:	3301      	adds	r3, #1
 8013b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013b68:	e027      	b.n	8013bba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013b6a:	4b82      	ldr	r3, [pc, #520]	; (8013d74 <tcp_slowtmr+0x584>)
 8013b6c:	681a      	ldr	r2, [r3, #0]
 8013b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b70:	6a1b      	ldr	r3, [r3, #32]
 8013b72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b76:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013b80:	4618      	mov	r0, r3
 8013b82:	4b7e      	ldr	r3, [pc, #504]	; (8013d7c <tcp_slowtmr+0x58c>)
 8013b84:	fb00 f303 	mul.w	r3, r0, r3
 8013b88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013b8a:	497b      	ldr	r1, [pc, #492]	; (8013d78 <tcp_slowtmr+0x588>)
 8013b8c:	fba1 1303 	umull	r1, r3, r1, r3
 8013b90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d911      	bls.n	8013bba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013b96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013b98:	f004 ffee 	bl	8018b78 <tcp_keepalive>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8013ba2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d107      	bne.n	8013bba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8013baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	b2da      	uxtb	r2, r3
 8013bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bb6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d011      	beq.n	8013be6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8013bc2:	4b6c      	ldr	r3, [pc, #432]	; (8013d74 <tcp_slowtmr+0x584>)
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bc8:	6a1b      	ldr	r3, [r3, #32]
 8013bca:	1ad2      	subs	r2, r2, r3
 8013bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	440b      	add	r3, r1
 8013bda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d302      	bcc.n	8013be6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013be2:	f000 fea9 	bl	8014938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013be8:	7d1b      	ldrb	r3, [r3, #20]
 8013bea:	2b03      	cmp	r3, #3
 8013bec:	d10b      	bne.n	8013c06 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013bee:	4b61      	ldr	r3, [pc, #388]	; (8013d74 <tcp_slowtmr+0x584>)
 8013bf0:	681a      	ldr	r2, [r3, #0]
 8013bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013bf4:	6a1b      	ldr	r3, [r3, #32]
 8013bf6:	1ad3      	subs	r3, r2, r3
 8013bf8:	2b28      	cmp	r3, #40	; 0x28
 8013bfa:	d904      	bls.n	8013c06 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c00:	3301      	adds	r3, #1
 8013c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c08:	7d1b      	ldrb	r3, [r3, #20]
 8013c0a:	2b09      	cmp	r3, #9
 8013c0c:	d10b      	bne.n	8013c26 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013c0e:	4b59      	ldr	r3, [pc, #356]	; (8013d74 <tcp_slowtmr+0x584>)
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c14:	6a1b      	ldr	r3, [r3, #32]
 8013c16:	1ad3      	subs	r3, r2, r3
 8013c18:	2bf0      	cmp	r3, #240	; 0xf0
 8013c1a:	d904      	bls.n	8013c26 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c20:	3301      	adds	r3, #1
 8013c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d060      	beq.n	8013cf0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8013c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c34:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013c38:	f000 fcca 	bl	80145d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d010      	beq.n	8013c64 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013c42:	4b4f      	ldr	r3, [pc, #316]	; (8013d80 <tcp_slowtmr+0x590>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d106      	bne.n	8013c5a <tcp_slowtmr+0x46a>
 8013c4c:	4b4d      	ldr	r3, [pc, #308]	; (8013d84 <tcp_slowtmr+0x594>)
 8013c4e:	f240 526d 	movw	r2, #1389	; 0x56d
 8013c52:	494d      	ldr	r1, [pc, #308]	; (8013d88 <tcp_slowtmr+0x598>)
 8013c54:	484d      	ldr	r0, [pc, #308]	; (8013d8c <tcp_slowtmr+0x59c>)
 8013c56:	f00b f8e5 	bl	801ee24 <iprintf>
        prev->next = pcb->next;
 8013c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c5c:	68da      	ldr	r2, [r3, #12]
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	60da      	str	r2, [r3, #12]
 8013c62:	e00f      	b.n	8013c84 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013c64:	4b46      	ldr	r3, [pc, #280]	; (8013d80 <tcp_slowtmr+0x590>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c6a:	429a      	cmp	r2, r3
 8013c6c:	d006      	beq.n	8013c7c <tcp_slowtmr+0x48c>
 8013c6e:	4b45      	ldr	r3, [pc, #276]	; (8013d84 <tcp_slowtmr+0x594>)
 8013c70:	f240 5271 	movw	r2, #1393	; 0x571
 8013c74:	4946      	ldr	r1, [pc, #280]	; (8013d90 <tcp_slowtmr+0x5a0>)
 8013c76:	4845      	ldr	r0, [pc, #276]	; (8013d8c <tcp_slowtmr+0x59c>)
 8013c78:	f00b f8d4 	bl	801ee24 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	4a3f      	ldr	r2, [pc, #252]	; (8013d80 <tcp_slowtmr+0x590>)
 8013c82:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8013c84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d013      	beq.n	8013cb4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c8e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013c94:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8013c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c98:	3304      	adds	r3, #4
 8013c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c9c:	8ad2      	ldrh	r2, [r2, #22]
 8013c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ca0:	8b09      	ldrh	r1, [r1, #24]
 8013ca2:	9102      	str	r1, [sp, #8]
 8013ca4:	9201      	str	r2, [sp, #4]
 8013ca6:	9300      	str	r3, [sp, #0]
 8013ca8:	462b      	mov	r3, r5
 8013caa:	4622      	mov	r2, r4
 8013cac:	4601      	mov	r1, r0
 8013cae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013cb0:	f004 feae 	bl	8018a10 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8013cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb6:	691b      	ldr	r3, [r3, #16]
 8013cb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cbc:	7d1b      	ldrb	r3, [r3, #20]
 8013cbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc6:	68db      	ldr	r3, [r3, #12]
 8013cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013cca:	6838      	ldr	r0, [r7, #0]
 8013ccc:	f7fe ffd4 	bl	8012c78 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013cd0:	4b30      	ldr	r3, [pc, #192]	; (8013d94 <tcp_slowtmr+0x5a4>)
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d004      	beq.n	8013ce6 <tcp_slowtmr+0x4f6>
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f06f 010c 	mvn.w	r1, #12
 8013ce2:	68b8      	ldr	r0, [r7, #8]
 8013ce4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013ce6:	4b2b      	ldr	r3, [pc, #172]	; (8013d94 <tcp_slowtmr+0x5a4>)
 8013ce8:	781b      	ldrb	r3, [r3, #0]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d037      	beq.n	8013d5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013cee:	e590      	b.n	8013812 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cf6:	68db      	ldr	r3, [r3, #12]
 8013cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cfc:	7f1b      	ldrb	r3, [r3, #28]
 8013cfe:	3301      	adds	r3, #1
 8013d00:	b2da      	uxtb	r2, r3
 8013d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d08:	7f1a      	ldrb	r2, [r3, #28]
 8013d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d0c:	7f5b      	ldrb	r3, [r3, #29]
 8013d0e:	429a      	cmp	r2, r3
 8013d10:	d325      	bcc.n	8013d5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d14:	2200      	movs	r2, #0
 8013d16:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013d18:	4b1e      	ldr	r3, [pc, #120]	; (8013d94 <tcp_slowtmr+0x5a4>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00b      	beq.n	8013d40 <tcp_slowtmr+0x550>
 8013d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013d30:	6912      	ldr	r2, [r2, #16]
 8013d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d34:	4610      	mov	r0, r2
 8013d36:	4798      	blx	r3
 8013d38:	4603      	mov	r3, r0
 8013d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8013d3e:	e002      	b.n	8013d46 <tcp_slowtmr+0x556>
 8013d40:	2300      	movs	r3, #0
 8013d42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013d46:	4b13      	ldr	r3, [pc, #76]	; (8013d94 <tcp_slowtmr+0x5a4>)
 8013d48:	781b      	ldrb	r3, [r3, #0]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d000      	beq.n	8013d50 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8013d4e:	e560      	b.n	8013812 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013d50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d102      	bne.n	8013d5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d5a:	f004 f8a5 	bl	8017ea8 <tcp_output>
  while (pcb != NULL) {
 8013d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f47f ad5c 	bne.w	801381e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013d66:	2300      	movs	r3, #0
 8013d68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013d6a:	4b0b      	ldr	r3, [pc, #44]	; (8013d98 <tcp_slowtmr+0x5a8>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013d70:	e067      	b.n	8013e42 <tcp_slowtmr+0x652>
 8013d72:	bf00      	nop
 8013d74:	2000c898 	.word	0x2000c898
 8013d78:	10624dd3 	.word	0x10624dd3
 8013d7c:	000124f8 	.word	0x000124f8
 8013d80:	2000c8a4 	.word	0x2000c8a4
 8013d84:	0802229c 	.word	0x0802229c
 8013d88:	080226d4 	.word	0x080226d4
 8013d8c:	080222e0 	.word	0x080222e0
 8013d90:	08022700 	.word	0x08022700
 8013d94:	2000c8ac 	.word	0x2000c8ac
 8013d98:	2000c8a8 	.word	0x2000c8a8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d9e:	7d1b      	ldrb	r3, [r3, #20]
 8013da0:	2b0a      	cmp	r3, #10
 8013da2:	d006      	beq.n	8013db2 <tcp_slowtmr+0x5c2>
 8013da4:	4b2b      	ldr	r3, [pc, #172]	; (8013e54 <tcp_slowtmr+0x664>)
 8013da6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013daa:	492b      	ldr	r1, [pc, #172]	; (8013e58 <tcp_slowtmr+0x668>)
 8013dac:	482b      	ldr	r0, [pc, #172]	; (8013e5c <tcp_slowtmr+0x66c>)
 8013dae:	f00b f839 	bl	801ee24 <iprintf>
    pcb_remove = 0;
 8013db2:	2300      	movs	r3, #0
 8013db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013db8:	4b29      	ldr	r3, [pc, #164]	; (8013e60 <tcp_slowtmr+0x670>)
 8013dba:	681a      	ldr	r2, [r3, #0]
 8013dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dbe:	6a1b      	ldr	r3, [r3, #32]
 8013dc0:	1ad3      	subs	r3, r2, r3
 8013dc2:	2bf0      	cmp	r3, #240	; 0xf0
 8013dc4:	d904      	bls.n	8013dd0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dca:	3301      	adds	r3, #1
 8013dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d02f      	beq.n	8013e38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013dd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013dda:	f000 fbf9 	bl	80145d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d010      	beq.n	8013e06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013de4:	4b1f      	ldr	r3, [pc, #124]	; (8013e64 <tcp_slowtmr+0x674>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d106      	bne.n	8013dfc <tcp_slowtmr+0x60c>
 8013dee:	4b19      	ldr	r3, [pc, #100]	; (8013e54 <tcp_slowtmr+0x664>)
 8013df0:	f240 52af 	movw	r2, #1455	; 0x5af
 8013df4:	491c      	ldr	r1, [pc, #112]	; (8013e68 <tcp_slowtmr+0x678>)
 8013df6:	4819      	ldr	r0, [pc, #100]	; (8013e5c <tcp_slowtmr+0x66c>)
 8013df8:	f00b f814 	bl	801ee24 <iprintf>
        prev->next = pcb->next;
 8013dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfe:	68da      	ldr	r2, [r3, #12]
 8013e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e02:	60da      	str	r2, [r3, #12]
 8013e04:	e00f      	b.n	8013e26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013e06:	4b17      	ldr	r3, [pc, #92]	; (8013e64 <tcp_slowtmr+0x674>)
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d006      	beq.n	8013e1e <tcp_slowtmr+0x62e>
 8013e10:	4b10      	ldr	r3, [pc, #64]	; (8013e54 <tcp_slowtmr+0x664>)
 8013e12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013e16:	4915      	ldr	r1, [pc, #84]	; (8013e6c <tcp_slowtmr+0x67c>)
 8013e18:	4810      	ldr	r0, [pc, #64]	; (8013e5c <tcp_slowtmr+0x66c>)
 8013e1a:	f00b f803 	bl	801ee24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e20:	68db      	ldr	r3, [r3, #12]
 8013e22:	4a10      	ldr	r2, [pc, #64]	; (8013e64 <tcp_slowtmr+0x674>)
 8013e24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e2c:	68db      	ldr	r3, [r3, #12]
 8013e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013e30:	69f8      	ldr	r0, [r7, #28]
 8013e32:	f7fe ff21 	bl	8012c78 <tcp_free>
 8013e36:	e004      	b.n	8013e42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8013e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e3e:	68db      	ldr	r3, [r3, #12]
 8013e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d1a9      	bne.n	8013d9c <tcp_slowtmr+0x5ac>
    }
  }
}
 8013e48:	bf00      	nop
 8013e4a:	bf00      	nop
 8013e4c:	3730      	adds	r7, #48	; 0x30
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bdb0      	pop	{r4, r5, r7, pc}
 8013e52:	bf00      	nop
 8013e54:	0802229c 	.word	0x0802229c
 8013e58:	0802272c 	.word	0x0802272c
 8013e5c:	080222e0 	.word	0x080222e0
 8013e60:	2000c898 	.word	0x2000c898
 8013e64:	2000c8a8 	.word	0x2000c8a8
 8013e68:	0802275c 	.word	0x0802275c
 8013e6c:	08022784 	.word	0x08022784

08013e70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013e70:	b580      	push	{r7, lr}
 8013e72:	b082      	sub	sp, #8
 8013e74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013e76:	4b2d      	ldr	r3, [pc, #180]	; (8013f2c <tcp_fasttmr+0xbc>)
 8013e78:	781b      	ldrb	r3, [r3, #0]
 8013e7a:	3301      	adds	r3, #1
 8013e7c:	b2da      	uxtb	r2, r3
 8013e7e:	4b2b      	ldr	r3, [pc, #172]	; (8013f2c <tcp_fasttmr+0xbc>)
 8013e80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013e82:	4b2b      	ldr	r3, [pc, #172]	; (8013f30 <tcp_fasttmr+0xc0>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013e88:	e048      	b.n	8013f1c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	7f9a      	ldrb	r2, [r3, #30]
 8013e8e:	4b27      	ldr	r3, [pc, #156]	; (8013f2c <tcp_fasttmr+0xbc>)
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d03f      	beq.n	8013f16 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013e96:	4b25      	ldr	r3, [pc, #148]	; (8013f2c <tcp_fasttmr+0xbc>)
 8013e98:	781a      	ldrb	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	8b5b      	ldrh	r3, [r3, #26]
 8013ea2:	f003 0301 	and.w	r3, r3, #1
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d010      	beq.n	8013ecc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	8b5b      	ldrh	r3, [r3, #26]
 8013eae:	f043 0302 	orr.w	r3, r3, #2
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f003 fff5 	bl	8017ea8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	8b5b      	ldrh	r3, [r3, #26]
 8013ec2:	f023 0303 	bic.w	r3, r3, #3
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f003 0308 	and.w	r3, r3, #8
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d009      	beq.n	8013eec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	8b5b      	ldrh	r3, [r3, #26]
 8013edc:	f023 0308 	bic.w	r3, r3, #8
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7ff f85a 	bl	8012fa0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00a      	beq.n	8013f10 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013efa:	4b0e      	ldr	r3, [pc, #56]	; (8013f34 <tcp_fasttmr+0xc4>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f000 f819 	bl	8013f38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013f06:	4b0b      	ldr	r3, [pc, #44]	; (8013f34 <tcp_fasttmr+0xc4>)
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d000      	beq.n	8013f10 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013f0e:	e7b8      	b.n	8013e82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	607b      	str	r3, [r7, #4]
 8013f14:	e002      	b.n	8013f1c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	68db      	ldr	r3, [r3, #12]
 8013f1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d1b3      	bne.n	8013e8a <tcp_fasttmr+0x1a>
    }
  }
}
 8013f22:	bf00      	nop
 8013f24:	bf00      	nop
 8013f26:	3708      	adds	r7, #8
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}
 8013f2c:	2000c8ae 	.word	0x2000c8ae
 8013f30:	2000c8a4 	.word	0x2000c8a4
 8013f34:	2000c8ac 	.word	0x2000c8ac

08013f38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b085      	sub	sp, #20
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d109      	bne.n	8013f5a <tcp_process_refused_data+0x22>
 8013f46:	4b37      	ldr	r3, [pc, #220]	; (8014024 <tcp_process_refused_data+0xec>)
 8013f48:	f240 6209 	movw	r2, #1545	; 0x609
 8013f4c:	4936      	ldr	r1, [pc, #216]	; (8014028 <tcp_process_refused_data+0xf0>)
 8013f4e:	4837      	ldr	r0, [pc, #220]	; (801402c <tcp_process_refused_data+0xf4>)
 8013f50:	f00a ff68 	bl	801ee24 <iprintf>
 8013f54:	f06f 030f 	mvn.w	r3, #15
 8013f58:	e060      	b.n	801401c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f5e:	7b5b      	ldrb	r3, [r3, #13]
 8013f60:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013f66:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00b      	beq.n	8013f90 <tcp_process_refused_data+0x58>
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	6918      	ldr	r0, [r3, #16]
 8013f82:	2300      	movs	r3, #0
 8013f84:	68ba      	ldr	r2, [r7, #8]
 8013f86:	6879      	ldr	r1, [r7, #4]
 8013f88:	47a0      	blx	r4
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	73fb      	strb	r3, [r7, #15]
 8013f8e:	e007      	b.n	8013fa0 <tcp_process_refused_data+0x68>
 8013f90:	2300      	movs	r3, #0
 8013f92:	68ba      	ldr	r2, [r7, #8]
 8013f94:	6879      	ldr	r1, [r7, #4]
 8013f96:	2000      	movs	r0, #0
 8013f98:	f000 f8a4 	bl	80140e4 <tcp_recv_null>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d12a      	bne.n	8013ffe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013fa8:	7bbb      	ldrb	r3, [r7, #14]
 8013faa:	f003 0320 	and.w	r3, r3, #32
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d033      	beq.n	801401a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013fba:	d005      	beq.n	8013fc8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013fc0:	3301      	adds	r3, #1
 8013fc2:	b29a      	uxth	r2, r3
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d00b      	beq.n	8013fea <tcp_process_refused_data+0xb2>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6918      	ldr	r0, [r3, #16]
 8013fdc:	2300      	movs	r3, #0
 8013fde:	2200      	movs	r2, #0
 8013fe0:	6879      	ldr	r1, [r7, #4]
 8013fe2:	47a0      	blx	r4
 8013fe4:	4603      	mov	r3, r0
 8013fe6:	73fb      	strb	r3, [r7, #15]
 8013fe8:	e001      	b.n	8013fee <tcp_process_refused_data+0xb6>
 8013fea:	2300      	movs	r3, #0
 8013fec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ff2:	f113 0f0d 	cmn.w	r3, #13
 8013ff6:	d110      	bne.n	801401a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013ff8:	f06f 030c 	mvn.w	r3, #12
 8013ffc:	e00e      	b.n	801401c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014002:	f113 0f0d 	cmn.w	r3, #13
 8014006:	d102      	bne.n	801400e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014008:	f06f 030c 	mvn.w	r3, #12
 801400c:	e006      	b.n	801401c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014014:	f06f 0304 	mvn.w	r3, #4
 8014018:	e000      	b.n	801401c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801401a:	2300      	movs	r3, #0
}
 801401c:	4618      	mov	r0, r3
 801401e:	3714      	adds	r7, #20
 8014020:	46bd      	mov	sp, r7
 8014022:	bd90      	pop	{r4, r7, pc}
 8014024:	0802229c 	.word	0x0802229c
 8014028:	080227ac 	.word	0x080227ac
 801402c:	080222e0 	.word	0x080222e0

08014030 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b084      	sub	sp, #16
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014038:	e007      	b.n	801404a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014040:	6878      	ldr	r0, [r7, #4]
 8014042:	f000 f80a 	bl	801405a <tcp_seg_free>
    seg = next;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1f4      	bne.n	801403a <tcp_segs_free+0xa>
  }
}
 8014050:	bf00      	nop
 8014052:	bf00      	nop
 8014054:	3710      	adds	r7, #16
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b082      	sub	sp, #8
 801405e:	af00      	add	r7, sp, #0
 8014060:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d00c      	beq.n	8014082 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	685b      	ldr	r3, [r3, #4]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d004      	beq.n	801407a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	685b      	ldr	r3, [r3, #4]
 8014074:	4618      	mov	r0, r3
 8014076:	f7fe fb43 	bl	8012700 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801407a:	6879      	ldr	r1, [r7, #4]
 801407c:	2003      	movs	r0, #3
 801407e:	f7fd fc57 	bl	8011930 <memp_free>
  }
}
 8014082:	bf00      	nop
 8014084:	3708      	adds	r7, #8
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
	...

0801408c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d106      	bne.n	80140a8 <tcp_seg_copy+0x1c>
 801409a:	4b0f      	ldr	r3, [pc, #60]	; (80140d8 <tcp_seg_copy+0x4c>)
 801409c:	f240 6282 	movw	r2, #1666	; 0x682
 80140a0:	490e      	ldr	r1, [pc, #56]	; (80140dc <tcp_seg_copy+0x50>)
 80140a2:	480f      	ldr	r0, [pc, #60]	; (80140e0 <tcp_seg_copy+0x54>)
 80140a4:	f00a febe 	bl	801ee24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80140a8:	2003      	movs	r0, #3
 80140aa:	f7fd fbcb 	bl	8011844 <memp_malloc>
 80140ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d101      	bne.n	80140ba <tcp_seg_copy+0x2e>
    return NULL;
 80140b6:	2300      	movs	r3, #0
 80140b8:	e00a      	b.n	80140d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80140ba:	2210      	movs	r2, #16
 80140bc:	6879      	ldr	r1, [r7, #4]
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	f00b f915 	bl	801f2ee <memcpy>
  pbuf_ref(cseg->p);
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	685b      	ldr	r3, [r3, #4]
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fe fbbf 	bl	801284c <pbuf_ref>
  return cseg;
 80140ce:	68fb      	ldr	r3, [r7, #12]
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3710      	adds	r7, #16
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	0802229c 	.word	0x0802229c
 80140dc:	080227f0 	.word	0x080227f0
 80140e0:	080222e0 	.word	0x080222e0

080140e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b084      	sub	sp, #16
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80140f2:	68bb      	ldr	r3, [r7, #8]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d109      	bne.n	801410c <tcp_recv_null+0x28>
 80140f8:	4b12      	ldr	r3, [pc, #72]	; (8014144 <tcp_recv_null+0x60>)
 80140fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80140fe:	4912      	ldr	r1, [pc, #72]	; (8014148 <tcp_recv_null+0x64>)
 8014100:	4812      	ldr	r0, [pc, #72]	; (801414c <tcp_recv_null+0x68>)
 8014102:	f00a fe8f 	bl	801ee24 <iprintf>
 8014106:	f06f 030f 	mvn.w	r3, #15
 801410a:	e016      	b.n	801413a <tcp_recv_null+0x56>

  if (p != NULL) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d009      	beq.n	8014126 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	891b      	ldrh	r3, [r3, #8]
 8014116:	4619      	mov	r1, r3
 8014118:	68b8      	ldr	r0, [r7, #8]
 801411a:	f7ff fad3 	bl	80136c4 <tcp_recved>
    pbuf_free(p);
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7fe faee 	bl	8012700 <pbuf_free>
 8014124:	e008      	b.n	8014138 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d104      	bne.n	8014138 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801412e:	68b8      	ldr	r0, [r7, #8]
 8014130:	f7fe ffa0 	bl	8013074 <tcp_close>
 8014134:	4603      	mov	r3, r0
 8014136:	e000      	b.n	801413a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014138:	2300      	movs	r3, #0
}
 801413a:	4618      	mov	r0, r3
 801413c:	3710      	adds	r7, #16
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	0802229c 	.word	0x0802229c
 8014148:	0802280c 	.word	0x0802280c
 801414c:	080222e0 	.word	0x080222e0

08014150 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b086      	sub	sp, #24
 8014154:	af00      	add	r7, sp, #0
 8014156:	4603      	mov	r3, r0
 8014158:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801415e:	2b00      	cmp	r3, #0
 8014160:	db01      	blt.n	8014166 <tcp_kill_prio+0x16>
 8014162:	79fb      	ldrb	r3, [r7, #7]
 8014164:	e000      	b.n	8014168 <tcp_kill_prio+0x18>
 8014166:	237f      	movs	r3, #127	; 0x7f
 8014168:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801416a:	7afb      	ldrb	r3, [r7, #11]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d034      	beq.n	80141da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014170:	7afb      	ldrb	r3, [r7, #11]
 8014172:	3b01      	subs	r3, #1
 8014174:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014176:	2300      	movs	r3, #0
 8014178:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801417a:	2300      	movs	r3, #0
 801417c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801417e:	4b19      	ldr	r3, [pc, #100]	; (80141e4 <tcp_kill_prio+0x94>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	617b      	str	r3, [r7, #20]
 8014184:	e01f      	b.n	80141c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014186:	697b      	ldr	r3, [r7, #20]
 8014188:	7d5b      	ldrb	r3, [r3, #21]
 801418a:	7afa      	ldrb	r2, [r7, #11]
 801418c:	429a      	cmp	r2, r3
 801418e:	d80c      	bhi.n	80141aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014190:	697b      	ldr	r3, [r7, #20]
 8014192:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014194:	7afa      	ldrb	r2, [r7, #11]
 8014196:	429a      	cmp	r2, r3
 8014198:	d112      	bne.n	80141c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801419a:	4b13      	ldr	r3, [pc, #76]	; (80141e8 <tcp_kill_prio+0x98>)
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	6a1b      	ldr	r3, [r3, #32]
 80141a2:	1ad3      	subs	r3, r2, r3
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d80a      	bhi.n	80141c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80141aa:	4b0f      	ldr	r3, [pc, #60]	; (80141e8 <tcp_kill_prio+0x98>)
 80141ac:	681a      	ldr	r2, [r3, #0]
 80141ae:	697b      	ldr	r3, [r7, #20]
 80141b0:	6a1b      	ldr	r3, [r3, #32]
 80141b2:	1ad3      	subs	r3, r2, r3
 80141b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80141b6:	697b      	ldr	r3, [r7, #20]
 80141b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	7d5b      	ldrb	r3, [r3, #21]
 80141be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	617b      	str	r3, [r7, #20]
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1dc      	bne.n	8014186 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d004      	beq.n	80141dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80141d2:	6938      	ldr	r0, [r7, #16]
 80141d4:	f7ff f894 	bl	8013300 <tcp_abort>
 80141d8:	e000      	b.n	80141dc <tcp_kill_prio+0x8c>
    return;
 80141da:	bf00      	nop
  }
}
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	2000c8a4 	.word	0x2000c8a4
 80141e8:	2000c898 	.word	0x2000c898

080141ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b086      	sub	sp, #24
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	4603      	mov	r3, r0
 80141f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80141f6:	79fb      	ldrb	r3, [r7, #7]
 80141f8:	2b08      	cmp	r3, #8
 80141fa:	d009      	beq.n	8014210 <tcp_kill_state+0x24>
 80141fc:	79fb      	ldrb	r3, [r7, #7]
 80141fe:	2b09      	cmp	r3, #9
 8014200:	d006      	beq.n	8014210 <tcp_kill_state+0x24>
 8014202:	4b1a      	ldr	r3, [pc, #104]	; (801426c <tcp_kill_state+0x80>)
 8014204:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014208:	4919      	ldr	r1, [pc, #100]	; (8014270 <tcp_kill_state+0x84>)
 801420a:	481a      	ldr	r0, [pc, #104]	; (8014274 <tcp_kill_state+0x88>)
 801420c:	f00a fe0a 	bl	801ee24 <iprintf>

  inactivity = 0;
 8014210:	2300      	movs	r3, #0
 8014212:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014214:	2300      	movs	r3, #0
 8014216:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014218:	4b17      	ldr	r3, [pc, #92]	; (8014278 <tcp_kill_state+0x8c>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	617b      	str	r3, [r7, #20]
 801421e:	e017      	b.n	8014250 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	7d1b      	ldrb	r3, [r3, #20]
 8014224:	79fa      	ldrb	r2, [r7, #7]
 8014226:	429a      	cmp	r2, r3
 8014228:	d10f      	bne.n	801424a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801422a:	4b14      	ldr	r3, [pc, #80]	; (801427c <tcp_kill_state+0x90>)
 801422c:	681a      	ldr	r2, [r3, #0]
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	6a1b      	ldr	r3, [r3, #32]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	68fa      	ldr	r2, [r7, #12]
 8014236:	429a      	cmp	r2, r3
 8014238:	d807      	bhi.n	801424a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801423a:	4b10      	ldr	r3, [pc, #64]	; (801427c <tcp_kill_state+0x90>)
 801423c:	681a      	ldr	r2, [r3, #0]
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	6a1b      	ldr	r3, [r3, #32]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801424a:	697b      	ldr	r3, [r7, #20]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	617b      	str	r3, [r7, #20]
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d1e4      	bne.n	8014220 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d003      	beq.n	8014264 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801425c:	2100      	movs	r1, #0
 801425e:	6938      	ldr	r0, [r7, #16]
 8014260:	f7fe ff90 	bl	8013184 <tcp_abandon>
  }
}
 8014264:	bf00      	nop
 8014266:	3718      	adds	r7, #24
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}
 801426c:	0802229c 	.word	0x0802229c
 8014270:	08022828 	.word	0x08022828
 8014274:	080222e0 	.word	0x080222e0
 8014278:	2000c8a4 	.word	0x2000c8a4
 801427c:	2000c898 	.word	0x2000c898

08014280 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b084      	sub	sp, #16
 8014284:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014286:	2300      	movs	r3, #0
 8014288:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801428a:	2300      	movs	r3, #0
 801428c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801428e:	4b12      	ldr	r3, [pc, #72]	; (80142d8 <tcp_kill_timewait+0x58>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	60fb      	str	r3, [r7, #12]
 8014294:	e012      	b.n	80142bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014296:	4b11      	ldr	r3, [pc, #68]	; (80142dc <tcp_kill_timewait+0x5c>)
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	6a1b      	ldr	r3, [r3, #32]
 801429e:	1ad3      	subs	r3, r2, r3
 80142a0:	687a      	ldr	r2, [r7, #4]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d807      	bhi.n	80142b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80142a6:	4b0d      	ldr	r3, [pc, #52]	; (80142dc <tcp_kill_timewait+0x5c>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	6a1b      	ldr	r3, [r3, #32]
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	68db      	ldr	r3, [r3, #12]
 80142ba:	60fb      	str	r3, [r7, #12]
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1e9      	bne.n	8014296 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d002      	beq.n	80142ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80142c8:	68b8      	ldr	r0, [r7, #8]
 80142ca:	f7ff f819 	bl	8013300 <tcp_abort>
  }
}
 80142ce:	bf00      	nop
 80142d0:	3710      	adds	r7, #16
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	2000c8a8 	.word	0x2000c8a8
 80142dc:	2000c898 	.word	0x2000c898

080142e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b082      	sub	sp, #8
 80142e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80142e6:	4b10      	ldr	r3, [pc, #64]	; (8014328 <tcp_handle_closepend+0x48>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80142ec:	e014      	b.n	8014318 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	68db      	ldr	r3, [r3, #12]
 80142f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	8b5b      	ldrh	r3, [r3, #26]
 80142f8:	f003 0308 	and.w	r3, r3, #8
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d009      	beq.n	8014314 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	8b5b      	ldrh	r3, [r3, #26]
 8014304:	f023 0308 	bic.w	r3, r3, #8
 8014308:	b29a      	uxth	r2, r3
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f7fe fe46 	bl	8012fa0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d1e7      	bne.n	80142ee <tcp_handle_closepend+0xe>
  }
}
 801431e:	bf00      	nop
 8014320:	bf00      	nop
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	2000c8a4 	.word	0x2000c8a4

0801432c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b084      	sub	sp, #16
 8014330:	af00      	add	r7, sp, #0
 8014332:	4603      	mov	r3, r0
 8014334:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014336:	2001      	movs	r0, #1
 8014338:	f7fd fa84 	bl	8011844 <memp_malloc>
 801433c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801433e:	68fb      	ldr	r3, [r7, #12]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d126      	bne.n	8014392 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014344:	f7ff ffcc 	bl	80142e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014348:	f7ff ff9a 	bl	8014280 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801434c:	2001      	movs	r0, #1
 801434e:	f7fd fa79 	bl	8011844 <memp_malloc>
 8014352:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d11b      	bne.n	8014392 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801435a:	2009      	movs	r0, #9
 801435c:	f7ff ff46 	bl	80141ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014360:	2001      	movs	r0, #1
 8014362:	f7fd fa6f 	bl	8011844 <memp_malloc>
 8014366:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d111      	bne.n	8014392 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801436e:	2008      	movs	r0, #8
 8014370:	f7ff ff3c 	bl	80141ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014374:	2001      	movs	r0, #1
 8014376:	f7fd fa65 	bl	8011844 <memp_malloc>
 801437a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d107      	bne.n	8014392 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014382:	79fb      	ldrb	r3, [r7, #7]
 8014384:	4618      	mov	r0, r3
 8014386:	f7ff fee3 	bl	8014150 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801438a:	2001      	movs	r0, #1
 801438c:	f7fd fa5a 	bl	8011844 <memp_malloc>
 8014390:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	2b00      	cmp	r3, #0
 8014396:	d03f      	beq.n	8014418 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014398:	229c      	movs	r2, #156	; 0x9c
 801439a:	2100      	movs	r1, #0
 801439c:	68f8      	ldr	r0, [r7, #12]
 801439e:	f00a fe97 	bl	801f0d0 <memset>
    pcb->prio = prio;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	79fa      	ldrb	r2, [r7, #7]
 80143a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80143ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80143b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	22ff      	movs	r2, #255	; 0xff
 80143c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 80143ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2206      	movs	r2, #6
 80143d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2206      	movs	r2, #6
 80143dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2201      	movs	r2, #1
 80143ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80143ee:	4b0d      	ldr	r3, [pc, #52]	; (8014424 <tcp_alloc+0xf8>)
 80143f0:	681a      	ldr	r2, [r3, #0]
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80143f6:	4b0c      	ldr	r3, [pc, #48]	; (8014428 <tcp_alloc+0xfc>)
 80143f8:	781a      	ldrb	r2, [r3, #0]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014404:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	4a08      	ldr	r2, [pc, #32]	; (801442c <tcp_alloc+0x100>)
 801440c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	4a07      	ldr	r2, [pc, #28]	; (8014430 <tcp_alloc+0x104>)
 8014414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014418:	68fb      	ldr	r3, [r7, #12]
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	2000c898 	.word	0x2000c898
 8014428:	2000c8ae 	.word	0x2000c8ae
 801442c:	080140e5 	.word	0x080140e5
 8014430:	006ddd00 	.word	0x006ddd00

08014434 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	4603      	mov	r3, r0
 801443c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801443e:	2040      	movs	r0, #64	; 0x40
 8014440:	f7ff ff74 	bl	801432c <tcp_alloc>
 8014444:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014446:	68fb      	ldr	r3, [r7, #12]
}
 8014448:	4618      	mov	r0, r3
 801444a:	3710      	adds	r7, #16
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014450:	b480      	push	{r7}
 8014452:	b083      	sub	sp, #12
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	611a      	str	r2, [r3, #16]
  }
}
 8014466:	bf00      	nop
 8014468:	370c      	adds	r7, #12
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr
	...

08014474 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00e      	beq.n	80144a2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	7d1b      	ldrb	r3, [r3, #20]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d106      	bne.n	801449a <tcp_recv+0x26>
 801448c:	4b07      	ldr	r3, [pc, #28]	; (80144ac <tcp_recv+0x38>)
 801448e:	f240 72df 	movw	r2, #2015	; 0x7df
 8014492:	4907      	ldr	r1, [pc, #28]	; (80144b0 <tcp_recv+0x3c>)
 8014494:	4807      	ldr	r0, [pc, #28]	; (80144b4 <tcp_recv+0x40>)
 8014496:	f00a fcc5 	bl	801ee24 <iprintf>
    pcb->recv = recv;
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	683a      	ldr	r2, [r7, #0]
 801449e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80144a2:	bf00      	nop
 80144a4:	3708      	adds	r7, #8
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}
 80144aa:	bf00      	nop
 80144ac:	0802229c 	.word	0x0802229c
 80144b0:	08022838 	.word	0x08022838
 80144b4:	080222e0 	.word	0x080222e0

080144b8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	af00      	add	r7, sp, #0
 80144be:	6078      	str	r0, [r7, #4]
 80144c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d00e      	beq.n	80144e6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	7d1b      	ldrb	r3, [r3, #20]
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	d106      	bne.n	80144de <tcp_sent+0x26>
 80144d0:	4b07      	ldr	r3, [pc, #28]	; (80144f0 <tcp_sent+0x38>)
 80144d2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80144d6:	4907      	ldr	r1, [pc, #28]	; (80144f4 <tcp_sent+0x3c>)
 80144d8:	4807      	ldr	r0, [pc, #28]	; (80144f8 <tcp_sent+0x40>)
 80144da:	f00a fca3 	bl	801ee24 <iprintf>
    pcb->sent = sent;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	683a      	ldr	r2, [r7, #0]
 80144e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80144e6:	bf00      	nop
 80144e8:	3708      	adds	r7, #8
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	bf00      	nop
 80144f0:	0802229c 	.word	0x0802229c
 80144f4:	08022860 	.word	0x08022860
 80144f8:	080222e0 	.word	0x080222e0

080144fc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00e      	beq.n	801452a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	7d1b      	ldrb	r3, [r3, #20]
 8014510:	2b01      	cmp	r3, #1
 8014512:	d106      	bne.n	8014522 <tcp_err+0x26>
 8014514:	4b07      	ldr	r3, [pc, #28]	; (8014534 <tcp_err+0x38>)
 8014516:	f640 020d 	movw	r2, #2061	; 0x80d
 801451a:	4907      	ldr	r1, [pc, #28]	; (8014538 <tcp_err+0x3c>)
 801451c:	4807      	ldr	r0, [pc, #28]	; (801453c <tcp_err+0x40>)
 801451e:	f00a fc81 	bl	801ee24 <iprintf>
    pcb->errf = err;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	683a      	ldr	r2, [r7, #0]
 8014526:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801452a:	bf00      	nop
 801452c:	3708      	adds	r7, #8
 801452e:	46bd      	mov	sp, r7
 8014530:	bd80      	pop	{r7, pc}
 8014532:	bf00      	nop
 8014534:	0802229c 	.word	0x0802229c
 8014538:	08022888 	.word	0x08022888
 801453c:	080222e0 	.word	0x080222e0

08014540 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014540:	b480      	push	{r7}
 8014542:	b085      	sub	sp, #20
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
 8014548:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d008      	beq.n	8014562 <tcp_accept+0x22>
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	7d1b      	ldrb	r3, [r3, #20]
 8014554:	2b01      	cmp	r3, #1
 8014556:	d104      	bne.n	8014562 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	683a      	ldr	r2, [r7, #0]
 8014560:	619a      	str	r2, [r3, #24]
  }
}
 8014562:	bf00      	nop
 8014564:	3714      	adds	r7, #20
 8014566:	46bd      	mov	sp, r7
 8014568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456c:	4770      	bx	lr
	...

08014570 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	4613      	mov	r3, r2
 801457c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d107      	bne.n	8014594 <tcp_poll+0x24>
 8014584:	4b0e      	ldr	r3, [pc, #56]	; (80145c0 <tcp_poll+0x50>)
 8014586:	f640 023d 	movw	r2, #2109	; 0x83d
 801458a:	490e      	ldr	r1, [pc, #56]	; (80145c4 <tcp_poll+0x54>)
 801458c:	480e      	ldr	r0, [pc, #56]	; (80145c8 <tcp_poll+0x58>)
 801458e:	f00a fc49 	bl	801ee24 <iprintf>
 8014592:	e011      	b.n	80145b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	7d1b      	ldrb	r3, [r3, #20]
 8014598:	2b01      	cmp	r3, #1
 801459a:	d106      	bne.n	80145aa <tcp_poll+0x3a>
 801459c:	4b08      	ldr	r3, [pc, #32]	; (80145c0 <tcp_poll+0x50>)
 801459e:	f640 023e 	movw	r2, #2110	; 0x83e
 80145a2:	490a      	ldr	r1, [pc, #40]	; (80145cc <tcp_poll+0x5c>)
 80145a4:	4808      	ldr	r0, [pc, #32]	; (80145c8 <tcp_poll+0x58>)
 80145a6:	f00a fc3d 	bl	801ee24 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	68ba      	ldr	r2, [r7, #8]
 80145ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	79fa      	ldrb	r2, [r7, #7]
 80145b6:	775a      	strb	r2, [r3, #29]
}
 80145b8:	3710      	adds	r7, #16
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	0802229c 	.word	0x0802229c
 80145c4:	080228b0 	.word	0x080228b0
 80145c8:	080222e0 	.word	0x080222e0
 80145cc:	080228c8 	.word	0x080228c8

080145d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b082      	sub	sp, #8
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d107      	bne.n	80145ee <tcp_pcb_purge+0x1e>
 80145de:	4b21      	ldr	r3, [pc, #132]	; (8014664 <tcp_pcb_purge+0x94>)
 80145e0:	f640 0251 	movw	r2, #2129	; 0x851
 80145e4:	4920      	ldr	r1, [pc, #128]	; (8014668 <tcp_pcb_purge+0x98>)
 80145e6:	4821      	ldr	r0, [pc, #132]	; (801466c <tcp_pcb_purge+0x9c>)
 80145e8:	f00a fc1c 	bl	801ee24 <iprintf>
 80145ec:	e037      	b.n	801465e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	7d1b      	ldrb	r3, [r3, #20]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d033      	beq.n	801465e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80145fa:	2b0a      	cmp	r3, #10
 80145fc:	d02f      	beq.n	801465e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014602:	2b01      	cmp	r3, #1
 8014604:	d02b      	beq.n	801465e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801460a:	2b00      	cmp	r3, #0
 801460c:	d007      	beq.n	801461e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014612:	4618      	mov	r0, r3
 8014614:	f7fe f874 	bl	8012700 <pbuf_free>
      pcb->refused_data = NULL;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2200      	movs	r2, #0
 801461c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014622:	2b00      	cmp	r3, #0
 8014624:	d002      	beq.n	801462c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f000 f986 	bl	8014938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014632:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014638:	4618      	mov	r0, r3
 801463a:	f7ff fcf9 	bl	8014030 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014642:	4618      	mov	r0, r3
 8014644:	f7ff fcf4 	bl	8014030 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2200      	movs	r2, #0
 801464c:	66da      	str	r2, [r3, #108]	; 0x6c
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2200      	movs	r2, #0
 801465a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	0802229c 	.word	0x0802229c
 8014668:	080228e8 	.word	0x080228e8
 801466c:	080222e0 	.word	0x080222e0

08014670 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b084      	sub	sp, #16
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d106      	bne.n	801468e <tcp_pcb_remove+0x1e>
 8014680:	4b3e      	ldr	r3, [pc, #248]	; (801477c <tcp_pcb_remove+0x10c>)
 8014682:	f640 0283 	movw	r2, #2179	; 0x883
 8014686:	493e      	ldr	r1, [pc, #248]	; (8014780 <tcp_pcb_remove+0x110>)
 8014688:	483e      	ldr	r0, [pc, #248]	; (8014784 <tcp_pcb_remove+0x114>)
 801468a:	f00a fbcb 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d106      	bne.n	80146a2 <tcp_pcb_remove+0x32>
 8014694:	4b39      	ldr	r3, [pc, #228]	; (801477c <tcp_pcb_remove+0x10c>)
 8014696:	f640 0284 	movw	r2, #2180	; 0x884
 801469a:	493b      	ldr	r1, [pc, #236]	; (8014788 <tcp_pcb_remove+0x118>)
 801469c:	4839      	ldr	r0, [pc, #228]	; (8014784 <tcp_pcb_remove+0x114>)
 801469e:	f00a fbc1 	bl	801ee24 <iprintf>

  TCP_RMV(pcblist, pcb);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	683a      	ldr	r2, [r7, #0]
 80146a8:	429a      	cmp	r2, r3
 80146aa:	d105      	bne.n	80146b8 <tcp_pcb_remove+0x48>
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	68da      	ldr	r2, [r3, #12]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	601a      	str	r2, [r3, #0]
 80146b6:	e013      	b.n	80146e0 <tcp_pcb_remove+0x70>
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	60fb      	str	r3, [r7, #12]
 80146be:	e00c      	b.n	80146da <tcp_pcb_remove+0x6a>
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	683a      	ldr	r2, [r7, #0]
 80146c6:	429a      	cmp	r2, r3
 80146c8:	d104      	bne.n	80146d4 <tcp_pcb_remove+0x64>
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	68da      	ldr	r2, [r3, #12]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	60da      	str	r2, [r3, #12]
 80146d2:	e005      	b.n	80146e0 <tcp_pcb_remove+0x70>
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	60fb      	str	r3, [r7, #12]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d1ef      	bne.n	80146c0 <tcp_pcb_remove+0x50>
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	2200      	movs	r2, #0
 80146e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80146e6:	6838      	ldr	r0, [r7, #0]
 80146e8:	f7ff ff72 	bl	80145d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	7d1b      	ldrb	r3, [r3, #20]
 80146f0:	2b0a      	cmp	r3, #10
 80146f2:	d013      	beq.n	801471c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80146f8:	2b01      	cmp	r3, #1
 80146fa:	d00f      	beq.n	801471c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80146fc:	683b      	ldr	r3, [r7, #0]
 80146fe:	8b5b      	ldrh	r3, [r3, #26]
 8014700:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014704:	2b00      	cmp	r3, #0
 8014706:	d009      	beq.n	801471c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014708:	683b      	ldr	r3, [r7, #0]
 801470a:	8b5b      	ldrh	r3, [r3, #26]
 801470c:	f043 0302 	orr.w	r3, r3, #2
 8014710:	b29a      	uxth	r2, r3
 8014712:	683b      	ldr	r3, [r7, #0]
 8014714:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014716:	6838      	ldr	r0, [r7, #0]
 8014718:	f003 fbc6 	bl	8017ea8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801471c:	683b      	ldr	r3, [r7, #0]
 801471e:	7d1b      	ldrb	r3, [r3, #20]
 8014720:	2b01      	cmp	r3, #1
 8014722:	d020      	beq.n	8014766 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014728:	2b00      	cmp	r3, #0
 801472a:	d006      	beq.n	801473a <tcp_pcb_remove+0xca>
 801472c:	4b13      	ldr	r3, [pc, #76]	; (801477c <tcp_pcb_remove+0x10c>)
 801472e:	f640 0293 	movw	r2, #2195	; 0x893
 8014732:	4916      	ldr	r1, [pc, #88]	; (801478c <tcp_pcb_remove+0x11c>)
 8014734:	4813      	ldr	r0, [pc, #76]	; (8014784 <tcp_pcb_remove+0x114>)
 8014736:	f00a fb75 	bl	801ee24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801473a:	683b      	ldr	r3, [r7, #0]
 801473c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801473e:	2b00      	cmp	r3, #0
 8014740:	d006      	beq.n	8014750 <tcp_pcb_remove+0xe0>
 8014742:	4b0e      	ldr	r3, [pc, #56]	; (801477c <tcp_pcb_remove+0x10c>)
 8014744:	f640 0294 	movw	r2, #2196	; 0x894
 8014748:	4911      	ldr	r1, [pc, #68]	; (8014790 <tcp_pcb_remove+0x120>)
 801474a:	480e      	ldr	r0, [pc, #56]	; (8014784 <tcp_pcb_remove+0x114>)
 801474c:	f00a fb6a 	bl	801ee24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014750:	683b      	ldr	r3, [r7, #0]
 8014752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014754:	2b00      	cmp	r3, #0
 8014756:	d006      	beq.n	8014766 <tcp_pcb_remove+0xf6>
 8014758:	4b08      	ldr	r3, [pc, #32]	; (801477c <tcp_pcb_remove+0x10c>)
 801475a:	f640 0296 	movw	r2, #2198	; 0x896
 801475e:	490d      	ldr	r1, [pc, #52]	; (8014794 <tcp_pcb_remove+0x124>)
 8014760:	4808      	ldr	r0, [pc, #32]	; (8014784 <tcp_pcb_remove+0x114>)
 8014762:	f00a fb5f 	bl	801ee24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	2200      	movs	r2, #0
 801476a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	2200      	movs	r2, #0
 8014770:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014772:	bf00      	nop
 8014774:	3710      	adds	r7, #16
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}
 801477a:	bf00      	nop
 801477c:	0802229c 	.word	0x0802229c
 8014780:	08022904 	.word	0x08022904
 8014784:	080222e0 	.word	0x080222e0
 8014788:	08022920 	.word	0x08022920
 801478c:	08022940 	.word	0x08022940
 8014790:	08022958 	.word	0x08022958
 8014794:	08022974 	.word	0x08022974

08014798 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_next_iss+0x1c>
 80147a6:	4b0a      	ldr	r3, [pc, #40]	; (80147d0 <tcp_next_iss+0x38>)
 80147a8:	f640 02af 	movw	r2, #2223	; 0x8af
 80147ac:	4909      	ldr	r1, [pc, #36]	; (80147d4 <tcp_next_iss+0x3c>)
 80147ae:	480a      	ldr	r0, [pc, #40]	; (80147d8 <tcp_next_iss+0x40>)
 80147b0:	f00a fb38 	bl	801ee24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80147b4:	4b09      	ldr	r3, [pc, #36]	; (80147dc <tcp_next_iss+0x44>)
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	4b09      	ldr	r3, [pc, #36]	; (80147e0 <tcp_next_iss+0x48>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4413      	add	r3, r2
 80147be:	4a07      	ldr	r2, [pc, #28]	; (80147dc <tcp_next_iss+0x44>)
 80147c0:	6013      	str	r3, [r2, #0]
  return iss;
 80147c2:	4b06      	ldr	r3, [pc, #24]	; (80147dc <tcp_next_iss+0x44>)
 80147c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80147c6:	4618      	mov	r0, r3
 80147c8:	3708      	adds	r7, #8
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	0802229c 	.word	0x0802229c
 80147d4:	0802298c 	.word	0x0802298c
 80147d8:	080222e0 	.word	0x080222e0
 80147dc:	20000028 	.word	0x20000028
 80147e0:	2000c898 	.word	0x2000c898

080147e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	4603      	mov	r3, r0
 80147ec:	60b9      	str	r1, [r7, #8]
 80147ee:	607a      	str	r2, [r7, #4]
 80147f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d106      	bne.n	8014806 <tcp_eff_send_mss_netif+0x22>
 80147f8:	4b14      	ldr	r3, [pc, #80]	; (801484c <tcp_eff_send_mss_netif+0x68>)
 80147fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80147fe:	4914      	ldr	r1, [pc, #80]	; (8014850 <tcp_eff_send_mss_netif+0x6c>)
 8014800:	4814      	ldr	r0, [pc, #80]	; (8014854 <tcp_eff_send_mss_netif+0x70>)
 8014802:	f00a fb0f 	bl	801ee24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d101      	bne.n	8014810 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801480c:	89fb      	ldrh	r3, [r7, #14]
 801480e:	e019      	b.n	8014844 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014814:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8014816:	8afb      	ldrh	r3, [r7, #22]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d012      	beq.n	8014842 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801481c:	2328      	movs	r3, #40	; 0x28
 801481e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014820:	8afa      	ldrh	r2, [r7, #22]
 8014822:	8abb      	ldrh	r3, [r7, #20]
 8014824:	429a      	cmp	r2, r3
 8014826:	d904      	bls.n	8014832 <tcp_eff_send_mss_netif+0x4e>
 8014828:	8afa      	ldrh	r2, [r7, #22]
 801482a:	8abb      	ldrh	r3, [r7, #20]
 801482c:	1ad3      	subs	r3, r2, r3
 801482e:	b29b      	uxth	r3, r3
 8014830:	e000      	b.n	8014834 <tcp_eff_send_mss_netif+0x50>
 8014832:	2300      	movs	r3, #0
 8014834:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8014836:	8a7a      	ldrh	r2, [r7, #18]
 8014838:	89fb      	ldrh	r3, [r7, #14]
 801483a:	4293      	cmp	r3, r2
 801483c:	bf28      	it	cs
 801483e:	4613      	movcs	r3, r2
 8014840:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014842:	89fb      	ldrh	r3, [r7, #14]
}
 8014844:	4618      	mov	r0, r3
 8014846:	3718      	adds	r7, #24
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	0802229c 	.word	0x0802229c
 8014850:	080229a8 	.word	0x080229a8
 8014854:	080222e0 	.word	0x080222e0

08014858 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d119      	bne.n	80148a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801486c:	4b10      	ldr	r3, [pc, #64]	; (80148b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801486e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8014872:	4910      	ldr	r1, [pc, #64]	; (80148b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8014874:	4810      	ldr	r0, [pc, #64]	; (80148b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8014876:	f00a fad5 	bl	801ee24 <iprintf>

  while (pcb != NULL) {
 801487a:	e011      	b.n	80148a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	681a      	ldr	r2, [r3, #0]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	429a      	cmp	r2, r3
 8014886:	d108      	bne.n	801489a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	68db      	ldr	r3, [r3, #12]
 801488c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801488e:	68f8      	ldr	r0, [r7, #12]
 8014890:	f7fe fd36 	bl	8013300 <tcp_abort>
      pcb = next;
 8014894:	68bb      	ldr	r3, [r7, #8]
 8014896:	60fb      	str	r3, [r7, #12]
 8014898:	e002      	b.n	80148a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d1ea      	bne.n	801487c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80148a6:	bf00      	nop
 80148a8:	bf00      	nop
 80148aa:	3710      	adds	r7, #16
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}
 80148b0:	0802229c 	.word	0x0802229c
 80148b4:	080229d0 	.word	0x080229d0
 80148b8:	080222e0 	.word	0x080222e0

080148bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	6078      	str	r0, [r7, #4]
 80148c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d02a      	beq.n	8014922 <tcp_netif_ip_addr_changed+0x66>
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d026      	beq.n	8014922 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80148d4:	4b15      	ldr	r3, [pc, #84]	; (801492c <tcp_netif_ip_addr_changed+0x70>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	4619      	mov	r1, r3
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f7ff ffbc 	bl	8014858 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80148e0:	4b13      	ldr	r3, [pc, #76]	; (8014930 <tcp_netif_ip_addr_changed+0x74>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4619      	mov	r1, r3
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f7ff ffb6 	bl	8014858 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d017      	beq.n	8014922 <tcp_netif_ip_addr_changed+0x66>
 80148f2:	683b      	ldr	r3, [r7, #0]
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d013      	beq.n	8014922 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80148fa:	4b0e      	ldr	r3, [pc, #56]	; (8014934 <tcp_netif_ip_addr_changed+0x78>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	60fb      	str	r3, [r7, #12]
 8014900:	e00c      	b.n	801491c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	681a      	ldr	r2, [r3, #0]
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	429a      	cmp	r2, r3
 801490c:	d103      	bne.n	8014916 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	60fb      	str	r3, [r7, #12]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d1ef      	bne.n	8014902 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	2000c8a4 	.word	0x2000c8a4
 8014930:	2000c89c 	.word	0x2000c89c
 8014934:	2000c8a0 	.word	0x2000c8a0

08014938 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014944:	2b00      	cmp	r3, #0
 8014946:	d007      	beq.n	8014958 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff fb6f 	bl	8014030 <tcp_segs_free>
    pcb->ooseq = NULL;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014958:	bf00      	nop
 801495a:	3708      	adds	r7, #8
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}

08014960 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8014960:	b590      	push	{r4, r7, lr}
 8014962:	b08d      	sub	sp, #52	; 0x34
 8014964:	af04      	add	r7, sp, #16
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d105      	bne.n	801497c <tcp_input+0x1c>
 8014970:	4b9b      	ldr	r3, [pc, #620]	; (8014be0 <tcp_input+0x280>)
 8014972:	2283      	movs	r2, #131	; 0x83
 8014974:	499b      	ldr	r1, [pc, #620]	; (8014be4 <tcp_input+0x284>)
 8014976:	489c      	ldr	r0, [pc, #624]	; (8014be8 <tcp_input+0x288>)
 8014978:	f00a fa54 	bl	801ee24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	685b      	ldr	r3, [r3, #4]
 8014980:	4a9a      	ldr	r2, [pc, #616]	; (8014bec <tcp_input+0x28c>)
 8014982:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	895b      	ldrh	r3, [r3, #10]
 8014988:	2b13      	cmp	r3, #19
 801498a:	f240 83d1 	bls.w	8015130 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801498e:	4b98      	ldr	r3, [pc, #608]	; (8014bf0 <tcp_input+0x290>)
 8014990:	695b      	ldr	r3, [r3, #20]
 8014992:	4a97      	ldr	r2, [pc, #604]	; (8014bf0 <tcp_input+0x290>)
 8014994:	6812      	ldr	r2, [r2, #0]
 8014996:	4611      	mov	r1, r2
 8014998:	4618      	mov	r0, r3
 801499a:	f008 fa7b 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801499e:	4603      	mov	r3, r0
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	f040 83c7 	bne.w	8015134 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80149a6:	4b92      	ldr	r3, [pc, #584]	; (8014bf0 <tcp_input+0x290>)
 80149a8:	695b      	ldr	r3, [r3, #20]
 80149aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80149ae:	2be0      	cmp	r3, #224	; 0xe0
 80149b0:	f000 83c0 	beq.w	8015134 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80149b4:	4b8d      	ldr	r3, [pc, #564]	; (8014bec <tcp_input+0x28c>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	899b      	ldrh	r3, [r3, #12]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	4618      	mov	r0, r3
 80149be:	f7fc fa69 	bl	8010e94 <lwip_htons>
 80149c2:	4603      	mov	r3, r0
 80149c4:	0b1b      	lsrs	r3, r3, #12
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	009b      	lsls	r3, r3, #2
 80149cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80149ce:	7cbb      	ldrb	r3, [r7, #18]
 80149d0:	2b13      	cmp	r3, #19
 80149d2:	f240 83b1 	bls.w	8015138 <tcp_input+0x7d8>
 80149d6:	7cbb      	ldrb	r3, [r7, #18]
 80149d8:	b29a      	uxth	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	891b      	ldrh	r3, [r3, #8]
 80149de:	429a      	cmp	r2, r3
 80149e0:	f200 83aa 	bhi.w	8015138 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80149e4:	7cbb      	ldrb	r3, [r7, #18]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	3b14      	subs	r3, #20
 80149ea:	b29a      	uxth	r2, r3
 80149ec:	4b81      	ldr	r3, [pc, #516]	; (8014bf4 <tcp_input+0x294>)
 80149ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80149f0:	4b81      	ldr	r3, [pc, #516]	; (8014bf8 <tcp_input+0x298>)
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	895a      	ldrh	r2, [r3, #10]
 80149fa:	7cbb      	ldrb	r3, [r7, #18]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d309      	bcc.n	8014a16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014a02:	4b7c      	ldr	r3, [pc, #496]	; (8014bf4 <tcp_input+0x294>)
 8014a04:	881a      	ldrh	r2, [r3, #0]
 8014a06:	4b7d      	ldr	r3, [pc, #500]	; (8014bfc <tcp_input+0x29c>)
 8014a08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014a0a:	7cbb      	ldrb	r3, [r7, #18]
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7fd fdf0 	bl	80125f4 <pbuf_remove_header>
 8014a14:	e04e      	b.n	8014ab4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d105      	bne.n	8014a2a <tcp_input+0xca>
 8014a1e:	4b70      	ldr	r3, [pc, #448]	; (8014be0 <tcp_input+0x280>)
 8014a20:	22c2      	movs	r2, #194	; 0xc2
 8014a22:	4977      	ldr	r1, [pc, #476]	; (8014c00 <tcp_input+0x2a0>)
 8014a24:	4870      	ldr	r0, [pc, #448]	; (8014be8 <tcp_input+0x288>)
 8014a26:	f00a f9fd 	bl	801ee24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014a2a:	2114      	movs	r1, #20
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7fd fde1 	bl	80125f4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	895a      	ldrh	r2, [r3, #10]
 8014a36:	4b71      	ldr	r3, [pc, #452]	; (8014bfc <tcp_input+0x29c>)
 8014a38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014a3a:	4b6e      	ldr	r3, [pc, #440]	; (8014bf4 <tcp_input+0x294>)
 8014a3c:	881a      	ldrh	r2, [r3, #0]
 8014a3e:	4b6f      	ldr	r3, [pc, #444]	; (8014bfc <tcp_input+0x29c>)
 8014a40:	881b      	ldrh	r3, [r3, #0]
 8014a42:	1ad3      	subs	r3, r2, r3
 8014a44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014a46:	4b6d      	ldr	r3, [pc, #436]	; (8014bfc <tcp_input+0x29c>)
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	4619      	mov	r1, r3
 8014a4c:	6878      	ldr	r0, [r7, #4]
 8014a4e:	f7fd fdd1 	bl	80125f4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	895b      	ldrh	r3, [r3, #10]
 8014a58:	8a3a      	ldrh	r2, [r7, #16]
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	f200 836e 	bhi.w	801513c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	4a64      	ldr	r2, [pc, #400]	; (8014bf8 <tcp_input+0x298>)
 8014a68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	8a3a      	ldrh	r2, [r7, #16]
 8014a70:	4611      	mov	r1, r2
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7fd fdbe 	bl	80125f4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	891a      	ldrh	r2, [r3, #8]
 8014a7c:	8a3b      	ldrh	r3, [r7, #16]
 8014a7e:	1ad3      	subs	r3, r2, r3
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	895b      	ldrh	r3, [r3, #10]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d005      	beq.n	8014a9a <tcp_input+0x13a>
 8014a8e:	4b54      	ldr	r3, [pc, #336]	; (8014be0 <tcp_input+0x280>)
 8014a90:	22df      	movs	r2, #223	; 0xdf
 8014a92:	495c      	ldr	r1, [pc, #368]	; (8014c04 <tcp_input+0x2a4>)
 8014a94:	4854      	ldr	r0, [pc, #336]	; (8014be8 <tcp_input+0x288>)
 8014a96:	f00a f9c5 	bl	801ee24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	891a      	ldrh	r2, [r3, #8]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	891b      	ldrh	r3, [r3, #8]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	d005      	beq.n	8014ab4 <tcp_input+0x154>
 8014aa8:	4b4d      	ldr	r3, [pc, #308]	; (8014be0 <tcp_input+0x280>)
 8014aaa:	22e0      	movs	r2, #224	; 0xe0
 8014aac:	4956      	ldr	r1, [pc, #344]	; (8014c08 <tcp_input+0x2a8>)
 8014aae:	484e      	ldr	r0, [pc, #312]	; (8014be8 <tcp_input+0x288>)
 8014ab0:	f00a f9b8 	bl	801ee24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014ab4:	4b4d      	ldr	r3, [pc, #308]	; (8014bec <tcp_input+0x28c>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	4a4b      	ldr	r2, [pc, #300]	; (8014bec <tcp_input+0x28c>)
 8014abe:	6814      	ldr	r4, [r2, #0]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fc f9e7 	bl	8010e94 <lwip_htons>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014aca:	4b48      	ldr	r3, [pc, #288]	; (8014bec <tcp_input+0x28c>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	885b      	ldrh	r3, [r3, #2]
 8014ad0:	b29b      	uxth	r3, r3
 8014ad2:	4a46      	ldr	r2, [pc, #280]	; (8014bec <tcp_input+0x28c>)
 8014ad4:	6814      	ldr	r4, [r2, #0]
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7fc f9dc 	bl	8010e94 <lwip_htons>
 8014adc:	4603      	mov	r3, r0
 8014ade:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014ae0:	4b42      	ldr	r3, [pc, #264]	; (8014bec <tcp_input+0x28c>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	4a41      	ldr	r2, [pc, #260]	; (8014bec <tcp_input+0x28c>)
 8014ae8:	6814      	ldr	r4, [r2, #0]
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fc f9e7 	bl	8010ebe <lwip_htonl>
 8014af0:	4603      	mov	r3, r0
 8014af2:	6063      	str	r3, [r4, #4]
 8014af4:	6863      	ldr	r3, [r4, #4]
 8014af6:	4a45      	ldr	r2, [pc, #276]	; (8014c0c <tcp_input+0x2ac>)
 8014af8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014afa:	4b3c      	ldr	r3, [pc, #240]	; (8014bec <tcp_input+0x28c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	4a3a      	ldr	r2, [pc, #232]	; (8014bec <tcp_input+0x28c>)
 8014b02:	6814      	ldr	r4, [r2, #0]
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fc f9da 	bl	8010ebe <lwip_htonl>
 8014b0a:	4603      	mov	r3, r0
 8014b0c:	60a3      	str	r3, [r4, #8]
 8014b0e:	68a3      	ldr	r3, [r4, #8]
 8014b10:	4a3f      	ldr	r2, [pc, #252]	; (8014c10 <tcp_input+0x2b0>)
 8014b12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014b14:	4b35      	ldr	r3, [pc, #212]	; (8014bec <tcp_input+0x28c>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	89db      	ldrh	r3, [r3, #14]
 8014b1a:	b29b      	uxth	r3, r3
 8014b1c:	4a33      	ldr	r2, [pc, #204]	; (8014bec <tcp_input+0x28c>)
 8014b1e:	6814      	ldr	r4, [r2, #0]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7fc f9b7 	bl	8010e94 <lwip_htons>
 8014b26:	4603      	mov	r3, r0
 8014b28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014b2a:	4b30      	ldr	r3, [pc, #192]	; (8014bec <tcp_input+0x28c>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	899b      	ldrh	r3, [r3, #12]
 8014b30:	b29b      	uxth	r3, r3
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7fc f9ae 	bl	8010e94 <lwip_htons>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	b2db      	uxtb	r3, r3
 8014b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b40:	b2da      	uxtb	r2, r3
 8014b42:	4b34      	ldr	r3, [pc, #208]	; (8014c14 <tcp_input+0x2b4>)
 8014b44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	891a      	ldrh	r2, [r3, #8]
 8014b4a:	4b33      	ldr	r3, [pc, #204]	; (8014c18 <tcp_input+0x2b8>)
 8014b4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8014b4e:	4b31      	ldr	r3, [pc, #196]	; (8014c14 <tcp_input+0x2b4>)
 8014b50:	781b      	ldrb	r3, [r3, #0]
 8014b52:	f003 0303 	and.w	r3, r3, #3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d00c      	beq.n	8014b74 <tcp_input+0x214>
    tcplen++;
 8014b5a:	4b2f      	ldr	r3, [pc, #188]	; (8014c18 <tcp_input+0x2b8>)
 8014b5c:	881b      	ldrh	r3, [r3, #0]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	b29a      	uxth	r2, r3
 8014b62:	4b2d      	ldr	r3, [pc, #180]	; (8014c18 <tcp_input+0x2b8>)
 8014b64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	891a      	ldrh	r2, [r3, #8]
 8014b6a:	4b2b      	ldr	r3, [pc, #172]	; (8014c18 <tcp_input+0x2b8>)
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	f200 82e6 	bhi.w	8015140 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014b74:	2300      	movs	r3, #0
 8014b76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b78:	4b28      	ldr	r3, [pc, #160]	; (8014c1c <tcp_input+0x2bc>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	61fb      	str	r3, [r7, #28]
 8014b7e:	e09d      	b.n	8014cbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014b80:	69fb      	ldr	r3, [r7, #28]
 8014b82:	7d1b      	ldrb	r3, [r3, #20]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d105      	bne.n	8014b94 <tcp_input+0x234>
 8014b88:	4b15      	ldr	r3, [pc, #84]	; (8014be0 <tcp_input+0x280>)
 8014b8a:	22fb      	movs	r2, #251	; 0xfb
 8014b8c:	4924      	ldr	r1, [pc, #144]	; (8014c20 <tcp_input+0x2c0>)
 8014b8e:	4816      	ldr	r0, [pc, #88]	; (8014be8 <tcp_input+0x288>)
 8014b90:	f00a f948 	bl	801ee24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014b94:	69fb      	ldr	r3, [r7, #28]
 8014b96:	7d1b      	ldrb	r3, [r3, #20]
 8014b98:	2b0a      	cmp	r3, #10
 8014b9a:	d105      	bne.n	8014ba8 <tcp_input+0x248>
 8014b9c:	4b10      	ldr	r3, [pc, #64]	; (8014be0 <tcp_input+0x280>)
 8014b9e:	22fc      	movs	r2, #252	; 0xfc
 8014ba0:	4920      	ldr	r1, [pc, #128]	; (8014c24 <tcp_input+0x2c4>)
 8014ba2:	4811      	ldr	r0, [pc, #68]	; (8014be8 <tcp_input+0x288>)
 8014ba4:	f00a f93e 	bl	801ee24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b01      	cmp	r3, #1
 8014bae:	d105      	bne.n	8014bbc <tcp_input+0x25c>
 8014bb0:	4b0b      	ldr	r3, [pc, #44]	; (8014be0 <tcp_input+0x280>)
 8014bb2:	22fd      	movs	r2, #253	; 0xfd
 8014bb4:	491c      	ldr	r1, [pc, #112]	; (8014c28 <tcp_input+0x2c8>)
 8014bb6:	480c      	ldr	r0, [pc, #48]	; (8014be8 <tcp_input+0x288>)
 8014bb8:	f00a f934 	bl	801ee24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bbc:	69fb      	ldr	r3, [r7, #28]
 8014bbe:	7a1b      	ldrb	r3, [r3, #8]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d033      	beq.n	8014c2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014bc4:	69fb      	ldr	r3, [r7, #28]
 8014bc6:	7a1a      	ldrb	r2, [r3, #8]
 8014bc8:	4b09      	ldr	r3, [pc, #36]	; (8014bf0 <tcp_input+0x290>)
 8014bca:	685b      	ldr	r3, [r3, #4]
 8014bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d029      	beq.n	8014c2c <tcp_input+0x2cc>
      prev = pcb;
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	61bb      	str	r3, [r7, #24]
      continue;
 8014bdc:	e06b      	b.n	8014cb6 <tcp_input+0x356>
 8014bde:	bf00      	nop
 8014be0:	08022a04 	.word	0x08022a04
 8014be4:	08022a38 	.word	0x08022a38
 8014be8:	08022a50 	.word	0x08022a50
 8014bec:	2000c8c0 	.word	0x2000c8c0
 8014bf0:	20009124 	.word	0x20009124
 8014bf4:	2000c8c4 	.word	0x2000c8c4
 8014bf8:	2000c8c8 	.word	0x2000c8c8
 8014bfc:	2000c8c6 	.word	0x2000c8c6
 8014c00:	08022a78 	.word	0x08022a78
 8014c04:	08022a88 	.word	0x08022a88
 8014c08:	08022a94 	.word	0x08022a94
 8014c0c:	2000c8d0 	.word	0x2000c8d0
 8014c10:	2000c8d4 	.word	0x2000c8d4
 8014c14:	2000c8dc 	.word	0x2000c8dc
 8014c18:	2000c8da 	.word	0x2000c8da
 8014c1c:	2000c8a4 	.word	0x2000c8a4
 8014c20:	08022ab4 	.word	0x08022ab4
 8014c24:	08022adc 	.word	0x08022adc
 8014c28:	08022b08 	.word	0x08022b08
    }

    if (pcb->remote_port == tcphdr->src &&
 8014c2c:	69fb      	ldr	r3, [r7, #28]
 8014c2e:	8b1a      	ldrh	r2, [r3, #24]
 8014c30:	4b72      	ldr	r3, [pc, #456]	; (8014dfc <tcp_input+0x49c>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	429a      	cmp	r2, r3
 8014c3a:	d13a      	bne.n	8014cb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	8ada      	ldrh	r2, [r3, #22]
 8014c40:	4b6e      	ldr	r3, [pc, #440]	; (8014dfc <tcp_input+0x49c>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	885b      	ldrh	r3, [r3, #2]
 8014c46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014c48:	429a      	cmp	r2, r3
 8014c4a:	d132      	bne.n	8014cb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	685a      	ldr	r2, [r3, #4]
 8014c50:	4b6b      	ldr	r3, [pc, #428]	; (8014e00 <tcp_input+0x4a0>)
 8014c52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d12c      	bne.n	8014cb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014c58:	69fb      	ldr	r3, [r7, #28]
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	4b68      	ldr	r3, [pc, #416]	; (8014e00 <tcp_input+0x4a0>)
 8014c5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014c60:	429a      	cmp	r2, r3
 8014c62:	d126      	bne.n	8014cb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	68db      	ldr	r3, [r3, #12]
 8014c68:	69fa      	ldr	r2, [r7, #28]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d106      	bne.n	8014c7c <tcp_input+0x31c>
 8014c6e:	4b65      	ldr	r3, [pc, #404]	; (8014e04 <tcp_input+0x4a4>)
 8014c70:	f240 120d 	movw	r2, #269	; 0x10d
 8014c74:	4964      	ldr	r1, [pc, #400]	; (8014e08 <tcp_input+0x4a8>)
 8014c76:	4865      	ldr	r0, [pc, #404]	; (8014e0c <tcp_input+0x4ac>)
 8014c78:	f00a f8d4 	bl	801ee24 <iprintf>
      if (prev != NULL) {
 8014c7c:	69bb      	ldr	r3, [r7, #24]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00a      	beq.n	8014c98 <tcp_input+0x338>
        prev->next = pcb->next;
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	68da      	ldr	r2, [r3, #12]
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014c8a:	4b61      	ldr	r3, [pc, #388]	; (8014e10 <tcp_input+0x4b0>)
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8014c92:	4a5f      	ldr	r2, [pc, #380]	; (8014e10 <tcp_input+0x4b0>)
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	68db      	ldr	r3, [r3, #12]
 8014c9c:	69fa      	ldr	r2, [r7, #28]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d111      	bne.n	8014cc6 <tcp_input+0x366>
 8014ca2:	4b58      	ldr	r3, [pc, #352]	; (8014e04 <tcp_input+0x4a4>)
 8014ca4:	f240 1215 	movw	r2, #277	; 0x115
 8014ca8:	495a      	ldr	r1, [pc, #360]	; (8014e14 <tcp_input+0x4b4>)
 8014caa:	4858      	ldr	r0, [pc, #352]	; (8014e0c <tcp_input+0x4ac>)
 8014cac:	f00a f8ba 	bl	801ee24 <iprintf>
      break;
 8014cb0:	e009      	b.n	8014cc6 <tcp_input+0x366>
    }
    prev = pcb;
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cb6:	69fb      	ldr	r3, [r7, #28]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	61fb      	str	r3, [r7, #28]
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	f47f af5e 	bne.w	8014b80 <tcp_input+0x220>
 8014cc4:	e000      	b.n	8014cc8 <tcp_input+0x368>
      break;
 8014cc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8014cc8:	69fb      	ldr	r3, [r7, #28]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	f040 80aa 	bne.w	8014e24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cd0:	4b51      	ldr	r3, [pc, #324]	; (8014e18 <tcp_input+0x4b8>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	61fb      	str	r3, [r7, #28]
 8014cd6:	e03f      	b.n	8014d58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014cd8:	69fb      	ldr	r3, [r7, #28]
 8014cda:	7d1b      	ldrb	r3, [r3, #20]
 8014cdc:	2b0a      	cmp	r3, #10
 8014cde:	d006      	beq.n	8014cee <tcp_input+0x38e>
 8014ce0:	4b48      	ldr	r3, [pc, #288]	; (8014e04 <tcp_input+0x4a4>)
 8014ce2:	f240 121f 	movw	r2, #287	; 0x11f
 8014ce6:	494d      	ldr	r1, [pc, #308]	; (8014e1c <tcp_input+0x4bc>)
 8014ce8:	4848      	ldr	r0, [pc, #288]	; (8014e0c <tcp_input+0x4ac>)
 8014cea:	f00a f89b 	bl	801ee24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014cee:	69fb      	ldr	r3, [r7, #28]
 8014cf0:	7a1b      	ldrb	r3, [r3, #8]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d009      	beq.n	8014d0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014cf6:	69fb      	ldr	r3, [r7, #28]
 8014cf8:	7a1a      	ldrb	r2, [r3, #8]
 8014cfa:	4b41      	ldr	r3, [pc, #260]	; (8014e00 <tcp_input+0x4a0>)
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014d02:	3301      	adds	r3, #1
 8014d04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d122      	bne.n	8014d50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	8b1a      	ldrh	r2, [r3, #24]
 8014d0e:	4b3b      	ldr	r3, [pc, #236]	; (8014dfc <tcp_input+0x49c>)
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	881b      	ldrh	r3, [r3, #0]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d11b      	bne.n	8014d52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014d1a:	69fb      	ldr	r3, [r7, #28]
 8014d1c:	8ada      	ldrh	r2, [r3, #22]
 8014d1e:	4b37      	ldr	r3, [pc, #220]	; (8014dfc <tcp_input+0x49c>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	885b      	ldrh	r3, [r3, #2]
 8014d24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d113      	bne.n	8014d52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014d2a:	69fb      	ldr	r3, [r7, #28]
 8014d2c:	685a      	ldr	r2, [r3, #4]
 8014d2e:	4b34      	ldr	r3, [pc, #208]	; (8014e00 <tcp_input+0x4a0>)
 8014d30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014d32:	429a      	cmp	r2, r3
 8014d34:	d10d      	bne.n	8014d52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014d36:	69fb      	ldr	r3, [r7, #28]
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	4b31      	ldr	r3, [pc, #196]	; (8014e00 <tcp_input+0x4a0>)
 8014d3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d107      	bne.n	8014d52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014d42:	69f8      	ldr	r0, [r7, #28]
 8014d44:	f000 fb56 	bl	80153f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7fd fcd9 	bl	8012700 <pbuf_free>
        return;
 8014d4e:	e1fd      	b.n	801514c <tcp_input+0x7ec>
        continue;
 8014d50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	68db      	ldr	r3, [r3, #12]
 8014d56:	61fb      	str	r3, [r7, #28]
 8014d58:	69fb      	ldr	r3, [r7, #28]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d1bc      	bne.n	8014cd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8014d5e:	2300      	movs	r3, #0
 8014d60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014d62:	4b2f      	ldr	r3, [pc, #188]	; (8014e20 <tcp_input+0x4c0>)
 8014d64:	681b      	ldr	r3, [r3, #0]
 8014d66:	617b      	str	r3, [r7, #20]
 8014d68:	e02a      	b.n	8014dc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014d6a:	697b      	ldr	r3, [r7, #20]
 8014d6c:	7a1b      	ldrb	r3, [r3, #8]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00c      	beq.n	8014d8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014d72:	697b      	ldr	r3, [r7, #20]
 8014d74:	7a1a      	ldrb	r2, [r3, #8]
 8014d76:	4b22      	ldr	r3, [pc, #136]	; (8014e00 <tcp_input+0x4a0>)
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014d7e:	3301      	adds	r3, #1
 8014d80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d002      	beq.n	8014d8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014d86:	697b      	ldr	r3, [r7, #20]
 8014d88:	61bb      	str	r3, [r7, #24]
        continue;
 8014d8a:	e016      	b.n	8014dba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014d8c:	697b      	ldr	r3, [r7, #20]
 8014d8e:	8ada      	ldrh	r2, [r3, #22]
 8014d90:	4b1a      	ldr	r3, [pc, #104]	; (8014dfc <tcp_input+0x49c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	885b      	ldrh	r3, [r3, #2]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d10c      	bne.n	8014db6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	681a      	ldr	r2, [r3, #0]
 8014da0:	4b17      	ldr	r3, [pc, #92]	; (8014e00 <tcp_input+0x4a0>)
 8014da2:	695b      	ldr	r3, [r3, #20]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d00f      	beq.n	8014dc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014da8:	697b      	ldr	r3, [r7, #20]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d00d      	beq.n	8014dca <tcp_input+0x46a>
 8014dae:	697b      	ldr	r3, [r7, #20]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d009      	beq.n	8014dca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	617b      	str	r3, [r7, #20]
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d1d1      	bne.n	8014d6a <tcp_input+0x40a>
 8014dc6:	e000      	b.n	8014dca <tcp_input+0x46a>
            break;
 8014dc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014dca:	697b      	ldr	r3, [r7, #20]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d029      	beq.n	8014e24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d00a      	beq.n	8014dec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	68da      	ldr	r2, [r3, #12]
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014dde:	4b10      	ldr	r3, [pc, #64]	; (8014e20 <tcp_input+0x4c0>)
 8014de0:	681a      	ldr	r2, [r3, #0]
 8014de2:	697b      	ldr	r3, [r7, #20]
 8014de4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014de6:	4a0e      	ldr	r2, [pc, #56]	; (8014e20 <tcp_input+0x4c0>)
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014dec:	6978      	ldr	r0, [r7, #20]
 8014dee:	f000 fa03 	bl	80151f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f7fd fc84 	bl	8012700 <pbuf_free>
      return;
 8014df8:	e1a8      	b.n	801514c <tcp_input+0x7ec>
 8014dfa:	bf00      	nop
 8014dfc:	2000c8c0 	.word	0x2000c8c0
 8014e00:	20009124 	.word	0x20009124
 8014e04:	08022a04 	.word	0x08022a04
 8014e08:	08022b30 	.word	0x08022b30
 8014e0c:	08022a50 	.word	0x08022a50
 8014e10:	2000c8a4 	.word	0x2000c8a4
 8014e14:	08022b5c 	.word	0x08022b5c
 8014e18:	2000c8a8 	.word	0x2000c8a8
 8014e1c:	08022b88 	.word	0x08022b88
 8014e20:	2000c8a0 	.word	0x2000c8a0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	f000 8158 	beq.w	80150dc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014e2c:	4b95      	ldr	r3, [pc, #596]	; (8015084 <tcp_input+0x724>)
 8014e2e:	2200      	movs	r2, #0
 8014e30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	891a      	ldrh	r2, [r3, #8]
 8014e36:	4b93      	ldr	r3, [pc, #588]	; (8015084 <tcp_input+0x724>)
 8014e38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014e3a:	4a92      	ldr	r2, [pc, #584]	; (8015084 <tcp_input+0x724>)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014e40:	4b91      	ldr	r3, [pc, #580]	; (8015088 <tcp_input+0x728>)
 8014e42:	681b      	ldr	r3, [r3, #0]
 8014e44:	4a8f      	ldr	r2, [pc, #572]	; (8015084 <tcp_input+0x724>)
 8014e46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014e48:	4b90      	ldr	r3, [pc, #576]	; (801508c <tcp_input+0x72c>)
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014e4e:	4b90      	ldr	r3, [pc, #576]	; (8015090 <tcp_input+0x730>)
 8014e50:	2200      	movs	r2, #0
 8014e52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014e54:	4b8f      	ldr	r3, [pc, #572]	; (8015094 <tcp_input+0x734>)
 8014e56:	2200      	movs	r2, #0
 8014e58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014e5a:	4b8f      	ldr	r3, [pc, #572]	; (8015098 <tcp_input+0x738>)
 8014e5c:	781b      	ldrb	r3, [r3, #0]
 8014e5e:	f003 0308 	and.w	r3, r3, #8
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d006      	beq.n	8014e74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	7b5b      	ldrb	r3, [r3, #13]
 8014e6a:	f043 0301 	orr.w	r3, r3, #1
 8014e6e:	b2da      	uxtb	r2, r3
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014e74:	69fb      	ldr	r3, [r7, #28]
 8014e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d017      	beq.n	8014eac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014e7c:	69f8      	ldr	r0, [r7, #28]
 8014e7e:	f7ff f85b 	bl	8013f38 <tcp_process_refused_data>
 8014e82:	4603      	mov	r3, r0
 8014e84:	f113 0f0d 	cmn.w	r3, #13
 8014e88:	d007      	beq.n	8014e9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014e8a:	69fb      	ldr	r3, [r7, #28]
 8014e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d00c      	beq.n	8014eac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014e92:	4b82      	ldr	r3, [pc, #520]	; (801509c <tcp_input+0x73c>)
 8014e94:	881b      	ldrh	r3, [r3, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d008      	beq.n	8014eac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014e9a:	69fb      	ldr	r3, [r7, #28]
 8014e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	f040 80e3 	bne.w	801506a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014ea4:	69f8      	ldr	r0, [r7, #28]
 8014ea6:	f003 fe05 	bl	8018ab4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014eaa:	e0de      	b.n	801506a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014eac:	4a7c      	ldr	r2, [pc, #496]	; (80150a0 <tcp_input+0x740>)
 8014eae:	69fb      	ldr	r3, [r7, #28]
 8014eb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014eb2:	69f8      	ldr	r0, [r7, #28]
 8014eb4:	f000 fb18 	bl	80154e8 <tcp_process>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014ebc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ec0:	f113 0f0d 	cmn.w	r3, #13
 8014ec4:	f000 80d3 	beq.w	801506e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014ec8:	4b71      	ldr	r3, [pc, #452]	; (8015090 <tcp_input+0x730>)
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	f003 0308 	and.w	r3, r3, #8
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d015      	beq.n	8014f00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d008      	beq.n	8014ef0 <tcp_input+0x590>
 8014ede:	69fb      	ldr	r3, [r7, #28]
 8014ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014ee4:	69fa      	ldr	r2, [r7, #28]
 8014ee6:	6912      	ldr	r2, [r2, #16]
 8014ee8:	f06f 010d 	mvn.w	r1, #13
 8014eec:	4610      	mov	r0, r2
 8014eee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014ef0:	69f9      	ldr	r1, [r7, #28]
 8014ef2:	486c      	ldr	r0, [pc, #432]	; (80150a4 <tcp_input+0x744>)
 8014ef4:	f7ff fbbc 	bl	8014670 <tcp_pcb_remove>
        tcp_free(pcb);
 8014ef8:	69f8      	ldr	r0, [r7, #28]
 8014efa:	f7fd febd 	bl	8012c78 <tcp_free>
 8014efe:	e0da      	b.n	80150b6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014f00:	2300      	movs	r3, #0
 8014f02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014f04:	4b63      	ldr	r3, [pc, #396]	; (8015094 <tcp_input+0x734>)
 8014f06:	881b      	ldrh	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d01d      	beq.n	8014f48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014f0c:	4b61      	ldr	r3, [pc, #388]	; (8015094 <tcp_input+0x734>)
 8014f0e:	881b      	ldrh	r3, [r3, #0]
 8014f10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d00a      	beq.n	8014f32 <tcp_input+0x5d2>
 8014f1c:	69fb      	ldr	r3, [r7, #28]
 8014f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014f22:	69fa      	ldr	r2, [r7, #28]
 8014f24:	6910      	ldr	r0, [r2, #16]
 8014f26:	89fa      	ldrh	r2, [r7, #14]
 8014f28:	69f9      	ldr	r1, [r7, #28]
 8014f2a:	4798      	blx	r3
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	74fb      	strb	r3, [r7, #19]
 8014f30:	e001      	b.n	8014f36 <tcp_input+0x5d6>
 8014f32:	2300      	movs	r3, #0
 8014f34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014f36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f3a:	f113 0f0d 	cmn.w	r3, #13
 8014f3e:	f000 8098 	beq.w	8015072 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014f42:	4b54      	ldr	r3, [pc, #336]	; (8015094 <tcp_input+0x734>)
 8014f44:	2200      	movs	r2, #0
 8014f46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014f48:	69f8      	ldr	r0, [r7, #28]
 8014f4a:	f000 f915 	bl	8015178 <tcp_input_delayed_close>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f040 8090 	bne.w	8015076 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014f56:	4b4d      	ldr	r3, [pc, #308]	; (801508c <tcp_input+0x72c>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d041      	beq.n	8014fe2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d006      	beq.n	8014f74 <tcp_input+0x614>
 8014f66:	4b50      	ldr	r3, [pc, #320]	; (80150a8 <tcp_input+0x748>)
 8014f68:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014f6c:	494f      	ldr	r1, [pc, #316]	; (80150ac <tcp_input+0x74c>)
 8014f6e:	4850      	ldr	r0, [pc, #320]	; (80150b0 <tcp_input+0x750>)
 8014f70:	f009 ff58 	bl	801ee24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014f74:	69fb      	ldr	r3, [r7, #28]
 8014f76:	8b5b      	ldrh	r3, [r3, #26]
 8014f78:	f003 0310 	and.w	r3, r3, #16
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d008      	beq.n	8014f92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014f80:	4b42      	ldr	r3, [pc, #264]	; (801508c <tcp_input+0x72c>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7fd fbbb 	bl	8012700 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014f8a:	69f8      	ldr	r0, [r7, #28]
 8014f8c:	f7fe f9b8 	bl	8013300 <tcp_abort>
            goto aborted;
 8014f90:	e091      	b.n	80150b6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d00c      	beq.n	8014fb6 <tcp_input+0x656>
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	6918      	ldr	r0, [r3, #16]
 8014fa6:	4b39      	ldr	r3, [pc, #228]	; (801508c <tcp_input+0x72c>)
 8014fa8:	681a      	ldr	r2, [r3, #0]
 8014faa:	2300      	movs	r3, #0
 8014fac:	69f9      	ldr	r1, [r7, #28]
 8014fae:	47a0      	blx	r4
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	74fb      	strb	r3, [r7, #19]
 8014fb4:	e008      	b.n	8014fc8 <tcp_input+0x668>
 8014fb6:	4b35      	ldr	r3, [pc, #212]	; (801508c <tcp_input+0x72c>)
 8014fb8:	681a      	ldr	r2, [r3, #0]
 8014fba:	2300      	movs	r3, #0
 8014fbc:	69f9      	ldr	r1, [r7, #28]
 8014fbe:	2000      	movs	r0, #0
 8014fc0:	f7ff f890 	bl	80140e4 <tcp_recv_null>
 8014fc4:	4603      	mov	r3, r0
 8014fc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014fc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fcc:	f113 0f0d 	cmn.w	r3, #13
 8014fd0:	d053      	beq.n	801507a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d003      	beq.n	8014fe2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014fda:	4b2c      	ldr	r3, [pc, #176]	; (801508c <tcp_input+0x72c>)
 8014fdc:	681a      	ldr	r2, [r3, #0]
 8014fde:	69fb      	ldr	r3, [r7, #28]
 8014fe0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014fe2:	4b2b      	ldr	r3, [pc, #172]	; (8015090 <tcp_input+0x730>)
 8014fe4:	781b      	ldrb	r3, [r3, #0]
 8014fe6:	f003 0320 	and.w	r3, r3, #32
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d030      	beq.n	8015050 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d009      	beq.n	801500a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ffa:	7b5a      	ldrb	r2, [r3, #13]
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015000:	f042 0220 	orr.w	r2, r2, #32
 8015004:	b2d2      	uxtb	r2, r2
 8015006:	735a      	strb	r2, [r3, #13]
 8015008:	e022      	b.n	8015050 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801500a:	69fb      	ldr	r3, [r7, #28]
 801500c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801500e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015012:	d005      	beq.n	8015020 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015014:	69fb      	ldr	r3, [r7, #28]
 8015016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015018:	3301      	adds	r3, #1
 801501a:	b29a      	uxth	r2, r3
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015020:	69fb      	ldr	r3, [r7, #28]
 8015022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015026:	2b00      	cmp	r3, #0
 8015028:	d00b      	beq.n	8015042 <tcp_input+0x6e2>
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	6918      	ldr	r0, [r3, #16]
 8015034:	2300      	movs	r3, #0
 8015036:	2200      	movs	r2, #0
 8015038:	69f9      	ldr	r1, [r7, #28]
 801503a:	47a0      	blx	r4
 801503c:	4603      	mov	r3, r0
 801503e:	74fb      	strb	r3, [r7, #19]
 8015040:	e001      	b.n	8015046 <tcp_input+0x6e6>
 8015042:	2300      	movs	r3, #0
 8015044:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801504a:	f113 0f0d 	cmn.w	r3, #13
 801504e:	d016      	beq.n	801507e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015050:	4b13      	ldr	r3, [pc, #76]	; (80150a0 <tcp_input+0x740>)
 8015052:	2200      	movs	r2, #0
 8015054:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015056:	69f8      	ldr	r0, [r7, #28]
 8015058:	f000 f88e 	bl	8015178 <tcp_input_delayed_close>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d128      	bne.n	80150b4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015062:	69f8      	ldr	r0, [r7, #28]
 8015064:	f002 ff20 	bl	8017ea8 <tcp_output>
 8015068:	e025      	b.n	80150b6 <tcp_input+0x756>
        goto aborted;
 801506a:	bf00      	nop
 801506c:	e023      	b.n	80150b6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801506e:	bf00      	nop
 8015070:	e021      	b.n	80150b6 <tcp_input+0x756>
              goto aborted;
 8015072:	bf00      	nop
 8015074:	e01f      	b.n	80150b6 <tcp_input+0x756>
          goto aborted;
 8015076:	bf00      	nop
 8015078:	e01d      	b.n	80150b6 <tcp_input+0x756>
            goto aborted;
 801507a:	bf00      	nop
 801507c:	e01b      	b.n	80150b6 <tcp_input+0x756>
              goto aborted;
 801507e:	bf00      	nop
 8015080:	e019      	b.n	80150b6 <tcp_input+0x756>
 8015082:	bf00      	nop
 8015084:	2000c8b0 	.word	0x2000c8b0
 8015088:	2000c8c0 	.word	0x2000c8c0
 801508c:	2000c8e0 	.word	0x2000c8e0
 8015090:	2000c8dd 	.word	0x2000c8dd
 8015094:	2000c8d8 	.word	0x2000c8d8
 8015098:	2000c8dc 	.word	0x2000c8dc
 801509c:	2000c8da 	.word	0x2000c8da
 80150a0:	2000c8e4 	.word	0x2000c8e4
 80150a4:	2000c8a4 	.word	0x2000c8a4
 80150a8:	08022a04 	.word	0x08022a04
 80150ac:	08022bb8 	.word	0x08022bb8
 80150b0:	08022a50 	.word	0x08022a50
          goto aborted;
 80150b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80150b6:	4b27      	ldr	r3, [pc, #156]	; (8015154 <tcp_input+0x7f4>)
 80150b8:	2200      	movs	r2, #0
 80150ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80150bc:	4b26      	ldr	r3, [pc, #152]	; (8015158 <tcp_input+0x7f8>)
 80150be:	2200      	movs	r2, #0
 80150c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80150c2:	4b26      	ldr	r3, [pc, #152]	; (801515c <tcp_input+0x7fc>)
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d03f      	beq.n	801514a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80150ca:	4b24      	ldr	r3, [pc, #144]	; (801515c <tcp_input+0x7fc>)
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7fd fb16 	bl	8012700 <pbuf_free>
      inseg.p = NULL;
 80150d4:	4b21      	ldr	r3, [pc, #132]	; (801515c <tcp_input+0x7fc>)
 80150d6:	2200      	movs	r2, #0
 80150d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80150da:	e036      	b.n	801514a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80150dc:	4b20      	ldr	r3, [pc, #128]	; (8015160 <tcp_input+0x800>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	899b      	ldrh	r3, [r3, #12]
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	4618      	mov	r0, r3
 80150e6:	f7fb fed5 	bl	8010e94 <lwip_htons>
 80150ea:	4603      	mov	r3, r0
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	f003 0304 	and.w	r3, r3, #4
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d118      	bne.n	8015128 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150f6:	4b1b      	ldr	r3, [pc, #108]	; (8015164 <tcp_input+0x804>)
 80150f8:	6819      	ldr	r1, [r3, #0]
 80150fa:	4b1b      	ldr	r3, [pc, #108]	; (8015168 <tcp_input+0x808>)
 80150fc:	881b      	ldrh	r3, [r3, #0]
 80150fe:	461a      	mov	r2, r3
 8015100:	4b1a      	ldr	r3, [pc, #104]	; (801516c <tcp_input+0x80c>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015106:	4b16      	ldr	r3, [pc, #88]	; (8015160 <tcp_input+0x800>)
 8015108:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801510a:	885b      	ldrh	r3, [r3, #2]
 801510c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801510e:	4a14      	ldr	r2, [pc, #80]	; (8015160 <tcp_input+0x800>)
 8015110:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015112:	8812      	ldrh	r2, [r2, #0]
 8015114:	b292      	uxth	r2, r2
 8015116:	9202      	str	r2, [sp, #8]
 8015118:	9301      	str	r3, [sp, #4]
 801511a:	4b15      	ldr	r3, [pc, #84]	; (8015170 <tcp_input+0x810>)
 801511c:	9300      	str	r3, [sp, #0]
 801511e:	4b15      	ldr	r3, [pc, #84]	; (8015174 <tcp_input+0x814>)
 8015120:	4602      	mov	r2, r0
 8015122:	2000      	movs	r0, #0
 8015124:	f003 fc74 	bl	8018a10 <tcp_rst>
    pbuf_free(p);
 8015128:	6878      	ldr	r0, [r7, #4]
 801512a:	f7fd fae9 	bl	8012700 <pbuf_free>
  return;
 801512e:	e00c      	b.n	801514a <tcp_input+0x7ea>
    goto dropped;
 8015130:	bf00      	nop
 8015132:	e006      	b.n	8015142 <tcp_input+0x7e2>
    goto dropped;
 8015134:	bf00      	nop
 8015136:	e004      	b.n	8015142 <tcp_input+0x7e2>
    goto dropped;
 8015138:	bf00      	nop
 801513a:	e002      	b.n	8015142 <tcp_input+0x7e2>
      goto dropped;
 801513c:	bf00      	nop
 801513e:	e000      	b.n	8015142 <tcp_input+0x7e2>
      goto dropped;
 8015140:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f7fd fadc 	bl	8012700 <pbuf_free>
 8015148:	e000      	b.n	801514c <tcp_input+0x7ec>
  return;
 801514a:	bf00      	nop
}
 801514c:	3724      	adds	r7, #36	; 0x24
 801514e:	46bd      	mov	sp, r7
 8015150:	bd90      	pop	{r4, r7, pc}
 8015152:	bf00      	nop
 8015154:	2000c8e4 	.word	0x2000c8e4
 8015158:	2000c8e0 	.word	0x2000c8e0
 801515c:	2000c8b0 	.word	0x2000c8b0
 8015160:	2000c8c0 	.word	0x2000c8c0
 8015164:	2000c8d4 	.word	0x2000c8d4
 8015168:	2000c8da 	.word	0x2000c8da
 801516c:	2000c8d0 	.word	0x2000c8d0
 8015170:	20009134 	.word	0x20009134
 8015174:	20009138 	.word	0x20009138

08015178 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d106      	bne.n	8015194 <tcp_input_delayed_close+0x1c>
 8015186:	4b17      	ldr	r3, [pc, #92]	; (80151e4 <tcp_input_delayed_close+0x6c>)
 8015188:	f240 225a 	movw	r2, #602	; 0x25a
 801518c:	4916      	ldr	r1, [pc, #88]	; (80151e8 <tcp_input_delayed_close+0x70>)
 801518e:	4817      	ldr	r0, [pc, #92]	; (80151ec <tcp_input_delayed_close+0x74>)
 8015190:	f009 fe48 	bl	801ee24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015194:	4b16      	ldr	r3, [pc, #88]	; (80151f0 <tcp_input_delayed_close+0x78>)
 8015196:	781b      	ldrb	r3, [r3, #0]
 8015198:	f003 0310 	and.w	r3, r3, #16
 801519c:	2b00      	cmp	r3, #0
 801519e:	d01c      	beq.n	80151da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	8b5b      	ldrh	r3, [r3, #26]
 80151a4:	f003 0310 	and.w	r3, r3, #16
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d10d      	bne.n	80151c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d008      	beq.n	80151c8 <tcp_input_delayed_close+0x50>
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	6912      	ldr	r2, [r2, #16]
 80151c0:	f06f 010e 	mvn.w	r1, #14
 80151c4:	4610      	mov	r0, r2
 80151c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80151c8:	6879      	ldr	r1, [r7, #4]
 80151ca:	480a      	ldr	r0, [pc, #40]	; (80151f4 <tcp_input_delayed_close+0x7c>)
 80151cc:	f7ff fa50 	bl	8014670 <tcp_pcb_remove>
    tcp_free(pcb);
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f7fd fd51 	bl	8012c78 <tcp_free>
    return 1;
 80151d6:	2301      	movs	r3, #1
 80151d8:	e000      	b.n	80151dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80151da:	2300      	movs	r3, #0
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	08022a04 	.word	0x08022a04
 80151e8:	08022bd4 	.word	0x08022bd4
 80151ec:	08022a50 	.word	0x08022a50
 80151f0:	2000c8dd 	.word	0x2000c8dd
 80151f4:	2000c8a4 	.word	0x2000c8a4

080151f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80151f8:	b590      	push	{r4, r7, lr}
 80151fa:	b08b      	sub	sp, #44	; 0x2c
 80151fc:	af04      	add	r7, sp, #16
 80151fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015200:	4b6f      	ldr	r3, [pc, #444]	; (80153c0 <tcp_listen_input+0x1c8>)
 8015202:	781b      	ldrb	r3, [r3, #0]
 8015204:	f003 0304 	and.w	r3, r3, #4
 8015208:	2b00      	cmp	r3, #0
 801520a:	f040 80d2 	bne.w	80153b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d106      	bne.n	8015222 <tcp_listen_input+0x2a>
 8015214:	4b6b      	ldr	r3, [pc, #428]	; (80153c4 <tcp_listen_input+0x1cc>)
 8015216:	f240 2281 	movw	r2, #641	; 0x281
 801521a:	496b      	ldr	r1, [pc, #428]	; (80153c8 <tcp_listen_input+0x1d0>)
 801521c:	486b      	ldr	r0, [pc, #428]	; (80153cc <tcp_listen_input+0x1d4>)
 801521e:	f009 fe01 	bl	801ee24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015222:	4b67      	ldr	r3, [pc, #412]	; (80153c0 <tcp_listen_input+0x1c8>)
 8015224:	781b      	ldrb	r3, [r3, #0]
 8015226:	f003 0310 	and.w	r3, r3, #16
 801522a:	2b00      	cmp	r3, #0
 801522c:	d019      	beq.n	8015262 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801522e:	4b68      	ldr	r3, [pc, #416]	; (80153d0 <tcp_listen_input+0x1d8>)
 8015230:	6819      	ldr	r1, [r3, #0]
 8015232:	4b68      	ldr	r3, [pc, #416]	; (80153d4 <tcp_listen_input+0x1dc>)
 8015234:	881b      	ldrh	r3, [r3, #0]
 8015236:	461a      	mov	r2, r3
 8015238:	4b67      	ldr	r3, [pc, #412]	; (80153d8 <tcp_listen_input+0x1e0>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801523e:	4b67      	ldr	r3, [pc, #412]	; (80153dc <tcp_listen_input+0x1e4>)
 8015240:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015242:	885b      	ldrh	r3, [r3, #2]
 8015244:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015246:	4a65      	ldr	r2, [pc, #404]	; (80153dc <tcp_listen_input+0x1e4>)
 8015248:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801524a:	8812      	ldrh	r2, [r2, #0]
 801524c:	b292      	uxth	r2, r2
 801524e:	9202      	str	r2, [sp, #8]
 8015250:	9301      	str	r3, [sp, #4]
 8015252:	4b63      	ldr	r3, [pc, #396]	; (80153e0 <tcp_listen_input+0x1e8>)
 8015254:	9300      	str	r3, [sp, #0]
 8015256:	4b63      	ldr	r3, [pc, #396]	; (80153e4 <tcp_listen_input+0x1ec>)
 8015258:	4602      	mov	r2, r0
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f003 fbd8 	bl	8018a10 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015260:	e0a9      	b.n	80153b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015262:	4b57      	ldr	r3, [pc, #348]	; (80153c0 <tcp_listen_input+0x1c8>)
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	f003 0302 	and.w	r3, r3, #2
 801526a:	2b00      	cmp	r3, #0
 801526c:	f000 80a3 	beq.w	80153b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	7d5b      	ldrb	r3, [r3, #21]
 8015274:	4618      	mov	r0, r3
 8015276:	f7ff f859 	bl	801432c <tcp_alloc>
 801527a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801527c:	697b      	ldr	r3, [r7, #20]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d111      	bne.n	80152a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	699b      	ldr	r3, [r3, #24]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d00a      	beq.n	80152a0 <tcp_listen_input+0xa8>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	699b      	ldr	r3, [r3, #24]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	6910      	ldr	r0, [r2, #16]
 8015292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015296:	2100      	movs	r1, #0
 8015298:	4798      	blx	r3
 801529a:	4603      	mov	r3, r0
 801529c:	73bb      	strb	r3, [r7, #14]
      return;
 801529e:	e08b      	b.n	80153b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80152a0:	23f0      	movs	r3, #240	; 0xf0
 80152a2:	73bb      	strb	r3, [r7, #14]
      return;
 80152a4:	e088      	b.n	80153b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80152a6:	4b50      	ldr	r3, [pc, #320]	; (80153e8 <tcp_listen_input+0x1f0>)
 80152a8:	695a      	ldr	r2, [r3, #20]
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80152ae:	4b4e      	ldr	r3, [pc, #312]	; (80153e8 <tcp_listen_input+0x1f0>)
 80152b0:	691a      	ldr	r2, [r3, #16]
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	8ada      	ldrh	r2, [r3, #22]
 80152ba:	697b      	ldr	r3, [r7, #20]
 80152bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80152be:	4b47      	ldr	r3, [pc, #284]	; (80153dc <tcp_listen_input+0x1e4>)
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	881b      	ldrh	r3, [r3, #0]
 80152c4:	b29a      	uxth	r2, r3
 80152c6:	697b      	ldr	r3, [r7, #20]
 80152c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2203      	movs	r2, #3
 80152ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80152d0:	4b41      	ldr	r3, [pc, #260]	; (80153d8 <tcp_listen_input+0x1e0>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	1c5a      	adds	r2, r3, #1
 80152d6:	697b      	ldr	r3, [r7, #20]
 80152d8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80152da:	697b      	ldr	r3, [r7, #20]
 80152dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80152e2:	6978      	ldr	r0, [r7, #20]
 80152e4:	f7ff fa58 	bl	8014798 <tcp_next_iss>
 80152e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	693a      	ldr	r2, [r7, #16]
 80152ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80152f0:	697b      	ldr	r3, [r7, #20]
 80152f2:	693a      	ldr	r2, [r7, #16]
 80152f4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	693a      	ldr	r2, [r7, #16]
 80152fa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	693a      	ldr	r2, [r7, #16]
 8015300:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015302:	4b35      	ldr	r3, [pc, #212]	; (80153d8 <tcp_listen_input+0x1e0>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	1e5a      	subs	r2, r3, #1
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	691a      	ldr	r2, [r3, #16]
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015314:	697b      	ldr	r3, [r7, #20]
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	7a5b      	ldrb	r3, [r3, #9]
 801531e:	f003 030c 	and.w	r3, r3, #12
 8015322:	b2da      	uxtb	r2, r3
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	7a1a      	ldrb	r2, [r3, #8]
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015330:	4b2e      	ldr	r3, [pc, #184]	; (80153ec <tcp_listen_input+0x1f4>)
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	60da      	str	r2, [r3, #12]
 8015338:	4a2c      	ldr	r2, [pc, #176]	; (80153ec <tcp_listen_input+0x1f4>)
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	6013      	str	r3, [r2, #0]
 801533e:	f003 fd29 	bl	8018d94 <tcp_timer_needed>
 8015342:	4b2b      	ldr	r3, [pc, #172]	; (80153f0 <tcp_listen_input+0x1f8>)
 8015344:	2201      	movs	r2, #1
 8015346:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015348:	6978      	ldr	r0, [r7, #20]
 801534a:	f001 fd8f 	bl	8016e6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801534e:	4b23      	ldr	r3, [pc, #140]	; (80153dc <tcp_listen_input+0x1e4>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	89db      	ldrh	r3, [r3, #14]
 8015354:	b29a      	uxth	r2, r3
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015368:	697b      	ldr	r3, [r7, #20]
 801536a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801536c:	697b      	ldr	r3, [r7, #20]
 801536e:	3304      	adds	r3, #4
 8015370:	4618      	mov	r0, r3
 8015372:	f007 fadb 	bl	801c92c <ip4_route>
 8015376:	4601      	mov	r1, r0
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	3304      	adds	r3, #4
 801537c:	461a      	mov	r2, r3
 801537e:	4620      	mov	r0, r4
 8015380:	f7ff fa30 	bl	80147e4 <tcp_eff_send_mss_netif>
 8015384:	4603      	mov	r3, r0
 8015386:	461a      	mov	r2, r3
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801538c:	2112      	movs	r1, #18
 801538e:	6978      	ldr	r0, [r7, #20]
 8015390:	f002 fc9c 	bl	8017ccc <tcp_enqueue_flags>
 8015394:	4603      	mov	r3, r0
 8015396:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d004      	beq.n	80153aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80153a0:	2100      	movs	r1, #0
 80153a2:	6978      	ldr	r0, [r7, #20]
 80153a4:	f7fd feee 	bl	8013184 <tcp_abandon>
      return;
 80153a8:	e006      	b.n	80153b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80153aa:	6978      	ldr	r0, [r7, #20]
 80153ac:	f002 fd7c 	bl	8017ea8 <tcp_output>
  return;
 80153b0:	e001      	b.n	80153b6 <tcp_listen_input+0x1be>
    return;
 80153b2:	bf00      	nop
 80153b4:	e000      	b.n	80153b8 <tcp_listen_input+0x1c0>
  return;
 80153b6:	bf00      	nop
}
 80153b8:	371c      	adds	r7, #28
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd90      	pop	{r4, r7, pc}
 80153be:	bf00      	nop
 80153c0:	2000c8dc 	.word	0x2000c8dc
 80153c4:	08022a04 	.word	0x08022a04
 80153c8:	08022bfc 	.word	0x08022bfc
 80153cc:	08022a50 	.word	0x08022a50
 80153d0:	2000c8d4 	.word	0x2000c8d4
 80153d4:	2000c8da 	.word	0x2000c8da
 80153d8:	2000c8d0 	.word	0x2000c8d0
 80153dc:	2000c8c0 	.word	0x2000c8c0
 80153e0:	20009134 	.word	0x20009134
 80153e4:	20009138 	.word	0x20009138
 80153e8:	20009124 	.word	0x20009124
 80153ec:	2000c8a4 	.word	0x2000c8a4
 80153f0:	2000c8ac 	.word	0x2000c8ac

080153f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b086      	sub	sp, #24
 80153f8:	af04      	add	r7, sp, #16
 80153fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80153fc:	4b2f      	ldr	r3, [pc, #188]	; (80154bc <tcp_timewait_input+0xc8>)
 80153fe:	781b      	ldrb	r3, [r3, #0]
 8015400:	f003 0304 	and.w	r3, r3, #4
 8015404:	2b00      	cmp	r3, #0
 8015406:	d153      	bne.n	80154b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d106      	bne.n	801541c <tcp_timewait_input+0x28>
 801540e:	4b2c      	ldr	r3, [pc, #176]	; (80154c0 <tcp_timewait_input+0xcc>)
 8015410:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015414:	492b      	ldr	r1, [pc, #172]	; (80154c4 <tcp_timewait_input+0xd0>)
 8015416:	482c      	ldr	r0, [pc, #176]	; (80154c8 <tcp_timewait_input+0xd4>)
 8015418:	f009 fd04 	bl	801ee24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801541c:	4b27      	ldr	r3, [pc, #156]	; (80154bc <tcp_timewait_input+0xc8>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f003 0302 	and.w	r3, r3, #2
 8015424:	2b00      	cmp	r3, #0
 8015426:	d02a      	beq.n	801547e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015428:	4b28      	ldr	r3, [pc, #160]	; (80154cc <tcp_timewait_input+0xd8>)
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015430:	1ad3      	subs	r3, r2, r3
 8015432:	2b00      	cmp	r3, #0
 8015434:	db2d      	blt.n	8015492 <tcp_timewait_input+0x9e>
 8015436:	4b25      	ldr	r3, [pc, #148]	; (80154cc <tcp_timewait_input+0xd8>)
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543e:	6879      	ldr	r1, [r7, #4]
 8015440:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015442:	440b      	add	r3, r1
 8015444:	1ad3      	subs	r3, r2, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	dc23      	bgt.n	8015492 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801544a:	4b21      	ldr	r3, [pc, #132]	; (80154d0 <tcp_timewait_input+0xdc>)
 801544c:	6819      	ldr	r1, [r3, #0]
 801544e:	4b21      	ldr	r3, [pc, #132]	; (80154d4 <tcp_timewait_input+0xe0>)
 8015450:	881b      	ldrh	r3, [r3, #0]
 8015452:	461a      	mov	r2, r3
 8015454:	4b1d      	ldr	r3, [pc, #116]	; (80154cc <tcp_timewait_input+0xd8>)
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801545a:	4b1f      	ldr	r3, [pc, #124]	; (80154d8 <tcp_timewait_input+0xe4>)
 801545c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801545e:	885b      	ldrh	r3, [r3, #2]
 8015460:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015462:	4a1d      	ldr	r2, [pc, #116]	; (80154d8 <tcp_timewait_input+0xe4>)
 8015464:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015466:	8812      	ldrh	r2, [r2, #0]
 8015468:	b292      	uxth	r2, r2
 801546a:	9202      	str	r2, [sp, #8]
 801546c:	9301      	str	r3, [sp, #4]
 801546e:	4b1b      	ldr	r3, [pc, #108]	; (80154dc <tcp_timewait_input+0xe8>)
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	4b1b      	ldr	r3, [pc, #108]	; (80154e0 <tcp_timewait_input+0xec>)
 8015474:	4602      	mov	r2, r0
 8015476:	6878      	ldr	r0, [r7, #4]
 8015478:	f003 faca 	bl	8018a10 <tcp_rst>
      return;
 801547c:	e01b      	b.n	80154b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801547e:	4b0f      	ldr	r3, [pc, #60]	; (80154bc <tcp_timewait_input+0xc8>)
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	f003 0301 	and.w	r3, r3, #1
 8015486:	2b00      	cmp	r3, #0
 8015488:	d003      	beq.n	8015492 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801548a:	4b16      	ldr	r3, [pc, #88]	; (80154e4 <tcp_timewait_input+0xf0>)
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015492:	4b10      	ldr	r3, [pc, #64]	; (80154d4 <tcp_timewait_input+0xe0>)
 8015494:	881b      	ldrh	r3, [r3, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d00c      	beq.n	80154b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	8b5b      	ldrh	r3, [r3, #26]
 801549e:	f043 0302 	orr.w	r3, r3, #2
 80154a2:	b29a      	uxth	r2, r3
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f002 fcfd 	bl	8017ea8 <tcp_output>
  }
  return;
 80154ae:	e001      	b.n	80154b4 <tcp_timewait_input+0xc0>
    return;
 80154b0:	bf00      	nop
 80154b2:	e000      	b.n	80154b6 <tcp_timewait_input+0xc2>
  return;
 80154b4:	bf00      	nop
}
 80154b6:	3708      	adds	r7, #8
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd80      	pop	{r7, pc}
 80154bc:	2000c8dc 	.word	0x2000c8dc
 80154c0:	08022a04 	.word	0x08022a04
 80154c4:	08022c1c 	.word	0x08022c1c
 80154c8:	08022a50 	.word	0x08022a50
 80154cc:	2000c8d0 	.word	0x2000c8d0
 80154d0:	2000c8d4 	.word	0x2000c8d4
 80154d4:	2000c8da 	.word	0x2000c8da
 80154d8:	2000c8c0 	.word	0x2000c8c0
 80154dc:	20009134 	.word	0x20009134
 80154e0:	20009138 	.word	0x20009138
 80154e4:	2000c898 	.word	0x2000c898

080154e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80154e8:	b590      	push	{r4, r7, lr}
 80154ea:	b08d      	sub	sp, #52	; 0x34
 80154ec:	af04      	add	r7, sp, #16
 80154ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80154f0:	2300      	movs	r3, #0
 80154f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80154f4:	2300      	movs	r3, #0
 80154f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d106      	bne.n	801550c <tcp_process+0x24>
 80154fe:	4b9d      	ldr	r3, [pc, #628]	; (8015774 <tcp_process+0x28c>)
 8015500:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015504:	499c      	ldr	r1, [pc, #624]	; (8015778 <tcp_process+0x290>)
 8015506:	489d      	ldr	r0, [pc, #628]	; (801577c <tcp_process+0x294>)
 8015508:	f009 fc8c 	bl	801ee24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801550c:	4b9c      	ldr	r3, [pc, #624]	; (8015780 <tcp_process+0x298>)
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	f003 0304 	and.w	r3, r3, #4
 8015514:	2b00      	cmp	r3, #0
 8015516:	d04e      	beq.n	80155b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	7d1b      	ldrb	r3, [r3, #20]
 801551c:	2b02      	cmp	r3, #2
 801551e:	d108      	bne.n	8015532 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015524:	4b97      	ldr	r3, [pc, #604]	; (8015784 <tcp_process+0x29c>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d123      	bne.n	8015574 <tcp_process+0x8c>
        acceptable = 1;
 801552c:	2301      	movs	r3, #1
 801552e:	76fb      	strb	r3, [r7, #27]
 8015530:	e020      	b.n	8015574 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015536:	4b94      	ldr	r3, [pc, #592]	; (8015788 <tcp_process+0x2a0>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	429a      	cmp	r2, r3
 801553c:	d102      	bne.n	8015544 <tcp_process+0x5c>
        acceptable = 1;
 801553e:	2301      	movs	r3, #1
 8015540:	76fb      	strb	r3, [r7, #27]
 8015542:	e017      	b.n	8015574 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015544:	4b90      	ldr	r3, [pc, #576]	; (8015788 <tcp_process+0x2a0>)
 8015546:	681a      	ldr	r2, [r3, #0]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801554c:	1ad3      	subs	r3, r2, r3
 801554e:	2b00      	cmp	r3, #0
 8015550:	db10      	blt.n	8015574 <tcp_process+0x8c>
 8015552:	4b8d      	ldr	r3, [pc, #564]	; (8015788 <tcp_process+0x2a0>)
 8015554:	681a      	ldr	r2, [r3, #0]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801555a:	6879      	ldr	r1, [r7, #4]
 801555c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801555e:	440b      	add	r3, r1
 8015560:	1ad3      	subs	r3, r2, r3
 8015562:	2b00      	cmp	r3, #0
 8015564:	dc06      	bgt.n	8015574 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	8b5b      	ldrh	r3, [r3, #26]
 801556a:	f043 0302 	orr.w	r3, r3, #2
 801556e:	b29a      	uxth	r2, r3
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015574:	7efb      	ldrb	r3, [r7, #27]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d01b      	beq.n	80155b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7d1b      	ldrb	r3, [r3, #20]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d106      	bne.n	8015590 <tcp_process+0xa8>
 8015582:	4b7c      	ldr	r3, [pc, #496]	; (8015774 <tcp_process+0x28c>)
 8015584:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015588:	4980      	ldr	r1, [pc, #512]	; (801578c <tcp_process+0x2a4>)
 801558a:	487c      	ldr	r0, [pc, #496]	; (801577c <tcp_process+0x294>)
 801558c:	f009 fc4a 	bl	801ee24 <iprintf>
      recv_flags |= TF_RESET;
 8015590:	4b7f      	ldr	r3, [pc, #508]	; (8015790 <tcp_process+0x2a8>)
 8015592:	781b      	ldrb	r3, [r3, #0]
 8015594:	f043 0308 	orr.w	r3, r3, #8
 8015598:	b2da      	uxtb	r2, r3
 801559a:	4b7d      	ldr	r3, [pc, #500]	; (8015790 <tcp_process+0x2a8>)
 801559c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	8b5b      	ldrh	r3, [r3, #26]
 80155a2:	f023 0301 	bic.w	r3, r3, #1
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80155ac:	f06f 030d 	mvn.w	r3, #13
 80155b0:	e37a      	b.n	8015ca8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80155b2:	2300      	movs	r3, #0
 80155b4:	e378      	b.n	8015ca8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80155b6:	4b72      	ldr	r3, [pc, #456]	; (8015780 <tcp_process+0x298>)
 80155b8:	781b      	ldrb	r3, [r3, #0]
 80155ba:	f003 0302 	and.w	r3, r3, #2
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d010      	beq.n	80155e4 <tcp_process+0xfc>
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	7d1b      	ldrb	r3, [r3, #20]
 80155c6:	2b02      	cmp	r3, #2
 80155c8:	d00c      	beq.n	80155e4 <tcp_process+0xfc>
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	7d1b      	ldrb	r3, [r3, #20]
 80155ce:	2b03      	cmp	r3, #3
 80155d0:	d008      	beq.n	80155e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	8b5b      	ldrh	r3, [r3, #26]
 80155d6:	f043 0302 	orr.w	r3, r3, #2
 80155da:	b29a      	uxth	r2, r3
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80155e0:	2300      	movs	r3, #0
 80155e2:	e361      	b.n	8015ca8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	8b5b      	ldrh	r3, [r3, #26]
 80155e8:	f003 0310 	and.w	r3, r3, #16
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d103      	bne.n	80155f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80155f0:	4b68      	ldr	r3, [pc, #416]	; (8015794 <tcp_process+0x2ac>)
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2200      	movs	r2, #0
 80155fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	2200      	movs	r2, #0
 8015604:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f001 fc2f 	bl	8016e6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	7d1b      	ldrb	r3, [r3, #20]
 8015612:	3b02      	subs	r3, #2
 8015614:	2b07      	cmp	r3, #7
 8015616:	f200 8337 	bhi.w	8015c88 <tcp_process+0x7a0>
 801561a:	a201      	add	r2, pc, #4	; (adr r2, 8015620 <tcp_process+0x138>)
 801561c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015620:	08015641 	.word	0x08015641
 8015624:	08015871 	.word	0x08015871
 8015628:	080159e9 	.word	0x080159e9
 801562c:	08015a13 	.word	0x08015a13
 8015630:	08015b37 	.word	0x08015b37
 8015634:	080159e9 	.word	0x080159e9
 8015638:	08015bc3 	.word	0x08015bc3
 801563c:	08015c53 	.word	0x08015c53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015640:	4b4f      	ldr	r3, [pc, #316]	; (8015780 <tcp_process+0x298>)
 8015642:	781b      	ldrb	r3, [r3, #0]
 8015644:	f003 0310 	and.w	r3, r3, #16
 8015648:	2b00      	cmp	r3, #0
 801564a:	f000 80e4 	beq.w	8015816 <tcp_process+0x32e>
 801564e:	4b4c      	ldr	r3, [pc, #304]	; (8015780 <tcp_process+0x298>)
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f003 0302 	and.w	r3, r3, #2
 8015656:	2b00      	cmp	r3, #0
 8015658:	f000 80dd 	beq.w	8015816 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015660:	1c5a      	adds	r2, r3, #1
 8015662:	4b48      	ldr	r3, [pc, #288]	; (8015784 <tcp_process+0x29c>)
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	429a      	cmp	r2, r3
 8015668:	f040 80d5 	bne.w	8015816 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801566c:	4b46      	ldr	r3, [pc, #280]	; (8015788 <tcp_process+0x2a0>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	1c5a      	adds	r2, r3, #1
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801567e:	4b41      	ldr	r3, [pc, #260]	; (8015784 <tcp_process+0x29c>)
 8015680:	681a      	ldr	r2, [r3, #0]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015686:	4b44      	ldr	r3, [pc, #272]	; (8015798 <tcp_process+0x2b0>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	89db      	ldrh	r3, [r3, #14]
 801568c:	b29a      	uxth	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80156a0:	4b39      	ldr	r3, [pc, #228]	; (8015788 <tcp_process+0x2a0>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	1e5a      	subs	r2, r3, #1
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2204      	movs	r2, #4
 80156ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	3304      	adds	r3, #4
 80156b8:	4618      	mov	r0, r3
 80156ba:	f007 f937 	bl	801c92c <ip4_route>
 80156be:	4601      	mov	r1, r0
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	3304      	adds	r3, #4
 80156c4:	461a      	mov	r2, r3
 80156c6:	4620      	mov	r0, r4
 80156c8:	f7ff f88c 	bl	80147e4 <tcp_eff_send_mss_netif>
 80156cc:	4603      	mov	r3, r0
 80156ce:	461a      	mov	r2, r3
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156d8:	009a      	lsls	r2, r3, #2
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156de:	005b      	lsls	r3, r3, #1
 80156e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80156e4:	428b      	cmp	r3, r1
 80156e6:	bf38      	it	cc
 80156e8:	460b      	movcc	r3, r1
 80156ea:	429a      	cmp	r2, r3
 80156ec:	d204      	bcs.n	80156f8 <tcp_process+0x210>
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156f2:	009b      	lsls	r3, r3, #2
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	e00d      	b.n	8015714 <tcp_process+0x22c>
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156fc:	005b      	lsls	r3, r3, #1
 80156fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8015702:	4293      	cmp	r3, r2
 8015704:	d904      	bls.n	8015710 <tcp_process+0x228>
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	b29b      	uxth	r3, r3
 801570e:	e001      	b.n	8015714 <tcp_process+0x22c>
 8015710:	f241 131c 	movw	r3, #4380	; 0x111c
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015720:	2b00      	cmp	r3, #0
 8015722:	d106      	bne.n	8015732 <tcp_process+0x24a>
 8015724:	4b13      	ldr	r3, [pc, #76]	; (8015774 <tcp_process+0x28c>)
 8015726:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801572a:	491c      	ldr	r1, [pc, #112]	; (801579c <tcp_process+0x2b4>)
 801572c:	4813      	ldr	r0, [pc, #76]	; (801577c <tcp_process+0x294>)
 801572e:	f009 fb79 	bl	801ee24 <iprintf>
        --pcb->snd_queuelen;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015738:	3b01      	subs	r3, #1
 801573a:	b29a      	uxth	r2, r3
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015746:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d12a      	bne.n	80157a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015752:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d106      	bne.n	8015768 <tcp_process+0x280>
 801575a:	4b06      	ldr	r3, [pc, #24]	; (8015774 <tcp_process+0x28c>)
 801575c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015760:	490f      	ldr	r1, [pc, #60]	; (80157a0 <tcp_process+0x2b8>)
 8015762:	4806      	ldr	r0, [pc, #24]	; (801577c <tcp_process+0x294>)
 8015764:	f009 fb5e 	bl	801ee24 <iprintf>
          pcb->unsent = rseg->next;
 8015768:	69fb      	ldr	r3, [r7, #28]
 801576a:	681a      	ldr	r2, [r3, #0]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	66da      	str	r2, [r3, #108]	; 0x6c
 8015770:	e01c      	b.n	80157ac <tcp_process+0x2c4>
 8015772:	bf00      	nop
 8015774:	08022a04 	.word	0x08022a04
 8015778:	08022c3c 	.word	0x08022c3c
 801577c:	08022a50 	.word	0x08022a50
 8015780:	2000c8dc 	.word	0x2000c8dc
 8015784:	2000c8d4 	.word	0x2000c8d4
 8015788:	2000c8d0 	.word	0x2000c8d0
 801578c:	08022c58 	.word	0x08022c58
 8015790:	2000c8dd 	.word	0x2000c8dd
 8015794:	2000c898 	.word	0x2000c898
 8015798:	2000c8c0 	.word	0x2000c8c0
 801579c:	08022c78 	.word	0x08022c78
 80157a0:	08022c90 	.word	0x08022c90
        } else {
          pcb->unacked = rseg->next;
 80157a4:	69fb      	ldr	r3, [r7, #28]
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80157ac:	69f8      	ldr	r0, [r7, #28]
 80157ae:	f7fe fc54 	bl	801405a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d104      	bne.n	80157c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80157c2:	e006      	b.n	80157d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2200      	movs	r2, #0
 80157ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d00a      	beq.n	80157f2 <tcp_process+0x30a>
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80157e2:	687a      	ldr	r2, [r7, #4]
 80157e4:	6910      	ldr	r0, [r2, #16]
 80157e6:	2200      	movs	r2, #0
 80157e8:	6879      	ldr	r1, [r7, #4]
 80157ea:	4798      	blx	r3
 80157ec:	4603      	mov	r3, r0
 80157ee:	76bb      	strb	r3, [r7, #26]
 80157f0:	e001      	b.n	80157f6 <tcp_process+0x30e>
 80157f2:	2300      	movs	r3, #0
 80157f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80157f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80157fa:	f113 0f0d 	cmn.w	r3, #13
 80157fe:	d102      	bne.n	8015806 <tcp_process+0x31e>
          return ERR_ABRT;
 8015800:	f06f 030c 	mvn.w	r3, #12
 8015804:	e250      	b.n	8015ca8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	8b5b      	ldrh	r3, [r3, #26]
 801580a:	f043 0302 	orr.w	r3, r3, #2
 801580e:	b29a      	uxth	r2, r3
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015814:	e23a      	b.n	8015c8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8015816:	4b98      	ldr	r3, [pc, #608]	; (8015a78 <tcp_process+0x590>)
 8015818:	781b      	ldrb	r3, [r3, #0]
 801581a:	f003 0310 	and.w	r3, r3, #16
 801581e:	2b00      	cmp	r3, #0
 8015820:	f000 8234 	beq.w	8015c8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015824:	4b95      	ldr	r3, [pc, #596]	; (8015a7c <tcp_process+0x594>)
 8015826:	6819      	ldr	r1, [r3, #0]
 8015828:	4b95      	ldr	r3, [pc, #596]	; (8015a80 <tcp_process+0x598>)
 801582a:	881b      	ldrh	r3, [r3, #0]
 801582c:	461a      	mov	r2, r3
 801582e:	4b95      	ldr	r3, [pc, #596]	; (8015a84 <tcp_process+0x59c>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015834:	4b94      	ldr	r3, [pc, #592]	; (8015a88 <tcp_process+0x5a0>)
 8015836:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015838:	885b      	ldrh	r3, [r3, #2]
 801583a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801583c:	4a92      	ldr	r2, [pc, #584]	; (8015a88 <tcp_process+0x5a0>)
 801583e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015840:	8812      	ldrh	r2, [r2, #0]
 8015842:	b292      	uxth	r2, r2
 8015844:	9202      	str	r2, [sp, #8]
 8015846:	9301      	str	r3, [sp, #4]
 8015848:	4b90      	ldr	r3, [pc, #576]	; (8015a8c <tcp_process+0x5a4>)
 801584a:	9300      	str	r3, [sp, #0]
 801584c:	4b90      	ldr	r3, [pc, #576]	; (8015a90 <tcp_process+0x5a8>)
 801584e:	4602      	mov	r2, r0
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f003 f8dd 	bl	8018a10 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801585c:	2b05      	cmp	r3, #5
 801585e:	f200 8215 	bhi.w	8015c8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	2200      	movs	r2, #0
 8015866:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f002 fea9 	bl	80185c0 <tcp_rexmit_rto>
      break;
 801586e:	e20d      	b.n	8015c8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8015870:	4b81      	ldr	r3, [pc, #516]	; (8015a78 <tcp_process+0x590>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	f003 0310 	and.w	r3, r3, #16
 8015878:	2b00      	cmp	r3, #0
 801587a:	f000 80a1 	beq.w	80159c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801587e:	4b7f      	ldr	r3, [pc, #508]	; (8015a7c <tcp_process+0x594>)
 8015880:	681a      	ldr	r2, [r3, #0]
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015886:	1ad3      	subs	r3, r2, r3
 8015888:	3b01      	subs	r3, #1
 801588a:	2b00      	cmp	r3, #0
 801588c:	db7e      	blt.n	801598c <tcp_process+0x4a4>
 801588e:	4b7b      	ldr	r3, [pc, #492]	; (8015a7c <tcp_process+0x594>)
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	dc77      	bgt.n	801598c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2204      	movs	r2, #4
 80158a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d102      	bne.n	80158b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80158aa:	23fa      	movs	r3, #250	; 0xfa
 80158ac:	76bb      	strb	r3, [r7, #26]
 80158ae:	e01d      	b.n	80158ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158b4:	699b      	ldr	r3, [r3, #24]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d106      	bne.n	80158c8 <tcp_process+0x3e0>
 80158ba:	4b76      	ldr	r3, [pc, #472]	; (8015a94 <tcp_process+0x5ac>)
 80158bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80158c0:	4975      	ldr	r1, [pc, #468]	; (8015a98 <tcp_process+0x5b0>)
 80158c2:	4876      	ldr	r0, [pc, #472]	; (8015a9c <tcp_process+0x5b4>)
 80158c4:	f009 faae 	bl	801ee24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158cc:	699b      	ldr	r3, [r3, #24]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d00a      	beq.n	80158e8 <tcp_process+0x400>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80158d6:	699b      	ldr	r3, [r3, #24]
 80158d8:	687a      	ldr	r2, [r7, #4]
 80158da:	6910      	ldr	r0, [r2, #16]
 80158dc:	2200      	movs	r2, #0
 80158de:	6879      	ldr	r1, [r7, #4]
 80158e0:	4798      	blx	r3
 80158e2:	4603      	mov	r3, r0
 80158e4:	76bb      	strb	r3, [r7, #26]
 80158e6:	e001      	b.n	80158ec <tcp_process+0x404>
 80158e8:	23f0      	movs	r3, #240	; 0xf0
 80158ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80158ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d00a      	beq.n	801590a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80158f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80158f8:	f113 0f0d 	cmn.w	r3, #13
 80158fc:	d002      	beq.n	8015904 <tcp_process+0x41c>
              tcp_abort(pcb);
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f7fd fcfe 	bl	8013300 <tcp_abort>
            }
            return ERR_ABRT;
 8015904:	f06f 030c 	mvn.w	r3, #12
 8015908:	e1ce      	b.n	8015ca8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 fae0 	bl	8015ed0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015910:	4b63      	ldr	r3, [pc, #396]	; (8015aa0 <tcp_process+0x5b8>)
 8015912:	881b      	ldrh	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d005      	beq.n	8015924 <tcp_process+0x43c>
            recv_acked--;
 8015918:	4b61      	ldr	r3, [pc, #388]	; (8015aa0 <tcp_process+0x5b8>)
 801591a:	881b      	ldrh	r3, [r3, #0]
 801591c:	3b01      	subs	r3, #1
 801591e:	b29a      	uxth	r2, r3
 8015920:	4b5f      	ldr	r3, [pc, #380]	; (8015aa0 <tcp_process+0x5b8>)
 8015922:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015928:	009a      	lsls	r2, r3, #2
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801592e:	005b      	lsls	r3, r3, #1
 8015930:	f241 111c 	movw	r1, #4380	; 0x111c
 8015934:	428b      	cmp	r3, r1
 8015936:	bf38      	it	cc
 8015938:	460b      	movcc	r3, r1
 801593a:	429a      	cmp	r2, r3
 801593c:	d204      	bcs.n	8015948 <tcp_process+0x460>
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015942:	009b      	lsls	r3, r3, #2
 8015944:	b29b      	uxth	r3, r3
 8015946:	e00d      	b.n	8015964 <tcp_process+0x47c>
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	f241 121c 	movw	r2, #4380	; 0x111c
 8015952:	4293      	cmp	r3, r2
 8015954:	d904      	bls.n	8015960 <tcp_process+0x478>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801595a:	005b      	lsls	r3, r3, #1
 801595c:	b29b      	uxth	r3, r3
 801595e:	e001      	b.n	8015964 <tcp_process+0x47c>
 8015960:	f241 131c 	movw	r3, #4380	; 0x111c
 8015964:	687a      	ldr	r2, [r7, #4]
 8015966:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801596a:	4b4e      	ldr	r3, [pc, #312]	; (8015aa4 <tcp_process+0x5bc>)
 801596c:	781b      	ldrb	r3, [r3, #0]
 801596e:	f003 0320 	and.w	r3, r3, #32
 8015972:	2b00      	cmp	r3, #0
 8015974:	d037      	beq.n	80159e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	8b5b      	ldrh	r3, [r3, #26]
 801597a:	f043 0302 	orr.w	r3, r3, #2
 801597e:	b29a      	uxth	r2, r3
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2207      	movs	r2, #7
 8015988:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801598a:	e02c      	b.n	80159e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801598c:	4b3b      	ldr	r3, [pc, #236]	; (8015a7c <tcp_process+0x594>)
 801598e:	6819      	ldr	r1, [r3, #0]
 8015990:	4b3b      	ldr	r3, [pc, #236]	; (8015a80 <tcp_process+0x598>)
 8015992:	881b      	ldrh	r3, [r3, #0]
 8015994:	461a      	mov	r2, r3
 8015996:	4b3b      	ldr	r3, [pc, #236]	; (8015a84 <tcp_process+0x59c>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801599c:	4b3a      	ldr	r3, [pc, #232]	; (8015a88 <tcp_process+0x5a0>)
 801599e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159a0:	885b      	ldrh	r3, [r3, #2]
 80159a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80159a4:	4a38      	ldr	r2, [pc, #224]	; (8015a88 <tcp_process+0x5a0>)
 80159a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80159a8:	8812      	ldrh	r2, [r2, #0]
 80159aa:	b292      	uxth	r2, r2
 80159ac:	9202      	str	r2, [sp, #8]
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	4b36      	ldr	r3, [pc, #216]	; (8015a8c <tcp_process+0x5a4>)
 80159b2:	9300      	str	r3, [sp, #0]
 80159b4:	4b36      	ldr	r3, [pc, #216]	; (8015a90 <tcp_process+0x5a8>)
 80159b6:	4602      	mov	r2, r0
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f003 f829 	bl	8018a10 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80159be:	e167      	b.n	8015c90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80159c0:	4b2d      	ldr	r3, [pc, #180]	; (8015a78 <tcp_process+0x590>)
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	f003 0302 	and.w	r3, r3, #2
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 8161 	beq.w	8015c90 <tcp_process+0x7a8>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d2:	1e5a      	subs	r2, r3, #1
 80159d4:	4b2b      	ldr	r3, [pc, #172]	; (8015a84 <tcp_process+0x59c>)
 80159d6:	681b      	ldr	r3, [r3, #0]
 80159d8:	429a      	cmp	r2, r3
 80159da:	f040 8159 	bne.w	8015c90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80159de:	6878      	ldr	r0, [r7, #4]
 80159e0:	f002 fe10 	bl	8018604 <tcp_rexmit>
      break;
 80159e4:	e154      	b.n	8015c90 <tcp_process+0x7a8>
 80159e6:	e153      	b.n	8015c90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f000 fa71 	bl	8015ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80159ee:	4b2d      	ldr	r3, [pc, #180]	; (8015aa4 <tcp_process+0x5bc>)
 80159f0:	781b      	ldrb	r3, [r3, #0]
 80159f2:	f003 0320 	and.w	r3, r3, #32
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f000 814c 	beq.w	8015c94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	8b5b      	ldrh	r3, [r3, #26]
 8015a00:	f043 0302 	orr.w	r3, r3, #2
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	2207      	movs	r2, #7
 8015a0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015a10:	e140      	b.n	8015c94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f000 fa5c 	bl	8015ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015a18:	4b22      	ldr	r3, [pc, #136]	; (8015aa4 <tcp_process+0x5bc>)
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	f003 0320 	and.w	r3, r3, #32
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d071      	beq.n	8015b08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015a24:	4b14      	ldr	r3, [pc, #80]	; (8015a78 <tcp_process+0x590>)
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	f003 0310 	and.w	r3, r3, #16
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d060      	beq.n	8015af2 <tcp_process+0x60a>
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015a34:	4b11      	ldr	r3, [pc, #68]	; (8015a7c <tcp_process+0x594>)
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d15a      	bne.n	8015af2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d156      	bne.n	8015af2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	8b5b      	ldrh	r3, [r3, #26]
 8015a48:	f043 0302 	orr.w	r3, r3, #2
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8015a52:	6878      	ldr	r0, [r7, #4]
 8015a54:	f7fe fdbc 	bl	80145d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015a58:	4b13      	ldr	r3, [pc, #76]	; (8015aa8 <tcp_process+0x5c0>)
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	687a      	ldr	r2, [r7, #4]
 8015a5e:	429a      	cmp	r2, r3
 8015a60:	d105      	bne.n	8015a6e <tcp_process+0x586>
 8015a62:	4b11      	ldr	r3, [pc, #68]	; (8015aa8 <tcp_process+0x5c0>)
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	68db      	ldr	r3, [r3, #12]
 8015a68:	4a0f      	ldr	r2, [pc, #60]	; (8015aa8 <tcp_process+0x5c0>)
 8015a6a:	6013      	str	r3, [r2, #0]
 8015a6c:	e02e      	b.n	8015acc <tcp_process+0x5e4>
 8015a6e:	4b0e      	ldr	r3, [pc, #56]	; (8015aa8 <tcp_process+0x5c0>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	617b      	str	r3, [r7, #20]
 8015a74:	e027      	b.n	8015ac6 <tcp_process+0x5de>
 8015a76:	bf00      	nop
 8015a78:	2000c8dc 	.word	0x2000c8dc
 8015a7c:	2000c8d4 	.word	0x2000c8d4
 8015a80:	2000c8da 	.word	0x2000c8da
 8015a84:	2000c8d0 	.word	0x2000c8d0
 8015a88:	2000c8c0 	.word	0x2000c8c0
 8015a8c:	20009134 	.word	0x20009134
 8015a90:	20009138 	.word	0x20009138
 8015a94:	08022a04 	.word	0x08022a04
 8015a98:	08022ca4 	.word	0x08022ca4
 8015a9c:	08022a50 	.word	0x08022a50
 8015aa0:	2000c8d8 	.word	0x2000c8d8
 8015aa4:	2000c8dd 	.word	0x2000c8dd
 8015aa8:	2000c8a4 	.word	0x2000c8a4
 8015aac:	697b      	ldr	r3, [r7, #20]
 8015aae:	68db      	ldr	r3, [r3, #12]
 8015ab0:	687a      	ldr	r2, [r7, #4]
 8015ab2:	429a      	cmp	r2, r3
 8015ab4:	d104      	bne.n	8015ac0 <tcp_process+0x5d8>
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	68da      	ldr	r2, [r3, #12]
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	60da      	str	r2, [r3, #12]
 8015abe:	e005      	b.n	8015acc <tcp_process+0x5e4>
 8015ac0:	697b      	ldr	r3, [r7, #20]
 8015ac2:	68db      	ldr	r3, [r3, #12]
 8015ac4:	617b      	str	r3, [r7, #20]
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d1ef      	bne.n	8015aac <tcp_process+0x5c4>
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	60da      	str	r2, [r3, #12]
 8015ad2:	4b77      	ldr	r3, [pc, #476]	; (8015cb0 <tcp_process+0x7c8>)
 8015ad4:	2201      	movs	r2, #1
 8015ad6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	220a      	movs	r2, #10
 8015adc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015ade:	4b75      	ldr	r3, [pc, #468]	; (8015cb4 <tcp_process+0x7cc>)
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	60da      	str	r2, [r3, #12]
 8015ae6:	4a73      	ldr	r2, [pc, #460]	; (8015cb4 <tcp_process+0x7cc>)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6013      	str	r3, [r2, #0]
 8015aec:	f003 f952 	bl	8018d94 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015af0:	e0d2      	b.n	8015c98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	8b5b      	ldrh	r3, [r3, #26]
 8015af6:	f043 0302 	orr.w	r3, r3, #2
 8015afa:	b29a      	uxth	r2, r3
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2208      	movs	r2, #8
 8015b04:	751a      	strb	r2, [r3, #20]
      break;
 8015b06:	e0c7      	b.n	8015c98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015b08:	4b6b      	ldr	r3, [pc, #428]	; (8015cb8 <tcp_process+0x7d0>)
 8015b0a:	781b      	ldrb	r3, [r3, #0]
 8015b0c:	f003 0310 	and.w	r3, r3, #16
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	f000 80c1 	beq.w	8015c98 <tcp_process+0x7b0>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015b1a:	4b68      	ldr	r3, [pc, #416]	; (8015cbc <tcp_process+0x7d4>)
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	429a      	cmp	r2, r3
 8015b20:	f040 80ba 	bne.w	8015c98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	f040 80b5 	bne.w	8015c98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2206      	movs	r2, #6
 8015b32:	751a      	strb	r2, [r3, #20]
      break;
 8015b34:	e0b0      	b.n	8015c98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f000 f9ca 	bl	8015ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015b3c:	4b60      	ldr	r3, [pc, #384]	; (8015cc0 <tcp_process+0x7d8>)
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	f003 0320 	and.w	r3, r3, #32
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 80a9 	beq.w	8015c9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	8b5b      	ldrh	r3, [r3, #26]
 8015b4e:	f043 0302 	orr.w	r3, r3, #2
 8015b52:	b29a      	uxth	r2, r3
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015b58:	6878      	ldr	r0, [r7, #4]
 8015b5a:	f7fe fd39 	bl	80145d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015b5e:	4b59      	ldr	r3, [pc, #356]	; (8015cc4 <tcp_process+0x7dc>)
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d105      	bne.n	8015b74 <tcp_process+0x68c>
 8015b68:	4b56      	ldr	r3, [pc, #344]	; (8015cc4 <tcp_process+0x7dc>)
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	4a55      	ldr	r2, [pc, #340]	; (8015cc4 <tcp_process+0x7dc>)
 8015b70:	6013      	str	r3, [r2, #0]
 8015b72:	e013      	b.n	8015b9c <tcp_process+0x6b4>
 8015b74:	4b53      	ldr	r3, [pc, #332]	; (8015cc4 <tcp_process+0x7dc>)
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	613b      	str	r3, [r7, #16]
 8015b7a:	e00c      	b.n	8015b96 <tcp_process+0x6ae>
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d104      	bne.n	8015b90 <tcp_process+0x6a8>
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	68da      	ldr	r2, [r3, #12]
 8015b8a:	693b      	ldr	r3, [r7, #16]
 8015b8c:	60da      	str	r2, [r3, #12]
 8015b8e:	e005      	b.n	8015b9c <tcp_process+0x6b4>
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	68db      	ldr	r3, [r3, #12]
 8015b94:	613b      	str	r3, [r7, #16]
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d1ef      	bne.n	8015b7c <tcp_process+0x694>
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	60da      	str	r2, [r3, #12]
 8015ba2:	4b43      	ldr	r3, [pc, #268]	; (8015cb0 <tcp_process+0x7c8>)
 8015ba4:	2201      	movs	r2, #1
 8015ba6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	220a      	movs	r2, #10
 8015bac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015bae:	4b41      	ldr	r3, [pc, #260]	; (8015cb4 <tcp_process+0x7cc>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	60da      	str	r2, [r3, #12]
 8015bb6:	4a3f      	ldr	r2, [pc, #252]	; (8015cb4 <tcp_process+0x7cc>)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	6013      	str	r3, [r2, #0]
 8015bbc:	f003 f8ea 	bl	8018d94 <tcp_timer_needed>
      }
      break;
 8015bc0:	e06c      	b.n	8015c9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015bc2:	6878      	ldr	r0, [r7, #4]
 8015bc4:	f000 f984 	bl	8015ed0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015bc8:	4b3b      	ldr	r3, [pc, #236]	; (8015cb8 <tcp_process+0x7d0>)
 8015bca:	781b      	ldrb	r3, [r3, #0]
 8015bcc:	f003 0310 	and.w	r3, r3, #16
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d065      	beq.n	8015ca0 <tcp_process+0x7b8>
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015bd8:	4b38      	ldr	r3, [pc, #224]	; (8015cbc <tcp_process+0x7d4>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d15f      	bne.n	8015ca0 <tcp_process+0x7b8>
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d15b      	bne.n	8015ca0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f7fe fcf1 	bl	80145d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015bee:	4b35      	ldr	r3, [pc, #212]	; (8015cc4 <tcp_process+0x7dc>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	687a      	ldr	r2, [r7, #4]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d105      	bne.n	8015c04 <tcp_process+0x71c>
 8015bf8:	4b32      	ldr	r3, [pc, #200]	; (8015cc4 <tcp_process+0x7dc>)
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	4a31      	ldr	r2, [pc, #196]	; (8015cc4 <tcp_process+0x7dc>)
 8015c00:	6013      	str	r3, [r2, #0]
 8015c02:	e013      	b.n	8015c2c <tcp_process+0x744>
 8015c04:	4b2f      	ldr	r3, [pc, #188]	; (8015cc4 <tcp_process+0x7dc>)
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	60fb      	str	r3, [r7, #12]
 8015c0a:	e00c      	b.n	8015c26 <tcp_process+0x73e>
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	68db      	ldr	r3, [r3, #12]
 8015c10:	687a      	ldr	r2, [r7, #4]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	d104      	bne.n	8015c20 <tcp_process+0x738>
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	68da      	ldr	r2, [r3, #12]
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	60da      	str	r2, [r3, #12]
 8015c1e:	e005      	b.n	8015c2c <tcp_process+0x744>
 8015c20:	68fb      	ldr	r3, [r7, #12]
 8015c22:	68db      	ldr	r3, [r3, #12]
 8015c24:	60fb      	str	r3, [r7, #12]
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d1ef      	bne.n	8015c0c <tcp_process+0x724>
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	2200      	movs	r2, #0
 8015c30:	60da      	str	r2, [r3, #12]
 8015c32:	4b1f      	ldr	r3, [pc, #124]	; (8015cb0 <tcp_process+0x7c8>)
 8015c34:	2201      	movs	r2, #1
 8015c36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	220a      	movs	r2, #10
 8015c3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015c3e:	4b1d      	ldr	r3, [pc, #116]	; (8015cb4 <tcp_process+0x7cc>)
 8015c40:	681a      	ldr	r2, [r3, #0]
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	60da      	str	r2, [r3, #12]
 8015c46:	4a1b      	ldr	r2, [pc, #108]	; (8015cb4 <tcp_process+0x7cc>)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	6013      	str	r3, [r2, #0]
 8015c4c:	f003 f8a2 	bl	8018d94 <tcp_timer_needed>
      }
      break;
 8015c50:	e026      	b.n	8015ca0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f000 f93c 	bl	8015ed0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015c58:	4b17      	ldr	r3, [pc, #92]	; (8015cb8 <tcp_process+0x7d0>)
 8015c5a:	781b      	ldrb	r3, [r3, #0]
 8015c5c:	f003 0310 	and.w	r3, r3, #16
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d01f      	beq.n	8015ca4 <tcp_process+0x7bc>
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c68:	4b14      	ldr	r3, [pc, #80]	; (8015cbc <tcp_process+0x7d4>)
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d119      	bne.n	8015ca4 <tcp_process+0x7bc>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d115      	bne.n	8015ca4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015c78:	4b11      	ldr	r3, [pc, #68]	; (8015cc0 <tcp_process+0x7d8>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	f043 0310 	orr.w	r3, r3, #16
 8015c80:	b2da      	uxtb	r2, r3
 8015c82:	4b0f      	ldr	r3, [pc, #60]	; (8015cc0 <tcp_process+0x7d8>)
 8015c84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8015c86:	e00d      	b.n	8015ca4 <tcp_process+0x7bc>
    default:
      break;
 8015c88:	bf00      	nop
 8015c8a:	e00c      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015c8c:	bf00      	nop
 8015c8e:	e00a      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015c90:	bf00      	nop
 8015c92:	e008      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015c94:	bf00      	nop
 8015c96:	e006      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015c98:	bf00      	nop
 8015c9a:	e004      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015c9c:	bf00      	nop
 8015c9e:	e002      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015ca0:	bf00      	nop
 8015ca2:	e000      	b.n	8015ca6 <tcp_process+0x7be>
      break;
 8015ca4:	bf00      	nop
  }
  return ERR_OK;
 8015ca6:	2300      	movs	r3, #0
}
 8015ca8:	4618      	mov	r0, r3
 8015caa:	3724      	adds	r7, #36	; 0x24
 8015cac:	46bd      	mov	sp, r7
 8015cae:	bd90      	pop	{r4, r7, pc}
 8015cb0:	2000c8ac 	.word	0x2000c8ac
 8015cb4:	2000c8a8 	.word	0x2000c8a8
 8015cb8:	2000c8dc 	.word	0x2000c8dc
 8015cbc:	2000c8d4 	.word	0x2000c8d4
 8015cc0:	2000c8dd 	.word	0x2000c8dd
 8015cc4:	2000c8a4 	.word	0x2000c8a4

08015cc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015cc8:	b590      	push	{r4, r7, lr}
 8015cca:	b085      	sub	sp, #20
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	6078      	str	r0, [r7, #4]
 8015cd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d106      	bne.n	8015ce6 <tcp_oos_insert_segment+0x1e>
 8015cd8:	4b3b      	ldr	r3, [pc, #236]	; (8015dc8 <tcp_oos_insert_segment+0x100>)
 8015cda:	f240 421f 	movw	r2, #1055	; 0x41f
 8015cde:	493b      	ldr	r1, [pc, #236]	; (8015dcc <tcp_oos_insert_segment+0x104>)
 8015ce0:	483b      	ldr	r0, [pc, #236]	; (8015dd0 <tcp_oos_insert_segment+0x108>)
 8015ce2:	f009 f89f 	bl	801ee24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	68db      	ldr	r3, [r3, #12]
 8015cea:	899b      	ldrh	r3, [r3, #12]
 8015cec:	b29b      	uxth	r3, r3
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f7fb f8d0 	bl	8010e94 <lwip_htons>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	f003 0301 	and.w	r3, r3, #1
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d028      	beq.n	8015d52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015d00:	6838      	ldr	r0, [r7, #0]
 8015d02:	f7fe f995 	bl	8014030 <tcp_segs_free>
    next = NULL;
 8015d06:	2300      	movs	r3, #0
 8015d08:	603b      	str	r3, [r7, #0]
 8015d0a:	e056      	b.n	8015dba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015d0c:	683b      	ldr	r3, [r7, #0]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	899b      	ldrh	r3, [r3, #12]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7fb f8bd 	bl	8010e94 <lwip_htons>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	b2db      	uxtb	r3, r3
 8015d1e:	f003 0301 	and.w	r3, r3, #1
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d00d      	beq.n	8015d42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	68db      	ldr	r3, [r3, #12]
 8015d2a:	899b      	ldrh	r3, [r3, #12]
 8015d2c:	b29c      	uxth	r4, r3
 8015d2e:	2001      	movs	r0, #1
 8015d30:	f7fb f8b0 	bl	8010e94 <lwip_htons>
 8015d34:	4603      	mov	r3, r0
 8015d36:	461a      	mov	r2, r3
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	68db      	ldr	r3, [r3, #12]
 8015d3c:	4322      	orrs	r2, r4
 8015d3e:	b292      	uxth	r2, r2
 8015d40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f7fe f984 	bl	801405a <tcp_seg_free>
    while (next &&
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d00e      	beq.n	8015d76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	891b      	ldrh	r3, [r3, #8]
 8015d5c:	461a      	mov	r2, r3
 8015d5e:	4b1d      	ldr	r3, [pc, #116]	; (8015dd4 <tcp_oos_insert_segment+0x10c>)
 8015d60:	681b      	ldr	r3, [r3, #0]
 8015d62:	441a      	add	r2, r3
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	68db      	ldr	r3, [r3, #12]
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	6839      	ldr	r1, [r7, #0]
 8015d6c:	8909      	ldrh	r1, [r1, #8]
 8015d6e:	440b      	add	r3, r1
 8015d70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	daca      	bge.n	8015d0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d01e      	beq.n	8015dba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	891b      	ldrh	r3, [r3, #8]
 8015d80:	461a      	mov	r2, r3
 8015d82:	4b14      	ldr	r3, [pc, #80]	; (8015dd4 <tcp_oos_insert_segment+0x10c>)
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	441a      	add	r2, r3
 8015d88:	683b      	ldr	r3, [r7, #0]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	dd12      	ble.n	8015dba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8015d94:	683b      	ldr	r3, [r7, #0]
 8015d96:	68db      	ldr	r3, [r3, #12]
 8015d98:	685b      	ldr	r3, [r3, #4]
 8015d9a:	b29a      	uxth	r2, r3
 8015d9c:	4b0d      	ldr	r3, [pc, #52]	; (8015dd4 <tcp_oos_insert_segment+0x10c>)
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	1ad3      	subs	r3, r2, r3
 8015da4:	b29a      	uxth	r2, r3
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	685a      	ldr	r2, [r3, #4]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	891b      	ldrh	r3, [r3, #8]
 8015db2:	4619      	mov	r1, r3
 8015db4:	4610      	mov	r0, r2
 8015db6:	f7fc fb1d 	bl	80123f4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	683a      	ldr	r2, [r7, #0]
 8015dbe:	601a      	str	r2, [r3, #0]
}
 8015dc0:	bf00      	nop
 8015dc2:	3714      	adds	r7, #20
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd90      	pop	{r4, r7, pc}
 8015dc8:	08022a04 	.word	0x08022a04
 8015dcc:	08022cc4 	.word	0x08022cc4
 8015dd0:	08022a50 	.word	0x08022a50
 8015dd4:	2000c8d0 	.word	0x2000c8d0

08015dd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015dd8:	b5b0      	push	{r4, r5, r7, lr}
 8015dda:	b086      	sub	sp, #24
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	60f8      	str	r0, [r7, #12]
 8015de0:	60b9      	str	r1, [r7, #8]
 8015de2:	607a      	str	r2, [r7, #4]
 8015de4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015de6:	e03e      	b.n	8015e66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	685b      	ldr	r3, [r3, #4]
 8015df6:	4618      	mov	r0, r3
 8015df8:	f7fc fd10 	bl	801281c <pbuf_clen>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e06:	8a7a      	ldrh	r2, [r7, #18]
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d906      	bls.n	8015e1a <tcp_free_acked_segments+0x42>
 8015e0c:	4b2a      	ldr	r3, [pc, #168]	; (8015eb8 <tcp_free_acked_segments+0xe0>)
 8015e0e:	f240 4257 	movw	r2, #1111	; 0x457
 8015e12:	492a      	ldr	r1, [pc, #168]	; (8015ebc <tcp_free_acked_segments+0xe4>)
 8015e14:	482a      	ldr	r0, [pc, #168]	; (8015ec0 <tcp_free_acked_segments+0xe8>)
 8015e16:	f009 f805 	bl	801ee24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8015e20:	8a7b      	ldrh	r3, [r7, #18]
 8015e22:	1ad3      	subs	r3, r2, r3
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015e2c:	697b      	ldr	r3, [r7, #20]
 8015e2e:	891a      	ldrh	r2, [r3, #8]
 8015e30:	4b24      	ldr	r3, [pc, #144]	; (8015ec4 <tcp_free_acked_segments+0xec>)
 8015e32:	881b      	ldrh	r3, [r3, #0]
 8015e34:	4413      	add	r3, r2
 8015e36:	b29a      	uxth	r2, r3
 8015e38:	4b22      	ldr	r3, [pc, #136]	; (8015ec4 <tcp_free_acked_segments+0xec>)
 8015e3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015e3c:	6978      	ldr	r0, [r7, #20]
 8015e3e:	f7fe f90c 	bl	801405a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00c      	beq.n	8015e66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d109      	bne.n	8015e66 <tcp_free_acked_segments+0x8e>
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d106      	bne.n	8015e66 <tcp_free_acked_segments+0x8e>
 8015e58:	4b17      	ldr	r3, [pc, #92]	; (8015eb8 <tcp_free_acked_segments+0xe0>)
 8015e5a:	f240 4261 	movw	r2, #1121	; 0x461
 8015e5e:	491a      	ldr	r1, [pc, #104]	; (8015ec8 <tcp_free_acked_segments+0xf0>)
 8015e60:	4817      	ldr	r0, [pc, #92]	; (8015ec0 <tcp_free_acked_segments+0xe8>)
 8015e62:	f008 ffdf 	bl	801ee24 <iprintf>
  while (seg_list != NULL &&
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d020      	beq.n	8015eae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015e6c:	68bb      	ldr	r3, [r7, #8]
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fb f823 	bl	8010ebe <lwip_htonl>
 8015e78:	4604      	mov	r4, r0
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	891b      	ldrh	r3, [r3, #8]
 8015e7e:	461d      	mov	r5, r3
 8015e80:	68bb      	ldr	r3, [r7, #8]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	899b      	ldrh	r3, [r3, #12]
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7fb f803 	bl	8010e94 <lwip_htons>
 8015e8e:	4603      	mov	r3, r0
 8015e90:	b2db      	uxtb	r3, r3
 8015e92:	f003 0303 	and.w	r3, r3, #3
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d001      	beq.n	8015e9e <tcp_free_acked_segments+0xc6>
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	e000      	b.n	8015ea0 <tcp_free_acked_segments+0xc8>
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	442b      	add	r3, r5
 8015ea2:	18e2      	adds	r2, r4, r3
 8015ea4:	4b09      	ldr	r3, [pc, #36]	; (8015ecc <tcp_free_acked_segments+0xf4>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	dd9c      	ble.n	8015de8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015eae:	68bb      	ldr	r3, [r7, #8]
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	3718      	adds	r7, #24
 8015eb4:	46bd      	mov	sp, r7
 8015eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8015eb8:	08022a04 	.word	0x08022a04
 8015ebc:	08022cec 	.word	0x08022cec
 8015ec0:	08022a50 	.word	0x08022a50
 8015ec4:	2000c8d8 	.word	0x2000c8d8
 8015ec8:	08022d14 	.word	0x08022d14
 8015ecc:	2000c8d4 	.word	0x2000c8d4

08015ed0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015ed0:	b5b0      	push	{r4, r5, r7, lr}
 8015ed2:	b094      	sub	sp, #80	; 0x50
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015ed8:	2300      	movs	r3, #0
 8015eda:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d106      	bne.n	8015ef0 <tcp_receive+0x20>
 8015ee2:	4b91      	ldr	r3, [pc, #580]	; (8016128 <tcp_receive+0x258>)
 8015ee4:	f240 427b 	movw	r2, #1147	; 0x47b
 8015ee8:	4990      	ldr	r1, [pc, #576]	; (801612c <tcp_receive+0x25c>)
 8015eea:	4891      	ldr	r0, [pc, #580]	; (8016130 <tcp_receive+0x260>)
 8015eec:	f008 ff9a 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	7d1b      	ldrb	r3, [r3, #20]
 8015ef4:	2b03      	cmp	r3, #3
 8015ef6:	d806      	bhi.n	8015f06 <tcp_receive+0x36>
 8015ef8:	4b8b      	ldr	r3, [pc, #556]	; (8016128 <tcp_receive+0x258>)
 8015efa:	f240 427c 	movw	r2, #1148	; 0x47c
 8015efe:	498d      	ldr	r1, [pc, #564]	; (8016134 <tcp_receive+0x264>)
 8015f00:	488b      	ldr	r0, [pc, #556]	; (8016130 <tcp_receive+0x260>)
 8015f02:	f008 ff8f 	bl	801ee24 <iprintf>

  if (flags & TCP_ACK) {
 8015f06:	4b8c      	ldr	r3, [pc, #560]	; (8016138 <tcp_receive+0x268>)
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	f003 0310 	and.w	r3, r3, #16
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	f000 8264 	beq.w	80163dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f20:	4413      	add	r3, r2
 8015f22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015f28:	4b84      	ldr	r3, [pc, #528]	; (801613c <tcp_receive+0x26c>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	1ad3      	subs	r3, r2, r3
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	db1b      	blt.n	8015f6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015f36:	4b81      	ldr	r3, [pc, #516]	; (801613c <tcp_receive+0x26c>)
 8015f38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015f3a:	429a      	cmp	r2, r3
 8015f3c:	d106      	bne.n	8015f4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015f42:	4b7f      	ldr	r3, [pc, #508]	; (8016140 <tcp_receive+0x270>)
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	1ad3      	subs	r3, r2, r3
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	db0e      	blt.n	8015f6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015f50:	4b7b      	ldr	r3, [pc, #492]	; (8016140 <tcp_receive+0x270>)
 8015f52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015f54:	429a      	cmp	r2, r3
 8015f56:	d125      	bne.n	8015fa4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015f58:	4b7a      	ldr	r3, [pc, #488]	; (8016144 <tcp_receive+0x274>)
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	89db      	ldrh	r3, [r3, #14]
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d91c      	bls.n	8015fa4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015f6a:	4b76      	ldr	r3, [pc, #472]	; (8016144 <tcp_receive+0x274>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	89db      	ldrh	r3, [r3, #14]
 8015f70:	b29a      	uxth	r2, r3
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015f84:	429a      	cmp	r2, r3
 8015f86:	d205      	bcs.n	8015f94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015f94:	4b69      	ldr	r3, [pc, #420]	; (801613c <tcp_receive+0x26c>)
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015f9c:	4b68      	ldr	r3, [pc, #416]	; (8016140 <tcp_receive+0x270>)
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015fa4:	4b66      	ldr	r3, [pc, #408]	; (8016140 <tcp_receive+0x270>)
 8015fa6:	681a      	ldr	r2, [r3, #0]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015fac:	1ad3      	subs	r3, r2, r3
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	dc58      	bgt.n	8016064 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015fb2:	4b65      	ldr	r3, [pc, #404]	; (8016148 <tcp_receive+0x278>)
 8015fb4:	881b      	ldrh	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d14b      	bne.n	8016052 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015fc4:	4413      	add	r3, r2
 8015fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fc8:	429a      	cmp	r2, r3
 8015fca:	d142      	bne.n	8016052 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	db3d      	blt.n	8016052 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015fda:	4b59      	ldr	r3, [pc, #356]	; (8016140 <tcp_receive+0x270>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d137      	bne.n	8016052 <tcp_receive+0x182>
              found_dupack = 1;
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015fec:	2bff      	cmp	r3, #255	; 0xff
 8015fee:	d007      	beq.n	8016000 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015ff6:	3301      	adds	r3, #1
 8015ff8:	b2da      	uxtb	r2, r3
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016006:	2b03      	cmp	r3, #3
 8016008:	d91b      	bls.n	8016042 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016014:	4413      	add	r3, r2
 8016016:	b29a      	uxth	r2, r3
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801601e:	429a      	cmp	r2, r3
 8016020:	d30a      	bcc.n	8016038 <tcp_receive+0x168>
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801602c:	4413      	add	r3, r2
 801602e:	b29a      	uxth	r2, r3
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016036:	e004      	b.n	8016042 <tcp_receive+0x172>
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801603e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016048:	2b02      	cmp	r3, #2
 801604a:	d902      	bls.n	8016052 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f002 fb45 	bl	80186dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016054:	2b00      	cmp	r3, #0
 8016056:	f040 8161 	bne.w	801631c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	2200      	movs	r2, #0
 801605e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016062:	e15b      	b.n	801631c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016064:	4b36      	ldr	r3, [pc, #216]	; (8016140 <tcp_receive+0x270>)
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801606c:	1ad3      	subs	r3, r2, r3
 801606e:	3b01      	subs	r3, #1
 8016070:	2b00      	cmp	r3, #0
 8016072:	f2c0 814e 	blt.w	8016312 <tcp_receive+0x442>
 8016076:	4b32      	ldr	r3, [pc, #200]	; (8016140 <tcp_receive+0x270>)
 8016078:	681a      	ldr	r2, [r3, #0]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801607e:	1ad3      	subs	r3, r2, r3
 8016080:	2b00      	cmp	r3, #0
 8016082:	f300 8146 	bgt.w	8016312 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	8b5b      	ldrh	r3, [r3, #26]
 801608a:	f003 0304 	and.w	r3, r3, #4
 801608e:	2b00      	cmp	r3, #0
 8016090:	d010      	beq.n	80160b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	8b5b      	ldrh	r3, [r3, #26]
 8016096:	f023 0304 	bic.w	r3, r3, #4
 801609a:	b29a      	uxth	r2, r3
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2200      	movs	r2, #0
 80160b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	2200      	movs	r2, #0
 80160b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80160c2:	10db      	asrs	r3, r3, #3
 80160c4:	b21b      	sxth	r3, r3
 80160c6:	b29a      	uxth	r2, r3
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80160ce:	b29b      	uxth	r3, r3
 80160d0:	4413      	add	r3, r2
 80160d2:	b29b      	uxth	r3, r3
 80160d4:	b21a      	sxth	r2, r3
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80160dc:	4b18      	ldr	r3, [pc, #96]	; (8016140 <tcp_receive+0x270>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	1ad3      	subs	r3, r2, r3
 80160ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2200      	movs	r2, #0
 80160f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80160f4:	4b12      	ldr	r3, [pc, #72]	; (8016140 <tcp_receive+0x270>)
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	7d1b      	ldrb	r3, [r3, #20]
 8016100:	2b03      	cmp	r3, #3
 8016102:	f240 8097 	bls.w	8016234 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016112:	429a      	cmp	r2, r3
 8016114:	d245      	bcs.n	80161a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	8b5b      	ldrh	r3, [r3, #26]
 801611a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801611e:	2b00      	cmp	r3, #0
 8016120:	d014      	beq.n	801614c <tcp_receive+0x27c>
 8016122:	2301      	movs	r3, #1
 8016124:	e013      	b.n	801614e <tcp_receive+0x27e>
 8016126:	bf00      	nop
 8016128:	08022a04 	.word	0x08022a04
 801612c:	08022d34 	.word	0x08022d34
 8016130:	08022a50 	.word	0x08022a50
 8016134:	08022d50 	.word	0x08022d50
 8016138:	2000c8dc 	.word	0x2000c8dc
 801613c:	2000c8d0 	.word	0x2000c8d0
 8016140:	2000c8d4 	.word	0x2000c8d4
 8016144:	2000c8c0 	.word	0x2000c8c0
 8016148:	2000c8da 	.word	0x2000c8da
 801614c:	2302      	movs	r3, #2
 801614e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016156:	b29a      	uxth	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801615c:	fb12 f303 	smulbb	r3, r2, r3
 8016160:	b29b      	uxth	r3, r3
 8016162:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016164:	4293      	cmp	r3, r2
 8016166:	bf28      	it	cs
 8016168:	4613      	movcs	r3, r2
 801616a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016174:	4413      	add	r3, r2
 8016176:	b29a      	uxth	r2, r3
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801617e:	429a      	cmp	r2, r3
 8016180:	d309      	bcc.n	8016196 <tcp_receive+0x2c6>
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801618a:	4413      	add	r3, r2
 801618c:	b29a      	uxth	r2, r3
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016194:	e04e      	b.n	8016234 <tcp_receive+0x364>
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801619c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80161a0:	e048      	b.n	8016234 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80161a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80161aa:	4413      	add	r3, r2
 80161ac:	b29a      	uxth	r2, r3
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80161b4:	429a      	cmp	r2, r3
 80161b6:	d309      	bcc.n	80161cc <tcp_receive+0x2fc>
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80161be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80161c0:	4413      	add	r3, r2
 80161c2:	b29a      	uxth	r2, r3
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80161ca:	e004      	b.n	80161d6 <tcp_receive+0x306>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80161d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d326      	bcc.n	8016234 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80161f2:	1ad3      	subs	r3, r2, r3
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016206:	4413      	add	r3, r2
 8016208:	b29a      	uxth	r2, r3
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016210:	429a      	cmp	r2, r3
 8016212:	d30a      	bcc.n	801622a <tcp_receive+0x35a>
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801621e:	4413      	add	r3, r2
 8016220:	b29a      	uxth	r2, r3
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016228:	e004      	b.n	8016234 <tcp_receive+0x364>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801623c:	4a98      	ldr	r2, [pc, #608]	; (80164a0 <tcp_receive+0x5d0>)
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f7ff fdca 	bl	8015dd8 <tcp_free_acked_segments>
 8016244:	4602      	mov	r2, r0
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016252:	4a94      	ldr	r2, [pc, #592]	; (80164a4 <tcp_receive+0x5d4>)
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f7ff fdbf 	bl	8015dd8 <tcp_free_acked_segments>
 801625a:	4602      	mov	r2, r0
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016264:	2b00      	cmp	r3, #0
 8016266:	d104      	bne.n	8016272 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801626e:	861a      	strh	r2, [r3, #48]	; 0x30
 8016270:	e002      	b.n	8016278 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2200      	movs	r2, #0
 8016276:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016282:	2b00      	cmp	r3, #0
 8016284:	d103      	bne.n	801628e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016294:	4b84      	ldr	r3, [pc, #528]	; (80164a8 <tcp_receive+0x5d8>)
 8016296:	881b      	ldrh	r3, [r3, #0]
 8016298:	4413      	add	r3, r2
 801629a:	b29a      	uxth	r2, r3
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	8b5b      	ldrh	r3, [r3, #26]
 80162a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d035      	beq.n	801631a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d118      	bne.n	80162e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d00c      	beq.n	80162d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	685b      	ldr	r3, [r3, #4]
 80162ca:	4618      	mov	r0, r3
 80162cc:	f7fa fdf7 	bl	8010ebe <lwip_htonl>
 80162d0:	4603      	mov	r3, r0
 80162d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	dc20      	bgt.n	801631a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8b5b      	ldrh	r3, [r3, #26]
 80162dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80162e6:	e018      	b.n	801631a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162f0:	68db      	ldr	r3, [r3, #12]
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7fa fde2 	bl	8010ebe <lwip_htonl>
 80162fa:	4603      	mov	r3, r0
 80162fc:	1ae3      	subs	r3, r4, r3
 80162fe:	2b00      	cmp	r3, #0
 8016300:	dc0b      	bgt.n	801631a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	8b5b      	ldrh	r3, [r3, #26]
 8016306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801630a:	b29a      	uxth	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016310:	e003      	b.n	801631a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f002 fbce 	bl	8018ab4 <tcp_send_empty_ack>
 8016318:	e000      	b.n	801631c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801631a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016320:	2b00      	cmp	r3, #0
 8016322:	d05b      	beq.n	80163dc <tcp_receive+0x50c>
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016328:	4b60      	ldr	r3, [pc, #384]	; (80164ac <tcp_receive+0x5dc>)
 801632a:	681b      	ldr	r3, [r3, #0]
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	2b00      	cmp	r3, #0
 8016330:	da54      	bge.n	80163dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016332:	4b5f      	ldr	r3, [pc, #380]	; (80164b0 <tcp_receive+0x5e0>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	b29a      	uxth	r2, r3
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801633c:	b29b      	uxth	r3, r3
 801633e:	1ad3      	subs	r3, r2, r3
 8016340:	b29b      	uxth	r3, r3
 8016342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016346:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016350:	10db      	asrs	r3, r3, #3
 8016352:	b21b      	sxth	r3, r3
 8016354:	b29b      	uxth	r3, r3
 8016356:	1ad3      	subs	r3, r2, r3
 8016358:	b29b      	uxth	r3, r3
 801635a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016364:	b29a      	uxth	r2, r3
 8016366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801636a:	4413      	add	r3, r2
 801636c:	b29b      	uxth	r3, r3
 801636e:	b21a      	sxth	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016374:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016378:	2b00      	cmp	r3, #0
 801637a:	da05      	bge.n	8016388 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801637c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016380:	425b      	negs	r3, r3
 8016382:	b29b      	uxth	r3, r3
 8016384:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016388:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016392:	109b      	asrs	r3, r3, #2
 8016394:	b21b      	sxth	r3, r3
 8016396:	b29b      	uxth	r3, r3
 8016398:	1ad3      	subs	r3, r2, r3
 801639a:	b29b      	uxth	r3, r3
 801639c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80163a6:	b29a      	uxth	r2, r3
 80163a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80163ac:	4413      	add	r3, r2
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	b21a      	sxth	r2, r3
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80163bc:	10db      	asrs	r3, r3, #3
 80163be:	b21b      	sxth	r3, r3
 80163c0:	b29a      	uxth	r2, r3
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	4413      	add	r3, r2
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	b21a      	sxth	r2, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	2200      	movs	r2, #0
 80163da:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80163dc:	4b35      	ldr	r3, [pc, #212]	; (80164b4 <tcp_receive+0x5e4>)
 80163de:	881b      	ldrh	r3, [r3, #0]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	f000 84e2 	beq.w	8016daa <tcp_receive+0xeda>
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	7d1b      	ldrb	r3, [r3, #20]
 80163ea:	2b06      	cmp	r3, #6
 80163ec:	f200 84dd 	bhi.w	8016daa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80163f4:	4b30      	ldr	r3, [pc, #192]	; (80164b8 <tcp_receive+0x5e8>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	3b01      	subs	r3, #1
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	f2c0 808f 	blt.w	8016520 <tcp_receive+0x650>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016406:	4b2b      	ldr	r3, [pc, #172]	; (80164b4 <tcp_receive+0x5e4>)
 8016408:	881b      	ldrh	r3, [r3, #0]
 801640a:	4619      	mov	r1, r3
 801640c:	4b2a      	ldr	r3, [pc, #168]	; (80164b8 <tcp_receive+0x5e8>)
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	440b      	add	r3, r1
 8016412:	1ad3      	subs	r3, r2, r3
 8016414:	3301      	adds	r3, #1
 8016416:	2b00      	cmp	r3, #0
 8016418:	f300 8082 	bgt.w	8016520 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801641c:	4b27      	ldr	r3, [pc, #156]	; (80164bc <tcp_receive+0x5ec>)
 801641e:	685b      	ldr	r3, [r3, #4]
 8016420:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016426:	4b24      	ldr	r3, [pc, #144]	; (80164b8 <tcp_receive+0x5e8>)
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	1ad3      	subs	r3, r2, r3
 801642c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801642e:	4b23      	ldr	r3, [pc, #140]	; (80164bc <tcp_receive+0x5ec>)
 8016430:	685b      	ldr	r3, [r3, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d106      	bne.n	8016444 <tcp_receive+0x574>
 8016436:	4b22      	ldr	r3, [pc, #136]	; (80164c0 <tcp_receive+0x5f0>)
 8016438:	f240 5294 	movw	r2, #1428	; 0x594
 801643c:	4921      	ldr	r1, [pc, #132]	; (80164c4 <tcp_receive+0x5f4>)
 801643e:	4822      	ldr	r0, [pc, #136]	; (80164c8 <tcp_receive+0x5f8>)
 8016440:	f008 fcf0 	bl	801ee24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016446:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801644a:	4293      	cmp	r3, r2
 801644c:	d906      	bls.n	801645c <tcp_receive+0x58c>
 801644e:	4b1c      	ldr	r3, [pc, #112]	; (80164c0 <tcp_receive+0x5f0>)
 8016450:	f240 5295 	movw	r2, #1429	; 0x595
 8016454:	491d      	ldr	r1, [pc, #116]	; (80164cc <tcp_receive+0x5fc>)
 8016456:	481c      	ldr	r0, [pc, #112]	; (80164c8 <tcp_receive+0x5f8>)
 8016458:	f008 fce4 	bl	801ee24 <iprintf>
      off = (u16_t)off32;
 801645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016462:	4b16      	ldr	r3, [pc, #88]	; (80164bc <tcp_receive+0x5ec>)
 8016464:	685b      	ldr	r3, [r3, #4]
 8016466:	891b      	ldrh	r3, [r3, #8]
 8016468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801646c:	429a      	cmp	r2, r3
 801646e:	d906      	bls.n	801647e <tcp_receive+0x5ae>
 8016470:	4b13      	ldr	r3, [pc, #76]	; (80164c0 <tcp_receive+0x5f0>)
 8016472:	f240 5297 	movw	r2, #1431	; 0x597
 8016476:	4916      	ldr	r1, [pc, #88]	; (80164d0 <tcp_receive+0x600>)
 8016478:	4813      	ldr	r0, [pc, #76]	; (80164c8 <tcp_receive+0x5f8>)
 801647a:	f008 fcd3 	bl	801ee24 <iprintf>
      inseg.len -= off;
 801647e:	4b0f      	ldr	r3, [pc, #60]	; (80164bc <tcp_receive+0x5ec>)
 8016480:	891a      	ldrh	r2, [r3, #8]
 8016482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	b29a      	uxth	r2, r3
 801648a:	4b0c      	ldr	r3, [pc, #48]	; (80164bc <tcp_receive+0x5ec>)
 801648c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801648e:	4b0b      	ldr	r3, [pc, #44]	; (80164bc <tcp_receive+0x5ec>)
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	891a      	ldrh	r2, [r3, #8]
 8016494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016498:	1ad3      	subs	r3, r2, r3
 801649a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801649c:	e02a      	b.n	80164f4 <tcp_receive+0x624>
 801649e:	bf00      	nop
 80164a0:	08022d6c 	.word	0x08022d6c
 80164a4:	08022d74 	.word	0x08022d74
 80164a8:	2000c8d8 	.word	0x2000c8d8
 80164ac:	2000c8d4 	.word	0x2000c8d4
 80164b0:	2000c898 	.word	0x2000c898
 80164b4:	2000c8da 	.word	0x2000c8da
 80164b8:	2000c8d0 	.word	0x2000c8d0
 80164bc:	2000c8b0 	.word	0x2000c8b0
 80164c0:	08022a04 	.word	0x08022a04
 80164c4:	08022d7c 	.word	0x08022d7c
 80164c8:	08022a50 	.word	0x08022a50
 80164cc:	08022d8c 	.word	0x08022d8c
 80164d0:	08022d9c 	.word	0x08022d9c
        off -= p->len;
 80164d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164d6:	895b      	ldrh	r3, [r3, #10]
 80164d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164dc:	1ad3      	subs	r3, r2, r3
 80164de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80164e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80164e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80164e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164ea:	2200      	movs	r2, #0
 80164ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80164ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80164f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164f6:	895b      	ldrh	r3, [r3, #10]
 80164f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164fc:	429a      	cmp	r2, r3
 80164fe:	d8e9      	bhi.n	80164d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016504:	4619      	mov	r1, r3
 8016506:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016508:	f7fc f874 	bl	80125f4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016510:	4a91      	ldr	r2, [pc, #580]	; (8016758 <tcp_receive+0x888>)
 8016512:	6013      	str	r3, [r2, #0]
 8016514:	4b91      	ldr	r3, [pc, #580]	; (801675c <tcp_receive+0x88c>)
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	4a8f      	ldr	r2, [pc, #572]	; (8016758 <tcp_receive+0x888>)
 801651a:	6812      	ldr	r2, [r2, #0]
 801651c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801651e:	e00d      	b.n	801653c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016520:	4b8d      	ldr	r3, [pc, #564]	; (8016758 <tcp_receive+0x888>)
 8016522:	681a      	ldr	r2, [r3, #0]
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016528:	1ad3      	subs	r3, r2, r3
 801652a:	2b00      	cmp	r3, #0
 801652c:	da06      	bge.n	801653c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	8b5b      	ldrh	r3, [r3, #26]
 8016532:	f043 0302 	orr.w	r3, r3, #2
 8016536:	b29a      	uxth	r2, r3
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801653c:	4b86      	ldr	r3, [pc, #536]	; (8016758 <tcp_receive+0x888>)
 801653e:	681a      	ldr	r2, [r3, #0]
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016544:	1ad3      	subs	r3, r2, r3
 8016546:	2b00      	cmp	r3, #0
 8016548:	f2c0 842a 	blt.w	8016da0 <tcp_receive+0xed0>
 801654c:	4b82      	ldr	r3, [pc, #520]	; (8016758 <tcp_receive+0x888>)
 801654e:	681a      	ldr	r2, [r3, #0]
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016554:	6879      	ldr	r1, [r7, #4]
 8016556:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016558:	440b      	add	r3, r1
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	3301      	adds	r3, #1
 801655e:	2b00      	cmp	r3, #0
 8016560:	f300 841e 	bgt.w	8016da0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016568:	4b7b      	ldr	r3, [pc, #492]	; (8016758 <tcp_receive+0x888>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	429a      	cmp	r2, r3
 801656e:	f040 829a 	bne.w	8016aa6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016572:	4b7a      	ldr	r3, [pc, #488]	; (801675c <tcp_receive+0x88c>)
 8016574:	891c      	ldrh	r4, [r3, #8]
 8016576:	4b79      	ldr	r3, [pc, #484]	; (801675c <tcp_receive+0x88c>)
 8016578:	68db      	ldr	r3, [r3, #12]
 801657a:	899b      	ldrh	r3, [r3, #12]
 801657c:	b29b      	uxth	r3, r3
 801657e:	4618      	mov	r0, r3
 8016580:	f7fa fc88 	bl	8010e94 <lwip_htons>
 8016584:	4603      	mov	r3, r0
 8016586:	b2db      	uxtb	r3, r3
 8016588:	f003 0303 	and.w	r3, r3, #3
 801658c:	2b00      	cmp	r3, #0
 801658e:	d001      	beq.n	8016594 <tcp_receive+0x6c4>
 8016590:	2301      	movs	r3, #1
 8016592:	e000      	b.n	8016596 <tcp_receive+0x6c6>
 8016594:	2300      	movs	r3, #0
 8016596:	4423      	add	r3, r4
 8016598:	b29a      	uxth	r2, r3
 801659a:	4b71      	ldr	r3, [pc, #452]	; (8016760 <tcp_receive+0x890>)
 801659c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80165a2:	4b6f      	ldr	r3, [pc, #444]	; (8016760 <tcp_receive+0x890>)
 80165a4:	881b      	ldrh	r3, [r3, #0]
 80165a6:	429a      	cmp	r2, r3
 80165a8:	d275      	bcs.n	8016696 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80165aa:	4b6c      	ldr	r3, [pc, #432]	; (801675c <tcp_receive+0x88c>)
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	899b      	ldrh	r3, [r3, #12]
 80165b0:	b29b      	uxth	r3, r3
 80165b2:	4618      	mov	r0, r3
 80165b4:	f7fa fc6e 	bl	8010e94 <lwip_htons>
 80165b8:	4603      	mov	r3, r0
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	f003 0301 	and.w	r3, r3, #1
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d01f      	beq.n	8016604 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80165c4:	4b65      	ldr	r3, [pc, #404]	; (801675c <tcp_receive+0x88c>)
 80165c6:	68db      	ldr	r3, [r3, #12]
 80165c8:	899b      	ldrh	r3, [r3, #12]
 80165ca:	b29b      	uxth	r3, r3
 80165cc:	b21b      	sxth	r3, r3
 80165ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80165d2:	b21c      	sxth	r4, r3
 80165d4:	4b61      	ldr	r3, [pc, #388]	; (801675c <tcp_receive+0x88c>)
 80165d6:	68db      	ldr	r3, [r3, #12]
 80165d8:	899b      	ldrh	r3, [r3, #12]
 80165da:	b29b      	uxth	r3, r3
 80165dc:	4618      	mov	r0, r3
 80165de:	f7fa fc59 	bl	8010e94 <lwip_htons>
 80165e2:	4603      	mov	r3, r0
 80165e4:	b2db      	uxtb	r3, r3
 80165e6:	b29b      	uxth	r3, r3
 80165e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80165ec:	b29b      	uxth	r3, r3
 80165ee:	4618      	mov	r0, r3
 80165f0:	f7fa fc50 	bl	8010e94 <lwip_htons>
 80165f4:	4603      	mov	r3, r0
 80165f6:	b21b      	sxth	r3, r3
 80165f8:	4323      	orrs	r3, r4
 80165fa:	b21a      	sxth	r2, r3
 80165fc:	4b57      	ldr	r3, [pc, #348]	; (801675c <tcp_receive+0x88c>)
 80165fe:	68db      	ldr	r3, [r3, #12]
 8016600:	b292      	uxth	r2, r2
 8016602:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016608:	4b54      	ldr	r3, [pc, #336]	; (801675c <tcp_receive+0x88c>)
 801660a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801660c:	4b53      	ldr	r3, [pc, #332]	; (801675c <tcp_receive+0x88c>)
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	899b      	ldrh	r3, [r3, #12]
 8016612:	b29b      	uxth	r3, r3
 8016614:	4618      	mov	r0, r3
 8016616:	f7fa fc3d 	bl	8010e94 <lwip_htons>
 801661a:	4603      	mov	r3, r0
 801661c:	b2db      	uxtb	r3, r3
 801661e:	f003 0302 	and.w	r3, r3, #2
 8016622:	2b00      	cmp	r3, #0
 8016624:	d005      	beq.n	8016632 <tcp_receive+0x762>
            inseg.len -= 1;
 8016626:	4b4d      	ldr	r3, [pc, #308]	; (801675c <tcp_receive+0x88c>)
 8016628:	891b      	ldrh	r3, [r3, #8]
 801662a:	3b01      	subs	r3, #1
 801662c:	b29a      	uxth	r2, r3
 801662e:	4b4b      	ldr	r3, [pc, #300]	; (801675c <tcp_receive+0x88c>)
 8016630:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016632:	4b4a      	ldr	r3, [pc, #296]	; (801675c <tcp_receive+0x88c>)
 8016634:	685b      	ldr	r3, [r3, #4]
 8016636:	4a49      	ldr	r2, [pc, #292]	; (801675c <tcp_receive+0x88c>)
 8016638:	8912      	ldrh	r2, [r2, #8]
 801663a:	4611      	mov	r1, r2
 801663c:	4618      	mov	r0, r3
 801663e:	f7fb fed9 	bl	80123f4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016642:	4b46      	ldr	r3, [pc, #280]	; (801675c <tcp_receive+0x88c>)
 8016644:	891c      	ldrh	r4, [r3, #8]
 8016646:	4b45      	ldr	r3, [pc, #276]	; (801675c <tcp_receive+0x88c>)
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	899b      	ldrh	r3, [r3, #12]
 801664c:	b29b      	uxth	r3, r3
 801664e:	4618      	mov	r0, r3
 8016650:	f7fa fc20 	bl	8010e94 <lwip_htons>
 8016654:	4603      	mov	r3, r0
 8016656:	b2db      	uxtb	r3, r3
 8016658:	f003 0303 	and.w	r3, r3, #3
 801665c:	2b00      	cmp	r3, #0
 801665e:	d001      	beq.n	8016664 <tcp_receive+0x794>
 8016660:	2301      	movs	r3, #1
 8016662:	e000      	b.n	8016666 <tcp_receive+0x796>
 8016664:	2300      	movs	r3, #0
 8016666:	4423      	add	r3, r4
 8016668:	b29a      	uxth	r2, r3
 801666a:	4b3d      	ldr	r3, [pc, #244]	; (8016760 <tcp_receive+0x890>)
 801666c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801666e:	4b3c      	ldr	r3, [pc, #240]	; (8016760 <tcp_receive+0x890>)
 8016670:	881b      	ldrh	r3, [r3, #0]
 8016672:	461a      	mov	r2, r3
 8016674:	4b38      	ldr	r3, [pc, #224]	; (8016758 <tcp_receive+0x888>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	441a      	add	r2, r3
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801667e:	6879      	ldr	r1, [r7, #4]
 8016680:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016682:	440b      	add	r3, r1
 8016684:	429a      	cmp	r2, r3
 8016686:	d006      	beq.n	8016696 <tcp_receive+0x7c6>
 8016688:	4b36      	ldr	r3, [pc, #216]	; (8016764 <tcp_receive+0x894>)
 801668a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801668e:	4936      	ldr	r1, [pc, #216]	; (8016768 <tcp_receive+0x898>)
 8016690:	4836      	ldr	r0, [pc, #216]	; (801676c <tcp_receive+0x89c>)
 8016692:	f008 fbc7 	bl	801ee24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801669a:	2b00      	cmp	r3, #0
 801669c:	f000 80e7 	beq.w	801686e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80166a0:	4b2e      	ldr	r3, [pc, #184]	; (801675c <tcp_receive+0x88c>)
 80166a2:	68db      	ldr	r3, [r3, #12]
 80166a4:	899b      	ldrh	r3, [r3, #12]
 80166a6:	b29b      	uxth	r3, r3
 80166a8:	4618      	mov	r0, r3
 80166aa:	f7fa fbf3 	bl	8010e94 <lwip_htons>
 80166ae:	4603      	mov	r3, r0
 80166b0:	b2db      	uxtb	r3, r3
 80166b2:	f003 0301 	and.w	r3, r3, #1
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d010      	beq.n	80166dc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80166ba:	e00a      	b.n	80166d2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166c6:	681a      	ldr	r2, [r3, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f7fd fcc4 	bl	801405a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d1f0      	bne.n	80166bc <tcp_receive+0x7ec>
 80166da:	e0c8      	b.n	801686e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80166e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80166e2:	e052      	b.n	801678a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80166e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	899b      	ldrh	r3, [r3, #12]
 80166ea:	b29b      	uxth	r3, r3
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7fa fbd1 	bl	8010e94 <lwip_htons>
 80166f2:	4603      	mov	r3, r0
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	f003 0301 	and.w	r3, r3, #1
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d03d      	beq.n	801677a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80166fe:	4b17      	ldr	r3, [pc, #92]	; (801675c <tcp_receive+0x88c>)
 8016700:	68db      	ldr	r3, [r3, #12]
 8016702:	899b      	ldrh	r3, [r3, #12]
 8016704:	b29b      	uxth	r3, r3
 8016706:	4618      	mov	r0, r3
 8016708:	f7fa fbc4 	bl	8010e94 <lwip_htons>
 801670c:	4603      	mov	r3, r0
 801670e:	b2db      	uxtb	r3, r3
 8016710:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016714:	2b00      	cmp	r3, #0
 8016716:	d130      	bne.n	801677a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016718:	4b10      	ldr	r3, [pc, #64]	; (801675c <tcp_receive+0x88c>)
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	899b      	ldrh	r3, [r3, #12]
 801671e:	b29c      	uxth	r4, r3
 8016720:	2001      	movs	r0, #1
 8016722:	f7fa fbb7 	bl	8010e94 <lwip_htons>
 8016726:	4603      	mov	r3, r0
 8016728:	461a      	mov	r2, r3
 801672a:	4b0c      	ldr	r3, [pc, #48]	; (801675c <tcp_receive+0x88c>)
 801672c:	68db      	ldr	r3, [r3, #12]
 801672e:	4322      	orrs	r2, r4
 8016730:	b292      	uxth	r2, r2
 8016732:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016734:	4b09      	ldr	r3, [pc, #36]	; (801675c <tcp_receive+0x88c>)
 8016736:	891c      	ldrh	r4, [r3, #8]
 8016738:	4b08      	ldr	r3, [pc, #32]	; (801675c <tcp_receive+0x88c>)
 801673a:	68db      	ldr	r3, [r3, #12]
 801673c:	899b      	ldrh	r3, [r3, #12]
 801673e:	b29b      	uxth	r3, r3
 8016740:	4618      	mov	r0, r3
 8016742:	f7fa fba7 	bl	8010e94 <lwip_htons>
 8016746:	4603      	mov	r3, r0
 8016748:	b2db      	uxtb	r3, r3
 801674a:	f003 0303 	and.w	r3, r3, #3
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00e      	beq.n	8016770 <tcp_receive+0x8a0>
 8016752:	2301      	movs	r3, #1
 8016754:	e00d      	b.n	8016772 <tcp_receive+0x8a2>
 8016756:	bf00      	nop
 8016758:	2000c8d0 	.word	0x2000c8d0
 801675c:	2000c8b0 	.word	0x2000c8b0
 8016760:	2000c8da 	.word	0x2000c8da
 8016764:	08022a04 	.word	0x08022a04
 8016768:	08022dac 	.word	0x08022dac
 801676c:	08022a50 	.word	0x08022a50
 8016770:	2300      	movs	r3, #0
 8016772:	4423      	add	r3, r4
 8016774:	b29a      	uxth	r2, r3
 8016776:	4b98      	ldr	r3, [pc, #608]	; (80169d8 <tcp_receive+0xb08>)
 8016778:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801677c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801677e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016784:	6938      	ldr	r0, [r7, #16]
 8016786:	f7fd fc68 	bl	801405a <tcp_seg_free>
            while (next &&
 801678a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801678c:	2b00      	cmp	r3, #0
 801678e:	d00e      	beq.n	80167ae <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016790:	4b91      	ldr	r3, [pc, #580]	; (80169d8 <tcp_receive+0xb08>)
 8016792:	881b      	ldrh	r3, [r3, #0]
 8016794:	461a      	mov	r2, r3
 8016796:	4b91      	ldr	r3, [pc, #580]	; (80169dc <tcp_receive+0xb0c>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	441a      	add	r2, r3
 801679c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801679e:	68db      	ldr	r3, [r3, #12]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80167a4:	8909      	ldrh	r1, [r1, #8]
 80167a6:	440b      	add	r3, r1
 80167a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	da9a      	bge.n	80166e4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80167ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d059      	beq.n	8016868 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80167b4:	4b88      	ldr	r3, [pc, #544]	; (80169d8 <tcp_receive+0xb08>)
 80167b6:	881b      	ldrh	r3, [r3, #0]
 80167b8:	461a      	mov	r2, r3
 80167ba:	4b88      	ldr	r3, [pc, #544]	; (80169dc <tcp_receive+0xb0c>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	441a      	add	r2, r3
 80167c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167c2:	68db      	ldr	r3, [r3, #12]
 80167c4:	685b      	ldr	r3, [r3, #4]
 80167c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	dd4d      	ble.n	8016868 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80167cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	b29a      	uxth	r2, r3
 80167d4:	4b81      	ldr	r3, [pc, #516]	; (80169dc <tcp_receive+0xb0c>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	b29b      	uxth	r3, r3
 80167da:	1ad3      	subs	r3, r2, r3
 80167dc:	b29a      	uxth	r2, r3
 80167de:	4b80      	ldr	r3, [pc, #512]	; (80169e0 <tcp_receive+0xb10>)
 80167e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80167e2:	4b7f      	ldr	r3, [pc, #508]	; (80169e0 <tcp_receive+0xb10>)
 80167e4:	68db      	ldr	r3, [r3, #12]
 80167e6:	899b      	ldrh	r3, [r3, #12]
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fa fb52 	bl	8010e94 <lwip_htons>
 80167f0:	4603      	mov	r3, r0
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	f003 0302 	and.w	r3, r3, #2
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d005      	beq.n	8016808 <tcp_receive+0x938>
                inseg.len -= 1;
 80167fc:	4b78      	ldr	r3, [pc, #480]	; (80169e0 <tcp_receive+0xb10>)
 80167fe:	891b      	ldrh	r3, [r3, #8]
 8016800:	3b01      	subs	r3, #1
 8016802:	b29a      	uxth	r2, r3
 8016804:	4b76      	ldr	r3, [pc, #472]	; (80169e0 <tcp_receive+0xb10>)
 8016806:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016808:	4b75      	ldr	r3, [pc, #468]	; (80169e0 <tcp_receive+0xb10>)
 801680a:	685b      	ldr	r3, [r3, #4]
 801680c:	4a74      	ldr	r2, [pc, #464]	; (80169e0 <tcp_receive+0xb10>)
 801680e:	8912      	ldrh	r2, [r2, #8]
 8016810:	4611      	mov	r1, r2
 8016812:	4618      	mov	r0, r3
 8016814:	f7fb fdee 	bl	80123f4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016818:	4b71      	ldr	r3, [pc, #452]	; (80169e0 <tcp_receive+0xb10>)
 801681a:	891c      	ldrh	r4, [r3, #8]
 801681c:	4b70      	ldr	r3, [pc, #448]	; (80169e0 <tcp_receive+0xb10>)
 801681e:	68db      	ldr	r3, [r3, #12]
 8016820:	899b      	ldrh	r3, [r3, #12]
 8016822:	b29b      	uxth	r3, r3
 8016824:	4618      	mov	r0, r3
 8016826:	f7fa fb35 	bl	8010e94 <lwip_htons>
 801682a:	4603      	mov	r3, r0
 801682c:	b2db      	uxtb	r3, r3
 801682e:	f003 0303 	and.w	r3, r3, #3
 8016832:	2b00      	cmp	r3, #0
 8016834:	d001      	beq.n	801683a <tcp_receive+0x96a>
 8016836:	2301      	movs	r3, #1
 8016838:	e000      	b.n	801683c <tcp_receive+0x96c>
 801683a:	2300      	movs	r3, #0
 801683c:	4423      	add	r3, r4
 801683e:	b29a      	uxth	r2, r3
 8016840:	4b65      	ldr	r3, [pc, #404]	; (80169d8 <tcp_receive+0xb08>)
 8016842:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016844:	4b64      	ldr	r3, [pc, #400]	; (80169d8 <tcp_receive+0xb08>)
 8016846:	881b      	ldrh	r3, [r3, #0]
 8016848:	461a      	mov	r2, r3
 801684a:	4b64      	ldr	r3, [pc, #400]	; (80169dc <tcp_receive+0xb0c>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	441a      	add	r2, r3
 8016850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016852:	68db      	ldr	r3, [r3, #12]
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	429a      	cmp	r2, r3
 8016858:	d006      	beq.n	8016868 <tcp_receive+0x998>
 801685a:	4b62      	ldr	r3, [pc, #392]	; (80169e4 <tcp_receive+0xb14>)
 801685c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8016860:	4961      	ldr	r1, [pc, #388]	; (80169e8 <tcp_receive+0xb18>)
 8016862:	4862      	ldr	r0, [pc, #392]	; (80169ec <tcp_receive+0xb1c>)
 8016864:	f008 fade 	bl	801ee24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801686c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801686e:	4b5a      	ldr	r3, [pc, #360]	; (80169d8 <tcp_receive+0xb08>)
 8016870:	881b      	ldrh	r3, [r3, #0]
 8016872:	461a      	mov	r2, r3
 8016874:	4b59      	ldr	r3, [pc, #356]	; (80169dc <tcp_receive+0xb0c>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	441a      	add	r2, r3
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016882:	4b55      	ldr	r3, [pc, #340]	; (80169d8 <tcp_receive+0xb08>)
 8016884:	881b      	ldrh	r3, [r3, #0]
 8016886:	429a      	cmp	r2, r3
 8016888:	d206      	bcs.n	8016898 <tcp_receive+0x9c8>
 801688a:	4b56      	ldr	r3, [pc, #344]	; (80169e4 <tcp_receive+0xb14>)
 801688c:	f240 6207 	movw	r2, #1543	; 0x607
 8016890:	4957      	ldr	r1, [pc, #348]	; (80169f0 <tcp_receive+0xb20>)
 8016892:	4856      	ldr	r0, [pc, #344]	; (80169ec <tcp_receive+0xb1c>)
 8016894:	f008 fac6 	bl	801ee24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801689c:	4b4e      	ldr	r3, [pc, #312]	; (80169d8 <tcp_receive+0xb08>)
 801689e:	881b      	ldrh	r3, [r3, #0]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80168a8:	6878      	ldr	r0, [r7, #4]
 80168aa:	f7fc feb1 	bl	8013610 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80168ae:	4b4c      	ldr	r3, [pc, #304]	; (80169e0 <tcp_receive+0xb10>)
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	891b      	ldrh	r3, [r3, #8]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d006      	beq.n	80168c6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80168b8:	4b49      	ldr	r3, [pc, #292]	; (80169e0 <tcp_receive+0xb10>)
 80168ba:	685b      	ldr	r3, [r3, #4]
 80168bc:	4a4d      	ldr	r2, [pc, #308]	; (80169f4 <tcp_receive+0xb24>)
 80168be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80168c0:	4b47      	ldr	r3, [pc, #284]	; (80169e0 <tcp_receive+0xb10>)
 80168c2:	2200      	movs	r2, #0
 80168c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80168c6:	4b46      	ldr	r3, [pc, #280]	; (80169e0 <tcp_receive+0xb10>)
 80168c8:	68db      	ldr	r3, [r3, #12]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	b29b      	uxth	r3, r3
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7fa fae0 	bl	8010e94 <lwip_htons>
 80168d4:	4603      	mov	r3, r0
 80168d6:	b2db      	uxtb	r3, r3
 80168d8:	f003 0301 	and.w	r3, r3, #1
 80168dc:	2b00      	cmp	r3, #0
 80168de:	f000 80b8 	beq.w	8016a52 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80168e2:	4b45      	ldr	r3, [pc, #276]	; (80169f8 <tcp_receive+0xb28>)
 80168e4:	781b      	ldrb	r3, [r3, #0]
 80168e6:	f043 0320 	orr.w	r3, r3, #32
 80168ea:	b2da      	uxtb	r2, r3
 80168ec:	4b42      	ldr	r3, [pc, #264]	; (80169f8 <tcp_receive+0xb28>)
 80168ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80168f0:	e0af      	b.n	8016a52 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80168fc:	68db      	ldr	r3, [r3, #12]
 80168fe:	685b      	ldr	r3, [r3, #4]
 8016900:	4a36      	ldr	r2, [pc, #216]	; (80169dc <tcp_receive+0xb0c>)
 8016902:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	891b      	ldrh	r3, [r3, #8]
 8016908:	461c      	mov	r4, r3
 801690a:	68bb      	ldr	r3, [r7, #8]
 801690c:	68db      	ldr	r3, [r3, #12]
 801690e:	899b      	ldrh	r3, [r3, #12]
 8016910:	b29b      	uxth	r3, r3
 8016912:	4618      	mov	r0, r3
 8016914:	f7fa fabe 	bl	8010e94 <lwip_htons>
 8016918:	4603      	mov	r3, r0
 801691a:	b2db      	uxtb	r3, r3
 801691c:	f003 0303 	and.w	r3, r3, #3
 8016920:	2b00      	cmp	r3, #0
 8016922:	d001      	beq.n	8016928 <tcp_receive+0xa58>
 8016924:	2301      	movs	r3, #1
 8016926:	e000      	b.n	801692a <tcp_receive+0xa5a>
 8016928:	2300      	movs	r3, #0
 801692a:	191a      	adds	r2, r3, r4
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016930:	441a      	add	r2, r3
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801693a:	461c      	mov	r4, r3
 801693c:	68bb      	ldr	r3, [r7, #8]
 801693e:	891b      	ldrh	r3, [r3, #8]
 8016940:	461d      	mov	r5, r3
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	68db      	ldr	r3, [r3, #12]
 8016946:	899b      	ldrh	r3, [r3, #12]
 8016948:	b29b      	uxth	r3, r3
 801694a:	4618      	mov	r0, r3
 801694c:	f7fa faa2 	bl	8010e94 <lwip_htons>
 8016950:	4603      	mov	r3, r0
 8016952:	b2db      	uxtb	r3, r3
 8016954:	f003 0303 	and.w	r3, r3, #3
 8016958:	2b00      	cmp	r3, #0
 801695a:	d001      	beq.n	8016960 <tcp_receive+0xa90>
 801695c:	2301      	movs	r3, #1
 801695e:	e000      	b.n	8016962 <tcp_receive+0xa92>
 8016960:	2300      	movs	r3, #0
 8016962:	442b      	add	r3, r5
 8016964:	429c      	cmp	r4, r3
 8016966:	d206      	bcs.n	8016976 <tcp_receive+0xaa6>
 8016968:	4b1e      	ldr	r3, [pc, #120]	; (80169e4 <tcp_receive+0xb14>)
 801696a:	f240 622b 	movw	r2, #1579	; 0x62b
 801696e:	4923      	ldr	r1, [pc, #140]	; (80169fc <tcp_receive+0xb2c>)
 8016970:	481e      	ldr	r0, [pc, #120]	; (80169ec <tcp_receive+0xb1c>)
 8016972:	f008 fa57 	bl	801ee24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	891b      	ldrh	r3, [r3, #8]
 801697a:	461c      	mov	r4, r3
 801697c:	68bb      	ldr	r3, [r7, #8]
 801697e:	68db      	ldr	r3, [r3, #12]
 8016980:	899b      	ldrh	r3, [r3, #12]
 8016982:	b29b      	uxth	r3, r3
 8016984:	4618      	mov	r0, r3
 8016986:	f7fa fa85 	bl	8010e94 <lwip_htons>
 801698a:	4603      	mov	r3, r0
 801698c:	b2db      	uxtb	r3, r3
 801698e:	f003 0303 	and.w	r3, r3, #3
 8016992:	2b00      	cmp	r3, #0
 8016994:	d001      	beq.n	801699a <tcp_receive+0xaca>
 8016996:	2301      	movs	r3, #1
 8016998:	e000      	b.n	801699c <tcp_receive+0xacc>
 801699a:	2300      	movs	r3, #0
 801699c:	1919      	adds	r1, r3, r4
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80169a2:	b28b      	uxth	r3, r1
 80169a4:	1ad3      	subs	r3, r2, r3
 80169a6:	b29a      	uxth	r2, r3
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80169ac:	6878      	ldr	r0, [r7, #4]
 80169ae:	f7fc fe2f 	bl	8013610 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	685b      	ldr	r3, [r3, #4]
 80169b6:	891b      	ldrh	r3, [r3, #8]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d028      	beq.n	8016a0e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80169bc:	4b0d      	ldr	r3, [pc, #52]	; (80169f4 <tcp_receive+0xb24>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d01d      	beq.n	8016a00 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80169c4:	4b0b      	ldr	r3, [pc, #44]	; (80169f4 <tcp_receive+0xb24>)
 80169c6:	681a      	ldr	r2, [r3, #0]
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	685b      	ldr	r3, [r3, #4]
 80169cc:	4619      	mov	r1, r3
 80169ce:	4610      	mov	r0, r2
 80169d0:	f7fb ff64 	bl	801289c <pbuf_cat>
 80169d4:	e018      	b.n	8016a08 <tcp_receive+0xb38>
 80169d6:	bf00      	nop
 80169d8:	2000c8da 	.word	0x2000c8da
 80169dc:	2000c8d0 	.word	0x2000c8d0
 80169e0:	2000c8b0 	.word	0x2000c8b0
 80169e4:	08022a04 	.word	0x08022a04
 80169e8:	08022de4 	.word	0x08022de4
 80169ec:	08022a50 	.word	0x08022a50
 80169f0:	08022e20 	.word	0x08022e20
 80169f4:	2000c8e0 	.word	0x2000c8e0
 80169f8:	2000c8dd 	.word	0x2000c8dd
 80169fc:	08022e40 	.word	0x08022e40
            } else {
              recv_data = cseg->p;
 8016a00:	68bb      	ldr	r3, [r7, #8]
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	4a70      	ldr	r2, [pc, #448]	; (8016bc8 <tcp_receive+0xcf8>)
 8016a06:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	68db      	ldr	r3, [r3, #12]
 8016a12:	899b      	ldrh	r3, [r3, #12]
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7fa fa3c 	bl	8010e94 <lwip_htons>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	f003 0301 	and.w	r3, r3, #1
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d00d      	beq.n	8016a44 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016a28:	4b68      	ldr	r3, [pc, #416]	; (8016bcc <tcp_receive+0xcfc>)
 8016a2a:	781b      	ldrb	r3, [r3, #0]
 8016a2c:	f043 0320 	orr.w	r3, r3, #32
 8016a30:	b2da      	uxtb	r2, r3
 8016a32:	4b66      	ldr	r3, [pc, #408]	; (8016bcc <tcp_receive+0xcfc>)
 8016a34:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	7d1b      	ldrb	r3, [r3, #20]
 8016a3a:	2b04      	cmp	r3, #4
 8016a3c:	d102      	bne.n	8016a44 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2207      	movs	r2, #7
 8016a42:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	681a      	ldr	r2, [r3, #0]
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016a4c:	68b8      	ldr	r0, [r7, #8]
 8016a4e:	f7fd fb04 	bl	801405a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d008      	beq.n	8016a6c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	685a      	ldr	r2, [r3, #4]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8016a66:	429a      	cmp	r2, r3
 8016a68:	f43f af43 	beq.w	80168f2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	8b5b      	ldrh	r3, [r3, #26]
 8016a70:	f003 0301 	and.w	r3, r3, #1
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d00e      	beq.n	8016a96 <tcp_receive+0xbc6>
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	8b5b      	ldrh	r3, [r3, #26]
 8016a7c:	f023 0301 	bic.w	r3, r3, #1
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	835a      	strh	r2, [r3, #26]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	8b5b      	ldrh	r3, [r3, #26]
 8016a8a:	f043 0302 	orr.w	r3, r3, #2
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016a94:	e188      	b.n	8016da8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	8b5b      	ldrh	r3, [r3, #26]
 8016a9a:	f043 0301 	orr.w	r3, r3, #1
 8016a9e:	b29a      	uxth	r2, r3
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016aa4:	e180      	b.n	8016da8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d106      	bne.n	8016abc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016aae:	4848      	ldr	r0, [pc, #288]	; (8016bd0 <tcp_receive+0xd00>)
 8016ab0:	f7fd faec 	bl	801408c <tcp_seg_copy>
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8016aba:	e16d      	b.n	8016d98 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016abc:	2300      	movs	r3, #0
 8016abe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8016ac6:	e157      	b.n	8016d78 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8016ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	685a      	ldr	r2, [r3, #4]
 8016ace:	4b41      	ldr	r3, [pc, #260]	; (8016bd4 <tcp_receive+0xd04>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d11d      	bne.n	8016b12 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016ad6:	4b3e      	ldr	r3, [pc, #248]	; (8016bd0 <tcp_receive+0xd00>)
 8016ad8:	891a      	ldrh	r2, [r3, #8]
 8016ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016adc:	891b      	ldrh	r3, [r3, #8]
 8016ade:	429a      	cmp	r2, r3
 8016ae0:	f240 814f 	bls.w	8016d82 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016ae4:	483a      	ldr	r0, [pc, #232]	; (8016bd0 <tcp_receive+0xd00>)
 8016ae6:	f7fd fad1 	bl	801408c <tcp_seg_copy>
 8016aea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	f000 8149 	beq.w	8016d86 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8016af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d003      	beq.n	8016b02 <tcp_receive+0xc32>
                    prev->next = cseg;
 8016afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016afc:	697a      	ldr	r2, [r7, #20]
 8016afe:	601a      	str	r2, [r3, #0]
 8016b00:	e002      	b.n	8016b08 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	697a      	ldr	r2, [r7, #20]
 8016b06:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016b0a:	6978      	ldr	r0, [r7, #20]
 8016b0c:	f7ff f8dc 	bl	8015cc8 <tcp_oos_insert_segment>
                }
                break;
 8016b10:	e139      	b.n	8016d86 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d117      	bne.n	8016b48 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016b18:	4b2e      	ldr	r3, [pc, #184]	; (8016bd4 <tcp_receive+0xd04>)
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	685b      	ldr	r3, [r3, #4]
 8016b22:	1ad3      	subs	r3, r2, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da57      	bge.n	8016bd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016b28:	4829      	ldr	r0, [pc, #164]	; (8016bd0 <tcp_receive+0xd00>)
 8016b2a:	f7fd faaf 	bl	801408c <tcp_seg_copy>
 8016b2e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016b30:	69bb      	ldr	r3, [r7, #24]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	f000 8129 	beq.w	8016d8a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	69ba      	ldr	r2, [r7, #24]
 8016b3c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016b40:	69b8      	ldr	r0, [r7, #24]
 8016b42:	f7ff f8c1 	bl	8015cc8 <tcp_oos_insert_segment>
                  }
                  break;
 8016b46:	e120      	b.n	8016d8a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016b48:	4b22      	ldr	r3, [pc, #136]	; (8016bd4 <tcp_receive+0xd04>)
 8016b4a:	681a      	ldr	r2, [r3, #0]
 8016b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b4e:	68db      	ldr	r3, [r3, #12]
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	1ad3      	subs	r3, r2, r3
 8016b54:	3b01      	subs	r3, #1
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	db3e      	blt.n	8016bd8 <tcp_receive+0xd08>
 8016b5a:	4b1e      	ldr	r3, [pc, #120]	; (8016bd4 <tcp_receive+0xd04>)
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016b60:	68db      	ldr	r3, [r3, #12]
 8016b62:	685b      	ldr	r3, [r3, #4]
 8016b64:	1ad3      	subs	r3, r2, r3
 8016b66:	3301      	adds	r3, #1
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	dc35      	bgt.n	8016bd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016b6c:	4818      	ldr	r0, [pc, #96]	; (8016bd0 <tcp_receive+0xd00>)
 8016b6e:	f7fd fa8d 	bl	801408c <tcp_seg_copy>
 8016b72:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	f000 8109 	beq.w	8016d8e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	685b      	ldr	r3, [r3, #4]
 8016b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b84:	8912      	ldrh	r2, [r2, #8]
 8016b86:	441a      	add	r2, r3
 8016b88:	4b12      	ldr	r3, [pc, #72]	; (8016bd4 <tcp_receive+0xd04>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	1ad3      	subs	r3, r2, r3
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	dd12      	ble.n	8016bb8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016b92:	4b10      	ldr	r3, [pc, #64]	; (8016bd4 <tcp_receive+0xd04>)
 8016b94:	681b      	ldr	r3, [r3, #0]
 8016b96:	b29a      	uxth	r2, r3
 8016b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016b9a:	68db      	ldr	r3, [r3, #12]
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	1ad3      	subs	r3, r2, r3
 8016ba2:	b29a      	uxth	r2, r3
 8016ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ba6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8016ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016baa:	685a      	ldr	r2, [r3, #4]
 8016bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bae:	891b      	ldrh	r3, [r3, #8]
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	4610      	mov	r0, r2
 8016bb4:	f7fb fc1e 	bl	80123f4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bba:	69fa      	ldr	r2, [r7, #28]
 8016bbc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016bc0:	69f8      	ldr	r0, [r7, #28]
 8016bc2:	f7ff f881 	bl	8015cc8 <tcp_oos_insert_segment>
                  }
                  break;
 8016bc6:	e0e2      	b.n	8016d8e <tcp_receive+0xebe>
 8016bc8:	2000c8e0 	.word	0x2000c8e0
 8016bcc:	2000c8dd 	.word	0x2000c8dd
 8016bd0:	2000c8b0 	.word	0x2000c8b0
 8016bd4:	2000c8d0 	.word	0x2000c8d0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bda:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	f040 80c6 	bne.w	8016d72 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016be6:	4b80      	ldr	r3, [pc, #512]	; (8016de8 <tcp_receive+0xf18>)
 8016be8:	681a      	ldr	r2, [r3, #0]
 8016bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bec:	68db      	ldr	r3, [r3, #12]
 8016bee:	685b      	ldr	r3, [r3, #4]
 8016bf0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	f340 80bd 	ble.w	8016d72 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bfa:	68db      	ldr	r3, [r3, #12]
 8016bfc:	899b      	ldrh	r3, [r3, #12]
 8016bfe:	b29b      	uxth	r3, r3
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7fa f947 	bl	8010e94 <lwip_htons>
 8016c06:	4603      	mov	r3, r0
 8016c08:	b2db      	uxtb	r3, r3
 8016c0a:	f003 0301 	and.w	r3, r3, #1
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f040 80bf 	bne.w	8016d92 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016c14:	4875      	ldr	r0, [pc, #468]	; (8016dec <tcp_receive+0xf1c>)
 8016c16:	f7fd fa39 	bl	801408c <tcp_seg_copy>
 8016c1a:	4602      	mov	r2, r0
 8016c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c1e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	f000 80b6 	beq.w	8016d96 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8016c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	685b      	ldr	r3, [r3, #4]
 8016c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c32:	8912      	ldrh	r2, [r2, #8]
 8016c34:	441a      	add	r2, r3
 8016c36:	4b6c      	ldr	r3, [pc, #432]	; (8016de8 <tcp_receive+0xf18>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	1ad3      	subs	r3, r2, r3
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	dd12      	ble.n	8016c66 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016c40:	4b69      	ldr	r3, [pc, #420]	; (8016de8 <tcp_receive+0xf18>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c48:	68db      	ldr	r3, [r3, #12]
 8016c4a:	685b      	ldr	r3, [r3, #4]
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	b29a      	uxth	r2, r3
 8016c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c54:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8016c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c58:	685a      	ldr	r2, [r3, #4]
 8016c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c5c:	891b      	ldrh	r3, [r3, #8]
 8016c5e:	4619      	mov	r1, r3
 8016c60:	4610      	mov	r0, r2
 8016c62:	f7fb fbc7 	bl	80123f4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8016c66:	4b62      	ldr	r3, [pc, #392]	; (8016df0 <tcp_receive+0xf20>)
 8016c68:	881b      	ldrh	r3, [r3, #0]
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	4b5e      	ldr	r3, [pc, #376]	; (8016de8 <tcp_receive+0xf18>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	441a      	add	r2, r3
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c76:	6879      	ldr	r1, [r7, #4]
 8016c78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016c7a:	440b      	add	r3, r1
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	f340 8089 	ble.w	8016d96 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	68db      	ldr	r3, [r3, #12]
 8016c8a:	899b      	ldrh	r3, [r3, #12]
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	4618      	mov	r0, r3
 8016c90:	f7fa f900 	bl	8010e94 <lwip_htons>
 8016c94:	4603      	mov	r3, r0
 8016c96:	b2db      	uxtb	r3, r3
 8016c98:	f003 0301 	and.w	r3, r3, #1
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d022      	beq.n	8016ce6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	68db      	ldr	r3, [r3, #12]
 8016ca6:	899b      	ldrh	r3, [r3, #12]
 8016ca8:	b29b      	uxth	r3, r3
 8016caa:	b21b      	sxth	r3, r3
 8016cac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016cb0:	b21c      	sxth	r4, r3
 8016cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	68db      	ldr	r3, [r3, #12]
 8016cb8:	899b      	ldrh	r3, [r3, #12]
 8016cba:	b29b      	uxth	r3, r3
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f7fa f8e9 	bl	8010e94 <lwip_htons>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7fa f8e0 	bl	8010e94 <lwip_htons>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	b21b      	sxth	r3, r3
 8016cd8:	4323      	orrs	r3, r4
 8016cda:	b21a      	sxth	r2, r3
 8016cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	68db      	ldr	r3, [r3, #12]
 8016ce2:	b292      	uxth	r2, r2
 8016ce4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cea:	b29a      	uxth	r2, r3
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016cf0:	4413      	add	r3, r2
 8016cf2:	b299      	uxth	r1, r3
 8016cf4:	4b3c      	ldr	r3, [pc, #240]	; (8016de8 <tcp_receive+0xf18>)
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	b29a      	uxth	r2, r3
 8016cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	1a8a      	subs	r2, r1, r2
 8016d00:	b292      	uxth	r2, r2
 8016d02:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	685a      	ldr	r2, [r3, #4]
 8016d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	891b      	ldrh	r3, [r3, #8]
 8016d10:	4619      	mov	r1, r3
 8016d12:	4610      	mov	r0, r2
 8016d14:	f7fb fb6e 	bl	80123f4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	891c      	ldrh	r4, [r3, #8]
 8016d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	68db      	ldr	r3, [r3, #12]
 8016d24:	899b      	ldrh	r3, [r3, #12]
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7fa f8b3 	bl	8010e94 <lwip_htons>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	b2db      	uxtb	r3, r3
 8016d32:	f003 0303 	and.w	r3, r3, #3
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d001      	beq.n	8016d3e <tcp_receive+0xe6e>
 8016d3a:	2301      	movs	r3, #1
 8016d3c:	e000      	b.n	8016d40 <tcp_receive+0xe70>
 8016d3e:	2300      	movs	r3, #0
 8016d40:	4423      	add	r3, r4
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	4b2a      	ldr	r3, [pc, #168]	; (8016df0 <tcp_receive+0xf20>)
 8016d46:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016d48:	4b29      	ldr	r3, [pc, #164]	; (8016df0 <tcp_receive+0xf20>)
 8016d4a:	881b      	ldrh	r3, [r3, #0]
 8016d4c:	461a      	mov	r2, r3
 8016d4e:	4b26      	ldr	r3, [pc, #152]	; (8016de8 <tcp_receive+0xf18>)
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	441a      	add	r2, r3
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d58:	6879      	ldr	r1, [r7, #4]
 8016d5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016d5c:	440b      	add	r3, r1
 8016d5e:	429a      	cmp	r2, r3
 8016d60:	d019      	beq.n	8016d96 <tcp_receive+0xec6>
 8016d62:	4b24      	ldr	r3, [pc, #144]	; (8016df4 <tcp_receive+0xf24>)
 8016d64:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8016d68:	4923      	ldr	r1, [pc, #140]	; (8016df8 <tcp_receive+0xf28>)
 8016d6a:	4824      	ldr	r0, [pc, #144]	; (8016dfc <tcp_receive+0xf2c>)
 8016d6c:	f008 f85a 	bl	801ee24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016d70:	e011      	b.n	8016d96 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8016d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	f47f aea4 	bne.w	8016ac8 <tcp_receive+0xbf8>
 8016d80:	e00a      	b.n	8016d98 <tcp_receive+0xec8>
                break;
 8016d82:	bf00      	nop
 8016d84:	e008      	b.n	8016d98 <tcp_receive+0xec8>
                break;
 8016d86:	bf00      	nop
 8016d88:	e006      	b.n	8016d98 <tcp_receive+0xec8>
                  break;
 8016d8a:	bf00      	nop
 8016d8c:	e004      	b.n	8016d98 <tcp_receive+0xec8>
                  break;
 8016d8e:	bf00      	nop
 8016d90:	e002      	b.n	8016d98 <tcp_receive+0xec8>
                  break;
 8016d92:	bf00      	nop
 8016d94:	e000      	b.n	8016d98 <tcp_receive+0xec8>
                break;
 8016d96:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8016d98:	6878      	ldr	r0, [r7, #4]
 8016d9a:	f001 fe8b 	bl	8018ab4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016d9e:	e003      	b.n	8016da8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016da0:	6878      	ldr	r0, [r7, #4]
 8016da2:	f001 fe87 	bl	8018ab4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016da6:	e01a      	b.n	8016dde <tcp_receive+0xf0e>
 8016da8:	e019      	b.n	8016dde <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8016daa:	4b0f      	ldr	r3, [pc, #60]	; (8016de8 <tcp_receive+0xf18>)
 8016dac:	681a      	ldr	r2, [r3, #0]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016db2:	1ad3      	subs	r3, r2, r3
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	db0a      	blt.n	8016dce <tcp_receive+0xefe>
 8016db8:	4b0b      	ldr	r3, [pc, #44]	; (8016de8 <tcp_receive+0xf18>)
 8016dba:	681a      	ldr	r2, [r3, #0]
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc0:	6879      	ldr	r1, [r7, #4]
 8016dc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016dc4:	440b      	add	r3, r1
 8016dc6:	1ad3      	subs	r3, r2, r3
 8016dc8:	3301      	adds	r3, #1
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	dd07      	ble.n	8016dde <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	8b5b      	ldrh	r3, [r3, #26]
 8016dd2:	f043 0302 	orr.w	r3, r3, #2
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016ddc:	e7ff      	b.n	8016dde <tcp_receive+0xf0e>
 8016dde:	bf00      	nop
 8016de0:	3750      	adds	r7, #80	; 0x50
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bdb0      	pop	{r4, r5, r7, pc}
 8016de6:	bf00      	nop
 8016de8:	2000c8d0 	.word	0x2000c8d0
 8016dec:	2000c8b0 	.word	0x2000c8b0
 8016df0:	2000c8da 	.word	0x2000c8da
 8016df4:	08022a04 	.word	0x08022a04
 8016df8:	08022dac 	.word	0x08022dac
 8016dfc:	08022a50 	.word	0x08022a50

08016e00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016e00:	b480      	push	{r7}
 8016e02:	b083      	sub	sp, #12
 8016e04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016e06:	4b15      	ldr	r3, [pc, #84]	; (8016e5c <tcp_get_next_optbyte+0x5c>)
 8016e08:	881b      	ldrh	r3, [r3, #0]
 8016e0a:	1c5a      	adds	r2, r3, #1
 8016e0c:	b291      	uxth	r1, r2
 8016e0e:	4a13      	ldr	r2, [pc, #76]	; (8016e5c <tcp_get_next_optbyte+0x5c>)
 8016e10:	8011      	strh	r1, [r2, #0]
 8016e12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016e14:	4b12      	ldr	r3, [pc, #72]	; (8016e60 <tcp_get_next_optbyte+0x60>)
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d004      	beq.n	8016e26 <tcp_get_next_optbyte+0x26>
 8016e1c:	4b11      	ldr	r3, [pc, #68]	; (8016e64 <tcp_get_next_optbyte+0x64>)
 8016e1e:	881b      	ldrh	r3, [r3, #0]
 8016e20:	88fa      	ldrh	r2, [r7, #6]
 8016e22:	429a      	cmp	r2, r3
 8016e24:	d208      	bcs.n	8016e38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016e26:	4b10      	ldr	r3, [pc, #64]	; (8016e68 <tcp_get_next_optbyte+0x68>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	3314      	adds	r3, #20
 8016e2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016e2e:	88fb      	ldrh	r3, [r7, #6]
 8016e30:	683a      	ldr	r2, [r7, #0]
 8016e32:	4413      	add	r3, r2
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	e00b      	b.n	8016e50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016e38:	88fb      	ldrh	r3, [r7, #6]
 8016e3a:	b2da      	uxtb	r2, r3
 8016e3c:	4b09      	ldr	r3, [pc, #36]	; (8016e64 <tcp_get_next_optbyte+0x64>)
 8016e3e:	881b      	ldrh	r3, [r3, #0]
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	1ad3      	subs	r3, r2, r3
 8016e44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016e46:	4b06      	ldr	r3, [pc, #24]	; (8016e60 <tcp_get_next_optbyte+0x60>)
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	797b      	ldrb	r3, [r7, #5]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016e50:	4618      	mov	r0, r3
 8016e52:	370c      	adds	r7, #12
 8016e54:	46bd      	mov	sp, r7
 8016e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5a:	4770      	bx	lr
 8016e5c:	2000c8cc 	.word	0x2000c8cc
 8016e60:	2000c8c8 	.word	0x2000c8c8
 8016e64:	2000c8c6 	.word	0x2000c8c6
 8016e68:	2000c8c0 	.word	0x2000c8c0

08016e6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d106      	bne.n	8016e88 <tcp_parseopt+0x1c>
 8016e7a:	4b32      	ldr	r3, [pc, #200]	; (8016f44 <tcp_parseopt+0xd8>)
 8016e7c:	f240 727d 	movw	r2, #1917	; 0x77d
 8016e80:	4931      	ldr	r1, [pc, #196]	; (8016f48 <tcp_parseopt+0xdc>)
 8016e82:	4832      	ldr	r0, [pc, #200]	; (8016f4c <tcp_parseopt+0xe0>)
 8016e84:	f007 ffce 	bl	801ee24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016e88:	4b31      	ldr	r3, [pc, #196]	; (8016f50 <tcp_parseopt+0xe4>)
 8016e8a:	881b      	ldrh	r3, [r3, #0]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d055      	beq.n	8016f3c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016e90:	4b30      	ldr	r3, [pc, #192]	; (8016f54 <tcp_parseopt+0xe8>)
 8016e92:	2200      	movs	r2, #0
 8016e94:	801a      	strh	r2, [r3, #0]
 8016e96:	e045      	b.n	8016f24 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8016e98:	f7ff ffb2 	bl	8016e00 <tcp_get_next_optbyte>
 8016e9c:	4603      	mov	r3, r0
 8016e9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	2b02      	cmp	r3, #2
 8016ea4:	d006      	beq.n	8016eb4 <tcp_parseopt+0x48>
 8016ea6:	2b02      	cmp	r3, #2
 8016ea8:	dc2b      	bgt.n	8016f02 <tcp_parseopt+0x96>
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d041      	beq.n	8016f32 <tcp_parseopt+0xc6>
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d127      	bne.n	8016f02 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016eb2:	e037      	b.n	8016f24 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016eb4:	f7ff ffa4 	bl	8016e00 <tcp_get_next_optbyte>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b04      	cmp	r3, #4
 8016ebc:	d13b      	bne.n	8016f36 <tcp_parseopt+0xca>
 8016ebe:	4b25      	ldr	r3, [pc, #148]	; (8016f54 <tcp_parseopt+0xe8>)
 8016ec0:	881b      	ldrh	r3, [r3, #0]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	4a22      	ldr	r2, [pc, #136]	; (8016f50 <tcp_parseopt+0xe4>)
 8016ec6:	8812      	ldrh	r2, [r2, #0]
 8016ec8:	4293      	cmp	r3, r2
 8016eca:	da34      	bge.n	8016f36 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016ecc:	f7ff ff98 	bl	8016e00 <tcp_get_next_optbyte>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	b29b      	uxth	r3, r3
 8016ed4:	021b      	lsls	r3, r3, #8
 8016ed6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016ed8:	f7ff ff92 	bl	8016e00 <tcp_get_next_optbyte>
 8016edc:	4603      	mov	r3, r0
 8016ede:	b29a      	uxth	r2, r3
 8016ee0:	89bb      	ldrh	r3, [r7, #12]
 8016ee2:	4313      	orrs	r3, r2
 8016ee4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016ee6:	89bb      	ldrh	r3, [r7, #12]
 8016ee8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8016eec:	d804      	bhi.n	8016ef8 <tcp_parseopt+0x8c>
 8016eee:	89bb      	ldrh	r3, [r7, #12]
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d001      	beq.n	8016ef8 <tcp_parseopt+0x8c>
 8016ef4:	89ba      	ldrh	r2, [r7, #12]
 8016ef6:	e001      	b.n	8016efc <tcp_parseopt+0x90>
 8016ef8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8016f00:	e010      	b.n	8016f24 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016f02:	f7ff ff7d 	bl	8016e00 <tcp_get_next_optbyte>
 8016f06:	4603      	mov	r3, r0
 8016f08:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016f0a:	7afb      	ldrb	r3, [r7, #11]
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d914      	bls.n	8016f3a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016f10:	7afb      	ldrb	r3, [r7, #11]
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	4b0f      	ldr	r3, [pc, #60]	; (8016f54 <tcp_parseopt+0xe8>)
 8016f16:	881b      	ldrh	r3, [r3, #0]
 8016f18:	4413      	add	r3, r2
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	3b02      	subs	r3, #2
 8016f1e:	b29a      	uxth	r2, r3
 8016f20:	4b0c      	ldr	r3, [pc, #48]	; (8016f54 <tcp_parseopt+0xe8>)
 8016f22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016f24:	4b0b      	ldr	r3, [pc, #44]	; (8016f54 <tcp_parseopt+0xe8>)
 8016f26:	881a      	ldrh	r2, [r3, #0]
 8016f28:	4b09      	ldr	r3, [pc, #36]	; (8016f50 <tcp_parseopt+0xe4>)
 8016f2a:	881b      	ldrh	r3, [r3, #0]
 8016f2c:	429a      	cmp	r2, r3
 8016f2e:	d3b3      	bcc.n	8016e98 <tcp_parseopt+0x2c>
 8016f30:	e004      	b.n	8016f3c <tcp_parseopt+0xd0>
          return;
 8016f32:	bf00      	nop
 8016f34:	e002      	b.n	8016f3c <tcp_parseopt+0xd0>
            return;
 8016f36:	bf00      	nop
 8016f38:	e000      	b.n	8016f3c <tcp_parseopt+0xd0>
            return;
 8016f3a:	bf00      	nop
      }
    }
  }
}
 8016f3c:	3710      	adds	r7, #16
 8016f3e:	46bd      	mov	sp, r7
 8016f40:	bd80      	pop	{r7, pc}
 8016f42:	bf00      	nop
 8016f44:	08022a04 	.word	0x08022a04
 8016f48:	08022e68 	.word	0x08022e68
 8016f4c:	08022a50 	.word	0x08022a50
 8016f50:	2000c8c4 	.word	0x2000c8c4
 8016f54:	2000c8cc 	.word	0x2000c8cc

08016f58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016f58:	b480      	push	{r7}
 8016f5a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016f5c:	4b05      	ldr	r3, [pc, #20]	; (8016f74 <tcp_trigger_input_pcb_close+0x1c>)
 8016f5e:	781b      	ldrb	r3, [r3, #0]
 8016f60:	f043 0310 	orr.w	r3, r3, #16
 8016f64:	b2da      	uxtb	r2, r3
 8016f66:	4b03      	ldr	r3, [pc, #12]	; (8016f74 <tcp_trigger_input_pcb_close+0x1c>)
 8016f68:	701a      	strb	r2, [r3, #0]
}
 8016f6a:	bf00      	nop
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr
 8016f74:	2000c8dd 	.word	0x2000c8dd

08016f78 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b084      	sub	sp, #16
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d00a      	beq.n	8016fa0 <tcp_route+0x28>
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	7a1b      	ldrb	r3, [r3, #8]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d006      	beq.n	8016fa0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	7a1b      	ldrb	r3, [r3, #8]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7fa ffec 	bl	8011f74 <netif_get_by_index>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	e003      	b.n	8016fa8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f005 fcc3 	bl	801c92c <ip4_route>
 8016fa6:	4603      	mov	r3, r0
  }
}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	3710      	adds	r7, #16
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016fb0:	b590      	push	{r4, r7, lr}
 8016fb2:	b087      	sub	sp, #28
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	60f8      	str	r0, [r7, #12]
 8016fb8:	60b9      	str	r1, [r7, #8]
 8016fba:	603b      	str	r3, [r7, #0]
 8016fbc:	4613      	mov	r3, r2
 8016fbe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d105      	bne.n	8016fd2 <tcp_create_segment+0x22>
 8016fc6:	4b44      	ldr	r3, [pc, #272]	; (80170d8 <tcp_create_segment+0x128>)
 8016fc8:	22a3      	movs	r2, #163	; 0xa3
 8016fca:	4944      	ldr	r1, [pc, #272]	; (80170dc <tcp_create_segment+0x12c>)
 8016fcc:	4844      	ldr	r0, [pc, #272]	; (80170e0 <tcp_create_segment+0x130>)
 8016fce:	f007 ff29 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016fd2:	68bb      	ldr	r3, [r7, #8]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d105      	bne.n	8016fe4 <tcp_create_segment+0x34>
 8016fd8:	4b3f      	ldr	r3, [pc, #252]	; (80170d8 <tcp_create_segment+0x128>)
 8016fda:	22a4      	movs	r2, #164	; 0xa4
 8016fdc:	4941      	ldr	r1, [pc, #260]	; (80170e4 <tcp_create_segment+0x134>)
 8016fde:	4840      	ldr	r0, [pc, #256]	; (80170e0 <tcp_create_segment+0x130>)
 8016fe0:	f007 ff20 	bl	801ee24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016fe8:	009b      	lsls	r3, r3, #2
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	f003 0304 	and.w	r3, r3, #4
 8016ff0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016ff2:	2003      	movs	r0, #3
 8016ff4:	f7fa fc26 	bl	8011844 <memp_malloc>
 8016ff8:	6138      	str	r0, [r7, #16]
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d104      	bne.n	801700a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f7fb fb7d 	bl	8012700 <pbuf_free>
    return NULL;
 8017006:	2300      	movs	r3, #0
 8017008:	e061      	b.n	80170ce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801700a:	693b      	ldr	r3, [r7, #16]
 801700c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017010:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017012:	693b      	ldr	r3, [r7, #16]
 8017014:	2200      	movs	r2, #0
 8017016:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017018:	693b      	ldr	r3, [r7, #16]
 801701a:	68ba      	ldr	r2, [r7, #8]
 801701c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	891a      	ldrh	r2, [r3, #8]
 8017022:	7dfb      	ldrb	r3, [r7, #23]
 8017024:	b29b      	uxth	r3, r3
 8017026:	429a      	cmp	r2, r3
 8017028:	d205      	bcs.n	8017036 <tcp_create_segment+0x86>
 801702a:	4b2b      	ldr	r3, [pc, #172]	; (80170d8 <tcp_create_segment+0x128>)
 801702c:	22b0      	movs	r2, #176	; 0xb0
 801702e:	492e      	ldr	r1, [pc, #184]	; (80170e8 <tcp_create_segment+0x138>)
 8017030:	482b      	ldr	r0, [pc, #172]	; (80170e0 <tcp_create_segment+0x130>)
 8017032:	f007 fef7 	bl	801ee24 <iprintf>
  seg->len = p->tot_len - optlen;
 8017036:	68bb      	ldr	r3, [r7, #8]
 8017038:	891a      	ldrh	r2, [r3, #8]
 801703a:	7dfb      	ldrb	r3, [r7, #23]
 801703c:	b29b      	uxth	r3, r3
 801703e:	1ad3      	subs	r3, r2, r3
 8017040:	b29a      	uxth	r2, r3
 8017042:	693b      	ldr	r3, [r7, #16]
 8017044:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017046:	2114      	movs	r1, #20
 8017048:	68b8      	ldr	r0, [r7, #8]
 801704a:	f7fb fac3 	bl	80125d4 <pbuf_add_header>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	d004      	beq.n	801705e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017054:	6938      	ldr	r0, [r7, #16]
 8017056:	f7fd f800 	bl	801405a <tcp_seg_free>
    return NULL;
 801705a:	2300      	movs	r3, #0
 801705c:	e037      	b.n	80170ce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	685b      	ldr	r3, [r3, #4]
 8017062:	685a      	ldr	r2, [r3, #4]
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	8ada      	ldrh	r2, [r3, #22]
 801706c:	693b      	ldr	r3, [r7, #16]
 801706e:	68dc      	ldr	r4, [r3, #12]
 8017070:	4610      	mov	r0, r2
 8017072:	f7f9 ff0f 	bl	8010e94 <lwip_htons>
 8017076:	4603      	mov	r3, r0
 8017078:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	8b1a      	ldrh	r2, [r3, #24]
 801707e:	693b      	ldr	r3, [r7, #16]
 8017080:	68dc      	ldr	r4, [r3, #12]
 8017082:	4610      	mov	r0, r2
 8017084:	f7f9 ff06 	bl	8010e94 <lwip_htons>
 8017088:	4603      	mov	r3, r0
 801708a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801708c:	693b      	ldr	r3, [r7, #16]
 801708e:	68dc      	ldr	r4, [r3, #12]
 8017090:	6838      	ldr	r0, [r7, #0]
 8017092:	f7f9 ff14 	bl	8010ebe <lwip_htonl>
 8017096:	4603      	mov	r3, r0
 8017098:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801709a:	7dfb      	ldrb	r3, [r7, #23]
 801709c:	089b      	lsrs	r3, r3, #2
 801709e:	b2db      	uxtb	r3, r3
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	3305      	adds	r3, #5
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	031b      	lsls	r3, r3, #12
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	79fb      	ldrb	r3, [r7, #7]
 80170ac:	b29b      	uxth	r3, r3
 80170ae:	4313      	orrs	r3, r2
 80170b0:	b29a      	uxth	r2, r3
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	68dc      	ldr	r4, [r3, #12]
 80170b6:	4610      	mov	r0, r2
 80170b8:	f7f9 feec 	bl	8010e94 <lwip_htons>
 80170bc:	4603      	mov	r3, r0
 80170be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	68db      	ldr	r3, [r3, #12]
 80170c4:	2200      	movs	r2, #0
 80170c6:	749a      	strb	r2, [r3, #18]
 80170c8:	2200      	movs	r2, #0
 80170ca:	74da      	strb	r2, [r3, #19]
  return seg;
 80170cc:	693b      	ldr	r3, [r7, #16]
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	371c      	adds	r7, #28
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd90      	pop	{r4, r7, pc}
 80170d6:	bf00      	nop
 80170d8:	08022e84 	.word	0x08022e84
 80170dc:	08022eb8 	.word	0x08022eb8
 80170e0:	08022ed8 	.word	0x08022ed8
 80170e4:	08022f00 	.word	0x08022f00
 80170e8:	08022f24 	.word	0x08022f24

080170ec <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b086      	sub	sp, #24
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	607b      	str	r3, [r7, #4]
 80170f4:	4603      	mov	r3, r0
 80170f6:	73fb      	strb	r3, [r7, #15]
 80170f8:	460b      	mov	r3, r1
 80170fa:	81bb      	strh	r3, [r7, #12]
 80170fc:	4613      	mov	r3, r2
 80170fe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017100:	89bb      	ldrh	r3, [r7, #12]
 8017102:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d105      	bne.n	8017116 <tcp_pbuf_prealloc+0x2a>
 801710a:	4b30      	ldr	r3, [pc, #192]	; (80171cc <tcp_pbuf_prealloc+0xe0>)
 801710c:	22e8      	movs	r2, #232	; 0xe8
 801710e:	4930      	ldr	r1, [pc, #192]	; (80171d0 <tcp_pbuf_prealloc+0xe4>)
 8017110:	4830      	ldr	r0, [pc, #192]	; (80171d4 <tcp_pbuf_prealloc+0xe8>)
 8017112:	f007 fe87 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017116:	6a3b      	ldr	r3, [r7, #32]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d105      	bne.n	8017128 <tcp_pbuf_prealloc+0x3c>
 801711c:	4b2b      	ldr	r3, [pc, #172]	; (80171cc <tcp_pbuf_prealloc+0xe0>)
 801711e:	22e9      	movs	r2, #233	; 0xe9
 8017120:	492d      	ldr	r1, [pc, #180]	; (80171d8 <tcp_pbuf_prealloc+0xec>)
 8017122:	482c      	ldr	r0, [pc, #176]	; (80171d4 <tcp_pbuf_prealloc+0xe8>)
 8017124:	f007 fe7e 	bl	801ee24 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017128:	89ba      	ldrh	r2, [r7, #12]
 801712a:	897b      	ldrh	r3, [r7, #10]
 801712c:	429a      	cmp	r2, r3
 801712e:	d221      	bcs.n	8017174 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017134:	f003 0302 	and.w	r3, r3, #2
 8017138:	2b00      	cmp	r3, #0
 801713a:	d111      	bne.n	8017160 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801713c:	6a3b      	ldr	r3, [r7, #32]
 801713e:	8b5b      	ldrh	r3, [r3, #26]
 8017140:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017144:	2b00      	cmp	r3, #0
 8017146:	d115      	bne.n	8017174 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017148:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801714c:	2b00      	cmp	r3, #0
 801714e:	d007      	beq.n	8017160 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017150:	6a3b      	ldr	r3, [r7, #32]
 8017152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017154:	2b00      	cmp	r3, #0
 8017156:	d103      	bne.n	8017160 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017158:	6a3b      	ldr	r3, [r7, #32]
 801715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801715c:	2b00      	cmp	r3, #0
 801715e:	d009      	beq.n	8017174 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017160:	89bb      	ldrh	r3, [r7, #12]
 8017162:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017166:	f023 0203 	bic.w	r2, r3, #3
 801716a:	897b      	ldrh	r3, [r7, #10]
 801716c:	4293      	cmp	r3, r2
 801716e:	bf28      	it	cs
 8017170:	4613      	movcs	r3, r2
 8017172:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017174:	8af9      	ldrh	r1, [r7, #22]
 8017176:	7bfb      	ldrb	r3, [r7, #15]
 8017178:	f44f 7220 	mov.w	r2, #640	; 0x280
 801717c:	4618      	mov	r0, r3
 801717e:	f7fa ffdb 	bl	8012138 <pbuf_alloc>
 8017182:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017184:	693b      	ldr	r3, [r7, #16]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d101      	bne.n	801718e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801718a:	2300      	movs	r3, #0
 801718c:	e019      	b.n	80171c2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801718e:	693b      	ldr	r3, [r7, #16]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	2b00      	cmp	r3, #0
 8017194:	d006      	beq.n	80171a4 <tcp_pbuf_prealloc+0xb8>
 8017196:	4b0d      	ldr	r3, [pc, #52]	; (80171cc <tcp_pbuf_prealloc+0xe0>)
 8017198:	f240 120b 	movw	r2, #267	; 0x10b
 801719c:	490f      	ldr	r1, [pc, #60]	; (80171dc <tcp_pbuf_prealloc+0xf0>)
 801719e:	480d      	ldr	r0, [pc, #52]	; (80171d4 <tcp_pbuf_prealloc+0xe8>)
 80171a0:	f007 fe40 	bl	801ee24 <iprintf>
  *oversize = p->len - length;
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	895a      	ldrh	r2, [r3, #10]
 80171a8:	89bb      	ldrh	r3, [r7, #12]
 80171aa:	1ad3      	subs	r3, r2, r3
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80171b2:	693b      	ldr	r3, [r7, #16]
 80171b4:	89ba      	ldrh	r2, [r7, #12]
 80171b6:	811a      	strh	r2, [r3, #8]
 80171b8:	693b      	ldr	r3, [r7, #16]
 80171ba:	891a      	ldrh	r2, [r3, #8]
 80171bc:	693b      	ldr	r3, [r7, #16]
 80171be:	815a      	strh	r2, [r3, #10]
  return p;
 80171c0:	693b      	ldr	r3, [r7, #16]
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3718      	adds	r7, #24
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop
 80171cc:	08022e84 	.word	0x08022e84
 80171d0:	08022f3c 	.word	0x08022f3c
 80171d4:	08022ed8 	.word	0x08022ed8
 80171d8:	08022f60 	.word	0x08022f60
 80171dc:	08022f80 	.word	0x08022f80

080171e0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	460b      	mov	r3, r1
 80171ea:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d106      	bne.n	8017200 <tcp_write_checks+0x20>
 80171f2:	4b33      	ldr	r3, [pc, #204]	; (80172c0 <tcp_write_checks+0xe0>)
 80171f4:	f240 1233 	movw	r2, #307	; 0x133
 80171f8:	4932      	ldr	r1, [pc, #200]	; (80172c4 <tcp_write_checks+0xe4>)
 80171fa:	4833      	ldr	r0, [pc, #204]	; (80172c8 <tcp_write_checks+0xe8>)
 80171fc:	f007 fe12 	bl	801ee24 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	7d1b      	ldrb	r3, [r3, #20]
 8017204:	2b04      	cmp	r3, #4
 8017206:	d00e      	beq.n	8017226 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801720c:	2b07      	cmp	r3, #7
 801720e:	d00a      	beq.n	8017226 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017214:	2b02      	cmp	r3, #2
 8017216:	d006      	beq.n	8017226 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801721c:	2b03      	cmp	r3, #3
 801721e:	d002      	beq.n	8017226 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017220:	f06f 030a 	mvn.w	r3, #10
 8017224:	e048      	b.n	80172b8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017226:	887b      	ldrh	r3, [r7, #2]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d101      	bne.n	8017230 <tcp_write_checks+0x50>
    return ERR_OK;
 801722c:	2300      	movs	r3, #0
 801722e:	e043      	b.n	80172b8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017236:	887a      	ldrh	r2, [r7, #2]
 8017238:	429a      	cmp	r2, r3
 801723a:	d909      	bls.n	8017250 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	8b5b      	ldrh	r3, [r3, #26]
 8017240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017244:	b29a      	uxth	r2, r3
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801724a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801724e:	e033      	b.n	80172b8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017256:	2b08      	cmp	r3, #8
 8017258:	d909      	bls.n	801726e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	8b5b      	ldrh	r3, [r3, #26]
 801725e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017262:	b29a      	uxth	r2, r3
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801726c:	e024      	b.n	80172b8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017274:	2b00      	cmp	r3, #0
 8017276:	d00f      	beq.n	8017298 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801727c:	2b00      	cmp	r3, #0
 801727e:	d11a      	bne.n	80172b6 <tcp_write_checks+0xd6>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017284:	2b00      	cmp	r3, #0
 8017286:	d116      	bne.n	80172b6 <tcp_write_checks+0xd6>
 8017288:	4b0d      	ldr	r3, [pc, #52]	; (80172c0 <tcp_write_checks+0xe0>)
 801728a:	f240 1255 	movw	r2, #341	; 0x155
 801728e:	490f      	ldr	r1, [pc, #60]	; (80172cc <tcp_write_checks+0xec>)
 8017290:	480d      	ldr	r0, [pc, #52]	; (80172c8 <tcp_write_checks+0xe8>)
 8017292:	f007 fdc7 	bl	801ee24 <iprintf>
 8017296:	e00e      	b.n	80172b6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801729c:	2b00      	cmp	r3, #0
 801729e:	d103      	bne.n	80172a8 <tcp_write_checks+0xc8>
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d006      	beq.n	80172b6 <tcp_write_checks+0xd6>
 80172a8:	4b05      	ldr	r3, [pc, #20]	; (80172c0 <tcp_write_checks+0xe0>)
 80172aa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80172ae:	4908      	ldr	r1, [pc, #32]	; (80172d0 <tcp_write_checks+0xf0>)
 80172b0:	4805      	ldr	r0, [pc, #20]	; (80172c8 <tcp_write_checks+0xe8>)
 80172b2:	f007 fdb7 	bl	801ee24 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80172b6:	2300      	movs	r3, #0
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	08022e84 	.word	0x08022e84
 80172c4:	08022f94 	.word	0x08022f94
 80172c8:	08022ed8 	.word	0x08022ed8
 80172cc:	08022fb4 	.word	0x08022fb4
 80172d0:	08022ff0 	.word	0x08022ff0

080172d4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80172d4:	b590      	push	{r4, r7, lr}
 80172d6:	b09b      	sub	sp, #108	; 0x6c
 80172d8:	af04      	add	r7, sp, #16
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	60b9      	str	r1, [r7, #8]
 80172de:	4611      	mov	r1, r2
 80172e0:	461a      	mov	r2, r3
 80172e2:	460b      	mov	r3, r1
 80172e4:	80fb      	strh	r3, [r7, #6]
 80172e6:	4613      	mov	r3, r2
 80172e8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80172ea:	2300      	movs	r3, #0
 80172ec:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80172ee:	2300      	movs	r3, #0
 80172f0:	653b      	str	r3, [r7, #80]	; 0x50
 80172f2:	2300      	movs	r3, #0
 80172f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172f6:	2300      	movs	r3, #0
 80172f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80172fa:	2300      	movs	r3, #0
 80172fc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80172fe:	2300      	movs	r3, #0
 8017300:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017304:	2300      	movs	r3, #0
 8017306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801730a:	2300      	movs	r3, #0
 801730c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801730e:	2300      	movs	r3, #0
 8017310:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017312:	2300      	movs	r3, #0
 8017314:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d109      	bne.n	8017330 <tcp_write+0x5c>
 801731c:	4ba4      	ldr	r3, [pc, #656]	; (80175b0 <tcp_write+0x2dc>)
 801731e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017322:	49a4      	ldr	r1, [pc, #656]	; (80175b4 <tcp_write+0x2e0>)
 8017324:	48a4      	ldr	r0, [pc, #656]	; (80175b8 <tcp_write+0x2e4>)
 8017326:	f007 fd7d 	bl	801ee24 <iprintf>
 801732a:	f06f 030f 	mvn.w	r3, #15
 801732e:	e32a      	b.n	8017986 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017336:	085b      	lsrs	r3, r3, #1
 8017338:	b29a      	uxth	r2, r3
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801733e:	4293      	cmp	r3, r2
 8017340:	bf28      	it	cs
 8017342:	4613      	movcs	r3, r2
 8017344:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017348:	2b00      	cmp	r3, #0
 801734a:	d102      	bne.n	8017352 <tcp_write+0x7e>
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017350:	e000      	b.n	8017354 <tcp_write+0x80>
 8017352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017354:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d109      	bne.n	8017370 <tcp_write+0x9c>
 801735c:	4b94      	ldr	r3, [pc, #592]	; (80175b0 <tcp_write+0x2dc>)
 801735e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017362:	4996      	ldr	r1, [pc, #600]	; (80175bc <tcp_write+0x2e8>)
 8017364:	4894      	ldr	r0, [pc, #592]	; (80175b8 <tcp_write+0x2e4>)
 8017366:	f007 fd5d 	bl	801ee24 <iprintf>
 801736a:	f06f 030f 	mvn.w	r3, #15
 801736e:	e30a      	b.n	8017986 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017370:	88fb      	ldrh	r3, [r7, #6]
 8017372:	4619      	mov	r1, r3
 8017374:	68f8      	ldr	r0, [r7, #12]
 8017376:	f7ff ff33 	bl	80171e0 <tcp_write_checks>
 801737a:	4603      	mov	r3, r0
 801737c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017380:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017384:	2b00      	cmp	r3, #0
 8017386:	d002      	beq.n	801738e <tcp_write+0xba>
    return err;
 8017388:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801738c:	e2fb      	b.n	8017986 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017394:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017398:	2300      	movs	r3, #0
 801739a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	f000 80f6 	beq.w	8017594 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80173ac:	653b      	str	r3, [r7, #80]	; 0x50
 80173ae:	e002      	b.n	80173b6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80173b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80173b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d1f8      	bne.n	80173b0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80173be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173c0:	7a9b      	ldrb	r3, [r3, #10]
 80173c2:	009b      	lsls	r3, r3, #2
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	f003 0304 	and.w	r3, r3, #4
 80173ca:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80173cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173d0:	891b      	ldrh	r3, [r3, #8]
 80173d2:	4619      	mov	r1, r3
 80173d4:	8c3b      	ldrh	r3, [r7, #32]
 80173d6:	440b      	add	r3, r1
 80173d8:	429a      	cmp	r2, r3
 80173da:	da06      	bge.n	80173ea <tcp_write+0x116>
 80173dc:	4b74      	ldr	r3, [pc, #464]	; (80175b0 <tcp_write+0x2dc>)
 80173de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80173e2:	4977      	ldr	r1, [pc, #476]	; (80175c0 <tcp_write+0x2ec>)
 80173e4:	4874      	ldr	r0, [pc, #464]	; (80175b8 <tcp_write+0x2e4>)
 80173e6:	f007 fd1d 	bl	801ee24 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80173ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173ec:	891a      	ldrh	r2, [r3, #8]
 80173ee:	8c3b      	ldrh	r3, [r7, #32]
 80173f0:	4413      	add	r3, r2
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173f6:	1ad3      	subs	r3, r2, r3
 80173f8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80173fa:	68fb      	ldr	r3, [r7, #12]
 80173fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017400:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017402:	8a7b      	ldrh	r3, [r7, #18]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d026      	beq.n	8017456 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017408:	8a7b      	ldrh	r3, [r7, #18]
 801740a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801740c:	429a      	cmp	r2, r3
 801740e:	d206      	bcs.n	801741e <tcp_write+0x14a>
 8017410:	4b67      	ldr	r3, [pc, #412]	; (80175b0 <tcp_write+0x2dc>)
 8017412:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017416:	496b      	ldr	r1, [pc, #428]	; (80175c4 <tcp_write+0x2f0>)
 8017418:	4867      	ldr	r0, [pc, #412]	; (80175b8 <tcp_write+0x2e4>)
 801741a:	f007 fd03 	bl	801ee24 <iprintf>
      seg = last_unsent;
 801741e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017420:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017422:	8a7b      	ldrh	r3, [r7, #18]
 8017424:	88fa      	ldrh	r2, [r7, #6]
 8017426:	4293      	cmp	r3, r2
 8017428:	bf28      	it	cs
 801742a:	4613      	movcs	r3, r2
 801742c:	b29b      	uxth	r3, r3
 801742e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017430:	4293      	cmp	r3, r2
 8017432:	bf28      	it	cs
 8017434:	4613      	movcs	r3, r2
 8017436:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017438:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801743c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801743e:	4413      	add	r3, r2
 8017440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017444:	8a7a      	ldrh	r2, [r7, #18]
 8017446:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017448:	1ad3      	subs	r3, r2, r3
 801744a:	b29b      	uxth	r3, r3
 801744c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801744e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017450:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017452:	1ad3      	subs	r3, r2, r3
 8017454:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017456:	8a7b      	ldrh	r3, [r7, #18]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d00b      	beq.n	8017474 <tcp_write+0x1a0>
 801745c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017460:	88fb      	ldrh	r3, [r7, #6]
 8017462:	429a      	cmp	r2, r3
 8017464:	d006      	beq.n	8017474 <tcp_write+0x1a0>
 8017466:	4b52      	ldr	r3, [pc, #328]	; (80175b0 <tcp_write+0x2dc>)
 8017468:	f44f 7200 	mov.w	r2, #512	; 0x200
 801746c:	4956      	ldr	r1, [pc, #344]	; (80175c8 <tcp_write+0x2f4>)
 801746e:	4852      	ldr	r0, [pc, #328]	; (80175b8 <tcp_write+0x2e4>)
 8017470:	f007 fcd8 	bl	801ee24 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017478:	88fb      	ldrh	r3, [r7, #6]
 801747a:	429a      	cmp	r2, r3
 801747c:	f080 8167 	bcs.w	801774e <tcp_write+0x47a>
 8017480:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017482:	2b00      	cmp	r3, #0
 8017484:	f000 8163 	beq.w	801774e <tcp_write+0x47a>
 8017488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801748a:	891b      	ldrh	r3, [r3, #8]
 801748c:	2b00      	cmp	r3, #0
 801748e:	f000 815e 	beq.w	801774e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017492:	88fa      	ldrh	r2, [r7, #6]
 8017494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017498:	1ad2      	subs	r2, r2, r3
 801749a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801749c:	4293      	cmp	r3, r2
 801749e:	bfa8      	it	ge
 80174a0:	4613      	movge	r3, r2
 80174a2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80174a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80174a6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80174a8:	797b      	ldrb	r3, [r7, #5]
 80174aa:	f003 0301 	and.w	r3, r3, #1
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d027      	beq.n	8017502 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80174b2:	f107 0012 	add.w	r0, r7, #18
 80174b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80174b8:	8bf9      	ldrh	r1, [r7, #30]
 80174ba:	2301      	movs	r3, #1
 80174bc:	9302      	str	r3, [sp, #8]
 80174be:	797b      	ldrb	r3, [r7, #5]
 80174c0:	9301      	str	r3, [sp, #4]
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	9300      	str	r3, [sp, #0]
 80174c6:	4603      	mov	r3, r0
 80174c8:	2000      	movs	r0, #0
 80174ca:	f7ff fe0f 	bl	80170ec <tcp_pbuf_prealloc>
 80174ce:	6578      	str	r0, [r7, #84]	; 0x54
 80174d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	f000 8225 	beq.w	8017922 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80174d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174da:	6858      	ldr	r0, [r3, #4]
 80174dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80174e0:	68ba      	ldr	r2, [r7, #8]
 80174e2:	4413      	add	r3, r2
 80174e4:	8bfa      	ldrh	r2, [r7, #30]
 80174e6:	4619      	mov	r1, r3
 80174e8:	f007 ff01 	bl	801f2ee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80174ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80174ee:	f7fb f995 	bl	801281c <pbuf_clen>
 80174f2:	4603      	mov	r3, r0
 80174f4:	461a      	mov	r2, r3
 80174f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80174fa:	4413      	add	r3, r2
 80174fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017500:	e041      	b.n	8017586 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017504:	685b      	ldr	r3, [r3, #4]
 8017506:	637b      	str	r3, [r7, #52]	; 0x34
 8017508:	e002      	b.n	8017510 <tcp_write+0x23c>
 801750a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801750c:	681b      	ldr	r3, [r3, #0]
 801750e:	637b      	str	r3, [r7, #52]	; 0x34
 8017510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d1f8      	bne.n	801750a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801751a:	7b1b      	ldrb	r3, [r3, #12]
 801751c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017520:	2b00      	cmp	r3, #0
 8017522:	d115      	bne.n	8017550 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801752a:	8952      	ldrh	r2, [r2, #10]
 801752c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801752e:	68ba      	ldr	r2, [r7, #8]
 8017530:	429a      	cmp	r2, r3
 8017532:	d10d      	bne.n	8017550 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017538:	2b00      	cmp	r3, #0
 801753a:	d006      	beq.n	801754a <tcp_write+0x276>
 801753c:	4b1c      	ldr	r3, [pc, #112]	; (80175b0 <tcp_write+0x2dc>)
 801753e:	f240 2231 	movw	r2, #561	; 0x231
 8017542:	4922      	ldr	r1, [pc, #136]	; (80175cc <tcp_write+0x2f8>)
 8017544:	481c      	ldr	r0, [pc, #112]	; (80175b8 <tcp_write+0x2e4>)
 8017546:	f007 fc6d 	bl	801ee24 <iprintf>
          extendlen = seglen;
 801754a:	8bfb      	ldrh	r3, [r7, #30]
 801754c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801754e:	e01a      	b.n	8017586 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017550:	8bfb      	ldrh	r3, [r7, #30]
 8017552:	2201      	movs	r2, #1
 8017554:	4619      	mov	r1, r3
 8017556:	2000      	movs	r0, #0
 8017558:	f7fa fdee 	bl	8012138 <pbuf_alloc>
 801755c:	6578      	str	r0, [r7, #84]	; 0x54
 801755e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017560:	2b00      	cmp	r3, #0
 8017562:	f000 81e0 	beq.w	8017926 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017566:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801756a:	68ba      	ldr	r2, [r7, #8]
 801756c:	441a      	add	r2, r3
 801756e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017570:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017572:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017574:	f7fb f952 	bl	801281c <pbuf_clen>
 8017578:	4603      	mov	r3, r0
 801757a:	461a      	mov	r2, r3
 801757c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017580:	4413      	add	r3, r2
 8017582:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017586:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801758a:	8bfb      	ldrh	r3, [r7, #30]
 801758c:	4413      	add	r3, r2
 801758e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017592:	e0dc      	b.n	801774e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801759a:	2b00      	cmp	r3, #0
 801759c:	f000 80d7 	beq.w	801774e <tcp_write+0x47a>
 80175a0:	4b03      	ldr	r3, [pc, #12]	; (80175b0 <tcp_write+0x2dc>)
 80175a2:	f240 224a 	movw	r2, #586	; 0x24a
 80175a6:	490a      	ldr	r1, [pc, #40]	; (80175d0 <tcp_write+0x2fc>)
 80175a8:	4803      	ldr	r0, [pc, #12]	; (80175b8 <tcp_write+0x2e4>)
 80175aa:	f007 fc3b 	bl	801ee24 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80175ae:	e0ce      	b.n	801774e <tcp_write+0x47a>
 80175b0:	08022e84 	.word	0x08022e84
 80175b4:	08023024 	.word	0x08023024
 80175b8:	08022ed8 	.word	0x08022ed8
 80175bc:	0802303c 	.word	0x0802303c
 80175c0:	08023070 	.word	0x08023070
 80175c4:	08023088 	.word	0x08023088
 80175c8:	080230a8 	.word	0x080230a8
 80175cc:	080230c8 	.word	0x080230c8
 80175d0:	080230f4 	.word	0x080230f4
    struct pbuf *p;
    u16_t left = len - pos;
 80175d4:	88fa      	ldrh	r2, [r7, #6]
 80175d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80175da:	1ad3      	subs	r3, r2, r3
 80175dc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80175de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80175e6:	1ad3      	subs	r3, r2, r3
 80175e8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80175ea:	8b7a      	ldrh	r2, [r7, #26]
 80175ec:	8bbb      	ldrh	r3, [r7, #28]
 80175ee:	4293      	cmp	r3, r2
 80175f0:	bf28      	it	cs
 80175f2:	4613      	movcs	r3, r2
 80175f4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80175f6:	797b      	ldrb	r3, [r7, #5]
 80175f8:	f003 0301 	and.w	r3, r3, #1
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d036      	beq.n	801766e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017600:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017604:	b29a      	uxth	r2, r3
 8017606:	8b3b      	ldrh	r3, [r7, #24]
 8017608:	4413      	add	r3, r2
 801760a:	b299      	uxth	r1, r3
 801760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801760e:	2b00      	cmp	r3, #0
 8017610:	bf0c      	ite	eq
 8017612:	2301      	moveq	r3, #1
 8017614:	2300      	movne	r3, #0
 8017616:	b2db      	uxtb	r3, r3
 8017618:	f107 0012 	add.w	r0, r7, #18
 801761c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801761e:	9302      	str	r3, [sp, #8]
 8017620:	797b      	ldrb	r3, [r7, #5]
 8017622:	9301      	str	r3, [sp, #4]
 8017624:	68fb      	ldr	r3, [r7, #12]
 8017626:	9300      	str	r3, [sp, #0]
 8017628:	4603      	mov	r3, r0
 801762a:	2036      	movs	r0, #54	; 0x36
 801762c:	f7ff fd5e 	bl	80170ec <tcp_pbuf_prealloc>
 8017630:	6338      	str	r0, [r7, #48]	; 0x30
 8017632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017634:	2b00      	cmp	r3, #0
 8017636:	f000 8178 	beq.w	801792a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801763c:	895b      	ldrh	r3, [r3, #10]
 801763e:	8b3a      	ldrh	r2, [r7, #24]
 8017640:	429a      	cmp	r2, r3
 8017642:	d906      	bls.n	8017652 <tcp_write+0x37e>
 8017644:	4b8c      	ldr	r3, [pc, #560]	; (8017878 <tcp_write+0x5a4>)
 8017646:	f240 2266 	movw	r2, #614	; 0x266
 801764a:	498c      	ldr	r1, [pc, #560]	; (801787c <tcp_write+0x5a8>)
 801764c:	488c      	ldr	r0, [pc, #560]	; (8017880 <tcp_write+0x5ac>)
 801764e:	f007 fbe9 	bl	801ee24 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017654:	685a      	ldr	r2, [r3, #4]
 8017656:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801765a:	18d0      	adds	r0, r2, r3
 801765c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017660:	68ba      	ldr	r2, [r7, #8]
 8017662:	4413      	add	r3, r2
 8017664:	8b3a      	ldrh	r2, [r7, #24]
 8017666:	4619      	mov	r1, r3
 8017668:	f007 fe41 	bl	801f2ee <memcpy>
 801766c:	e02f      	b.n	80176ce <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801766e:	8a7b      	ldrh	r3, [r7, #18]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d006      	beq.n	8017682 <tcp_write+0x3ae>
 8017674:	4b80      	ldr	r3, [pc, #512]	; (8017878 <tcp_write+0x5a4>)
 8017676:	f240 2271 	movw	r2, #625	; 0x271
 801767a:	4982      	ldr	r1, [pc, #520]	; (8017884 <tcp_write+0x5b0>)
 801767c:	4880      	ldr	r0, [pc, #512]	; (8017880 <tcp_write+0x5ac>)
 801767e:	f007 fbd1 	bl	801ee24 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017682:	8b3b      	ldrh	r3, [r7, #24]
 8017684:	2201      	movs	r2, #1
 8017686:	4619      	mov	r1, r3
 8017688:	2036      	movs	r0, #54	; 0x36
 801768a:	f7fa fd55 	bl	8012138 <pbuf_alloc>
 801768e:	6178      	str	r0, [r7, #20]
 8017690:	697b      	ldr	r3, [r7, #20]
 8017692:	2b00      	cmp	r3, #0
 8017694:	f000 814b 	beq.w	801792e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801769c:	68ba      	ldr	r2, [r7, #8]
 801769e:	441a      	add	r2, r3
 80176a0:	697b      	ldr	r3, [r7, #20]
 80176a2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80176a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80176ae:	4619      	mov	r1, r3
 80176b0:	2036      	movs	r0, #54	; 0x36
 80176b2:	f7fa fd41 	bl	8012138 <pbuf_alloc>
 80176b6:	6338      	str	r0, [r7, #48]	; 0x30
 80176b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d103      	bne.n	80176c6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80176be:	6978      	ldr	r0, [r7, #20]
 80176c0:	f7fb f81e 	bl	8012700 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80176c4:	e136      	b.n	8017934 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80176c6:	6979      	ldr	r1, [r7, #20]
 80176c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176ca:	f7fb f8e7 	bl	801289c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80176ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176d0:	f7fb f8a4 	bl	801281c <pbuf_clen>
 80176d4:	4603      	mov	r3, r0
 80176d6:	461a      	mov	r2, r3
 80176d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80176dc:	4413      	add	r3, r2
 80176de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80176e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80176e6:	2b09      	cmp	r3, #9
 80176e8:	d903      	bls.n	80176f2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80176ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176ec:	f7fb f808 	bl	8012700 <pbuf_free>
      goto memerr;
 80176f0:	e120      	b.n	8017934 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80176f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80176fa:	441a      	add	r2, r3
 80176fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017700:	9300      	str	r3, [sp, #0]
 8017702:	4613      	mov	r3, r2
 8017704:	2200      	movs	r2, #0
 8017706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017708:	68f8      	ldr	r0, [r7, #12]
 801770a:	f7ff fc51 	bl	8016fb0 <tcp_create_segment>
 801770e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017712:	2b00      	cmp	r3, #0
 8017714:	f000 810d 	beq.w	8017932 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801771a:	2b00      	cmp	r3, #0
 801771c:	d102      	bne.n	8017724 <tcp_write+0x450>
      queue = seg;
 801771e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017720:	647b      	str	r3, [r7, #68]	; 0x44
 8017722:	e00c      	b.n	801773e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017726:	2b00      	cmp	r3, #0
 8017728:	d106      	bne.n	8017738 <tcp_write+0x464>
 801772a:	4b53      	ldr	r3, [pc, #332]	; (8017878 <tcp_write+0x5a4>)
 801772c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017730:	4955      	ldr	r1, [pc, #340]	; (8017888 <tcp_write+0x5b4>)
 8017732:	4853      	ldr	r0, [pc, #332]	; (8017880 <tcp_write+0x5ac>)
 8017734:	f007 fb76 	bl	801ee24 <iprintf>
      prev_seg->next = seg;
 8017738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801773a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801773c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801773e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017740:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017742:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017746:	8b3b      	ldrh	r3, [r7, #24]
 8017748:	4413      	add	r3, r2
 801774a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801774e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017752:	88fb      	ldrh	r3, [r7, #6]
 8017754:	429a      	cmp	r2, r3
 8017756:	f4ff af3d 	bcc.w	80175d4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801775a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801775c:	2b00      	cmp	r3, #0
 801775e:	d02c      	beq.n	80177ba <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017762:	685b      	ldr	r3, [r3, #4]
 8017764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017766:	e01e      	b.n	80177a6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801776a:	891a      	ldrh	r2, [r3, #8]
 801776c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801776e:	4413      	add	r3, r2
 8017770:	b29a      	uxth	r2, r3
 8017772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017774:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d110      	bne.n	80177a0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017784:	8952      	ldrh	r2, [r2, #10]
 8017786:	4413      	add	r3, r2
 8017788:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801778a:	68b9      	ldr	r1, [r7, #8]
 801778c:	4618      	mov	r0, r3
 801778e:	f007 fdae 	bl	801f2ee <memcpy>
        p->len += oversize_used;
 8017792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017794:	895a      	ldrh	r2, [r3, #10]
 8017796:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017798:	4413      	add	r3, r2
 801779a:	b29a      	uxth	r2, r3
 801779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801779e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80177a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d1dd      	bne.n	8017768 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80177ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177ae:	891a      	ldrh	r2, [r3, #8]
 80177b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80177b2:	4413      	add	r3, r2
 80177b4:	b29a      	uxth	r2, r3
 80177b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177b8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80177ba:	8a7a      	ldrh	r2, [r7, #18]
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80177c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d018      	beq.n	80177fa <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80177c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d106      	bne.n	80177dc <tcp_write+0x508>
 80177ce:	4b2a      	ldr	r3, [pc, #168]	; (8017878 <tcp_write+0x5a4>)
 80177d0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80177d4:	492d      	ldr	r1, [pc, #180]	; (801788c <tcp_write+0x5b8>)
 80177d6:	482a      	ldr	r0, [pc, #168]	; (8017880 <tcp_write+0x5ac>)
 80177d8:	f007 fb24 	bl	801ee24 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80177dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177de:	685b      	ldr	r3, [r3, #4]
 80177e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7fb f85a 	bl	801289c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80177e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177ea:	891a      	ldrh	r2, [r3, #8]
 80177ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177ee:	891b      	ldrh	r3, [r3, #8]
 80177f0:	4413      	add	r3, r2
 80177f2:	b29a      	uxth	r2, r3
 80177f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80177f6:	811a      	strh	r2, [r3, #8]
 80177f8:	e037      	b.n	801786a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80177fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d034      	beq.n	801786a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8017800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017802:	2b00      	cmp	r3, #0
 8017804:	d003      	beq.n	801780e <tcp_write+0x53a>
 8017806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d106      	bne.n	801781c <tcp_write+0x548>
 801780e:	4b1a      	ldr	r3, [pc, #104]	; (8017878 <tcp_write+0x5a4>)
 8017810:	f240 22e6 	movw	r2, #742	; 0x2e6
 8017814:	491e      	ldr	r1, [pc, #120]	; (8017890 <tcp_write+0x5bc>)
 8017816:	481a      	ldr	r0, [pc, #104]	; (8017880 <tcp_write+0x5ac>)
 8017818:	f007 fb04 	bl	801ee24 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801781c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	62bb      	str	r3, [r7, #40]	; 0x28
 8017822:	e009      	b.n	8017838 <tcp_write+0x564>
      p->tot_len += extendlen;
 8017824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017826:	891a      	ldrh	r2, [r3, #8]
 8017828:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801782a:	4413      	add	r3, r2
 801782c:	b29a      	uxth	r2, r3
 801782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017830:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8017832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	62bb      	str	r3, [r7, #40]	; 0x28
 8017838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1f1      	bne.n	8017824 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8017840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017842:	891a      	ldrh	r2, [r3, #8]
 8017844:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017846:	4413      	add	r3, r2
 8017848:	b29a      	uxth	r2, r3
 801784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801784c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017850:	895a      	ldrh	r2, [r3, #10]
 8017852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017854:	4413      	add	r3, r2
 8017856:	b29a      	uxth	r2, r3
 8017858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801785a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801785c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801785e:	891a      	ldrh	r2, [r3, #8]
 8017860:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017862:	4413      	add	r3, r2
 8017864:	b29a      	uxth	r2, r3
 8017866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017868:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801786a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801786c:	2b00      	cmp	r3, #0
 801786e:	d111      	bne.n	8017894 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017874:	66da      	str	r2, [r3, #108]	; 0x6c
 8017876:	e010      	b.n	801789a <tcp_write+0x5c6>
 8017878:	08022e84 	.word	0x08022e84
 801787c:	08023124 	.word	0x08023124
 8017880:	08022ed8 	.word	0x08022ed8
 8017884:	08023164 	.word	0x08023164
 8017888:	08023174 	.word	0x08023174
 801788c:	08023188 	.word	0x08023188
 8017890:	080231c0 	.word	0x080231c0
  } else {
    last_unsent->next = queue;
 8017894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017898:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801789e:	88fb      	ldrh	r3, [r7, #6]
 80178a0:	441a      	add	r2, r3
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80178ac:	88fb      	ldrh	r3, [r7, #6]
 80178ae:	1ad3      	subs	r3, r2, r3
 80178b0:	b29a      	uxth	r2, r3
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80178be:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d00e      	beq.n	80178ea <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d10a      	bne.n	80178ea <tcp_write+0x616>
 80178d4:	68fb      	ldr	r3, [r7, #12]
 80178d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d106      	bne.n	80178ea <tcp_write+0x616>
 80178dc:	4b2c      	ldr	r3, [pc, #176]	; (8017990 <tcp_write+0x6bc>)
 80178de:	f240 3212 	movw	r2, #786	; 0x312
 80178e2:	492c      	ldr	r1, [pc, #176]	; (8017994 <tcp_write+0x6c0>)
 80178e4:	482c      	ldr	r0, [pc, #176]	; (8017998 <tcp_write+0x6c4>)
 80178e6:	f007 fa9d 	bl	801ee24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80178ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d016      	beq.n	801791e <tcp_write+0x64a>
 80178f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80178f2:	68db      	ldr	r3, [r3, #12]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d012      	beq.n	801791e <tcp_write+0x64a>
 80178f8:	797b      	ldrb	r3, [r7, #5]
 80178fa:	f003 0302 	and.w	r3, r3, #2
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d10d      	bne.n	801791e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8017902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017904:	68db      	ldr	r3, [r3, #12]
 8017906:	899b      	ldrh	r3, [r3, #12]
 8017908:	b29c      	uxth	r4, r3
 801790a:	2008      	movs	r0, #8
 801790c:	f7f9 fac2 	bl	8010e94 <lwip_htons>
 8017910:	4603      	mov	r3, r0
 8017912:	461a      	mov	r2, r3
 8017914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017916:	68db      	ldr	r3, [r3, #12]
 8017918:	4322      	orrs	r2, r4
 801791a:	b292      	uxth	r2, r2
 801791c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801791e:	2300      	movs	r3, #0
 8017920:	e031      	b.n	8017986 <tcp_write+0x6b2>
          goto memerr;
 8017922:	bf00      	nop
 8017924:	e006      	b.n	8017934 <tcp_write+0x660>
            goto memerr;
 8017926:	bf00      	nop
 8017928:	e004      	b.n	8017934 <tcp_write+0x660>
        goto memerr;
 801792a:	bf00      	nop
 801792c:	e002      	b.n	8017934 <tcp_write+0x660>
        goto memerr;
 801792e:	bf00      	nop
 8017930:	e000      	b.n	8017934 <tcp_write+0x660>
      goto memerr;
 8017932:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	8b5b      	ldrh	r3, [r3, #26]
 8017938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801793c:	b29a      	uxth	r2, r3
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017944:	2b00      	cmp	r3, #0
 8017946:	d002      	beq.n	801794e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8017948:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801794a:	f7fa fed9 	bl	8012700 <pbuf_free>
  }
  if (queue != NULL) {
 801794e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017950:	2b00      	cmp	r3, #0
 8017952:	d002      	beq.n	801795a <tcp_write+0x686>
    tcp_segs_free(queue);
 8017954:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017956:	f7fc fb6b 	bl	8014030 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017960:	2b00      	cmp	r3, #0
 8017962:	d00e      	beq.n	8017982 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017968:	2b00      	cmp	r3, #0
 801796a:	d10a      	bne.n	8017982 <tcp_write+0x6ae>
 801796c:	68fb      	ldr	r3, [r7, #12]
 801796e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017970:	2b00      	cmp	r3, #0
 8017972:	d106      	bne.n	8017982 <tcp_write+0x6ae>
 8017974:	4b06      	ldr	r3, [pc, #24]	; (8017990 <tcp_write+0x6bc>)
 8017976:	f240 3227 	movw	r2, #807	; 0x327
 801797a:	4906      	ldr	r1, [pc, #24]	; (8017994 <tcp_write+0x6c0>)
 801797c:	4806      	ldr	r0, [pc, #24]	; (8017998 <tcp_write+0x6c4>)
 801797e:	f007 fa51 	bl	801ee24 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017986:	4618      	mov	r0, r3
 8017988:	375c      	adds	r7, #92	; 0x5c
 801798a:	46bd      	mov	sp, r7
 801798c:	bd90      	pop	{r4, r7, pc}
 801798e:	bf00      	nop
 8017990:	08022e84 	.word	0x08022e84
 8017994:	080231f8 	.word	0x080231f8
 8017998:	08022ed8 	.word	0x08022ed8

0801799c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b08b      	sub	sp, #44	; 0x2c
 80179a0:	af02      	add	r7, sp, #8
 80179a2:	6078      	str	r0, [r7, #4]
 80179a4:	460b      	mov	r3, r1
 80179a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80179a8:	2300      	movs	r3, #0
 80179aa:	61fb      	str	r3, [r7, #28]
 80179ac:	2300      	movs	r3, #0
 80179ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80179b0:	2300      	movs	r3, #0
 80179b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d106      	bne.n	80179c8 <tcp_split_unsent_seg+0x2c>
 80179ba:	4b95      	ldr	r3, [pc, #596]	; (8017c10 <tcp_split_unsent_seg+0x274>)
 80179bc:	f240 324b 	movw	r2, #843	; 0x34b
 80179c0:	4994      	ldr	r1, [pc, #592]	; (8017c14 <tcp_split_unsent_seg+0x278>)
 80179c2:	4895      	ldr	r0, [pc, #596]	; (8017c18 <tcp_split_unsent_seg+0x27c>)
 80179c4:	f007 fa2e 	bl	801ee24 <iprintf>

  useg = pcb->unsent;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d102      	bne.n	80179da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80179d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179d8:	e116      	b.n	8017c08 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80179da:	887b      	ldrh	r3, [r7, #2]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d109      	bne.n	80179f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80179e0:	4b8b      	ldr	r3, [pc, #556]	; (8017c10 <tcp_split_unsent_seg+0x274>)
 80179e2:	f240 3253 	movw	r2, #851	; 0x353
 80179e6:	498d      	ldr	r1, [pc, #564]	; (8017c1c <tcp_split_unsent_seg+0x280>)
 80179e8:	488b      	ldr	r0, [pc, #556]	; (8017c18 <tcp_split_unsent_seg+0x27c>)
 80179ea:	f007 fa1b 	bl	801ee24 <iprintf>
    return ERR_VAL;
 80179ee:	f06f 0305 	mvn.w	r3, #5
 80179f2:	e109      	b.n	8017c08 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	891b      	ldrh	r3, [r3, #8]
 80179f8:	887a      	ldrh	r2, [r7, #2]
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d301      	bcc.n	8017a02 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80179fe:	2300      	movs	r3, #0
 8017a00:	e102      	b.n	8017c08 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017a06:	887a      	ldrh	r2, [r7, #2]
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d906      	bls.n	8017a1a <tcp_split_unsent_seg+0x7e>
 8017a0c:	4b80      	ldr	r3, [pc, #512]	; (8017c10 <tcp_split_unsent_seg+0x274>)
 8017a0e:	f240 325b 	movw	r2, #859	; 0x35b
 8017a12:	4983      	ldr	r1, [pc, #524]	; (8017c20 <tcp_split_unsent_seg+0x284>)
 8017a14:	4880      	ldr	r0, [pc, #512]	; (8017c18 <tcp_split_unsent_seg+0x27c>)
 8017a16:	f007 fa05 	bl	801ee24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8017a1a:	697b      	ldr	r3, [r7, #20]
 8017a1c:	891b      	ldrh	r3, [r3, #8]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d106      	bne.n	8017a30 <tcp_split_unsent_seg+0x94>
 8017a22:	4b7b      	ldr	r3, [pc, #492]	; (8017c10 <tcp_split_unsent_seg+0x274>)
 8017a24:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017a28:	497e      	ldr	r1, [pc, #504]	; (8017c24 <tcp_split_unsent_seg+0x288>)
 8017a2a:	487b      	ldr	r0, [pc, #492]	; (8017c18 <tcp_split_unsent_seg+0x27c>)
 8017a2c:	f007 f9fa 	bl	801ee24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	7a9b      	ldrb	r3, [r3, #10]
 8017a34:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017a36:	7bfb      	ldrb	r3, [r7, #15]
 8017a38:	009b      	lsls	r3, r3, #2
 8017a3a:	b2db      	uxtb	r3, r3
 8017a3c:	f003 0304 	and.w	r3, r3, #4
 8017a40:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017a42:	697b      	ldr	r3, [r7, #20]
 8017a44:	891a      	ldrh	r2, [r3, #8]
 8017a46:	887b      	ldrh	r3, [r7, #2]
 8017a48:	1ad3      	subs	r3, r2, r3
 8017a4a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017a4c:	7bbb      	ldrb	r3, [r7, #14]
 8017a4e:	b29a      	uxth	r2, r3
 8017a50:	89bb      	ldrh	r3, [r7, #12]
 8017a52:	4413      	add	r3, r2
 8017a54:	b29b      	uxth	r3, r3
 8017a56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a5a:	4619      	mov	r1, r3
 8017a5c:	2036      	movs	r0, #54	; 0x36
 8017a5e:	f7fa fb6b 	bl	8012138 <pbuf_alloc>
 8017a62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017a64:	693b      	ldr	r3, [r7, #16]
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	f000 80b7 	beq.w	8017bda <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	891a      	ldrh	r2, [r3, #8]
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	891b      	ldrh	r3, [r3, #8]
 8017a76:	1ad3      	subs	r3, r2, r3
 8017a78:	b29a      	uxth	r2, r3
 8017a7a:	887b      	ldrh	r3, [r7, #2]
 8017a7c:	4413      	add	r3, r2
 8017a7e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017a80:	697b      	ldr	r3, [r7, #20]
 8017a82:	6858      	ldr	r0, [r3, #4]
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	685a      	ldr	r2, [r3, #4]
 8017a88:	7bbb      	ldrb	r3, [r7, #14]
 8017a8a:	18d1      	adds	r1, r2, r3
 8017a8c:	897b      	ldrh	r3, [r7, #10]
 8017a8e:	89ba      	ldrh	r2, [r7, #12]
 8017a90:	f7fb f83c 	bl	8012b0c <pbuf_copy_partial>
 8017a94:	4603      	mov	r3, r0
 8017a96:	461a      	mov	r2, r3
 8017a98:	89bb      	ldrh	r3, [r7, #12]
 8017a9a:	4293      	cmp	r3, r2
 8017a9c:	f040 809f 	bne.w	8017bde <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	68db      	ldr	r3, [r3, #12]
 8017aa4:	899b      	ldrh	r3, [r3, #12]
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7f9 f9f3 	bl	8010e94 <lwip_htons>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	b2db      	uxtb	r3, r3
 8017ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ab6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8017ab8:	2300      	movs	r3, #0
 8017aba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017abc:	7efb      	ldrb	r3, [r7, #27]
 8017abe:	f003 0308 	and.w	r3, r3, #8
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d007      	beq.n	8017ad6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017ac6:	7efb      	ldrb	r3, [r7, #27]
 8017ac8:	f023 0308 	bic.w	r3, r3, #8
 8017acc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017ace:	7ebb      	ldrb	r3, [r7, #26]
 8017ad0:	f043 0308 	orr.w	r3, r3, #8
 8017ad4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017ad6:	7efb      	ldrb	r3, [r7, #27]
 8017ad8:	f003 0301 	and.w	r3, r3, #1
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d007      	beq.n	8017af0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017ae0:	7efb      	ldrb	r3, [r7, #27]
 8017ae2:	f023 0301 	bic.w	r3, r3, #1
 8017ae6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017ae8:	7ebb      	ldrb	r3, [r7, #26]
 8017aea:	f043 0301 	orr.w	r3, r3, #1
 8017aee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	68db      	ldr	r3, [r3, #12]
 8017af4:	685b      	ldr	r3, [r3, #4]
 8017af6:	4618      	mov	r0, r3
 8017af8:	f7f9 f9e1 	bl	8010ebe <lwip_htonl>
 8017afc:	4602      	mov	r2, r0
 8017afe:	887b      	ldrh	r3, [r7, #2]
 8017b00:	18d1      	adds	r1, r2, r3
 8017b02:	7eba      	ldrb	r2, [r7, #26]
 8017b04:	7bfb      	ldrb	r3, [r7, #15]
 8017b06:	9300      	str	r3, [sp, #0]
 8017b08:	460b      	mov	r3, r1
 8017b0a:	6939      	ldr	r1, [r7, #16]
 8017b0c:	6878      	ldr	r0, [r7, #4]
 8017b0e:	f7ff fa4f 	bl	8016fb0 <tcp_create_segment>
 8017b12:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	d063      	beq.n	8017be2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017b1a:	697b      	ldr	r3, [r7, #20]
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7fa fe7c 	bl	801281c <pbuf_clen>
 8017b24:	4603      	mov	r3, r0
 8017b26:	461a      	mov	r2, r3
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b2e:	1a9b      	subs	r3, r3, r2
 8017b30:	b29a      	uxth	r2, r3
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017b38:	697b      	ldr	r3, [r7, #20]
 8017b3a:	6858      	ldr	r0, [r3, #4]
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	685b      	ldr	r3, [r3, #4]
 8017b40:	891a      	ldrh	r2, [r3, #8]
 8017b42:	89bb      	ldrh	r3, [r7, #12]
 8017b44:	1ad3      	subs	r3, r2, r3
 8017b46:	b29b      	uxth	r3, r3
 8017b48:	4619      	mov	r1, r3
 8017b4a:	f7fa fc53 	bl	80123f4 <pbuf_realloc>
  useg->len -= remainder;
 8017b4e:	697b      	ldr	r3, [r7, #20]
 8017b50:	891a      	ldrh	r2, [r3, #8]
 8017b52:	89bb      	ldrh	r3, [r7, #12]
 8017b54:	1ad3      	subs	r3, r2, r3
 8017b56:	b29a      	uxth	r2, r3
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017b5c:	697b      	ldr	r3, [r7, #20]
 8017b5e:	68db      	ldr	r3, [r3, #12]
 8017b60:	899b      	ldrh	r3, [r3, #12]
 8017b62:	b29c      	uxth	r4, r3
 8017b64:	7efb      	ldrb	r3, [r7, #27]
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7f9 f993 	bl	8010e94 <lwip_htons>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	461a      	mov	r2, r3
 8017b72:	697b      	ldr	r3, [r7, #20]
 8017b74:	68db      	ldr	r3, [r3, #12]
 8017b76:	4322      	orrs	r2, r4
 8017b78:	b292      	uxth	r2, r2
 8017b7a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017b7c:	697b      	ldr	r3, [r7, #20]
 8017b7e:	685b      	ldr	r3, [r3, #4]
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7fa fe4b 	bl	801281c <pbuf_clen>
 8017b86:	4603      	mov	r3, r0
 8017b88:	461a      	mov	r2, r3
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b90:	4413      	add	r3, r2
 8017b92:	b29a      	uxth	r2, r3
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017b9a:	69fb      	ldr	r3, [r7, #28]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fa fe3c 	bl	801281c <pbuf_clen>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017bae:	4413      	add	r3, r2
 8017bb0:	b29a      	uxth	r2, r3
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	681a      	ldr	r2, [r3, #0]
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017bc0:	697b      	ldr	r3, [r7, #20]
 8017bc2:	69fa      	ldr	r2, [r7, #28]
 8017bc4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017bc6:	69fb      	ldr	r3, [r7, #28]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d103      	bne.n	8017bd6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	2200      	movs	r2, #0
 8017bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	e016      	b.n	8017c08 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017bda:	bf00      	nop
 8017bdc:	e002      	b.n	8017be4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017bde:	bf00      	nop
 8017be0:	e000      	b.n	8017be4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017be2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017be4:	69fb      	ldr	r3, [r7, #28]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d006      	beq.n	8017bf8 <tcp_split_unsent_seg+0x25c>
 8017bea:	4b09      	ldr	r3, [pc, #36]	; (8017c10 <tcp_split_unsent_seg+0x274>)
 8017bec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017bf0:	490d      	ldr	r1, [pc, #52]	; (8017c28 <tcp_split_unsent_seg+0x28c>)
 8017bf2:	4809      	ldr	r0, [pc, #36]	; (8017c18 <tcp_split_unsent_seg+0x27c>)
 8017bf4:	f007 f916 	bl	801ee24 <iprintf>
  if (p != NULL) {
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d002      	beq.n	8017c04 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017bfe:	6938      	ldr	r0, [r7, #16]
 8017c00:	f7fa fd7e 	bl	8012700 <pbuf_free>
  }

  return ERR_MEM;
 8017c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3724      	adds	r7, #36	; 0x24
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd90      	pop	{r4, r7, pc}
 8017c10:	08022e84 	.word	0x08022e84
 8017c14:	08023218 	.word	0x08023218
 8017c18:	08022ed8 	.word	0x08022ed8
 8017c1c:	0802323c 	.word	0x0802323c
 8017c20:	08023260 	.word	0x08023260
 8017c24:	08023270 	.word	0x08023270
 8017c28:	08023280 	.word	0x08023280

08017c2c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017c2c:	b590      	push	{r4, r7, lr}
 8017c2e:	b085      	sub	sp, #20
 8017c30:	af00      	add	r7, sp, #0
 8017c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d106      	bne.n	8017c48 <tcp_send_fin+0x1c>
 8017c3a:	4b21      	ldr	r3, [pc, #132]	; (8017cc0 <tcp_send_fin+0x94>)
 8017c3c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017c40:	4920      	ldr	r1, [pc, #128]	; (8017cc4 <tcp_send_fin+0x98>)
 8017c42:	4821      	ldr	r0, [pc, #132]	; (8017cc8 <tcp_send_fin+0x9c>)
 8017c44:	f007 f8ee 	bl	801ee24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d02e      	beq.n	8017cae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c54:	60fb      	str	r3, [r7, #12]
 8017c56:	e002      	b.n	8017c5e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017c5e:	68fb      	ldr	r3, [r7, #12]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d1f8      	bne.n	8017c58 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017c66:	68fb      	ldr	r3, [r7, #12]
 8017c68:	68db      	ldr	r3, [r3, #12]
 8017c6a:	899b      	ldrh	r3, [r3, #12]
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7f9 f910 	bl	8010e94 <lwip_htons>
 8017c74:	4603      	mov	r3, r0
 8017c76:	b2db      	uxtb	r3, r3
 8017c78:	f003 0307 	and.w	r3, r3, #7
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d116      	bne.n	8017cae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	68db      	ldr	r3, [r3, #12]
 8017c84:	899b      	ldrh	r3, [r3, #12]
 8017c86:	b29c      	uxth	r4, r3
 8017c88:	2001      	movs	r0, #1
 8017c8a:	f7f9 f903 	bl	8010e94 <lwip_htons>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	461a      	mov	r2, r3
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	68db      	ldr	r3, [r3, #12]
 8017c96:	4322      	orrs	r2, r4
 8017c98:	b292      	uxth	r2, r2
 8017c9a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	8b5b      	ldrh	r3, [r3, #26]
 8017ca0:	f043 0320 	orr.w	r3, r3, #32
 8017ca4:	b29a      	uxth	r2, r3
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017caa:	2300      	movs	r3, #0
 8017cac:	e004      	b.n	8017cb8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017cae:	2101      	movs	r1, #1
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f000 f80b 	bl	8017ccc <tcp_enqueue_flags>
 8017cb6:	4603      	mov	r3, r0
}
 8017cb8:	4618      	mov	r0, r3
 8017cba:	3714      	adds	r7, #20
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd90      	pop	{r4, r7, pc}
 8017cc0:	08022e84 	.word	0x08022e84
 8017cc4:	0802328c 	.word	0x0802328c
 8017cc8:	08022ed8 	.word	0x08022ed8

08017ccc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b08a      	sub	sp, #40	; 0x28
 8017cd0:	af02      	add	r7, sp, #8
 8017cd2:	6078      	str	r0, [r7, #4]
 8017cd4:	460b      	mov	r3, r1
 8017cd6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017ce0:	78fb      	ldrb	r3, [r7, #3]
 8017ce2:	f003 0303 	and.w	r3, r3, #3
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	d106      	bne.n	8017cf8 <tcp_enqueue_flags+0x2c>
 8017cea:	4b67      	ldr	r3, [pc, #412]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017cec:	f240 4211 	movw	r2, #1041	; 0x411
 8017cf0:	4966      	ldr	r1, [pc, #408]	; (8017e8c <tcp_enqueue_flags+0x1c0>)
 8017cf2:	4867      	ldr	r0, [pc, #412]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017cf4:	f007 f896 	bl	801ee24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d106      	bne.n	8017d0c <tcp_enqueue_flags+0x40>
 8017cfe:	4b62      	ldr	r3, [pc, #392]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017d00:	f240 4213 	movw	r2, #1043	; 0x413
 8017d04:	4963      	ldr	r1, [pc, #396]	; (8017e94 <tcp_enqueue_flags+0x1c8>)
 8017d06:	4862      	ldr	r0, [pc, #392]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017d08:	f007 f88c 	bl	801ee24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017d0c:	78fb      	ldrb	r3, [r7, #3]
 8017d0e:	f003 0302 	and.w	r3, r3, #2
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d001      	beq.n	8017d1a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017d16:	2301      	movs	r3, #1
 8017d18:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017d1a:	7ffb      	ldrb	r3, [r7, #31]
 8017d1c:	009b      	lsls	r3, r3, #2
 8017d1e:	b2db      	uxtb	r3, r3
 8017d20:	f003 0304 	and.w	r3, r3, #4
 8017d24:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017d26:	7dfb      	ldrb	r3, [r7, #23]
 8017d28:	b29b      	uxth	r3, r3
 8017d2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d2e:	4619      	mov	r1, r3
 8017d30:	2036      	movs	r0, #54	; 0x36
 8017d32:	f7fa fa01 	bl	8012138 <pbuf_alloc>
 8017d36:	6138      	str	r0, [r7, #16]
 8017d38:	693b      	ldr	r3, [r7, #16]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d109      	bne.n	8017d52 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	8b5b      	ldrh	r3, [r3, #26]
 8017d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d46:	b29a      	uxth	r2, r3
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d50:	e095      	b.n	8017e7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017d52:	693b      	ldr	r3, [r7, #16]
 8017d54:	895a      	ldrh	r2, [r3, #10]
 8017d56:	7dfb      	ldrb	r3, [r7, #23]
 8017d58:	b29b      	uxth	r3, r3
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d206      	bcs.n	8017d6c <tcp_enqueue_flags+0xa0>
 8017d5e:	4b4a      	ldr	r3, [pc, #296]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017d60:	f240 4239 	movw	r2, #1081	; 0x439
 8017d64:	494c      	ldr	r1, [pc, #304]	; (8017e98 <tcp_enqueue_flags+0x1cc>)
 8017d66:	484a      	ldr	r0, [pc, #296]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017d68:	f007 f85c 	bl	801ee24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017d70:	78fa      	ldrb	r2, [r7, #3]
 8017d72:	7ffb      	ldrb	r3, [r7, #31]
 8017d74:	9300      	str	r3, [sp, #0]
 8017d76:	460b      	mov	r3, r1
 8017d78:	6939      	ldr	r1, [r7, #16]
 8017d7a:	6878      	ldr	r0, [r7, #4]
 8017d7c:	f7ff f918 	bl	8016fb0 <tcp_create_segment>
 8017d80:	60f8      	str	r0, [r7, #12]
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d109      	bne.n	8017d9c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	8b5b      	ldrh	r3, [r3, #26]
 8017d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017d90:	b29a      	uxth	r2, r3
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d9a:	e070      	b.n	8017e7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	68db      	ldr	r3, [r3, #12]
 8017da0:	f003 0303 	and.w	r3, r3, #3
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d006      	beq.n	8017db6 <tcp_enqueue_flags+0xea>
 8017da8:	4b37      	ldr	r3, [pc, #220]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017daa:	f240 4242 	movw	r2, #1090	; 0x442
 8017dae:	493b      	ldr	r1, [pc, #236]	; (8017e9c <tcp_enqueue_flags+0x1d0>)
 8017db0:	4837      	ldr	r0, [pc, #220]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017db2:	f007 f837 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017db6:	68fb      	ldr	r3, [r7, #12]
 8017db8:	891b      	ldrh	r3, [r3, #8]
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d006      	beq.n	8017dcc <tcp_enqueue_flags+0x100>
 8017dbe:	4b32      	ldr	r3, [pc, #200]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017dc0:	f240 4243 	movw	r2, #1091	; 0x443
 8017dc4:	4936      	ldr	r1, [pc, #216]	; (8017ea0 <tcp_enqueue_flags+0x1d4>)
 8017dc6:	4832      	ldr	r0, [pc, #200]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017dc8:	f007 f82c 	bl	801ee24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d103      	bne.n	8017ddc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	68fa      	ldr	r2, [r7, #12]
 8017dd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8017dda:	e00d      	b.n	8017df8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017de0:	61bb      	str	r3, [r7, #24]
 8017de2:	e002      	b.n	8017dea <tcp_enqueue_flags+0x11e>
 8017de4:	69bb      	ldr	r3, [r7, #24]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	61bb      	str	r3, [r7, #24]
 8017dea:	69bb      	ldr	r3, [r7, #24]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d1f8      	bne.n	8017de4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017df2:	69bb      	ldr	r3, [r7, #24]
 8017df4:	68fa      	ldr	r2, [r7, #12]
 8017df6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017df8:	687b      	ldr	r3, [r7, #4]
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017e00:	78fb      	ldrb	r3, [r7, #3]
 8017e02:	f003 0302 	and.w	r3, r3, #2
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d104      	bne.n	8017e14 <tcp_enqueue_flags+0x148>
 8017e0a:	78fb      	ldrb	r3, [r7, #3]
 8017e0c:	f003 0301 	and.w	r3, r3, #1
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d004      	beq.n	8017e1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e18:	1c5a      	adds	r2, r3, #1
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017e1e:	78fb      	ldrb	r3, [r7, #3]
 8017e20:	f003 0301 	and.w	r3, r3, #1
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d006      	beq.n	8017e36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	8b5b      	ldrh	r3, [r3, #26]
 8017e2c:	f043 0320 	orr.w	r3, r3, #32
 8017e30:	b29a      	uxth	r2, r3
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f7fa fcee 	bl	801281c <pbuf_clen>
 8017e40:	4603      	mov	r3, r0
 8017e42:	461a      	mov	r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e4a:	4413      	add	r3, r2
 8017e4c:	b29a      	uxth	r2, r3
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00e      	beq.n	8017e7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d10a      	bne.n	8017e7c <tcp_enqueue_flags+0x1b0>
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d106      	bne.n	8017e7c <tcp_enqueue_flags+0x1b0>
 8017e6e:	4b06      	ldr	r3, [pc, #24]	; (8017e88 <tcp_enqueue_flags+0x1bc>)
 8017e70:	f240 4265 	movw	r2, #1125	; 0x465
 8017e74:	490b      	ldr	r1, [pc, #44]	; (8017ea4 <tcp_enqueue_flags+0x1d8>)
 8017e76:	4806      	ldr	r0, [pc, #24]	; (8017e90 <tcp_enqueue_flags+0x1c4>)
 8017e78:	f006 ffd4 	bl	801ee24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017e7c:	2300      	movs	r3, #0
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3720      	adds	r7, #32
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	08022e84 	.word	0x08022e84
 8017e8c:	080232a8 	.word	0x080232a8
 8017e90:	08022ed8 	.word	0x08022ed8
 8017e94:	08023300 	.word	0x08023300
 8017e98:	08023320 	.word	0x08023320
 8017e9c:	0802335c 	.word	0x0802335c
 8017ea0:	08023374 	.word	0x08023374
 8017ea4:	080233a0 	.word	0x080233a0

08017ea8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017ea8:	b5b0      	push	{r4, r5, r7, lr}
 8017eaa:	b08a      	sub	sp, #40	; 0x28
 8017eac:	af00      	add	r7, sp, #0
 8017eae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d106      	bne.n	8017ec4 <tcp_output+0x1c>
 8017eb6:	4b8a      	ldr	r3, [pc, #552]	; (80180e0 <tcp_output+0x238>)
 8017eb8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017ebc:	4989      	ldr	r1, [pc, #548]	; (80180e4 <tcp_output+0x23c>)
 8017ebe:	488a      	ldr	r0, [pc, #552]	; (80180e8 <tcp_output+0x240>)
 8017ec0:	f006 ffb0 	bl	801ee24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	7d1b      	ldrb	r3, [r3, #20]
 8017ec8:	2b01      	cmp	r3, #1
 8017eca:	d106      	bne.n	8017eda <tcp_output+0x32>
 8017ecc:	4b84      	ldr	r3, [pc, #528]	; (80180e0 <tcp_output+0x238>)
 8017ece:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017ed2:	4986      	ldr	r1, [pc, #536]	; (80180ec <tcp_output+0x244>)
 8017ed4:	4884      	ldr	r0, [pc, #528]	; (80180e8 <tcp_output+0x240>)
 8017ed6:	f006 ffa5 	bl	801ee24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017eda:	4b85      	ldr	r3, [pc, #532]	; (80180f0 <tcp_output+0x248>)
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	687a      	ldr	r2, [r7, #4]
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d101      	bne.n	8017ee8 <tcp_output+0x40>
    return ERR_OK;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	e1ce      	b.n	8018286 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	bf28      	it	cs
 8017ef8:	4613      	movcs	r3, r2
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f02:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d10b      	bne.n	8017f22 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	8b5b      	ldrh	r3, [r3, #26]
 8017f0e:	f003 0302 	and.w	r3, r3, #2
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	f000 81aa 	beq.w	801826c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017f18:	6878      	ldr	r0, [r7, #4]
 8017f1a:	f000 fdcb 	bl	8018ab4 <tcp_send_empty_ack>
 8017f1e:	4603      	mov	r3, r0
 8017f20:	e1b1      	b.n	8018286 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017f22:	6879      	ldr	r1, [r7, #4]
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	3304      	adds	r3, #4
 8017f28:	461a      	mov	r2, r3
 8017f2a:	6878      	ldr	r0, [r7, #4]
 8017f2c:	f7ff f824 	bl	8016f78 <tcp_route>
 8017f30:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017f32:	697b      	ldr	r3, [r7, #20]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d102      	bne.n	8017f3e <tcp_output+0x96>
    return ERR_RTE;
 8017f38:	f06f 0303 	mvn.w	r3, #3
 8017f3c:	e1a3      	b.n	8018286 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d003      	beq.n	8017f4c <tcp_output+0xa4>
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d111      	bne.n	8017f70 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017f4c:	697b      	ldr	r3, [r7, #20]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d002      	beq.n	8017f58 <tcp_output+0xb0>
 8017f52:	697b      	ldr	r3, [r7, #20]
 8017f54:	3304      	adds	r3, #4
 8017f56:	e000      	b.n	8017f5a <tcp_output+0xb2>
 8017f58:	2300      	movs	r3, #0
 8017f5a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d102      	bne.n	8017f68 <tcp_output+0xc0>
      return ERR_RTE;
 8017f62:	f06f 0303 	mvn.w	r3, #3
 8017f66:	e18e      	b.n	8018286 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017f68:	693b      	ldr	r3, [r7, #16]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f72:	68db      	ldr	r3, [r3, #12]
 8017f74:	685b      	ldr	r3, [r3, #4]
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7f8 ffa1 	bl	8010ebe <lwip_htonl>
 8017f7c:	4602      	mov	r2, r0
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017f82:	1ad3      	subs	r3, r2, r3
 8017f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017f86:	8912      	ldrh	r2, [r2, #8]
 8017f88:	4413      	add	r3, r2
 8017f8a:	69ba      	ldr	r2, [r7, #24]
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d227      	bcs.n	8017fe0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017f96:	461a      	mov	r2, r3
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	4293      	cmp	r3, r2
 8017f9c:	d114      	bne.n	8017fc8 <tcp_output+0x120>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d110      	bne.n	8017fc8 <tcp_output+0x120>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d10b      	bne.n	8017fc8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	2201      	movs	r2, #1
 8017fbc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	2200      	movs	r2, #0
 8017fc4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	8b5b      	ldrh	r3, [r3, #26]
 8017fcc:	f003 0302 	and.w	r3, r3, #2
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	f000 814d 	beq.w	8018270 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 fd6c 	bl	8018ab4 <tcp_send_empty_ack>
 8017fdc:	4603      	mov	r3, r0
 8017fde:	e152      	b.n	8018286 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2200      	movs	r2, #0
 8017fe4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fec:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017fee:	6a3b      	ldr	r3, [r7, #32]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	f000 811c 	beq.w	801822e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017ff6:	e002      	b.n	8017ffe <tcp_output+0x156>
 8017ff8:	6a3b      	ldr	r3, [r7, #32]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	623b      	str	r3, [r7, #32]
 8017ffe:	6a3b      	ldr	r3, [r7, #32]
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	2b00      	cmp	r3, #0
 8018004:	d1f8      	bne.n	8017ff8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018006:	e112      	b.n	801822e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800a:	68db      	ldr	r3, [r3, #12]
 801800c:	899b      	ldrh	r3, [r3, #12]
 801800e:	b29b      	uxth	r3, r3
 8018010:	4618      	mov	r0, r3
 8018012:	f7f8 ff3f 	bl	8010e94 <lwip_htons>
 8018016:	4603      	mov	r3, r0
 8018018:	b2db      	uxtb	r3, r3
 801801a:	f003 0304 	and.w	r3, r3, #4
 801801e:	2b00      	cmp	r3, #0
 8018020:	d006      	beq.n	8018030 <tcp_output+0x188>
 8018022:	4b2f      	ldr	r3, [pc, #188]	; (80180e0 <tcp_output+0x238>)
 8018024:	f240 5236 	movw	r2, #1334	; 0x536
 8018028:	4932      	ldr	r1, [pc, #200]	; (80180f4 <tcp_output+0x24c>)
 801802a:	482f      	ldr	r0, [pc, #188]	; (80180e8 <tcp_output+0x240>)
 801802c:	f006 fefa 	bl	801ee24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018034:	2b00      	cmp	r3, #0
 8018036:	d01f      	beq.n	8018078 <tcp_output+0x1d0>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	8b5b      	ldrh	r3, [r3, #26]
 801803c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018040:	2b00      	cmp	r3, #0
 8018042:	d119      	bne.n	8018078 <tcp_output+0x1d0>
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018048:	2b00      	cmp	r3, #0
 801804a:	d00b      	beq.n	8018064 <tcp_output+0x1bc>
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d110      	bne.n	8018078 <tcp_output+0x1d0>
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801805a:	891a      	ldrh	r2, [r3, #8]
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018060:	429a      	cmp	r2, r3
 8018062:	d209      	bcs.n	8018078 <tcp_output+0x1d0>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801806a:	2b00      	cmp	r3, #0
 801806c:	d004      	beq.n	8018078 <tcp_output+0x1d0>
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018074:	2b08      	cmp	r3, #8
 8018076:	d901      	bls.n	801807c <tcp_output+0x1d4>
 8018078:	2301      	movs	r3, #1
 801807a:	e000      	b.n	801807e <tcp_output+0x1d6>
 801807c:	2300      	movs	r3, #0
 801807e:	2b00      	cmp	r3, #0
 8018080:	d106      	bne.n	8018090 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	8b5b      	ldrh	r3, [r3, #26]
 8018086:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801808a:	2b00      	cmp	r3, #0
 801808c:	f000 80e4 	beq.w	8018258 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	7d1b      	ldrb	r3, [r3, #20]
 8018094:	2b02      	cmp	r3, #2
 8018096:	d00d      	beq.n	80180b4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801809a:	68db      	ldr	r3, [r3, #12]
 801809c:	899b      	ldrh	r3, [r3, #12]
 801809e:	b29c      	uxth	r4, r3
 80180a0:	2010      	movs	r0, #16
 80180a2:	f7f8 fef7 	bl	8010e94 <lwip_htons>
 80180a6:	4603      	mov	r3, r0
 80180a8:	461a      	mov	r2, r3
 80180aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ac:	68db      	ldr	r3, [r3, #12]
 80180ae:	4322      	orrs	r2, r4
 80180b0:	b292      	uxth	r2, r2
 80180b2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80180b4:	697a      	ldr	r2, [r7, #20]
 80180b6:	6879      	ldr	r1, [r7, #4]
 80180b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80180ba:	f000 f909 	bl	80182d0 <tcp_output_segment>
 80180be:	4603      	mov	r3, r0
 80180c0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80180c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d016      	beq.n	80180f8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	8b5b      	ldrh	r3, [r3, #26]
 80180ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180d2:	b29a      	uxth	r2, r3
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	835a      	strh	r2, [r3, #26]
      return err;
 80180d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80180dc:	e0d3      	b.n	8018286 <tcp_output+0x3de>
 80180de:	bf00      	nop
 80180e0:	08022e84 	.word	0x08022e84
 80180e4:	080233c8 	.word	0x080233c8
 80180e8:	08022ed8 	.word	0x08022ed8
 80180ec:	080233e0 	.word	0x080233e0
 80180f0:	2000c8e4 	.word	0x2000c8e4
 80180f4:	08023408 	.word	0x08023408
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80180f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fa:	681a      	ldr	r2, [r3, #0]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	7d1b      	ldrb	r3, [r3, #20]
 8018104:	2b02      	cmp	r3, #2
 8018106:	d006      	beq.n	8018116 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	8b5b      	ldrh	r3, [r3, #26]
 801810c:	f023 0303 	bic.w	r3, r3, #3
 8018110:	b29a      	uxth	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018118:	68db      	ldr	r3, [r3, #12]
 801811a:	685b      	ldr	r3, [r3, #4]
 801811c:	4618      	mov	r0, r3
 801811e:	f7f8 fece 	bl	8010ebe <lwip_htonl>
 8018122:	4604      	mov	r4, r0
 8018124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018126:	891b      	ldrh	r3, [r3, #8]
 8018128:	461d      	mov	r5, r3
 801812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812c:	68db      	ldr	r3, [r3, #12]
 801812e:	899b      	ldrh	r3, [r3, #12]
 8018130:	b29b      	uxth	r3, r3
 8018132:	4618      	mov	r0, r3
 8018134:	f7f8 feae 	bl	8010e94 <lwip_htons>
 8018138:	4603      	mov	r3, r0
 801813a:	b2db      	uxtb	r3, r3
 801813c:	f003 0303 	and.w	r3, r3, #3
 8018140:	2b00      	cmp	r3, #0
 8018142:	d001      	beq.n	8018148 <tcp_output+0x2a0>
 8018144:	2301      	movs	r3, #1
 8018146:	e000      	b.n	801814a <tcp_output+0x2a2>
 8018148:	2300      	movs	r3, #0
 801814a:	442b      	add	r3, r5
 801814c:	4423      	add	r3, r4
 801814e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018154:	68bb      	ldr	r3, [r7, #8]
 8018156:	1ad3      	subs	r3, r2, r3
 8018158:	2b00      	cmp	r3, #0
 801815a:	da02      	bge.n	8018162 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	68ba      	ldr	r2, [r7, #8]
 8018160:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018164:	891b      	ldrh	r3, [r3, #8]
 8018166:	461c      	mov	r4, r3
 8018168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	899b      	ldrh	r3, [r3, #12]
 801816e:	b29b      	uxth	r3, r3
 8018170:	4618      	mov	r0, r3
 8018172:	f7f8 fe8f 	bl	8010e94 <lwip_htons>
 8018176:	4603      	mov	r3, r0
 8018178:	b2db      	uxtb	r3, r3
 801817a:	f003 0303 	and.w	r3, r3, #3
 801817e:	2b00      	cmp	r3, #0
 8018180:	d001      	beq.n	8018186 <tcp_output+0x2de>
 8018182:	2301      	movs	r3, #1
 8018184:	e000      	b.n	8018188 <tcp_output+0x2e0>
 8018186:	2300      	movs	r3, #0
 8018188:	4423      	add	r3, r4
 801818a:	2b00      	cmp	r3, #0
 801818c:	d049      	beq.n	8018222 <tcp_output+0x37a>
      seg->next = NULL;
 801818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018190:	2200      	movs	r2, #0
 8018192:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018198:	2b00      	cmp	r3, #0
 801819a:	d105      	bne.n	80181a8 <tcp_output+0x300>
        pcb->unacked = seg;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80181a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a4:	623b      	str	r3, [r7, #32]
 80181a6:	e03f      	b.n	8018228 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80181a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f7f8 fe85 	bl	8010ebe <lwip_htonl>
 80181b4:	4604      	mov	r4, r0
 80181b6:	6a3b      	ldr	r3, [r7, #32]
 80181b8:	68db      	ldr	r3, [r3, #12]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	4618      	mov	r0, r3
 80181be:	f7f8 fe7e 	bl	8010ebe <lwip_htonl>
 80181c2:	4603      	mov	r3, r0
 80181c4:	1ae3      	subs	r3, r4, r3
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	da24      	bge.n	8018214 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	3370      	adds	r3, #112	; 0x70
 80181ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80181d0:	e002      	b.n	80181d8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	681b      	ldr	r3, [r3, #0]
 80181d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80181d8:	69fb      	ldr	r3, [r7, #28]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d011      	beq.n	8018204 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	68db      	ldr	r3, [r3, #12]
 80181e6:	685b      	ldr	r3, [r3, #4]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7f8 fe68 	bl	8010ebe <lwip_htonl>
 80181ee:	4604      	mov	r4, r0
 80181f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	685b      	ldr	r3, [r3, #4]
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7f8 fe61 	bl	8010ebe <lwip_htonl>
 80181fc:	4603      	mov	r3, r0
 80181fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018200:	2b00      	cmp	r3, #0
 8018202:	dbe6      	blt.n	80181d2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018204:	69fb      	ldr	r3, [r7, #28]
 8018206:	681a      	ldr	r2, [r3, #0]
 8018208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801820a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801820c:	69fb      	ldr	r3, [r7, #28]
 801820e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018210:	601a      	str	r2, [r3, #0]
 8018212:	e009      	b.n	8018228 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018214:	6a3b      	ldr	r3, [r7, #32]
 8018216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018218:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801821a:	6a3b      	ldr	r3, [r7, #32]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	623b      	str	r3, [r7, #32]
 8018220:	e002      	b.n	8018228 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018222:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018224:	f7fb ff19 	bl	801405a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801822c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018230:	2b00      	cmp	r3, #0
 8018232:	d012      	beq.n	801825a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018236:	68db      	ldr	r3, [r3, #12]
 8018238:	685b      	ldr	r3, [r3, #4]
 801823a:	4618      	mov	r0, r3
 801823c:	f7f8 fe3f 	bl	8010ebe <lwip_htonl>
 8018240:	4602      	mov	r2, r0
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801824a:	8912      	ldrh	r2, [r2, #8]
 801824c:	4413      	add	r3, r2
  while (seg != NULL &&
 801824e:	69ba      	ldr	r2, [r7, #24]
 8018250:	429a      	cmp	r2, r3
 8018252:	f4bf aed9 	bcs.w	8018008 <tcp_output+0x160>
 8018256:	e000      	b.n	801825a <tcp_output+0x3b2>
      break;
 8018258:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801825e:	2b00      	cmp	r3, #0
 8018260:	d108      	bne.n	8018274 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2200      	movs	r2, #0
 8018266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801826a:	e004      	b.n	8018276 <tcp_output+0x3ce>
    goto output_done;
 801826c:	bf00      	nop
 801826e:	e002      	b.n	8018276 <tcp_output+0x3ce>
    goto output_done;
 8018270:	bf00      	nop
 8018272:	e000      	b.n	8018276 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018274:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	8b5b      	ldrh	r3, [r3, #26]
 801827a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801827e:	b29a      	uxth	r2, r3
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018284:	2300      	movs	r3, #0
}
 8018286:	4618      	mov	r0, r3
 8018288:	3728      	adds	r7, #40	; 0x28
 801828a:	46bd      	mov	sp, r7
 801828c:	bdb0      	pop	{r4, r5, r7, pc}
 801828e:	bf00      	nop

08018290 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018290:	b580      	push	{r7, lr}
 8018292:	b082      	sub	sp, #8
 8018294:	af00      	add	r7, sp, #0
 8018296:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d106      	bne.n	80182ac <tcp_output_segment_busy+0x1c>
 801829e:	4b09      	ldr	r3, [pc, #36]	; (80182c4 <tcp_output_segment_busy+0x34>)
 80182a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80182a4:	4908      	ldr	r1, [pc, #32]	; (80182c8 <tcp_output_segment_busy+0x38>)
 80182a6:	4809      	ldr	r0, [pc, #36]	; (80182cc <tcp_output_segment_busy+0x3c>)
 80182a8:	f006 fdbc 	bl	801ee24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	685b      	ldr	r3, [r3, #4]
 80182b0:	7b9b      	ldrb	r3, [r3, #14]
 80182b2:	2b01      	cmp	r3, #1
 80182b4:	d001      	beq.n	80182ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80182b6:	2301      	movs	r3, #1
 80182b8:	e000      	b.n	80182bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80182ba:	2300      	movs	r3, #0
}
 80182bc:	4618      	mov	r0, r3
 80182be:	3708      	adds	r7, #8
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bd80      	pop	{r7, pc}
 80182c4:	08022e84 	.word	0x08022e84
 80182c8:	08023420 	.word	0x08023420
 80182cc:	08022ed8 	.word	0x08022ed8

080182d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80182d0:	b5b0      	push	{r4, r5, r7, lr}
 80182d2:	b08c      	sub	sp, #48	; 0x30
 80182d4:	af04      	add	r7, sp, #16
 80182d6:	60f8      	str	r0, [r7, #12]
 80182d8:	60b9      	str	r1, [r7, #8]
 80182da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d106      	bne.n	80182f0 <tcp_output_segment+0x20>
 80182e2:	4b64      	ldr	r3, [pc, #400]	; (8018474 <tcp_output_segment+0x1a4>)
 80182e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80182e8:	4963      	ldr	r1, [pc, #396]	; (8018478 <tcp_output_segment+0x1a8>)
 80182ea:	4864      	ldr	r0, [pc, #400]	; (801847c <tcp_output_segment+0x1ac>)
 80182ec:	f006 fd9a 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80182f0:	68bb      	ldr	r3, [r7, #8]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d106      	bne.n	8018304 <tcp_output_segment+0x34>
 80182f6:	4b5f      	ldr	r3, [pc, #380]	; (8018474 <tcp_output_segment+0x1a4>)
 80182f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80182fc:	4960      	ldr	r1, [pc, #384]	; (8018480 <tcp_output_segment+0x1b0>)
 80182fe:	485f      	ldr	r0, [pc, #380]	; (801847c <tcp_output_segment+0x1ac>)
 8018300:	f006 fd90 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	2b00      	cmp	r3, #0
 8018308:	d106      	bne.n	8018318 <tcp_output_segment+0x48>
 801830a:	4b5a      	ldr	r3, [pc, #360]	; (8018474 <tcp_output_segment+0x1a4>)
 801830c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018310:	495c      	ldr	r1, [pc, #368]	; (8018484 <tcp_output_segment+0x1b4>)
 8018312:	485a      	ldr	r0, [pc, #360]	; (801847c <tcp_output_segment+0x1ac>)
 8018314:	f006 fd86 	bl	801ee24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018318:	68f8      	ldr	r0, [r7, #12]
 801831a:	f7ff ffb9 	bl	8018290 <tcp_output_segment_busy>
 801831e:	4603      	mov	r3, r0
 8018320:	2b00      	cmp	r3, #0
 8018322:	d001      	beq.n	8018328 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018324:	2300      	movs	r3, #0
 8018326:	e0a1      	b.n	801846c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	68dc      	ldr	r4, [r3, #12]
 8018330:	4610      	mov	r0, r2
 8018332:	f7f8 fdc4 	bl	8010ebe <lwip_htonl>
 8018336:	4603      	mov	r3, r0
 8018338:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801833a:	68bb      	ldr	r3, [r7, #8]
 801833c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	68dc      	ldr	r4, [r3, #12]
 8018342:	4610      	mov	r0, r2
 8018344:	f7f8 fda6 	bl	8010e94 <lwip_htons>
 8018348:	4603      	mov	r3, r0
 801834a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801834c:	68bb      	ldr	r3, [r7, #8]
 801834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018350:	68ba      	ldr	r2, [r7, #8]
 8018352:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018354:	441a      	add	r2, r3
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	68db      	ldr	r3, [r3, #12]
 801835e:	3314      	adds	r3, #20
 8018360:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	7a9b      	ldrb	r3, [r3, #10]
 8018366:	f003 0301 	and.w	r3, r3, #1
 801836a:	2b00      	cmp	r3, #0
 801836c:	d015      	beq.n	801839a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	3304      	adds	r3, #4
 8018372:	461a      	mov	r2, r3
 8018374:	6879      	ldr	r1, [r7, #4]
 8018376:	f44f 7006 	mov.w	r0, #536	; 0x218
 801837a:	f7fc fa33 	bl	80147e4 <tcp_eff_send_mss_netif>
 801837e:	4603      	mov	r3, r0
 8018380:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018382:	8b7b      	ldrh	r3, [r7, #26]
 8018384:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018388:	4618      	mov	r0, r3
 801838a:	f7f8 fd98 	bl	8010ebe <lwip_htonl>
 801838e:	4602      	mov	r2, r0
 8018390:	69fb      	ldr	r3, [r7, #28]
 8018392:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018394:	69fb      	ldr	r3, [r7, #28]
 8018396:	3304      	adds	r3, #4
 8018398:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801839a:	68bb      	ldr	r3, [r7, #8]
 801839c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	da02      	bge.n	80183aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80183a4:	68bb      	ldr	r3, [r7, #8]
 80183a6:	2200      	movs	r2, #0
 80183a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d10c      	bne.n	80183cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80183b2:	4b35      	ldr	r3, [pc, #212]	; (8018488 <tcp_output_segment+0x1b8>)
 80183b4:	681a      	ldr	r2, [r3, #0]
 80183b6:	68bb      	ldr	r3, [r7, #8]
 80183b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	68db      	ldr	r3, [r3, #12]
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	4618      	mov	r0, r3
 80183c2:	f7f8 fd7c 	bl	8010ebe <lwip_htonl>
 80183c6:	4602      	mov	r2, r0
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	68da      	ldr	r2, [r3, #12]
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	1ad3      	subs	r3, r2, r3
 80183d8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	685b      	ldr	r3, [r3, #4]
 80183de:	8959      	ldrh	r1, [r3, #10]
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	685b      	ldr	r3, [r3, #4]
 80183e4:	8b3a      	ldrh	r2, [r7, #24]
 80183e6:	1a8a      	subs	r2, r1, r2
 80183e8:	b292      	uxth	r2, r2
 80183ea:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	8919      	ldrh	r1, [r3, #8]
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	685b      	ldr	r3, [r3, #4]
 80183f6:	8b3a      	ldrh	r2, [r7, #24]
 80183f8:	1a8a      	subs	r2, r1, r2
 80183fa:	b292      	uxth	r2, r2
 80183fc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	685b      	ldr	r3, [r3, #4]
 8018402:	68fa      	ldr	r2, [r7, #12]
 8018404:	68d2      	ldr	r2, [r2, #12]
 8018406:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018408:	68fb      	ldr	r3, [r7, #12]
 801840a:	68db      	ldr	r3, [r3, #12]
 801840c:	2200      	movs	r2, #0
 801840e:	741a      	strb	r2, [r3, #16]
 8018410:	2200      	movs	r2, #0
 8018412:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	68da      	ldr	r2, [r3, #12]
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	7a9b      	ldrb	r3, [r3, #10]
 801841c:	f003 0301 	and.w	r3, r3, #1
 8018420:	2b00      	cmp	r3, #0
 8018422:	d001      	beq.n	8018428 <tcp_output_segment+0x158>
 8018424:	2318      	movs	r3, #24
 8018426:	e000      	b.n	801842a <tcp_output_segment+0x15a>
 8018428:	2314      	movs	r3, #20
 801842a:	4413      	add	r3, r2
 801842c:	69fa      	ldr	r2, [r7, #28]
 801842e:	429a      	cmp	r2, r3
 8018430:	d006      	beq.n	8018440 <tcp_output_segment+0x170>
 8018432:	4b10      	ldr	r3, [pc, #64]	; (8018474 <tcp_output_segment+0x1a4>)
 8018434:	f240 621c 	movw	r2, #1564	; 0x61c
 8018438:	4914      	ldr	r1, [pc, #80]	; (801848c <tcp_output_segment+0x1bc>)
 801843a:	4810      	ldr	r0, [pc, #64]	; (801847c <tcp_output_segment+0x1ac>)
 801843c:	f006 fcf2 	bl	801ee24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	6858      	ldr	r0, [r3, #4]
 8018444:	68b9      	ldr	r1, [r7, #8]
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	1d1c      	adds	r4, r3, #4
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	7add      	ldrb	r5, [r3, #11]
 801844e:	68bb      	ldr	r3, [r7, #8]
 8018450:	7a9b      	ldrb	r3, [r3, #10]
 8018452:	687a      	ldr	r2, [r7, #4]
 8018454:	9202      	str	r2, [sp, #8]
 8018456:	2206      	movs	r2, #6
 8018458:	9201      	str	r2, [sp, #4]
 801845a:	9300      	str	r3, [sp, #0]
 801845c:	462b      	mov	r3, r5
 801845e:	4622      	mov	r2, r4
 8018460:	f004 fc40 	bl	801cce4 <ip4_output_if>
 8018464:	4603      	mov	r3, r0
 8018466:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801846c:	4618      	mov	r0, r3
 801846e:	3720      	adds	r7, #32
 8018470:	46bd      	mov	sp, r7
 8018472:	bdb0      	pop	{r4, r5, r7, pc}
 8018474:	08022e84 	.word	0x08022e84
 8018478:	08023448 	.word	0x08023448
 801847c:	08022ed8 	.word	0x08022ed8
 8018480:	08023468 	.word	0x08023468
 8018484:	08023488 	.word	0x08023488
 8018488:	2000c898 	.word	0x2000c898
 801848c:	080234ac 	.word	0x080234ac

08018490 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018490:	b5b0      	push	{r4, r5, r7, lr}
 8018492:	b084      	sub	sp, #16
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d106      	bne.n	80184ac <tcp_rexmit_rto_prepare+0x1c>
 801849e:	4b31      	ldr	r3, [pc, #196]	; (8018564 <tcp_rexmit_rto_prepare+0xd4>)
 80184a0:	f240 6263 	movw	r2, #1635	; 0x663
 80184a4:	4930      	ldr	r1, [pc, #192]	; (8018568 <tcp_rexmit_rto_prepare+0xd8>)
 80184a6:	4831      	ldr	r0, [pc, #196]	; (801856c <tcp_rexmit_rto_prepare+0xdc>)
 80184a8:	f006 fcbc 	bl	801ee24 <iprintf>

  if (pcb->unacked == NULL) {
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d102      	bne.n	80184ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80184b4:	f06f 0305 	mvn.w	r3, #5
 80184b8:	e050      	b.n	801855c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80184be:	60fb      	str	r3, [r7, #12]
 80184c0:	e00b      	b.n	80184da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80184c2:	68f8      	ldr	r0, [r7, #12]
 80184c4:	f7ff fee4 	bl	8018290 <tcp_output_segment_busy>
 80184c8:	4603      	mov	r3, r0
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d002      	beq.n	80184d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80184ce:	f06f 0305 	mvn.w	r3, #5
 80184d2:	e043      	b.n	801855c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	60fb      	str	r3, [r7, #12]
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d1ef      	bne.n	80184c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80184e2:	68f8      	ldr	r0, [r7, #12]
 80184e4:	f7ff fed4 	bl	8018290 <tcp_output_segment_busy>
 80184e8:	4603      	mov	r3, r0
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d002      	beq.n	80184f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80184ee:	f06f 0305 	mvn.w	r3, #5
 80184f2:	e033      	b.n	801855c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	2200      	movs	r2, #0
 8018508:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	8b5b      	ldrh	r3, [r3, #26]
 801850e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018512:	b29a      	uxth	r2, r3
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	68db      	ldr	r3, [r3, #12]
 801851c:	685b      	ldr	r3, [r3, #4]
 801851e:	4618      	mov	r0, r3
 8018520:	f7f8 fccd 	bl	8010ebe <lwip_htonl>
 8018524:	4604      	mov	r4, r0
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	891b      	ldrh	r3, [r3, #8]
 801852a:	461d      	mov	r5, r3
 801852c:	68fb      	ldr	r3, [r7, #12]
 801852e:	68db      	ldr	r3, [r3, #12]
 8018530:	899b      	ldrh	r3, [r3, #12]
 8018532:	b29b      	uxth	r3, r3
 8018534:	4618      	mov	r0, r3
 8018536:	f7f8 fcad 	bl	8010e94 <lwip_htons>
 801853a:	4603      	mov	r3, r0
 801853c:	b2db      	uxtb	r3, r3
 801853e:	f003 0303 	and.w	r3, r3, #3
 8018542:	2b00      	cmp	r3, #0
 8018544:	d001      	beq.n	801854a <tcp_rexmit_rto_prepare+0xba>
 8018546:	2301      	movs	r3, #1
 8018548:	e000      	b.n	801854c <tcp_rexmit_rto_prepare+0xbc>
 801854a:	2300      	movs	r3, #0
 801854c:	442b      	add	r3, r5
 801854e:	18e2      	adds	r2, r4, r3
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	2200      	movs	r2, #0
 8018558:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801855a:	2300      	movs	r3, #0
}
 801855c:	4618      	mov	r0, r3
 801855e:	3710      	adds	r7, #16
 8018560:	46bd      	mov	sp, r7
 8018562:	bdb0      	pop	{r4, r5, r7, pc}
 8018564:	08022e84 	.word	0x08022e84
 8018568:	080234c0 	.word	0x080234c0
 801856c:	08022ed8 	.word	0x08022ed8

08018570 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018570:	b580      	push	{r7, lr}
 8018572:	b082      	sub	sp, #8
 8018574:	af00      	add	r7, sp, #0
 8018576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d106      	bne.n	801858c <tcp_rexmit_rto_commit+0x1c>
 801857e:	4b0d      	ldr	r3, [pc, #52]	; (80185b4 <tcp_rexmit_rto_commit+0x44>)
 8018580:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018584:	490c      	ldr	r1, [pc, #48]	; (80185b8 <tcp_rexmit_rto_commit+0x48>)
 8018586:	480d      	ldr	r0, [pc, #52]	; (80185bc <tcp_rexmit_rto_commit+0x4c>)
 8018588:	f006 fc4c 	bl	801ee24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018592:	2bff      	cmp	r3, #255	; 0xff
 8018594:	d007      	beq.n	80185a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801859c:	3301      	adds	r3, #1
 801859e:	b2da      	uxtb	r2, r3
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80185a6:	6878      	ldr	r0, [r7, #4]
 80185a8:	f7ff fc7e 	bl	8017ea8 <tcp_output>
}
 80185ac:	bf00      	nop
 80185ae:	3708      	adds	r7, #8
 80185b0:	46bd      	mov	sp, r7
 80185b2:	bd80      	pop	{r7, pc}
 80185b4:	08022e84 	.word	0x08022e84
 80185b8:	080234e4 	.word	0x080234e4
 80185bc:	08022ed8 	.word	0x08022ed8

080185c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b082      	sub	sp, #8
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d106      	bne.n	80185dc <tcp_rexmit_rto+0x1c>
 80185ce:	4b0a      	ldr	r3, [pc, #40]	; (80185f8 <tcp_rexmit_rto+0x38>)
 80185d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80185d4:	4909      	ldr	r1, [pc, #36]	; (80185fc <tcp_rexmit_rto+0x3c>)
 80185d6:	480a      	ldr	r0, [pc, #40]	; (8018600 <tcp_rexmit_rto+0x40>)
 80185d8:	f006 fc24 	bl	801ee24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80185dc:	6878      	ldr	r0, [r7, #4]
 80185de:	f7ff ff57 	bl	8018490 <tcp_rexmit_rto_prepare>
 80185e2:	4603      	mov	r3, r0
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d102      	bne.n	80185ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	f7ff ffc1 	bl	8018570 <tcp_rexmit_rto_commit>
  }
}
 80185ee:	bf00      	nop
 80185f0:	3708      	adds	r7, #8
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	08022e84 	.word	0x08022e84
 80185fc:	08023508 	.word	0x08023508
 8018600:	08022ed8 	.word	0x08022ed8

08018604 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018604:	b590      	push	{r4, r7, lr}
 8018606:	b085      	sub	sp, #20
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d106      	bne.n	8018620 <tcp_rexmit+0x1c>
 8018612:	4b2f      	ldr	r3, [pc, #188]	; (80186d0 <tcp_rexmit+0xcc>)
 8018614:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018618:	492e      	ldr	r1, [pc, #184]	; (80186d4 <tcp_rexmit+0xd0>)
 801861a:	482f      	ldr	r0, [pc, #188]	; (80186d8 <tcp_rexmit+0xd4>)
 801861c:	f006 fc02 	bl	801ee24 <iprintf>

  if (pcb->unacked == NULL) {
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018624:	2b00      	cmp	r3, #0
 8018626:	d102      	bne.n	801862e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018628:	f06f 0305 	mvn.w	r3, #5
 801862c:	e04c      	b.n	80186c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018632:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018634:	68b8      	ldr	r0, [r7, #8]
 8018636:	f7ff fe2b 	bl	8018290 <tcp_output_segment_busy>
 801863a:	4603      	mov	r3, r0
 801863c:	2b00      	cmp	r3, #0
 801863e:	d002      	beq.n	8018646 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018640:	f06f 0305 	mvn.w	r3, #5
 8018644:	e040      	b.n	80186c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	336c      	adds	r3, #108	; 0x6c
 8018652:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018654:	e002      	b.n	801865c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d011      	beq.n	8018688 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	685b      	ldr	r3, [r3, #4]
 801866c:	4618      	mov	r0, r3
 801866e:	f7f8 fc26 	bl	8010ebe <lwip_htonl>
 8018672:	4604      	mov	r4, r0
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	68db      	ldr	r3, [r3, #12]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	4618      	mov	r0, r3
 801867c:	f7f8 fc1f 	bl	8010ebe <lwip_htonl>
 8018680:	4603      	mov	r3, r0
 8018682:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018684:	2b00      	cmp	r3, #0
 8018686:	dbe6      	blt.n	8018656 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018688:	68fb      	ldr	r3, [r7, #12]
 801868a:	681a      	ldr	r2, [r3, #0]
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018690:	68fb      	ldr	r3, [r7, #12]
 8018692:	68ba      	ldr	r2, [r7, #8]
 8018694:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d103      	bne.n	80186a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2200      	movs	r2, #0
 80186a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80186ac:	2bff      	cmp	r3, #255	; 0xff
 80186ae:	d007      	beq.n	80186c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80186b6:	3301      	adds	r3, #1
 80186b8:	b2da      	uxtb	r2, r3
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	2200      	movs	r2, #0
 80186c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80186c6:	2300      	movs	r3, #0
}
 80186c8:	4618      	mov	r0, r3
 80186ca:	3714      	adds	r7, #20
 80186cc:	46bd      	mov	sp, r7
 80186ce:	bd90      	pop	{r4, r7, pc}
 80186d0:	08022e84 	.word	0x08022e84
 80186d4:	08023524 	.word	0x08023524
 80186d8:	08022ed8 	.word	0x08022ed8

080186dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80186dc:	b580      	push	{r7, lr}
 80186de:	b082      	sub	sp, #8
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d106      	bne.n	80186f8 <tcp_rexmit_fast+0x1c>
 80186ea:	4b2a      	ldr	r3, [pc, #168]	; (8018794 <tcp_rexmit_fast+0xb8>)
 80186ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80186f0:	4929      	ldr	r1, [pc, #164]	; (8018798 <tcp_rexmit_fast+0xbc>)
 80186f2:	482a      	ldr	r0, [pc, #168]	; (801879c <tcp_rexmit_fast+0xc0>)
 80186f4:	f006 fb96 	bl	801ee24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80186f8:	687b      	ldr	r3, [r7, #4]
 80186fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d044      	beq.n	801878a <tcp_rexmit_fast+0xae>
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	8b5b      	ldrh	r3, [r3, #26]
 8018704:	f003 0304 	and.w	r3, r3, #4
 8018708:	2b00      	cmp	r3, #0
 801870a:	d13e      	bne.n	801878a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801870c:	6878      	ldr	r0, [r7, #4]
 801870e:	f7ff ff79 	bl	8018604 <tcp_rexmit>
 8018712:	4603      	mov	r3, r0
 8018714:	2b00      	cmp	r3, #0
 8018716:	d138      	bne.n	801878a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018724:	4293      	cmp	r3, r2
 8018726:	bf28      	it	cs
 8018728:	4613      	movcs	r3, r2
 801872a:	b29b      	uxth	r3, r3
 801872c:	0fda      	lsrs	r2, r3, #31
 801872e:	4413      	add	r3, r2
 8018730:	105b      	asrs	r3, r3, #1
 8018732:	b29a      	uxth	r2, r3
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018740:	461a      	mov	r2, r3
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018746:	005b      	lsls	r3, r3, #1
 8018748:	429a      	cmp	r2, r3
 801874a:	d206      	bcs.n	801875a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018750:	005b      	lsls	r3, r3, #1
 8018752:	b29a      	uxth	r2, r3
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018764:	4619      	mov	r1, r3
 8018766:	0049      	lsls	r1, r1, #1
 8018768:	440b      	add	r3, r1
 801876a:	b29b      	uxth	r3, r3
 801876c:	4413      	add	r3, r2
 801876e:	b29a      	uxth	r2, r3
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	8b5b      	ldrh	r3, [r3, #26]
 801877a:	f043 0304 	orr.w	r3, r3, #4
 801877e:	b29a      	uxth	r2, r3
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2200      	movs	r2, #0
 8018788:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801878a:	bf00      	nop
 801878c:	3708      	adds	r7, #8
 801878e:	46bd      	mov	sp, r7
 8018790:	bd80      	pop	{r7, pc}
 8018792:	bf00      	nop
 8018794:	08022e84 	.word	0x08022e84
 8018798:	0802353c 	.word	0x0802353c
 801879c:	08022ed8 	.word	0x08022ed8

080187a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b086      	sub	sp, #24
 80187a4:	af00      	add	r7, sp, #0
 80187a6:	60f8      	str	r0, [r7, #12]
 80187a8:	607b      	str	r3, [r7, #4]
 80187aa:	460b      	mov	r3, r1
 80187ac:	817b      	strh	r3, [r7, #10]
 80187ae:	4613      	mov	r3, r2
 80187b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80187b2:	897a      	ldrh	r2, [r7, #10]
 80187b4:	893b      	ldrh	r3, [r7, #8]
 80187b6:	4413      	add	r3, r2
 80187b8:	b29b      	uxth	r3, r3
 80187ba:	3314      	adds	r3, #20
 80187bc:	b29b      	uxth	r3, r3
 80187be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80187c2:	4619      	mov	r1, r3
 80187c4:	2022      	movs	r0, #34	; 0x22
 80187c6:	f7f9 fcb7 	bl	8012138 <pbuf_alloc>
 80187ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80187cc:	697b      	ldr	r3, [r7, #20]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d04d      	beq.n	801886e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80187d2:	897b      	ldrh	r3, [r7, #10]
 80187d4:	3313      	adds	r3, #19
 80187d6:	697a      	ldr	r2, [r7, #20]
 80187d8:	8952      	ldrh	r2, [r2, #10]
 80187da:	4293      	cmp	r3, r2
 80187dc:	db06      	blt.n	80187ec <tcp_output_alloc_header_common+0x4c>
 80187de:	4b26      	ldr	r3, [pc, #152]	; (8018878 <tcp_output_alloc_header_common+0xd8>)
 80187e0:	f240 7223 	movw	r2, #1827	; 0x723
 80187e4:	4925      	ldr	r1, [pc, #148]	; (801887c <tcp_output_alloc_header_common+0xdc>)
 80187e6:	4826      	ldr	r0, [pc, #152]	; (8018880 <tcp_output_alloc_header_common+0xe0>)
 80187e8:	f006 fb1c 	bl	801ee24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80187ec:	697b      	ldr	r3, [r7, #20]
 80187ee:	685b      	ldr	r3, [r3, #4]
 80187f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80187f2:	8c3b      	ldrh	r3, [r7, #32]
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7f8 fb4d 	bl	8010e94 <lwip_htons>
 80187fa:	4603      	mov	r3, r0
 80187fc:	461a      	mov	r2, r3
 80187fe:	693b      	ldr	r3, [r7, #16]
 8018800:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018804:	4618      	mov	r0, r3
 8018806:	f7f8 fb45 	bl	8010e94 <lwip_htons>
 801880a:	4603      	mov	r3, r0
 801880c:	461a      	mov	r2, r3
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	687a      	ldr	r2, [r7, #4]
 8018816:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018818:	68f8      	ldr	r0, [r7, #12]
 801881a:	f7f8 fb50 	bl	8010ebe <lwip_htonl>
 801881e:	4602      	mov	r2, r0
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018824:	897b      	ldrh	r3, [r7, #10]
 8018826:	089b      	lsrs	r3, r3, #2
 8018828:	b29b      	uxth	r3, r3
 801882a:	3305      	adds	r3, #5
 801882c:	b29b      	uxth	r3, r3
 801882e:	031b      	lsls	r3, r3, #12
 8018830:	b29a      	uxth	r2, r3
 8018832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018836:	b29b      	uxth	r3, r3
 8018838:	4313      	orrs	r3, r2
 801883a:	b29b      	uxth	r3, r3
 801883c:	4618      	mov	r0, r3
 801883e:	f7f8 fb29 	bl	8010e94 <lwip_htons>
 8018842:	4603      	mov	r3, r0
 8018844:	461a      	mov	r2, r3
 8018846:	693b      	ldr	r3, [r7, #16]
 8018848:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801884a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801884c:	4618      	mov	r0, r3
 801884e:	f7f8 fb21 	bl	8010e94 <lwip_htons>
 8018852:	4603      	mov	r3, r0
 8018854:	461a      	mov	r2, r3
 8018856:	693b      	ldr	r3, [r7, #16]
 8018858:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801885a:	693b      	ldr	r3, [r7, #16]
 801885c:	2200      	movs	r2, #0
 801885e:	741a      	strb	r2, [r3, #16]
 8018860:	2200      	movs	r2, #0
 8018862:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	2200      	movs	r2, #0
 8018868:	749a      	strb	r2, [r3, #18]
 801886a:	2200      	movs	r2, #0
 801886c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801886e:	697b      	ldr	r3, [r7, #20]
}
 8018870:	4618      	mov	r0, r3
 8018872:	3718      	adds	r7, #24
 8018874:	46bd      	mov	sp, r7
 8018876:	bd80      	pop	{r7, pc}
 8018878:	08022e84 	.word	0x08022e84
 801887c:	0802355c 	.word	0x0802355c
 8018880:	08022ed8 	.word	0x08022ed8

08018884 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018884:	b5b0      	push	{r4, r5, r7, lr}
 8018886:	b08a      	sub	sp, #40	; 0x28
 8018888:	af04      	add	r7, sp, #16
 801888a:	60f8      	str	r0, [r7, #12]
 801888c:	607b      	str	r3, [r7, #4]
 801888e:	460b      	mov	r3, r1
 8018890:	817b      	strh	r3, [r7, #10]
 8018892:	4613      	mov	r3, r2
 8018894:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2b00      	cmp	r3, #0
 801889a:	d106      	bne.n	80188aa <tcp_output_alloc_header+0x26>
 801889c:	4b15      	ldr	r3, [pc, #84]	; (80188f4 <tcp_output_alloc_header+0x70>)
 801889e:	f240 7242 	movw	r2, #1858	; 0x742
 80188a2:	4915      	ldr	r1, [pc, #84]	; (80188f8 <tcp_output_alloc_header+0x74>)
 80188a4:	4815      	ldr	r0, [pc, #84]	; (80188fc <tcp_output_alloc_header+0x78>)
 80188a6:	f006 fabd 	bl	801ee24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	8adb      	ldrh	r3, [r3, #22]
 80188b2:	68fa      	ldr	r2, [r7, #12]
 80188b4:	8b12      	ldrh	r2, [r2, #24]
 80188b6:	68f9      	ldr	r1, [r7, #12]
 80188b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80188ba:	893d      	ldrh	r5, [r7, #8]
 80188bc:	897c      	ldrh	r4, [r7, #10]
 80188be:	9103      	str	r1, [sp, #12]
 80188c0:	2110      	movs	r1, #16
 80188c2:	9102      	str	r1, [sp, #8]
 80188c4:	9201      	str	r2, [sp, #4]
 80188c6:	9300      	str	r3, [sp, #0]
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	462a      	mov	r2, r5
 80188cc:	4621      	mov	r1, r4
 80188ce:	f7ff ff67 	bl	80187a0 <tcp_output_alloc_header_common>
 80188d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80188d4:	697b      	ldr	r3, [r7, #20]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d006      	beq.n	80188e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188de:	68fa      	ldr	r2, [r7, #12]
 80188e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80188e2:	441a      	add	r2, r3
 80188e4:	68fb      	ldr	r3, [r7, #12]
 80188e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80188e8:	697b      	ldr	r3, [r7, #20]
}
 80188ea:	4618      	mov	r0, r3
 80188ec:	3718      	adds	r7, #24
 80188ee:	46bd      	mov	sp, r7
 80188f0:	bdb0      	pop	{r4, r5, r7, pc}
 80188f2:	bf00      	nop
 80188f4:	08022e84 	.word	0x08022e84
 80188f8:	0802358c 	.word	0x0802358c
 80188fc:	08022ed8 	.word	0x08022ed8

08018900 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b088      	sub	sp, #32
 8018904:	af00      	add	r7, sp, #0
 8018906:	60f8      	str	r0, [r7, #12]
 8018908:	60b9      	str	r1, [r7, #8]
 801890a:	4611      	mov	r1, r2
 801890c:	461a      	mov	r2, r3
 801890e:	460b      	mov	r3, r1
 8018910:	71fb      	strb	r3, [r7, #7]
 8018912:	4613      	mov	r3, r2
 8018914:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018916:	2300      	movs	r3, #0
 8018918:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d106      	bne.n	801892e <tcp_output_fill_options+0x2e>
 8018920:	4b12      	ldr	r3, [pc, #72]	; (801896c <tcp_output_fill_options+0x6c>)
 8018922:	f240 7256 	movw	r2, #1878	; 0x756
 8018926:	4912      	ldr	r1, [pc, #72]	; (8018970 <tcp_output_fill_options+0x70>)
 8018928:	4812      	ldr	r0, [pc, #72]	; (8018974 <tcp_output_fill_options+0x74>)
 801892a:	f006 fa7b 	bl	801ee24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	685b      	ldr	r3, [r3, #4]
 8018932:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018934:	69bb      	ldr	r3, [r7, #24]
 8018936:	3314      	adds	r3, #20
 8018938:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801893a:	8bfb      	ldrh	r3, [r7, #30]
 801893c:	009b      	lsls	r3, r3, #2
 801893e:	461a      	mov	r2, r3
 8018940:	79fb      	ldrb	r3, [r7, #7]
 8018942:	009b      	lsls	r3, r3, #2
 8018944:	f003 0304 	and.w	r3, r3, #4
 8018948:	4413      	add	r3, r2
 801894a:	3314      	adds	r3, #20
 801894c:	69ba      	ldr	r2, [r7, #24]
 801894e:	4413      	add	r3, r2
 8018950:	697a      	ldr	r2, [r7, #20]
 8018952:	429a      	cmp	r2, r3
 8018954:	d006      	beq.n	8018964 <tcp_output_fill_options+0x64>
 8018956:	4b05      	ldr	r3, [pc, #20]	; (801896c <tcp_output_fill_options+0x6c>)
 8018958:	f240 7275 	movw	r2, #1909	; 0x775
 801895c:	4906      	ldr	r1, [pc, #24]	; (8018978 <tcp_output_fill_options+0x78>)
 801895e:	4805      	ldr	r0, [pc, #20]	; (8018974 <tcp_output_fill_options+0x74>)
 8018960:	f006 fa60 	bl	801ee24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018964:	bf00      	nop
 8018966:	3720      	adds	r7, #32
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}
 801896c:	08022e84 	.word	0x08022e84
 8018970:	080235b4 	.word	0x080235b4
 8018974:	08022ed8 	.word	0x08022ed8
 8018978:	080234ac 	.word	0x080234ac

0801897c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b08a      	sub	sp, #40	; 0x28
 8018980:	af04      	add	r7, sp, #16
 8018982:	60f8      	str	r0, [r7, #12]
 8018984:	60b9      	str	r1, [r7, #8]
 8018986:	607a      	str	r2, [r7, #4]
 8018988:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801898a:	68bb      	ldr	r3, [r7, #8]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d106      	bne.n	801899e <tcp_output_control_segment+0x22>
 8018990:	4b1c      	ldr	r3, [pc, #112]	; (8018a04 <tcp_output_control_segment+0x88>)
 8018992:	f240 7287 	movw	r2, #1927	; 0x787
 8018996:	491c      	ldr	r1, [pc, #112]	; (8018a08 <tcp_output_control_segment+0x8c>)
 8018998:	481c      	ldr	r0, [pc, #112]	; (8018a0c <tcp_output_control_segment+0x90>)
 801899a:	f006 fa43 	bl	801ee24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801899e:	683a      	ldr	r2, [r7, #0]
 80189a0:	6879      	ldr	r1, [r7, #4]
 80189a2:	68f8      	ldr	r0, [r7, #12]
 80189a4:	f7fe fae8 	bl	8016f78 <tcp_route>
 80189a8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80189aa:	693b      	ldr	r3, [r7, #16]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d102      	bne.n	80189b6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80189b0:	23fc      	movs	r3, #252	; 0xfc
 80189b2:	75fb      	strb	r3, [r7, #23]
 80189b4:	e01c      	b.n	80189f0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d006      	beq.n	80189ca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80189bc:	68fb      	ldr	r3, [r7, #12]
 80189be:	7adb      	ldrb	r3, [r3, #11]
 80189c0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	7a9b      	ldrb	r3, [r3, #10]
 80189c6:	757b      	strb	r3, [r7, #21]
 80189c8:	e003      	b.n	80189d2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80189ca:	23ff      	movs	r3, #255	; 0xff
 80189cc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80189ce:	2300      	movs	r3, #0
 80189d0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80189d2:	7dba      	ldrb	r2, [r7, #22]
 80189d4:	693b      	ldr	r3, [r7, #16]
 80189d6:	9302      	str	r3, [sp, #8]
 80189d8:	2306      	movs	r3, #6
 80189da:	9301      	str	r3, [sp, #4]
 80189dc:	7d7b      	ldrb	r3, [r7, #21]
 80189de:	9300      	str	r3, [sp, #0]
 80189e0:	4613      	mov	r3, r2
 80189e2:	683a      	ldr	r2, [r7, #0]
 80189e4:	6879      	ldr	r1, [r7, #4]
 80189e6:	68b8      	ldr	r0, [r7, #8]
 80189e8:	f004 f97c 	bl	801cce4 <ip4_output_if>
 80189ec:	4603      	mov	r3, r0
 80189ee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80189f0:	68b8      	ldr	r0, [r7, #8]
 80189f2:	f7f9 fe85 	bl	8012700 <pbuf_free>
  return err;
 80189f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189fa:	4618      	mov	r0, r3
 80189fc:	3718      	adds	r7, #24
 80189fe:	46bd      	mov	sp, r7
 8018a00:	bd80      	pop	{r7, pc}
 8018a02:	bf00      	nop
 8018a04:	08022e84 	.word	0x08022e84
 8018a08:	080235dc 	.word	0x080235dc
 8018a0c:	08022ed8 	.word	0x08022ed8

08018a10 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018a10:	b590      	push	{r4, r7, lr}
 8018a12:	b08b      	sub	sp, #44	; 0x2c
 8018a14:	af04      	add	r7, sp, #16
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
 8018a1c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	d106      	bne.n	8018a32 <tcp_rst+0x22>
 8018a24:	4b1f      	ldr	r3, [pc, #124]	; (8018aa4 <tcp_rst+0x94>)
 8018a26:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8018a2a:	491f      	ldr	r1, [pc, #124]	; (8018aa8 <tcp_rst+0x98>)
 8018a2c:	481f      	ldr	r0, [pc, #124]	; (8018aac <tcp_rst+0x9c>)
 8018a2e:	f006 f9f9 	bl	801ee24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d106      	bne.n	8018a46 <tcp_rst+0x36>
 8018a38:	4b1a      	ldr	r3, [pc, #104]	; (8018aa4 <tcp_rst+0x94>)
 8018a3a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018a3e:	491c      	ldr	r1, [pc, #112]	; (8018ab0 <tcp_rst+0xa0>)
 8018a40:	481a      	ldr	r0, [pc, #104]	; (8018aac <tcp_rst+0x9c>)
 8018a42:	f006 f9ef 	bl	801ee24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018a46:	2300      	movs	r3, #0
 8018a48:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8018a4a:	f246 0308 	movw	r3, #24584	; 0x6008
 8018a4e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018a50:	7dfb      	ldrb	r3, [r7, #23]
 8018a52:	b29c      	uxth	r4, r3
 8018a54:	68b8      	ldr	r0, [r7, #8]
 8018a56:	f7f8 fa32 	bl	8010ebe <lwip_htonl>
 8018a5a:	4602      	mov	r2, r0
 8018a5c:	8abb      	ldrh	r3, [r7, #20]
 8018a5e:	9303      	str	r3, [sp, #12]
 8018a60:	2314      	movs	r3, #20
 8018a62:	9302      	str	r3, [sp, #8]
 8018a64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8018a66:	9301      	str	r3, [sp, #4]
 8018a68:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018a6a:	9300      	str	r3, [sp, #0]
 8018a6c:	4613      	mov	r3, r2
 8018a6e:	2200      	movs	r2, #0
 8018a70:	4621      	mov	r1, r4
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f7ff fe94 	bl	80187a0 <tcp_output_alloc_header_common>
 8018a78:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8018a7a:	693b      	ldr	r3, [r7, #16]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d00c      	beq.n	8018a9a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018a80:	7dfb      	ldrb	r3, [r7, #23]
 8018a82:	2200      	movs	r2, #0
 8018a84:	6939      	ldr	r1, [r7, #16]
 8018a86:	68f8      	ldr	r0, [r7, #12]
 8018a88:	f7ff ff3a 	bl	8018900 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8e:	683a      	ldr	r2, [r7, #0]
 8018a90:	6939      	ldr	r1, [r7, #16]
 8018a92:	68f8      	ldr	r0, [r7, #12]
 8018a94:	f7ff ff72 	bl	801897c <tcp_output_control_segment>
 8018a98:	e000      	b.n	8018a9c <tcp_rst+0x8c>
    return;
 8018a9a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018a9c:	371c      	adds	r7, #28
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	bd90      	pop	{r4, r7, pc}
 8018aa2:	bf00      	nop
 8018aa4:	08022e84 	.word	0x08022e84
 8018aa8:	08023608 	.word	0x08023608
 8018aac:	08022ed8 	.word	0x08022ed8
 8018ab0:	08023624 	.word	0x08023624

08018ab4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018ab4:	b590      	push	{r4, r7, lr}
 8018ab6:	b087      	sub	sp, #28
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018abc:	2300      	movs	r3, #0
 8018abe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <tcp_send_empty_ack+0x24>
 8018aca:	4b28      	ldr	r3, [pc, #160]	; (8018b6c <tcp_send_empty_ack+0xb8>)
 8018acc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018ad0:	4927      	ldr	r1, [pc, #156]	; (8018b70 <tcp_send_empty_ack+0xbc>)
 8018ad2:	4828      	ldr	r0, [pc, #160]	; (8018b74 <tcp_send_empty_ack+0xc0>)
 8018ad4:	f006 f9a6 	bl	801ee24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ad8:	7dfb      	ldrb	r3, [r7, #23]
 8018ada:	009b      	lsls	r3, r3, #2
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	f003 0304 	and.w	r3, r3, #4
 8018ae2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018ae4:	7d7b      	ldrb	r3, [r7, #21]
 8018ae6:	b29c      	uxth	r4, r3
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018aec:	4618      	mov	r0, r3
 8018aee:	f7f8 f9e6 	bl	8010ebe <lwip_htonl>
 8018af2:	4603      	mov	r3, r0
 8018af4:	2200      	movs	r2, #0
 8018af6:	4621      	mov	r1, r4
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f7ff fec3 	bl	8018884 <tcp_output_alloc_header>
 8018afe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d109      	bne.n	8018b1a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	8b5b      	ldrh	r3, [r3, #26]
 8018b0a:	f043 0303 	orr.w	r3, r3, #3
 8018b0e:	b29a      	uxth	r2, r3
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018b14:	f06f 0301 	mvn.w	r3, #1
 8018b18:	e023      	b.n	8018b62 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018b1a:	7dbb      	ldrb	r3, [r7, #22]
 8018b1c:	7dfa      	ldrb	r2, [r7, #23]
 8018b1e:	6939      	ldr	r1, [r7, #16]
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7ff feed 	bl	8018900 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b26:	687a      	ldr	r2, [r7, #4]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	3304      	adds	r3, #4
 8018b2c:	6939      	ldr	r1, [r7, #16]
 8018b2e:	6878      	ldr	r0, [r7, #4]
 8018b30:	f7ff ff24 	bl	801897c <tcp_output_control_segment>
 8018b34:	4603      	mov	r3, r0
 8018b36:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d007      	beq.n	8018b50 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	8b5b      	ldrh	r3, [r3, #26]
 8018b44:	f043 0303 	orr.w	r3, r3, #3
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	835a      	strh	r2, [r3, #26]
 8018b4e:	e006      	b.n	8018b5e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	8b5b      	ldrh	r3, [r3, #26]
 8018b54:	f023 0303 	bic.w	r3, r3, #3
 8018b58:	b29a      	uxth	r2, r3
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b62:	4618      	mov	r0, r3
 8018b64:	371c      	adds	r7, #28
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd90      	pop	{r4, r7, pc}
 8018b6a:	bf00      	nop
 8018b6c:	08022e84 	.word	0x08022e84
 8018b70:	08023640 	.word	0x08023640
 8018b74:	08022ed8 	.word	0x08022ed8

08018b78 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018b78:	b590      	push	{r4, r7, lr}
 8018b7a:	b087      	sub	sp, #28
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018b80:	2300      	movs	r3, #0
 8018b82:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d106      	bne.n	8018b98 <tcp_keepalive+0x20>
 8018b8a:	4b18      	ldr	r3, [pc, #96]	; (8018bec <tcp_keepalive+0x74>)
 8018b8c:	f640 0224 	movw	r2, #2084	; 0x824
 8018b90:	4917      	ldr	r1, [pc, #92]	; (8018bf0 <tcp_keepalive+0x78>)
 8018b92:	4818      	ldr	r0, [pc, #96]	; (8018bf4 <tcp_keepalive+0x7c>)
 8018b94:	f006 f946 	bl	801ee24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018b98:	7dfb      	ldrb	r3, [r7, #23]
 8018b9a:	b29c      	uxth	r4, r3
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ba0:	3b01      	subs	r3, #1
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7f8 f98b 	bl	8010ebe <lwip_htonl>
 8018ba8:	4603      	mov	r3, r0
 8018baa:	2200      	movs	r2, #0
 8018bac:	4621      	mov	r1, r4
 8018bae:	6878      	ldr	r0, [r7, #4]
 8018bb0:	f7ff fe68 	bl	8018884 <tcp_output_alloc_header>
 8018bb4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018bb6:	693b      	ldr	r3, [r7, #16]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d102      	bne.n	8018bc2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018bc0:	e010      	b.n	8018be4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018bc2:	7dfb      	ldrb	r3, [r7, #23]
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	6939      	ldr	r1, [r7, #16]
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f7ff fe99 	bl	8018900 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018bce:	687a      	ldr	r2, [r7, #4]
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	3304      	adds	r3, #4
 8018bd4:	6939      	ldr	r1, [r7, #16]
 8018bd6:	6878      	ldr	r0, [r7, #4]
 8018bd8:	f7ff fed0 	bl	801897c <tcp_output_control_segment>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	371c      	adds	r7, #28
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd90      	pop	{r4, r7, pc}
 8018bec:	08022e84 	.word	0x08022e84
 8018bf0:	08023660 	.word	0x08023660
 8018bf4:	08022ed8 	.word	0x08022ed8

08018bf8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018bf8:	b590      	push	{r4, r7, lr}
 8018bfa:	b08b      	sub	sp, #44	; 0x2c
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018c00:	2300      	movs	r3, #0
 8018c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d106      	bne.n	8018c1a <tcp_zero_window_probe+0x22>
 8018c0c:	4b4c      	ldr	r3, [pc, #304]	; (8018d40 <tcp_zero_window_probe+0x148>)
 8018c0e:	f640 024f 	movw	r2, #2127	; 0x84f
 8018c12:	494c      	ldr	r1, [pc, #304]	; (8018d44 <tcp_zero_window_probe+0x14c>)
 8018c14:	484c      	ldr	r0, [pc, #304]	; (8018d48 <tcp_zero_window_probe+0x150>)
 8018c16:	f006 f905 	bl	801ee24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c1e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018c20:	6a3b      	ldr	r3, [r7, #32]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d101      	bne.n	8018c2a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018c26:	2300      	movs	r3, #0
 8018c28:	e086      	b.n	8018d38 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018c30:	2bff      	cmp	r3, #255	; 0xff
 8018c32:	d007      	beq.n	8018c44 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018c3a:	3301      	adds	r3, #1
 8018c3c:	b2da      	uxtb	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018c44:	6a3b      	ldr	r3, [r7, #32]
 8018c46:	68db      	ldr	r3, [r3, #12]
 8018c48:	899b      	ldrh	r3, [r3, #12]
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f7f8 f921 	bl	8010e94 <lwip_htons>
 8018c52:	4603      	mov	r3, r0
 8018c54:	b2db      	uxtb	r3, r3
 8018c56:	f003 0301 	and.w	r3, r3, #1
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d005      	beq.n	8018c6a <tcp_zero_window_probe+0x72>
 8018c5e:	6a3b      	ldr	r3, [r7, #32]
 8018c60:	891b      	ldrh	r3, [r3, #8]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d101      	bne.n	8018c6a <tcp_zero_window_probe+0x72>
 8018c66:	2301      	movs	r3, #1
 8018c68:	e000      	b.n	8018c6c <tcp_zero_window_probe+0x74>
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018c6e:	7ffb      	ldrb	r3, [r7, #31]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	bf0c      	ite	eq
 8018c74:	2301      	moveq	r3, #1
 8018c76:	2300      	movne	r3, #0
 8018c78:	b2db      	uxtb	r3, r3
 8018c7a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c80:	b299      	uxth	r1, r3
 8018c82:	6a3b      	ldr	r3, [r7, #32]
 8018c84:	68db      	ldr	r3, [r3, #12]
 8018c86:	685b      	ldr	r3, [r3, #4]
 8018c88:	8bba      	ldrh	r2, [r7, #28]
 8018c8a:	6878      	ldr	r0, [r7, #4]
 8018c8c:	f7ff fdfa 	bl	8018884 <tcp_output_alloc_header>
 8018c90:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018c92:	69bb      	ldr	r3, [r7, #24]
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d102      	bne.n	8018c9e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c9c:	e04c      	b.n	8018d38 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018c9e:	69bb      	ldr	r3, [r7, #24]
 8018ca0:	685b      	ldr	r3, [r3, #4]
 8018ca2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018ca4:	7ffb      	ldrb	r3, [r7, #31]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d011      	beq.n	8018cce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018caa:	697b      	ldr	r3, [r7, #20]
 8018cac:	899b      	ldrh	r3, [r3, #12]
 8018cae:	b29b      	uxth	r3, r3
 8018cb0:	b21b      	sxth	r3, r3
 8018cb2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018cb6:	b21c      	sxth	r4, r3
 8018cb8:	2011      	movs	r0, #17
 8018cba:	f7f8 f8eb 	bl	8010e94 <lwip_htons>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	b21b      	sxth	r3, r3
 8018cc2:	4323      	orrs	r3, r4
 8018cc4:	b21b      	sxth	r3, r3
 8018cc6:	b29a      	uxth	r2, r3
 8018cc8:	697b      	ldr	r3, [r7, #20]
 8018cca:	819a      	strh	r2, [r3, #12]
 8018ccc:	e010      	b.n	8018cf0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018cce:	69bb      	ldr	r3, [r7, #24]
 8018cd0:	685b      	ldr	r3, [r3, #4]
 8018cd2:	3314      	adds	r3, #20
 8018cd4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018cd6:	6a3b      	ldr	r3, [r7, #32]
 8018cd8:	6858      	ldr	r0, [r3, #4]
 8018cda:	6a3b      	ldr	r3, [r7, #32]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	891a      	ldrh	r2, [r3, #8]
 8018ce0:	6a3b      	ldr	r3, [r7, #32]
 8018ce2:	891b      	ldrh	r3, [r3, #8]
 8018ce4:	1ad3      	subs	r3, r2, r3
 8018ce6:	b29b      	uxth	r3, r3
 8018ce8:	2201      	movs	r2, #1
 8018cea:	6939      	ldr	r1, [r7, #16]
 8018cec:	f7f9 ff0e 	bl	8012b0c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018cf0:	6a3b      	ldr	r3, [r7, #32]
 8018cf2:	68db      	ldr	r3, [r3, #12]
 8018cf4:	685b      	ldr	r3, [r3, #4]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7f8 f8e1 	bl	8010ebe <lwip_htonl>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	3301      	adds	r3, #1
 8018d00:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	1ad3      	subs	r3, r2, r3
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	da02      	bge.n	8018d14 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	68fa      	ldr	r2, [r7, #12]
 8018d12:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018d14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d18:	2200      	movs	r2, #0
 8018d1a:	69b9      	ldr	r1, [r7, #24]
 8018d1c:	6878      	ldr	r0, [r7, #4]
 8018d1e:	f7ff fdef 	bl	8018900 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	3304      	adds	r3, #4
 8018d28:	69b9      	ldr	r1, [r7, #24]
 8018d2a:	6878      	ldr	r0, [r7, #4]
 8018d2c:	f7ff fe26 	bl	801897c <tcp_output_control_segment>
 8018d30:	4603      	mov	r3, r0
 8018d32:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018d34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018d38:	4618      	mov	r0, r3
 8018d3a:	372c      	adds	r7, #44	; 0x2c
 8018d3c:	46bd      	mov	sp, r7
 8018d3e:	bd90      	pop	{r4, r7, pc}
 8018d40:	08022e84 	.word	0x08022e84
 8018d44:	0802367c 	.word	0x0802367c
 8018d48:	08022ed8 	.word	0x08022ed8

08018d4c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018d54:	f7f9 ffc8 	bl	8012ce8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018d58:	4b0a      	ldr	r3, [pc, #40]	; (8018d84 <tcpip_tcp_timer+0x38>)
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d103      	bne.n	8018d68 <tcpip_tcp_timer+0x1c>
 8018d60:	4b09      	ldr	r3, [pc, #36]	; (8018d88 <tcpip_tcp_timer+0x3c>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d005      	beq.n	8018d74 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018d68:	2200      	movs	r2, #0
 8018d6a:	4908      	ldr	r1, [pc, #32]	; (8018d8c <tcpip_tcp_timer+0x40>)
 8018d6c:	20fa      	movs	r0, #250	; 0xfa
 8018d6e:	f000 f8f3 	bl	8018f58 <sys_timeout>
 8018d72:	e003      	b.n	8018d7c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018d74:	4b06      	ldr	r3, [pc, #24]	; (8018d90 <tcpip_tcp_timer+0x44>)
 8018d76:	2200      	movs	r2, #0
 8018d78:	601a      	str	r2, [r3, #0]
  }
}
 8018d7a:	bf00      	nop
 8018d7c:	bf00      	nop
 8018d7e:	3708      	adds	r7, #8
 8018d80:	46bd      	mov	sp, r7
 8018d82:	bd80      	pop	{r7, pc}
 8018d84:	2000c8a4 	.word	0x2000c8a4
 8018d88:	2000c8a8 	.word	0x2000c8a8
 8018d8c:	08018d4d 	.word	0x08018d4d
 8018d90:	2000c8f0 	.word	0x2000c8f0

08018d94 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018d98:	4b0a      	ldr	r3, [pc, #40]	; (8018dc4 <tcp_timer_needed+0x30>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d10f      	bne.n	8018dc0 <tcp_timer_needed+0x2c>
 8018da0:	4b09      	ldr	r3, [pc, #36]	; (8018dc8 <tcp_timer_needed+0x34>)
 8018da2:	681b      	ldr	r3, [r3, #0]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d103      	bne.n	8018db0 <tcp_timer_needed+0x1c>
 8018da8:	4b08      	ldr	r3, [pc, #32]	; (8018dcc <tcp_timer_needed+0x38>)
 8018daa:	681b      	ldr	r3, [r3, #0]
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d007      	beq.n	8018dc0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018db0:	4b04      	ldr	r3, [pc, #16]	; (8018dc4 <tcp_timer_needed+0x30>)
 8018db2:	2201      	movs	r2, #1
 8018db4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018db6:	2200      	movs	r2, #0
 8018db8:	4905      	ldr	r1, [pc, #20]	; (8018dd0 <tcp_timer_needed+0x3c>)
 8018dba:	20fa      	movs	r0, #250	; 0xfa
 8018dbc:	f000 f8cc 	bl	8018f58 <sys_timeout>
  }
}
 8018dc0:	bf00      	nop
 8018dc2:	bd80      	pop	{r7, pc}
 8018dc4:	2000c8f0 	.word	0x2000c8f0
 8018dc8:	2000c8a4 	.word	0x2000c8a4
 8018dcc:	2000c8a8 	.word	0x2000c8a8
 8018dd0:	08018d4d 	.word	0x08018d4d

08018dd4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b086      	sub	sp, #24
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	60f8      	str	r0, [r7, #12]
 8018ddc:	60b9      	str	r1, [r7, #8]
 8018dde:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018de0:	200a      	movs	r0, #10
 8018de2:	f7f8 fd2f 	bl	8011844 <memp_malloc>
 8018de6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018de8:	693b      	ldr	r3, [r7, #16]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d109      	bne.n	8018e02 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018dee:	693b      	ldr	r3, [r7, #16]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d151      	bne.n	8018e98 <sys_timeout_abs+0xc4>
 8018df4:	4b2a      	ldr	r3, [pc, #168]	; (8018ea0 <sys_timeout_abs+0xcc>)
 8018df6:	22be      	movs	r2, #190	; 0xbe
 8018df8:	492a      	ldr	r1, [pc, #168]	; (8018ea4 <sys_timeout_abs+0xd0>)
 8018dfa:	482b      	ldr	r0, [pc, #172]	; (8018ea8 <sys_timeout_abs+0xd4>)
 8018dfc:	f006 f812 	bl	801ee24 <iprintf>
    return;
 8018e00:	e04a      	b.n	8018e98 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018e02:	693b      	ldr	r3, [r7, #16]
 8018e04:	2200      	movs	r2, #0
 8018e06:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018e08:	693b      	ldr	r3, [r7, #16]
 8018e0a:	68ba      	ldr	r2, [r7, #8]
 8018e0c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	687a      	ldr	r2, [r7, #4]
 8018e12:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018e14:	693b      	ldr	r3, [r7, #16]
 8018e16:	68fa      	ldr	r2, [r7, #12]
 8018e18:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018e1a:	4b24      	ldr	r3, [pc, #144]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d103      	bne.n	8018e2a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018e22:	4a22      	ldr	r2, [pc, #136]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e24:	693b      	ldr	r3, [r7, #16]
 8018e26:	6013      	str	r3, [r2, #0]
    return;
 8018e28:	e037      	b.n	8018e9a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	685a      	ldr	r2, [r3, #4]
 8018e2e:	4b1f      	ldr	r3, [pc, #124]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	0fdb      	lsrs	r3, r3, #31
 8018e38:	f003 0301 	and.w	r3, r3, #1
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d007      	beq.n	8018e52 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018e42:	4b1a      	ldr	r3, [pc, #104]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	693b      	ldr	r3, [r7, #16]
 8018e48:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018e4a:	4a18      	ldr	r2, [pc, #96]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	6013      	str	r3, [r2, #0]
 8018e50:	e023      	b.n	8018e9a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018e52:	4b16      	ldr	r3, [pc, #88]	; (8018eac <sys_timeout_abs+0xd8>)
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	617b      	str	r3, [r7, #20]
 8018e58:	e01a      	b.n	8018e90 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d00b      	beq.n	8018e7a <sys_timeout_abs+0xa6>
 8018e62:	693b      	ldr	r3, [r7, #16]
 8018e64:	685a      	ldr	r2, [r3, #4]
 8018e66:	697b      	ldr	r3, [r7, #20]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	685b      	ldr	r3, [r3, #4]
 8018e6c:	1ad3      	subs	r3, r2, r3
 8018e6e:	0fdb      	lsrs	r3, r3, #31
 8018e70:	f003 0301 	and.w	r3, r3, #1
 8018e74:	b2db      	uxtb	r3, r3
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d007      	beq.n	8018e8a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	681a      	ldr	r2, [r3, #0]
 8018e7e:	693b      	ldr	r3, [r7, #16]
 8018e80:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	693a      	ldr	r2, [r7, #16]
 8018e86:	601a      	str	r2, [r3, #0]
        break;
 8018e88:	e007      	b.n	8018e9a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018e8a:	697b      	ldr	r3, [r7, #20]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	617b      	str	r3, [r7, #20]
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d1e1      	bne.n	8018e5a <sys_timeout_abs+0x86>
 8018e96:	e000      	b.n	8018e9a <sys_timeout_abs+0xc6>
    return;
 8018e98:	bf00      	nop
      }
    }
  }
}
 8018e9a:	3718      	adds	r7, #24
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	080236a0 	.word	0x080236a0
 8018ea4:	080236d4 	.word	0x080236d4
 8018ea8:	08023714 	.word	0x08023714
 8018eac:	2000c8e8 	.word	0x2000c8e8

08018eb0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018eb0:	b580      	push	{r7, lr}
 8018eb2:	b086      	sub	sp, #24
 8018eb4:	af00      	add	r7, sp, #0
 8018eb6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018ebc:	697b      	ldr	r3, [r7, #20]
 8018ebe:	685b      	ldr	r3, [r3, #4]
 8018ec0:	4798      	blx	r3

  now = sys_now();
 8018ec2:	f7ec fe03 	bl	8005acc <sys_now>
 8018ec6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	681a      	ldr	r2, [r3, #0]
 8018ecc:	4b0f      	ldr	r3, [pc, #60]	; (8018f0c <lwip_cyclic_timer+0x5c>)
 8018ece:	681b      	ldr	r3, [r3, #0]
 8018ed0:	4413      	add	r3, r2
 8018ed2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018ed4:	68fa      	ldr	r2, [r7, #12]
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	1ad3      	subs	r3, r2, r3
 8018eda:	0fdb      	lsrs	r3, r3, #31
 8018edc:	f003 0301 	and.w	r3, r3, #1
 8018ee0:	b2db      	uxtb	r3, r3
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d009      	beq.n	8018efa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	681a      	ldr	r2, [r3, #0]
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	4413      	add	r3, r2
 8018eee:	687a      	ldr	r2, [r7, #4]
 8018ef0:	4907      	ldr	r1, [pc, #28]	; (8018f10 <lwip_cyclic_timer+0x60>)
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7ff ff6e 	bl	8018dd4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018ef8:	e004      	b.n	8018f04 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018efa:	687a      	ldr	r2, [r7, #4]
 8018efc:	4904      	ldr	r1, [pc, #16]	; (8018f10 <lwip_cyclic_timer+0x60>)
 8018efe:	68f8      	ldr	r0, [r7, #12]
 8018f00:	f7ff ff68 	bl	8018dd4 <sys_timeout_abs>
}
 8018f04:	bf00      	nop
 8018f06:	3718      	adds	r7, #24
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bd80      	pop	{r7, pc}
 8018f0c:	2000c8ec 	.word	0x2000c8ec
 8018f10:	08018eb1 	.word	0x08018eb1

08018f14 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018f14:	b580      	push	{r7, lr}
 8018f16:	b082      	sub	sp, #8
 8018f18:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018f1a:	2301      	movs	r3, #1
 8018f1c:	607b      	str	r3, [r7, #4]
 8018f1e:	e00e      	b.n	8018f3e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018f20:	4a0b      	ldr	r2, [pc, #44]	; (8018f50 <sys_timeouts_init+0x3c>)
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	00db      	lsls	r3, r3, #3
 8018f2c:	4a08      	ldr	r2, [pc, #32]	; (8018f50 <sys_timeouts_init+0x3c>)
 8018f2e:	4413      	add	r3, r2
 8018f30:	461a      	mov	r2, r3
 8018f32:	4908      	ldr	r1, [pc, #32]	; (8018f54 <sys_timeouts_init+0x40>)
 8018f34:	f000 f810 	bl	8018f58 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	3301      	adds	r3, #1
 8018f3c:	607b      	str	r3, [r7, #4]
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	2b04      	cmp	r3, #4
 8018f42:	d9ed      	bls.n	8018f20 <sys_timeouts_init+0xc>
  }
}
 8018f44:	bf00      	nop
 8018f46:	bf00      	nop
 8018f48:	3708      	adds	r7, #8
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	0802475c 	.word	0x0802475c
 8018f54:	08018eb1 	.word	0x08018eb1

08018f58 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b086      	sub	sp, #24
 8018f5c:	af00      	add	r7, sp, #0
 8018f5e:	60f8      	str	r0, [r7, #12]
 8018f60:	60b9      	str	r1, [r7, #8]
 8018f62:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018f6a:	d306      	bcc.n	8018f7a <sys_timeout+0x22>
 8018f6c:	4b0a      	ldr	r3, [pc, #40]	; (8018f98 <sys_timeout+0x40>)
 8018f6e:	f240 1229 	movw	r2, #297	; 0x129
 8018f72:	490a      	ldr	r1, [pc, #40]	; (8018f9c <sys_timeout+0x44>)
 8018f74:	480a      	ldr	r0, [pc, #40]	; (8018fa0 <sys_timeout+0x48>)
 8018f76:	f005 ff55 	bl	801ee24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018f7a:	f7ec fda7 	bl	8005acc <sys_now>
 8018f7e:	4602      	mov	r2, r0
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	4413      	add	r3, r2
 8018f84:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018f86:	687a      	ldr	r2, [r7, #4]
 8018f88:	68b9      	ldr	r1, [r7, #8]
 8018f8a:	6978      	ldr	r0, [r7, #20]
 8018f8c:	f7ff ff22 	bl	8018dd4 <sys_timeout_abs>
#endif
}
 8018f90:	bf00      	nop
 8018f92:	3718      	adds	r7, #24
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	080236a0 	.word	0x080236a0
 8018f9c:	0802373c 	.word	0x0802373c
 8018fa0:	08023714 	.word	0x08023714

08018fa4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b084      	sub	sp, #16
 8018fa8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018faa:	f7ec fd8f 	bl	8005acc <sys_now>
 8018fae:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018fb0:	4b17      	ldr	r3, [pc, #92]	; (8019010 <sys_check_timeouts+0x6c>)
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d022      	beq.n	8019002 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	68fa      	ldr	r2, [r7, #12]
 8018fc2:	1ad3      	subs	r3, r2, r3
 8018fc4:	0fdb      	lsrs	r3, r3, #31
 8018fc6:	f003 0301 	and.w	r3, r3, #1
 8018fca:	b2db      	uxtb	r3, r3
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d11a      	bne.n	8019006 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018fd0:	68bb      	ldr	r3, [r7, #8]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	4a0e      	ldr	r2, [pc, #56]	; (8019010 <sys_check_timeouts+0x6c>)
 8018fd6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	689b      	ldr	r3, [r3, #8]
 8018fdc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	68db      	ldr	r3, [r3, #12]
 8018fe2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018fe4:	68bb      	ldr	r3, [r7, #8]
 8018fe6:	685b      	ldr	r3, [r3, #4]
 8018fe8:	4a0a      	ldr	r2, [pc, #40]	; (8019014 <sys_check_timeouts+0x70>)
 8018fea:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018fec:	68b9      	ldr	r1, [r7, #8]
 8018fee:	200a      	movs	r0, #10
 8018ff0:	f7f8 fc9e 	bl	8011930 <memp_free>
    if (handler != NULL) {
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d0da      	beq.n	8018fb0 <sys_check_timeouts+0xc>
      handler(arg);
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	6838      	ldr	r0, [r7, #0]
 8018ffe:	4798      	blx	r3
  do {
 8019000:	e7d6      	b.n	8018fb0 <sys_check_timeouts+0xc>
      return;
 8019002:	bf00      	nop
 8019004:	e000      	b.n	8019008 <sys_check_timeouts+0x64>
      return;
 8019006:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019008:	3710      	adds	r7, #16
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	2000c8e8 	.word	0x2000c8e8
 8019014:	2000c8ec 	.word	0x2000c8ec

08019018 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801901e:	4b16      	ldr	r3, [pc, #88]	; (8019078 <sys_timeouts_sleeptime+0x60>)
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d102      	bne.n	801902c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801902a:	e020      	b.n	801906e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801902c:	f7ec fd4e 	bl	8005acc <sys_now>
 8019030:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019032:	4b11      	ldr	r3, [pc, #68]	; (8019078 <sys_timeouts_sleeptime+0x60>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	685a      	ldr	r2, [r3, #4]
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	1ad3      	subs	r3, r2, r3
 801903c:	0fdb      	lsrs	r3, r3, #31
 801903e:	f003 0301 	and.w	r3, r3, #1
 8019042:	b2db      	uxtb	r3, r3
 8019044:	2b00      	cmp	r3, #0
 8019046:	d001      	beq.n	801904c <sys_timeouts_sleeptime+0x34>
    return 0;
 8019048:	2300      	movs	r3, #0
 801904a:	e010      	b.n	801906e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801904c:	4b0a      	ldr	r3, [pc, #40]	; (8019078 <sys_timeouts_sleeptime+0x60>)
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	685a      	ldr	r2, [r3, #4]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	1ad3      	subs	r3, r2, r3
 8019056:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	2b00      	cmp	r3, #0
 801905c:	da06      	bge.n	801906c <sys_timeouts_sleeptime+0x54>
 801905e:	4b07      	ldr	r3, [pc, #28]	; (801907c <sys_timeouts_sleeptime+0x64>)
 8019060:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019064:	4906      	ldr	r1, [pc, #24]	; (8019080 <sys_timeouts_sleeptime+0x68>)
 8019066:	4807      	ldr	r0, [pc, #28]	; (8019084 <sys_timeouts_sleeptime+0x6c>)
 8019068:	f005 fedc 	bl	801ee24 <iprintf>
    return ret;
 801906c:	683b      	ldr	r3, [r7, #0]
  }
}
 801906e:	4618      	mov	r0, r3
 8019070:	3708      	adds	r7, #8
 8019072:	46bd      	mov	sp, r7
 8019074:	bd80      	pop	{r7, pc}
 8019076:	bf00      	nop
 8019078:	2000c8e8 	.word	0x2000c8e8
 801907c:	080236a0 	.word	0x080236a0
 8019080:	08023774 	.word	0x08023774
 8019084:	08023714 	.word	0x08023714

08019088 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801908c:	f005 fd2c 	bl	801eae8 <rand>
 8019090:	4603      	mov	r3, r0
 8019092:	b29b      	uxth	r3, r3
 8019094:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019098:	b29b      	uxth	r3, r3
 801909a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801909e:	b29a      	uxth	r2, r3
 80190a0:	4b01      	ldr	r3, [pc, #4]	; (80190a8 <udp_init+0x20>)
 80190a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80190a4:	bf00      	nop
 80190a6:	bd80      	pop	{r7, pc}
 80190a8:	2000002c 	.word	0x2000002c

080190ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80190ac:	b480      	push	{r7}
 80190ae:	b083      	sub	sp, #12
 80190b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80190b2:	2300      	movs	r3, #0
 80190b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80190b6:	4b17      	ldr	r3, [pc, #92]	; (8019114 <udp_new_port+0x68>)
 80190b8:	881b      	ldrh	r3, [r3, #0]
 80190ba:	1c5a      	adds	r2, r3, #1
 80190bc:	b291      	uxth	r1, r2
 80190be:	4a15      	ldr	r2, [pc, #84]	; (8019114 <udp_new_port+0x68>)
 80190c0:	8011      	strh	r1, [r2, #0]
 80190c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80190c6:	4293      	cmp	r3, r2
 80190c8:	d103      	bne.n	80190d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80190ca:	4b12      	ldr	r3, [pc, #72]	; (8019114 <udp_new_port+0x68>)
 80190cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80190d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80190d2:	4b11      	ldr	r3, [pc, #68]	; (8019118 <udp_new_port+0x6c>)
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	603b      	str	r3, [r7, #0]
 80190d8:	e011      	b.n	80190fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80190da:	683b      	ldr	r3, [r7, #0]
 80190dc:	8a5a      	ldrh	r2, [r3, #18]
 80190de:	4b0d      	ldr	r3, [pc, #52]	; (8019114 <udp_new_port+0x68>)
 80190e0:	881b      	ldrh	r3, [r3, #0]
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d108      	bne.n	80190f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80190e6:	88fb      	ldrh	r3, [r7, #6]
 80190e8:	3301      	adds	r3, #1
 80190ea:	80fb      	strh	r3, [r7, #6]
 80190ec:	88fb      	ldrh	r3, [r7, #6]
 80190ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80190f2:	d3e0      	bcc.n	80190b6 <udp_new_port+0xa>
        return 0;
 80190f4:	2300      	movs	r3, #0
 80190f6:	e007      	b.n	8019108 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	68db      	ldr	r3, [r3, #12]
 80190fc:	603b      	str	r3, [r7, #0]
 80190fe:	683b      	ldr	r3, [r7, #0]
 8019100:	2b00      	cmp	r3, #0
 8019102:	d1ea      	bne.n	80190da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019104:	4b03      	ldr	r3, [pc, #12]	; (8019114 <udp_new_port+0x68>)
 8019106:	881b      	ldrh	r3, [r3, #0]
}
 8019108:	4618      	mov	r0, r3
 801910a:	370c      	adds	r7, #12
 801910c:	46bd      	mov	sp, r7
 801910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019112:	4770      	bx	lr
 8019114:	2000002c 	.word	0x2000002c
 8019118:	2000c8f4 	.word	0x2000c8f4

0801911c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b084      	sub	sp, #16
 8019120:	af00      	add	r7, sp, #0
 8019122:	60f8      	str	r0, [r7, #12]
 8019124:	60b9      	str	r1, [r7, #8]
 8019126:	4613      	mov	r3, r2
 8019128:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d105      	bne.n	801913c <udp_input_local_match+0x20>
 8019130:	4b27      	ldr	r3, [pc, #156]	; (80191d0 <udp_input_local_match+0xb4>)
 8019132:	2287      	movs	r2, #135	; 0x87
 8019134:	4927      	ldr	r1, [pc, #156]	; (80191d4 <udp_input_local_match+0xb8>)
 8019136:	4828      	ldr	r0, [pc, #160]	; (80191d8 <udp_input_local_match+0xbc>)
 8019138:	f005 fe74 	bl	801ee24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801913c:	68bb      	ldr	r3, [r7, #8]
 801913e:	2b00      	cmp	r3, #0
 8019140:	d105      	bne.n	801914e <udp_input_local_match+0x32>
 8019142:	4b23      	ldr	r3, [pc, #140]	; (80191d0 <udp_input_local_match+0xb4>)
 8019144:	2288      	movs	r2, #136	; 0x88
 8019146:	4925      	ldr	r1, [pc, #148]	; (80191dc <udp_input_local_match+0xc0>)
 8019148:	4823      	ldr	r0, [pc, #140]	; (80191d8 <udp_input_local_match+0xbc>)
 801914a:	f005 fe6b 	bl	801ee24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801914e:	68fb      	ldr	r3, [r7, #12]
 8019150:	7a1b      	ldrb	r3, [r3, #8]
 8019152:	2b00      	cmp	r3, #0
 8019154:	d00b      	beq.n	801916e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	7a1a      	ldrb	r2, [r3, #8]
 801915a:	4b21      	ldr	r3, [pc, #132]	; (80191e0 <udp_input_local_match+0xc4>)
 801915c:	685b      	ldr	r3, [r3, #4]
 801915e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019162:	3301      	adds	r3, #1
 8019164:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019166:	429a      	cmp	r2, r3
 8019168:	d001      	beq.n	801916e <udp_input_local_match+0x52>
    return 0;
 801916a:	2300      	movs	r3, #0
 801916c:	e02b      	b.n	80191c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801916e:	79fb      	ldrb	r3, [r7, #7]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d018      	beq.n	80191a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d013      	beq.n	80191a2 <udp_input_local_match+0x86>
 801917a:	68fb      	ldr	r3, [r7, #12]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	d00f      	beq.n	80191a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019182:	4b17      	ldr	r3, [pc, #92]	; (80191e0 <udp_input_local_match+0xc4>)
 8019184:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801918a:	d00a      	beq.n	80191a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	4b13      	ldr	r3, [pc, #76]	; (80191e0 <udp_input_local_match+0xc4>)
 8019192:	695b      	ldr	r3, [r3, #20]
 8019194:	405a      	eors	r2, r3
 8019196:	68bb      	ldr	r3, [r7, #8]
 8019198:	3308      	adds	r3, #8
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d110      	bne.n	80191c4 <udp_input_local_match+0xa8>
          return 1;
 80191a2:	2301      	movs	r3, #1
 80191a4:	e00f      	b.n	80191c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d009      	beq.n	80191c0 <udp_input_local_match+0xa4>
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d005      	beq.n	80191c0 <udp_input_local_match+0xa4>
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	681a      	ldr	r2, [r3, #0]
 80191b8:	4b09      	ldr	r3, [pc, #36]	; (80191e0 <udp_input_local_match+0xc4>)
 80191ba:	695b      	ldr	r3, [r3, #20]
 80191bc:	429a      	cmp	r2, r3
 80191be:	d101      	bne.n	80191c4 <udp_input_local_match+0xa8>
        return 1;
 80191c0:	2301      	movs	r3, #1
 80191c2:	e000      	b.n	80191c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80191c4:	2300      	movs	r3, #0
}
 80191c6:	4618      	mov	r0, r3
 80191c8:	3710      	adds	r7, #16
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	08023788 	.word	0x08023788
 80191d4:	080237b8 	.word	0x080237b8
 80191d8:	080237dc 	.word	0x080237dc
 80191dc:	08023804 	.word	0x08023804
 80191e0:	20009124 	.word	0x20009124

080191e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80191e4:	b590      	push	{r4, r7, lr}
 80191e6:	b08d      	sub	sp, #52	; 0x34
 80191e8:	af02      	add	r7, sp, #8
 80191ea:	6078      	str	r0, [r7, #4]
 80191ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80191ee:	2300      	movs	r3, #0
 80191f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d105      	bne.n	8019204 <udp_input+0x20>
 80191f8:	4b7c      	ldr	r3, [pc, #496]	; (80193ec <udp_input+0x208>)
 80191fa:	22cf      	movs	r2, #207	; 0xcf
 80191fc:	497c      	ldr	r1, [pc, #496]	; (80193f0 <udp_input+0x20c>)
 80191fe:	487d      	ldr	r0, [pc, #500]	; (80193f4 <udp_input+0x210>)
 8019200:	f005 fe10 	bl	801ee24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019204:	683b      	ldr	r3, [r7, #0]
 8019206:	2b00      	cmp	r3, #0
 8019208:	d105      	bne.n	8019216 <udp_input+0x32>
 801920a:	4b78      	ldr	r3, [pc, #480]	; (80193ec <udp_input+0x208>)
 801920c:	22d0      	movs	r2, #208	; 0xd0
 801920e:	497a      	ldr	r1, [pc, #488]	; (80193f8 <udp_input+0x214>)
 8019210:	4878      	ldr	r0, [pc, #480]	; (80193f4 <udp_input+0x210>)
 8019212:	f005 fe07 	bl	801ee24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	895b      	ldrh	r3, [r3, #10]
 801921a:	2b07      	cmp	r3, #7
 801921c:	d803      	bhi.n	8019226 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801921e:	6878      	ldr	r0, [r7, #4]
 8019220:	f7f9 fa6e 	bl	8012700 <pbuf_free>
    goto end;
 8019224:	e0de      	b.n	80193e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	685b      	ldr	r3, [r3, #4]
 801922a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801922c:	4b73      	ldr	r3, [pc, #460]	; (80193fc <udp_input+0x218>)
 801922e:	695b      	ldr	r3, [r3, #20]
 8019230:	4a72      	ldr	r2, [pc, #456]	; (80193fc <udp_input+0x218>)
 8019232:	6812      	ldr	r2, [r2, #0]
 8019234:	4611      	mov	r1, r2
 8019236:	4618      	mov	r0, r3
 8019238:	f003 fe2c 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801923c:	4603      	mov	r3, r0
 801923e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019240:	697b      	ldr	r3, [r7, #20]
 8019242:	881b      	ldrh	r3, [r3, #0]
 8019244:	b29b      	uxth	r3, r3
 8019246:	4618      	mov	r0, r3
 8019248:	f7f7 fe24 	bl	8010e94 <lwip_htons>
 801924c:	4603      	mov	r3, r0
 801924e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019250:	697b      	ldr	r3, [r7, #20]
 8019252:	885b      	ldrh	r3, [r3, #2]
 8019254:	b29b      	uxth	r3, r3
 8019256:	4618      	mov	r0, r3
 8019258:	f7f7 fe1c 	bl	8010e94 <lwip_htons>
 801925c:	4603      	mov	r3, r0
 801925e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019260:	2300      	movs	r3, #0
 8019262:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019264:	2300      	movs	r3, #0
 8019266:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019268:	2300      	movs	r3, #0
 801926a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801926c:	4b64      	ldr	r3, [pc, #400]	; (8019400 <udp_input+0x21c>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	627b      	str	r3, [r7, #36]	; 0x24
 8019272:	e054      	b.n	801931e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019276:	8a5b      	ldrh	r3, [r3, #18]
 8019278:	89fa      	ldrh	r2, [r7, #14]
 801927a:	429a      	cmp	r2, r3
 801927c:	d14a      	bne.n	8019314 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801927e:	7cfb      	ldrb	r3, [r7, #19]
 8019280:	461a      	mov	r2, r3
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019286:	f7ff ff49 	bl	801911c <udp_input_local_match>
 801928a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801928c:	2b00      	cmp	r3, #0
 801928e:	d041      	beq.n	8019314 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019292:	7c1b      	ldrb	r3, [r3, #16]
 8019294:	f003 0304 	and.w	r3, r3, #4
 8019298:	2b00      	cmp	r3, #0
 801929a:	d11d      	bne.n	80192d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801929c:	69fb      	ldr	r3, [r7, #28]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	d102      	bne.n	80192a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80192a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a4:	61fb      	str	r3, [r7, #28]
 80192a6:	e017      	b.n	80192d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80192a8:	7cfb      	ldrb	r3, [r7, #19]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d014      	beq.n	80192d8 <udp_input+0xf4>
 80192ae:	4b53      	ldr	r3, [pc, #332]	; (80193fc <udp_input+0x218>)
 80192b0:	695b      	ldr	r3, [r3, #20]
 80192b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80192b6:	d10f      	bne.n	80192d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	681a      	ldr	r2, [r3, #0]
 80192bc:	683b      	ldr	r3, [r7, #0]
 80192be:	3304      	adds	r3, #4
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	429a      	cmp	r2, r3
 80192c4:	d008      	beq.n	80192d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80192c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c8:	681a      	ldr	r2, [r3, #0]
 80192ca:	683b      	ldr	r3, [r7, #0]
 80192cc:	3304      	adds	r3, #4
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d101      	bne.n	80192d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80192d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80192d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192da:	8a9b      	ldrh	r3, [r3, #20]
 80192dc:	8a3a      	ldrh	r2, [r7, #16]
 80192de:	429a      	cmp	r2, r3
 80192e0:	d118      	bne.n	8019314 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80192e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d005      	beq.n	80192f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80192ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ec:	685a      	ldr	r2, [r3, #4]
 80192ee:	4b43      	ldr	r3, [pc, #268]	; (80193fc <udp_input+0x218>)
 80192f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80192f2:	429a      	cmp	r2, r3
 80192f4:	d10e      	bne.n	8019314 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80192f6:	6a3b      	ldr	r3, [r7, #32]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d014      	beq.n	8019326 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80192fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fe:	68da      	ldr	r2, [r3, #12]
 8019300:	6a3b      	ldr	r3, [r7, #32]
 8019302:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019304:	4b3e      	ldr	r3, [pc, #248]	; (8019400 <udp_input+0x21c>)
 8019306:	681a      	ldr	r2, [r3, #0]
 8019308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801930a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801930c:	4a3c      	ldr	r2, [pc, #240]	; (8019400 <udp_input+0x21c>)
 801930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019310:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019312:	e008      	b.n	8019326 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019316:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801931a:	68db      	ldr	r3, [r3, #12]
 801931c:	627b      	str	r3, [r7, #36]	; 0x24
 801931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019320:	2b00      	cmp	r3, #0
 8019322:	d1a7      	bne.n	8019274 <udp_input+0x90>
 8019324:	e000      	b.n	8019328 <udp_input+0x144>
        break;
 8019326:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801932a:	2b00      	cmp	r3, #0
 801932c:	d101      	bne.n	8019332 <udp_input+0x14e>
    pcb = uncon_pcb;
 801932e:	69fb      	ldr	r3, [r7, #28]
 8019330:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019334:	2b00      	cmp	r3, #0
 8019336:	d002      	beq.n	801933e <udp_input+0x15a>
    for_us = 1;
 8019338:	2301      	movs	r3, #1
 801933a:	76fb      	strb	r3, [r7, #27]
 801933c:	e00a      	b.n	8019354 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	3304      	adds	r3, #4
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	4b2d      	ldr	r3, [pc, #180]	; (80193fc <udp_input+0x218>)
 8019346:	695b      	ldr	r3, [r3, #20]
 8019348:	429a      	cmp	r2, r3
 801934a:	bf0c      	ite	eq
 801934c:	2301      	moveq	r3, #1
 801934e:	2300      	movne	r3, #0
 8019350:	b2db      	uxtb	r3, r3
 8019352:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019354:	7efb      	ldrb	r3, [r7, #27]
 8019356:	2b00      	cmp	r3, #0
 8019358:	d041      	beq.n	80193de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801935a:	2108      	movs	r1, #8
 801935c:	6878      	ldr	r0, [r7, #4]
 801935e:	f7f9 f949 	bl	80125f4 <pbuf_remove_header>
 8019362:	4603      	mov	r3, r0
 8019364:	2b00      	cmp	r3, #0
 8019366:	d00a      	beq.n	801937e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019368:	4b20      	ldr	r3, [pc, #128]	; (80193ec <udp_input+0x208>)
 801936a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801936e:	4925      	ldr	r1, [pc, #148]	; (8019404 <udp_input+0x220>)
 8019370:	4820      	ldr	r0, [pc, #128]	; (80193f4 <udp_input+0x210>)
 8019372:	f005 fd57 	bl	801ee24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019376:	6878      	ldr	r0, [r7, #4]
 8019378:	f7f9 f9c2 	bl	8012700 <pbuf_free>
      goto end;
 801937c:	e032      	b.n	80193e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801937e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019380:	2b00      	cmp	r3, #0
 8019382:	d012      	beq.n	80193aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019386:	699b      	ldr	r3, [r3, #24]
 8019388:	2b00      	cmp	r3, #0
 801938a:	d00a      	beq.n	80193a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801938e:	699c      	ldr	r4, [r3, #24]
 8019390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019392:	69d8      	ldr	r0, [r3, #28]
 8019394:	8a3b      	ldrh	r3, [r7, #16]
 8019396:	9300      	str	r3, [sp, #0]
 8019398:	4b1b      	ldr	r3, [pc, #108]	; (8019408 <udp_input+0x224>)
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801939e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80193a0:	e021      	b.n	80193e6 <udp_input+0x202>
        pbuf_free(p);
 80193a2:	6878      	ldr	r0, [r7, #4]
 80193a4:	f7f9 f9ac 	bl	8012700 <pbuf_free>
        goto end;
 80193a8:	e01c      	b.n	80193e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80193aa:	7cfb      	ldrb	r3, [r7, #19]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d112      	bne.n	80193d6 <udp_input+0x1f2>
 80193b0:	4b12      	ldr	r3, [pc, #72]	; (80193fc <udp_input+0x218>)
 80193b2:	695b      	ldr	r3, [r3, #20]
 80193b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80193b8:	2be0      	cmp	r3, #224	; 0xe0
 80193ba:	d00c      	beq.n	80193d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80193bc:	4b0f      	ldr	r3, [pc, #60]	; (80193fc <udp_input+0x218>)
 80193be:	899b      	ldrh	r3, [r3, #12]
 80193c0:	3308      	adds	r3, #8
 80193c2:	b29b      	uxth	r3, r3
 80193c4:	b21b      	sxth	r3, r3
 80193c6:	4619      	mov	r1, r3
 80193c8:	6878      	ldr	r0, [r7, #4]
 80193ca:	f7f9 f986 	bl	80126da <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80193ce:	2103      	movs	r1, #3
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	f003 fa21 	bl	801c818 <icmp_dest_unreach>
      pbuf_free(p);
 80193d6:	6878      	ldr	r0, [r7, #4]
 80193d8:	f7f9 f992 	bl	8012700 <pbuf_free>
  return;
 80193dc:	e003      	b.n	80193e6 <udp_input+0x202>
    pbuf_free(p);
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f7f9 f98e 	bl	8012700 <pbuf_free>
  return;
 80193e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80193e6:	372c      	adds	r7, #44	; 0x2c
 80193e8:	46bd      	mov	sp, r7
 80193ea:	bd90      	pop	{r4, r7, pc}
 80193ec:	08023788 	.word	0x08023788
 80193f0:	0802382c 	.word	0x0802382c
 80193f4:	080237dc 	.word	0x080237dc
 80193f8:	08023844 	.word	0x08023844
 80193fc:	20009124 	.word	0x20009124
 8019400:	2000c8f4 	.word	0x2000c8f4
 8019404:	08023860 	.word	0x08023860
 8019408:	20009134 	.word	0x20009134

0801940c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b088      	sub	sp, #32
 8019410:	af02      	add	r7, sp, #8
 8019412:	60f8      	str	r0, [r7, #12]
 8019414:	60b9      	str	r1, [r7, #8]
 8019416:	607a      	str	r2, [r7, #4]
 8019418:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	2b00      	cmp	r3, #0
 801941e:	d109      	bne.n	8019434 <udp_sendto_if+0x28>
 8019420:	4b2e      	ldr	r3, [pc, #184]	; (80194dc <udp_sendto_if+0xd0>)
 8019422:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019426:	492e      	ldr	r1, [pc, #184]	; (80194e0 <udp_sendto_if+0xd4>)
 8019428:	482e      	ldr	r0, [pc, #184]	; (80194e4 <udp_sendto_if+0xd8>)
 801942a:	f005 fcfb 	bl	801ee24 <iprintf>
 801942e:	f06f 030f 	mvn.w	r3, #15
 8019432:	e04f      	b.n	80194d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d109      	bne.n	801944e <udp_sendto_if+0x42>
 801943a:	4b28      	ldr	r3, [pc, #160]	; (80194dc <udp_sendto_if+0xd0>)
 801943c:	f240 2281 	movw	r2, #641	; 0x281
 8019440:	4929      	ldr	r1, [pc, #164]	; (80194e8 <udp_sendto_if+0xdc>)
 8019442:	4828      	ldr	r0, [pc, #160]	; (80194e4 <udp_sendto_if+0xd8>)
 8019444:	f005 fcee 	bl	801ee24 <iprintf>
 8019448:	f06f 030f 	mvn.w	r3, #15
 801944c:	e042      	b.n	80194d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	2b00      	cmp	r3, #0
 8019452:	d109      	bne.n	8019468 <udp_sendto_if+0x5c>
 8019454:	4b21      	ldr	r3, [pc, #132]	; (80194dc <udp_sendto_if+0xd0>)
 8019456:	f240 2282 	movw	r2, #642	; 0x282
 801945a:	4924      	ldr	r1, [pc, #144]	; (80194ec <udp_sendto_if+0xe0>)
 801945c:	4821      	ldr	r0, [pc, #132]	; (80194e4 <udp_sendto_if+0xd8>)
 801945e:	f005 fce1 	bl	801ee24 <iprintf>
 8019462:	f06f 030f 	mvn.w	r3, #15
 8019466:	e035      	b.n	80194d4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019468:	6a3b      	ldr	r3, [r7, #32]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d109      	bne.n	8019482 <udp_sendto_if+0x76>
 801946e:	4b1b      	ldr	r3, [pc, #108]	; (80194dc <udp_sendto_if+0xd0>)
 8019470:	f240 2283 	movw	r2, #643	; 0x283
 8019474:	491e      	ldr	r1, [pc, #120]	; (80194f0 <udp_sendto_if+0xe4>)
 8019476:	481b      	ldr	r0, [pc, #108]	; (80194e4 <udp_sendto_if+0xd8>)
 8019478:	f005 fcd4 	bl	801ee24 <iprintf>
 801947c:	f06f 030f 	mvn.w	r3, #15
 8019480:	e028      	b.n	80194d4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019482:	68fb      	ldr	r3, [r7, #12]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d009      	beq.n	801949c <udp_sendto_if+0x90>
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d005      	beq.n	801949c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019498:	2be0      	cmp	r3, #224	; 0xe0
 801949a:	d103      	bne.n	80194a4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801949c:	6a3b      	ldr	r3, [r7, #32]
 801949e:	3304      	adds	r3, #4
 80194a0:	617b      	str	r3, [r7, #20]
 80194a2:	e00b      	b.n	80194bc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	6a3b      	ldr	r3, [r7, #32]
 80194aa:	3304      	adds	r3, #4
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	429a      	cmp	r2, r3
 80194b0:	d002      	beq.n	80194b8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80194b2:	f06f 0303 	mvn.w	r3, #3
 80194b6:	e00d      	b.n	80194d4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80194bc:	887a      	ldrh	r2, [r7, #2]
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	9301      	str	r3, [sp, #4]
 80194c2:	6a3b      	ldr	r3, [r7, #32]
 80194c4:	9300      	str	r3, [sp, #0]
 80194c6:	4613      	mov	r3, r2
 80194c8:	687a      	ldr	r2, [r7, #4]
 80194ca:	68b9      	ldr	r1, [r7, #8]
 80194cc:	68f8      	ldr	r0, [r7, #12]
 80194ce:	f000 f811 	bl	80194f4 <udp_sendto_if_src>
 80194d2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80194d4:	4618      	mov	r0, r3
 80194d6:	3718      	adds	r7, #24
 80194d8:	46bd      	mov	sp, r7
 80194da:	bd80      	pop	{r7, pc}
 80194dc:	08023788 	.word	0x08023788
 80194e0:	080238fc 	.word	0x080238fc
 80194e4:	080237dc 	.word	0x080237dc
 80194e8:	08023918 	.word	0x08023918
 80194ec:	08023934 	.word	0x08023934
 80194f0:	08023954 	.word	0x08023954

080194f4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80194f4:	b580      	push	{r7, lr}
 80194f6:	b08c      	sub	sp, #48	; 0x30
 80194f8:	af04      	add	r7, sp, #16
 80194fa:	60f8      	str	r0, [r7, #12]
 80194fc:	60b9      	str	r1, [r7, #8]
 80194fe:	607a      	str	r2, [r7, #4]
 8019500:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	2b00      	cmp	r3, #0
 8019506:	d109      	bne.n	801951c <udp_sendto_if_src+0x28>
 8019508:	4b65      	ldr	r3, [pc, #404]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 801950a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801950e:	4965      	ldr	r1, [pc, #404]	; (80196a4 <udp_sendto_if_src+0x1b0>)
 8019510:	4865      	ldr	r0, [pc, #404]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 8019512:	f005 fc87 	bl	801ee24 <iprintf>
 8019516:	f06f 030f 	mvn.w	r3, #15
 801951a:	e0bc      	b.n	8019696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801951c:	68bb      	ldr	r3, [r7, #8]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d109      	bne.n	8019536 <udp_sendto_if_src+0x42>
 8019522:	4b5f      	ldr	r3, [pc, #380]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 8019524:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019528:	4960      	ldr	r1, [pc, #384]	; (80196ac <udp_sendto_if_src+0x1b8>)
 801952a:	485f      	ldr	r0, [pc, #380]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 801952c:	f005 fc7a 	bl	801ee24 <iprintf>
 8019530:	f06f 030f 	mvn.w	r3, #15
 8019534:	e0af      	b.n	8019696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	2b00      	cmp	r3, #0
 801953a:	d109      	bne.n	8019550 <udp_sendto_if_src+0x5c>
 801953c:	4b58      	ldr	r3, [pc, #352]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 801953e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019542:	495b      	ldr	r1, [pc, #364]	; (80196b0 <udp_sendto_if_src+0x1bc>)
 8019544:	4858      	ldr	r0, [pc, #352]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 8019546:	f005 fc6d 	bl	801ee24 <iprintf>
 801954a:	f06f 030f 	mvn.w	r3, #15
 801954e:	e0a2      	b.n	8019696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019552:	2b00      	cmp	r3, #0
 8019554:	d109      	bne.n	801956a <udp_sendto_if_src+0x76>
 8019556:	4b52      	ldr	r3, [pc, #328]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 8019558:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801955c:	4955      	ldr	r1, [pc, #340]	; (80196b4 <udp_sendto_if_src+0x1c0>)
 801955e:	4852      	ldr	r0, [pc, #328]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 8019560:	f005 fc60 	bl	801ee24 <iprintf>
 8019564:	f06f 030f 	mvn.w	r3, #15
 8019568:	e095      	b.n	8019696 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801956c:	2b00      	cmp	r3, #0
 801956e:	d109      	bne.n	8019584 <udp_sendto_if_src+0x90>
 8019570:	4b4b      	ldr	r3, [pc, #300]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 8019572:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019576:	4950      	ldr	r1, [pc, #320]	; (80196b8 <udp_sendto_if_src+0x1c4>)
 8019578:	484b      	ldr	r0, [pc, #300]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 801957a:	f005 fc53 	bl	801ee24 <iprintf>
 801957e:	f06f 030f 	mvn.w	r3, #15
 8019582:	e088      	b.n	8019696 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019584:	68fb      	ldr	r3, [r7, #12]
 8019586:	8a5b      	ldrh	r3, [r3, #18]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d10f      	bne.n	80195ac <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801958c:	68f9      	ldr	r1, [r7, #12]
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	8a5b      	ldrh	r3, [r3, #18]
 8019592:	461a      	mov	r2, r3
 8019594:	68f8      	ldr	r0, [r7, #12]
 8019596:	f000 f893 	bl	80196c0 <udp_bind>
 801959a:	4603      	mov	r3, r0
 801959c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801959e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d002      	beq.n	80195ac <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80195a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80195aa:	e074      	b.n	8019696 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	891b      	ldrh	r3, [r3, #8]
 80195b0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80195b4:	4293      	cmp	r3, r2
 80195b6:	d902      	bls.n	80195be <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80195b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80195bc:	e06b      	b.n	8019696 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80195be:	2108      	movs	r1, #8
 80195c0:	68b8      	ldr	r0, [r7, #8]
 80195c2:	f7f9 f807 	bl	80125d4 <pbuf_add_header>
 80195c6:	4603      	mov	r3, r0
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d015      	beq.n	80195f8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80195cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80195d0:	2108      	movs	r1, #8
 80195d2:	2022      	movs	r0, #34	; 0x22
 80195d4:	f7f8 fdb0 	bl	8012138 <pbuf_alloc>
 80195d8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80195da:	69fb      	ldr	r3, [r7, #28]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d102      	bne.n	80195e6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80195e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80195e4:	e057      	b.n	8019696 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80195e6:	68bb      	ldr	r3, [r7, #8]
 80195e8:	891b      	ldrh	r3, [r3, #8]
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d006      	beq.n	80195fc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80195ee:	68b9      	ldr	r1, [r7, #8]
 80195f0:	69f8      	ldr	r0, [r7, #28]
 80195f2:	f7f9 f9a9 	bl	8012948 <pbuf_chain>
 80195f6:	e001      	b.n	80195fc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80195fc:	69fb      	ldr	r3, [r7, #28]
 80195fe:	895b      	ldrh	r3, [r3, #10]
 8019600:	2b07      	cmp	r3, #7
 8019602:	d806      	bhi.n	8019612 <udp_sendto_if_src+0x11e>
 8019604:	4b26      	ldr	r3, [pc, #152]	; (80196a0 <udp_sendto_if_src+0x1ac>)
 8019606:	f240 320d 	movw	r2, #781	; 0x30d
 801960a:	492c      	ldr	r1, [pc, #176]	; (80196bc <udp_sendto_if_src+0x1c8>)
 801960c:	4826      	ldr	r0, [pc, #152]	; (80196a8 <udp_sendto_if_src+0x1b4>)
 801960e:	f005 fc09 	bl	801ee24 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019612:	69fb      	ldr	r3, [r7, #28]
 8019614:	685b      	ldr	r3, [r3, #4]
 8019616:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	8a5b      	ldrh	r3, [r3, #18]
 801961c:	4618      	mov	r0, r3
 801961e:	f7f7 fc39 	bl	8010e94 <lwip_htons>
 8019622:	4603      	mov	r3, r0
 8019624:	461a      	mov	r2, r3
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801962a:	887b      	ldrh	r3, [r7, #2]
 801962c:	4618      	mov	r0, r3
 801962e:	f7f7 fc31 	bl	8010e94 <lwip_htons>
 8019632:	4603      	mov	r3, r0
 8019634:	461a      	mov	r2, r3
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801963a:	697b      	ldr	r3, [r7, #20]
 801963c:	2200      	movs	r2, #0
 801963e:	719a      	strb	r2, [r3, #6]
 8019640:	2200      	movs	r2, #0
 8019642:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019644:	69fb      	ldr	r3, [r7, #28]
 8019646:	891b      	ldrh	r3, [r3, #8]
 8019648:	4618      	mov	r0, r3
 801964a:	f7f7 fc23 	bl	8010e94 <lwip_htons>
 801964e:	4603      	mov	r3, r0
 8019650:	461a      	mov	r2, r3
 8019652:	697b      	ldr	r3, [r7, #20]
 8019654:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019656:	2311      	movs	r3, #17
 8019658:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	7adb      	ldrb	r3, [r3, #11]
 801965e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019660:	68fb      	ldr	r3, [r7, #12]
 8019662:	7a9b      	ldrb	r3, [r3, #10]
 8019664:	7cb9      	ldrb	r1, [r7, #18]
 8019666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019668:	9202      	str	r2, [sp, #8]
 801966a:	7cfa      	ldrb	r2, [r7, #19]
 801966c:	9201      	str	r2, [sp, #4]
 801966e:	9300      	str	r3, [sp, #0]
 8019670:	460b      	mov	r3, r1
 8019672:	687a      	ldr	r2, [r7, #4]
 8019674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019676:	69f8      	ldr	r0, [r7, #28]
 8019678:	f003 fb5e 	bl	801cd38 <ip4_output_if_src>
 801967c:	4603      	mov	r3, r0
 801967e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019680:	69fa      	ldr	r2, [r7, #28]
 8019682:	68bb      	ldr	r3, [r7, #8]
 8019684:	429a      	cmp	r2, r3
 8019686:	d004      	beq.n	8019692 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019688:	69f8      	ldr	r0, [r7, #28]
 801968a:	f7f9 f839 	bl	8012700 <pbuf_free>
    q = NULL;
 801968e:	2300      	movs	r3, #0
 8019690:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019692:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019696:	4618      	mov	r0, r3
 8019698:	3720      	adds	r7, #32
 801969a:	46bd      	mov	sp, r7
 801969c:	bd80      	pop	{r7, pc}
 801969e:	bf00      	nop
 80196a0:	08023788 	.word	0x08023788
 80196a4:	08023974 	.word	0x08023974
 80196a8:	080237dc 	.word	0x080237dc
 80196ac:	08023994 	.word	0x08023994
 80196b0:	080239b4 	.word	0x080239b4
 80196b4:	080239d8 	.word	0x080239d8
 80196b8:	080239fc 	.word	0x080239fc
 80196bc:	08023a20 	.word	0x08023a20

080196c0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b086      	sub	sp, #24
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	60f8      	str	r0, [r7, #12]
 80196c8:	60b9      	str	r1, [r7, #8]
 80196ca:	4613      	mov	r3, r2
 80196cc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80196ce:	68bb      	ldr	r3, [r7, #8]
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d101      	bne.n	80196d8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80196d4:	4b39      	ldr	r3, [pc, #228]	; (80197bc <udp_bind+0xfc>)
 80196d6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	d109      	bne.n	80196f2 <udp_bind+0x32>
 80196de:	4b38      	ldr	r3, [pc, #224]	; (80197c0 <udp_bind+0x100>)
 80196e0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80196e4:	4937      	ldr	r1, [pc, #220]	; (80197c4 <udp_bind+0x104>)
 80196e6:	4838      	ldr	r0, [pc, #224]	; (80197c8 <udp_bind+0x108>)
 80196e8:	f005 fb9c 	bl	801ee24 <iprintf>
 80196ec:	f06f 030f 	mvn.w	r3, #15
 80196f0:	e060      	b.n	80197b4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80196f2:	2300      	movs	r3, #0
 80196f4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80196f6:	4b35      	ldr	r3, [pc, #212]	; (80197cc <udp_bind+0x10c>)
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	617b      	str	r3, [r7, #20]
 80196fc:	e009      	b.n	8019712 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80196fe:	68fa      	ldr	r2, [r7, #12]
 8019700:	697b      	ldr	r3, [r7, #20]
 8019702:	429a      	cmp	r2, r3
 8019704:	d102      	bne.n	801970c <udp_bind+0x4c>
      rebind = 1;
 8019706:	2301      	movs	r3, #1
 8019708:	74fb      	strb	r3, [r7, #19]
      break;
 801970a:	e005      	b.n	8019718 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	68db      	ldr	r3, [r3, #12]
 8019710:	617b      	str	r3, [r7, #20]
 8019712:	697b      	ldr	r3, [r7, #20]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d1f2      	bne.n	80196fe <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019718:	88fb      	ldrh	r3, [r7, #6]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d109      	bne.n	8019732 <udp_bind+0x72>
    port = udp_new_port();
 801971e:	f7ff fcc5 	bl	80190ac <udp_new_port>
 8019722:	4603      	mov	r3, r0
 8019724:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019726:	88fb      	ldrh	r3, [r7, #6]
 8019728:	2b00      	cmp	r3, #0
 801972a:	d12c      	bne.n	8019786 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801972c:	f06f 0307 	mvn.w	r3, #7
 8019730:	e040      	b.n	80197b4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019732:	4b26      	ldr	r3, [pc, #152]	; (80197cc <udp_bind+0x10c>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	617b      	str	r3, [r7, #20]
 8019738:	e022      	b.n	8019780 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801973a:	68fa      	ldr	r2, [r7, #12]
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	429a      	cmp	r2, r3
 8019740:	d01b      	beq.n	801977a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019742:	697b      	ldr	r3, [r7, #20]
 8019744:	8a5b      	ldrh	r3, [r3, #18]
 8019746:	88fa      	ldrh	r2, [r7, #6]
 8019748:	429a      	cmp	r2, r3
 801974a:	d116      	bne.n	801977a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	681a      	ldr	r2, [r3, #0]
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019754:	429a      	cmp	r2, r3
 8019756:	d00d      	beq.n	8019774 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019758:	68bb      	ldr	r3, [r7, #8]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d00a      	beq.n	8019774 <udp_bind+0xb4>
 801975e:	68bb      	ldr	r3, [r7, #8]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d006      	beq.n	8019774 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019766:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019768:	2b00      	cmp	r3, #0
 801976a:	d003      	beq.n	8019774 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801976c:	697b      	ldr	r3, [r7, #20]
 801976e:	681b      	ldr	r3, [r3, #0]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d102      	bne.n	801977a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019774:	f06f 0307 	mvn.w	r3, #7
 8019778:	e01c      	b.n	80197b4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	68db      	ldr	r3, [r3, #12]
 801977e:	617b      	str	r3, [r7, #20]
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d1d9      	bne.n	801973a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019786:	68bb      	ldr	r3, [r7, #8]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d002      	beq.n	8019792 <udp_bind+0xd2>
 801978c:	68bb      	ldr	r3, [r7, #8]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	e000      	b.n	8019794 <udp_bind+0xd4>
 8019792:	2300      	movs	r3, #0
 8019794:	68fa      	ldr	r2, [r7, #12]
 8019796:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	88fa      	ldrh	r2, [r7, #6]
 801979c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801979e:	7cfb      	ldrb	r3, [r7, #19]
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d106      	bne.n	80197b2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80197a4:	4b09      	ldr	r3, [pc, #36]	; (80197cc <udp_bind+0x10c>)
 80197a6:	681a      	ldr	r2, [r3, #0]
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80197ac:	4a07      	ldr	r2, [pc, #28]	; (80197cc <udp_bind+0x10c>)
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80197b2:	2300      	movs	r3, #0
}
 80197b4:	4618      	mov	r0, r3
 80197b6:	3718      	adds	r7, #24
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd80      	pop	{r7, pc}
 80197bc:	08024784 	.word	0x08024784
 80197c0:	08023788 	.word	0x08023788
 80197c4:	08023a50 	.word	0x08023a50
 80197c8:	080237dc 	.word	0x080237dc
 80197cc:	2000c8f4 	.word	0x2000c8f4

080197d0 <udp_bind_netif>:
 *
 * @see udp_disconnect()
 */
void
udp_bind_netif(struct udp_pcb *pcb, const struct netif *netif)
{
 80197d0:	b480      	push	{r7}
 80197d2:	b083      	sub	sp, #12
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
 80197d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif != NULL) {
 80197da:	683b      	ldr	r3, [r7, #0]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d007      	beq.n	80197f0 <udp_bind_netif+0x20>
    pcb->netif_idx = netif_get_index(netif);
 80197e0:	683b      	ldr	r3, [r7, #0]
 80197e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80197e6:	3301      	adds	r3, #1
 80197e8:	b2da      	uxtb	r2, r3
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	721a      	strb	r2, [r3, #8]
  } else {
    pcb->netif_idx = NETIF_NO_INDEX;
  }
}
 80197ee:	e002      	b.n	80197f6 <udp_bind_netif+0x26>
    pcb->netif_idx = NETIF_NO_INDEX;
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	2200      	movs	r2, #0
 80197f4:	721a      	strb	r2, [r3, #8]
}
 80197f6:	bf00      	nop
 80197f8:	370c      	adds	r7, #12
 80197fa:	46bd      	mov	sp, r7
 80197fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019800:	4770      	bx	lr
	...

08019804 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019804:	b580      	push	{r7, lr}
 8019806:	b086      	sub	sp, #24
 8019808:	af00      	add	r7, sp, #0
 801980a:	60f8      	str	r0, [r7, #12]
 801980c:	60b9      	str	r1, [r7, #8]
 801980e:	4613      	mov	r3, r2
 8019810:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d109      	bne.n	801982c <udp_connect+0x28>
 8019818:	4b2c      	ldr	r3, [pc, #176]	; (80198cc <udp_connect+0xc8>)
 801981a:	f240 4235 	movw	r2, #1077	; 0x435
 801981e:	492c      	ldr	r1, [pc, #176]	; (80198d0 <udp_connect+0xcc>)
 8019820:	482c      	ldr	r0, [pc, #176]	; (80198d4 <udp_connect+0xd0>)
 8019822:	f005 faff 	bl	801ee24 <iprintf>
 8019826:	f06f 030f 	mvn.w	r3, #15
 801982a:	e04b      	b.n	80198c4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801982c:	68bb      	ldr	r3, [r7, #8]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d109      	bne.n	8019846 <udp_connect+0x42>
 8019832:	4b26      	ldr	r3, [pc, #152]	; (80198cc <udp_connect+0xc8>)
 8019834:	f240 4236 	movw	r2, #1078	; 0x436
 8019838:	4927      	ldr	r1, [pc, #156]	; (80198d8 <udp_connect+0xd4>)
 801983a:	4826      	ldr	r0, [pc, #152]	; (80198d4 <udp_connect+0xd0>)
 801983c:	f005 faf2 	bl	801ee24 <iprintf>
 8019840:	f06f 030f 	mvn.w	r3, #15
 8019844:	e03e      	b.n	80198c4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	8a5b      	ldrh	r3, [r3, #18]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d10f      	bne.n	801986e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801984e:	68f9      	ldr	r1, [r7, #12]
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	8a5b      	ldrh	r3, [r3, #18]
 8019854:	461a      	mov	r2, r3
 8019856:	68f8      	ldr	r0, [r7, #12]
 8019858:	f7ff ff32 	bl	80196c0 <udp_bind>
 801985c:	4603      	mov	r3, r0
 801985e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019860:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d002      	beq.n	801986e <udp_connect+0x6a>
      return err;
 8019868:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801986c:	e02a      	b.n	80198c4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d002      	beq.n	801987a <udp_connect+0x76>
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	e000      	b.n	801987c <udp_connect+0x78>
 801987a:	2300      	movs	r3, #0
 801987c:	68fa      	ldr	r2, [r7, #12]
 801987e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	88fa      	ldrh	r2, [r7, #6]
 8019884:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	7c1b      	ldrb	r3, [r3, #16]
 801988a:	f043 0304 	orr.w	r3, r3, #4
 801988e:	b2da      	uxtb	r2, r3
 8019890:	68fb      	ldr	r3, [r7, #12]
 8019892:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019894:	4b11      	ldr	r3, [pc, #68]	; (80198dc <udp_connect+0xd8>)
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	617b      	str	r3, [r7, #20]
 801989a:	e008      	b.n	80198ae <udp_connect+0xaa>
    if (pcb == ipcb) {
 801989c:	68fa      	ldr	r2, [r7, #12]
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	429a      	cmp	r2, r3
 80198a2:	d101      	bne.n	80198a8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80198a4:	2300      	movs	r3, #0
 80198a6:	e00d      	b.n	80198c4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	68db      	ldr	r3, [r3, #12]
 80198ac:	617b      	str	r3, [r7, #20]
 80198ae:	697b      	ldr	r3, [r7, #20]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d1f3      	bne.n	801989c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80198b4:	4b09      	ldr	r3, [pc, #36]	; (80198dc <udp_connect+0xd8>)
 80198b6:	681a      	ldr	r2, [r3, #0]
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80198bc:	4a07      	ldr	r2, [pc, #28]	; (80198dc <udp_connect+0xd8>)
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80198c2:	2300      	movs	r3, #0
}
 80198c4:	4618      	mov	r0, r3
 80198c6:	3718      	adds	r7, #24
 80198c8:	46bd      	mov	sp, r7
 80198ca:	bd80      	pop	{r7, pc}
 80198cc:	08023788 	.word	0x08023788
 80198d0:	08023a68 	.word	0x08023a68
 80198d4:	080237dc 	.word	0x080237dc
 80198d8:	08023a84 	.word	0x08023a84
 80198dc:	2000c8f4 	.word	0x2000c8f4

080198e0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b084      	sub	sp, #16
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	60f8      	str	r0, [r7, #12]
 80198e8:	60b9      	str	r1, [r7, #8]
 80198ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80198ec:	68fb      	ldr	r3, [r7, #12]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d107      	bne.n	8019902 <udp_recv+0x22>
 80198f2:	4b08      	ldr	r3, [pc, #32]	; (8019914 <udp_recv+0x34>)
 80198f4:	f240 428a 	movw	r2, #1162	; 0x48a
 80198f8:	4907      	ldr	r1, [pc, #28]	; (8019918 <udp_recv+0x38>)
 80198fa:	4808      	ldr	r0, [pc, #32]	; (801991c <udp_recv+0x3c>)
 80198fc:	f005 fa92 	bl	801ee24 <iprintf>
 8019900:	e005      	b.n	801990e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	68ba      	ldr	r2, [r7, #8]
 8019906:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	687a      	ldr	r2, [r7, #4]
 801990c:	61da      	str	r2, [r3, #28]
}
 801990e:	3710      	adds	r7, #16
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	08023788 	.word	0x08023788
 8019918:	08023abc 	.word	0x08023abc
 801991c:	080237dc 	.word	0x080237dc

08019920 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b084      	sub	sp, #16
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d107      	bne.n	801993e <udp_remove+0x1e>
 801992e:	4b19      	ldr	r3, [pc, #100]	; (8019994 <udp_remove+0x74>)
 8019930:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8019934:	4918      	ldr	r1, [pc, #96]	; (8019998 <udp_remove+0x78>)
 8019936:	4819      	ldr	r0, [pc, #100]	; (801999c <udp_remove+0x7c>)
 8019938:	f005 fa74 	bl	801ee24 <iprintf>
 801993c:	e026      	b.n	801998c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801993e:	4b18      	ldr	r3, [pc, #96]	; (80199a0 <udp_remove+0x80>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	687a      	ldr	r2, [r7, #4]
 8019944:	429a      	cmp	r2, r3
 8019946:	d105      	bne.n	8019954 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019948:	4b15      	ldr	r3, [pc, #84]	; (80199a0 <udp_remove+0x80>)
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	68db      	ldr	r3, [r3, #12]
 801994e:	4a14      	ldr	r2, [pc, #80]	; (80199a0 <udp_remove+0x80>)
 8019950:	6013      	str	r3, [r2, #0]
 8019952:	e017      	b.n	8019984 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019954:	4b12      	ldr	r3, [pc, #72]	; (80199a0 <udp_remove+0x80>)
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	60fb      	str	r3, [r7, #12]
 801995a:	e010      	b.n	801997e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	68db      	ldr	r3, [r3, #12]
 8019960:	2b00      	cmp	r3, #0
 8019962:	d009      	beq.n	8019978 <udp_remove+0x58>
 8019964:	68fb      	ldr	r3, [r7, #12]
 8019966:	68db      	ldr	r3, [r3, #12]
 8019968:	687a      	ldr	r2, [r7, #4]
 801996a:	429a      	cmp	r2, r3
 801996c:	d104      	bne.n	8019978 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	68da      	ldr	r2, [r3, #12]
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	60da      	str	r2, [r3, #12]
        break;
 8019976:	e005      	b.n	8019984 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019978:	68fb      	ldr	r3, [r7, #12]
 801997a:	68db      	ldr	r3, [r3, #12]
 801997c:	60fb      	str	r3, [r7, #12]
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	2b00      	cmp	r3, #0
 8019982:	d1eb      	bne.n	801995c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8019984:	6879      	ldr	r1, [r7, #4]
 8019986:	2000      	movs	r0, #0
 8019988:	f7f7 ffd2 	bl	8011930 <memp_free>
}
 801998c:	3710      	adds	r7, #16
 801998e:	46bd      	mov	sp, r7
 8019990:	bd80      	pop	{r7, pc}
 8019992:	bf00      	nop
 8019994:	08023788 	.word	0x08023788
 8019998:	08023ad4 	.word	0x08023ad4
 801999c:	080237dc 	.word	0x080237dc
 80199a0:	2000c8f4 	.word	0x2000c8f4

080199a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b082      	sub	sp, #8
 80199a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80199aa:	2000      	movs	r0, #0
 80199ac:	f7f7 ff4a 	bl	8011844 <memp_malloc>
 80199b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d007      	beq.n	80199c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80199b8:	2220      	movs	r2, #32
 80199ba:	2100      	movs	r1, #0
 80199bc:	6878      	ldr	r0, [r7, #4]
 80199be:	f005 fb87 	bl	801f0d0 <memset>
    pcb->ttl = UDP_TTL;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	22ff      	movs	r2, #255	; 0xff
 80199c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80199c8:	687b      	ldr	r3, [r7, #4]
}
 80199ca:	4618      	mov	r0, r3
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80199d2:	b580      	push	{r7, lr}
 80199d4:	b084      	sub	sp, #16
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	4603      	mov	r3, r0
 80199da:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80199dc:	f7ff ffe2 	bl	80199a4 <udp_new>
 80199e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80199e2:	68fb      	ldr	r3, [r7, #12]
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	3710      	adds	r7, #16
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}

080199ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80199ec:	b480      	push	{r7}
 80199ee:	b085      	sub	sp, #20
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]
 80199f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d01e      	beq.n	8019a3a <udp_netif_ip_addr_changed+0x4e>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	d01a      	beq.n	8019a3a <udp_netif_ip_addr_changed+0x4e>
 8019a04:	683b      	ldr	r3, [r7, #0]
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d017      	beq.n	8019a3a <udp_netif_ip_addr_changed+0x4e>
 8019a0a:	683b      	ldr	r3, [r7, #0]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	d013      	beq.n	8019a3a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019a12:	4b0d      	ldr	r3, [pc, #52]	; (8019a48 <udp_netif_ip_addr_changed+0x5c>)
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	60fb      	str	r3, [r7, #12]
 8019a18:	e00c      	b.n	8019a34 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8019a1a:	68fb      	ldr	r3, [r7, #12]
 8019a1c:	681a      	ldr	r2, [r3, #0]
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	429a      	cmp	r2, r3
 8019a24:	d103      	bne.n	8019a2e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	681a      	ldr	r2, [r3, #0]
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	68db      	ldr	r3, [r3, #12]
 8019a32:	60fb      	str	r3, [r7, #12]
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d1ef      	bne.n	8019a1a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8019a3a:	bf00      	nop
 8019a3c:	3714      	adds	r7, #20
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a44:	4770      	bx	lr
 8019a46:	bf00      	nop
 8019a48:	2000c8f4 	.word	0x2000c8f4

08019a4c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8019a50:	4b20      	ldr	r3, [pc, #128]	; (8019ad4 <dhcp_inc_pcb_refcount+0x88>)
 8019a52:	781b      	ldrb	r3, [r3, #0]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d133      	bne.n	8019ac0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8019a58:	4b1f      	ldr	r3, [pc, #124]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d005      	beq.n	8019a6c <dhcp_inc_pcb_refcount+0x20>
 8019a60:	4b1e      	ldr	r3, [pc, #120]	; (8019adc <dhcp_inc_pcb_refcount+0x90>)
 8019a62:	22e5      	movs	r2, #229	; 0xe5
 8019a64:	491e      	ldr	r1, [pc, #120]	; (8019ae0 <dhcp_inc_pcb_refcount+0x94>)
 8019a66:	481f      	ldr	r0, [pc, #124]	; (8019ae4 <dhcp_inc_pcb_refcount+0x98>)
 8019a68:	f005 f9dc 	bl	801ee24 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8019a6c:	f7ff ff9a 	bl	80199a4 <udp_new>
 8019a70:	4603      	mov	r3, r0
 8019a72:	4a19      	ldr	r2, [pc, #100]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a74:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8019a76:	4b18      	ldr	r3, [pc, #96]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d102      	bne.n	8019a84 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8019a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019a82:	e024      	b.n	8019ace <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8019a84:	4b14      	ldr	r3, [pc, #80]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	7a5a      	ldrb	r2, [r3, #9]
 8019a8a:	4b13      	ldr	r3, [pc, #76]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	f042 0220 	orr.w	r2, r2, #32
 8019a92:	b2d2      	uxtb	r2, r2
 8019a94:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8019a96:	4b10      	ldr	r3, [pc, #64]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2244      	movs	r2, #68	; 0x44
 8019a9c:	4912      	ldr	r1, [pc, #72]	; (8019ae8 <dhcp_inc_pcb_refcount+0x9c>)
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7ff fe0e 	bl	80196c0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8019aa4:	4b0c      	ldr	r3, [pc, #48]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	2243      	movs	r2, #67	; 0x43
 8019aaa:	490f      	ldr	r1, [pc, #60]	; (8019ae8 <dhcp_inc_pcb_refcount+0x9c>)
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7ff fea9 	bl	8019804 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8019ab2:	4b09      	ldr	r3, [pc, #36]	; (8019ad8 <dhcp_inc_pcb_refcount+0x8c>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
 8019ab6:	2200      	movs	r2, #0
 8019ab8:	490c      	ldr	r1, [pc, #48]	; (8019aec <dhcp_inc_pcb_refcount+0xa0>)
 8019aba:	4618      	mov	r0, r3
 8019abc:	f7ff ff10 	bl	80198e0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8019ac0:	4b04      	ldr	r3, [pc, #16]	; (8019ad4 <dhcp_inc_pcb_refcount+0x88>)
 8019ac2:	781b      	ldrb	r3, [r3, #0]
 8019ac4:	3301      	adds	r3, #1
 8019ac6:	b2da      	uxtb	r2, r3
 8019ac8:	4b02      	ldr	r3, [pc, #8]	; (8019ad4 <dhcp_inc_pcb_refcount+0x88>)
 8019aca:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8019acc:	2300      	movs	r3, #0
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	bd80      	pop	{r7, pc}
 8019ad2:	bf00      	nop
 8019ad4:	2000c924 	.word	0x2000c924
 8019ad8:	2000c920 	.word	0x2000c920
 8019adc:	08023aec 	.word	0x08023aec
 8019ae0:	08023b24 	.word	0x08023b24
 8019ae4:	08023b4c 	.word	0x08023b4c
 8019ae8:	08024784 	.word	0x08024784
 8019aec:	0801b381 	.word	0x0801b381

08019af0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8019af0:	b580      	push	{r7, lr}
 8019af2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8019af4:	4b0e      	ldr	r3, [pc, #56]	; (8019b30 <dhcp_dec_pcb_refcount+0x40>)
 8019af6:	781b      	ldrb	r3, [r3, #0]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d105      	bne.n	8019b08 <dhcp_dec_pcb_refcount+0x18>
 8019afc:	4b0d      	ldr	r3, [pc, #52]	; (8019b34 <dhcp_dec_pcb_refcount+0x44>)
 8019afe:	22ff      	movs	r2, #255	; 0xff
 8019b00:	490d      	ldr	r1, [pc, #52]	; (8019b38 <dhcp_dec_pcb_refcount+0x48>)
 8019b02:	480e      	ldr	r0, [pc, #56]	; (8019b3c <dhcp_dec_pcb_refcount+0x4c>)
 8019b04:	f005 f98e 	bl	801ee24 <iprintf>
  dhcp_pcb_refcount--;
 8019b08:	4b09      	ldr	r3, [pc, #36]	; (8019b30 <dhcp_dec_pcb_refcount+0x40>)
 8019b0a:	781b      	ldrb	r3, [r3, #0]
 8019b0c:	3b01      	subs	r3, #1
 8019b0e:	b2da      	uxtb	r2, r3
 8019b10:	4b07      	ldr	r3, [pc, #28]	; (8019b30 <dhcp_dec_pcb_refcount+0x40>)
 8019b12:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8019b14:	4b06      	ldr	r3, [pc, #24]	; (8019b30 <dhcp_dec_pcb_refcount+0x40>)
 8019b16:	781b      	ldrb	r3, [r3, #0]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d107      	bne.n	8019b2c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8019b1c:	4b08      	ldr	r3, [pc, #32]	; (8019b40 <dhcp_dec_pcb_refcount+0x50>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7ff fefd 	bl	8019920 <udp_remove>
    dhcp_pcb = NULL;
 8019b26:	4b06      	ldr	r3, [pc, #24]	; (8019b40 <dhcp_dec_pcb_refcount+0x50>)
 8019b28:	2200      	movs	r2, #0
 8019b2a:	601a      	str	r2, [r3, #0]
  }
}
 8019b2c:	bf00      	nop
 8019b2e:	bd80      	pop	{r7, pc}
 8019b30:	2000c924 	.word	0x2000c924
 8019b34:	08023aec 	.word	0x08023aec
 8019b38:	08023b74 	.word	0x08023b74
 8019b3c:	08023b4c 	.word	0x08023b4c
 8019b40:	2000c920 	.word	0x2000c920

08019b44 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8019b44:	b580      	push	{r7, lr}
 8019b46:	b084      	sub	sp, #16
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b50:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019b52:	210c      	movs	r1, #12
 8019b54:	68f8      	ldr	r0, [r7, #12]
 8019b56:	f001 f855 	bl	801ac04 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019b5a:	4b06      	ldr	r3, [pc, #24]	; (8019b74 <dhcp_handle_nak+0x30>)
 8019b5c:	4a05      	ldr	r2, [pc, #20]	; (8019b74 <dhcp_handle_nak+0x30>)
 8019b5e:	4905      	ldr	r1, [pc, #20]	; (8019b74 <dhcp_handle_nak+0x30>)
 8019b60:	6878      	ldr	r0, [r7, #4]
 8019b62:	f7f8 f887 	bl	8011c74 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f000 fc48 	bl	801a3fc <dhcp_discover>
}
 8019b6c:	bf00      	nop
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}
 8019b74:	08024784 	.word	0x08024784

08019b78 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b084      	sub	sp, #16
 8019b7c:	af00      	add	r7, sp, #0
 8019b7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b84:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8019b86:	2108      	movs	r1, #8
 8019b88:	68f8      	ldr	r0, [r7, #12]
 8019b8a:	f001 f83b 	bl	801ac04 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8019b8e:	68fb      	ldr	r3, [r7, #12]
 8019b90:	331c      	adds	r3, #28
 8019b92:	2200      	movs	r2, #0
 8019b94:	4619      	mov	r1, r3
 8019b96:	6878      	ldr	r0, [r7, #4]
 8019b98:	f002 fb3c 	bl	801c214 <etharp_query>
 8019b9c:	4603      	mov	r3, r0
 8019b9e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	799b      	ldrb	r3, [r3, #6]
 8019ba4:	2bff      	cmp	r3, #255	; 0xff
 8019ba6:	d005      	beq.n	8019bb4 <dhcp_check+0x3c>
    dhcp->tries++;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	799b      	ldrb	r3, [r3, #6]
 8019bac:	3301      	adds	r3, #1
 8019bae:	b2da      	uxtb	r2, r3
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8019bb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8019bb8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019bba:	893b      	ldrh	r3, [r7, #8]
 8019bbc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019bc0:	4a06      	ldr	r2, [pc, #24]	; (8019bdc <dhcp_check+0x64>)
 8019bc2:	fb82 1203 	smull	r1, r2, r2, r3
 8019bc6:	1152      	asrs	r2, r2, #5
 8019bc8:	17db      	asrs	r3, r3, #31
 8019bca:	1ad3      	subs	r3, r2, r3
 8019bcc:	b29a      	uxth	r2, r3
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8019bd2:	bf00      	nop
 8019bd4:	3710      	adds	r7, #16
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}
 8019bda:	bf00      	nop
 8019bdc:	10624dd3 	.word	0x10624dd3

08019be0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019be0:	b580      	push	{r7, lr}
 8019be2:	b084      	sub	sp, #16
 8019be4:	af00      	add	r7, sp, #0
 8019be6:	6078      	str	r0, [r7, #4]
 8019be8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8019bf0:	4b0c      	ldr	r3, [pc, #48]	; (8019c24 <dhcp_handle_offer+0x44>)
 8019bf2:	789b      	ldrb	r3, [r3, #2]
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	d011      	beq.n	8019c1c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8019bfe:	4b0a      	ldr	r3, [pc, #40]	; (8019c28 <dhcp_handle_offer+0x48>)
 8019c00:	689b      	ldr	r3, [r3, #8]
 8019c02:	4618      	mov	r0, r3
 8019c04:	f7f7 f95b 	bl	8010ebe <lwip_htonl>
 8019c08:	4602      	mov	r2, r0
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019c0e:	683b      	ldr	r3, [r7, #0]
 8019c10:	691a      	ldr	r2, [r3, #16]
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8019c16:	6878      	ldr	r0, [r7, #4]
 8019c18:	f000 f808 	bl	8019c2c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019c1c:	bf00      	nop
 8019c1e:	3710      	adds	r7, #16
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bd80      	pop	{r7, pc}
 8019c24:	2000c918 	.word	0x2000c918
 8019c28:	2000c8f8 	.word	0x2000c8f8

08019c2c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019c2c:	b5b0      	push	{r4, r5, r7, lr}
 8019c2e:	b08a      	sub	sp, #40	; 0x28
 8019c30:	af02      	add	r7, sp, #8
 8019c32:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d109      	bne.n	8019c4e <dhcp_select+0x22>
 8019c3a:	4b71      	ldr	r3, [pc, #452]	; (8019e00 <dhcp_select+0x1d4>)
 8019c3c:	f240 1277 	movw	r2, #375	; 0x177
 8019c40:	4970      	ldr	r1, [pc, #448]	; (8019e04 <dhcp_select+0x1d8>)
 8019c42:	4871      	ldr	r0, [pc, #452]	; (8019e08 <dhcp_select+0x1dc>)
 8019c44:	f005 f8ee 	bl	801ee24 <iprintf>
 8019c48:	f06f 030f 	mvn.w	r3, #15
 8019c4c:	e0d3      	b.n	8019df6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c52:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019c54:	69bb      	ldr	r3, [r7, #24]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d109      	bne.n	8019c6e <dhcp_select+0x42>
 8019c5a:	4b69      	ldr	r3, [pc, #420]	; (8019e00 <dhcp_select+0x1d4>)
 8019c5c:	f240 1279 	movw	r2, #377	; 0x179
 8019c60:	496a      	ldr	r1, [pc, #424]	; (8019e0c <dhcp_select+0x1e0>)
 8019c62:	4869      	ldr	r0, [pc, #420]	; (8019e08 <dhcp_select+0x1dc>)
 8019c64:	f005 f8de 	bl	801ee24 <iprintf>
 8019c68:	f06f 0305 	mvn.w	r3, #5
 8019c6c:	e0c3      	b.n	8019df6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8019c6e:	2101      	movs	r1, #1
 8019c70:	69b8      	ldr	r0, [r7, #24]
 8019c72:	f000 ffc7 	bl	801ac04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019c76:	f107 030c 	add.w	r3, r7, #12
 8019c7a:	2203      	movs	r2, #3
 8019c7c:	69b9      	ldr	r1, [r7, #24]
 8019c7e:	6878      	ldr	r0, [r7, #4]
 8019c80:	f001 fc4c 	bl	801b51c <dhcp_create_msg>
 8019c84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019c86:	697b      	ldr	r3, [r7, #20]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	f000 8085 	beq.w	8019d98 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	685b      	ldr	r3, [r3, #4]
 8019c92:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019c94:	89b8      	ldrh	r0, [r7, #12]
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019c9c:	2302      	movs	r3, #2
 8019c9e:	2239      	movs	r2, #57	; 0x39
 8019ca0:	f000 ffca 	bl	801ac38 <dhcp_option>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019ca8:	89b8      	ldrh	r0, [r7, #12]
 8019caa:	693b      	ldr	r3, [r7, #16]
 8019cac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019cb4:	461a      	mov	r2, r3
 8019cb6:	f001 f819 	bl	801acec <dhcp_option_short>
 8019cba:	4603      	mov	r3, r0
 8019cbc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019cbe:	89b8      	ldrh	r0, [r7, #12]
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019cc6:	2304      	movs	r3, #4
 8019cc8:	2232      	movs	r2, #50	; 0x32
 8019cca:	f000 ffb5 	bl	801ac38 <dhcp_option>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019cd2:	89bc      	ldrh	r4, [r7, #12]
 8019cd4:	693b      	ldr	r3, [r7, #16]
 8019cd6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019cda:	69bb      	ldr	r3, [r7, #24]
 8019cdc:	69db      	ldr	r3, [r3, #28]
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7f7 f8ed 	bl	8010ebe <lwip_htonl>
 8019ce4:	4603      	mov	r3, r0
 8019ce6:	461a      	mov	r2, r3
 8019ce8:	4629      	mov	r1, r5
 8019cea:	4620      	mov	r0, r4
 8019cec:	f001 f830 	bl	801ad50 <dhcp_option_long>
 8019cf0:	4603      	mov	r3, r0
 8019cf2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019cf4:	89b8      	ldrh	r0, [r7, #12]
 8019cf6:	693b      	ldr	r3, [r7, #16]
 8019cf8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019cfc:	2304      	movs	r3, #4
 8019cfe:	2236      	movs	r2, #54	; 0x36
 8019d00:	f000 ff9a 	bl	801ac38 <dhcp_option>
 8019d04:	4603      	mov	r3, r0
 8019d06:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019d08:	89bc      	ldrh	r4, [r7, #12]
 8019d0a:	693b      	ldr	r3, [r7, #16]
 8019d0c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8019d10:	69bb      	ldr	r3, [r7, #24]
 8019d12:	699b      	ldr	r3, [r3, #24]
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7f7 f8d2 	bl	8010ebe <lwip_htonl>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	4629      	mov	r1, r5
 8019d20:	4620      	mov	r0, r4
 8019d22:	f001 f815 	bl	801ad50 <dhcp_option_long>
 8019d26:	4603      	mov	r3, r0
 8019d28:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019d2a:	89b8      	ldrh	r0, [r7, #12]
 8019d2c:	693b      	ldr	r3, [r7, #16]
 8019d2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019d32:	2303      	movs	r3, #3
 8019d34:	2237      	movs	r2, #55	; 0x37
 8019d36:	f000 ff7f 	bl	801ac38 <dhcp_option>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019d3e:	2300      	movs	r3, #0
 8019d40:	77bb      	strb	r3, [r7, #30]
 8019d42:	e00e      	b.n	8019d62 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019d44:	89b8      	ldrh	r0, [r7, #12]
 8019d46:	693b      	ldr	r3, [r7, #16]
 8019d48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8019d4c:	7fbb      	ldrb	r3, [r7, #30]
 8019d4e:	4a30      	ldr	r2, [pc, #192]	; (8019e10 <dhcp_select+0x1e4>)
 8019d50:	5cd3      	ldrb	r3, [r2, r3]
 8019d52:	461a      	mov	r2, r3
 8019d54:	f000 ffa4 	bl	801aca0 <dhcp_option_byte>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019d5c:	7fbb      	ldrb	r3, [r7, #30]
 8019d5e:	3301      	adds	r3, #1
 8019d60:	77bb      	strb	r3, [r7, #30]
 8019d62:	7fbb      	ldrb	r3, [r7, #30]
 8019d64:	2b02      	cmp	r3, #2
 8019d66:	d9ed      	bls.n	8019d44 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019d68:	89b8      	ldrh	r0, [r7, #12]
 8019d6a:	693b      	ldr	r3, [r7, #16]
 8019d6c:	33f0      	adds	r3, #240	; 0xf0
 8019d6e:	697a      	ldr	r2, [r7, #20]
 8019d70:	4619      	mov	r1, r3
 8019d72:	f001 fca9 	bl	801b6c8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019d76:	4b27      	ldr	r3, [pc, #156]	; (8019e14 <dhcp_select+0x1e8>)
 8019d78:	6818      	ldr	r0, [r3, #0]
 8019d7a:	4b27      	ldr	r3, [pc, #156]	; (8019e18 <dhcp_select+0x1ec>)
 8019d7c:	9301      	str	r3, [sp, #4]
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	9300      	str	r3, [sp, #0]
 8019d82:	2343      	movs	r3, #67	; 0x43
 8019d84:	4a25      	ldr	r2, [pc, #148]	; (8019e1c <dhcp_select+0x1f0>)
 8019d86:	6979      	ldr	r1, [r7, #20]
 8019d88:	f7ff fbb4 	bl	80194f4 <udp_sendto_if_src>
 8019d8c:	4603      	mov	r3, r0
 8019d8e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019d90:	6978      	ldr	r0, [r7, #20]
 8019d92:	f7f8 fcb5 	bl	8012700 <pbuf_free>
 8019d96:	e001      	b.n	8019d9c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019d98:	23ff      	movs	r3, #255	; 0xff
 8019d9a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019d9c:	69bb      	ldr	r3, [r7, #24]
 8019d9e:	799b      	ldrb	r3, [r3, #6]
 8019da0:	2bff      	cmp	r3, #255	; 0xff
 8019da2:	d005      	beq.n	8019db0 <dhcp_select+0x184>
    dhcp->tries++;
 8019da4:	69bb      	ldr	r3, [r7, #24]
 8019da6:	799b      	ldrb	r3, [r3, #6]
 8019da8:	3301      	adds	r3, #1
 8019daa:	b2da      	uxtb	r2, r3
 8019dac:	69bb      	ldr	r3, [r7, #24]
 8019dae:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019db0:	69bb      	ldr	r3, [r7, #24]
 8019db2:	799b      	ldrb	r3, [r3, #6]
 8019db4:	2b05      	cmp	r3, #5
 8019db6:	d80d      	bhi.n	8019dd4 <dhcp_select+0x1a8>
 8019db8:	69bb      	ldr	r3, [r7, #24]
 8019dba:	799b      	ldrb	r3, [r3, #6]
 8019dbc:	461a      	mov	r2, r3
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	4093      	lsls	r3, r2
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	461a      	mov	r2, r3
 8019dc6:	0152      	lsls	r2, r2, #5
 8019dc8:	1ad2      	subs	r2, r2, r3
 8019dca:	0092      	lsls	r2, r2, #2
 8019dcc:	4413      	add	r3, r2
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	b29b      	uxth	r3, r3
 8019dd2:	e001      	b.n	8019dd8 <dhcp_select+0x1ac>
 8019dd4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8019dd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019dda:	89fb      	ldrh	r3, [r7, #14]
 8019ddc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8019de0:	4a0f      	ldr	r2, [pc, #60]	; (8019e20 <dhcp_select+0x1f4>)
 8019de2:	fb82 1203 	smull	r1, r2, r2, r3
 8019de6:	1152      	asrs	r2, r2, #5
 8019de8:	17db      	asrs	r3, r3, #31
 8019dea:	1ad3      	subs	r3, r2, r3
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	69bb      	ldr	r3, [r7, #24]
 8019df0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3720      	adds	r7, #32
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8019dfe:	bf00      	nop
 8019e00:	08023aec 	.word	0x08023aec
 8019e04:	08023b98 	.word	0x08023b98
 8019e08:	08023b4c 	.word	0x08023b4c
 8019e0c:	08023bb4 	.word	0x08023bb4
 8019e10:	20000030 	.word	0x20000030
 8019e14:	2000c920 	.word	0x2000c920
 8019e18:	08024784 	.word	0x08024784
 8019e1c:	08024788 	.word	0x08024788
 8019e20:	10624dd3 	.word	0x10624dd3

08019e24 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019e2a:	4b27      	ldr	r3, [pc, #156]	; (8019ec8 <dhcp_coarse_tmr+0xa4>)
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	607b      	str	r3, [r7, #4]
 8019e30:	e042      	b.n	8019eb8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e36:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8019e38:	683b      	ldr	r3, [r7, #0]
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d039      	beq.n	8019eb2 <dhcp_coarse_tmr+0x8e>
 8019e3e:	683b      	ldr	r3, [r7, #0]
 8019e40:	795b      	ldrb	r3, [r3, #5]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d035      	beq.n	8019eb2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8019e46:	683b      	ldr	r3, [r7, #0]
 8019e48:	8a9b      	ldrh	r3, [r3, #20]
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d012      	beq.n	8019e74 <dhcp_coarse_tmr+0x50>
 8019e4e:	683b      	ldr	r3, [r7, #0]
 8019e50:	8a5b      	ldrh	r3, [r3, #18]
 8019e52:	3301      	adds	r3, #1
 8019e54:	b29a      	uxth	r2, r3
 8019e56:	683b      	ldr	r3, [r7, #0]
 8019e58:	825a      	strh	r2, [r3, #18]
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	8a5a      	ldrh	r2, [r3, #18]
 8019e5e:	683b      	ldr	r3, [r7, #0]
 8019e60:	8a9b      	ldrh	r3, [r3, #20]
 8019e62:	429a      	cmp	r2, r3
 8019e64:	d106      	bne.n	8019e74 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8019e66:	6878      	ldr	r0, [r7, #4]
 8019e68:	f000 fe32 	bl	801aad0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8019e6c:	6878      	ldr	r0, [r7, #4]
 8019e6e:	f000 f969 	bl	801a144 <dhcp_start>
 8019e72:	e01e      	b.n	8019eb2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	8a1b      	ldrh	r3, [r3, #16]
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d00b      	beq.n	8019e94 <dhcp_coarse_tmr+0x70>
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	8a1b      	ldrh	r3, [r3, #16]
 8019e80:	1e5a      	subs	r2, r3, #1
 8019e82:	b291      	uxth	r1, r2
 8019e84:	683a      	ldr	r2, [r7, #0]
 8019e86:	8211      	strh	r1, [r2, #16]
 8019e88:	2b01      	cmp	r3, #1
 8019e8a:	d103      	bne.n	8019e94 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8019e8c:	6878      	ldr	r0, [r7, #4]
 8019e8e:	f000 f8c6 	bl	801a01e <dhcp_t2_timeout>
 8019e92:	e00e      	b.n	8019eb2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8019e94:	683b      	ldr	r3, [r7, #0]
 8019e96:	89db      	ldrh	r3, [r3, #14]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d00a      	beq.n	8019eb2 <dhcp_coarse_tmr+0x8e>
 8019e9c:	683b      	ldr	r3, [r7, #0]
 8019e9e:	89db      	ldrh	r3, [r3, #14]
 8019ea0:	1e5a      	subs	r2, r3, #1
 8019ea2:	b291      	uxth	r1, r2
 8019ea4:	683a      	ldr	r2, [r7, #0]
 8019ea6:	81d1      	strh	r1, [r2, #14]
 8019ea8:	2b01      	cmp	r3, #1
 8019eaa:	d102      	bne.n	8019eb2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f000 f888 	bl	8019fc2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	607b      	str	r3, [r7, #4]
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d1b9      	bne.n	8019e32 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8019ebe:	bf00      	nop
 8019ec0:	bf00      	nop
 8019ec2:	3708      	adds	r7, #8
 8019ec4:	46bd      	mov	sp, r7
 8019ec6:	bd80      	pop	{r7, pc}
 8019ec8:	2000c88c 	.word	0x2000c88c

08019ecc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8019ecc:	b580      	push	{r7, lr}
 8019ece:	b082      	sub	sp, #8
 8019ed0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8019ed2:	4b16      	ldr	r3, [pc, #88]	; (8019f2c <dhcp_fine_tmr+0x60>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	607b      	str	r3, [r7, #4]
 8019ed8:	e020      	b.n	8019f1c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ede:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8019ee0:	683b      	ldr	r3, [r7, #0]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d017      	beq.n	8019f16 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	891b      	ldrh	r3, [r3, #8]
 8019eea:	2b01      	cmp	r3, #1
 8019eec:	d906      	bls.n	8019efc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	891b      	ldrh	r3, [r3, #8]
 8019ef2:	3b01      	subs	r3, #1
 8019ef4:	b29a      	uxth	r2, r3
 8019ef6:	683b      	ldr	r3, [r7, #0]
 8019ef8:	811a      	strh	r2, [r3, #8]
 8019efa:	e00c      	b.n	8019f16 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	891b      	ldrh	r3, [r3, #8]
 8019f00:	2b01      	cmp	r3, #1
 8019f02:	d108      	bne.n	8019f16 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019f04:	683b      	ldr	r3, [r7, #0]
 8019f06:	891b      	ldrh	r3, [r3, #8]
 8019f08:	3b01      	subs	r3, #1
 8019f0a:	b29a      	uxth	r2, r3
 8019f0c:	683b      	ldr	r3, [r7, #0]
 8019f0e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019f10:	6878      	ldr	r0, [r7, #4]
 8019f12:	f000 f80d 	bl	8019f30 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	607b      	str	r3, [r7, #4]
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d1db      	bne.n	8019eda <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8019f22:	bf00      	nop
 8019f24:	bf00      	nop
 8019f26:	3708      	adds	r7, #8
 8019f28:	46bd      	mov	sp, r7
 8019f2a:	bd80      	pop	{r7, pc}
 8019f2c:	2000c88c 	.word	0x2000c88c

08019f30 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019f30:	b580      	push	{r7, lr}
 8019f32:	b084      	sub	sp, #16
 8019f34:	af00      	add	r7, sp, #0
 8019f36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	795b      	ldrb	r3, [r3, #5]
 8019f42:	2b0c      	cmp	r3, #12
 8019f44:	d003      	beq.n	8019f4e <dhcp_timeout+0x1e>
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	795b      	ldrb	r3, [r3, #5]
 8019f4a:	2b06      	cmp	r3, #6
 8019f4c:	d103      	bne.n	8019f56 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8019f4e:	6878      	ldr	r0, [r7, #4]
 8019f50:	f000 fa54 	bl	801a3fc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019f54:	e031      	b.n	8019fba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	795b      	ldrb	r3, [r3, #5]
 8019f5a:	2b01      	cmp	r3, #1
 8019f5c:	d10e      	bne.n	8019f7c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	799b      	ldrb	r3, [r3, #6]
 8019f62:	2b05      	cmp	r3, #5
 8019f64:	d803      	bhi.n	8019f6e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019f66:	6878      	ldr	r0, [r7, #4]
 8019f68:	f7ff fe60 	bl	8019c2c <dhcp_select>
}
 8019f6c:	e025      	b.n	8019fba <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8019f6e:	6878      	ldr	r0, [r7, #4]
 8019f70:	f000 fdae 	bl	801aad0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8019f74:	6878      	ldr	r0, [r7, #4]
 8019f76:	f000 f8e5 	bl	801a144 <dhcp_start>
}
 8019f7a:	e01e      	b.n	8019fba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	795b      	ldrb	r3, [r3, #5]
 8019f80:	2b08      	cmp	r3, #8
 8019f82:	d10b      	bne.n	8019f9c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	799b      	ldrb	r3, [r3, #6]
 8019f88:	2b01      	cmp	r3, #1
 8019f8a:	d803      	bhi.n	8019f94 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f7ff fdf3 	bl	8019b78 <dhcp_check>
}
 8019f92:	e012      	b.n	8019fba <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8019f94:	6878      	ldr	r0, [r7, #4]
 8019f96:	f000 fad3 	bl	801a540 <dhcp_bind>
}
 8019f9a:	e00e      	b.n	8019fba <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8019f9c:	68fb      	ldr	r3, [r7, #12]
 8019f9e:	795b      	ldrb	r3, [r3, #5]
 8019fa0:	2b03      	cmp	r3, #3
 8019fa2:	d10a      	bne.n	8019fba <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	799b      	ldrb	r3, [r3, #6]
 8019fa8:	2b01      	cmp	r3, #1
 8019faa:	d803      	bhi.n	8019fb4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8019fac:	6878      	ldr	r0, [r7, #4]
 8019fae:	f000 fcd9 	bl	801a964 <dhcp_reboot>
}
 8019fb2:	e002      	b.n	8019fba <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8019fb4:	6878      	ldr	r0, [r7, #4]
 8019fb6:	f000 fa21 	bl	801a3fc <dhcp_discover>
}
 8019fba:	bf00      	nop
 8019fbc:	3710      	adds	r7, #16
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}

08019fc2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8019fc2:	b580      	push	{r7, lr}
 8019fc4:	b084      	sub	sp, #16
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019fd0:	68fb      	ldr	r3, [r7, #12]
 8019fd2:	795b      	ldrb	r3, [r3, #5]
 8019fd4:	2b01      	cmp	r3, #1
 8019fd6:	d007      	beq.n	8019fe8 <dhcp_t1_timeout+0x26>
 8019fd8:	68fb      	ldr	r3, [r7, #12]
 8019fda:	795b      	ldrb	r3, [r3, #5]
 8019fdc:	2b0a      	cmp	r3, #10
 8019fde:	d003      	beq.n	8019fe8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019fe4:	2b05      	cmp	r3, #5
 8019fe6:	d116      	bne.n	801a016 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019fe8:	6878      	ldr	r0, [r7, #4]
 8019fea:	f000 fb83 	bl	801a6f4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	899b      	ldrh	r3, [r3, #12]
 8019ff2:	461a      	mov	r2, r3
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	8a5b      	ldrh	r3, [r3, #18]
 8019ff8:	1ad3      	subs	r3, r2, r3
 8019ffa:	2b01      	cmp	r3, #1
 8019ffc:	dd0b      	ble.n	801a016 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	899b      	ldrh	r3, [r3, #12]
 801a002:	461a      	mov	r2, r3
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	8a5b      	ldrh	r3, [r3, #18]
 801a008:	1ad3      	subs	r3, r2, r3
 801a00a:	0fda      	lsrs	r2, r3, #31
 801a00c:	4413      	add	r3, r2
 801a00e:	105b      	asrs	r3, r3, #1
 801a010:	b29a      	uxth	r2, r3
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801a016:	bf00      	nop
 801a018:	3710      	adds	r7, #16
 801a01a:	46bd      	mov	sp, r7
 801a01c:	bd80      	pop	{r7, pc}

0801a01e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801a01e:	b580      	push	{r7, lr}
 801a020:	b084      	sub	sp, #16
 801a022:	af00      	add	r7, sp, #0
 801a024:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a02a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	795b      	ldrb	r3, [r3, #5]
 801a030:	2b01      	cmp	r3, #1
 801a032:	d00b      	beq.n	801a04c <dhcp_t2_timeout+0x2e>
 801a034:	68fb      	ldr	r3, [r7, #12]
 801a036:	795b      	ldrb	r3, [r3, #5]
 801a038:	2b0a      	cmp	r3, #10
 801a03a:	d007      	beq.n	801a04c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801a040:	2b05      	cmp	r3, #5
 801a042:	d003      	beq.n	801a04c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801a044:	68fb      	ldr	r3, [r7, #12]
 801a046:	795b      	ldrb	r3, [r3, #5]
 801a048:	2b04      	cmp	r3, #4
 801a04a:	d116      	bne.n	801a07a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801a04c:	6878      	ldr	r0, [r7, #4]
 801a04e:	f000 fbed 	bl	801a82c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	8a9b      	ldrh	r3, [r3, #20]
 801a056:	461a      	mov	r2, r3
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	8a5b      	ldrh	r3, [r3, #18]
 801a05c:	1ad3      	subs	r3, r2, r3
 801a05e:	2b01      	cmp	r3, #1
 801a060:	dd0b      	ble.n	801a07a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801a062:	68fb      	ldr	r3, [r7, #12]
 801a064:	8a9b      	ldrh	r3, [r3, #20]
 801a066:	461a      	mov	r2, r3
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	8a5b      	ldrh	r3, [r3, #18]
 801a06c:	1ad3      	subs	r3, r2, r3
 801a06e:	0fda      	lsrs	r2, r3, #31
 801a070:	4413      	add	r3, r2
 801a072:	105b      	asrs	r3, r3, #1
 801a074:	b29a      	uxth	r2, r3
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801a07a:	bf00      	nop
 801a07c:	3710      	adds	r7, #16
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
	...

0801a084 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801a084:	b580      	push	{r7, lr}
 801a086:	b084      	sub	sp, #16
 801a088:	af00      	add	r7, sp, #0
 801a08a:	6078      	str	r0, [r7, #4]
 801a08c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a08e:	687b      	ldr	r3, [r7, #4]
 801a090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a092:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	2200      	movs	r2, #0
 801a098:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	2200      	movs	r2, #0
 801a09e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801a0a0:	4b26      	ldr	r3, [pc, #152]	; (801a13c <dhcp_handle_ack+0xb8>)
 801a0a2:	78db      	ldrb	r3, [r3, #3]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d003      	beq.n	801a0b0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801a0a8:	4b25      	ldr	r3, [pc, #148]	; (801a140 <dhcp_handle_ack+0xbc>)
 801a0aa:	68da      	ldr	r2, [r3, #12]
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801a0b0:	4b22      	ldr	r3, [pc, #136]	; (801a13c <dhcp_handle_ack+0xb8>)
 801a0b2:	791b      	ldrb	r3, [r3, #4]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d004      	beq.n	801a0c2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801a0b8:	4b21      	ldr	r3, [pc, #132]	; (801a140 <dhcp_handle_ack+0xbc>)
 801a0ba:	691a      	ldr	r2, [r3, #16]
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	62da      	str	r2, [r3, #44]	; 0x2c
 801a0c0:	e004      	b.n	801a0cc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a0c6:	085a      	lsrs	r2, r3, #1
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801a0cc:	4b1b      	ldr	r3, [pc, #108]	; (801a13c <dhcp_handle_ack+0xb8>)
 801a0ce:	795b      	ldrb	r3, [r3, #5]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d004      	beq.n	801a0de <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801a0d4:	4b1a      	ldr	r3, [pc, #104]	; (801a140 <dhcp_handle_ack+0xbc>)
 801a0d6:	695a      	ldr	r2, [r3, #20]
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	631a      	str	r2, [r3, #48]	; 0x30
 801a0dc:	e007      	b.n	801a0ee <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	00db      	lsls	r3, r3, #3
 801a0e6:	1a9b      	subs	r3, r3, r2
 801a0e8:	08da      	lsrs	r2, r3, #3
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	691a      	ldr	r2, [r3, #16]
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801a0f6:	4b11      	ldr	r3, [pc, #68]	; (801a13c <dhcp_handle_ack+0xb8>)
 801a0f8:	799b      	ldrb	r3, [r3, #6]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d00b      	beq.n	801a116 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801a0fe:	4b10      	ldr	r3, [pc, #64]	; (801a140 <dhcp_handle_ack+0xbc>)
 801a100:	699b      	ldr	r3, [r3, #24]
 801a102:	4618      	mov	r0, r3
 801a104:	f7f6 fedb 	bl	8010ebe <lwip_htonl>
 801a108:	4602      	mov	r2, r0
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	2201      	movs	r2, #1
 801a112:	71da      	strb	r2, [r3, #7]
 801a114:	e002      	b.n	801a11c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	2200      	movs	r2, #0
 801a11a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801a11c:	4b07      	ldr	r3, [pc, #28]	; (801a13c <dhcp_handle_ack+0xb8>)
 801a11e:	79db      	ldrb	r3, [r3, #7]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d007      	beq.n	801a134 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801a124:	4b06      	ldr	r3, [pc, #24]	; (801a140 <dhcp_handle_ack+0xbc>)
 801a126:	69db      	ldr	r3, [r3, #28]
 801a128:	4618      	mov	r0, r3
 801a12a:	f7f6 fec8 	bl	8010ebe <lwip_htonl>
 801a12e:	4602      	mov	r2, r0
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801a134:	bf00      	nop
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}
 801a13c:	2000c918 	.word	0x2000c918
 801a140:	2000c8f8 	.word	0x2000c8f8

0801a144 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801a144:	b580      	push	{r7, lr}
 801a146:	b084      	sub	sp, #16
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d109      	bne.n	801a166 <dhcp_start+0x22>
 801a152:	4b37      	ldr	r3, [pc, #220]	; (801a230 <dhcp_start+0xec>)
 801a154:	f240 22e7 	movw	r2, #743	; 0x2e7
 801a158:	4936      	ldr	r1, [pc, #216]	; (801a234 <dhcp_start+0xf0>)
 801a15a:	4837      	ldr	r0, [pc, #220]	; (801a238 <dhcp_start+0xf4>)
 801a15c:	f004 fe62 	bl	801ee24 <iprintf>
 801a160:	f06f 030f 	mvn.w	r3, #15
 801a164:	e060      	b.n	801a228 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a16c:	f003 0301 	and.w	r3, r3, #1
 801a170:	2b00      	cmp	r3, #0
 801a172:	d109      	bne.n	801a188 <dhcp_start+0x44>
 801a174:	4b2e      	ldr	r3, [pc, #184]	; (801a230 <dhcp_start+0xec>)
 801a176:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801a17a:	4930      	ldr	r1, [pc, #192]	; (801a23c <dhcp_start+0xf8>)
 801a17c:	482e      	ldr	r0, [pc, #184]	; (801a238 <dhcp_start+0xf4>)
 801a17e:	f004 fe51 	bl	801ee24 <iprintf>
 801a182:	f06f 030f 	mvn.w	r3, #15
 801a186:	e04f      	b.n	801a228 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a18c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a192:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a196:	d202      	bcs.n	801a19e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801a198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a19c:	e044      	b.n	801a228 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d10d      	bne.n	801a1c0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801a1a4:	2034      	movs	r0, #52	; 0x34
 801a1a6:	f7f7 f9a9 	bl	80114fc <mem_malloc>
 801a1aa:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d102      	bne.n	801a1b8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801a1b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1b6:	e037      	b.n	801a228 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	68fa      	ldr	r2, [r7, #12]
 801a1bc:	625a      	str	r2, [r3, #36]	; 0x24
 801a1be:	e005      	b.n	801a1cc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801a1c0:	68fb      	ldr	r3, [r7, #12]
 801a1c2:	791b      	ldrb	r3, [r3, #4]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d001      	beq.n	801a1cc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a1c8:	f7ff fc92 	bl	8019af0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801a1cc:	2234      	movs	r2, #52	; 0x34
 801a1ce:	2100      	movs	r1, #0
 801a1d0:	68f8      	ldr	r0, [r7, #12]
 801a1d2:	f004 ff7d 	bl	801f0d0 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801a1d6:	f7ff fc39 	bl	8019a4c <dhcp_inc_pcb_refcount>
 801a1da:	4603      	mov	r3, r0
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d002      	beq.n	801a1e6 <dhcp_start+0xa2>
    return ERR_MEM;
 801a1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a1e4:	e020      	b.n	801a228 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801a1e6:	68fb      	ldr	r3, [r7, #12]
 801a1e8:	2201      	movs	r2, #1
 801a1ea:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801a1f2:	f003 0304 	and.w	r3, r3, #4
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d105      	bne.n	801a206 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801a1fa:	2102      	movs	r1, #2
 801a1fc:	68f8      	ldr	r0, [r7, #12]
 801a1fe:	f000 fd01 	bl	801ac04 <dhcp_set_state>
    return ERR_OK;
 801a202:	2300      	movs	r3, #0
 801a204:	e010      	b.n	801a228 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801a206:	6878      	ldr	r0, [r7, #4]
 801a208:	f000 f8f8 	bl	801a3fc <dhcp_discover>
 801a20c:	4603      	mov	r3, r0
 801a20e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801a210:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d005      	beq.n	801a224 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801a218:	6878      	ldr	r0, [r7, #4]
 801a21a:	f000 fc59 	bl	801aad0 <dhcp_release_and_stop>
    return ERR_MEM;
 801a21e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a222:	e001      	b.n	801a228 <dhcp_start+0xe4>
  }
  return result;
 801a224:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a228:	4618      	mov	r0, r3
 801a22a:	3710      	adds	r7, #16
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}
 801a230:	08023aec 	.word	0x08023aec
 801a234:	08023bd0 	.word	0x08023bd0
 801a238:	08023b4c 	.word	0x08023b4c
 801a23c:	08023c14 	.word	0x08023c14

0801a240 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	b084      	sub	sp, #16
 801a244:	af00      	add	r7, sp, #0
 801a246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a24c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d025      	beq.n	801a2a0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	795b      	ldrb	r3, [r3, #5]
 801a258:	2b0a      	cmp	r3, #10
 801a25a:	d008      	beq.n	801a26e <dhcp_network_changed+0x2e>
 801a25c:	2b0a      	cmp	r3, #10
 801a25e:	dc0d      	bgt.n	801a27c <dhcp_network_changed+0x3c>
 801a260:	2b00      	cmp	r3, #0
 801a262:	d01f      	beq.n	801a2a4 <dhcp_network_changed+0x64>
 801a264:	2b00      	cmp	r3, #0
 801a266:	db09      	blt.n	801a27c <dhcp_network_changed+0x3c>
 801a268:	3b03      	subs	r3, #3
 801a26a:	2b02      	cmp	r3, #2
 801a26c:	d806      	bhi.n	801a27c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	2200      	movs	r2, #0
 801a272:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f000 fb75 	bl	801a964 <dhcp_reboot>
      break;
 801a27a:	e014      	b.n	801a2a6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	795b      	ldrb	r3, [r3, #5]
 801a280:	2b0c      	cmp	r3, #12
 801a282:	d906      	bls.n	801a292 <dhcp_network_changed+0x52>
 801a284:	4b09      	ldr	r3, [pc, #36]	; (801a2ac <dhcp_network_changed+0x6c>)
 801a286:	f240 326d 	movw	r2, #877	; 0x36d
 801a28a:	4909      	ldr	r1, [pc, #36]	; (801a2b0 <dhcp_network_changed+0x70>)
 801a28c:	4809      	ldr	r0, [pc, #36]	; (801a2b4 <dhcp_network_changed+0x74>)
 801a28e:	f004 fdc9 	bl	801ee24 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801a292:	68fb      	ldr	r3, [r7, #12]
 801a294:	2200      	movs	r2, #0
 801a296:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f000 f8af 	bl	801a3fc <dhcp_discover>
      break;
 801a29e:	e002      	b.n	801a2a6 <dhcp_network_changed+0x66>
    return;
 801a2a0:	bf00      	nop
 801a2a2:	e000      	b.n	801a2a6 <dhcp_network_changed+0x66>
      break;
 801a2a4:	bf00      	nop
  }
}
 801a2a6:	3710      	adds	r7, #16
 801a2a8:	46bd      	mov	sp, r7
 801a2aa:	bd80      	pop	{r7, pc}
 801a2ac:	08023aec 	.word	0x08023aec
 801a2b0:	08023c38 	.word	0x08023c38
 801a2b4:	08023b4c 	.word	0x08023b4c

0801a2b8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b084      	sub	sp, #16
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	6078      	str	r0, [r7, #4]
 801a2c0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d107      	bne.n	801a2d8 <dhcp_arp_reply+0x20>
 801a2c8:	4b0e      	ldr	r3, [pc, #56]	; (801a304 <dhcp_arp_reply+0x4c>)
 801a2ca:	f240 328b 	movw	r2, #907	; 0x38b
 801a2ce:	490e      	ldr	r1, [pc, #56]	; (801a308 <dhcp_arp_reply+0x50>)
 801a2d0:	480e      	ldr	r0, [pc, #56]	; (801a30c <dhcp_arp_reply+0x54>)
 801a2d2:	f004 fda7 	bl	801ee24 <iprintf>
 801a2d6:	e012      	b.n	801a2fe <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2dc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d00c      	beq.n	801a2fe <dhcp_arp_reply+0x46>
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	795b      	ldrb	r3, [r3, #5]
 801a2e8:	2b08      	cmp	r3, #8
 801a2ea:	d108      	bne.n	801a2fe <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	681a      	ldr	r2, [r3, #0]
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	69db      	ldr	r3, [r3, #28]
 801a2f4:	429a      	cmp	r2, r3
 801a2f6:	d102      	bne.n	801a2fe <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801a2f8:	6878      	ldr	r0, [r7, #4]
 801a2fa:	f000 f809 	bl	801a310 <dhcp_decline>
    }
  }
}
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}
 801a304:	08023aec 	.word	0x08023aec
 801a308:	08023bd0 	.word	0x08023bd0
 801a30c:	08023b4c 	.word	0x08023b4c

0801a310 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801a310:	b5b0      	push	{r4, r5, r7, lr}
 801a312:	b08a      	sub	sp, #40	; 0x28
 801a314:	af02      	add	r7, sp, #8
 801a316:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801a31e:	210c      	movs	r1, #12
 801a320:	69b8      	ldr	r0, [r7, #24]
 801a322:	f000 fc6f 	bl	801ac04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801a326:	f107 030c 	add.w	r3, r7, #12
 801a32a:	2204      	movs	r2, #4
 801a32c:	69b9      	ldr	r1, [r7, #24]
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f001 f8f4 	bl	801b51c <dhcp_create_msg>
 801a334:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a336:	697b      	ldr	r3, [r7, #20]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d035      	beq.n	801a3a8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a33c:	697b      	ldr	r3, [r7, #20]
 801a33e:	685b      	ldr	r3, [r3, #4]
 801a340:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a342:	89b8      	ldrh	r0, [r7, #12]
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a34a:	2304      	movs	r3, #4
 801a34c:	2232      	movs	r2, #50	; 0x32
 801a34e:	f000 fc73 	bl	801ac38 <dhcp_option>
 801a352:	4603      	mov	r3, r0
 801a354:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a356:	89bc      	ldrh	r4, [r7, #12]
 801a358:	693b      	ldr	r3, [r7, #16]
 801a35a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a35e:	69bb      	ldr	r3, [r7, #24]
 801a360:	69db      	ldr	r3, [r3, #28]
 801a362:	4618      	mov	r0, r3
 801a364:	f7f6 fdab 	bl	8010ebe <lwip_htonl>
 801a368:	4603      	mov	r3, r0
 801a36a:	461a      	mov	r2, r3
 801a36c:	4629      	mov	r1, r5
 801a36e:	4620      	mov	r0, r4
 801a370:	f000 fcee 	bl	801ad50 <dhcp_option_long>
 801a374:	4603      	mov	r3, r0
 801a376:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a378:	89b8      	ldrh	r0, [r7, #12]
 801a37a:	693b      	ldr	r3, [r7, #16]
 801a37c:	33f0      	adds	r3, #240	; 0xf0
 801a37e:	697a      	ldr	r2, [r7, #20]
 801a380:	4619      	mov	r1, r3
 801a382:	f001 f9a1 	bl	801b6c8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a386:	4b19      	ldr	r3, [pc, #100]	; (801a3ec <dhcp_decline+0xdc>)
 801a388:	6818      	ldr	r0, [r3, #0]
 801a38a:	4b19      	ldr	r3, [pc, #100]	; (801a3f0 <dhcp_decline+0xe0>)
 801a38c:	9301      	str	r3, [sp, #4]
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	9300      	str	r3, [sp, #0]
 801a392:	2343      	movs	r3, #67	; 0x43
 801a394:	4a17      	ldr	r2, [pc, #92]	; (801a3f4 <dhcp_decline+0xe4>)
 801a396:	6979      	ldr	r1, [r7, #20]
 801a398:	f7ff f8ac 	bl	80194f4 <udp_sendto_if_src>
 801a39c:	4603      	mov	r3, r0
 801a39e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a3a0:	6978      	ldr	r0, [r7, #20]
 801a3a2:	f7f8 f9ad 	bl	8012700 <pbuf_free>
 801a3a6:	e001      	b.n	801a3ac <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a3a8:	23ff      	movs	r3, #255	; 0xff
 801a3aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a3ac:	69bb      	ldr	r3, [r7, #24]
 801a3ae:	799b      	ldrb	r3, [r3, #6]
 801a3b0:	2bff      	cmp	r3, #255	; 0xff
 801a3b2:	d005      	beq.n	801a3c0 <dhcp_decline+0xb0>
    dhcp->tries++;
 801a3b4:	69bb      	ldr	r3, [r7, #24]
 801a3b6:	799b      	ldrb	r3, [r3, #6]
 801a3b8:	3301      	adds	r3, #1
 801a3ba:	b2da      	uxtb	r2, r3
 801a3bc:	69bb      	ldr	r3, [r7, #24]
 801a3be:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801a3c0:	f242 7310 	movw	r3, #10000	; 0x2710
 801a3c4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a3c6:	89fb      	ldrh	r3, [r7, #14]
 801a3c8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a3cc:	4a0a      	ldr	r2, [pc, #40]	; (801a3f8 <dhcp_decline+0xe8>)
 801a3ce:	fb82 1203 	smull	r1, r2, r2, r3
 801a3d2:	1152      	asrs	r2, r2, #5
 801a3d4:	17db      	asrs	r3, r3, #31
 801a3d6:	1ad3      	subs	r3, r2, r3
 801a3d8:	b29a      	uxth	r2, r3
 801a3da:	69bb      	ldr	r3, [r7, #24]
 801a3dc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a3de:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	3720      	adds	r7, #32
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bdb0      	pop	{r4, r5, r7, pc}
 801a3ea:	bf00      	nop
 801a3ec:	2000c920 	.word	0x2000c920
 801a3f0:	08024784 	.word	0x08024784
 801a3f4:	08024788 	.word	0x08024788
 801a3f8:	10624dd3 	.word	0x10624dd3

0801a3fc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b08a      	sub	sp, #40	; 0x28
 801a400:	af02      	add	r7, sp, #8
 801a402:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a408:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801a40a:	2300      	movs	r3, #0
 801a40c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801a40e:	69bb      	ldr	r3, [r7, #24]
 801a410:	2200      	movs	r2, #0
 801a412:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801a414:	2106      	movs	r1, #6
 801a416:	69b8      	ldr	r0, [r7, #24]
 801a418:	f000 fbf4 	bl	801ac04 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801a41c:	f107 0308 	add.w	r3, r7, #8
 801a420:	2201      	movs	r2, #1
 801a422:	69b9      	ldr	r1, [r7, #24]
 801a424:	6878      	ldr	r0, [r7, #4]
 801a426:	f001 f879 	bl	801b51c <dhcp_create_msg>
 801a42a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801a42c:	693b      	ldr	r3, [r7, #16]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d04b      	beq.n	801a4ca <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	685b      	ldr	r3, [r3, #4]
 801a436:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a438:	8938      	ldrh	r0, [r7, #8]
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a440:	2302      	movs	r3, #2
 801a442:	2239      	movs	r2, #57	; 0x39
 801a444:	f000 fbf8 	bl	801ac38 <dhcp_option>
 801a448:	4603      	mov	r3, r0
 801a44a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a44c:	8938      	ldrh	r0, [r7, #8]
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a458:	461a      	mov	r2, r3
 801a45a:	f000 fc47 	bl	801acec <dhcp_option_short>
 801a45e:	4603      	mov	r3, r0
 801a460:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a462:	8938      	ldrh	r0, [r7, #8]
 801a464:	68fb      	ldr	r3, [r7, #12]
 801a466:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a46a:	2303      	movs	r3, #3
 801a46c:	2237      	movs	r2, #55	; 0x37
 801a46e:	f000 fbe3 	bl	801ac38 <dhcp_option>
 801a472:	4603      	mov	r3, r0
 801a474:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a476:	2300      	movs	r3, #0
 801a478:	77fb      	strb	r3, [r7, #31]
 801a47a:	e00e      	b.n	801a49a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a47c:	8938      	ldrh	r0, [r7, #8]
 801a47e:	68fb      	ldr	r3, [r7, #12]
 801a480:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a484:	7ffb      	ldrb	r3, [r7, #31]
 801a486:	4a29      	ldr	r2, [pc, #164]	; (801a52c <dhcp_discover+0x130>)
 801a488:	5cd3      	ldrb	r3, [r2, r3]
 801a48a:	461a      	mov	r2, r3
 801a48c:	f000 fc08 	bl	801aca0 <dhcp_option_byte>
 801a490:	4603      	mov	r3, r0
 801a492:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a494:	7ffb      	ldrb	r3, [r7, #31]
 801a496:	3301      	adds	r3, #1
 801a498:	77fb      	strb	r3, [r7, #31]
 801a49a:	7ffb      	ldrb	r3, [r7, #31]
 801a49c:	2b02      	cmp	r3, #2
 801a49e:	d9ed      	bls.n	801a47c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a4a0:	8938      	ldrh	r0, [r7, #8]
 801a4a2:	68fb      	ldr	r3, [r7, #12]
 801a4a4:	33f0      	adds	r3, #240	; 0xf0
 801a4a6:	693a      	ldr	r2, [r7, #16]
 801a4a8:	4619      	mov	r1, r3
 801a4aa:	f001 f90d 	bl	801b6c8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801a4ae:	4b20      	ldr	r3, [pc, #128]	; (801a530 <dhcp_discover+0x134>)
 801a4b0:	6818      	ldr	r0, [r3, #0]
 801a4b2:	4b20      	ldr	r3, [pc, #128]	; (801a534 <dhcp_discover+0x138>)
 801a4b4:	9301      	str	r3, [sp, #4]
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	9300      	str	r3, [sp, #0]
 801a4ba:	2343      	movs	r3, #67	; 0x43
 801a4bc:	4a1e      	ldr	r2, [pc, #120]	; (801a538 <dhcp_discover+0x13c>)
 801a4be:	6939      	ldr	r1, [r7, #16]
 801a4c0:	f7ff f818 	bl	80194f4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801a4c4:	6938      	ldr	r0, [r7, #16]
 801a4c6:	f7f8 f91b 	bl	8012700 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801a4ca:	69bb      	ldr	r3, [r7, #24]
 801a4cc:	799b      	ldrb	r3, [r3, #6]
 801a4ce:	2bff      	cmp	r3, #255	; 0xff
 801a4d0:	d005      	beq.n	801a4de <dhcp_discover+0xe2>
    dhcp->tries++;
 801a4d2:	69bb      	ldr	r3, [r7, #24]
 801a4d4:	799b      	ldrb	r3, [r3, #6]
 801a4d6:	3301      	adds	r3, #1
 801a4d8:	b2da      	uxtb	r2, r3
 801a4da:	69bb      	ldr	r3, [r7, #24]
 801a4dc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801a4de:	69bb      	ldr	r3, [r7, #24]
 801a4e0:	799b      	ldrb	r3, [r3, #6]
 801a4e2:	2b05      	cmp	r3, #5
 801a4e4:	d80d      	bhi.n	801a502 <dhcp_discover+0x106>
 801a4e6:	69bb      	ldr	r3, [r7, #24]
 801a4e8:	799b      	ldrb	r3, [r3, #6]
 801a4ea:	461a      	mov	r2, r3
 801a4ec:	2301      	movs	r3, #1
 801a4ee:	4093      	lsls	r3, r2
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	461a      	mov	r2, r3
 801a4f4:	0152      	lsls	r2, r2, #5
 801a4f6:	1ad2      	subs	r2, r2, r3
 801a4f8:	0092      	lsls	r2, r2, #2
 801a4fa:	4413      	add	r3, r2
 801a4fc:	00db      	lsls	r3, r3, #3
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	e001      	b.n	801a506 <dhcp_discover+0x10a>
 801a502:	f64e 2360 	movw	r3, #60000	; 0xea60
 801a506:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a508:	897b      	ldrh	r3, [r7, #10]
 801a50a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a50e:	4a0b      	ldr	r2, [pc, #44]	; (801a53c <dhcp_discover+0x140>)
 801a510:	fb82 1203 	smull	r1, r2, r2, r3
 801a514:	1152      	asrs	r2, r2, #5
 801a516:	17db      	asrs	r3, r3, #31
 801a518:	1ad3      	subs	r3, r2, r3
 801a51a:	b29a      	uxth	r2, r3
 801a51c:	69bb      	ldr	r3, [r7, #24]
 801a51e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a520:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a524:	4618      	mov	r0, r3
 801a526:	3720      	adds	r7, #32
 801a528:	46bd      	mov	sp, r7
 801a52a:	bd80      	pop	{r7, pc}
 801a52c:	20000030 	.word	0x20000030
 801a530:	2000c920 	.word	0x2000c920
 801a534:	08024784 	.word	0x08024784
 801a538:	08024788 	.word	0x08024788
 801a53c:	10624dd3 	.word	0x10624dd3

0801a540 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801a540:	b580      	push	{r7, lr}
 801a542:	b088      	sub	sp, #32
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d107      	bne.n	801a55e <dhcp_bind+0x1e>
 801a54e:	4b64      	ldr	r3, [pc, #400]	; (801a6e0 <dhcp_bind+0x1a0>)
 801a550:	f240 4215 	movw	r2, #1045	; 0x415
 801a554:	4963      	ldr	r1, [pc, #396]	; (801a6e4 <dhcp_bind+0x1a4>)
 801a556:	4864      	ldr	r0, [pc, #400]	; (801a6e8 <dhcp_bind+0x1a8>)
 801a558:	f004 fc64 	bl	801ee24 <iprintf>
 801a55c:	e0bc      	b.n	801a6d8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a562:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801a564:	69bb      	ldr	r3, [r7, #24]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d107      	bne.n	801a57a <dhcp_bind+0x3a>
 801a56a:	4b5d      	ldr	r3, [pc, #372]	; (801a6e0 <dhcp_bind+0x1a0>)
 801a56c:	f240 4217 	movw	r2, #1047	; 0x417
 801a570:	495e      	ldr	r1, [pc, #376]	; (801a6ec <dhcp_bind+0x1ac>)
 801a572:	485d      	ldr	r0, [pc, #372]	; (801a6e8 <dhcp_bind+0x1a8>)
 801a574:	f004 fc56 	bl	801ee24 <iprintf>
 801a578:	e0ae      	b.n	801a6d8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801a57a:	69bb      	ldr	r3, [r7, #24]
 801a57c:	2200      	movs	r2, #0
 801a57e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801a580:	69bb      	ldr	r3, [r7, #24]
 801a582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a588:	d019      	beq.n	801a5be <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a58e:	331e      	adds	r3, #30
 801a590:	4a57      	ldr	r2, [pc, #348]	; (801a6f0 <dhcp_bind+0x1b0>)
 801a592:	fba2 2303 	umull	r2, r3, r2, r3
 801a596:	095b      	lsrs	r3, r3, #5
 801a598:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a59a:	69fb      	ldr	r3, [r7, #28]
 801a59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a5a0:	d302      	bcc.n	801a5a8 <dhcp_bind+0x68>
      timeout = 0xffff;
 801a5a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801a5a8:	69fb      	ldr	r3, [r7, #28]
 801a5aa:	b29a      	uxth	r2, r3
 801a5ac:	69bb      	ldr	r3, [r7, #24]
 801a5ae:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801a5b0:	69bb      	ldr	r3, [r7, #24]
 801a5b2:	8a9b      	ldrh	r3, [r3, #20]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d102      	bne.n	801a5be <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801a5b8:	69bb      	ldr	r3, [r7, #24]
 801a5ba:	2201      	movs	r2, #1
 801a5bc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801a5be:	69bb      	ldr	r3, [r7, #24]
 801a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a5c6:	d01d      	beq.n	801a604 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a5c8:	69bb      	ldr	r3, [r7, #24]
 801a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a5cc:	331e      	adds	r3, #30
 801a5ce:	4a48      	ldr	r2, [pc, #288]	; (801a6f0 <dhcp_bind+0x1b0>)
 801a5d0:	fba2 2303 	umull	r2, r3, r2, r3
 801a5d4:	095b      	lsrs	r3, r3, #5
 801a5d6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a5d8:	69fb      	ldr	r3, [r7, #28]
 801a5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a5de:	d302      	bcc.n	801a5e6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801a5e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a5e4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801a5e6:	69fb      	ldr	r3, [r7, #28]
 801a5e8:	b29a      	uxth	r2, r3
 801a5ea:	69bb      	ldr	r3, [r7, #24]
 801a5ec:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801a5ee:	69bb      	ldr	r3, [r7, #24]
 801a5f0:	895b      	ldrh	r3, [r3, #10]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d102      	bne.n	801a5fc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801a5f6:	69bb      	ldr	r3, [r7, #24]
 801a5f8:	2201      	movs	r2, #1
 801a5fa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801a5fc:	69bb      	ldr	r3, [r7, #24]
 801a5fe:	895a      	ldrh	r2, [r3, #10]
 801a600:	69bb      	ldr	r3, [r7, #24]
 801a602:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801a604:	69bb      	ldr	r3, [r7, #24]
 801a606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a60c:	d01d      	beq.n	801a64a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801a60e:	69bb      	ldr	r3, [r7, #24]
 801a610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a612:	331e      	adds	r3, #30
 801a614:	4a36      	ldr	r2, [pc, #216]	; (801a6f0 <dhcp_bind+0x1b0>)
 801a616:	fba2 2303 	umull	r2, r3, r2, r3
 801a61a:	095b      	lsrs	r3, r3, #5
 801a61c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801a61e:	69fb      	ldr	r3, [r7, #28]
 801a620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a624:	d302      	bcc.n	801a62c <dhcp_bind+0xec>
      timeout = 0xffff;
 801a626:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a62a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801a62c:	69fb      	ldr	r3, [r7, #28]
 801a62e:	b29a      	uxth	r2, r3
 801a630:	69bb      	ldr	r3, [r7, #24]
 801a632:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801a634:	69bb      	ldr	r3, [r7, #24]
 801a636:	899b      	ldrh	r3, [r3, #12]
 801a638:	2b00      	cmp	r3, #0
 801a63a:	d102      	bne.n	801a642 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801a63c:	69bb      	ldr	r3, [r7, #24]
 801a63e:	2201      	movs	r2, #1
 801a640:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801a642:	69bb      	ldr	r3, [r7, #24]
 801a644:	899a      	ldrh	r2, [r3, #12]
 801a646:	69bb      	ldr	r3, [r7, #24]
 801a648:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801a64a:	69bb      	ldr	r3, [r7, #24]
 801a64c:	895a      	ldrh	r2, [r3, #10]
 801a64e:	69bb      	ldr	r3, [r7, #24]
 801a650:	899b      	ldrh	r3, [r3, #12]
 801a652:	429a      	cmp	r2, r3
 801a654:	d306      	bcc.n	801a664 <dhcp_bind+0x124>
 801a656:	69bb      	ldr	r3, [r7, #24]
 801a658:	899b      	ldrh	r3, [r3, #12]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d002      	beq.n	801a664 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801a65e:	69bb      	ldr	r3, [r7, #24]
 801a660:	2200      	movs	r2, #0
 801a662:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801a664:	69bb      	ldr	r3, [r7, #24]
 801a666:	79db      	ldrb	r3, [r3, #7]
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d003      	beq.n	801a674 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801a66c:	69bb      	ldr	r3, [r7, #24]
 801a66e:	6a1b      	ldr	r3, [r3, #32]
 801a670:	613b      	str	r3, [r7, #16]
 801a672:	e014      	b.n	801a69e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801a674:	69bb      	ldr	r3, [r7, #24]
 801a676:	331c      	adds	r3, #28
 801a678:	781b      	ldrb	r3, [r3, #0]
 801a67a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801a67c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a680:	2b00      	cmp	r3, #0
 801a682:	db02      	blt.n	801a68a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801a684:	23ff      	movs	r3, #255	; 0xff
 801a686:	613b      	str	r3, [r7, #16]
 801a688:	e009      	b.n	801a69e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801a68a:	7dfb      	ldrb	r3, [r7, #23]
 801a68c:	2bbf      	cmp	r3, #191	; 0xbf
 801a68e:	d903      	bls.n	801a698 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801a690:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801a694:	613b      	str	r3, [r7, #16]
 801a696:	e002      	b.n	801a69e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801a698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a69c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801a69e:	69bb      	ldr	r3, [r7, #24]
 801a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6a2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	d108      	bne.n	801a6bc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801a6aa:	69bb      	ldr	r3, [r7, #24]
 801a6ac:	69da      	ldr	r2, [r3, #28]
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	4013      	ands	r3, r2
 801a6b2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a6ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801a6bc:	210a      	movs	r1, #10
 801a6be:	69b8      	ldr	r0, [r7, #24]
 801a6c0:	f000 faa0 	bl	801ac04 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801a6c4:	69bb      	ldr	r3, [r7, #24]
 801a6c6:	f103 011c 	add.w	r1, r3, #28
 801a6ca:	f107 030c 	add.w	r3, r7, #12
 801a6ce:	f107 0210 	add.w	r2, r7, #16
 801a6d2:	6878      	ldr	r0, [r7, #4]
 801a6d4:	f7f7 face 	bl	8011c74 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801a6d8:	3720      	adds	r7, #32
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
 801a6de:	bf00      	nop
 801a6e0:	08023aec 	.word	0x08023aec
 801a6e4:	08023c4c 	.word	0x08023c4c
 801a6e8:	08023b4c 	.word	0x08023b4c
 801a6ec:	08023c68 	.word	0x08023c68
 801a6f0:	88888889 	.word	0x88888889

0801a6f4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	b08a      	sub	sp, #40	; 0x28
 801a6f8:	af02      	add	r7, sp, #8
 801a6fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a700:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801a702:	2105      	movs	r1, #5
 801a704:	69b8      	ldr	r0, [r7, #24]
 801a706:	f000 fa7d 	bl	801ac04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a70a:	f107 030c 	add.w	r3, r7, #12
 801a70e:	2203      	movs	r2, #3
 801a710:	69b9      	ldr	r1, [r7, #24]
 801a712:	6878      	ldr	r0, [r7, #4]
 801a714:	f000 ff02 	bl	801b51c <dhcp_create_msg>
 801a718:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a71a:	697b      	ldr	r3, [r7, #20]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d04e      	beq.n	801a7be <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	685b      	ldr	r3, [r3, #4]
 801a724:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a726:	89b8      	ldrh	r0, [r7, #12]
 801a728:	693b      	ldr	r3, [r7, #16]
 801a72a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a72e:	2302      	movs	r3, #2
 801a730:	2239      	movs	r2, #57	; 0x39
 801a732:	f000 fa81 	bl	801ac38 <dhcp_option>
 801a736:	4603      	mov	r3, r0
 801a738:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a73a:	89b8      	ldrh	r0, [r7, #12]
 801a73c:	693b      	ldr	r3, [r7, #16]
 801a73e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a746:	461a      	mov	r2, r3
 801a748:	f000 fad0 	bl	801acec <dhcp_option_short>
 801a74c:	4603      	mov	r3, r0
 801a74e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a750:	89b8      	ldrh	r0, [r7, #12]
 801a752:	693b      	ldr	r3, [r7, #16]
 801a754:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a758:	2303      	movs	r3, #3
 801a75a:	2237      	movs	r2, #55	; 0x37
 801a75c:	f000 fa6c 	bl	801ac38 <dhcp_option>
 801a760:	4603      	mov	r3, r0
 801a762:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a764:	2300      	movs	r3, #0
 801a766:	77bb      	strb	r3, [r7, #30]
 801a768:	e00e      	b.n	801a788 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a76a:	89b8      	ldrh	r0, [r7, #12]
 801a76c:	693b      	ldr	r3, [r7, #16]
 801a76e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a772:	7fbb      	ldrb	r3, [r7, #30]
 801a774:	4a2a      	ldr	r2, [pc, #168]	; (801a820 <dhcp_renew+0x12c>)
 801a776:	5cd3      	ldrb	r3, [r2, r3]
 801a778:	461a      	mov	r2, r3
 801a77a:	f000 fa91 	bl	801aca0 <dhcp_option_byte>
 801a77e:	4603      	mov	r3, r0
 801a780:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a782:	7fbb      	ldrb	r3, [r7, #30]
 801a784:	3301      	adds	r3, #1
 801a786:	77bb      	strb	r3, [r7, #30]
 801a788:	7fbb      	ldrb	r3, [r7, #30]
 801a78a:	2b02      	cmp	r3, #2
 801a78c:	d9ed      	bls.n	801a76a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a78e:	89b8      	ldrh	r0, [r7, #12]
 801a790:	693b      	ldr	r3, [r7, #16]
 801a792:	33f0      	adds	r3, #240	; 0xf0
 801a794:	697a      	ldr	r2, [r7, #20]
 801a796:	4619      	mov	r1, r3
 801a798:	f000 ff96 	bl	801b6c8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a79c:	4b21      	ldr	r3, [pc, #132]	; (801a824 <dhcp_renew+0x130>)
 801a79e:	6818      	ldr	r0, [r3, #0]
 801a7a0:	69bb      	ldr	r3, [r7, #24]
 801a7a2:	f103 0218 	add.w	r2, r3, #24
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	9300      	str	r3, [sp, #0]
 801a7aa:	2343      	movs	r3, #67	; 0x43
 801a7ac:	6979      	ldr	r1, [r7, #20]
 801a7ae:	f7fe fe2d 	bl	801940c <udp_sendto_if>
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a7b6:	6978      	ldr	r0, [r7, #20]
 801a7b8:	f7f7 ffa2 	bl	8012700 <pbuf_free>
 801a7bc:	e001      	b.n	801a7c2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a7be:	23ff      	movs	r3, #255	; 0xff
 801a7c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a7c2:	69bb      	ldr	r3, [r7, #24]
 801a7c4:	799b      	ldrb	r3, [r3, #6]
 801a7c6:	2bff      	cmp	r3, #255	; 0xff
 801a7c8:	d005      	beq.n	801a7d6 <dhcp_renew+0xe2>
    dhcp->tries++;
 801a7ca:	69bb      	ldr	r3, [r7, #24]
 801a7cc:	799b      	ldrb	r3, [r3, #6]
 801a7ce:	3301      	adds	r3, #1
 801a7d0:	b2da      	uxtb	r2, r3
 801a7d2:	69bb      	ldr	r3, [r7, #24]
 801a7d4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801a7d6:	69bb      	ldr	r3, [r7, #24]
 801a7d8:	799b      	ldrb	r3, [r3, #6]
 801a7da:	2b09      	cmp	r3, #9
 801a7dc:	d80a      	bhi.n	801a7f4 <dhcp_renew+0x100>
 801a7de:	69bb      	ldr	r3, [r7, #24]
 801a7e0:	799b      	ldrb	r3, [r3, #6]
 801a7e2:	b29b      	uxth	r3, r3
 801a7e4:	461a      	mov	r2, r3
 801a7e6:	0152      	lsls	r2, r2, #5
 801a7e8:	1ad2      	subs	r2, r2, r3
 801a7ea:	0092      	lsls	r2, r2, #2
 801a7ec:	4413      	add	r3, r2
 801a7ee:	011b      	lsls	r3, r3, #4
 801a7f0:	b29b      	uxth	r3, r3
 801a7f2:	e001      	b.n	801a7f8 <dhcp_renew+0x104>
 801a7f4:	f644 6320 	movw	r3, #20000	; 0x4e20
 801a7f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a7fa:	89fb      	ldrh	r3, [r7, #14]
 801a7fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a800:	4a09      	ldr	r2, [pc, #36]	; (801a828 <dhcp_renew+0x134>)
 801a802:	fb82 1203 	smull	r1, r2, r2, r3
 801a806:	1152      	asrs	r2, r2, #5
 801a808:	17db      	asrs	r3, r3, #31
 801a80a:	1ad3      	subs	r3, r2, r3
 801a80c:	b29a      	uxth	r2, r3
 801a80e:	69bb      	ldr	r3, [r7, #24]
 801a810:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a812:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a816:	4618      	mov	r0, r3
 801a818:	3720      	adds	r7, #32
 801a81a:	46bd      	mov	sp, r7
 801a81c:	bd80      	pop	{r7, pc}
 801a81e:	bf00      	nop
 801a820:	20000030 	.word	0x20000030
 801a824:	2000c920 	.word	0x2000c920
 801a828:	10624dd3 	.word	0x10624dd3

0801a82c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	b08a      	sub	sp, #40	; 0x28
 801a830:	af02      	add	r7, sp, #8
 801a832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a838:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801a83a:	2104      	movs	r1, #4
 801a83c:	69b8      	ldr	r0, [r7, #24]
 801a83e:	f000 f9e1 	bl	801ac04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a842:	f107 030c 	add.w	r3, r7, #12
 801a846:	2203      	movs	r2, #3
 801a848:	69b9      	ldr	r1, [r7, #24]
 801a84a:	6878      	ldr	r0, [r7, #4]
 801a84c:	f000 fe66 	bl	801b51c <dhcp_create_msg>
 801a850:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a852:	697b      	ldr	r3, [r7, #20]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d04c      	beq.n	801a8f2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a858:	697b      	ldr	r3, [r7, #20]
 801a85a:	685b      	ldr	r3, [r3, #4]
 801a85c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a85e:	89b8      	ldrh	r0, [r7, #12]
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a866:	2302      	movs	r3, #2
 801a868:	2239      	movs	r2, #57	; 0x39
 801a86a:	f000 f9e5 	bl	801ac38 <dhcp_option>
 801a86e:	4603      	mov	r3, r0
 801a870:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801a872:	89b8      	ldrh	r0, [r7, #12]
 801a874:	693b      	ldr	r3, [r7, #16]
 801a876:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a87e:	461a      	mov	r2, r3
 801a880:	f000 fa34 	bl	801acec <dhcp_option_short>
 801a884:	4603      	mov	r3, r0
 801a886:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a888:	89b8      	ldrh	r0, [r7, #12]
 801a88a:	693b      	ldr	r3, [r7, #16]
 801a88c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a890:	2303      	movs	r3, #3
 801a892:	2237      	movs	r2, #55	; 0x37
 801a894:	f000 f9d0 	bl	801ac38 <dhcp_option>
 801a898:	4603      	mov	r3, r0
 801a89a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a89c:	2300      	movs	r3, #0
 801a89e:	77bb      	strb	r3, [r7, #30]
 801a8a0:	e00e      	b.n	801a8c0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801a8a2:	89b8      	ldrh	r0, [r7, #12]
 801a8a4:	693b      	ldr	r3, [r7, #16]
 801a8a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a8aa:	7fbb      	ldrb	r3, [r7, #30]
 801a8ac:	4a29      	ldr	r2, [pc, #164]	; (801a954 <dhcp_rebind+0x128>)
 801a8ae:	5cd3      	ldrb	r3, [r2, r3]
 801a8b0:	461a      	mov	r2, r3
 801a8b2:	f000 f9f5 	bl	801aca0 <dhcp_option_byte>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801a8ba:	7fbb      	ldrb	r3, [r7, #30]
 801a8bc:	3301      	adds	r3, #1
 801a8be:	77bb      	strb	r3, [r7, #30]
 801a8c0:	7fbb      	ldrb	r3, [r7, #30]
 801a8c2:	2b02      	cmp	r3, #2
 801a8c4:	d9ed      	bls.n	801a8a2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801a8c6:	89b8      	ldrh	r0, [r7, #12]
 801a8c8:	693b      	ldr	r3, [r7, #16]
 801a8ca:	33f0      	adds	r3, #240	; 0xf0
 801a8cc:	697a      	ldr	r2, [r7, #20]
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	f000 fefa 	bl	801b6c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801a8d4:	4b20      	ldr	r3, [pc, #128]	; (801a958 <dhcp_rebind+0x12c>)
 801a8d6:	6818      	ldr	r0, [r3, #0]
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	9300      	str	r3, [sp, #0]
 801a8dc:	2343      	movs	r3, #67	; 0x43
 801a8de:	4a1f      	ldr	r2, [pc, #124]	; (801a95c <dhcp_rebind+0x130>)
 801a8e0:	6979      	ldr	r1, [r7, #20]
 801a8e2:	f7fe fd93 	bl	801940c <udp_sendto_if>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801a8ea:	6978      	ldr	r0, [r7, #20]
 801a8ec:	f7f7 ff08 	bl	8012700 <pbuf_free>
 801a8f0:	e001      	b.n	801a8f6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801a8f2:	23ff      	movs	r3, #255	; 0xff
 801a8f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801a8f6:	69bb      	ldr	r3, [r7, #24]
 801a8f8:	799b      	ldrb	r3, [r3, #6]
 801a8fa:	2bff      	cmp	r3, #255	; 0xff
 801a8fc:	d005      	beq.n	801a90a <dhcp_rebind+0xde>
    dhcp->tries++;
 801a8fe:	69bb      	ldr	r3, [r7, #24]
 801a900:	799b      	ldrb	r3, [r3, #6]
 801a902:	3301      	adds	r3, #1
 801a904:	b2da      	uxtb	r2, r3
 801a906:	69bb      	ldr	r3, [r7, #24]
 801a908:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801a90a:	69bb      	ldr	r3, [r7, #24]
 801a90c:	799b      	ldrb	r3, [r3, #6]
 801a90e:	2b09      	cmp	r3, #9
 801a910:	d80a      	bhi.n	801a928 <dhcp_rebind+0xfc>
 801a912:	69bb      	ldr	r3, [r7, #24]
 801a914:	799b      	ldrb	r3, [r3, #6]
 801a916:	b29b      	uxth	r3, r3
 801a918:	461a      	mov	r2, r3
 801a91a:	0152      	lsls	r2, r2, #5
 801a91c:	1ad2      	subs	r2, r2, r3
 801a91e:	0092      	lsls	r2, r2, #2
 801a920:	4413      	add	r3, r2
 801a922:	00db      	lsls	r3, r3, #3
 801a924:	b29b      	uxth	r3, r3
 801a926:	e001      	b.n	801a92c <dhcp_rebind+0x100>
 801a928:	f242 7310 	movw	r3, #10000	; 0x2710
 801a92c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801a92e:	89fb      	ldrh	r3, [r7, #14]
 801a930:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801a934:	4a0a      	ldr	r2, [pc, #40]	; (801a960 <dhcp_rebind+0x134>)
 801a936:	fb82 1203 	smull	r1, r2, r2, r3
 801a93a:	1152      	asrs	r2, r2, #5
 801a93c:	17db      	asrs	r3, r3, #31
 801a93e:	1ad3      	subs	r3, r2, r3
 801a940:	b29a      	uxth	r2, r3
 801a942:	69bb      	ldr	r3, [r7, #24]
 801a944:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801a946:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a94a:	4618      	mov	r0, r3
 801a94c:	3720      	adds	r7, #32
 801a94e:	46bd      	mov	sp, r7
 801a950:	bd80      	pop	{r7, pc}
 801a952:	bf00      	nop
 801a954:	20000030 	.word	0x20000030
 801a958:	2000c920 	.word	0x2000c920
 801a95c:	08024788 	.word	0x08024788
 801a960:	10624dd3 	.word	0x10624dd3

0801a964 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801a964:	b5b0      	push	{r4, r5, r7, lr}
 801a966:	b08a      	sub	sp, #40	; 0x28
 801a968:	af02      	add	r7, sp, #8
 801a96a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a970:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801a972:	2103      	movs	r1, #3
 801a974:	69b8      	ldr	r0, [r7, #24]
 801a976:	f000 f945 	bl	801ac04 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801a97a:	f107 030c 	add.w	r3, r7, #12
 801a97e:	2203      	movs	r2, #3
 801a980:	69b9      	ldr	r1, [r7, #24]
 801a982:	6878      	ldr	r0, [r7, #4]
 801a984:	f000 fdca 	bl	801b51c <dhcp_create_msg>
 801a988:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801a98a:	697b      	ldr	r3, [r7, #20]
 801a98c:	2b00      	cmp	r3, #0
 801a98e:	d066      	beq.n	801aa5e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	685b      	ldr	r3, [r3, #4]
 801a994:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801a996:	89b8      	ldrh	r0, [r7, #12]
 801a998:	693b      	ldr	r3, [r7, #16]
 801a99a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a99e:	2302      	movs	r3, #2
 801a9a0:	2239      	movs	r2, #57	; 0x39
 801a9a2:	f000 f949 	bl	801ac38 <dhcp_option>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801a9aa:	89b8      	ldrh	r0, [r7, #12]
 801a9ac:	693b      	ldr	r3, [r7, #16]
 801a9ae:	33f0      	adds	r3, #240	; 0xf0
 801a9b0:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	f000 f999 	bl	801acec <dhcp_option_short>
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801a9be:	89b8      	ldrh	r0, [r7, #12]
 801a9c0:	693b      	ldr	r3, [r7, #16]
 801a9c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a9c6:	2304      	movs	r3, #4
 801a9c8:	2232      	movs	r2, #50	; 0x32
 801a9ca:	f000 f935 	bl	801ac38 <dhcp_option>
 801a9ce:	4603      	mov	r3, r0
 801a9d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801a9d2:	89bc      	ldrh	r4, [r7, #12]
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801a9da:	69bb      	ldr	r3, [r7, #24]
 801a9dc:	69db      	ldr	r3, [r3, #28]
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f7f6 fa6d 	bl	8010ebe <lwip_htonl>
 801a9e4:	4603      	mov	r3, r0
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	4629      	mov	r1, r5
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f000 f9b0 	bl	801ad50 <dhcp_option_long>
 801a9f0:	4603      	mov	r3, r0
 801a9f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801a9f4:	89b8      	ldrh	r0, [r7, #12]
 801a9f6:	693b      	ldr	r3, [r7, #16]
 801a9f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801a9fc:	2303      	movs	r3, #3
 801a9fe:	2237      	movs	r2, #55	; 0x37
 801aa00:	f000 f91a 	bl	801ac38 <dhcp_option>
 801aa04:	4603      	mov	r3, r0
 801aa06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aa08:	2300      	movs	r3, #0
 801aa0a:	77bb      	strb	r3, [r7, #30]
 801aa0c:	e00e      	b.n	801aa2c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801aa0e:	89b8      	ldrh	r0, [r7, #12]
 801aa10:	693b      	ldr	r3, [r7, #16]
 801aa12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801aa16:	7fbb      	ldrb	r3, [r7, #30]
 801aa18:	4a29      	ldr	r2, [pc, #164]	; (801aac0 <dhcp_reboot+0x15c>)
 801aa1a:	5cd3      	ldrb	r3, [r2, r3]
 801aa1c:	461a      	mov	r2, r3
 801aa1e:	f000 f93f 	bl	801aca0 <dhcp_option_byte>
 801aa22:	4603      	mov	r3, r0
 801aa24:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801aa26:	7fbb      	ldrb	r3, [r7, #30]
 801aa28:	3301      	adds	r3, #1
 801aa2a:	77bb      	strb	r3, [r7, #30]
 801aa2c:	7fbb      	ldrb	r3, [r7, #30]
 801aa2e:	2b02      	cmp	r3, #2
 801aa30:	d9ed      	bls.n	801aa0e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801aa32:	89b8      	ldrh	r0, [r7, #12]
 801aa34:	693b      	ldr	r3, [r7, #16]
 801aa36:	33f0      	adds	r3, #240	; 0xf0
 801aa38:	697a      	ldr	r2, [r7, #20]
 801aa3a:	4619      	mov	r1, r3
 801aa3c:	f000 fe44 	bl	801b6c8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801aa40:	4b20      	ldr	r3, [pc, #128]	; (801aac4 <dhcp_reboot+0x160>)
 801aa42:	6818      	ldr	r0, [r3, #0]
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	2343      	movs	r3, #67	; 0x43
 801aa4a:	4a1f      	ldr	r2, [pc, #124]	; (801aac8 <dhcp_reboot+0x164>)
 801aa4c:	6979      	ldr	r1, [r7, #20]
 801aa4e:	f7fe fcdd 	bl	801940c <udp_sendto_if>
 801aa52:	4603      	mov	r3, r0
 801aa54:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801aa56:	6978      	ldr	r0, [r7, #20]
 801aa58:	f7f7 fe52 	bl	8012700 <pbuf_free>
 801aa5c:	e001      	b.n	801aa62 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801aa5e:	23ff      	movs	r3, #255	; 0xff
 801aa60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801aa62:	69bb      	ldr	r3, [r7, #24]
 801aa64:	799b      	ldrb	r3, [r3, #6]
 801aa66:	2bff      	cmp	r3, #255	; 0xff
 801aa68:	d005      	beq.n	801aa76 <dhcp_reboot+0x112>
    dhcp->tries++;
 801aa6a:	69bb      	ldr	r3, [r7, #24]
 801aa6c:	799b      	ldrb	r3, [r3, #6]
 801aa6e:	3301      	adds	r3, #1
 801aa70:	b2da      	uxtb	r2, r3
 801aa72:	69bb      	ldr	r3, [r7, #24]
 801aa74:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801aa76:	69bb      	ldr	r3, [r7, #24]
 801aa78:	799b      	ldrb	r3, [r3, #6]
 801aa7a:	2b09      	cmp	r3, #9
 801aa7c:	d80a      	bhi.n	801aa94 <dhcp_reboot+0x130>
 801aa7e:	69bb      	ldr	r3, [r7, #24]
 801aa80:	799b      	ldrb	r3, [r3, #6]
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	461a      	mov	r2, r3
 801aa86:	0152      	lsls	r2, r2, #5
 801aa88:	1ad2      	subs	r2, r2, r3
 801aa8a:	0092      	lsls	r2, r2, #2
 801aa8c:	4413      	add	r3, r2
 801aa8e:	00db      	lsls	r3, r3, #3
 801aa90:	b29b      	uxth	r3, r3
 801aa92:	e001      	b.n	801aa98 <dhcp_reboot+0x134>
 801aa94:	f242 7310 	movw	r3, #10000	; 0x2710
 801aa98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801aa9a:	89fb      	ldrh	r3, [r7, #14]
 801aa9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801aaa0:	4a0a      	ldr	r2, [pc, #40]	; (801aacc <dhcp_reboot+0x168>)
 801aaa2:	fb82 1203 	smull	r1, r2, r2, r3
 801aaa6:	1152      	asrs	r2, r2, #5
 801aaa8:	17db      	asrs	r3, r3, #31
 801aaaa:	1ad3      	subs	r3, r2, r3
 801aaac:	b29a      	uxth	r2, r3
 801aaae:	69bb      	ldr	r3, [r7, #24]
 801aab0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801aab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3720      	adds	r7, #32
 801aaba:	46bd      	mov	sp, r7
 801aabc:	bdb0      	pop	{r4, r5, r7, pc}
 801aabe:	bf00      	nop
 801aac0:	20000030 	.word	0x20000030
 801aac4:	2000c920 	.word	0x2000c920
 801aac8:	08024788 	.word	0x08024788
 801aacc:	10624dd3 	.word	0x10624dd3

0801aad0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801aad0:	b5b0      	push	{r4, r5, r7, lr}
 801aad2:	b08a      	sub	sp, #40	; 0x28
 801aad4:	af02      	add	r7, sp, #8
 801aad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aadc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801aade:	69fb      	ldr	r3, [r7, #28]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	f000 8084 	beq.w	801abee <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801aae6:	69fb      	ldr	r3, [r7, #28]
 801aae8:	795b      	ldrb	r3, [r3, #5]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	f000 8081 	beq.w	801abf2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801aaf0:	69fb      	ldr	r3, [r7, #28]
 801aaf2:	699b      	ldr	r3, [r3, #24]
 801aaf4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801aaf6:	69fb      	ldr	r3, [r7, #28]
 801aaf8:	2200      	movs	r2, #0
 801aafa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801aafc:	69fb      	ldr	r3, [r7, #28]
 801aafe:	2200      	movs	r2, #0
 801ab00:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801ab02:	69fb      	ldr	r3, [r7, #28]
 801ab04:	2200      	movs	r2, #0
 801ab06:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801ab08:	69fb      	ldr	r3, [r7, #28]
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801ab0e:	69fb      	ldr	r3, [r7, #28]
 801ab10:	2200      	movs	r2, #0
 801ab12:	631a      	str	r2, [r3, #48]	; 0x30
 801ab14:	69fb      	ldr	r3, [r7, #28]
 801ab16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801ab18:	69fb      	ldr	r3, [r7, #28]
 801ab1a:	62da      	str	r2, [r3, #44]	; 0x2c
 801ab1c:	69fb      	ldr	r3, [r7, #28]
 801ab1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801ab20:	69fb      	ldr	r3, [r7, #28]
 801ab22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801ab24:	69fb      	ldr	r3, [r7, #28]
 801ab26:	2200      	movs	r2, #0
 801ab28:	829a      	strh	r2, [r3, #20]
 801ab2a:	69fb      	ldr	r3, [r7, #28]
 801ab2c:	8a9a      	ldrh	r2, [r3, #20]
 801ab2e:	69fb      	ldr	r3, [r7, #28]
 801ab30:	825a      	strh	r2, [r3, #18]
 801ab32:	69fb      	ldr	r3, [r7, #28]
 801ab34:	8a5a      	ldrh	r2, [r3, #18]
 801ab36:	69fb      	ldr	r3, [r7, #28]
 801ab38:	821a      	strh	r2, [r3, #16]
 801ab3a:	69fb      	ldr	r3, [r7, #28]
 801ab3c:	8a1a      	ldrh	r2, [r3, #16]
 801ab3e:	69fb      	ldr	r3, [r7, #28]
 801ab40:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801ab42:	6878      	ldr	r0, [r7, #4]
 801ab44:	f000 fdee 	bl	801b724 <dhcp_supplied_address>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d03b      	beq.n	801abc6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801ab4e:	f107 030e 	add.w	r3, r7, #14
 801ab52:	2207      	movs	r2, #7
 801ab54:	69f9      	ldr	r1, [r7, #28]
 801ab56:	6878      	ldr	r0, [r7, #4]
 801ab58:	f000 fce0 	bl	801b51c <dhcp_create_msg>
 801ab5c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801ab5e:	69bb      	ldr	r3, [r7, #24]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d030      	beq.n	801abc6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ab64:	69bb      	ldr	r3, [r7, #24]
 801ab66:	685b      	ldr	r3, [r3, #4]
 801ab68:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801ab6a:	89f8      	ldrh	r0, [r7, #14]
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801ab72:	2304      	movs	r3, #4
 801ab74:	2236      	movs	r2, #54	; 0x36
 801ab76:	f000 f85f 	bl	801ac38 <dhcp_option>
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801ab7e:	89fc      	ldrh	r4, [r7, #14]
 801ab80:	697b      	ldr	r3, [r7, #20]
 801ab82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801ab86:	693b      	ldr	r3, [r7, #16]
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7f6 f998 	bl	8010ebe <lwip_htonl>
 801ab8e:	4603      	mov	r3, r0
 801ab90:	461a      	mov	r2, r3
 801ab92:	4629      	mov	r1, r5
 801ab94:	4620      	mov	r0, r4
 801ab96:	f000 f8db 	bl	801ad50 <dhcp_option_long>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ab9e:	89f8      	ldrh	r0, [r7, #14]
 801aba0:	697b      	ldr	r3, [r7, #20]
 801aba2:	33f0      	adds	r3, #240	; 0xf0
 801aba4:	69ba      	ldr	r2, [r7, #24]
 801aba6:	4619      	mov	r1, r3
 801aba8:	f000 fd8e 	bl	801b6c8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801abac:	4b13      	ldr	r3, [pc, #76]	; (801abfc <dhcp_release_and_stop+0x12c>)
 801abae:	6818      	ldr	r0, [r3, #0]
 801abb0:	f107 0210 	add.w	r2, r7, #16
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	9300      	str	r3, [sp, #0]
 801abb8:	2343      	movs	r3, #67	; 0x43
 801abba:	69b9      	ldr	r1, [r7, #24]
 801abbc:	f7fe fc26 	bl	801940c <udp_sendto_if>
      pbuf_free(p_out);
 801abc0:	69b8      	ldr	r0, [r7, #24]
 801abc2:	f7f7 fd9d 	bl	8012700 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801abc6:	4b0e      	ldr	r3, [pc, #56]	; (801ac00 <dhcp_release_and_stop+0x130>)
 801abc8:	4a0d      	ldr	r2, [pc, #52]	; (801ac00 <dhcp_release_and_stop+0x130>)
 801abca:	490d      	ldr	r1, [pc, #52]	; (801ac00 <dhcp_release_and_stop+0x130>)
 801abcc:	6878      	ldr	r0, [r7, #4]
 801abce:	f7f7 f851 	bl	8011c74 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801abd2:	2100      	movs	r1, #0
 801abd4:	69f8      	ldr	r0, [r7, #28]
 801abd6:	f000 f815 	bl	801ac04 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801abda:	69fb      	ldr	r3, [r7, #28]
 801abdc:	791b      	ldrb	r3, [r3, #4]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d008      	beq.n	801abf4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801abe2:	f7fe ff85 	bl	8019af0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801abe6:	69fb      	ldr	r3, [r7, #28]
 801abe8:	2200      	movs	r2, #0
 801abea:	711a      	strb	r2, [r3, #4]
 801abec:	e002      	b.n	801abf4 <dhcp_release_and_stop+0x124>
    return;
 801abee:	bf00      	nop
 801abf0:	e000      	b.n	801abf4 <dhcp_release_and_stop+0x124>
    return;
 801abf2:	bf00      	nop
  }
}
 801abf4:	3720      	adds	r7, #32
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bdb0      	pop	{r4, r5, r7, pc}
 801abfa:	bf00      	nop
 801abfc:	2000c920 	.word	0x2000c920
 801ac00:	08024784 	.word	0x08024784

0801ac04 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801ac04:	b480      	push	{r7}
 801ac06:	b083      	sub	sp, #12
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
 801ac0c:	460b      	mov	r3, r1
 801ac0e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	795b      	ldrb	r3, [r3, #5]
 801ac14:	78fa      	ldrb	r2, [r7, #3]
 801ac16:	429a      	cmp	r2, r3
 801ac18:	d008      	beq.n	801ac2c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	78fa      	ldrb	r2, [r7, #3]
 801ac1e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2200      	movs	r2, #0
 801ac24:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	2200      	movs	r2, #0
 801ac2a:	811a      	strh	r2, [r3, #8]
  }
}
 801ac2c:	bf00      	nop
 801ac2e:	370c      	adds	r7, #12
 801ac30:	46bd      	mov	sp, r7
 801ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac36:	4770      	bx	lr

0801ac38 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	b082      	sub	sp, #8
 801ac3c:	af00      	add	r7, sp, #0
 801ac3e:	6039      	str	r1, [r7, #0]
 801ac40:	4611      	mov	r1, r2
 801ac42:	461a      	mov	r2, r3
 801ac44:	4603      	mov	r3, r0
 801ac46:	80fb      	strh	r3, [r7, #6]
 801ac48:	460b      	mov	r3, r1
 801ac4a:	717b      	strb	r3, [r7, #5]
 801ac4c:	4613      	mov	r3, r2
 801ac4e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ac50:	88fa      	ldrh	r2, [r7, #6]
 801ac52:	793b      	ldrb	r3, [r7, #4]
 801ac54:	4413      	add	r3, r2
 801ac56:	3302      	adds	r3, #2
 801ac58:	2b44      	cmp	r3, #68	; 0x44
 801ac5a:	d906      	bls.n	801ac6a <dhcp_option+0x32>
 801ac5c:	4b0d      	ldr	r3, [pc, #52]	; (801ac94 <dhcp_option+0x5c>)
 801ac5e:	f240 529a 	movw	r2, #1434	; 0x59a
 801ac62:	490d      	ldr	r1, [pc, #52]	; (801ac98 <dhcp_option+0x60>)
 801ac64:	480d      	ldr	r0, [pc, #52]	; (801ac9c <dhcp_option+0x64>)
 801ac66:	f004 f8dd 	bl	801ee24 <iprintf>
  options[options_out_len++] = option_type;
 801ac6a:	88fb      	ldrh	r3, [r7, #6]
 801ac6c:	1c5a      	adds	r2, r3, #1
 801ac6e:	80fa      	strh	r2, [r7, #6]
 801ac70:	461a      	mov	r2, r3
 801ac72:	683b      	ldr	r3, [r7, #0]
 801ac74:	4413      	add	r3, r2
 801ac76:	797a      	ldrb	r2, [r7, #5]
 801ac78:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801ac7a:	88fb      	ldrh	r3, [r7, #6]
 801ac7c:	1c5a      	adds	r2, r3, #1
 801ac7e:	80fa      	strh	r2, [r7, #6]
 801ac80:	461a      	mov	r2, r3
 801ac82:	683b      	ldr	r3, [r7, #0]
 801ac84:	4413      	add	r3, r2
 801ac86:	793a      	ldrb	r2, [r7, #4]
 801ac88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ac8a:	88fb      	ldrh	r3, [r7, #6]
}
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}
 801ac94:	08023aec 	.word	0x08023aec
 801ac98:	08023c80 	.word	0x08023c80
 801ac9c:	08023b4c 	.word	0x08023b4c

0801aca0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801aca0:	b580      	push	{r7, lr}
 801aca2:	b082      	sub	sp, #8
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	4603      	mov	r3, r0
 801aca8:	6039      	str	r1, [r7, #0]
 801acaa:	80fb      	strh	r3, [r7, #6]
 801acac:	4613      	mov	r3, r2
 801acae:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801acb0:	88fb      	ldrh	r3, [r7, #6]
 801acb2:	2b43      	cmp	r3, #67	; 0x43
 801acb4:	d906      	bls.n	801acc4 <dhcp_option_byte+0x24>
 801acb6:	4b0a      	ldr	r3, [pc, #40]	; (801ace0 <dhcp_option_byte+0x40>)
 801acb8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801acbc:	4909      	ldr	r1, [pc, #36]	; (801ace4 <dhcp_option_byte+0x44>)
 801acbe:	480a      	ldr	r0, [pc, #40]	; (801ace8 <dhcp_option_byte+0x48>)
 801acc0:	f004 f8b0 	bl	801ee24 <iprintf>
  options[options_out_len++] = value;
 801acc4:	88fb      	ldrh	r3, [r7, #6]
 801acc6:	1c5a      	adds	r2, r3, #1
 801acc8:	80fa      	strh	r2, [r7, #6]
 801acca:	461a      	mov	r2, r3
 801accc:	683b      	ldr	r3, [r7, #0]
 801acce:	4413      	add	r3, r2
 801acd0:	797a      	ldrb	r2, [r7, #5]
 801acd2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801acd4:	88fb      	ldrh	r3, [r7, #6]
}
 801acd6:	4618      	mov	r0, r3
 801acd8:	3708      	adds	r7, #8
 801acda:	46bd      	mov	sp, r7
 801acdc:	bd80      	pop	{r7, pc}
 801acde:	bf00      	nop
 801ace0:	08023aec 	.word	0x08023aec
 801ace4:	08023cc4 	.word	0x08023cc4
 801ace8:	08023b4c 	.word	0x08023b4c

0801acec <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801acec:	b580      	push	{r7, lr}
 801acee:	b082      	sub	sp, #8
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	4603      	mov	r3, r0
 801acf4:	6039      	str	r1, [r7, #0]
 801acf6:	80fb      	strh	r3, [r7, #6]
 801acf8:	4613      	mov	r3, r2
 801acfa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801acfc:	88fb      	ldrh	r3, [r7, #6]
 801acfe:	3302      	adds	r3, #2
 801ad00:	2b44      	cmp	r3, #68	; 0x44
 801ad02:	d906      	bls.n	801ad12 <dhcp_option_short+0x26>
 801ad04:	4b0f      	ldr	r3, [pc, #60]	; (801ad44 <dhcp_option_short+0x58>)
 801ad06:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801ad0a:	490f      	ldr	r1, [pc, #60]	; (801ad48 <dhcp_option_short+0x5c>)
 801ad0c:	480f      	ldr	r0, [pc, #60]	; (801ad4c <dhcp_option_short+0x60>)
 801ad0e:	f004 f889 	bl	801ee24 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801ad12:	88bb      	ldrh	r3, [r7, #4]
 801ad14:	0a1b      	lsrs	r3, r3, #8
 801ad16:	b29a      	uxth	r2, r3
 801ad18:	88fb      	ldrh	r3, [r7, #6]
 801ad1a:	1c59      	adds	r1, r3, #1
 801ad1c:	80f9      	strh	r1, [r7, #6]
 801ad1e:	4619      	mov	r1, r3
 801ad20:	683b      	ldr	r3, [r7, #0]
 801ad22:	440b      	add	r3, r1
 801ad24:	b2d2      	uxtb	r2, r2
 801ad26:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801ad28:	88fb      	ldrh	r3, [r7, #6]
 801ad2a:	1c5a      	adds	r2, r3, #1
 801ad2c:	80fa      	strh	r2, [r7, #6]
 801ad2e:	461a      	mov	r2, r3
 801ad30:	683b      	ldr	r3, [r7, #0]
 801ad32:	4413      	add	r3, r2
 801ad34:	88ba      	ldrh	r2, [r7, #4]
 801ad36:	b2d2      	uxtb	r2, r2
 801ad38:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ad3a:	88fb      	ldrh	r3, [r7, #6]
}
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3708      	adds	r7, #8
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	08023aec 	.word	0x08023aec
 801ad48:	08023cfc 	.word	0x08023cfc
 801ad4c:	08023b4c 	.word	0x08023b4c

0801ad50 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b084      	sub	sp, #16
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	4603      	mov	r3, r0
 801ad58:	60b9      	str	r1, [r7, #8]
 801ad5a:	607a      	str	r2, [r7, #4]
 801ad5c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ad5e:	89fb      	ldrh	r3, [r7, #14]
 801ad60:	3304      	adds	r3, #4
 801ad62:	2b44      	cmp	r3, #68	; 0x44
 801ad64:	d906      	bls.n	801ad74 <dhcp_option_long+0x24>
 801ad66:	4b19      	ldr	r3, [pc, #100]	; (801adcc <dhcp_option_long+0x7c>)
 801ad68:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801ad6c:	4918      	ldr	r1, [pc, #96]	; (801add0 <dhcp_option_long+0x80>)
 801ad6e:	4819      	ldr	r0, [pc, #100]	; (801add4 <dhcp_option_long+0x84>)
 801ad70:	f004 f858 	bl	801ee24 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	0e1a      	lsrs	r2, r3, #24
 801ad78:	89fb      	ldrh	r3, [r7, #14]
 801ad7a:	1c59      	adds	r1, r3, #1
 801ad7c:	81f9      	strh	r1, [r7, #14]
 801ad7e:	4619      	mov	r1, r3
 801ad80:	68bb      	ldr	r3, [r7, #8]
 801ad82:	440b      	add	r3, r1
 801ad84:	b2d2      	uxtb	r2, r2
 801ad86:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	0c1a      	lsrs	r2, r3, #16
 801ad8c:	89fb      	ldrh	r3, [r7, #14]
 801ad8e:	1c59      	adds	r1, r3, #1
 801ad90:	81f9      	strh	r1, [r7, #14]
 801ad92:	4619      	mov	r1, r3
 801ad94:	68bb      	ldr	r3, [r7, #8]
 801ad96:	440b      	add	r3, r1
 801ad98:	b2d2      	uxtb	r2, r2
 801ad9a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	0a1a      	lsrs	r2, r3, #8
 801ada0:	89fb      	ldrh	r3, [r7, #14]
 801ada2:	1c59      	adds	r1, r3, #1
 801ada4:	81f9      	strh	r1, [r7, #14]
 801ada6:	4619      	mov	r1, r3
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	440b      	add	r3, r1
 801adac:	b2d2      	uxtb	r2, r2
 801adae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801adb0:	89fb      	ldrh	r3, [r7, #14]
 801adb2:	1c5a      	adds	r2, r3, #1
 801adb4:	81fa      	strh	r2, [r7, #14]
 801adb6:	461a      	mov	r2, r3
 801adb8:	68bb      	ldr	r3, [r7, #8]
 801adba:	4413      	add	r3, r2
 801adbc:	687a      	ldr	r2, [r7, #4]
 801adbe:	b2d2      	uxtb	r2, r2
 801adc0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801adc2:	89fb      	ldrh	r3, [r7, #14]
}
 801adc4:	4618      	mov	r0, r3
 801adc6:	3710      	adds	r7, #16
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd80      	pop	{r7, pc}
 801adcc:	08023aec 	.word	0x08023aec
 801add0:	08023d38 	.word	0x08023d38
 801add4:	08023b4c 	.word	0x08023b4c

0801add8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801add8:	b580      	push	{r7, lr}
 801adda:	b090      	sub	sp, #64	; 0x40
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
 801ade0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801ade2:	2300      	movs	r3, #0
 801ade4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801ade6:	2300      	movs	r3, #0
 801ade8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801adea:	2208      	movs	r2, #8
 801adec:	2100      	movs	r1, #0
 801adee:	48b5      	ldr	r0, [pc, #724]	; (801b0c4 <dhcp_parse_reply+0x2ec>)
 801adf0:	f004 f96e 	bl	801f0d0 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	895b      	ldrh	r3, [r3, #10]
 801adf8:	2b2b      	cmp	r3, #43	; 0x2b
 801adfa:	d802      	bhi.n	801ae02 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801adfc:	f06f 0301 	mvn.w	r3, #1
 801ae00:	e2a7      	b.n	801b352 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	685b      	ldr	r3, [r3, #4]
 801ae06:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801ae08:	23f0      	movs	r3, #240	; 0xf0
 801ae0a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	891b      	ldrh	r3, [r3, #8]
 801ae10:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801ae16:	e00c      	b.n	801ae32 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1a:	895b      	ldrh	r3, [r3, #10]
 801ae1c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ae1e:	1ad3      	subs	r3, r2, r3
 801ae20:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ae22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae24:	895b      	ldrh	r3, [r3, #10]
 801ae26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801ae28:	1ad3      	subs	r3, r2, r3
 801ae2a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801ae2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801ae32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d004      	beq.n	801ae42 <dhcp_parse_reply+0x6a>
 801ae38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae3a:	895b      	ldrh	r3, [r3, #10]
 801ae3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801ae3e:	429a      	cmp	r2, r3
 801ae40:	d2ea      	bcs.n	801ae18 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801ae42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d102      	bne.n	801ae4e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801ae48:	f06f 0301 	mvn.w	r3, #1
 801ae4c:	e281      	b.n	801b352 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801ae4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ae50:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801ae52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801ae54:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae58:	685b      	ldr	r3, [r3, #4]
 801ae5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ae5c:	e239      	b.n	801b2d2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801ae5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ae62:	4413      	add	r3, r2
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801ae68:	2300      	movs	r3, #0
 801ae6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801ae6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ae72:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801ae74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae76:	3302      	adds	r3, #2
 801ae78:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801ae7a:	8bfa      	ldrh	r2, [r7, #30]
 801ae7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae7e:	429a      	cmp	r2, r3
 801ae80:	d202      	bcs.n	801ae88 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801ae82:	f06f 0301 	mvn.w	r3, #1
 801ae86:	e264      	b.n	801b352 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801ae88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae8a:	3301      	adds	r3, #1
 801ae8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae8e:	8952      	ldrh	r2, [r2, #10]
 801ae90:	4293      	cmp	r3, r2
 801ae92:	da07      	bge.n	801aea4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801ae94:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae96:	3301      	adds	r3, #1
 801ae98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801ae9a:	4413      	add	r3, r2
 801ae9c:	781b      	ldrb	r3, [r3, #0]
 801ae9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aea2:	e00b      	b.n	801aebc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801aea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d004      	beq.n	801aeb6 <dhcp_parse_reply+0xde>
 801aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	685b      	ldr	r3, [r3, #4]
 801aeb2:	781b      	ldrb	r3, [r3, #0]
 801aeb4:	e000      	b.n	801aeb8 <dhcp_parse_reply+0xe0>
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801aebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801aec4:	7dfb      	ldrb	r3, [r7, #23]
 801aec6:	2b3b      	cmp	r3, #59	; 0x3b
 801aec8:	f200 812c 	bhi.w	801b124 <dhcp_parse_reply+0x34c>
 801aecc:	a201      	add	r2, pc, #4	; (adr r2, 801aed4 <dhcp_parse_reply+0xfc>)
 801aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801aed2:	bf00      	nop
 801aed4:	0801afc5 	.word	0x0801afc5
 801aed8:	0801afd5 	.word	0x0801afd5
 801aedc:	0801b125 	.word	0x0801b125
 801aee0:	0801aff7 	.word	0x0801aff7
 801aee4:	0801b125 	.word	0x0801b125
 801aee8:	0801b125 	.word	0x0801b125
 801aeec:	0801b125 	.word	0x0801b125
 801aef0:	0801b125 	.word	0x0801b125
 801aef4:	0801b125 	.word	0x0801b125
 801aef8:	0801b125 	.word	0x0801b125
 801aefc:	0801b125 	.word	0x0801b125
 801af00:	0801b125 	.word	0x0801b125
 801af04:	0801b125 	.word	0x0801b125
 801af08:	0801b125 	.word	0x0801b125
 801af0c:	0801b125 	.word	0x0801b125
 801af10:	0801b125 	.word	0x0801b125
 801af14:	0801b125 	.word	0x0801b125
 801af18:	0801b125 	.word	0x0801b125
 801af1c:	0801b125 	.word	0x0801b125
 801af20:	0801b125 	.word	0x0801b125
 801af24:	0801b125 	.word	0x0801b125
 801af28:	0801b125 	.word	0x0801b125
 801af2c:	0801b125 	.word	0x0801b125
 801af30:	0801b125 	.word	0x0801b125
 801af34:	0801b125 	.word	0x0801b125
 801af38:	0801b125 	.word	0x0801b125
 801af3c:	0801b125 	.word	0x0801b125
 801af40:	0801b125 	.word	0x0801b125
 801af44:	0801b125 	.word	0x0801b125
 801af48:	0801b125 	.word	0x0801b125
 801af4c:	0801b125 	.word	0x0801b125
 801af50:	0801b125 	.word	0x0801b125
 801af54:	0801b125 	.word	0x0801b125
 801af58:	0801b125 	.word	0x0801b125
 801af5c:	0801b125 	.word	0x0801b125
 801af60:	0801b125 	.word	0x0801b125
 801af64:	0801b125 	.word	0x0801b125
 801af68:	0801b125 	.word	0x0801b125
 801af6c:	0801b125 	.word	0x0801b125
 801af70:	0801b125 	.word	0x0801b125
 801af74:	0801b125 	.word	0x0801b125
 801af78:	0801b125 	.word	0x0801b125
 801af7c:	0801b125 	.word	0x0801b125
 801af80:	0801b125 	.word	0x0801b125
 801af84:	0801b125 	.word	0x0801b125
 801af88:	0801b125 	.word	0x0801b125
 801af8c:	0801b125 	.word	0x0801b125
 801af90:	0801b125 	.word	0x0801b125
 801af94:	0801b125 	.word	0x0801b125
 801af98:	0801b125 	.word	0x0801b125
 801af9c:	0801b125 	.word	0x0801b125
 801afa0:	0801b023 	.word	0x0801b023
 801afa4:	0801b045 	.word	0x0801b045
 801afa8:	0801b081 	.word	0x0801b081
 801afac:	0801b0a3 	.word	0x0801b0a3
 801afb0:	0801b125 	.word	0x0801b125
 801afb4:	0801b125 	.word	0x0801b125
 801afb8:	0801b125 	.word	0x0801b125
 801afbc:	0801b0e1 	.word	0x0801b0e1
 801afc0:	0801b103 	.word	0x0801b103
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801afc4:	2300      	movs	r3, #0
 801afc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801afca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801afce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801afd2:	e0ab      	b.n	801b12c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801afd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801afd8:	2b04      	cmp	r3, #4
 801afda:	d009      	beq.n	801aff0 <dhcp_parse_reply+0x218>
 801afdc:	4b3a      	ldr	r3, [pc, #232]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801afde:	f240 622e 	movw	r2, #1582	; 0x62e
 801afe2:	493a      	ldr	r1, [pc, #232]	; (801b0cc <dhcp_parse_reply+0x2f4>)
 801afe4:	483a      	ldr	r0, [pc, #232]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801afe6:	f003 ff1d 	bl	801ee24 <iprintf>
 801afea:	f06f 0305 	mvn.w	r3, #5
 801afee:	e1b0      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801aff0:	2306      	movs	r3, #6
 801aff2:	623b      	str	r3, [r7, #32]
        break;
 801aff4:	e09a      	b.n	801b12c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801aff6:	2304      	movs	r3, #4
 801aff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801affc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b000:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b004:	429a      	cmp	r2, r3
 801b006:	d209      	bcs.n	801b01c <dhcp_parse_reply+0x244>
 801b008:	4b2f      	ldr	r3, [pc, #188]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b00a:	f240 6233 	movw	r2, #1587	; 0x633
 801b00e:	4931      	ldr	r1, [pc, #196]	; (801b0d4 <dhcp_parse_reply+0x2fc>)
 801b010:	482f      	ldr	r0, [pc, #188]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b012:	f003 ff07 	bl	801ee24 <iprintf>
 801b016:	f06f 0305 	mvn.w	r3, #5
 801b01a:	e19a      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801b01c:	2307      	movs	r3, #7
 801b01e:	623b      	str	r3, [r7, #32]
        break;
 801b020:	e084      	b.n	801b12c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b026:	2b04      	cmp	r3, #4
 801b028:	d009      	beq.n	801b03e <dhcp_parse_reply+0x266>
 801b02a:	4b27      	ldr	r3, [pc, #156]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b02c:	f240 6241 	movw	r2, #1601	; 0x641
 801b030:	4926      	ldr	r1, [pc, #152]	; (801b0cc <dhcp_parse_reply+0x2f4>)
 801b032:	4827      	ldr	r0, [pc, #156]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b034:	f003 fef6 	bl	801ee24 <iprintf>
 801b038:	f06f 0305 	mvn.w	r3, #5
 801b03c:	e189      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801b03e:	2303      	movs	r3, #3
 801b040:	623b      	str	r3, [r7, #32]
        break;
 801b042:	e073      	b.n	801b12c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b048:	2b01      	cmp	r3, #1
 801b04a:	d009      	beq.n	801b060 <dhcp_parse_reply+0x288>
 801b04c:	4b1e      	ldr	r3, [pc, #120]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b04e:	f240 624f 	movw	r2, #1615	; 0x64f
 801b052:	4921      	ldr	r1, [pc, #132]	; (801b0d8 <dhcp_parse_reply+0x300>)
 801b054:	481e      	ldr	r0, [pc, #120]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b056:	f003 fee5 	bl	801ee24 <iprintf>
 801b05a:	f06f 0305 	mvn.w	r3, #5
 801b05e:	e178      	b.n	801b352 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801b060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801b062:	2bf0      	cmp	r3, #240	; 0xf0
 801b064:	d009      	beq.n	801b07a <dhcp_parse_reply+0x2a2>
 801b066:	4b18      	ldr	r3, [pc, #96]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b068:	f240 6251 	movw	r2, #1617	; 0x651
 801b06c:	491b      	ldr	r1, [pc, #108]	; (801b0dc <dhcp_parse_reply+0x304>)
 801b06e:	4818      	ldr	r0, [pc, #96]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b070:	f003 fed8 	bl	801ee24 <iprintf>
 801b074:	f06f 0305 	mvn.w	r3, #5
 801b078:	e16b      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801b07a:	2300      	movs	r3, #0
 801b07c:	623b      	str	r3, [r7, #32]
        break;
 801b07e:	e055      	b.n	801b12c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801b080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b084:	2b01      	cmp	r3, #1
 801b086:	d009      	beq.n	801b09c <dhcp_parse_reply+0x2c4>
 801b088:	4b0f      	ldr	r3, [pc, #60]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b08a:	f240 6255 	movw	r2, #1621	; 0x655
 801b08e:	4912      	ldr	r1, [pc, #72]	; (801b0d8 <dhcp_parse_reply+0x300>)
 801b090:	480f      	ldr	r0, [pc, #60]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b092:	f003 fec7 	bl	801ee24 <iprintf>
 801b096:	f06f 0305 	mvn.w	r3, #5
 801b09a:	e15a      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801b09c:	2301      	movs	r3, #1
 801b09e:	623b      	str	r3, [r7, #32]
        break;
 801b0a0:	e044      	b.n	801b12c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b0a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b0a6:	2b04      	cmp	r3, #4
 801b0a8:	d009      	beq.n	801b0be <dhcp_parse_reply+0x2e6>
 801b0aa:	4b07      	ldr	r3, [pc, #28]	; (801b0c8 <dhcp_parse_reply+0x2f0>)
 801b0ac:	f240 6259 	movw	r2, #1625	; 0x659
 801b0b0:	4906      	ldr	r1, [pc, #24]	; (801b0cc <dhcp_parse_reply+0x2f4>)
 801b0b2:	4807      	ldr	r0, [pc, #28]	; (801b0d0 <dhcp_parse_reply+0x2f8>)
 801b0b4:	f003 feb6 	bl	801ee24 <iprintf>
 801b0b8:	f06f 0305 	mvn.w	r3, #5
 801b0bc:	e149      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801b0be:	2302      	movs	r3, #2
 801b0c0:	623b      	str	r3, [r7, #32]
        break;
 801b0c2:	e033      	b.n	801b12c <dhcp_parse_reply+0x354>
 801b0c4:	2000c918 	.word	0x2000c918
 801b0c8:	08023aec 	.word	0x08023aec
 801b0cc:	08023d74 	.word	0x08023d74
 801b0d0:	08023b4c 	.word	0x08023b4c
 801b0d4:	08023d80 	.word	0x08023d80
 801b0d8:	08023d94 	.word	0x08023d94
 801b0dc:	08023da0 	.word	0x08023da0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b0e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b0e4:	2b04      	cmp	r3, #4
 801b0e6:	d009      	beq.n	801b0fc <dhcp_parse_reply+0x324>
 801b0e8:	4b9c      	ldr	r3, [pc, #624]	; (801b35c <dhcp_parse_reply+0x584>)
 801b0ea:	f240 625d 	movw	r2, #1629	; 0x65d
 801b0ee:	499c      	ldr	r1, [pc, #624]	; (801b360 <dhcp_parse_reply+0x588>)
 801b0f0:	489c      	ldr	r0, [pc, #624]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b0f2:	f003 fe97 	bl	801ee24 <iprintf>
 801b0f6:	f06f 0305 	mvn.w	r3, #5
 801b0fa:	e12a      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801b0fc:	2304      	movs	r3, #4
 801b0fe:	623b      	str	r3, [r7, #32]
        break;
 801b100:	e014      	b.n	801b12c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801b102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b106:	2b04      	cmp	r3, #4
 801b108:	d009      	beq.n	801b11e <dhcp_parse_reply+0x346>
 801b10a:	4b94      	ldr	r3, [pc, #592]	; (801b35c <dhcp_parse_reply+0x584>)
 801b10c:	f240 6261 	movw	r2, #1633	; 0x661
 801b110:	4993      	ldr	r1, [pc, #588]	; (801b360 <dhcp_parse_reply+0x588>)
 801b112:	4894      	ldr	r0, [pc, #592]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b114:	f003 fe86 	bl	801ee24 <iprintf>
 801b118:	f06f 0305 	mvn.w	r3, #5
 801b11c:	e119      	b.n	801b352 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801b11e:	2305      	movs	r3, #5
 801b120:	623b      	str	r3, [r7, #32]
        break;
 801b122:	e003      	b.n	801b12c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801b124:	2300      	movs	r3, #0
 801b126:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801b12a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801b12c:	7dfb      	ldrb	r3, [r7, #23]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d103      	bne.n	801b13a <dhcp_parse_reply+0x362>
      offset++;
 801b132:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b134:	3301      	adds	r3, #1
 801b136:	877b      	strh	r3, [r7, #58]	; 0x3a
 801b138:	e0a1      	b.n	801b27e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801b13a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b140:	4413      	add	r3, r2
 801b142:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801b146:	4293      	cmp	r3, r2
 801b148:	dd02      	ble.n	801b150 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801b14a:	f06f 0301 	mvn.w	r3, #1
 801b14e:	e100      	b.n	801b352 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801b150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b154:	b29a      	uxth	r2, r3
 801b156:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b158:	4413      	add	r3, r2
 801b15a:	b29b      	uxth	r3, r3
 801b15c:	3302      	adds	r3, #2
 801b15e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801b160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b164:	2b00      	cmp	r3, #0
 801b166:	f000 808a 	beq.w	801b27e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801b16a:	2300      	movs	r3, #0
 801b16c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801b16e:	6a3b      	ldr	r3, [r7, #32]
 801b170:	2b00      	cmp	r3, #0
 801b172:	db02      	blt.n	801b17a <dhcp_parse_reply+0x3a2>
 801b174:	6a3b      	ldr	r3, [r7, #32]
 801b176:	2b07      	cmp	r3, #7
 801b178:	dd06      	ble.n	801b188 <dhcp_parse_reply+0x3b0>
 801b17a:	4b78      	ldr	r3, [pc, #480]	; (801b35c <dhcp_parse_reply+0x584>)
 801b17c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801b180:	4979      	ldr	r1, [pc, #484]	; (801b368 <dhcp_parse_reply+0x590>)
 801b182:	4878      	ldr	r0, [pc, #480]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b184:	f003 fe4e 	bl	801ee24 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801b188:	4a78      	ldr	r2, [pc, #480]	; (801b36c <dhcp_parse_reply+0x594>)
 801b18a:	6a3b      	ldr	r3, [r7, #32]
 801b18c:	4413      	add	r3, r2
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d174      	bne.n	801b27e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801b194:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b198:	2b04      	cmp	r3, #4
 801b19a:	bf28      	it	cs
 801b19c:	2304      	movcs	r3, #4
 801b19e:	b2db      	uxtb	r3, r3
 801b1a0:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801b1a2:	8bfb      	ldrh	r3, [r7, #30]
 801b1a4:	8aba      	ldrh	r2, [r7, #20]
 801b1a6:	f107 0108 	add.w	r1, r7, #8
 801b1aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b1ac:	f7f7 fcae 	bl	8012b0c <pbuf_copy_partial>
 801b1b0:	4603      	mov	r3, r0
 801b1b2:	461a      	mov	r2, r3
 801b1b4:	8abb      	ldrh	r3, [r7, #20]
 801b1b6:	4293      	cmp	r3, r2
 801b1b8:	d002      	beq.n	801b1c0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801b1ba:	f06f 0301 	mvn.w	r3, #1
 801b1be:	e0c8      	b.n	801b352 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801b1c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b1c4:	2b04      	cmp	r3, #4
 801b1c6:	d933      	bls.n	801b230 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801b1c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b1cc:	f003 0303 	and.w	r3, r3, #3
 801b1d0:	b2db      	uxtb	r3, r3
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d009      	beq.n	801b1ea <dhcp_parse_reply+0x412>
 801b1d6:	4b61      	ldr	r3, [pc, #388]	; (801b35c <dhcp_parse_reply+0x584>)
 801b1d8:	f240 6281 	movw	r2, #1665	; 0x681
 801b1dc:	4964      	ldr	r1, [pc, #400]	; (801b370 <dhcp_parse_reply+0x598>)
 801b1de:	4861      	ldr	r0, [pc, #388]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b1e0:	f003 fe20 	bl	801ee24 <iprintf>
 801b1e4:	f06f 0305 	mvn.w	r3, #5
 801b1e8:	e0b3      	b.n	801b352 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801b1ea:	4a60      	ldr	r2, [pc, #384]	; (801b36c <dhcp_parse_reply+0x594>)
 801b1ec:	6a3b      	ldr	r3, [r7, #32]
 801b1ee:	4413      	add	r3, r2
 801b1f0:	2201      	movs	r2, #1
 801b1f2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	f7f5 fe61 	bl	8010ebe <lwip_htonl>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	495d      	ldr	r1, [pc, #372]	; (801b374 <dhcp_parse_reply+0x59c>)
 801b200:	6a3b      	ldr	r3, [r7, #32]
 801b202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801b206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b20a:	3b04      	subs	r3, #4
 801b20c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801b210:	8bfb      	ldrh	r3, [r7, #30]
 801b212:	3304      	adds	r3, #4
 801b214:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801b216:	8a7a      	ldrh	r2, [r7, #18]
 801b218:	8bfb      	ldrh	r3, [r7, #30]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	d202      	bcs.n	801b224 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801b21e:	f06f 0301 	mvn.w	r3, #1
 801b222:	e096      	b.n	801b352 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801b224:	8a7b      	ldrh	r3, [r7, #18]
 801b226:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801b228:	6a3b      	ldr	r3, [r7, #32]
 801b22a:	3301      	adds	r3, #1
 801b22c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801b22e:	e79e      	b.n	801b16e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801b230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b234:	2b04      	cmp	r3, #4
 801b236:	d106      	bne.n	801b246 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	4618      	mov	r0, r3
 801b23c:	f7f5 fe3f 	bl	8010ebe <lwip_htonl>
 801b240:	4603      	mov	r3, r0
 801b242:	60bb      	str	r3, [r7, #8]
 801b244:	e011      	b.n	801b26a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801b246:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801b24a:	2b01      	cmp	r3, #1
 801b24c:	d009      	beq.n	801b262 <dhcp_parse_reply+0x48a>
 801b24e:	4b43      	ldr	r3, [pc, #268]	; (801b35c <dhcp_parse_reply+0x584>)
 801b250:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801b254:	4948      	ldr	r1, [pc, #288]	; (801b378 <dhcp_parse_reply+0x5a0>)
 801b256:	4843      	ldr	r0, [pc, #268]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b258:	f003 fde4 	bl	801ee24 <iprintf>
 801b25c:	f06f 0305 	mvn.w	r3, #5
 801b260:	e077      	b.n	801b352 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801b262:	f107 0308 	add.w	r3, r7, #8
 801b266:	781b      	ldrb	r3, [r3, #0]
 801b268:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801b26a:	4a40      	ldr	r2, [pc, #256]	; (801b36c <dhcp_parse_reply+0x594>)
 801b26c:	6a3b      	ldr	r3, [r7, #32]
 801b26e:	4413      	add	r3, r2
 801b270:	2201      	movs	r2, #1
 801b272:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801b274:	68ba      	ldr	r2, [r7, #8]
 801b276:	493f      	ldr	r1, [pc, #252]	; (801b374 <dhcp_parse_reply+0x59c>)
 801b278:	6a3b      	ldr	r3, [r7, #32]
 801b27a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801b27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b280:	895b      	ldrh	r3, [r3, #10]
 801b282:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b284:	429a      	cmp	r2, r3
 801b286:	d324      	bcc.n	801b2d2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801b288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b28a:	895b      	ldrh	r3, [r3, #10]
 801b28c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b28e:	1ad3      	subs	r3, r2, r3
 801b290:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801b292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b294:	895b      	ldrh	r3, [r3, #10]
 801b296:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801b298:	1ad3      	subs	r3, r2, r3
 801b29a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801b29c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b29e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b2a0:	429a      	cmp	r2, r3
 801b2a2:	d213      	bcs.n	801b2cc <dhcp_parse_reply+0x4f4>
        q = q->next;
 801b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2a6:	681b      	ldr	r3, [r3, #0]
 801b2a8:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801b2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2ac:	2b00      	cmp	r3, #0
 801b2ae:	d109      	bne.n	801b2c4 <dhcp_parse_reply+0x4ec>
 801b2b0:	4b2a      	ldr	r3, [pc, #168]	; (801b35c <dhcp_parse_reply+0x584>)
 801b2b2:	f240 629d 	movw	r2, #1693	; 0x69d
 801b2b6:	4931      	ldr	r1, [pc, #196]	; (801b37c <dhcp_parse_reply+0x5a4>)
 801b2b8:	482a      	ldr	r0, [pc, #168]	; (801b364 <dhcp_parse_reply+0x58c>)
 801b2ba:	f003 fdb3 	bl	801ee24 <iprintf>
 801b2be:	f06f 0305 	mvn.w	r3, #5
 801b2c2:	e046      	b.n	801b352 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801b2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2c6:	685b      	ldr	r3, [r3, #4]
 801b2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801b2ca:	e002      	b.n	801b2d2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801b2cc:	f06f 0301 	mvn.w	r3, #1
 801b2d0:	e03f      	b.n	801b352 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801b2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d00a      	beq.n	801b2ee <dhcp_parse_reply+0x516>
 801b2d8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801b2da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d206      	bcs.n	801b2ee <dhcp_parse_reply+0x516>
 801b2e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801b2e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b2e4:	4413      	add	r3, r2
 801b2e6:	781b      	ldrb	r3, [r3, #0]
 801b2e8:	2bff      	cmp	r3, #255	; 0xff
 801b2ea:	f47f adb8 	bne.w	801ae5e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801b2ee:	4b1f      	ldr	r3, [pc, #124]	; (801b36c <dhcp_parse_reply+0x594>)
 801b2f0:	781b      	ldrb	r3, [r3, #0]
 801b2f2:	2b00      	cmp	r3, #0
 801b2f4:	d018      	beq.n	801b328 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b2f6:	4b1f      	ldr	r3, [pc, #124]	; (801b374 <dhcp_parse_reply+0x59c>)
 801b2f8:	681b      	ldr	r3, [r3, #0]
 801b2fa:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801b2fc:	4b1b      	ldr	r3, [pc, #108]	; (801b36c <dhcp_parse_reply+0x594>)
 801b2fe:	2200      	movs	r2, #0
 801b300:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801b302:	68fb      	ldr	r3, [r7, #12]
 801b304:	2b01      	cmp	r3, #1
 801b306:	d102      	bne.n	801b30e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801b308:	2301      	movs	r3, #1
 801b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b30c:	e00c      	b.n	801b328 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	2b02      	cmp	r3, #2
 801b312:	d102      	bne.n	801b31a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801b314:	2301      	movs	r3, #1
 801b316:	62bb      	str	r3, [r7, #40]	; 0x28
 801b318:	e006      	b.n	801b328 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	2b03      	cmp	r3, #3
 801b31e:	d103      	bne.n	801b328 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801b320:	2301      	movs	r3, #1
 801b322:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801b324:	2301      	movs	r3, #1
 801b326:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801b328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d006      	beq.n	801b33c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801b32e:	2300      	movs	r3, #0
 801b330:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801b332:	236c      	movs	r3, #108	; 0x6c
 801b334:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801b336:	23ec      	movs	r3, #236	; 0xec
 801b338:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801b33a:	e56a      	b.n	801ae12 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b33e:	2b00      	cmp	r3, #0
 801b340:	d006      	beq.n	801b350 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801b342:	2300      	movs	r3, #0
 801b344:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801b346:	232c      	movs	r3, #44	; 0x2c
 801b348:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801b34a:	236c      	movs	r3, #108	; 0x6c
 801b34c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801b34e:	e560      	b.n	801ae12 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801b350:	2300      	movs	r3, #0
}
 801b352:	4618      	mov	r0, r3
 801b354:	3740      	adds	r7, #64	; 0x40
 801b356:	46bd      	mov	sp, r7
 801b358:	bd80      	pop	{r7, pc}
 801b35a:	bf00      	nop
 801b35c:	08023aec 	.word	0x08023aec
 801b360:	08023d74 	.word	0x08023d74
 801b364:	08023b4c 	.word	0x08023b4c
 801b368:	08023db8 	.word	0x08023db8
 801b36c:	2000c918 	.word	0x2000c918
 801b370:	08023dcc 	.word	0x08023dcc
 801b374:	2000c8f8 	.word	0x2000c8f8
 801b378:	08023de4 	.word	0x08023de4
 801b37c:	08023df8 	.word	0x08023df8

0801b380 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b08a      	sub	sp, #40	; 0x28
 801b384:	af00      	add	r7, sp, #0
 801b386:	60f8      	str	r0, [r7, #12]
 801b388:	60b9      	str	r1, [r7, #8]
 801b38a:	607a      	str	r2, [r7, #4]
 801b38c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801b38e:	4b60      	ldr	r3, [pc, #384]	; (801b510 <dhcp_recv+0x190>)
 801b390:	685b      	ldr	r3, [r3, #4]
 801b392:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b394:	6a3b      	ldr	r3, [r7, #32]
 801b396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b398:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	685b      	ldr	r3, [r3, #4]
 801b39e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801b3a0:	69fb      	ldr	r3, [r7, #28]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	f000 809d 	beq.w	801b4e2 <dhcp_recv+0x162>
 801b3a8:	69fb      	ldr	r3, [r7, #28]
 801b3aa:	791b      	ldrb	r3, [r3, #4]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	f000 8098 	beq.w	801b4e2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	895b      	ldrh	r3, [r3, #10]
 801b3b6:	2b2b      	cmp	r3, #43	; 0x2b
 801b3b8:	f240 8095 	bls.w	801b4e6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801b3bc:	69bb      	ldr	r3, [r7, #24]
 801b3be:	781b      	ldrb	r3, [r3, #0]
 801b3c0:	2b02      	cmp	r3, #2
 801b3c2:	f040 8092 	bne.w	801b4ea <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b3c6:	2300      	movs	r3, #0
 801b3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3cc:	e012      	b.n	801b3f4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801b3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3d2:	6a3a      	ldr	r2, [r7, #32]
 801b3d4:	4413      	add	r3, r2
 801b3d6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801b3da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3de:	69b9      	ldr	r1, [r7, #24]
 801b3e0:	440b      	add	r3, r1
 801b3e2:	7f1b      	ldrb	r3, [r3, #28]
 801b3e4:	429a      	cmp	r2, r3
 801b3e6:	f040 8082 	bne.w	801b4ee <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b3ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b3ee:	3301      	adds	r3, #1
 801b3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801b3f4:	6a3b      	ldr	r3, [r7, #32]
 801b3f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b3fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d203      	bcs.n	801b40a <dhcp_recv+0x8a>
 801b402:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801b406:	2b05      	cmp	r3, #5
 801b408:	d9e1      	bls.n	801b3ce <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801b40a:	69bb      	ldr	r3, [r7, #24]
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	4618      	mov	r0, r3
 801b410:	f7f5 fd55 	bl	8010ebe <lwip_htonl>
 801b414:	4602      	mov	r2, r0
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	429a      	cmp	r2, r3
 801b41c:	d169      	bne.n	801b4f2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801b41e:	69f9      	ldr	r1, [r7, #28]
 801b420:	6878      	ldr	r0, [r7, #4]
 801b422:	f7ff fcd9 	bl	801add8 <dhcp_parse_reply>
 801b426:	4603      	mov	r3, r0
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d164      	bne.n	801b4f6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801b42c:	4b39      	ldr	r3, [pc, #228]	; (801b514 <dhcp_recv+0x194>)
 801b42e:	785b      	ldrb	r3, [r3, #1]
 801b430:	2b00      	cmp	r3, #0
 801b432:	d062      	beq.n	801b4fa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	685b      	ldr	r3, [r3, #4]
 801b438:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801b43a:	4b37      	ldr	r3, [pc, #220]	; (801b518 <dhcp_recv+0x198>)
 801b43c:	685b      	ldr	r3, [r3, #4]
 801b43e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801b440:	7cfb      	ldrb	r3, [r7, #19]
 801b442:	2b05      	cmp	r3, #5
 801b444:	d12a      	bne.n	801b49c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b446:	69fb      	ldr	r3, [r7, #28]
 801b448:	795b      	ldrb	r3, [r3, #5]
 801b44a:	2b01      	cmp	r3, #1
 801b44c:	d112      	bne.n	801b474 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801b44e:	6979      	ldr	r1, [r7, #20]
 801b450:	6a38      	ldr	r0, [r7, #32]
 801b452:	f7fe fe17 	bl	801a084 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801b456:	6a3b      	ldr	r3, [r7, #32]
 801b458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801b45c:	f003 0308 	and.w	r3, r3, #8
 801b460:	2b00      	cmp	r3, #0
 801b462:	d003      	beq.n	801b46c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801b464:	6a38      	ldr	r0, [r7, #32]
 801b466:	f7fe fb87 	bl	8019b78 <dhcp_check>
 801b46a:	e049      	b.n	801b500 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801b46c:	6a38      	ldr	r0, [r7, #32]
 801b46e:	f7ff f867 	bl	801a540 <dhcp_bind>
 801b472:	e045      	b.n	801b500 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b474:	69fb      	ldr	r3, [r7, #28]
 801b476:	795b      	ldrb	r3, [r3, #5]
 801b478:	2b03      	cmp	r3, #3
 801b47a:	d007      	beq.n	801b48c <dhcp_recv+0x10c>
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	795b      	ldrb	r3, [r3, #5]
 801b480:	2b04      	cmp	r3, #4
 801b482:	d003      	beq.n	801b48c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801b484:	69fb      	ldr	r3, [r7, #28]
 801b486:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801b488:	2b05      	cmp	r3, #5
 801b48a:	d139      	bne.n	801b500 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801b48c:	6979      	ldr	r1, [r7, #20]
 801b48e:	6a38      	ldr	r0, [r7, #32]
 801b490:	f7fe fdf8 	bl	801a084 <dhcp_handle_ack>
      dhcp_bind(netif);
 801b494:	6a38      	ldr	r0, [r7, #32]
 801b496:	f7ff f853 	bl	801a540 <dhcp_bind>
 801b49a:	e031      	b.n	801b500 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801b49c:	7cfb      	ldrb	r3, [r7, #19]
 801b49e:	2b06      	cmp	r3, #6
 801b4a0:	d113      	bne.n	801b4ca <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b4a2:	69fb      	ldr	r3, [r7, #28]
 801b4a4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801b4a6:	2b03      	cmp	r3, #3
 801b4a8:	d00b      	beq.n	801b4c2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b4aa:	69fb      	ldr	r3, [r7, #28]
 801b4ac:	795b      	ldrb	r3, [r3, #5]
 801b4ae:	2b01      	cmp	r3, #1
 801b4b0:	d007      	beq.n	801b4c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b4b2:	69fb      	ldr	r3, [r7, #28]
 801b4b4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801b4b6:	2b04      	cmp	r3, #4
 801b4b8:	d003      	beq.n	801b4c2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801b4ba:	69fb      	ldr	r3, [r7, #28]
 801b4bc:	795b      	ldrb	r3, [r3, #5]
 801b4be:	2b05      	cmp	r3, #5
 801b4c0:	d103      	bne.n	801b4ca <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801b4c2:	6a38      	ldr	r0, [r7, #32]
 801b4c4:	f7fe fb3e 	bl	8019b44 <dhcp_handle_nak>
 801b4c8:	e01a      	b.n	801b500 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801b4ca:	7cfb      	ldrb	r3, [r7, #19]
 801b4cc:	2b02      	cmp	r3, #2
 801b4ce:	d116      	bne.n	801b4fe <dhcp_recv+0x17e>
 801b4d0:	69fb      	ldr	r3, [r7, #28]
 801b4d2:	795b      	ldrb	r3, [r3, #5]
 801b4d4:	2b06      	cmp	r3, #6
 801b4d6:	d112      	bne.n	801b4fe <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801b4d8:	6979      	ldr	r1, [r7, #20]
 801b4da:	6a38      	ldr	r0, [r7, #32]
 801b4dc:	f7fe fb80 	bl	8019be0 <dhcp_handle_offer>
 801b4e0:	e00e      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4e2:	bf00      	nop
 801b4e4:	e00c      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4e6:	bf00      	nop
 801b4e8:	e00a      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4ea:	bf00      	nop
 801b4ec:	e008      	b.n	801b500 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801b4ee:	bf00      	nop
 801b4f0:	e006      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4f2:	bf00      	nop
 801b4f4:	e004      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4f6:	bf00      	nop
 801b4f8:	e002      	b.n	801b500 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801b4fa:	bf00      	nop
 801b4fc:	e000      	b.n	801b500 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801b4fe:	bf00      	nop
  pbuf_free(p);
 801b500:	6878      	ldr	r0, [r7, #4]
 801b502:	f7f7 f8fd 	bl	8012700 <pbuf_free>
}
 801b506:	bf00      	nop
 801b508:	3728      	adds	r7, #40	; 0x28
 801b50a:	46bd      	mov	sp, r7
 801b50c:	bd80      	pop	{r7, pc}
 801b50e:	bf00      	nop
 801b510:	20009124 	.word	0x20009124
 801b514:	2000c918 	.word	0x2000c918
 801b518:	2000c8f8 	.word	0x2000c8f8

0801b51c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b088      	sub	sp, #32
 801b520:	af00      	add	r7, sp, #0
 801b522:	60f8      	str	r0, [r7, #12]
 801b524:	60b9      	str	r1, [r7, #8]
 801b526:	603b      	str	r3, [r7, #0]
 801b528:	4613      	mov	r3, r2
 801b52a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	2b00      	cmp	r3, #0
 801b530:	d108      	bne.n	801b544 <dhcp_create_msg+0x28>
 801b532:	4b5f      	ldr	r3, [pc, #380]	; (801b6b0 <dhcp_create_msg+0x194>)
 801b534:	f240 7269 	movw	r2, #1897	; 0x769
 801b538:	495e      	ldr	r1, [pc, #376]	; (801b6b4 <dhcp_create_msg+0x198>)
 801b53a:	485f      	ldr	r0, [pc, #380]	; (801b6b8 <dhcp_create_msg+0x19c>)
 801b53c:	f003 fc72 	bl	801ee24 <iprintf>
 801b540:	2300      	movs	r3, #0
 801b542:	e0b1      	b.n	801b6a8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801b544:	68bb      	ldr	r3, [r7, #8]
 801b546:	2b00      	cmp	r3, #0
 801b548:	d108      	bne.n	801b55c <dhcp_create_msg+0x40>
 801b54a:	4b59      	ldr	r3, [pc, #356]	; (801b6b0 <dhcp_create_msg+0x194>)
 801b54c:	f240 726a 	movw	r2, #1898	; 0x76a
 801b550:	495a      	ldr	r1, [pc, #360]	; (801b6bc <dhcp_create_msg+0x1a0>)
 801b552:	4859      	ldr	r0, [pc, #356]	; (801b6b8 <dhcp_create_msg+0x19c>)
 801b554:	f003 fc66 	bl	801ee24 <iprintf>
 801b558:	2300      	movs	r3, #0
 801b55a:	e0a5      	b.n	801b6a8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801b55c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b560:	f44f 719a 	mov.w	r1, #308	; 0x134
 801b564:	2036      	movs	r0, #54	; 0x36
 801b566:	f7f6 fde7 	bl	8012138 <pbuf_alloc>
 801b56a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801b56c:	69bb      	ldr	r3, [r7, #24]
 801b56e:	2b00      	cmp	r3, #0
 801b570:	d101      	bne.n	801b576 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801b572:	2300      	movs	r3, #0
 801b574:	e098      	b.n	801b6a8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801b576:	69bb      	ldr	r3, [r7, #24]
 801b578:	895b      	ldrh	r3, [r3, #10]
 801b57a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801b57e:	d206      	bcs.n	801b58e <dhcp_create_msg+0x72>
 801b580:	4b4b      	ldr	r3, [pc, #300]	; (801b6b0 <dhcp_create_msg+0x194>)
 801b582:	f240 7271 	movw	r2, #1905	; 0x771
 801b586:	494e      	ldr	r1, [pc, #312]	; (801b6c0 <dhcp_create_msg+0x1a4>)
 801b588:	484b      	ldr	r0, [pc, #300]	; (801b6b8 <dhcp_create_msg+0x19c>)
 801b58a:	f003 fc4b 	bl	801ee24 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801b58e:	79fb      	ldrb	r3, [r7, #7]
 801b590:	2b03      	cmp	r3, #3
 801b592:	d103      	bne.n	801b59c <dhcp_create_msg+0x80>
 801b594:	68bb      	ldr	r3, [r7, #8]
 801b596:	795b      	ldrb	r3, [r3, #5]
 801b598:	2b03      	cmp	r3, #3
 801b59a:	d10d      	bne.n	801b5b8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801b59c:	68bb      	ldr	r3, [r7, #8]
 801b59e:	799b      	ldrb	r3, [r3, #6]
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	d105      	bne.n	801b5b0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801b5a4:	f003 faa0 	bl	801eae8 <rand>
 801b5a8:	4603      	mov	r3, r0
 801b5aa:	461a      	mov	r2, r3
 801b5ac:	4b45      	ldr	r3, [pc, #276]	; (801b6c4 <dhcp_create_msg+0x1a8>)
 801b5ae:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801b5b0:	4b44      	ldr	r3, [pc, #272]	; (801b6c4 <dhcp_create_msg+0x1a8>)
 801b5b2:	681a      	ldr	r2, [r3, #0]
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801b5b8:	69bb      	ldr	r3, [r7, #24]
 801b5ba:	685b      	ldr	r3, [r3, #4]
 801b5bc:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801b5be:	f44f 729a 	mov.w	r2, #308	; 0x134
 801b5c2:	2100      	movs	r1, #0
 801b5c4:	6978      	ldr	r0, [r7, #20]
 801b5c6:	f003 fd83 	bl	801f0d0 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801b5ca:	697b      	ldr	r3, [r7, #20]
 801b5cc:	2201      	movs	r2, #1
 801b5ce:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801b5d0:	697b      	ldr	r3, [r7, #20]
 801b5d2:	2201      	movs	r2, #1
 801b5d4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801b5e0:	68bb      	ldr	r3, [r7, #8]
 801b5e2:	681b      	ldr	r3, [r3, #0]
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7f5 fc6a 	bl	8010ebe <lwip_htonl>
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	697b      	ldr	r3, [r7, #20]
 801b5ee:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801b5f0:	79fb      	ldrb	r3, [r7, #7]
 801b5f2:	2b08      	cmp	r3, #8
 801b5f4:	d010      	beq.n	801b618 <dhcp_create_msg+0xfc>
 801b5f6:	79fb      	ldrb	r3, [r7, #7]
 801b5f8:	2b04      	cmp	r3, #4
 801b5fa:	d00d      	beq.n	801b618 <dhcp_create_msg+0xfc>
 801b5fc:	79fb      	ldrb	r3, [r7, #7]
 801b5fe:	2b07      	cmp	r3, #7
 801b600:	d00a      	beq.n	801b618 <dhcp_create_msg+0xfc>
 801b602:	79fb      	ldrb	r3, [r7, #7]
 801b604:	2b03      	cmp	r3, #3
 801b606:	d10c      	bne.n	801b622 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b608:	68bb      	ldr	r3, [r7, #8]
 801b60a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801b60c:	2b05      	cmp	r3, #5
 801b60e:	d003      	beq.n	801b618 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	795b      	ldrb	r3, [r3, #5]
 801b614:	2b04      	cmp	r3, #4
 801b616:	d104      	bne.n	801b622 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801b618:	68fb      	ldr	r3, [r7, #12]
 801b61a:	3304      	adds	r3, #4
 801b61c:	681a      	ldr	r2, [r3, #0]
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b622:	2300      	movs	r3, #0
 801b624:	83fb      	strh	r3, [r7, #30]
 801b626:	e00c      	b.n	801b642 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801b628:	8bfa      	ldrh	r2, [r7, #30]
 801b62a:	8bfb      	ldrh	r3, [r7, #30]
 801b62c:	68f9      	ldr	r1, [r7, #12]
 801b62e:	440a      	add	r2, r1
 801b630:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801b634:	697a      	ldr	r2, [r7, #20]
 801b636:	4413      	add	r3, r2
 801b638:	460a      	mov	r2, r1
 801b63a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801b63c:	8bfb      	ldrh	r3, [r7, #30]
 801b63e:	3301      	adds	r3, #1
 801b640:	83fb      	strh	r3, [r7, #30]
 801b642:	8bfb      	ldrh	r3, [r7, #30]
 801b644:	2b05      	cmp	r3, #5
 801b646:	d9ef      	bls.n	801b628 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801b648:	697b      	ldr	r3, [r7, #20]
 801b64a:	2200      	movs	r2, #0
 801b64c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b650:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b654:	2200      	movs	r2, #0
 801b656:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801b65a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801b65e:	2200      	movs	r2, #0
 801b660:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801b664:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801b668:	2200      	movs	r2, #0
 801b66a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801b66e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801b672:	697b      	ldr	r3, [r7, #20]
 801b674:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b678:	2301      	movs	r3, #1
 801b67a:	2235      	movs	r2, #53	; 0x35
 801b67c:	2000      	movs	r0, #0
 801b67e:	f7ff fadb 	bl	801ac38 <dhcp_option>
 801b682:	4603      	mov	r3, r0
 801b684:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b68c:	79fa      	ldrb	r2, [r7, #7]
 801b68e:	8a7b      	ldrh	r3, [r7, #18]
 801b690:	4618      	mov	r0, r3
 801b692:	f7ff fb05 	bl	801aca0 <dhcp_option_byte>
 801b696:	4603      	mov	r3, r0
 801b698:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801b69a:	683b      	ldr	r3, [r7, #0]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d002      	beq.n	801b6a6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	8a7a      	ldrh	r2, [r7, #18]
 801b6a4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801b6a6:	69bb      	ldr	r3, [r7, #24]
}
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	3720      	adds	r7, #32
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	bd80      	pop	{r7, pc}
 801b6b0:	08023aec 	.word	0x08023aec
 801b6b4:	08023e0c 	.word	0x08023e0c
 801b6b8:	08023b4c 	.word	0x08023b4c
 801b6bc:	08023e2c 	.word	0x08023e2c
 801b6c0:	08023e4c 	.word	0x08023e4c
 801b6c4:	2000c928 	.word	0x2000c928

0801b6c8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b084      	sub	sp, #16
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	60b9      	str	r1, [r7, #8]
 801b6d2:	607a      	str	r2, [r7, #4]
 801b6d4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801b6d6:	89fb      	ldrh	r3, [r7, #14]
 801b6d8:	1c5a      	adds	r2, r3, #1
 801b6da:	81fa      	strh	r2, [r7, #14]
 801b6dc:	461a      	mov	r2, r3
 801b6de:	68bb      	ldr	r3, [r7, #8]
 801b6e0:	4413      	add	r3, r2
 801b6e2:	22ff      	movs	r2, #255	; 0xff
 801b6e4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b6e6:	e007      	b.n	801b6f8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801b6e8:	89fb      	ldrh	r3, [r7, #14]
 801b6ea:	1c5a      	adds	r2, r3, #1
 801b6ec:	81fa      	strh	r2, [r7, #14]
 801b6ee:	461a      	mov	r2, r3
 801b6f0:	68bb      	ldr	r3, [r7, #8]
 801b6f2:	4413      	add	r3, r2
 801b6f4:	2200      	movs	r2, #0
 801b6f6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801b6f8:	89fb      	ldrh	r3, [r7, #14]
 801b6fa:	2b43      	cmp	r3, #67	; 0x43
 801b6fc:	d904      	bls.n	801b708 <dhcp_option_trailer+0x40>
 801b6fe:	89fb      	ldrh	r3, [r7, #14]
 801b700:	f003 0303 	and.w	r3, r3, #3
 801b704:	2b00      	cmp	r3, #0
 801b706:	d002      	beq.n	801b70e <dhcp_option_trailer+0x46>
 801b708:	89fb      	ldrh	r3, [r7, #14]
 801b70a:	2b43      	cmp	r3, #67	; 0x43
 801b70c:	d9ec      	bls.n	801b6e8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801b70e:	89fb      	ldrh	r3, [r7, #14]
 801b710:	33f0      	adds	r3, #240	; 0xf0
 801b712:	b29b      	uxth	r3, r3
 801b714:	4619      	mov	r1, r3
 801b716:	6878      	ldr	r0, [r7, #4]
 801b718:	f7f6 fe6c 	bl	80123f4 <pbuf_realloc>
}
 801b71c:	bf00      	nop
 801b71e:	3710      	adds	r7, #16
 801b720:	46bd      	mov	sp, r7
 801b722:	bd80      	pop	{r7, pc}

0801b724 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801b724:	b480      	push	{r7}
 801b726:	b085      	sub	sp, #20
 801b728:	af00      	add	r7, sp, #0
 801b72a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d017      	beq.n	801b762 <dhcp_supplied_address+0x3e>
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b736:	2b00      	cmp	r3, #0
 801b738:	d013      	beq.n	801b762 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b73e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b740:	68fb      	ldr	r3, [r7, #12]
 801b742:	795b      	ldrb	r3, [r3, #5]
 801b744:	2b0a      	cmp	r3, #10
 801b746:	d007      	beq.n	801b758 <dhcp_supplied_address+0x34>
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	795b      	ldrb	r3, [r3, #5]
 801b74c:	2b05      	cmp	r3, #5
 801b74e:	d003      	beq.n	801b758 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801b754:	2b04      	cmp	r3, #4
 801b756:	d101      	bne.n	801b75c <dhcp_supplied_address+0x38>
 801b758:	2301      	movs	r3, #1
 801b75a:	e000      	b.n	801b75e <dhcp_supplied_address+0x3a>
 801b75c:	2300      	movs	r3, #0
 801b75e:	b2db      	uxtb	r3, r3
 801b760:	e000      	b.n	801b764 <dhcp_supplied_address+0x40>
  }
  return 0;
 801b762:	2300      	movs	r3, #0
}
 801b764:	4618      	mov	r0, r3
 801b766:	3714      	adds	r7, #20
 801b768:	46bd      	mov	sp, r7
 801b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b76e:	4770      	bx	lr

0801b770 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b082      	sub	sp, #8
 801b774:	af00      	add	r7, sp, #0
 801b776:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b778:	4915      	ldr	r1, [pc, #84]	; (801b7d0 <etharp_free_entry+0x60>)
 801b77a:	687a      	ldr	r2, [r7, #4]
 801b77c:	4613      	mov	r3, r2
 801b77e:	005b      	lsls	r3, r3, #1
 801b780:	4413      	add	r3, r2
 801b782:	00db      	lsls	r3, r3, #3
 801b784:	440b      	add	r3, r1
 801b786:	681b      	ldr	r3, [r3, #0]
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d013      	beq.n	801b7b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b78c:	4910      	ldr	r1, [pc, #64]	; (801b7d0 <etharp_free_entry+0x60>)
 801b78e:	687a      	ldr	r2, [r7, #4]
 801b790:	4613      	mov	r3, r2
 801b792:	005b      	lsls	r3, r3, #1
 801b794:	4413      	add	r3, r2
 801b796:	00db      	lsls	r3, r3, #3
 801b798:	440b      	add	r3, r1
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	4618      	mov	r0, r3
 801b79e:	f7f6 ffaf 	bl	8012700 <pbuf_free>
    arp_table[i].q = NULL;
 801b7a2:	490b      	ldr	r1, [pc, #44]	; (801b7d0 <etharp_free_entry+0x60>)
 801b7a4:	687a      	ldr	r2, [r7, #4]
 801b7a6:	4613      	mov	r3, r2
 801b7a8:	005b      	lsls	r3, r3, #1
 801b7aa:	4413      	add	r3, r2
 801b7ac:	00db      	lsls	r3, r3, #3
 801b7ae:	440b      	add	r3, r1
 801b7b0:	2200      	movs	r2, #0
 801b7b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b7b4:	4906      	ldr	r1, [pc, #24]	; (801b7d0 <etharp_free_entry+0x60>)
 801b7b6:	687a      	ldr	r2, [r7, #4]
 801b7b8:	4613      	mov	r3, r2
 801b7ba:	005b      	lsls	r3, r3, #1
 801b7bc:	4413      	add	r3, r2
 801b7be:	00db      	lsls	r3, r3, #3
 801b7c0:	440b      	add	r3, r1
 801b7c2:	3314      	adds	r3, #20
 801b7c4:	2200      	movs	r2, #0
 801b7c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b7c8:	bf00      	nop
 801b7ca:	3708      	adds	r7, #8
 801b7cc:	46bd      	mov	sp, r7
 801b7ce:	bd80      	pop	{r7, pc}
 801b7d0:	2000c92c 	.word	0x2000c92c

0801b7d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b082      	sub	sp, #8
 801b7d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b7da:	2300      	movs	r3, #0
 801b7dc:	607b      	str	r3, [r7, #4]
 801b7de:	e096      	b.n	801b90e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b7e0:	494f      	ldr	r1, [pc, #316]	; (801b920 <etharp_tmr+0x14c>)
 801b7e2:	687a      	ldr	r2, [r7, #4]
 801b7e4:	4613      	mov	r3, r2
 801b7e6:	005b      	lsls	r3, r3, #1
 801b7e8:	4413      	add	r3, r2
 801b7ea:	00db      	lsls	r3, r3, #3
 801b7ec:	440b      	add	r3, r1
 801b7ee:	3314      	adds	r3, #20
 801b7f0:	781b      	ldrb	r3, [r3, #0]
 801b7f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b7f4:	78fb      	ldrb	r3, [r7, #3]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 8086 	beq.w	801b908 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b7fc:	4948      	ldr	r1, [pc, #288]	; (801b920 <etharp_tmr+0x14c>)
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	4613      	mov	r3, r2
 801b802:	005b      	lsls	r3, r3, #1
 801b804:	4413      	add	r3, r2
 801b806:	00db      	lsls	r3, r3, #3
 801b808:	440b      	add	r3, r1
 801b80a:	3312      	adds	r3, #18
 801b80c:	881b      	ldrh	r3, [r3, #0]
 801b80e:	3301      	adds	r3, #1
 801b810:	b298      	uxth	r0, r3
 801b812:	4943      	ldr	r1, [pc, #268]	; (801b920 <etharp_tmr+0x14c>)
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	4613      	mov	r3, r2
 801b818:	005b      	lsls	r3, r3, #1
 801b81a:	4413      	add	r3, r2
 801b81c:	00db      	lsls	r3, r3, #3
 801b81e:	440b      	add	r3, r1
 801b820:	3312      	adds	r3, #18
 801b822:	4602      	mov	r2, r0
 801b824:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b826:	493e      	ldr	r1, [pc, #248]	; (801b920 <etharp_tmr+0x14c>)
 801b828:	687a      	ldr	r2, [r7, #4]
 801b82a:	4613      	mov	r3, r2
 801b82c:	005b      	lsls	r3, r3, #1
 801b82e:	4413      	add	r3, r2
 801b830:	00db      	lsls	r3, r3, #3
 801b832:	440b      	add	r3, r1
 801b834:	3312      	adds	r3, #18
 801b836:	881b      	ldrh	r3, [r3, #0]
 801b838:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b83c:	d215      	bcs.n	801b86a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b83e:	4938      	ldr	r1, [pc, #224]	; (801b920 <etharp_tmr+0x14c>)
 801b840:	687a      	ldr	r2, [r7, #4]
 801b842:	4613      	mov	r3, r2
 801b844:	005b      	lsls	r3, r3, #1
 801b846:	4413      	add	r3, r2
 801b848:	00db      	lsls	r3, r3, #3
 801b84a:	440b      	add	r3, r1
 801b84c:	3314      	adds	r3, #20
 801b84e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b850:	2b01      	cmp	r3, #1
 801b852:	d10e      	bne.n	801b872 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b854:	4932      	ldr	r1, [pc, #200]	; (801b920 <etharp_tmr+0x14c>)
 801b856:	687a      	ldr	r2, [r7, #4]
 801b858:	4613      	mov	r3, r2
 801b85a:	005b      	lsls	r3, r3, #1
 801b85c:	4413      	add	r3, r2
 801b85e:	00db      	lsls	r3, r3, #3
 801b860:	440b      	add	r3, r1
 801b862:	3312      	adds	r3, #18
 801b864:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b866:	2b04      	cmp	r3, #4
 801b868:	d903      	bls.n	801b872 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b86a:	6878      	ldr	r0, [r7, #4]
 801b86c:	f7ff ff80 	bl	801b770 <etharp_free_entry>
 801b870:	e04a      	b.n	801b908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b872:	492b      	ldr	r1, [pc, #172]	; (801b920 <etharp_tmr+0x14c>)
 801b874:	687a      	ldr	r2, [r7, #4]
 801b876:	4613      	mov	r3, r2
 801b878:	005b      	lsls	r3, r3, #1
 801b87a:	4413      	add	r3, r2
 801b87c:	00db      	lsls	r3, r3, #3
 801b87e:	440b      	add	r3, r1
 801b880:	3314      	adds	r3, #20
 801b882:	781b      	ldrb	r3, [r3, #0]
 801b884:	2b03      	cmp	r3, #3
 801b886:	d10a      	bne.n	801b89e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b888:	4925      	ldr	r1, [pc, #148]	; (801b920 <etharp_tmr+0x14c>)
 801b88a:	687a      	ldr	r2, [r7, #4]
 801b88c:	4613      	mov	r3, r2
 801b88e:	005b      	lsls	r3, r3, #1
 801b890:	4413      	add	r3, r2
 801b892:	00db      	lsls	r3, r3, #3
 801b894:	440b      	add	r3, r1
 801b896:	3314      	adds	r3, #20
 801b898:	2204      	movs	r2, #4
 801b89a:	701a      	strb	r2, [r3, #0]
 801b89c:	e034      	b.n	801b908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b89e:	4920      	ldr	r1, [pc, #128]	; (801b920 <etharp_tmr+0x14c>)
 801b8a0:	687a      	ldr	r2, [r7, #4]
 801b8a2:	4613      	mov	r3, r2
 801b8a4:	005b      	lsls	r3, r3, #1
 801b8a6:	4413      	add	r3, r2
 801b8a8:	00db      	lsls	r3, r3, #3
 801b8aa:	440b      	add	r3, r1
 801b8ac:	3314      	adds	r3, #20
 801b8ae:	781b      	ldrb	r3, [r3, #0]
 801b8b0:	2b04      	cmp	r3, #4
 801b8b2:	d10a      	bne.n	801b8ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b8b4:	491a      	ldr	r1, [pc, #104]	; (801b920 <etharp_tmr+0x14c>)
 801b8b6:	687a      	ldr	r2, [r7, #4]
 801b8b8:	4613      	mov	r3, r2
 801b8ba:	005b      	lsls	r3, r3, #1
 801b8bc:	4413      	add	r3, r2
 801b8be:	00db      	lsls	r3, r3, #3
 801b8c0:	440b      	add	r3, r1
 801b8c2:	3314      	adds	r3, #20
 801b8c4:	2202      	movs	r2, #2
 801b8c6:	701a      	strb	r2, [r3, #0]
 801b8c8:	e01e      	b.n	801b908 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b8ca:	4915      	ldr	r1, [pc, #84]	; (801b920 <etharp_tmr+0x14c>)
 801b8cc:	687a      	ldr	r2, [r7, #4]
 801b8ce:	4613      	mov	r3, r2
 801b8d0:	005b      	lsls	r3, r3, #1
 801b8d2:	4413      	add	r3, r2
 801b8d4:	00db      	lsls	r3, r3, #3
 801b8d6:	440b      	add	r3, r1
 801b8d8:	3314      	adds	r3, #20
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	2b01      	cmp	r3, #1
 801b8de:	d113      	bne.n	801b908 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b8e0:	490f      	ldr	r1, [pc, #60]	; (801b920 <etharp_tmr+0x14c>)
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	4613      	mov	r3, r2
 801b8e6:	005b      	lsls	r3, r3, #1
 801b8e8:	4413      	add	r3, r2
 801b8ea:	00db      	lsls	r3, r3, #3
 801b8ec:	440b      	add	r3, r1
 801b8ee:	3308      	adds	r3, #8
 801b8f0:	6818      	ldr	r0, [r3, #0]
 801b8f2:	687a      	ldr	r2, [r7, #4]
 801b8f4:	4613      	mov	r3, r2
 801b8f6:	005b      	lsls	r3, r3, #1
 801b8f8:	4413      	add	r3, r2
 801b8fa:	00db      	lsls	r3, r3, #3
 801b8fc:	4a08      	ldr	r2, [pc, #32]	; (801b920 <etharp_tmr+0x14c>)
 801b8fe:	4413      	add	r3, r2
 801b900:	3304      	adds	r3, #4
 801b902:	4619      	mov	r1, r3
 801b904:	f000 fe72 	bl	801c5ec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	3301      	adds	r3, #1
 801b90c:	607b      	str	r3, [r7, #4]
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	2b09      	cmp	r3, #9
 801b912:	f77f af65 	ble.w	801b7e0 <etharp_tmr+0xc>
      }
    }
  }
}
 801b916:	bf00      	nop
 801b918:	bf00      	nop
 801b91a:	3708      	adds	r7, #8
 801b91c:	46bd      	mov	sp, r7
 801b91e:	bd80      	pop	{r7, pc}
 801b920:	2000c92c 	.word	0x2000c92c

0801b924 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b08a      	sub	sp, #40	; 0x28
 801b928:	af00      	add	r7, sp, #0
 801b92a:	60f8      	str	r0, [r7, #12]
 801b92c:	460b      	mov	r3, r1
 801b92e:	607a      	str	r2, [r7, #4]
 801b930:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b932:	230a      	movs	r3, #10
 801b934:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b936:	230a      	movs	r3, #10
 801b938:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b93a:	230a      	movs	r3, #10
 801b93c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b93e:	2300      	movs	r3, #0
 801b940:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b942:	230a      	movs	r3, #10
 801b944:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b946:	2300      	movs	r3, #0
 801b948:	83bb      	strh	r3, [r7, #28]
 801b94a:	2300      	movs	r3, #0
 801b94c:	837b      	strh	r3, [r7, #26]
 801b94e:	2300      	movs	r3, #0
 801b950:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b952:	2300      	movs	r3, #0
 801b954:	843b      	strh	r3, [r7, #32]
 801b956:	e0ae      	b.n	801bab6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b958:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b95c:	49a6      	ldr	r1, [pc, #664]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801b95e:	4613      	mov	r3, r2
 801b960:	005b      	lsls	r3, r3, #1
 801b962:	4413      	add	r3, r2
 801b964:	00db      	lsls	r3, r3, #3
 801b966:	440b      	add	r3, r1
 801b968:	3314      	adds	r3, #20
 801b96a:	781b      	ldrb	r3, [r3, #0]
 801b96c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b96e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b972:	2b0a      	cmp	r3, #10
 801b974:	d105      	bne.n	801b982 <etharp_find_entry+0x5e>
 801b976:	7dfb      	ldrb	r3, [r7, #23]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	d102      	bne.n	801b982 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b97c:	8c3b      	ldrh	r3, [r7, #32]
 801b97e:	847b      	strh	r3, [r7, #34]	; 0x22
 801b980:	e095      	b.n	801baae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b982:	7dfb      	ldrb	r3, [r7, #23]
 801b984:	2b00      	cmp	r3, #0
 801b986:	f000 8092 	beq.w	801baae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b98a:	7dfb      	ldrb	r3, [r7, #23]
 801b98c:	2b01      	cmp	r3, #1
 801b98e:	d009      	beq.n	801b9a4 <etharp_find_entry+0x80>
 801b990:	7dfb      	ldrb	r3, [r7, #23]
 801b992:	2b01      	cmp	r3, #1
 801b994:	d806      	bhi.n	801b9a4 <etharp_find_entry+0x80>
 801b996:	4b99      	ldr	r3, [pc, #612]	; (801bbfc <etharp_find_entry+0x2d8>)
 801b998:	f240 1223 	movw	r2, #291	; 0x123
 801b99c:	4998      	ldr	r1, [pc, #608]	; (801bc00 <etharp_find_entry+0x2dc>)
 801b99e:	4899      	ldr	r0, [pc, #612]	; (801bc04 <etharp_find_entry+0x2e0>)
 801b9a0:	f003 fa40 	bl	801ee24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d020      	beq.n	801b9ec <etharp_find_entry+0xc8>
 801b9aa:	68fb      	ldr	r3, [r7, #12]
 801b9ac:	6819      	ldr	r1, [r3, #0]
 801b9ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9b2:	4891      	ldr	r0, [pc, #580]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801b9b4:	4613      	mov	r3, r2
 801b9b6:	005b      	lsls	r3, r3, #1
 801b9b8:	4413      	add	r3, r2
 801b9ba:	00db      	lsls	r3, r3, #3
 801b9bc:	4403      	add	r3, r0
 801b9be:	3304      	adds	r3, #4
 801b9c0:	681b      	ldr	r3, [r3, #0]
 801b9c2:	4299      	cmp	r1, r3
 801b9c4:	d112      	bne.n	801b9ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b9c6:	687b      	ldr	r3, [r7, #4]
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d00c      	beq.n	801b9e6 <etharp_find_entry+0xc2>
 801b9cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9d0:	4989      	ldr	r1, [pc, #548]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801b9d2:	4613      	mov	r3, r2
 801b9d4:	005b      	lsls	r3, r3, #1
 801b9d6:	4413      	add	r3, r2
 801b9d8:	00db      	lsls	r3, r3, #3
 801b9da:	440b      	add	r3, r1
 801b9dc:	3308      	adds	r3, #8
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	687a      	ldr	r2, [r7, #4]
 801b9e2:	429a      	cmp	r2, r3
 801b9e4:	d102      	bne.n	801b9ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b9e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b9ea:	e100      	b.n	801bbee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b9ec:	7dfb      	ldrb	r3, [r7, #23]
 801b9ee:	2b01      	cmp	r3, #1
 801b9f0:	d140      	bne.n	801ba74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b9f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9f6:	4980      	ldr	r1, [pc, #512]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801b9f8:	4613      	mov	r3, r2
 801b9fa:	005b      	lsls	r3, r3, #1
 801b9fc:	4413      	add	r3, r2
 801b9fe:	00db      	lsls	r3, r3, #3
 801ba00:	440b      	add	r3, r1
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d01a      	beq.n	801ba3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ba08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba0c:	497a      	ldr	r1, [pc, #488]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba0e:	4613      	mov	r3, r2
 801ba10:	005b      	lsls	r3, r3, #1
 801ba12:	4413      	add	r3, r2
 801ba14:	00db      	lsls	r3, r3, #3
 801ba16:	440b      	add	r3, r1
 801ba18:	3312      	adds	r3, #18
 801ba1a:	881b      	ldrh	r3, [r3, #0]
 801ba1c:	8bba      	ldrh	r2, [r7, #28]
 801ba1e:	429a      	cmp	r2, r3
 801ba20:	d845      	bhi.n	801baae <etharp_find_entry+0x18a>
            old_queue = i;
 801ba22:	8c3b      	ldrh	r3, [r7, #32]
 801ba24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ba26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba2a:	4973      	ldr	r1, [pc, #460]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba2c:	4613      	mov	r3, r2
 801ba2e:	005b      	lsls	r3, r3, #1
 801ba30:	4413      	add	r3, r2
 801ba32:	00db      	lsls	r3, r3, #3
 801ba34:	440b      	add	r3, r1
 801ba36:	3312      	adds	r3, #18
 801ba38:	881b      	ldrh	r3, [r3, #0]
 801ba3a:	83bb      	strh	r3, [r7, #28]
 801ba3c:	e037      	b.n	801baae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ba3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba42:	496d      	ldr	r1, [pc, #436]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba44:	4613      	mov	r3, r2
 801ba46:	005b      	lsls	r3, r3, #1
 801ba48:	4413      	add	r3, r2
 801ba4a:	00db      	lsls	r3, r3, #3
 801ba4c:	440b      	add	r3, r1
 801ba4e:	3312      	adds	r3, #18
 801ba50:	881b      	ldrh	r3, [r3, #0]
 801ba52:	8b7a      	ldrh	r2, [r7, #26]
 801ba54:	429a      	cmp	r2, r3
 801ba56:	d82a      	bhi.n	801baae <etharp_find_entry+0x18a>
            old_pending = i;
 801ba58:	8c3b      	ldrh	r3, [r7, #32]
 801ba5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ba5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba60:	4965      	ldr	r1, [pc, #404]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba62:	4613      	mov	r3, r2
 801ba64:	005b      	lsls	r3, r3, #1
 801ba66:	4413      	add	r3, r2
 801ba68:	00db      	lsls	r3, r3, #3
 801ba6a:	440b      	add	r3, r1
 801ba6c:	3312      	adds	r3, #18
 801ba6e:	881b      	ldrh	r3, [r3, #0]
 801ba70:	837b      	strh	r3, [r7, #26]
 801ba72:	e01c      	b.n	801baae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ba74:	7dfb      	ldrb	r3, [r7, #23]
 801ba76:	2b01      	cmp	r3, #1
 801ba78:	d919      	bls.n	801baae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ba7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba7e:	495e      	ldr	r1, [pc, #376]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba80:	4613      	mov	r3, r2
 801ba82:	005b      	lsls	r3, r3, #1
 801ba84:	4413      	add	r3, r2
 801ba86:	00db      	lsls	r3, r3, #3
 801ba88:	440b      	add	r3, r1
 801ba8a:	3312      	adds	r3, #18
 801ba8c:	881b      	ldrh	r3, [r3, #0]
 801ba8e:	8b3a      	ldrh	r2, [r7, #24]
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d80c      	bhi.n	801baae <etharp_find_entry+0x18a>
            old_stable = i;
 801ba94:	8c3b      	ldrh	r3, [r7, #32]
 801ba96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ba98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba9c:	4956      	ldr	r1, [pc, #344]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801ba9e:	4613      	mov	r3, r2
 801baa0:	005b      	lsls	r3, r3, #1
 801baa2:	4413      	add	r3, r2
 801baa4:	00db      	lsls	r3, r3, #3
 801baa6:	440b      	add	r3, r1
 801baa8:	3312      	adds	r3, #18
 801baaa:	881b      	ldrh	r3, [r3, #0]
 801baac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801baae:	8c3b      	ldrh	r3, [r7, #32]
 801bab0:	3301      	adds	r3, #1
 801bab2:	b29b      	uxth	r3, r3
 801bab4:	843b      	strh	r3, [r7, #32]
 801bab6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801baba:	2b09      	cmp	r3, #9
 801babc:	f77f af4c 	ble.w	801b958 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bac0:	7afb      	ldrb	r3, [r7, #11]
 801bac2:	f003 0302 	and.w	r3, r3, #2
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d108      	bne.n	801badc <etharp_find_entry+0x1b8>
 801baca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bace:	2b0a      	cmp	r3, #10
 801bad0:	d107      	bne.n	801bae2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bad2:	7afb      	ldrb	r3, [r7, #11]
 801bad4:	f003 0301 	and.w	r3, r3, #1
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d102      	bne.n	801bae2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801badc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bae0:	e085      	b.n	801bbee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bae2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bae6:	2b09      	cmp	r3, #9
 801bae8:	dc02      	bgt.n	801baf0 <etharp_find_entry+0x1cc>
    i = empty;
 801baea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801baec:	843b      	strh	r3, [r7, #32]
 801baee:	e039      	b.n	801bb64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801baf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801baf4:	2b09      	cmp	r3, #9
 801baf6:	dc14      	bgt.n	801bb22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801baf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bafa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801bafc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb00:	493d      	ldr	r1, [pc, #244]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801bb02:	4613      	mov	r3, r2
 801bb04:	005b      	lsls	r3, r3, #1
 801bb06:	4413      	add	r3, r2
 801bb08:	00db      	lsls	r3, r3, #3
 801bb0a:	440b      	add	r3, r1
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	2b00      	cmp	r3, #0
 801bb10:	d018      	beq.n	801bb44 <etharp_find_entry+0x220>
 801bb12:	4b3a      	ldr	r3, [pc, #232]	; (801bbfc <etharp_find_entry+0x2d8>)
 801bb14:	f240 126d 	movw	r2, #365	; 0x16d
 801bb18:	493b      	ldr	r1, [pc, #236]	; (801bc08 <etharp_find_entry+0x2e4>)
 801bb1a:	483a      	ldr	r0, [pc, #232]	; (801bc04 <etharp_find_entry+0x2e0>)
 801bb1c:	f003 f982 	bl	801ee24 <iprintf>
 801bb20:	e010      	b.n	801bb44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bb22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bb26:	2b09      	cmp	r3, #9
 801bb28:	dc02      	bgt.n	801bb30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bb2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bb2c:	843b      	strh	r3, [r7, #32]
 801bb2e:	e009      	b.n	801bb44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bb30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bb34:	2b09      	cmp	r3, #9
 801bb36:	dc02      	bgt.n	801bb3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bb38:	8bfb      	ldrh	r3, [r7, #30]
 801bb3a:	843b      	strh	r3, [r7, #32]
 801bb3c:	e002      	b.n	801bb44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bb3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bb42:	e054      	b.n	801bbee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bb44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb48:	2b09      	cmp	r3, #9
 801bb4a:	dd06      	ble.n	801bb5a <etharp_find_entry+0x236>
 801bb4c:	4b2b      	ldr	r3, [pc, #172]	; (801bbfc <etharp_find_entry+0x2d8>)
 801bb4e:	f240 127f 	movw	r2, #383	; 0x17f
 801bb52:	492e      	ldr	r1, [pc, #184]	; (801bc0c <etharp_find_entry+0x2e8>)
 801bb54:	482b      	ldr	r0, [pc, #172]	; (801bc04 <etharp_find_entry+0x2e0>)
 801bb56:	f003 f965 	bl	801ee24 <iprintf>
    etharp_free_entry(i);
 801bb5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7ff fe06 	bl	801b770 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bb64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb68:	2b09      	cmp	r3, #9
 801bb6a:	dd06      	ble.n	801bb7a <etharp_find_entry+0x256>
 801bb6c:	4b23      	ldr	r3, [pc, #140]	; (801bbfc <etharp_find_entry+0x2d8>)
 801bb6e:	f240 1283 	movw	r2, #387	; 0x183
 801bb72:	4926      	ldr	r1, [pc, #152]	; (801bc0c <etharp_find_entry+0x2e8>)
 801bb74:	4823      	ldr	r0, [pc, #140]	; (801bc04 <etharp_find_entry+0x2e0>)
 801bb76:	f003 f955 	bl	801ee24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bb7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb7e:	491e      	ldr	r1, [pc, #120]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801bb80:	4613      	mov	r3, r2
 801bb82:	005b      	lsls	r3, r3, #1
 801bb84:	4413      	add	r3, r2
 801bb86:	00db      	lsls	r3, r3, #3
 801bb88:	440b      	add	r3, r1
 801bb8a:	3314      	adds	r3, #20
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d006      	beq.n	801bba0 <etharp_find_entry+0x27c>
 801bb92:	4b1a      	ldr	r3, [pc, #104]	; (801bbfc <etharp_find_entry+0x2d8>)
 801bb94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801bb98:	491d      	ldr	r1, [pc, #116]	; (801bc10 <etharp_find_entry+0x2ec>)
 801bb9a:	481a      	ldr	r0, [pc, #104]	; (801bc04 <etharp_find_entry+0x2e0>)
 801bb9c:	f003 f942 	bl	801ee24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d00b      	beq.n	801bbbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bba6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	6819      	ldr	r1, [r3, #0]
 801bbae:	4812      	ldr	r0, [pc, #72]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801bbb0:	4613      	mov	r3, r2
 801bbb2:	005b      	lsls	r3, r3, #1
 801bbb4:	4413      	add	r3, r2
 801bbb6:	00db      	lsls	r3, r3, #3
 801bbb8:	4403      	add	r3, r0
 801bbba:	3304      	adds	r3, #4
 801bbbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bbbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbc2:	490d      	ldr	r1, [pc, #52]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801bbc4:	4613      	mov	r3, r2
 801bbc6:	005b      	lsls	r3, r3, #1
 801bbc8:	4413      	add	r3, r2
 801bbca:	00db      	lsls	r3, r3, #3
 801bbcc:	440b      	add	r3, r1
 801bbce:	3312      	adds	r3, #18
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bbd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbd8:	4907      	ldr	r1, [pc, #28]	; (801bbf8 <etharp_find_entry+0x2d4>)
 801bbda:	4613      	mov	r3, r2
 801bbdc:	005b      	lsls	r3, r3, #1
 801bbde:	4413      	add	r3, r2
 801bbe0:	00db      	lsls	r3, r3, #3
 801bbe2:	440b      	add	r3, r1
 801bbe4:	3308      	adds	r3, #8
 801bbe6:	687a      	ldr	r2, [r7, #4]
 801bbe8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bbea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	3728      	adds	r7, #40	; 0x28
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	bd80      	pop	{r7, pc}
 801bbf6:	bf00      	nop
 801bbf8:	2000c92c 	.word	0x2000c92c
 801bbfc:	08023e8c 	.word	0x08023e8c
 801bc00:	08023ec4 	.word	0x08023ec4
 801bc04:	08023f04 	.word	0x08023f04
 801bc08:	08023f2c 	.word	0x08023f2c
 801bc0c:	08023f44 	.word	0x08023f44
 801bc10:	08023f58 	.word	0x08023f58

0801bc14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b088      	sub	sp, #32
 801bc18:	af02      	add	r7, sp, #8
 801bc1a:	60f8      	str	r0, [r7, #12]
 801bc1c:	60b9      	str	r1, [r7, #8]
 801bc1e:	607a      	str	r2, [r7, #4]
 801bc20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bc22:	68fb      	ldr	r3, [r7, #12]
 801bc24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bc28:	2b06      	cmp	r3, #6
 801bc2a:	d006      	beq.n	801bc3a <etharp_update_arp_entry+0x26>
 801bc2c:	4b48      	ldr	r3, [pc, #288]	; (801bd50 <etharp_update_arp_entry+0x13c>)
 801bc2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bc32:	4948      	ldr	r1, [pc, #288]	; (801bd54 <etharp_update_arp_entry+0x140>)
 801bc34:	4848      	ldr	r0, [pc, #288]	; (801bd58 <etharp_update_arp_entry+0x144>)
 801bc36:	f003 f8f5 	bl	801ee24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bc3a:	68bb      	ldr	r3, [r7, #8]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d012      	beq.n	801bc66 <etharp_update_arp_entry+0x52>
 801bc40:	68bb      	ldr	r3, [r7, #8]
 801bc42:	681b      	ldr	r3, [r3, #0]
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d00e      	beq.n	801bc66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	68f9      	ldr	r1, [r7, #12]
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f001 f920 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801bc54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d105      	bne.n	801bc66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bc5a:	68bb      	ldr	r3, [r7, #8]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc62:	2be0      	cmp	r3, #224	; 0xe0
 801bc64:	d102      	bne.n	801bc6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bc66:	f06f 030f 	mvn.w	r3, #15
 801bc6a:	e06c      	b.n	801bd46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bc6c:	78fb      	ldrb	r3, [r7, #3]
 801bc6e:	68fa      	ldr	r2, [r7, #12]
 801bc70:	4619      	mov	r1, r3
 801bc72:	68b8      	ldr	r0, [r7, #8]
 801bc74:	f7ff fe56 	bl	801b924 <etharp_find_entry>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bc7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	da02      	bge.n	801bc8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bc84:	8afb      	ldrh	r3, [r7, #22]
 801bc86:	b25b      	sxtb	r3, r3
 801bc88:	e05d      	b.n	801bd46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bc8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc8e:	4933      	ldr	r1, [pc, #204]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bc90:	4613      	mov	r3, r2
 801bc92:	005b      	lsls	r3, r3, #1
 801bc94:	4413      	add	r3, r2
 801bc96:	00db      	lsls	r3, r3, #3
 801bc98:	440b      	add	r3, r1
 801bc9a:	3314      	adds	r3, #20
 801bc9c:	2202      	movs	r2, #2
 801bc9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bca0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bca4:	492d      	ldr	r1, [pc, #180]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bca6:	4613      	mov	r3, r2
 801bca8:	005b      	lsls	r3, r3, #1
 801bcaa:	4413      	add	r3, r2
 801bcac:	00db      	lsls	r3, r3, #3
 801bcae:	440b      	add	r3, r1
 801bcb0:	3308      	adds	r3, #8
 801bcb2:	68fa      	ldr	r2, [r7, #12]
 801bcb4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bcb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcba:	4613      	mov	r3, r2
 801bcbc:	005b      	lsls	r3, r3, #1
 801bcbe:	4413      	add	r3, r2
 801bcc0:	00db      	lsls	r3, r3, #3
 801bcc2:	3308      	adds	r3, #8
 801bcc4:	4a25      	ldr	r2, [pc, #148]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bcc6:	4413      	add	r3, r2
 801bcc8:	3304      	adds	r3, #4
 801bcca:	2206      	movs	r2, #6
 801bccc:	6879      	ldr	r1, [r7, #4]
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f003 fb0d 	bl	801f2ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bcd4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcd8:	4920      	ldr	r1, [pc, #128]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bcda:	4613      	mov	r3, r2
 801bcdc:	005b      	lsls	r3, r3, #1
 801bcde:	4413      	add	r3, r2
 801bce0:	00db      	lsls	r3, r3, #3
 801bce2:	440b      	add	r3, r1
 801bce4:	3312      	adds	r3, #18
 801bce6:	2200      	movs	r2, #0
 801bce8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bcea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcee:	491b      	ldr	r1, [pc, #108]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bcf0:	4613      	mov	r3, r2
 801bcf2:	005b      	lsls	r3, r3, #1
 801bcf4:	4413      	add	r3, r2
 801bcf6:	00db      	lsls	r3, r3, #3
 801bcf8:	440b      	add	r3, r1
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	2b00      	cmp	r3, #0
 801bcfe:	d021      	beq.n	801bd44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bd00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd04:	4915      	ldr	r1, [pc, #84]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bd06:	4613      	mov	r3, r2
 801bd08:	005b      	lsls	r3, r3, #1
 801bd0a:	4413      	add	r3, r2
 801bd0c:	00db      	lsls	r3, r3, #3
 801bd0e:	440b      	add	r3, r1
 801bd10:	681b      	ldr	r3, [r3, #0]
 801bd12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bd14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd18:	4910      	ldr	r1, [pc, #64]	; (801bd5c <etharp_update_arp_entry+0x148>)
 801bd1a:	4613      	mov	r3, r2
 801bd1c:	005b      	lsls	r3, r3, #1
 801bd1e:	4413      	add	r3, r2
 801bd20:	00db      	lsls	r3, r3, #3
 801bd22:	440b      	add	r3, r1
 801bd24:	2200      	movs	r2, #0
 801bd26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bd28:	68fb      	ldr	r3, [r7, #12]
 801bd2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801bd2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bd32:	9300      	str	r3, [sp, #0]
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	6939      	ldr	r1, [r7, #16]
 801bd38:	68f8      	ldr	r0, [r7, #12]
 801bd3a:	f001 ffb9 	bl	801dcb0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bd3e:	6938      	ldr	r0, [r7, #16]
 801bd40:	f7f6 fcde 	bl	8012700 <pbuf_free>
  }
  return ERR_OK;
 801bd44:	2300      	movs	r3, #0
}
 801bd46:	4618      	mov	r0, r3
 801bd48:	3718      	adds	r7, #24
 801bd4a:	46bd      	mov	sp, r7
 801bd4c:	bd80      	pop	{r7, pc}
 801bd4e:	bf00      	nop
 801bd50:	08023e8c 	.word	0x08023e8c
 801bd54:	08023f84 	.word	0x08023f84
 801bd58:	08023f04 	.word	0x08023f04
 801bd5c:	2000c92c 	.word	0x2000c92c

0801bd60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b084      	sub	sp, #16
 801bd64:	af00      	add	r7, sp, #0
 801bd66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd68:	2300      	movs	r3, #0
 801bd6a:	60fb      	str	r3, [r7, #12]
 801bd6c:	e01e      	b.n	801bdac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bd6e:	4913      	ldr	r1, [pc, #76]	; (801bdbc <etharp_cleanup_netif+0x5c>)
 801bd70:	68fa      	ldr	r2, [r7, #12]
 801bd72:	4613      	mov	r3, r2
 801bd74:	005b      	lsls	r3, r3, #1
 801bd76:	4413      	add	r3, r2
 801bd78:	00db      	lsls	r3, r3, #3
 801bd7a:	440b      	add	r3, r1
 801bd7c:	3314      	adds	r3, #20
 801bd7e:	781b      	ldrb	r3, [r3, #0]
 801bd80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bd82:	7afb      	ldrb	r3, [r7, #11]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d00e      	beq.n	801bda6 <etharp_cleanup_netif+0x46>
 801bd88:	490c      	ldr	r1, [pc, #48]	; (801bdbc <etharp_cleanup_netif+0x5c>)
 801bd8a:	68fa      	ldr	r2, [r7, #12]
 801bd8c:	4613      	mov	r3, r2
 801bd8e:	005b      	lsls	r3, r3, #1
 801bd90:	4413      	add	r3, r2
 801bd92:	00db      	lsls	r3, r3, #3
 801bd94:	440b      	add	r3, r1
 801bd96:	3308      	adds	r3, #8
 801bd98:	681b      	ldr	r3, [r3, #0]
 801bd9a:	687a      	ldr	r2, [r7, #4]
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d102      	bne.n	801bda6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bda0:	68f8      	ldr	r0, [r7, #12]
 801bda2:	f7ff fce5 	bl	801b770 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bda6:	68fb      	ldr	r3, [r7, #12]
 801bda8:	3301      	adds	r3, #1
 801bdaa:	60fb      	str	r3, [r7, #12]
 801bdac:	68fb      	ldr	r3, [r7, #12]
 801bdae:	2b09      	cmp	r3, #9
 801bdb0:	dddd      	ble.n	801bd6e <etharp_cleanup_netif+0xe>
    }
  }
}
 801bdb2:	bf00      	nop
 801bdb4:	bf00      	nop
 801bdb6:	3710      	adds	r7, #16
 801bdb8:	46bd      	mov	sp, r7
 801bdba:	bd80      	pop	{r7, pc}
 801bdbc:	2000c92c 	.word	0x2000c92c

0801bdc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bdc0:	b5b0      	push	{r4, r5, r7, lr}
 801bdc2:	b08a      	sub	sp, #40	; 0x28
 801bdc4:	af04      	add	r7, sp, #16
 801bdc6:	6078      	str	r0, [r7, #4]
 801bdc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bdca:	683b      	ldr	r3, [r7, #0]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d107      	bne.n	801bde0 <etharp_input+0x20>
 801bdd0:	4b3f      	ldr	r3, [pc, #252]	; (801bed0 <etharp_input+0x110>)
 801bdd2:	f240 228a 	movw	r2, #650	; 0x28a
 801bdd6:	493f      	ldr	r1, [pc, #252]	; (801bed4 <etharp_input+0x114>)
 801bdd8:	483f      	ldr	r0, [pc, #252]	; (801bed8 <etharp_input+0x118>)
 801bdda:	f003 f823 	bl	801ee24 <iprintf>
 801bdde:	e074      	b.n	801beca <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801bde0:	687b      	ldr	r3, [r7, #4]
 801bde2:	685b      	ldr	r3, [r3, #4]
 801bde4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bde6:	693b      	ldr	r3, [r7, #16]
 801bde8:	881b      	ldrh	r3, [r3, #0]
 801bdea:	b29b      	uxth	r3, r3
 801bdec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bdf0:	d10c      	bne.n	801be0c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bdf6:	2b06      	cmp	r3, #6
 801bdf8:	d108      	bne.n	801be0c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bdfa:	693b      	ldr	r3, [r7, #16]
 801bdfc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bdfe:	2b04      	cmp	r3, #4
 801be00:	d104      	bne.n	801be0c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801be02:	693b      	ldr	r3, [r7, #16]
 801be04:	885b      	ldrh	r3, [r3, #2]
 801be06:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801be08:	2b08      	cmp	r3, #8
 801be0a:	d003      	beq.n	801be14 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801be0c:	6878      	ldr	r0, [r7, #4]
 801be0e:	f7f6 fc77 	bl	8012700 <pbuf_free>
    return;
 801be12:	e05a      	b.n	801beca <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	330e      	adds	r3, #14
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801be1c:	693b      	ldr	r3, [r7, #16]
 801be1e:	3318      	adds	r3, #24
 801be20:	681b      	ldr	r3, [r3, #0]
 801be22:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be24:	683b      	ldr	r3, [r7, #0]
 801be26:	3304      	adds	r3, #4
 801be28:	681b      	ldr	r3, [r3, #0]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d102      	bne.n	801be34 <etharp_input+0x74>
    for_us = 0;
 801be2e:	2300      	movs	r3, #0
 801be30:	75fb      	strb	r3, [r7, #23]
 801be32:	e009      	b.n	801be48 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801be34:	68ba      	ldr	r2, [r7, #8]
 801be36:	683b      	ldr	r3, [r7, #0]
 801be38:	3304      	adds	r3, #4
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	429a      	cmp	r2, r3
 801be3e:	bf0c      	ite	eq
 801be40:	2301      	moveq	r3, #1
 801be42:	2300      	movne	r3, #0
 801be44:	b2db      	uxtb	r3, r3
 801be46:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801be48:	693b      	ldr	r3, [r7, #16]
 801be4a:	f103 0208 	add.w	r2, r3, #8
 801be4e:	7dfb      	ldrb	r3, [r7, #23]
 801be50:	2b00      	cmp	r3, #0
 801be52:	d001      	beq.n	801be58 <etharp_input+0x98>
 801be54:	2301      	movs	r3, #1
 801be56:	e000      	b.n	801be5a <etharp_input+0x9a>
 801be58:	2302      	movs	r3, #2
 801be5a:	f107 010c 	add.w	r1, r7, #12
 801be5e:	6838      	ldr	r0, [r7, #0]
 801be60:	f7ff fed8 	bl	801bc14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801be64:	693b      	ldr	r3, [r7, #16]
 801be66:	88db      	ldrh	r3, [r3, #6]
 801be68:	b29b      	uxth	r3, r3
 801be6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be6e:	d003      	beq.n	801be78 <etharp_input+0xb8>
 801be70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be74:	d01e      	beq.n	801beb4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801be76:	e025      	b.n	801bec4 <etharp_input+0x104>
      if (for_us) {
 801be78:	7dfb      	ldrb	r3, [r7, #23]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d021      	beq.n	801bec2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801be7e:	683b      	ldr	r3, [r7, #0]
 801be80:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801be84:	693b      	ldr	r3, [r7, #16]
 801be86:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801be8a:	683b      	ldr	r3, [r7, #0]
 801be8c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801be90:	683b      	ldr	r3, [r7, #0]
 801be92:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801be94:	693a      	ldr	r2, [r7, #16]
 801be96:	3208      	adds	r2, #8
        etharp_raw(netif,
 801be98:	2102      	movs	r1, #2
 801be9a:	9103      	str	r1, [sp, #12]
 801be9c:	f107 010c 	add.w	r1, r7, #12
 801bea0:	9102      	str	r1, [sp, #8]
 801bea2:	9201      	str	r2, [sp, #4]
 801bea4:	9300      	str	r3, [sp, #0]
 801bea6:	462b      	mov	r3, r5
 801bea8:	4622      	mov	r2, r4
 801beaa:	4601      	mov	r1, r0
 801beac:	6838      	ldr	r0, [r7, #0]
 801beae:	f000 faef 	bl	801c490 <etharp_raw>
      break;
 801beb2:	e006      	b.n	801bec2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801beb4:	f107 030c 	add.w	r3, r7, #12
 801beb8:	4619      	mov	r1, r3
 801beba:	6838      	ldr	r0, [r7, #0]
 801bebc:	f7fe f9fc 	bl	801a2b8 <dhcp_arp_reply>
      break;
 801bec0:	e000      	b.n	801bec4 <etharp_input+0x104>
      break;
 801bec2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801bec4:	6878      	ldr	r0, [r7, #4]
 801bec6:	f7f6 fc1b 	bl	8012700 <pbuf_free>
}
 801beca:	3718      	adds	r7, #24
 801becc:	46bd      	mov	sp, r7
 801bece:	bdb0      	pop	{r4, r5, r7, pc}
 801bed0:	08023e8c 	.word	0x08023e8c
 801bed4:	08023fdc 	.word	0x08023fdc
 801bed8:	08023f04 	.word	0x08023f04

0801bedc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b086      	sub	sp, #24
 801bee0:	af02      	add	r7, sp, #8
 801bee2:	60f8      	str	r0, [r7, #12]
 801bee4:	60b9      	str	r1, [r7, #8]
 801bee6:	4613      	mov	r3, r2
 801bee8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801beea:	79fa      	ldrb	r2, [r7, #7]
 801beec:	4944      	ldr	r1, [pc, #272]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801beee:	4613      	mov	r3, r2
 801bef0:	005b      	lsls	r3, r3, #1
 801bef2:	4413      	add	r3, r2
 801bef4:	00db      	lsls	r3, r3, #3
 801bef6:	440b      	add	r3, r1
 801bef8:	3314      	adds	r3, #20
 801befa:	781b      	ldrb	r3, [r3, #0]
 801befc:	2b01      	cmp	r3, #1
 801befe:	d806      	bhi.n	801bf0e <etharp_output_to_arp_index+0x32>
 801bf00:	4b40      	ldr	r3, [pc, #256]	; (801c004 <etharp_output_to_arp_index+0x128>)
 801bf02:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bf06:	4940      	ldr	r1, [pc, #256]	; (801c008 <etharp_output_to_arp_index+0x12c>)
 801bf08:	4840      	ldr	r0, [pc, #256]	; (801c00c <etharp_output_to_arp_index+0x130>)
 801bf0a:	f002 ff8b 	bl	801ee24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bf0e:	79fa      	ldrb	r2, [r7, #7]
 801bf10:	493b      	ldr	r1, [pc, #236]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf12:	4613      	mov	r3, r2
 801bf14:	005b      	lsls	r3, r3, #1
 801bf16:	4413      	add	r3, r2
 801bf18:	00db      	lsls	r3, r3, #3
 801bf1a:	440b      	add	r3, r1
 801bf1c:	3314      	adds	r3, #20
 801bf1e:	781b      	ldrb	r3, [r3, #0]
 801bf20:	2b02      	cmp	r3, #2
 801bf22:	d153      	bne.n	801bfcc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bf24:	79fa      	ldrb	r2, [r7, #7]
 801bf26:	4936      	ldr	r1, [pc, #216]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf28:	4613      	mov	r3, r2
 801bf2a:	005b      	lsls	r3, r3, #1
 801bf2c:	4413      	add	r3, r2
 801bf2e:	00db      	lsls	r3, r3, #3
 801bf30:	440b      	add	r3, r1
 801bf32:	3312      	adds	r3, #18
 801bf34:	881b      	ldrh	r3, [r3, #0]
 801bf36:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bf3a:	d919      	bls.n	801bf70 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bf3c:	79fa      	ldrb	r2, [r7, #7]
 801bf3e:	4613      	mov	r3, r2
 801bf40:	005b      	lsls	r3, r3, #1
 801bf42:	4413      	add	r3, r2
 801bf44:	00db      	lsls	r3, r3, #3
 801bf46:	4a2e      	ldr	r2, [pc, #184]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf48:	4413      	add	r3, r2
 801bf4a:	3304      	adds	r3, #4
 801bf4c:	4619      	mov	r1, r3
 801bf4e:	68f8      	ldr	r0, [r7, #12]
 801bf50:	f000 fb4c 	bl	801c5ec <etharp_request>
 801bf54:	4603      	mov	r3, r0
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	d138      	bne.n	801bfcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bf5a:	79fa      	ldrb	r2, [r7, #7]
 801bf5c:	4928      	ldr	r1, [pc, #160]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf5e:	4613      	mov	r3, r2
 801bf60:	005b      	lsls	r3, r3, #1
 801bf62:	4413      	add	r3, r2
 801bf64:	00db      	lsls	r3, r3, #3
 801bf66:	440b      	add	r3, r1
 801bf68:	3314      	adds	r3, #20
 801bf6a:	2203      	movs	r2, #3
 801bf6c:	701a      	strb	r2, [r3, #0]
 801bf6e:	e02d      	b.n	801bfcc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bf70:	79fa      	ldrb	r2, [r7, #7]
 801bf72:	4923      	ldr	r1, [pc, #140]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf74:	4613      	mov	r3, r2
 801bf76:	005b      	lsls	r3, r3, #1
 801bf78:	4413      	add	r3, r2
 801bf7a:	00db      	lsls	r3, r3, #3
 801bf7c:	440b      	add	r3, r1
 801bf7e:	3312      	adds	r3, #18
 801bf80:	881b      	ldrh	r3, [r3, #0]
 801bf82:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bf86:	d321      	bcc.n	801bfcc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bf88:	79fa      	ldrb	r2, [r7, #7]
 801bf8a:	4613      	mov	r3, r2
 801bf8c:	005b      	lsls	r3, r3, #1
 801bf8e:	4413      	add	r3, r2
 801bf90:	00db      	lsls	r3, r3, #3
 801bf92:	4a1b      	ldr	r2, [pc, #108]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bf94:	4413      	add	r3, r2
 801bf96:	1d19      	adds	r1, r3, #4
 801bf98:	79fa      	ldrb	r2, [r7, #7]
 801bf9a:	4613      	mov	r3, r2
 801bf9c:	005b      	lsls	r3, r3, #1
 801bf9e:	4413      	add	r3, r2
 801bfa0:	00db      	lsls	r3, r3, #3
 801bfa2:	3308      	adds	r3, #8
 801bfa4:	4a16      	ldr	r2, [pc, #88]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bfa6:	4413      	add	r3, r2
 801bfa8:	3304      	adds	r3, #4
 801bfaa:	461a      	mov	r2, r3
 801bfac:	68f8      	ldr	r0, [r7, #12]
 801bfae:	f000 fafb 	bl	801c5a8 <etharp_request_dst>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d109      	bne.n	801bfcc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bfb8:	79fa      	ldrb	r2, [r7, #7]
 801bfba:	4911      	ldr	r1, [pc, #68]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bfbc:	4613      	mov	r3, r2
 801bfbe:	005b      	lsls	r3, r3, #1
 801bfc0:	4413      	add	r3, r2
 801bfc2:	00db      	lsls	r3, r3, #3
 801bfc4:	440b      	add	r3, r1
 801bfc6:	3314      	adds	r3, #20
 801bfc8:	2203      	movs	r2, #3
 801bfca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bfcc:	68fb      	ldr	r3, [r7, #12]
 801bfce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801bfd2:	79fa      	ldrb	r2, [r7, #7]
 801bfd4:	4613      	mov	r3, r2
 801bfd6:	005b      	lsls	r3, r3, #1
 801bfd8:	4413      	add	r3, r2
 801bfda:	00db      	lsls	r3, r3, #3
 801bfdc:	3308      	adds	r3, #8
 801bfde:	4a08      	ldr	r2, [pc, #32]	; (801c000 <etharp_output_to_arp_index+0x124>)
 801bfe0:	4413      	add	r3, r2
 801bfe2:	3304      	adds	r3, #4
 801bfe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bfe8:	9200      	str	r2, [sp, #0]
 801bfea:	460a      	mov	r2, r1
 801bfec:	68b9      	ldr	r1, [r7, #8]
 801bfee:	68f8      	ldr	r0, [r7, #12]
 801bff0:	f001 fe5e 	bl	801dcb0 <ethernet_output>
 801bff4:	4603      	mov	r3, r0
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3710      	adds	r7, #16
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}
 801bffe:	bf00      	nop
 801c000:	2000c92c 	.word	0x2000c92c
 801c004:	08023e8c 	.word	0x08023e8c
 801c008:	08023ffc 	.word	0x08023ffc
 801c00c:	08023f04 	.word	0x08023f04

0801c010 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801c010:	b580      	push	{r7, lr}
 801c012:	b08a      	sub	sp, #40	; 0x28
 801c014:	af02      	add	r7, sp, #8
 801c016:	60f8      	str	r0, [r7, #12]
 801c018:	60b9      	str	r1, [r7, #8]
 801c01a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c020:	68fb      	ldr	r3, [r7, #12]
 801c022:	2b00      	cmp	r3, #0
 801c024:	d106      	bne.n	801c034 <etharp_output+0x24>
 801c026:	4b73      	ldr	r3, [pc, #460]	; (801c1f4 <etharp_output+0x1e4>)
 801c028:	f240 321e 	movw	r2, #798	; 0x31e
 801c02c:	4972      	ldr	r1, [pc, #456]	; (801c1f8 <etharp_output+0x1e8>)
 801c02e:	4873      	ldr	r0, [pc, #460]	; (801c1fc <etharp_output+0x1ec>)
 801c030:	f002 fef8 	bl	801ee24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c034:	68bb      	ldr	r3, [r7, #8]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d106      	bne.n	801c048 <etharp_output+0x38>
 801c03a:	4b6e      	ldr	r3, [pc, #440]	; (801c1f4 <etharp_output+0x1e4>)
 801c03c:	f240 321f 	movw	r2, #799	; 0x31f
 801c040:	496f      	ldr	r1, [pc, #444]	; (801c200 <etharp_output+0x1f0>)
 801c042:	486e      	ldr	r0, [pc, #440]	; (801c1fc <etharp_output+0x1ec>)
 801c044:	f002 feee 	bl	801ee24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d106      	bne.n	801c05c <etharp_output+0x4c>
 801c04e:	4b69      	ldr	r3, [pc, #420]	; (801c1f4 <etharp_output+0x1e4>)
 801c050:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c054:	496b      	ldr	r1, [pc, #428]	; (801c204 <etharp_output+0x1f4>)
 801c056:	4869      	ldr	r0, [pc, #420]	; (801c1fc <etharp_output+0x1ec>)
 801c058:	f002 fee4 	bl	801ee24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	68f9      	ldr	r1, [r7, #12]
 801c062:	4618      	mov	r0, r3
 801c064:	f000 ff16 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801c068:	4603      	mov	r3, r0
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d002      	beq.n	801c074 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c06e:	4b66      	ldr	r3, [pc, #408]	; (801c208 <etharp_output+0x1f8>)
 801c070:	61fb      	str	r3, [r7, #28]
 801c072:	e0af      	b.n	801c1d4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	681b      	ldr	r3, [r3, #0]
 801c078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c07c:	2be0      	cmp	r3, #224	; 0xe0
 801c07e:	d118      	bne.n	801c0b2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c080:	2301      	movs	r3, #1
 801c082:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c084:	2300      	movs	r3, #0
 801c086:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c088:	235e      	movs	r3, #94	; 0x5e
 801c08a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c08c:	687b      	ldr	r3, [r7, #4]
 801c08e:	3301      	adds	r3, #1
 801c090:	781b      	ldrb	r3, [r3, #0]
 801c092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c096:	b2db      	uxtb	r3, r3
 801c098:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	3302      	adds	r3, #2
 801c09e:	781b      	ldrb	r3, [r3, #0]
 801c0a0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	3303      	adds	r3, #3
 801c0a6:	781b      	ldrb	r3, [r3, #0]
 801c0a8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c0aa:	f107 0310 	add.w	r3, r7, #16
 801c0ae:	61fb      	str	r3, [r7, #28]
 801c0b0:	e090      	b.n	801c1d4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681a      	ldr	r2, [r3, #0]
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	3304      	adds	r3, #4
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	405a      	eors	r2, r3
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	3308      	adds	r3, #8
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	4013      	ands	r3, r2
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d012      	beq.n	801c0f0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c0d0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c0d4:	4293      	cmp	r3, r2
 801c0d6:	d00b      	beq.n	801c0f0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	330c      	adds	r3, #12
 801c0dc:	681b      	ldr	r3, [r3, #0]
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d003      	beq.n	801c0ea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	330c      	adds	r3, #12
 801c0e6:	61bb      	str	r3, [r7, #24]
 801c0e8:	e002      	b.n	801c0f0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c0ea:	f06f 0303 	mvn.w	r3, #3
 801c0ee:	e07d      	b.n	801c1ec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c0f0:	4b46      	ldr	r3, [pc, #280]	; (801c20c <etharp_output+0x1fc>)
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	4619      	mov	r1, r3
 801c0f6:	4a46      	ldr	r2, [pc, #280]	; (801c210 <etharp_output+0x200>)
 801c0f8:	460b      	mov	r3, r1
 801c0fa:	005b      	lsls	r3, r3, #1
 801c0fc:	440b      	add	r3, r1
 801c0fe:	00db      	lsls	r3, r3, #3
 801c100:	4413      	add	r3, r2
 801c102:	3314      	adds	r3, #20
 801c104:	781b      	ldrb	r3, [r3, #0]
 801c106:	2b01      	cmp	r3, #1
 801c108:	d925      	bls.n	801c156 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c10a:	4b40      	ldr	r3, [pc, #256]	; (801c20c <etharp_output+0x1fc>)
 801c10c:	781b      	ldrb	r3, [r3, #0]
 801c10e:	4619      	mov	r1, r3
 801c110:	4a3f      	ldr	r2, [pc, #252]	; (801c210 <etharp_output+0x200>)
 801c112:	460b      	mov	r3, r1
 801c114:	005b      	lsls	r3, r3, #1
 801c116:	440b      	add	r3, r1
 801c118:	00db      	lsls	r3, r3, #3
 801c11a:	4413      	add	r3, r2
 801c11c:	3308      	adds	r3, #8
 801c11e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c120:	68fa      	ldr	r2, [r7, #12]
 801c122:	429a      	cmp	r2, r3
 801c124:	d117      	bne.n	801c156 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	681a      	ldr	r2, [r3, #0]
 801c12a:	4b38      	ldr	r3, [pc, #224]	; (801c20c <etharp_output+0x1fc>)
 801c12c:	781b      	ldrb	r3, [r3, #0]
 801c12e:	4618      	mov	r0, r3
 801c130:	4937      	ldr	r1, [pc, #220]	; (801c210 <etharp_output+0x200>)
 801c132:	4603      	mov	r3, r0
 801c134:	005b      	lsls	r3, r3, #1
 801c136:	4403      	add	r3, r0
 801c138:	00db      	lsls	r3, r3, #3
 801c13a:	440b      	add	r3, r1
 801c13c:	3304      	adds	r3, #4
 801c13e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c140:	429a      	cmp	r2, r3
 801c142:	d108      	bne.n	801c156 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c144:	4b31      	ldr	r3, [pc, #196]	; (801c20c <etharp_output+0x1fc>)
 801c146:	781b      	ldrb	r3, [r3, #0]
 801c148:	461a      	mov	r2, r3
 801c14a:	68b9      	ldr	r1, [r7, #8]
 801c14c:	68f8      	ldr	r0, [r7, #12]
 801c14e:	f7ff fec5 	bl	801bedc <etharp_output_to_arp_index>
 801c152:	4603      	mov	r3, r0
 801c154:	e04a      	b.n	801c1ec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c156:	2300      	movs	r3, #0
 801c158:	75fb      	strb	r3, [r7, #23]
 801c15a:	e031      	b.n	801c1c0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c15c:	7dfa      	ldrb	r2, [r7, #23]
 801c15e:	492c      	ldr	r1, [pc, #176]	; (801c210 <etharp_output+0x200>)
 801c160:	4613      	mov	r3, r2
 801c162:	005b      	lsls	r3, r3, #1
 801c164:	4413      	add	r3, r2
 801c166:	00db      	lsls	r3, r3, #3
 801c168:	440b      	add	r3, r1
 801c16a:	3314      	adds	r3, #20
 801c16c:	781b      	ldrb	r3, [r3, #0]
 801c16e:	2b01      	cmp	r3, #1
 801c170:	d923      	bls.n	801c1ba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c172:	7dfa      	ldrb	r2, [r7, #23]
 801c174:	4926      	ldr	r1, [pc, #152]	; (801c210 <etharp_output+0x200>)
 801c176:	4613      	mov	r3, r2
 801c178:	005b      	lsls	r3, r3, #1
 801c17a:	4413      	add	r3, r2
 801c17c:	00db      	lsls	r3, r3, #3
 801c17e:	440b      	add	r3, r1
 801c180:	3308      	adds	r3, #8
 801c182:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c184:	68fa      	ldr	r2, [r7, #12]
 801c186:	429a      	cmp	r2, r3
 801c188:	d117      	bne.n	801c1ba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c18a:	69bb      	ldr	r3, [r7, #24]
 801c18c:	6819      	ldr	r1, [r3, #0]
 801c18e:	7dfa      	ldrb	r2, [r7, #23]
 801c190:	481f      	ldr	r0, [pc, #124]	; (801c210 <etharp_output+0x200>)
 801c192:	4613      	mov	r3, r2
 801c194:	005b      	lsls	r3, r3, #1
 801c196:	4413      	add	r3, r2
 801c198:	00db      	lsls	r3, r3, #3
 801c19a:	4403      	add	r3, r0
 801c19c:	3304      	adds	r3, #4
 801c19e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c1a0:	4299      	cmp	r1, r3
 801c1a2:	d10a      	bne.n	801c1ba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c1a4:	4a19      	ldr	r2, [pc, #100]	; (801c20c <etharp_output+0x1fc>)
 801c1a6:	7dfb      	ldrb	r3, [r7, #23]
 801c1a8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c1aa:	7dfb      	ldrb	r3, [r7, #23]
 801c1ac:	461a      	mov	r2, r3
 801c1ae:	68b9      	ldr	r1, [r7, #8]
 801c1b0:	68f8      	ldr	r0, [r7, #12]
 801c1b2:	f7ff fe93 	bl	801bedc <etharp_output_to_arp_index>
 801c1b6:	4603      	mov	r3, r0
 801c1b8:	e018      	b.n	801c1ec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c1ba:	7dfb      	ldrb	r3, [r7, #23]
 801c1bc:	3301      	adds	r3, #1
 801c1be:	75fb      	strb	r3, [r7, #23]
 801c1c0:	7dfb      	ldrb	r3, [r7, #23]
 801c1c2:	2b09      	cmp	r3, #9
 801c1c4:	d9ca      	bls.n	801c15c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c1c6:	68ba      	ldr	r2, [r7, #8]
 801c1c8:	69b9      	ldr	r1, [r7, #24]
 801c1ca:	68f8      	ldr	r0, [r7, #12]
 801c1cc:	f000 f822 	bl	801c214 <etharp_query>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	e00b      	b.n	801c1ec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801c1da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	69fb      	ldr	r3, [r7, #28]
 801c1e2:	68b9      	ldr	r1, [r7, #8]
 801c1e4:	68f8      	ldr	r0, [r7, #12]
 801c1e6:	f001 fd63 	bl	801dcb0 <ethernet_output>
 801c1ea:	4603      	mov	r3, r0
}
 801c1ec:	4618      	mov	r0, r3
 801c1ee:	3720      	adds	r7, #32
 801c1f0:	46bd      	mov	sp, r7
 801c1f2:	bd80      	pop	{r7, pc}
 801c1f4:	08023e8c 	.word	0x08023e8c
 801c1f8:	08023fdc 	.word	0x08023fdc
 801c1fc:	08023f04 	.word	0x08023f04
 801c200:	0802402c 	.word	0x0802402c
 801c204:	08023fcc 	.word	0x08023fcc
 801c208:	0802478c 	.word	0x0802478c
 801c20c:	2000ca1c 	.word	0x2000ca1c
 801c210:	2000c92c 	.word	0x2000c92c

0801c214 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c214:	b580      	push	{r7, lr}
 801c216:	b08c      	sub	sp, #48	; 0x30
 801c218:	af02      	add	r7, sp, #8
 801c21a:	60f8      	str	r0, [r7, #12]
 801c21c:	60b9      	str	r1, [r7, #8]
 801c21e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	332a      	adds	r3, #42	; 0x2a
 801c224:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c226:	23ff      	movs	r3, #255	; 0xff
 801c228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c22c:	2300      	movs	r3, #0
 801c22e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	68f9      	ldr	r1, [r7, #12]
 801c236:	4618      	mov	r0, r3
 801c238:	f000 fe2c 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801c23c:	4603      	mov	r3, r0
 801c23e:	2b00      	cmp	r3, #0
 801c240:	d10c      	bne.n	801c25c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c242:	68bb      	ldr	r3, [r7, #8]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c24a:	2be0      	cmp	r3, #224	; 0xe0
 801c24c:	d006      	beq.n	801c25c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c24e:	68bb      	ldr	r3, [r7, #8]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d003      	beq.n	801c25c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c254:	68bb      	ldr	r3, [r7, #8]
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	2b00      	cmp	r3, #0
 801c25a:	d102      	bne.n	801c262 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c25c:	f06f 030f 	mvn.w	r3, #15
 801c260:	e101      	b.n	801c466 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c262:	68fa      	ldr	r2, [r7, #12]
 801c264:	2101      	movs	r1, #1
 801c266:	68b8      	ldr	r0, [r7, #8]
 801c268:	f7ff fb5c 	bl	801b924 <etharp_find_entry>
 801c26c:	4603      	mov	r3, r0
 801c26e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c274:	2b00      	cmp	r3, #0
 801c276:	da02      	bge.n	801c27e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c278:	8a7b      	ldrh	r3, [r7, #18]
 801c27a:	b25b      	sxtb	r3, r3
 801c27c:	e0f3      	b.n	801c466 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c27e:	8a7b      	ldrh	r3, [r7, #18]
 801c280:	2b7e      	cmp	r3, #126	; 0x7e
 801c282:	d906      	bls.n	801c292 <etharp_query+0x7e>
 801c284:	4b7a      	ldr	r3, [pc, #488]	; (801c470 <etharp_query+0x25c>)
 801c286:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c28a:	497a      	ldr	r1, [pc, #488]	; (801c474 <etharp_query+0x260>)
 801c28c:	487a      	ldr	r0, [pc, #488]	; (801c478 <etharp_query+0x264>)
 801c28e:	f002 fdc9 	bl	801ee24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c292:	8a7b      	ldrh	r3, [r7, #18]
 801c294:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c296:	7c7a      	ldrb	r2, [r7, #17]
 801c298:	4978      	ldr	r1, [pc, #480]	; (801c47c <etharp_query+0x268>)
 801c29a:	4613      	mov	r3, r2
 801c29c:	005b      	lsls	r3, r3, #1
 801c29e:	4413      	add	r3, r2
 801c2a0:	00db      	lsls	r3, r3, #3
 801c2a2:	440b      	add	r3, r1
 801c2a4:	3314      	adds	r3, #20
 801c2a6:	781b      	ldrb	r3, [r3, #0]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d115      	bne.n	801c2d8 <etharp_query+0xc4>
    is_new_entry = 1;
 801c2ac:	2301      	movs	r3, #1
 801c2ae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c2b0:	7c7a      	ldrb	r2, [r7, #17]
 801c2b2:	4972      	ldr	r1, [pc, #456]	; (801c47c <etharp_query+0x268>)
 801c2b4:	4613      	mov	r3, r2
 801c2b6:	005b      	lsls	r3, r3, #1
 801c2b8:	4413      	add	r3, r2
 801c2ba:	00db      	lsls	r3, r3, #3
 801c2bc:	440b      	add	r3, r1
 801c2be:	3314      	adds	r3, #20
 801c2c0:	2201      	movs	r2, #1
 801c2c2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c2c4:	7c7a      	ldrb	r2, [r7, #17]
 801c2c6:	496d      	ldr	r1, [pc, #436]	; (801c47c <etharp_query+0x268>)
 801c2c8:	4613      	mov	r3, r2
 801c2ca:	005b      	lsls	r3, r3, #1
 801c2cc:	4413      	add	r3, r2
 801c2ce:	00db      	lsls	r3, r3, #3
 801c2d0:	440b      	add	r3, r1
 801c2d2:	3308      	adds	r3, #8
 801c2d4:	68fa      	ldr	r2, [r7, #12]
 801c2d6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c2d8:	7c7a      	ldrb	r2, [r7, #17]
 801c2da:	4968      	ldr	r1, [pc, #416]	; (801c47c <etharp_query+0x268>)
 801c2dc:	4613      	mov	r3, r2
 801c2de:	005b      	lsls	r3, r3, #1
 801c2e0:	4413      	add	r3, r2
 801c2e2:	00db      	lsls	r3, r3, #3
 801c2e4:	440b      	add	r3, r1
 801c2e6:	3314      	adds	r3, #20
 801c2e8:	781b      	ldrb	r3, [r3, #0]
 801c2ea:	2b01      	cmp	r3, #1
 801c2ec:	d011      	beq.n	801c312 <etharp_query+0xfe>
 801c2ee:	7c7a      	ldrb	r2, [r7, #17]
 801c2f0:	4962      	ldr	r1, [pc, #392]	; (801c47c <etharp_query+0x268>)
 801c2f2:	4613      	mov	r3, r2
 801c2f4:	005b      	lsls	r3, r3, #1
 801c2f6:	4413      	add	r3, r2
 801c2f8:	00db      	lsls	r3, r3, #3
 801c2fa:	440b      	add	r3, r1
 801c2fc:	3314      	adds	r3, #20
 801c2fe:	781b      	ldrb	r3, [r3, #0]
 801c300:	2b01      	cmp	r3, #1
 801c302:	d806      	bhi.n	801c312 <etharp_query+0xfe>
 801c304:	4b5a      	ldr	r3, [pc, #360]	; (801c470 <etharp_query+0x25c>)
 801c306:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c30a:	495d      	ldr	r1, [pc, #372]	; (801c480 <etharp_query+0x26c>)
 801c30c:	485a      	ldr	r0, [pc, #360]	; (801c478 <etharp_query+0x264>)
 801c30e:	f002 fd89 	bl	801ee24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c312:	6a3b      	ldr	r3, [r7, #32]
 801c314:	2b00      	cmp	r3, #0
 801c316:	d102      	bne.n	801c31e <etharp_query+0x10a>
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d10c      	bne.n	801c338 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c31e:	68b9      	ldr	r1, [r7, #8]
 801c320:	68f8      	ldr	r0, [r7, #12]
 801c322:	f000 f963 	bl	801c5ec <etharp_request>
 801c326:	4603      	mov	r3, r0
 801c328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d102      	bne.n	801c338 <etharp_query+0x124>
      return result;
 801c332:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c336:	e096      	b.n	801c466 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c338:	687b      	ldr	r3, [r7, #4]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d106      	bne.n	801c34c <etharp_query+0x138>
 801c33e:	4b4c      	ldr	r3, [pc, #304]	; (801c470 <etharp_query+0x25c>)
 801c340:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c344:	494f      	ldr	r1, [pc, #316]	; (801c484 <etharp_query+0x270>)
 801c346:	484c      	ldr	r0, [pc, #304]	; (801c478 <etharp_query+0x264>)
 801c348:	f002 fd6c 	bl	801ee24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c34c:	7c7a      	ldrb	r2, [r7, #17]
 801c34e:	494b      	ldr	r1, [pc, #300]	; (801c47c <etharp_query+0x268>)
 801c350:	4613      	mov	r3, r2
 801c352:	005b      	lsls	r3, r3, #1
 801c354:	4413      	add	r3, r2
 801c356:	00db      	lsls	r3, r3, #3
 801c358:	440b      	add	r3, r1
 801c35a:	3314      	adds	r3, #20
 801c35c:	781b      	ldrb	r3, [r3, #0]
 801c35e:	2b01      	cmp	r3, #1
 801c360:	d917      	bls.n	801c392 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c362:	4a49      	ldr	r2, [pc, #292]	; (801c488 <etharp_query+0x274>)
 801c364:	7c7b      	ldrb	r3, [r7, #17]
 801c366:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c368:	7c7a      	ldrb	r2, [r7, #17]
 801c36a:	4613      	mov	r3, r2
 801c36c:	005b      	lsls	r3, r3, #1
 801c36e:	4413      	add	r3, r2
 801c370:	00db      	lsls	r3, r3, #3
 801c372:	3308      	adds	r3, #8
 801c374:	4a41      	ldr	r2, [pc, #260]	; (801c47c <etharp_query+0x268>)
 801c376:	4413      	add	r3, r2
 801c378:	3304      	adds	r3, #4
 801c37a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c37e:	9200      	str	r2, [sp, #0]
 801c380:	697a      	ldr	r2, [r7, #20]
 801c382:	6879      	ldr	r1, [r7, #4]
 801c384:	68f8      	ldr	r0, [r7, #12]
 801c386:	f001 fc93 	bl	801dcb0 <ethernet_output>
 801c38a:	4603      	mov	r3, r0
 801c38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c390:	e067      	b.n	801c462 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c392:	7c7a      	ldrb	r2, [r7, #17]
 801c394:	4939      	ldr	r1, [pc, #228]	; (801c47c <etharp_query+0x268>)
 801c396:	4613      	mov	r3, r2
 801c398:	005b      	lsls	r3, r3, #1
 801c39a:	4413      	add	r3, r2
 801c39c:	00db      	lsls	r3, r3, #3
 801c39e:	440b      	add	r3, r1
 801c3a0:	3314      	adds	r3, #20
 801c3a2:	781b      	ldrb	r3, [r3, #0]
 801c3a4:	2b01      	cmp	r3, #1
 801c3a6:	d15c      	bne.n	801c462 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c3b0:	e01c      	b.n	801c3ec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c3b2:	69fb      	ldr	r3, [r7, #28]
 801c3b4:	895a      	ldrh	r2, [r3, #10]
 801c3b6:	69fb      	ldr	r3, [r7, #28]
 801c3b8:	891b      	ldrh	r3, [r3, #8]
 801c3ba:	429a      	cmp	r2, r3
 801c3bc:	d10a      	bne.n	801c3d4 <etharp_query+0x1c0>
 801c3be:	69fb      	ldr	r3, [r7, #28]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	d006      	beq.n	801c3d4 <etharp_query+0x1c0>
 801c3c6:	4b2a      	ldr	r3, [pc, #168]	; (801c470 <etharp_query+0x25c>)
 801c3c8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c3cc:	492f      	ldr	r1, [pc, #188]	; (801c48c <etharp_query+0x278>)
 801c3ce:	482a      	ldr	r0, [pc, #168]	; (801c478 <etharp_query+0x264>)
 801c3d0:	f002 fd28 	bl	801ee24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c3d4:	69fb      	ldr	r3, [r7, #28]
 801c3d6:	7b1b      	ldrb	r3, [r3, #12]
 801c3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d002      	beq.n	801c3e6 <etharp_query+0x1d2>
        copy_needed = 1;
 801c3e0:	2301      	movs	r3, #1
 801c3e2:	61bb      	str	r3, [r7, #24]
        break;
 801c3e4:	e005      	b.n	801c3f2 <etharp_query+0x1de>
      }
      p = p->next;
 801c3e6:	69fb      	ldr	r3, [r7, #28]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c3ec:	69fb      	ldr	r3, [r7, #28]
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d1df      	bne.n	801c3b2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c3f2:	69bb      	ldr	r3, [r7, #24]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	d007      	beq.n	801c408 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c3f8:	687a      	ldr	r2, [r7, #4]
 801c3fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c3fe:	200e      	movs	r0, #14
 801c400:	f7f6 fbf6 	bl	8012bf0 <pbuf_clone>
 801c404:	61f8      	str	r0, [r7, #28]
 801c406:	e004      	b.n	801c412 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c40c:	69f8      	ldr	r0, [r7, #28]
 801c40e:	f7f6 fa1d 	bl	801284c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c412:	69fb      	ldr	r3, [r7, #28]
 801c414:	2b00      	cmp	r3, #0
 801c416:	d021      	beq.n	801c45c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c418:	7c7a      	ldrb	r2, [r7, #17]
 801c41a:	4918      	ldr	r1, [pc, #96]	; (801c47c <etharp_query+0x268>)
 801c41c:	4613      	mov	r3, r2
 801c41e:	005b      	lsls	r3, r3, #1
 801c420:	4413      	add	r3, r2
 801c422:	00db      	lsls	r3, r3, #3
 801c424:	440b      	add	r3, r1
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d00a      	beq.n	801c442 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c42c:	7c7a      	ldrb	r2, [r7, #17]
 801c42e:	4913      	ldr	r1, [pc, #76]	; (801c47c <etharp_query+0x268>)
 801c430:	4613      	mov	r3, r2
 801c432:	005b      	lsls	r3, r3, #1
 801c434:	4413      	add	r3, r2
 801c436:	00db      	lsls	r3, r3, #3
 801c438:	440b      	add	r3, r1
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	4618      	mov	r0, r3
 801c43e:	f7f6 f95f 	bl	8012700 <pbuf_free>
      }
      arp_table[i].q = p;
 801c442:	7c7a      	ldrb	r2, [r7, #17]
 801c444:	490d      	ldr	r1, [pc, #52]	; (801c47c <etharp_query+0x268>)
 801c446:	4613      	mov	r3, r2
 801c448:	005b      	lsls	r3, r3, #1
 801c44a:	4413      	add	r3, r2
 801c44c:	00db      	lsls	r3, r3, #3
 801c44e:	440b      	add	r3, r1
 801c450:	69fa      	ldr	r2, [r7, #28]
 801c452:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c454:	2300      	movs	r3, #0
 801c456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c45a:	e002      	b.n	801c462 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c45c:	23ff      	movs	r3, #255	; 0xff
 801c45e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c462:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c466:	4618      	mov	r0, r3
 801c468:	3728      	adds	r7, #40	; 0x28
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	bf00      	nop
 801c470:	08023e8c 	.word	0x08023e8c
 801c474:	08024038 	.word	0x08024038
 801c478:	08023f04 	.word	0x08023f04
 801c47c:	2000c92c 	.word	0x2000c92c
 801c480:	08024048 	.word	0x08024048
 801c484:	0802402c 	.word	0x0802402c
 801c488:	2000ca1c 	.word	0x2000ca1c
 801c48c:	08024070 	.word	0x08024070

0801c490 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c490:	b580      	push	{r7, lr}
 801c492:	b08a      	sub	sp, #40	; 0x28
 801c494:	af02      	add	r7, sp, #8
 801c496:	60f8      	str	r0, [r7, #12]
 801c498:	60b9      	str	r1, [r7, #8]
 801c49a:	607a      	str	r2, [r7, #4]
 801c49c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c49e:	2300      	movs	r3, #0
 801c4a0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	d106      	bne.n	801c4b6 <etharp_raw+0x26>
 801c4a8:	4b3a      	ldr	r3, [pc, #232]	; (801c594 <etharp_raw+0x104>)
 801c4aa:	f240 4257 	movw	r2, #1111	; 0x457
 801c4ae:	493a      	ldr	r1, [pc, #232]	; (801c598 <etharp_raw+0x108>)
 801c4b0:	483a      	ldr	r0, [pc, #232]	; (801c59c <etharp_raw+0x10c>)
 801c4b2:	f002 fcb7 	bl	801ee24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c4b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4ba:	211c      	movs	r1, #28
 801c4bc:	200e      	movs	r0, #14
 801c4be:	f7f5 fe3b 	bl	8012138 <pbuf_alloc>
 801c4c2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c4c4:	69bb      	ldr	r3, [r7, #24]
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d102      	bne.n	801c4d0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c4ce:	e05d      	b.n	801c58c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c4d0:	69bb      	ldr	r3, [r7, #24]
 801c4d2:	895b      	ldrh	r3, [r3, #10]
 801c4d4:	2b1b      	cmp	r3, #27
 801c4d6:	d806      	bhi.n	801c4e6 <etharp_raw+0x56>
 801c4d8:	4b2e      	ldr	r3, [pc, #184]	; (801c594 <etharp_raw+0x104>)
 801c4da:	f240 4262 	movw	r2, #1122	; 0x462
 801c4de:	4930      	ldr	r1, [pc, #192]	; (801c5a0 <etharp_raw+0x110>)
 801c4e0:	482e      	ldr	r0, [pc, #184]	; (801c59c <etharp_raw+0x10c>)
 801c4e2:	f002 fc9f 	bl	801ee24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c4e6:	69bb      	ldr	r3, [r7, #24]
 801c4e8:	685b      	ldr	r3, [r3, #4]
 801c4ea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c4ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c4ee:	4618      	mov	r0, r3
 801c4f0:	f7f4 fcd0 	bl	8010e94 <lwip_htons>
 801c4f4:	4603      	mov	r3, r0
 801c4f6:	461a      	mov	r2, r3
 801c4f8:	697b      	ldr	r3, [r7, #20]
 801c4fa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c502:	2b06      	cmp	r3, #6
 801c504:	d006      	beq.n	801c514 <etharp_raw+0x84>
 801c506:	4b23      	ldr	r3, [pc, #140]	; (801c594 <etharp_raw+0x104>)
 801c508:	f240 4269 	movw	r2, #1129	; 0x469
 801c50c:	4925      	ldr	r1, [pc, #148]	; (801c5a4 <etharp_raw+0x114>)
 801c50e:	4823      	ldr	r0, [pc, #140]	; (801c59c <etharp_raw+0x10c>)
 801c510:	f002 fc88 	bl	801ee24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	3308      	adds	r3, #8
 801c518:	2206      	movs	r2, #6
 801c51a:	6839      	ldr	r1, [r7, #0]
 801c51c:	4618      	mov	r0, r3
 801c51e:	f002 fee6 	bl	801f2ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c522:	697b      	ldr	r3, [r7, #20]
 801c524:	3312      	adds	r3, #18
 801c526:	2206      	movs	r2, #6
 801c528:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c52a:	4618      	mov	r0, r3
 801c52c:	f002 fedf 	bl	801f2ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c530:	697b      	ldr	r3, [r7, #20]
 801c532:	330e      	adds	r3, #14
 801c534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c536:	6812      	ldr	r2, [r2, #0]
 801c538:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	3318      	adds	r3, #24
 801c53e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c540:	6812      	ldr	r2, [r2, #0]
 801c542:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c544:	697b      	ldr	r3, [r7, #20]
 801c546:	2200      	movs	r2, #0
 801c548:	701a      	strb	r2, [r3, #0]
 801c54a:	2200      	movs	r2, #0
 801c54c:	f042 0201 	orr.w	r2, r2, #1
 801c550:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c552:	697b      	ldr	r3, [r7, #20]
 801c554:	2200      	movs	r2, #0
 801c556:	f042 0208 	orr.w	r2, r2, #8
 801c55a:	709a      	strb	r2, [r3, #2]
 801c55c:	2200      	movs	r2, #0
 801c55e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c560:	697b      	ldr	r3, [r7, #20]
 801c562:	2206      	movs	r2, #6
 801c564:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c566:	697b      	ldr	r3, [r7, #20]
 801c568:	2204      	movs	r2, #4
 801c56a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c56c:	f640 0306 	movw	r3, #2054	; 0x806
 801c570:	9300      	str	r3, [sp, #0]
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	68ba      	ldr	r2, [r7, #8]
 801c576:	69b9      	ldr	r1, [r7, #24]
 801c578:	68f8      	ldr	r0, [r7, #12]
 801c57a:	f001 fb99 	bl	801dcb0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c57e:	69b8      	ldr	r0, [r7, #24]
 801c580:	f7f6 f8be 	bl	8012700 <pbuf_free>
  p = NULL;
 801c584:	2300      	movs	r3, #0
 801c586:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c588:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c58c:	4618      	mov	r0, r3
 801c58e:	3720      	adds	r7, #32
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}
 801c594:	08023e8c 	.word	0x08023e8c
 801c598:	08023fdc 	.word	0x08023fdc
 801c59c:	08023f04 	.word	0x08023f04
 801c5a0:	0802408c 	.word	0x0802408c
 801c5a4:	080240c0 	.word	0x080240c0

0801c5a8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	b088      	sub	sp, #32
 801c5ac:	af04      	add	r7, sp, #16
 801c5ae:	60f8      	str	r0, [r7, #12]
 801c5b0:	60b9      	str	r1, [r7, #8]
 801c5b2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c5b4:	68fb      	ldr	r3, [r7, #12]
 801c5b6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c5c4:	2201      	movs	r2, #1
 801c5c6:	9203      	str	r2, [sp, #12]
 801c5c8:	68ba      	ldr	r2, [r7, #8]
 801c5ca:	9202      	str	r2, [sp, #8]
 801c5cc:	4a06      	ldr	r2, [pc, #24]	; (801c5e8 <etharp_request_dst+0x40>)
 801c5ce:	9201      	str	r2, [sp, #4]
 801c5d0:	9300      	str	r3, [sp, #0]
 801c5d2:	4603      	mov	r3, r0
 801c5d4:	687a      	ldr	r2, [r7, #4]
 801c5d6:	68f8      	ldr	r0, [r7, #12]
 801c5d8:	f7ff ff5a 	bl	801c490 <etharp_raw>
 801c5dc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c5de:	4618      	mov	r0, r3
 801c5e0:	3710      	adds	r7, #16
 801c5e2:	46bd      	mov	sp, r7
 801c5e4:	bd80      	pop	{r7, pc}
 801c5e6:	bf00      	nop
 801c5e8:	08024794 	.word	0x08024794

0801c5ec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c5ec:	b580      	push	{r7, lr}
 801c5ee:	b082      	sub	sp, #8
 801c5f0:	af00      	add	r7, sp, #0
 801c5f2:	6078      	str	r0, [r7, #4]
 801c5f4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c5f6:	4a05      	ldr	r2, [pc, #20]	; (801c60c <etharp_request+0x20>)
 801c5f8:	6839      	ldr	r1, [r7, #0]
 801c5fa:	6878      	ldr	r0, [r7, #4]
 801c5fc:	f7ff ffd4 	bl	801c5a8 <etharp_request_dst>
 801c600:	4603      	mov	r3, r0
}
 801c602:	4618      	mov	r0, r3
 801c604:	3708      	adds	r7, #8
 801c606:	46bd      	mov	sp, r7
 801c608:	bd80      	pop	{r7, pc}
 801c60a:	bf00      	nop
 801c60c:	0802478c 	.word	0x0802478c

0801c610 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b08e      	sub	sp, #56	; 0x38
 801c614:	af04      	add	r7, sp, #16
 801c616:	6078      	str	r0, [r7, #4]
 801c618:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c61a:	4b79      	ldr	r3, [pc, #484]	; (801c800 <icmp_input+0x1f0>)
 801c61c:	689b      	ldr	r3, [r3, #8]
 801c61e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c622:	781b      	ldrb	r3, [r3, #0]
 801c624:	f003 030f 	and.w	r3, r3, #15
 801c628:	b2db      	uxtb	r3, r3
 801c62a:	009b      	lsls	r3, r3, #2
 801c62c:	b2db      	uxtb	r3, r3
 801c62e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c630:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c632:	2b13      	cmp	r3, #19
 801c634:	f240 80cd 	bls.w	801c7d2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	895b      	ldrh	r3, [r3, #10]
 801c63c:	2b03      	cmp	r3, #3
 801c63e:	f240 80ca 	bls.w	801c7d6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	685b      	ldr	r3, [r3, #4]
 801c646:	781b      	ldrb	r3, [r3, #0]
 801c648:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c64c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c650:	2b00      	cmp	r3, #0
 801c652:	f000 80b7 	beq.w	801c7c4 <icmp_input+0x1b4>
 801c656:	2b08      	cmp	r3, #8
 801c658:	f040 80b7 	bne.w	801c7ca <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c65c:	4b69      	ldr	r3, [pc, #420]	; (801c804 <icmp_input+0x1f4>)
 801c65e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c660:	4b67      	ldr	r3, [pc, #412]	; (801c800 <icmp_input+0x1f0>)
 801c662:	695b      	ldr	r3, [r3, #20]
 801c664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c668:	2be0      	cmp	r3, #224	; 0xe0
 801c66a:	f000 80bb 	beq.w	801c7e4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c66e:	4b64      	ldr	r3, [pc, #400]	; (801c800 <icmp_input+0x1f0>)
 801c670:	695b      	ldr	r3, [r3, #20]
 801c672:	4a63      	ldr	r2, [pc, #396]	; (801c800 <icmp_input+0x1f0>)
 801c674:	6812      	ldr	r2, [r2, #0]
 801c676:	4611      	mov	r1, r2
 801c678:	4618      	mov	r0, r3
 801c67a:	f000 fc0b 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801c67e:	4603      	mov	r3, r0
 801c680:	2b00      	cmp	r3, #0
 801c682:	f040 80b1 	bne.w	801c7e8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c686:	687b      	ldr	r3, [r7, #4]
 801c688:	891b      	ldrh	r3, [r3, #8]
 801c68a:	2b07      	cmp	r3, #7
 801c68c:	f240 80a5 	bls.w	801c7da <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c690:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c692:	330e      	adds	r3, #14
 801c694:	4619      	mov	r1, r3
 801c696:	6878      	ldr	r0, [r7, #4]
 801c698:	f7f5 ff9c 	bl	80125d4 <pbuf_add_header>
 801c69c:	4603      	mov	r3, r0
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d04b      	beq.n	801c73a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	891a      	ldrh	r2, [r3, #8]
 801c6a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6a8:	4413      	add	r3, r2
 801c6aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	891b      	ldrh	r3, [r3, #8]
 801c6b0:	8b7a      	ldrh	r2, [r7, #26]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	f0c0 809a 	bcc.w	801c7ec <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c6b8:	8b7b      	ldrh	r3, [r7, #26]
 801c6ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c6be:	4619      	mov	r1, r3
 801c6c0:	200e      	movs	r0, #14
 801c6c2:	f7f5 fd39 	bl	8012138 <pbuf_alloc>
 801c6c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	2b00      	cmp	r3, #0
 801c6cc:	f000 8090 	beq.w	801c7f0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c6d0:	697b      	ldr	r3, [r7, #20]
 801c6d2:	895b      	ldrh	r3, [r3, #10]
 801c6d4:	461a      	mov	r2, r3
 801c6d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6d8:	3308      	adds	r3, #8
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	d203      	bcs.n	801c6e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c6de:	6978      	ldr	r0, [r7, #20]
 801c6e0:	f7f6 f80e 	bl	8012700 <pbuf_free>
          goto icmperr;
 801c6e4:	e085      	b.n	801c7f2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	685b      	ldr	r3, [r3, #4]
 801c6ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c6ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f002 fdfd 	bl	801f2ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c6f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6f6:	4619      	mov	r1, r3
 801c6f8:	6978      	ldr	r0, [r7, #20]
 801c6fa:	f7f5 ff7b 	bl	80125f4 <pbuf_remove_header>
 801c6fe:	4603      	mov	r3, r0
 801c700:	2b00      	cmp	r3, #0
 801c702:	d009      	beq.n	801c718 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c704:	4b40      	ldr	r3, [pc, #256]	; (801c808 <icmp_input+0x1f8>)
 801c706:	22b6      	movs	r2, #182	; 0xb6
 801c708:	4940      	ldr	r1, [pc, #256]	; (801c80c <icmp_input+0x1fc>)
 801c70a:	4841      	ldr	r0, [pc, #260]	; (801c810 <icmp_input+0x200>)
 801c70c:	f002 fb8a 	bl	801ee24 <iprintf>
          pbuf_free(r);
 801c710:	6978      	ldr	r0, [r7, #20]
 801c712:	f7f5 fff5 	bl	8012700 <pbuf_free>
          goto icmperr;
 801c716:	e06c      	b.n	801c7f2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c718:	6879      	ldr	r1, [r7, #4]
 801c71a:	6978      	ldr	r0, [r7, #20]
 801c71c:	f7f6 f924 	bl	8012968 <pbuf_copy>
 801c720:	4603      	mov	r3, r0
 801c722:	2b00      	cmp	r3, #0
 801c724:	d003      	beq.n	801c72e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c726:	6978      	ldr	r0, [r7, #20]
 801c728:	f7f5 ffea 	bl	8012700 <pbuf_free>
          goto icmperr;
 801c72c:	e061      	b.n	801c7f2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	f7f5 ffe6 	bl	8012700 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c734:	697b      	ldr	r3, [r7, #20]
 801c736:	607b      	str	r3, [r7, #4]
 801c738:	e00f      	b.n	801c75a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c73a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c73c:	330e      	adds	r3, #14
 801c73e:	4619      	mov	r1, r3
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7f5 ff57 	bl	80125f4 <pbuf_remove_header>
 801c746:	4603      	mov	r3, r0
 801c748:	2b00      	cmp	r3, #0
 801c74a:	d006      	beq.n	801c75a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c74c:	4b2e      	ldr	r3, [pc, #184]	; (801c808 <icmp_input+0x1f8>)
 801c74e:	22c7      	movs	r2, #199	; 0xc7
 801c750:	4930      	ldr	r1, [pc, #192]	; (801c814 <icmp_input+0x204>)
 801c752:	482f      	ldr	r0, [pc, #188]	; (801c810 <icmp_input+0x200>)
 801c754:	f002 fb66 	bl	801ee24 <iprintf>
          goto icmperr;
 801c758:	e04b      	b.n	801c7f2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	685b      	ldr	r3, [r3, #4]
 801c75e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c760:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c762:	4619      	mov	r1, r3
 801c764:	6878      	ldr	r0, [r7, #4]
 801c766:	f7f5 ff35 	bl	80125d4 <pbuf_add_header>
 801c76a:	4603      	mov	r3, r0
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d12b      	bne.n	801c7c8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	685b      	ldr	r3, [r3, #4]
 801c774:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c776:	69fb      	ldr	r3, [r7, #28]
 801c778:	681a      	ldr	r2, [r3, #0]
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c77e:	4b20      	ldr	r3, [pc, #128]	; (801c800 <icmp_input+0x1f0>)
 801c780:	691a      	ldr	r2, [r3, #16]
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c786:	693b      	ldr	r3, [r7, #16]
 801c788:	2200      	movs	r2, #0
 801c78a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c78c:	693b      	ldr	r3, [r7, #16]
 801c78e:	2200      	movs	r2, #0
 801c790:	709a      	strb	r2, [r3, #2]
 801c792:	2200      	movs	r2, #0
 801c794:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	22ff      	movs	r2, #255	; 0xff
 801c79a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	2200      	movs	r2, #0
 801c7a0:	729a      	strb	r2, [r3, #10]
 801c7a2:	2200      	movs	r2, #0
 801c7a4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	9302      	str	r3, [sp, #8]
 801c7aa:	2301      	movs	r3, #1
 801c7ac:	9301      	str	r3, [sp, #4]
 801c7ae:	2300      	movs	r3, #0
 801c7b0:	9300      	str	r3, [sp, #0]
 801c7b2:	23ff      	movs	r3, #255	; 0xff
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	69f9      	ldr	r1, [r7, #28]
 801c7b8:	6878      	ldr	r0, [r7, #4]
 801c7ba:	f000 fa93 	bl	801cce4 <ip4_output_if>
 801c7be:	4603      	mov	r3, r0
 801c7c0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c7c2:	e001      	b.n	801c7c8 <icmp_input+0x1b8>
      break;
 801c7c4:	bf00      	nop
 801c7c6:	e000      	b.n	801c7ca <icmp_input+0x1ba>
      break;
 801c7c8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c7ca:	6878      	ldr	r0, [r7, #4]
 801c7cc:	f7f5 ff98 	bl	8012700 <pbuf_free>
  return;
 801c7d0:	e013      	b.n	801c7fa <icmp_input+0x1ea>
    goto lenerr;
 801c7d2:	bf00      	nop
 801c7d4:	e002      	b.n	801c7dc <icmp_input+0x1cc>
    goto lenerr;
 801c7d6:	bf00      	nop
 801c7d8:	e000      	b.n	801c7dc <icmp_input+0x1cc>
        goto lenerr;
 801c7da:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c7dc:	6878      	ldr	r0, [r7, #4]
 801c7de:	f7f5 ff8f 	bl	8012700 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c7e2:	e00a      	b.n	801c7fa <icmp_input+0x1ea>
        goto icmperr;
 801c7e4:	bf00      	nop
 801c7e6:	e004      	b.n	801c7f2 <icmp_input+0x1e2>
        goto icmperr;
 801c7e8:	bf00      	nop
 801c7ea:	e002      	b.n	801c7f2 <icmp_input+0x1e2>
          goto icmperr;
 801c7ec:	bf00      	nop
 801c7ee:	e000      	b.n	801c7f2 <icmp_input+0x1e2>
          goto icmperr;
 801c7f0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c7f2:	6878      	ldr	r0, [r7, #4]
 801c7f4:	f7f5 ff84 	bl	8012700 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c7f8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c7fa:	3728      	adds	r7, #40	; 0x28
 801c7fc:	46bd      	mov	sp, r7
 801c7fe:	bd80      	pop	{r7, pc}
 801c800:	20009124 	.word	0x20009124
 801c804:	20009138 	.word	0x20009138
 801c808:	08024104 	.word	0x08024104
 801c80c:	0802413c 	.word	0x0802413c
 801c810:	08024174 	.word	0x08024174
 801c814:	0802419c 	.word	0x0802419c

0801c818 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c818:	b580      	push	{r7, lr}
 801c81a:	b082      	sub	sp, #8
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	6078      	str	r0, [r7, #4]
 801c820:	460b      	mov	r3, r1
 801c822:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c824:	78fb      	ldrb	r3, [r7, #3]
 801c826:	461a      	mov	r2, r3
 801c828:	2103      	movs	r1, #3
 801c82a:	6878      	ldr	r0, [r7, #4]
 801c82c:	f000 f814 	bl	801c858 <icmp_send_response>
}
 801c830:	bf00      	nop
 801c832:	3708      	adds	r7, #8
 801c834:	46bd      	mov	sp, r7
 801c836:	bd80      	pop	{r7, pc}

0801c838 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c838:	b580      	push	{r7, lr}
 801c83a:	b082      	sub	sp, #8
 801c83c:	af00      	add	r7, sp, #0
 801c83e:	6078      	str	r0, [r7, #4]
 801c840:	460b      	mov	r3, r1
 801c842:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c844:	78fb      	ldrb	r3, [r7, #3]
 801c846:	461a      	mov	r2, r3
 801c848:	210b      	movs	r1, #11
 801c84a:	6878      	ldr	r0, [r7, #4]
 801c84c:	f000 f804 	bl	801c858 <icmp_send_response>
}
 801c850:	bf00      	nop
 801c852:	3708      	adds	r7, #8
 801c854:	46bd      	mov	sp, r7
 801c856:	bd80      	pop	{r7, pc}

0801c858 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c858:	b580      	push	{r7, lr}
 801c85a:	b08c      	sub	sp, #48	; 0x30
 801c85c:	af04      	add	r7, sp, #16
 801c85e:	6078      	str	r0, [r7, #4]
 801c860:	460b      	mov	r3, r1
 801c862:	70fb      	strb	r3, [r7, #3]
 801c864:	4613      	mov	r3, r2
 801c866:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c868:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c86c:	2124      	movs	r1, #36	; 0x24
 801c86e:	2022      	movs	r0, #34	; 0x22
 801c870:	f7f5 fc62 	bl	8012138 <pbuf_alloc>
 801c874:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c876:	69fb      	ldr	r3, [r7, #28]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d04c      	beq.n	801c916 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c87c:	69fb      	ldr	r3, [r7, #28]
 801c87e:	895b      	ldrh	r3, [r3, #10]
 801c880:	2b23      	cmp	r3, #35	; 0x23
 801c882:	d806      	bhi.n	801c892 <icmp_send_response+0x3a>
 801c884:	4b26      	ldr	r3, [pc, #152]	; (801c920 <icmp_send_response+0xc8>)
 801c886:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c88a:	4926      	ldr	r1, [pc, #152]	; (801c924 <icmp_send_response+0xcc>)
 801c88c:	4826      	ldr	r0, [pc, #152]	; (801c928 <icmp_send_response+0xd0>)
 801c88e:	f002 fac9 	bl	801ee24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	685b      	ldr	r3, [r3, #4]
 801c896:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c898:	69fb      	ldr	r3, [r7, #28]
 801c89a:	685b      	ldr	r3, [r3, #4]
 801c89c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	78fa      	ldrb	r2, [r7, #3]
 801c8a2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c8a4:	697b      	ldr	r3, [r7, #20]
 801c8a6:	78ba      	ldrb	r2, [r7, #2]
 801c8a8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c8aa:	697b      	ldr	r3, [r7, #20]
 801c8ac:	2200      	movs	r2, #0
 801c8ae:	711a      	strb	r2, [r3, #4]
 801c8b0:	2200      	movs	r2, #0
 801c8b2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	2200      	movs	r2, #0
 801c8b8:	719a      	strb	r2, [r3, #6]
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c8be:	69fb      	ldr	r3, [r7, #28]
 801c8c0:	685b      	ldr	r3, [r3, #4]
 801c8c2:	f103 0008 	add.w	r0, r3, #8
 801c8c6:	687b      	ldr	r3, [r7, #4]
 801c8c8:	685b      	ldr	r3, [r3, #4]
 801c8ca:	221c      	movs	r2, #28
 801c8cc:	4619      	mov	r1, r3
 801c8ce:	f002 fd0e 	bl	801f2ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c8d2:	69bb      	ldr	r3, [r7, #24]
 801c8d4:	68db      	ldr	r3, [r3, #12]
 801c8d6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c8d8:	f107 030c 	add.w	r3, r7, #12
 801c8dc:	4618      	mov	r0, r3
 801c8de:	f000 f825 	bl	801c92c <ip4_route>
 801c8e2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c8e4:	693b      	ldr	r3, [r7, #16]
 801c8e6:	2b00      	cmp	r3, #0
 801c8e8:	d011      	beq.n	801c90e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c8ea:	697b      	ldr	r3, [r7, #20]
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	709a      	strb	r2, [r3, #2]
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c8f4:	f107 020c 	add.w	r2, r7, #12
 801c8f8:	693b      	ldr	r3, [r7, #16]
 801c8fa:	9302      	str	r3, [sp, #8]
 801c8fc:	2301      	movs	r3, #1
 801c8fe:	9301      	str	r3, [sp, #4]
 801c900:	2300      	movs	r3, #0
 801c902:	9300      	str	r3, [sp, #0]
 801c904:	23ff      	movs	r3, #255	; 0xff
 801c906:	2100      	movs	r1, #0
 801c908:	69f8      	ldr	r0, [r7, #28]
 801c90a:	f000 f9eb 	bl	801cce4 <ip4_output_if>
  }
  pbuf_free(q);
 801c90e:	69f8      	ldr	r0, [r7, #28]
 801c910:	f7f5 fef6 	bl	8012700 <pbuf_free>
 801c914:	e000      	b.n	801c918 <icmp_send_response+0xc0>
    return;
 801c916:	bf00      	nop
}
 801c918:	3720      	adds	r7, #32
 801c91a:	46bd      	mov	sp, r7
 801c91c:	bd80      	pop	{r7, pc}
 801c91e:	bf00      	nop
 801c920:	08024104 	.word	0x08024104
 801c924:	080241d0 	.word	0x080241d0
 801c928:	08024174 	.word	0x08024174

0801c92c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c92c:	b480      	push	{r7}
 801c92e:	b085      	sub	sp, #20
 801c930:	af00      	add	r7, sp, #0
 801c932:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c934:	4b33      	ldr	r3, [pc, #204]	; (801ca04 <ip4_route+0xd8>)
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	60fb      	str	r3, [r7, #12]
 801c93a:	e036      	b.n	801c9aa <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c93c:	68fb      	ldr	r3, [r7, #12]
 801c93e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c942:	f003 0301 	and.w	r3, r3, #1
 801c946:	b2db      	uxtb	r3, r3
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d02b      	beq.n	801c9a4 <ip4_route+0x78>
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c952:	089b      	lsrs	r3, r3, #2
 801c954:	f003 0301 	and.w	r3, r3, #1
 801c958:	b2db      	uxtb	r3, r3
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d022      	beq.n	801c9a4 <ip4_route+0x78>
 801c95e:	68fb      	ldr	r3, [r7, #12]
 801c960:	3304      	adds	r3, #4
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	2b00      	cmp	r3, #0
 801c966:	d01d      	beq.n	801c9a4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681a      	ldr	r2, [r3, #0]
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	3304      	adds	r3, #4
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	405a      	eors	r2, r3
 801c974:	68fb      	ldr	r3, [r7, #12]
 801c976:	3308      	adds	r3, #8
 801c978:	681b      	ldr	r3, [r3, #0]
 801c97a:	4013      	ands	r3, r2
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d101      	bne.n	801c984 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	e038      	b.n	801c9f6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c98a:	f003 0302 	and.w	r3, r3, #2
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d108      	bne.n	801c9a4 <ip4_route+0x78>
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681a      	ldr	r2, [r3, #0]
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	330c      	adds	r3, #12
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	429a      	cmp	r2, r3
 801c99e:	d101      	bne.n	801c9a4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	e028      	b.n	801c9f6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c9a4:	68fb      	ldr	r3, [r7, #12]
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	60fb      	str	r3, [r7, #12]
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d1c5      	bne.n	801c93c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c9b0:	4b15      	ldr	r3, [pc, #84]	; (801ca08 <ip4_route+0xdc>)
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d01a      	beq.n	801c9ee <ip4_route+0xc2>
 801c9b8:	4b13      	ldr	r3, [pc, #76]	; (801ca08 <ip4_route+0xdc>)
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c9c0:	f003 0301 	and.w	r3, r3, #1
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d012      	beq.n	801c9ee <ip4_route+0xc2>
 801c9c8:	4b0f      	ldr	r3, [pc, #60]	; (801ca08 <ip4_route+0xdc>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c9d0:	f003 0304 	and.w	r3, r3, #4
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d00a      	beq.n	801c9ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c9d8:	4b0b      	ldr	r3, [pc, #44]	; (801ca08 <ip4_route+0xdc>)
 801c9da:	681b      	ldr	r3, [r3, #0]
 801c9dc:	3304      	adds	r3, #4
 801c9de:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	d004      	beq.n	801c9ee <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	b2db      	uxtb	r3, r3
 801c9ea:	2b7f      	cmp	r3, #127	; 0x7f
 801c9ec:	d101      	bne.n	801c9f2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c9ee:	2300      	movs	r3, #0
 801c9f0:	e001      	b.n	801c9f6 <ip4_route+0xca>
  }

  return netif_default;
 801c9f2:	4b05      	ldr	r3, [pc, #20]	; (801ca08 <ip4_route+0xdc>)
 801c9f4:	681b      	ldr	r3, [r3, #0]
}
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	3714      	adds	r7, #20
 801c9fa:	46bd      	mov	sp, r7
 801c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca00:	4770      	bx	lr
 801ca02:	bf00      	nop
 801ca04:	2000c88c 	.word	0x2000c88c
 801ca08:	2000c890 	.word	0x2000c890

0801ca0c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	b082      	sub	sp, #8
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ca1a:	f003 0301 	and.w	r3, r3, #1
 801ca1e:	b2db      	uxtb	r3, r3
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d016      	beq.n	801ca52 <ip4_input_accept+0x46>
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	3304      	adds	r3, #4
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d011      	beq.n	801ca52 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ca2e:	4b0b      	ldr	r3, [pc, #44]	; (801ca5c <ip4_input_accept+0x50>)
 801ca30:	695a      	ldr	r2, [r3, #20]
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	3304      	adds	r3, #4
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	429a      	cmp	r2, r3
 801ca3a:	d008      	beq.n	801ca4e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ca3c:	4b07      	ldr	r3, [pc, #28]	; (801ca5c <ip4_input_accept+0x50>)
 801ca3e:	695b      	ldr	r3, [r3, #20]
 801ca40:	6879      	ldr	r1, [r7, #4]
 801ca42:	4618      	mov	r0, r3
 801ca44:	f000 fa26 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801ca48:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ca4a:	2b00      	cmp	r3, #0
 801ca4c:	d001      	beq.n	801ca52 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ca4e:	2301      	movs	r3, #1
 801ca50:	e000      	b.n	801ca54 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ca52:	2300      	movs	r3, #0
}
 801ca54:	4618      	mov	r0, r3
 801ca56:	3708      	adds	r7, #8
 801ca58:	46bd      	mov	sp, r7
 801ca5a:	bd80      	pop	{r7, pc}
 801ca5c:	20009124 	.word	0x20009124

0801ca60 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b088      	sub	sp, #32
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
 801ca68:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801ca6a:	2301      	movs	r3, #1
 801ca6c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	685b      	ldr	r3, [r3, #4]
 801ca72:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801ca74:	69fb      	ldr	r3, [r7, #28]
 801ca76:	781b      	ldrb	r3, [r3, #0]
 801ca78:	091b      	lsrs	r3, r3, #4
 801ca7a:	b2db      	uxtb	r3, r3
 801ca7c:	2b04      	cmp	r3, #4
 801ca7e:	d004      	beq.n	801ca8a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ca80:	6878      	ldr	r0, [r7, #4]
 801ca82:	f7f5 fe3d 	bl	8012700 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ca86:	2300      	movs	r3, #0
 801ca88:	e123      	b.n	801ccd2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ca8a:	69fb      	ldr	r3, [r7, #28]
 801ca8c:	781b      	ldrb	r3, [r3, #0]
 801ca8e:	f003 030f 	and.w	r3, r3, #15
 801ca92:	b2db      	uxtb	r3, r3
 801ca94:	009b      	lsls	r3, r3, #2
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ca9a:	69fb      	ldr	r3, [r7, #28]
 801ca9c:	885b      	ldrh	r3, [r3, #2]
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	4618      	mov	r0, r3
 801caa2:	f7f4 f9f7 	bl	8010e94 <lwip_htons>
 801caa6:	4603      	mov	r3, r0
 801caa8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	891b      	ldrh	r3, [r3, #8]
 801caae:	8a3a      	ldrh	r2, [r7, #16]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	d204      	bcs.n	801cabe <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801cab4:	8a3b      	ldrh	r3, [r7, #16]
 801cab6:	4619      	mov	r1, r3
 801cab8:	6878      	ldr	r0, [r7, #4]
 801caba:	f7f5 fc9b 	bl	80123f4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	895b      	ldrh	r3, [r3, #10]
 801cac2:	8a7a      	ldrh	r2, [r7, #18]
 801cac4:	429a      	cmp	r2, r3
 801cac6:	d807      	bhi.n	801cad8 <ip4_input+0x78>
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	891b      	ldrh	r3, [r3, #8]
 801cacc:	8a3a      	ldrh	r2, [r7, #16]
 801cace:	429a      	cmp	r2, r3
 801cad0:	d802      	bhi.n	801cad8 <ip4_input+0x78>
 801cad2:	8a7b      	ldrh	r3, [r7, #18]
 801cad4:	2b13      	cmp	r3, #19
 801cad6:	d804      	bhi.n	801cae2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cad8:	6878      	ldr	r0, [r7, #4]
 801cada:	f7f5 fe11 	bl	8012700 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cade:	2300      	movs	r3, #0
 801cae0:	e0f7      	b.n	801ccd2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cae2:	69fb      	ldr	r3, [r7, #28]
 801cae4:	691b      	ldr	r3, [r3, #16]
 801cae6:	4a7d      	ldr	r2, [pc, #500]	; (801ccdc <ip4_input+0x27c>)
 801cae8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801caea:	69fb      	ldr	r3, [r7, #28]
 801caec:	68db      	ldr	r3, [r3, #12]
 801caee:	4a7b      	ldr	r2, [pc, #492]	; (801ccdc <ip4_input+0x27c>)
 801caf0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801caf2:	4b7a      	ldr	r3, [pc, #488]	; (801ccdc <ip4_input+0x27c>)
 801caf4:	695b      	ldr	r3, [r3, #20]
 801caf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cafa:	2be0      	cmp	r3, #224	; 0xe0
 801cafc:	d112      	bne.n	801cb24 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cafe:	683b      	ldr	r3, [r7, #0]
 801cb00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cb04:	f003 0301 	and.w	r3, r3, #1
 801cb08:	b2db      	uxtb	r3, r3
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d007      	beq.n	801cb1e <ip4_input+0xbe>
 801cb0e:	683b      	ldr	r3, [r7, #0]
 801cb10:	3304      	adds	r3, #4
 801cb12:	681b      	ldr	r3, [r3, #0]
 801cb14:	2b00      	cmp	r3, #0
 801cb16:	d002      	beq.n	801cb1e <ip4_input+0xbe>
      netif = inp;
 801cb18:	683b      	ldr	r3, [r7, #0]
 801cb1a:	61bb      	str	r3, [r7, #24]
 801cb1c:	e02a      	b.n	801cb74 <ip4_input+0x114>
    } else {
      netif = NULL;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	61bb      	str	r3, [r7, #24]
 801cb22:	e027      	b.n	801cb74 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cb24:	6838      	ldr	r0, [r7, #0]
 801cb26:	f7ff ff71 	bl	801ca0c <ip4_input_accept>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	d002      	beq.n	801cb36 <ip4_input+0xd6>
      netif = inp;
 801cb30:	683b      	ldr	r3, [r7, #0]
 801cb32:	61bb      	str	r3, [r7, #24]
 801cb34:	e01e      	b.n	801cb74 <ip4_input+0x114>
    } else {
      netif = NULL;
 801cb36:	2300      	movs	r3, #0
 801cb38:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cb3a:	4b68      	ldr	r3, [pc, #416]	; (801ccdc <ip4_input+0x27c>)
 801cb3c:	695b      	ldr	r3, [r3, #20]
 801cb3e:	b2db      	uxtb	r3, r3
 801cb40:	2b7f      	cmp	r3, #127	; 0x7f
 801cb42:	d017      	beq.n	801cb74 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cb44:	4b66      	ldr	r3, [pc, #408]	; (801cce0 <ip4_input+0x280>)
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	61bb      	str	r3, [r7, #24]
 801cb4a:	e00e      	b.n	801cb6a <ip4_input+0x10a>
          if (netif == inp) {
 801cb4c:	69ba      	ldr	r2, [r7, #24]
 801cb4e:	683b      	ldr	r3, [r7, #0]
 801cb50:	429a      	cmp	r2, r3
 801cb52:	d006      	beq.n	801cb62 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cb54:	69b8      	ldr	r0, [r7, #24]
 801cb56:	f7ff ff59 	bl	801ca0c <ip4_input_accept>
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d108      	bne.n	801cb72 <ip4_input+0x112>
 801cb60:	e000      	b.n	801cb64 <ip4_input+0x104>
            continue;
 801cb62:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cb64:	69bb      	ldr	r3, [r7, #24]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	61bb      	str	r3, [r7, #24]
 801cb6a:	69bb      	ldr	r3, [r7, #24]
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	d1ed      	bne.n	801cb4c <ip4_input+0xec>
 801cb70:	e000      	b.n	801cb74 <ip4_input+0x114>
            break;
 801cb72:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801cb74:	69bb      	ldr	r3, [r7, #24]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d111      	bne.n	801cb9e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801cb7a:	69fb      	ldr	r3, [r7, #28]
 801cb7c:	7a5b      	ldrb	r3, [r3, #9]
 801cb7e:	2b11      	cmp	r3, #17
 801cb80:	d10d      	bne.n	801cb9e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801cb82:	8a7b      	ldrh	r3, [r7, #18]
 801cb84:	69fa      	ldr	r2, [r7, #28]
 801cb86:	4413      	add	r3, r2
 801cb88:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801cb8a:	68fb      	ldr	r3, [r7, #12]
 801cb8c:	885b      	ldrh	r3, [r3, #2]
 801cb8e:	b29b      	uxth	r3, r3
 801cb90:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801cb94:	d103      	bne.n	801cb9e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801cb96:	683b      	ldr	r3, [r7, #0]
 801cb98:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801cb9e:	697b      	ldr	r3, [r7, #20]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d017      	beq.n	801cbd4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801cba4:	4b4d      	ldr	r3, [pc, #308]	; (801ccdc <ip4_input+0x27c>)
 801cba6:	691b      	ldr	r3, [r3, #16]
 801cba8:	2b00      	cmp	r3, #0
 801cbaa:	d013      	beq.n	801cbd4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cbac:	4b4b      	ldr	r3, [pc, #300]	; (801ccdc <ip4_input+0x27c>)
 801cbae:	691b      	ldr	r3, [r3, #16]
 801cbb0:	6839      	ldr	r1, [r7, #0]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f000 f96e 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d105      	bne.n	801cbca <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cbbe:	4b47      	ldr	r3, [pc, #284]	; (801ccdc <ip4_input+0x27c>)
 801cbc0:	691b      	ldr	r3, [r3, #16]
 801cbc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cbc6:	2be0      	cmp	r3, #224	; 0xe0
 801cbc8:	d104      	bne.n	801cbd4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801cbca:	6878      	ldr	r0, [r7, #4]
 801cbcc:	f7f5 fd98 	bl	8012700 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cbd0:	2300      	movs	r3, #0
 801cbd2:	e07e      	b.n	801ccd2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cbd4:	69bb      	ldr	r3, [r7, #24]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d104      	bne.n	801cbe4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cbda:	6878      	ldr	r0, [r7, #4]
 801cbdc:	f7f5 fd90 	bl	8012700 <pbuf_free>
    return ERR_OK;
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	e076      	b.n	801ccd2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cbe4:	69fb      	ldr	r3, [r7, #28]
 801cbe6:	88db      	ldrh	r3, [r3, #6]
 801cbe8:	b29b      	uxth	r3, r3
 801cbea:	461a      	mov	r2, r3
 801cbec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801cbf0:	4013      	ands	r3, r2
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d00b      	beq.n	801cc0e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cbf6:	6878      	ldr	r0, [r7, #4]
 801cbf8:	f000 fc92 	bl	801d520 <ip4_reass>
 801cbfc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d101      	bne.n	801cc08 <ip4_input+0x1a8>
      return ERR_OK;
 801cc04:	2300      	movs	r3, #0
 801cc06:	e064      	b.n	801ccd2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	685b      	ldr	r3, [r3, #4]
 801cc0c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cc0e:	4a33      	ldr	r2, [pc, #204]	; (801ccdc <ip4_input+0x27c>)
 801cc10:	69bb      	ldr	r3, [r7, #24]
 801cc12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cc14:	4a31      	ldr	r2, [pc, #196]	; (801ccdc <ip4_input+0x27c>)
 801cc16:	683b      	ldr	r3, [r7, #0]
 801cc18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cc1a:	4a30      	ldr	r2, [pc, #192]	; (801ccdc <ip4_input+0x27c>)
 801cc1c:	69fb      	ldr	r3, [r7, #28]
 801cc1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cc20:	69fb      	ldr	r3, [r7, #28]
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	f003 030f 	and.w	r3, r3, #15
 801cc28:	b2db      	uxtb	r3, r3
 801cc2a:	009b      	lsls	r3, r3, #2
 801cc2c:	b2db      	uxtb	r3, r3
 801cc2e:	b29a      	uxth	r2, r3
 801cc30:	4b2a      	ldr	r3, [pc, #168]	; (801ccdc <ip4_input+0x27c>)
 801cc32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cc34:	8a7b      	ldrh	r3, [r7, #18]
 801cc36:	4619      	mov	r1, r3
 801cc38:	6878      	ldr	r0, [r7, #4]
 801cc3a:	f7f5 fcdb 	bl	80125f4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cc3e:	69fb      	ldr	r3, [r7, #28]
 801cc40:	7a5b      	ldrb	r3, [r3, #9]
 801cc42:	2b11      	cmp	r3, #17
 801cc44:	d006      	beq.n	801cc54 <ip4_input+0x1f4>
 801cc46:	2b11      	cmp	r3, #17
 801cc48:	dc13      	bgt.n	801cc72 <ip4_input+0x212>
 801cc4a:	2b01      	cmp	r3, #1
 801cc4c:	d00c      	beq.n	801cc68 <ip4_input+0x208>
 801cc4e:	2b06      	cmp	r3, #6
 801cc50:	d005      	beq.n	801cc5e <ip4_input+0x1fe>
 801cc52:	e00e      	b.n	801cc72 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cc54:	6839      	ldr	r1, [r7, #0]
 801cc56:	6878      	ldr	r0, [r7, #4]
 801cc58:	f7fc fac4 	bl	80191e4 <udp_input>
        break;
 801cc5c:	e026      	b.n	801ccac <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cc5e:	6839      	ldr	r1, [r7, #0]
 801cc60:	6878      	ldr	r0, [r7, #4]
 801cc62:	f7f7 fe7d 	bl	8014960 <tcp_input>
        break;
 801cc66:	e021      	b.n	801ccac <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cc68:	6839      	ldr	r1, [r7, #0]
 801cc6a:	6878      	ldr	r0, [r7, #4]
 801cc6c:	f7ff fcd0 	bl	801c610 <icmp_input>
        break;
 801cc70:	e01c      	b.n	801ccac <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cc72:	4b1a      	ldr	r3, [pc, #104]	; (801ccdc <ip4_input+0x27c>)
 801cc74:	695b      	ldr	r3, [r3, #20]
 801cc76:	69b9      	ldr	r1, [r7, #24]
 801cc78:	4618      	mov	r0, r3
 801cc7a:	f000 f90b 	bl	801ce94 <ip4_addr_isbroadcast_u32>
 801cc7e:	4603      	mov	r3, r0
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d10f      	bne.n	801cca4 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cc84:	4b15      	ldr	r3, [pc, #84]	; (801ccdc <ip4_input+0x27c>)
 801cc86:	695b      	ldr	r3, [r3, #20]
 801cc88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cc8c:	2be0      	cmp	r3, #224	; 0xe0
 801cc8e:	d009      	beq.n	801cca4 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cc90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cc94:	4619      	mov	r1, r3
 801cc96:	6878      	ldr	r0, [r7, #4]
 801cc98:	f7f5 fd1f 	bl	80126da <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cc9c:	2102      	movs	r1, #2
 801cc9e:	6878      	ldr	r0, [r7, #4]
 801cca0:	f7ff fdba 	bl	801c818 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f7f5 fd2b 	bl	8012700 <pbuf_free>
        break;
 801ccaa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ccac:	4b0b      	ldr	r3, [pc, #44]	; (801ccdc <ip4_input+0x27c>)
 801ccae:	2200      	movs	r2, #0
 801ccb0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ccb2:	4b0a      	ldr	r3, [pc, #40]	; (801ccdc <ip4_input+0x27c>)
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ccb8:	4b08      	ldr	r3, [pc, #32]	; (801ccdc <ip4_input+0x27c>)
 801ccba:	2200      	movs	r2, #0
 801ccbc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ccbe:	4b07      	ldr	r3, [pc, #28]	; (801ccdc <ip4_input+0x27c>)
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ccc4:	4b05      	ldr	r3, [pc, #20]	; (801ccdc <ip4_input+0x27c>)
 801ccc6:	2200      	movs	r2, #0
 801ccc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ccca:	4b04      	ldr	r3, [pc, #16]	; (801ccdc <ip4_input+0x27c>)
 801cccc:	2200      	movs	r2, #0
 801ccce:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3720      	adds	r7, #32
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	20009124 	.word	0x20009124
 801cce0:	2000c88c 	.word	0x2000c88c

0801cce4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b08a      	sub	sp, #40	; 0x28
 801cce8:	af04      	add	r7, sp, #16
 801ccea:	60f8      	str	r0, [r7, #12]
 801ccec:	60b9      	str	r1, [r7, #8]
 801ccee:	607a      	str	r2, [r7, #4]
 801ccf0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ccf2:	68bb      	ldr	r3, [r7, #8]
 801ccf4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d009      	beq.n	801cd10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ccfc:	68bb      	ldr	r3, [r7, #8]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d003      	beq.n	801cd0a <ip4_output_if+0x26>
 801cd02:	68bb      	ldr	r3, [r7, #8]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d102      	bne.n	801cd10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801cd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd0c:	3304      	adds	r3, #4
 801cd0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801cd10:	78fa      	ldrb	r2, [r7, #3]
 801cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd14:	9302      	str	r3, [sp, #8]
 801cd16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801cd1a:	9301      	str	r3, [sp, #4]
 801cd1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cd20:	9300      	str	r3, [sp, #0]
 801cd22:	4613      	mov	r3, r2
 801cd24:	687a      	ldr	r2, [r7, #4]
 801cd26:	6979      	ldr	r1, [r7, #20]
 801cd28:	68f8      	ldr	r0, [r7, #12]
 801cd2a:	f000 f805 	bl	801cd38 <ip4_output_if_src>
 801cd2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801cd30:	4618      	mov	r0, r3
 801cd32:	3718      	adds	r7, #24
 801cd34:	46bd      	mov	sp, r7
 801cd36:	bd80      	pop	{r7, pc}

0801cd38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b088      	sub	sp, #32
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	60f8      	str	r0, [r7, #12]
 801cd40:	60b9      	str	r1, [r7, #8]
 801cd42:	607a      	str	r2, [r7, #4]
 801cd44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	7b9b      	ldrb	r3, [r3, #14]
 801cd4a:	2b01      	cmp	r3, #1
 801cd4c:	d006      	beq.n	801cd5c <ip4_output_if_src+0x24>
 801cd4e:	4b4b      	ldr	r3, [pc, #300]	; (801ce7c <ip4_output_if_src+0x144>)
 801cd50:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cd54:	494a      	ldr	r1, [pc, #296]	; (801ce80 <ip4_output_if_src+0x148>)
 801cd56:	484b      	ldr	r0, [pc, #300]	; (801ce84 <ip4_output_if_src+0x14c>)
 801cd58:	f002 f864 	bl	801ee24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d060      	beq.n	801ce24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cd62:	2314      	movs	r3, #20
 801cd64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cd66:	2114      	movs	r1, #20
 801cd68:	68f8      	ldr	r0, [r7, #12]
 801cd6a:	f7f5 fc33 	bl	80125d4 <pbuf_add_header>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d002      	beq.n	801cd7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cd74:	f06f 0301 	mvn.w	r3, #1
 801cd78:	e07c      	b.n	801ce74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cd7a:	68fb      	ldr	r3, [r7, #12]
 801cd7c:	685b      	ldr	r3, [r3, #4]
 801cd7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	895b      	ldrh	r3, [r3, #10]
 801cd84:	2b13      	cmp	r3, #19
 801cd86:	d806      	bhi.n	801cd96 <ip4_output_if_src+0x5e>
 801cd88:	4b3c      	ldr	r3, [pc, #240]	; (801ce7c <ip4_output_if_src+0x144>)
 801cd8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801cd8e:	493e      	ldr	r1, [pc, #248]	; (801ce88 <ip4_output_if_src+0x150>)
 801cd90:	483c      	ldr	r0, [pc, #240]	; (801ce84 <ip4_output_if_src+0x14c>)
 801cd92:	f002 f847 	bl	801ee24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cd96:	69fb      	ldr	r3, [r7, #28]
 801cd98:	78fa      	ldrb	r2, [r7, #3]
 801cd9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cd9c:	69fb      	ldr	r3, [r7, #28]
 801cd9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cda2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	681a      	ldr	r2, [r3, #0]
 801cda8:	69fb      	ldr	r3, [r7, #28]
 801cdaa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cdac:	8b7b      	ldrh	r3, [r7, #26]
 801cdae:	089b      	lsrs	r3, r3, #2
 801cdb0:	b29b      	uxth	r3, r3
 801cdb2:	b2db      	uxtb	r3, r3
 801cdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cdb8:	b2da      	uxtb	r2, r3
 801cdba:	69fb      	ldr	r3, [r7, #28]
 801cdbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cdbe:	69fb      	ldr	r3, [r7, #28]
 801cdc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cdc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	891b      	ldrh	r3, [r3, #8]
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7f4 f862 	bl	8010e94 <lwip_htons>
 801cdd0:	4603      	mov	r3, r0
 801cdd2:	461a      	mov	r2, r3
 801cdd4:	69fb      	ldr	r3, [r7, #28]
 801cdd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cdd8:	69fb      	ldr	r3, [r7, #28]
 801cdda:	2200      	movs	r2, #0
 801cddc:	719a      	strb	r2, [r3, #6]
 801cdde:	2200      	movs	r2, #0
 801cde0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cde2:	4b2a      	ldr	r3, [pc, #168]	; (801ce8c <ip4_output_if_src+0x154>)
 801cde4:	881b      	ldrh	r3, [r3, #0]
 801cde6:	4618      	mov	r0, r3
 801cde8:	f7f4 f854 	bl	8010e94 <lwip_htons>
 801cdec:	4603      	mov	r3, r0
 801cdee:	461a      	mov	r2, r3
 801cdf0:	69fb      	ldr	r3, [r7, #28]
 801cdf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cdf4:	4b25      	ldr	r3, [pc, #148]	; (801ce8c <ip4_output_if_src+0x154>)
 801cdf6:	881b      	ldrh	r3, [r3, #0]
 801cdf8:	3301      	adds	r3, #1
 801cdfa:	b29a      	uxth	r2, r3
 801cdfc:	4b23      	ldr	r3, [pc, #140]	; (801ce8c <ip4_output_if_src+0x154>)
 801cdfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801ce00:	68bb      	ldr	r3, [r7, #8]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d104      	bne.n	801ce10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801ce06:	4b22      	ldr	r3, [pc, #136]	; (801ce90 <ip4_output_if_src+0x158>)
 801ce08:	681a      	ldr	r2, [r3, #0]
 801ce0a:	69fb      	ldr	r3, [r7, #28]
 801ce0c:	60da      	str	r2, [r3, #12]
 801ce0e:	e003      	b.n	801ce18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801ce10:	68bb      	ldr	r3, [r7, #8]
 801ce12:	681a      	ldr	r2, [r3, #0]
 801ce14:	69fb      	ldr	r3, [r7, #28]
 801ce16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801ce18:	69fb      	ldr	r3, [r7, #28]
 801ce1a:	2200      	movs	r2, #0
 801ce1c:	729a      	strb	r2, [r3, #10]
 801ce1e:	2200      	movs	r2, #0
 801ce20:	72da      	strb	r2, [r3, #11]
 801ce22:	e00f      	b.n	801ce44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801ce24:	68fb      	ldr	r3, [r7, #12]
 801ce26:	895b      	ldrh	r3, [r3, #10]
 801ce28:	2b13      	cmp	r3, #19
 801ce2a:	d802      	bhi.n	801ce32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801ce2c:	f06f 0301 	mvn.w	r3, #1
 801ce30:	e020      	b.n	801ce74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801ce32:	68fb      	ldr	r3, [r7, #12]
 801ce34:	685b      	ldr	r3, [r3, #4]
 801ce36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ce38:	69fb      	ldr	r3, [r7, #28]
 801ce3a:	691b      	ldr	r3, [r3, #16]
 801ce3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801ce3e:	f107 0314 	add.w	r3, r7, #20
 801ce42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d00c      	beq.n	801ce66 <ip4_output_if_src+0x12e>
 801ce4c:	68fb      	ldr	r3, [r7, #12]
 801ce4e:	891a      	ldrh	r2, [r3, #8]
 801ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801ce54:	429a      	cmp	r2, r3
 801ce56:	d906      	bls.n	801ce66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ce58:	687a      	ldr	r2, [r7, #4]
 801ce5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ce5c:	68f8      	ldr	r0, [r7, #12]
 801ce5e:	f000 fd53 	bl	801d908 <ip4_frag>
 801ce62:	4603      	mov	r3, r0
 801ce64:	e006      	b.n	801ce74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce68:	695b      	ldr	r3, [r3, #20]
 801ce6a:	687a      	ldr	r2, [r7, #4]
 801ce6c:	68f9      	ldr	r1, [r7, #12]
 801ce6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ce70:	4798      	blx	r3
 801ce72:	4603      	mov	r3, r0
}
 801ce74:	4618      	mov	r0, r3
 801ce76:	3720      	adds	r7, #32
 801ce78:	46bd      	mov	sp, r7
 801ce7a:	bd80      	pop	{r7, pc}
 801ce7c:	080241fc 	.word	0x080241fc
 801ce80:	08024230 	.word	0x08024230
 801ce84:	0802423c 	.word	0x0802423c
 801ce88:	08024264 	.word	0x08024264
 801ce8c:	2000ca1e 	.word	0x2000ca1e
 801ce90:	08024784 	.word	0x08024784

0801ce94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ce94:	b480      	push	{r7}
 801ce96:	b085      	sub	sp, #20
 801ce98:	af00      	add	r7, sp, #0
 801ce9a:	6078      	str	r0, [r7, #4]
 801ce9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801cea8:	d002      	beq.n	801ceb0 <ip4_addr_isbroadcast_u32+0x1c>
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d101      	bne.n	801ceb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	e02a      	b.n	801cf0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ceb4:	683b      	ldr	r3, [r7, #0]
 801ceb6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ceba:	f003 0302 	and.w	r3, r3, #2
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	d101      	bne.n	801cec6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801cec2:	2300      	movs	r3, #0
 801cec4:	e021      	b.n	801cf0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801cec6:	683b      	ldr	r3, [r7, #0]
 801cec8:	3304      	adds	r3, #4
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	687a      	ldr	r2, [r7, #4]
 801cece:	429a      	cmp	r2, r3
 801ced0:	d101      	bne.n	801ced6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ced2:	2300      	movs	r3, #0
 801ced4:	e019      	b.n	801cf0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ced6:	68fa      	ldr	r2, [r7, #12]
 801ced8:	683b      	ldr	r3, [r7, #0]
 801ceda:	3304      	adds	r3, #4
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	405a      	eors	r2, r3
 801cee0:	683b      	ldr	r3, [r7, #0]
 801cee2:	3308      	adds	r3, #8
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	4013      	ands	r3, r2
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d10d      	bne.n	801cf08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ceec:	683b      	ldr	r3, [r7, #0]
 801ceee:	3308      	adds	r3, #8
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	43da      	mvns	r2, r3
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cef8:	683b      	ldr	r3, [r7, #0]
 801cefa:	3308      	adds	r3, #8
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d101      	bne.n	801cf08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cf04:	2301      	movs	r3, #1
 801cf06:	e000      	b.n	801cf0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cf08:	2300      	movs	r3, #0
  }
}
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	3714      	adds	r7, #20
 801cf0e:	46bd      	mov	sp, r7
 801cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf14:	4770      	bx	lr
	...

0801cf18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b084      	sub	sp, #16
 801cf1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801cf1e:	2300      	movs	r3, #0
 801cf20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cf22:	4b12      	ldr	r3, [pc, #72]	; (801cf6c <ip_reass_tmr+0x54>)
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801cf28:	e018      	b.n	801cf5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801cf2a:	68fb      	ldr	r3, [r7, #12]
 801cf2c:	7fdb      	ldrb	r3, [r3, #31]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d00b      	beq.n	801cf4a <ip_reass_tmr+0x32>
      r->timer--;
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	7fdb      	ldrb	r3, [r3, #31]
 801cf36:	3b01      	subs	r3, #1
 801cf38:	b2da      	uxtb	r2, r3
 801cf3a:	68fb      	ldr	r3, [r7, #12]
 801cf3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	60fb      	str	r3, [r7, #12]
 801cf48:	e008      	b.n	801cf5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cf4a:	68fb      	ldr	r3, [r7, #12]
 801cf4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cf4e:	68fb      	ldr	r3, [r7, #12]
 801cf50:	681b      	ldr	r3, [r3, #0]
 801cf52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cf54:	68b9      	ldr	r1, [r7, #8]
 801cf56:	6878      	ldr	r0, [r7, #4]
 801cf58:	f000 f80a 	bl	801cf70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d1e3      	bne.n	801cf2a <ip_reass_tmr+0x12>
    }
  }
}
 801cf62:	bf00      	nop
 801cf64:	bf00      	nop
 801cf66:	3710      	adds	r7, #16
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bd80      	pop	{r7, pc}
 801cf6c:	2000ca20 	.word	0x2000ca20

0801cf70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b088      	sub	sp, #32
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
 801cf78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cf7a:	2300      	movs	r3, #0
 801cf7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cf7e:	683a      	ldr	r2, [r7, #0]
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	429a      	cmp	r2, r3
 801cf84:	d105      	bne.n	801cf92 <ip_reass_free_complete_datagram+0x22>
 801cf86:	4b45      	ldr	r3, [pc, #276]	; (801d09c <ip_reass_free_complete_datagram+0x12c>)
 801cf88:	22ab      	movs	r2, #171	; 0xab
 801cf8a:	4945      	ldr	r1, [pc, #276]	; (801d0a0 <ip_reass_free_complete_datagram+0x130>)
 801cf8c:	4845      	ldr	r0, [pc, #276]	; (801d0a4 <ip_reass_free_complete_datagram+0x134>)
 801cf8e:	f001 ff49 	bl	801ee24 <iprintf>
  if (prev != NULL) {
 801cf92:	683b      	ldr	r3, [r7, #0]
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d00a      	beq.n	801cfae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cf98:	683b      	ldr	r3, [r7, #0]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	687a      	ldr	r2, [r7, #4]
 801cf9e:	429a      	cmp	r2, r3
 801cfa0:	d005      	beq.n	801cfae <ip_reass_free_complete_datagram+0x3e>
 801cfa2:	4b3e      	ldr	r3, [pc, #248]	; (801d09c <ip_reass_free_complete_datagram+0x12c>)
 801cfa4:	22ad      	movs	r2, #173	; 0xad
 801cfa6:	4940      	ldr	r1, [pc, #256]	; (801d0a8 <ip_reass_free_complete_datagram+0x138>)
 801cfa8:	483e      	ldr	r0, [pc, #248]	; (801d0a4 <ip_reass_free_complete_datagram+0x134>)
 801cfaa:	f001 ff3b 	bl	801ee24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	685b      	ldr	r3, [r3, #4]
 801cfb2:	685b      	ldr	r3, [r3, #4]
 801cfb4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cfb6:	697b      	ldr	r3, [r7, #20]
 801cfb8:	889b      	ldrh	r3, [r3, #4]
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d12a      	bne.n	801d016 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	685b      	ldr	r3, [r3, #4]
 801cfc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cfc6:	697b      	ldr	r3, [r7, #20]
 801cfc8:	681a      	ldr	r2, [r3, #0]
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cfce:	69bb      	ldr	r3, [r7, #24]
 801cfd0:	6858      	ldr	r0, [r3, #4]
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	3308      	adds	r3, #8
 801cfd6:	2214      	movs	r2, #20
 801cfd8:	4619      	mov	r1, r3
 801cfda:	f002 f988 	bl	801f2ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cfde:	2101      	movs	r1, #1
 801cfe0:	69b8      	ldr	r0, [r7, #24]
 801cfe2:	f7ff fc29 	bl	801c838 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cfe6:	69b8      	ldr	r0, [r7, #24]
 801cfe8:	f7f5 fc18 	bl	801281c <pbuf_clen>
 801cfec:	4603      	mov	r3, r0
 801cfee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cff0:	8bfa      	ldrh	r2, [r7, #30]
 801cff2:	8a7b      	ldrh	r3, [r7, #18]
 801cff4:	4413      	add	r3, r2
 801cff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cffa:	db05      	blt.n	801d008 <ip_reass_free_complete_datagram+0x98>
 801cffc:	4b27      	ldr	r3, [pc, #156]	; (801d09c <ip_reass_free_complete_datagram+0x12c>)
 801cffe:	22bc      	movs	r2, #188	; 0xbc
 801d000:	492a      	ldr	r1, [pc, #168]	; (801d0ac <ip_reass_free_complete_datagram+0x13c>)
 801d002:	4828      	ldr	r0, [pc, #160]	; (801d0a4 <ip_reass_free_complete_datagram+0x134>)
 801d004:	f001 ff0e 	bl	801ee24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d008:	8bfa      	ldrh	r2, [r7, #30]
 801d00a:	8a7b      	ldrh	r3, [r7, #18]
 801d00c:	4413      	add	r3, r2
 801d00e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801d010:	69b8      	ldr	r0, [r7, #24]
 801d012:	f7f5 fb75 	bl	8012700 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801d01c:	e01f      	b.n	801d05e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801d01e:	69bb      	ldr	r3, [r7, #24]
 801d020:	685b      	ldr	r3, [r3, #4]
 801d022:	617b      	str	r3, [r7, #20]
    pcur = p;
 801d024:	69bb      	ldr	r3, [r7, #24]
 801d026:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801d028:	697b      	ldr	r3, [r7, #20]
 801d02a:	681b      	ldr	r3, [r3, #0]
 801d02c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801d02e:	68f8      	ldr	r0, [r7, #12]
 801d030:	f7f5 fbf4 	bl	801281c <pbuf_clen>
 801d034:	4603      	mov	r3, r0
 801d036:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801d038:	8bfa      	ldrh	r2, [r7, #30]
 801d03a:	8a7b      	ldrh	r3, [r7, #18]
 801d03c:	4413      	add	r3, r2
 801d03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d042:	db05      	blt.n	801d050 <ip_reass_free_complete_datagram+0xe0>
 801d044:	4b15      	ldr	r3, [pc, #84]	; (801d09c <ip_reass_free_complete_datagram+0x12c>)
 801d046:	22cc      	movs	r2, #204	; 0xcc
 801d048:	4918      	ldr	r1, [pc, #96]	; (801d0ac <ip_reass_free_complete_datagram+0x13c>)
 801d04a:	4816      	ldr	r0, [pc, #88]	; (801d0a4 <ip_reass_free_complete_datagram+0x134>)
 801d04c:	f001 feea 	bl	801ee24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801d050:	8bfa      	ldrh	r2, [r7, #30]
 801d052:	8a7b      	ldrh	r3, [r7, #18]
 801d054:	4413      	add	r3, r2
 801d056:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d058:	68f8      	ldr	r0, [r7, #12]
 801d05a:	f7f5 fb51 	bl	8012700 <pbuf_free>
  while (p != NULL) {
 801d05e:	69bb      	ldr	r3, [r7, #24]
 801d060:	2b00      	cmp	r3, #0
 801d062:	d1dc      	bne.n	801d01e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d064:	6839      	ldr	r1, [r7, #0]
 801d066:	6878      	ldr	r0, [r7, #4]
 801d068:	f000 f8c2 	bl	801d1f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d06c:	4b10      	ldr	r3, [pc, #64]	; (801d0b0 <ip_reass_free_complete_datagram+0x140>)
 801d06e:	881b      	ldrh	r3, [r3, #0]
 801d070:	8bfa      	ldrh	r2, [r7, #30]
 801d072:	429a      	cmp	r2, r3
 801d074:	d905      	bls.n	801d082 <ip_reass_free_complete_datagram+0x112>
 801d076:	4b09      	ldr	r3, [pc, #36]	; (801d09c <ip_reass_free_complete_datagram+0x12c>)
 801d078:	22d2      	movs	r2, #210	; 0xd2
 801d07a:	490e      	ldr	r1, [pc, #56]	; (801d0b4 <ip_reass_free_complete_datagram+0x144>)
 801d07c:	4809      	ldr	r0, [pc, #36]	; (801d0a4 <ip_reass_free_complete_datagram+0x134>)
 801d07e:	f001 fed1 	bl	801ee24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d082:	4b0b      	ldr	r3, [pc, #44]	; (801d0b0 <ip_reass_free_complete_datagram+0x140>)
 801d084:	881a      	ldrh	r2, [r3, #0]
 801d086:	8bfb      	ldrh	r3, [r7, #30]
 801d088:	1ad3      	subs	r3, r2, r3
 801d08a:	b29a      	uxth	r2, r3
 801d08c:	4b08      	ldr	r3, [pc, #32]	; (801d0b0 <ip_reass_free_complete_datagram+0x140>)
 801d08e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d090:	8bfb      	ldrh	r3, [r7, #30]
}
 801d092:	4618      	mov	r0, r3
 801d094:	3720      	adds	r7, #32
 801d096:	46bd      	mov	sp, r7
 801d098:	bd80      	pop	{r7, pc}
 801d09a:	bf00      	nop
 801d09c:	08024294 	.word	0x08024294
 801d0a0:	080242d0 	.word	0x080242d0
 801d0a4:	080242dc 	.word	0x080242dc
 801d0a8:	08024304 	.word	0x08024304
 801d0ac:	08024318 	.word	0x08024318
 801d0b0:	2000ca24 	.word	0x2000ca24
 801d0b4:	08024338 	.word	0x08024338

0801d0b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d0b8:	b580      	push	{r7, lr}
 801d0ba:	b08a      	sub	sp, #40	; 0x28
 801d0bc:	af00      	add	r7, sp, #0
 801d0be:	6078      	str	r0, [r7, #4]
 801d0c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d0c2:	2300      	movs	r3, #0
 801d0c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d0c6:	2300      	movs	r3, #0
 801d0c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d0ca:	2300      	movs	r3, #0
 801d0cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d0ce:	2300      	movs	r3, #0
 801d0d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d0d2:	2300      	movs	r3, #0
 801d0d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d0d6:	4b28      	ldr	r3, [pc, #160]	; (801d178 <ip_reass_remove_oldest_datagram+0xc0>)
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d0dc:	e030      	b.n	801d140 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e0:	695a      	ldr	r2, [r3, #20]
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	68db      	ldr	r3, [r3, #12]
 801d0e6:	429a      	cmp	r2, r3
 801d0e8:	d10c      	bne.n	801d104 <ip_reass_remove_oldest_datagram+0x4c>
 801d0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ec:	699a      	ldr	r2, [r3, #24]
 801d0ee:	687b      	ldr	r3, [r7, #4]
 801d0f0:	691b      	ldr	r3, [r3, #16]
 801d0f2:	429a      	cmp	r2, r3
 801d0f4:	d106      	bne.n	801d104 <ip_reass_remove_oldest_datagram+0x4c>
 801d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f8:	899a      	ldrh	r2, [r3, #12]
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	889b      	ldrh	r3, [r3, #4]
 801d0fe:	b29b      	uxth	r3, r3
 801d100:	429a      	cmp	r2, r3
 801d102:	d014      	beq.n	801d12e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d104:	693b      	ldr	r3, [r7, #16]
 801d106:	3301      	adds	r3, #1
 801d108:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d10a:	6a3b      	ldr	r3, [r7, #32]
 801d10c:	2b00      	cmp	r3, #0
 801d10e:	d104      	bne.n	801d11a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d112:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d114:	69fb      	ldr	r3, [r7, #28]
 801d116:	61bb      	str	r3, [r7, #24]
 801d118:	e009      	b.n	801d12e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d11c:	7fda      	ldrb	r2, [r3, #31]
 801d11e:	6a3b      	ldr	r3, [r7, #32]
 801d120:	7fdb      	ldrb	r3, [r3, #31]
 801d122:	429a      	cmp	r2, r3
 801d124:	d803      	bhi.n	801d12e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d128:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d12a:	69fb      	ldr	r3, [r7, #28]
 801d12c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	2b00      	cmp	r3, #0
 801d134:	d001      	beq.n	801d13a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d138:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d142:	2b00      	cmp	r3, #0
 801d144:	d1cb      	bne.n	801d0de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d146:	6a3b      	ldr	r3, [r7, #32]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d008      	beq.n	801d15e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d14c:	69b9      	ldr	r1, [r7, #24]
 801d14e:	6a38      	ldr	r0, [r7, #32]
 801d150:	f7ff ff0e 	bl	801cf70 <ip_reass_free_complete_datagram>
 801d154:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d156:	697a      	ldr	r2, [r7, #20]
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	4413      	add	r3, r2
 801d15c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d15e:	697a      	ldr	r2, [r7, #20]
 801d160:	683b      	ldr	r3, [r7, #0]
 801d162:	429a      	cmp	r2, r3
 801d164:	da02      	bge.n	801d16c <ip_reass_remove_oldest_datagram+0xb4>
 801d166:	693b      	ldr	r3, [r7, #16]
 801d168:	2b01      	cmp	r3, #1
 801d16a:	dcac      	bgt.n	801d0c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d16c:	697b      	ldr	r3, [r7, #20]
}
 801d16e:	4618      	mov	r0, r3
 801d170:	3728      	adds	r7, #40	; 0x28
 801d172:	46bd      	mov	sp, r7
 801d174:	bd80      	pop	{r7, pc}
 801d176:	bf00      	nop
 801d178:	2000ca20 	.word	0x2000ca20

0801d17c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d17c:	b580      	push	{r7, lr}
 801d17e:	b084      	sub	sp, #16
 801d180:	af00      	add	r7, sp, #0
 801d182:	6078      	str	r0, [r7, #4]
 801d184:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d186:	2004      	movs	r0, #4
 801d188:	f7f4 fb5c 	bl	8011844 <memp_malloc>
 801d18c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	2b00      	cmp	r3, #0
 801d192:	d110      	bne.n	801d1b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d194:	6839      	ldr	r1, [r7, #0]
 801d196:	6878      	ldr	r0, [r7, #4]
 801d198:	f7ff ff8e 	bl	801d0b8 <ip_reass_remove_oldest_datagram>
 801d19c:	4602      	mov	r2, r0
 801d19e:	683b      	ldr	r3, [r7, #0]
 801d1a0:	4293      	cmp	r3, r2
 801d1a2:	dc03      	bgt.n	801d1ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d1a4:	2004      	movs	r0, #4
 801d1a6:	f7f4 fb4d 	bl	8011844 <memp_malloc>
 801d1aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d1ac:	68fb      	ldr	r3, [r7, #12]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d101      	bne.n	801d1b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d1b2:	2300      	movs	r3, #0
 801d1b4:	e016      	b.n	801d1e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d1b6:	2220      	movs	r2, #32
 801d1b8:	2100      	movs	r1, #0
 801d1ba:	68f8      	ldr	r0, [r7, #12]
 801d1bc:	f001 ff88 	bl	801f0d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	220f      	movs	r2, #15
 801d1c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d1c6:	4b09      	ldr	r3, [pc, #36]	; (801d1ec <ip_reass_enqueue_new_datagram+0x70>)
 801d1c8:	681a      	ldr	r2, [r3, #0]
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d1ce:	4a07      	ldr	r2, [pc, #28]	; (801d1ec <ip_reass_enqueue_new_datagram+0x70>)
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d1d4:	68fb      	ldr	r3, [r7, #12]
 801d1d6:	3308      	adds	r3, #8
 801d1d8:	2214      	movs	r2, #20
 801d1da:	6879      	ldr	r1, [r7, #4]
 801d1dc:	4618      	mov	r0, r3
 801d1de:	f002 f886 	bl	801f2ee <memcpy>
  return ipr;
 801d1e2:	68fb      	ldr	r3, [r7, #12]
}
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	3710      	adds	r7, #16
 801d1e8:	46bd      	mov	sp, r7
 801d1ea:	bd80      	pop	{r7, pc}
 801d1ec:	2000ca20 	.word	0x2000ca20

0801d1f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d1f0:	b580      	push	{r7, lr}
 801d1f2:	b082      	sub	sp, #8
 801d1f4:	af00      	add	r7, sp, #0
 801d1f6:	6078      	str	r0, [r7, #4]
 801d1f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d1fa:	4b10      	ldr	r3, [pc, #64]	; (801d23c <ip_reass_dequeue_datagram+0x4c>)
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	687a      	ldr	r2, [r7, #4]
 801d200:	429a      	cmp	r2, r3
 801d202:	d104      	bne.n	801d20e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	4a0c      	ldr	r2, [pc, #48]	; (801d23c <ip_reass_dequeue_datagram+0x4c>)
 801d20a:	6013      	str	r3, [r2, #0]
 801d20c:	e00d      	b.n	801d22a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d20e:	683b      	ldr	r3, [r7, #0]
 801d210:	2b00      	cmp	r3, #0
 801d212:	d106      	bne.n	801d222 <ip_reass_dequeue_datagram+0x32>
 801d214:	4b0a      	ldr	r3, [pc, #40]	; (801d240 <ip_reass_dequeue_datagram+0x50>)
 801d216:	f240 1245 	movw	r2, #325	; 0x145
 801d21a:	490a      	ldr	r1, [pc, #40]	; (801d244 <ip_reass_dequeue_datagram+0x54>)
 801d21c:	480a      	ldr	r0, [pc, #40]	; (801d248 <ip_reass_dequeue_datagram+0x58>)
 801d21e:	f001 fe01 	bl	801ee24 <iprintf>
    prev->next = ipr->next;
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	681a      	ldr	r2, [r3, #0]
 801d226:	683b      	ldr	r3, [r7, #0]
 801d228:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d22a:	6879      	ldr	r1, [r7, #4]
 801d22c:	2004      	movs	r0, #4
 801d22e:	f7f4 fb7f 	bl	8011930 <memp_free>
}
 801d232:	bf00      	nop
 801d234:	3708      	adds	r7, #8
 801d236:	46bd      	mov	sp, r7
 801d238:	bd80      	pop	{r7, pc}
 801d23a:	bf00      	nop
 801d23c:	2000ca20 	.word	0x2000ca20
 801d240:	08024294 	.word	0x08024294
 801d244:	0802435c 	.word	0x0802435c
 801d248:	080242dc 	.word	0x080242dc

0801d24c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d24c:	b580      	push	{r7, lr}
 801d24e:	b08c      	sub	sp, #48	; 0x30
 801d250:	af00      	add	r7, sp, #0
 801d252:	60f8      	str	r0, [r7, #12]
 801d254:	60b9      	str	r1, [r7, #8]
 801d256:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d258:	2300      	movs	r3, #0
 801d25a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d25c:	2301      	movs	r3, #1
 801d25e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d260:	68bb      	ldr	r3, [r7, #8]
 801d262:	685b      	ldr	r3, [r3, #4]
 801d264:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d266:	69fb      	ldr	r3, [r7, #28]
 801d268:	885b      	ldrh	r3, [r3, #2]
 801d26a:	b29b      	uxth	r3, r3
 801d26c:	4618      	mov	r0, r3
 801d26e:	f7f3 fe11 	bl	8010e94 <lwip_htons>
 801d272:	4603      	mov	r3, r0
 801d274:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d276:	69fb      	ldr	r3, [r7, #28]
 801d278:	781b      	ldrb	r3, [r3, #0]
 801d27a:	f003 030f 	and.w	r3, r3, #15
 801d27e:	b2db      	uxtb	r3, r3
 801d280:	009b      	lsls	r3, r3, #2
 801d282:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d284:	7e7b      	ldrb	r3, [r7, #25]
 801d286:	b29b      	uxth	r3, r3
 801d288:	8b7a      	ldrh	r2, [r7, #26]
 801d28a:	429a      	cmp	r2, r3
 801d28c:	d202      	bcs.n	801d294 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d292:	e135      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d294:	7e7b      	ldrb	r3, [r7, #25]
 801d296:	b29b      	uxth	r3, r3
 801d298:	8b7a      	ldrh	r2, [r7, #26]
 801d29a:	1ad3      	subs	r3, r2, r3
 801d29c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d29e:	69fb      	ldr	r3, [r7, #28]
 801d2a0:	88db      	ldrh	r3, [r3, #6]
 801d2a2:	b29b      	uxth	r3, r3
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f3 fdf5 	bl	8010e94 <lwip_htons>
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d2b0:	b29b      	uxth	r3, r3
 801d2b2:	00db      	lsls	r3, r3, #3
 801d2b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d2b6:	68bb      	ldr	r3, [r7, #8]
 801d2b8:	685b      	ldr	r3, [r3, #4]
 801d2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2be:	2200      	movs	r2, #0
 801d2c0:	701a      	strb	r2, [r3, #0]
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	705a      	strb	r2, [r3, #1]
 801d2c6:	2200      	movs	r2, #0
 801d2c8:	709a      	strb	r2, [r3, #2]
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2d0:	8afa      	ldrh	r2, [r7, #22]
 801d2d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d2d4:	8afa      	ldrh	r2, [r7, #22]
 801d2d6:	8b7b      	ldrh	r3, [r7, #26]
 801d2d8:	4413      	add	r3, r2
 801d2da:	b29a      	uxth	r2, r3
 801d2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2e2:	88db      	ldrh	r3, [r3, #6]
 801d2e4:	b29b      	uxth	r3, r3
 801d2e6:	8afa      	ldrh	r2, [r7, #22]
 801d2e8:	429a      	cmp	r2, r3
 801d2ea:	d902      	bls.n	801d2f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d2f0:	e106      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	685b      	ldr	r3, [r3, #4]
 801d2f6:	627b      	str	r3, [r7, #36]	; 0x24
 801d2f8:	e068      	b.n	801d3cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2fc:	685b      	ldr	r3, [r3, #4]
 801d2fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d302:	889b      	ldrh	r3, [r3, #4]
 801d304:	b29a      	uxth	r2, r3
 801d306:	693b      	ldr	r3, [r7, #16]
 801d308:	889b      	ldrh	r3, [r3, #4]
 801d30a:	b29b      	uxth	r3, r3
 801d30c:	429a      	cmp	r2, r3
 801d30e:	d235      	bcs.n	801d37c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d314:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d020      	beq.n	801d35e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d31e:	889b      	ldrh	r3, [r3, #4]
 801d320:	b29a      	uxth	r2, r3
 801d322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d324:	88db      	ldrh	r3, [r3, #6]
 801d326:	b29b      	uxth	r3, r3
 801d328:	429a      	cmp	r2, r3
 801d32a:	d307      	bcc.n	801d33c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d32e:	88db      	ldrh	r3, [r3, #6]
 801d330:	b29a      	uxth	r2, r3
 801d332:	693b      	ldr	r3, [r7, #16]
 801d334:	889b      	ldrh	r3, [r3, #4]
 801d336:	b29b      	uxth	r3, r3
 801d338:	429a      	cmp	r2, r3
 801d33a:	d902      	bls.n	801d342 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d33c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d340:	e0de      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d344:	68ba      	ldr	r2, [r7, #8]
 801d346:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d34a:	88db      	ldrh	r3, [r3, #6]
 801d34c:	b29a      	uxth	r2, r3
 801d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d350:	889b      	ldrh	r3, [r3, #4]
 801d352:	b29b      	uxth	r3, r3
 801d354:	429a      	cmp	r2, r3
 801d356:	d03d      	beq.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d358:	2300      	movs	r3, #0
 801d35a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d35c:	e03a      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d360:	88db      	ldrh	r3, [r3, #6]
 801d362:	b29a      	uxth	r2, r3
 801d364:	693b      	ldr	r3, [r7, #16]
 801d366:	889b      	ldrh	r3, [r3, #4]
 801d368:	b29b      	uxth	r3, r3
 801d36a:	429a      	cmp	r2, r3
 801d36c:	d902      	bls.n	801d374 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d36e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d372:	e0c5      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	68ba      	ldr	r2, [r7, #8]
 801d378:	605a      	str	r2, [r3, #4]
      break;
 801d37a:	e02b      	b.n	801d3d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d37e:	889b      	ldrh	r3, [r3, #4]
 801d380:	b29a      	uxth	r2, r3
 801d382:	693b      	ldr	r3, [r7, #16]
 801d384:	889b      	ldrh	r3, [r3, #4]
 801d386:	b29b      	uxth	r3, r3
 801d388:	429a      	cmp	r2, r3
 801d38a:	d102      	bne.n	801d392 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d38c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d390:	e0b6      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d394:	889b      	ldrh	r3, [r3, #4]
 801d396:	b29a      	uxth	r2, r3
 801d398:	693b      	ldr	r3, [r7, #16]
 801d39a:	88db      	ldrh	r3, [r3, #6]
 801d39c:	b29b      	uxth	r3, r3
 801d39e:	429a      	cmp	r2, r3
 801d3a0:	d202      	bcs.n	801d3a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d3a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d3a6:	e0ab      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d009      	beq.n	801d3c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3b0:	88db      	ldrh	r3, [r3, #6]
 801d3b2:	b29a      	uxth	r2, r3
 801d3b4:	693b      	ldr	r3, [r7, #16]
 801d3b6:	889b      	ldrh	r3, [r3, #4]
 801d3b8:	b29b      	uxth	r3, r3
 801d3ba:	429a      	cmp	r2, r3
 801d3bc:	d001      	beq.n	801d3c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d3be:	2300      	movs	r3, #0
 801d3c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d3c2:	693b      	ldr	r3, [r7, #16]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d3c8:	693b      	ldr	r3, [r7, #16]
 801d3ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3ce:	2b00      	cmp	r3, #0
 801d3d0:	d193      	bne.n	801d2fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d3d2:	e000      	b.n	801d3d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d3d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d12d      	bne.n	801d438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d01c      	beq.n	801d41c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3e4:	88db      	ldrh	r3, [r3, #6]
 801d3e6:	b29a      	uxth	r2, r3
 801d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ea:	889b      	ldrh	r3, [r3, #4]
 801d3ec:	b29b      	uxth	r3, r3
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	d906      	bls.n	801d400 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d3f2:	4b45      	ldr	r3, [pc, #276]	; (801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d3f8:	4944      	ldr	r1, [pc, #272]	; (801d50c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d3fa:	4845      	ldr	r0, [pc, #276]	; (801d510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3fc:	f001 fd12 	bl	801ee24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d402:	68ba      	ldr	r2, [r7, #8]
 801d404:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d408:	88db      	ldrh	r3, [r3, #6]
 801d40a:	b29a      	uxth	r2, r3
 801d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d40e:	889b      	ldrh	r3, [r3, #4]
 801d410:	b29b      	uxth	r3, r3
 801d412:	429a      	cmp	r2, r3
 801d414:	d010      	beq.n	801d438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d416:	2300      	movs	r3, #0
 801d418:	623b      	str	r3, [r7, #32]
 801d41a:	e00d      	b.n	801d438 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	685b      	ldr	r3, [r3, #4]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d006      	beq.n	801d432 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d424:	4b38      	ldr	r3, [pc, #224]	; (801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d426:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d42a:	493a      	ldr	r1, [pc, #232]	; (801d514 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d42c:	4838      	ldr	r0, [pc, #224]	; (801d510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d42e:	f001 fcf9 	bl	801ee24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	68ba      	ldr	r2, [r7, #8]
 801d436:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d105      	bne.n	801d44a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	7f9b      	ldrb	r3, [r3, #30]
 801d442:	f003 0301 	and.w	r3, r3, #1
 801d446:	2b00      	cmp	r3, #0
 801d448:	d059      	beq.n	801d4fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d44a:	6a3b      	ldr	r3, [r7, #32]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d04f      	beq.n	801d4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	685b      	ldr	r3, [r3, #4]
 801d454:	2b00      	cmp	r3, #0
 801d456:	d006      	beq.n	801d466 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d458:	68fb      	ldr	r3, [r7, #12]
 801d45a:	685b      	ldr	r3, [r3, #4]
 801d45c:	685b      	ldr	r3, [r3, #4]
 801d45e:	889b      	ldrh	r3, [r3, #4]
 801d460:	b29b      	uxth	r3, r3
 801d462:	2b00      	cmp	r3, #0
 801d464:	d002      	beq.n	801d46c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d466:	2300      	movs	r3, #0
 801d468:	623b      	str	r3, [r7, #32]
 801d46a:	e041      	b.n	801d4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d46e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d476:	e012      	b.n	801d49e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d47a:	685b      	ldr	r3, [r3, #4]
 801d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d480:	88db      	ldrh	r3, [r3, #6]
 801d482:	b29a      	uxth	r2, r3
 801d484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d486:	889b      	ldrh	r3, [r3, #4]
 801d488:	b29b      	uxth	r3, r3
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d002      	beq.n	801d494 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d48e:	2300      	movs	r3, #0
 801d490:	623b      	str	r3, [r7, #32]
            break;
 801d492:	e007      	b.n	801d4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d496:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d49e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d4a0:	2b00      	cmp	r3, #0
 801d4a2:	d1e9      	bne.n	801d478 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d4a4:	6a3b      	ldr	r3, [r7, #32]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d022      	beq.n	801d4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d106      	bne.n	801d4c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d4b2:	4b15      	ldr	r3, [pc, #84]	; (801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4b4:	f240 12df 	movw	r2, #479	; 0x1df
 801d4b8:	4917      	ldr	r1, [pc, #92]	; (801d518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d4ba:	4815      	ldr	r0, [pc, #84]	; (801d510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d4bc:	f001 fcb2 	bl	801ee24 <iprintf>
          LWIP_ASSERT("sanity check",
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	685b      	ldr	r3, [r3, #4]
 801d4c4:	685b      	ldr	r3, [r3, #4]
 801d4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4c8:	429a      	cmp	r2, r3
 801d4ca:	d106      	bne.n	801d4da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d4cc:	4b0e      	ldr	r3, [pc, #56]	; (801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d4d2:	4911      	ldr	r1, [pc, #68]	; (801d518 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d4d4:	480e      	ldr	r0, [pc, #56]	; (801d510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d4d6:	f001 fca5 	bl	801ee24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d006      	beq.n	801d4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d4e2:	4b09      	ldr	r3, [pc, #36]	; (801d508 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d4e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d4e8:	490c      	ldr	r1, [pc, #48]	; (801d51c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d4ea:	4809      	ldr	r0, [pc, #36]	; (801d510 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d4ec:	f001 fc9a 	bl	801ee24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d4f0:	6a3b      	ldr	r3, [r7, #32]
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	bf14      	ite	ne
 801d4f6:	2301      	movne	r3, #1
 801d4f8:	2300      	moveq	r3, #0
 801d4fa:	b2db      	uxtb	r3, r3
 801d4fc:	e000      	b.n	801d500 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d4fe:	2300      	movs	r3, #0
}
 801d500:	4618      	mov	r0, r3
 801d502:	3730      	adds	r7, #48	; 0x30
 801d504:	46bd      	mov	sp, r7
 801d506:	bd80      	pop	{r7, pc}
 801d508:	08024294 	.word	0x08024294
 801d50c:	08024378 	.word	0x08024378
 801d510:	080242dc 	.word	0x080242dc
 801d514:	08024398 	.word	0x08024398
 801d518:	080243d0 	.word	0x080243d0
 801d51c:	080243e0 	.word	0x080243e0

0801d520 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d520:	b580      	push	{r7, lr}
 801d522:	b08e      	sub	sp, #56	; 0x38
 801d524:	af00      	add	r7, sp, #0
 801d526:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	685b      	ldr	r3, [r3, #4]
 801d52c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d530:	781b      	ldrb	r3, [r3, #0]
 801d532:	f003 030f 	and.w	r3, r3, #15
 801d536:	b2db      	uxtb	r3, r3
 801d538:	009b      	lsls	r3, r3, #2
 801d53a:	b2db      	uxtb	r3, r3
 801d53c:	2b14      	cmp	r3, #20
 801d53e:	f040 8171 	bne.w	801d824 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d544:	88db      	ldrh	r3, [r3, #6]
 801d546:	b29b      	uxth	r3, r3
 801d548:	4618      	mov	r0, r3
 801d54a:	f7f3 fca3 	bl	8010e94 <lwip_htons>
 801d54e:	4603      	mov	r3, r0
 801d550:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d554:	b29b      	uxth	r3, r3
 801d556:	00db      	lsls	r3, r3, #3
 801d558:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d55c:	885b      	ldrh	r3, [r3, #2]
 801d55e:	b29b      	uxth	r3, r3
 801d560:	4618      	mov	r0, r3
 801d562:	f7f3 fc97 	bl	8010e94 <lwip_htons>
 801d566:	4603      	mov	r3, r0
 801d568:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d56c:	781b      	ldrb	r3, [r3, #0]
 801d56e:	f003 030f 	and.w	r3, r3, #15
 801d572:	b2db      	uxtb	r3, r3
 801d574:	009b      	lsls	r3, r3, #2
 801d576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d57a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d57e:	b29b      	uxth	r3, r3
 801d580:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d582:	429a      	cmp	r2, r3
 801d584:	f0c0 8150 	bcc.w	801d828 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d588:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d590:	1ad3      	subs	r3, r2, r3
 801d592:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d594:	6878      	ldr	r0, [r7, #4]
 801d596:	f7f5 f941 	bl	801281c <pbuf_clen>
 801d59a:	4603      	mov	r3, r0
 801d59c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d59e:	4b8c      	ldr	r3, [pc, #560]	; (801d7d0 <ip4_reass+0x2b0>)
 801d5a0:	881b      	ldrh	r3, [r3, #0]
 801d5a2:	461a      	mov	r2, r3
 801d5a4:	8c3b      	ldrh	r3, [r7, #32]
 801d5a6:	4413      	add	r3, r2
 801d5a8:	2b0a      	cmp	r3, #10
 801d5aa:	dd10      	ble.n	801d5ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d5ac:	8c3b      	ldrh	r3, [r7, #32]
 801d5ae:	4619      	mov	r1, r3
 801d5b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5b2:	f7ff fd81 	bl	801d0b8 <ip_reass_remove_oldest_datagram>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	f000 8137 	beq.w	801d82c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d5be:	4b84      	ldr	r3, [pc, #528]	; (801d7d0 <ip4_reass+0x2b0>)
 801d5c0:	881b      	ldrh	r3, [r3, #0]
 801d5c2:	461a      	mov	r2, r3
 801d5c4:	8c3b      	ldrh	r3, [r7, #32]
 801d5c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d5c8:	2b0a      	cmp	r3, #10
 801d5ca:	f300 812f 	bgt.w	801d82c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d5ce:	4b81      	ldr	r3, [pc, #516]	; (801d7d4 <ip4_reass+0x2b4>)
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	633b      	str	r3, [r7, #48]	; 0x30
 801d5d4:	e015      	b.n	801d602 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5d8:	695a      	ldr	r2, [r3, #20]
 801d5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5dc:	68db      	ldr	r3, [r3, #12]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d10c      	bne.n	801d5fc <ip4_reass+0xdc>
 801d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5e4:	699a      	ldr	r2, [r3, #24]
 801d5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5e8:	691b      	ldr	r3, [r3, #16]
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d106      	bne.n	801d5fc <ip4_reass+0xdc>
 801d5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5f0:	899a      	ldrh	r2, [r3, #12]
 801d5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5f4:	889b      	ldrh	r3, [r3, #4]
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	429a      	cmp	r2, r3
 801d5fa:	d006      	beq.n	801d60a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	633b      	str	r3, [r7, #48]	; 0x30
 801d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d604:	2b00      	cmp	r3, #0
 801d606:	d1e6      	bne.n	801d5d6 <ip4_reass+0xb6>
 801d608:	e000      	b.n	801d60c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d60a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d109      	bne.n	801d626 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d612:	8c3b      	ldrh	r3, [r7, #32]
 801d614:	4619      	mov	r1, r3
 801d616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d618:	f7ff fdb0 	bl	801d17c <ip_reass_enqueue_new_datagram>
 801d61c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d620:	2b00      	cmp	r3, #0
 801d622:	d11c      	bne.n	801d65e <ip4_reass+0x13e>
      goto nullreturn;
 801d624:	e105      	b.n	801d832 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d628:	88db      	ldrh	r3, [r3, #6]
 801d62a:	b29b      	uxth	r3, r3
 801d62c:	4618      	mov	r0, r3
 801d62e:	f7f3 fc31 	bl	8010e94 <lwip_htons>
 801d632:	4603      	mov	r3, r0
 801d634:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d110      	bne.n	801d65e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d63e:	89db      	ldrh	r3, [r3, #14]
 801d640:	4618      	mov	r0, r3
 801d642:	f7f3 fc27 	bl	8010e94 <lwip_htons>
 801d646:	4603      	mov	r3, r0
 801d648:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d64c:	2b00      	cmp	r3, #0
 801d64e:	d006      	beq.n	801d65e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d652:	3308      	adds	r3, #8
 801d654:	2214      	movs	r2, #20
 801d656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d658:	4618      	mov	r0, r3
 801d65a:	f001 fe48 	bl	801f2ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d660:	88db      	ldrh	r3, [r3, #6]
 801d662:	b29b      	uxth	r3, r3
 801d664:	f003 0320 	and.w	r3, r3, #32
 801d668:	2b00      	cmp	r3, #0
 801d66a:	bf0c      	ite	eq
 801d66c:	2301      	moveq	r3, #1
 801d66e:	2300      	movne	r3, #0
 801d670:	b2db      	uxtb	r3, r3
 801d672:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d674:	69fb      	ldr	r3, [r7, #28]
 801d676:	2b00      	cmp	r3, #0
 801d678:	d00e      	beq.n	801d698 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d67a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d67c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d67e:	4413      	add	r3, r2
 801d680:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d682:	8b7a      	ldrh	r2, [r7, #26]
 801d684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d686:	429a      	cmp	r2, r3
 801d688:	f0c0 80a0 	bcc.w	801d7cc <ip4_reass+0x2ac>
 801d68c:	8b7b      	ldrh	r3, [r7, #26]
 801d68e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d692:	4293      	cmp	r3, r2
 801d694:	f200 809a 	bhi.w	801d7cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d698:	69fa      	ldr	r2, [r7, #28]
 801d69a:	6879      	ldr	r1, [r7, #4]
 801d69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d69e:	f7ff fdd5 	bl	801d24c <ip_reass_chain_frag_into_datagram_and_validate>
 801d6a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d6a4:	697b      	ldr	r3, [r7, #20]
 801d6a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801d6aa:	f000 809b 	beq.w	801d7e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d6ae:	4b48      	ldr	r3, [pc, #288]	; (801d7d0 <ip4_reass+0x2b0>)
 801d6b0:	881a      	ldrh	r2, [r3, #0]
 801d6b2:	8c3b      	ldrh	r3, [r7, #32]
 801d6b4:	4413      	add	r3, r2
 801d6b6:	b29a      	uxth	r2, r3
 801d6b8:	4b45      	ldr	r3, [pc, #276]	; (801d7d0 <ip4_reass+0x2b0>)
 801d6ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d6bc:	69fb      	ldr	r3, [r7, #28]
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d00d      	beq.n	801d6de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d6c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d6c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d6c6:	4413      	add	r3, r2
 801d6c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6cc:	8a7a      	ldrh	r2, [r7, #18]
 801d6ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6d2:	7f9b      	ldrb	r3, [r3, #30]
 801d6d4:	f043 0301 	orr.w	r3, r3, #1
 801d6d8:	b2da      	uxtb	r2, r3
 801d6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d6de:	697b      	ldr	r3, [r7, #20]
 801d6e0:	2b01      	cmp	r3, #1
 801d6e2:	d171      	bne.n	801d7c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e6:	8b9b      	ldrh	r3, [r3, #28]
 801d6e8:	3314      	adds	r3, #20
 801d6ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6ee:	685b      	ldr	r3, [r3, #4]
 801d6f0:	685b      	ldr	r3, [r3, #4]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6f8:	685b      	ldr	r3, [r3, #4]
 801d6fa:	685b      	ldr	r3, [r3, #4]
 801d6fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d700:	3308      	adds	r3, #8
 801d702:	2214      	movs	r2, #20
 801d704:	4619      	mov	r1, r3
 801d706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d708:	f001 fdf1 	bl	801f2ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d70c:	8a3b      	ldrh	r3, [r7, #16]
 801d70e:	4618      	mov	r0, r3
 801d710:	f7f3 fbc0 	bl	8010e94 <lwip_htons>
 801d714:	4603      	mov	r3, r0
 801d716:	461a      	mov	r2, r3
 801d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d71a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d71e:	2200      	movs	r2, #0
 801d720:	719a      	strb	r2, [r3, #6]
 801d722:	2200      	movs	r2, #0
 801d724:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d728:	2200      	movs	r2, #0
 801d72a:	729a      	strb	r2, [r3, #10]
 801d72c:	2200      	movs	r2, #0
 801d72e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d732:	685b      	ldr	r3, [r3, #4]
 801d734:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d736:	e00d      	b.n	801d754 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d73a:	685b      	ldr	r3, [r3, #4]
 801d73c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d73e:	2114      	movs	r1, #20
 801d740:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d742:	f7f4 ff57 	bl	80125f4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d746:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d748:	6878      	ldr	r0, [r7, #4]
 801d74a:	f7f5 f8a7 	bl	801289c <pbuf_cat>
      r = iprh->next_pbuf;
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	681b      	ldr	r3, [r3, #0]
 801d752:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d756:	2b00      	cmp	r3, #0
 801d758:	d1ee      	bne.n	801d738 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d75a:	4b1e      	ldr	r3, [pc, #120]	; (801d7d4 <ip4_reass+0x2b4>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d760:	429a      	cmp	r2, r3
 801d762:	d102      	bne.n	801d76a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d764:	2300      	movs	r3, #0
 801d766:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d768:	e010      	b.n	801d78c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d76a:	4b1a      	ldr	r3, [pc, #104]	; (801d7d4 <ip4_reass+0x2b4>)
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d770:	e007      	b.n	801d782 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d778:	429a      	cmp	r2, r3
 801d77a:	d006      	beq.n	801d78a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d784:	2b00      	cmp	r3, #0
 801d786:	d1f4      	bne.n	801d772 <ip4_reass+0x252>
 801d788:	e000      	b.n	801d78c <ip4_reass+0x26c>
          break;
 801d78a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d78c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d78e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d790:	f7ff fd2e 	bl	801d1f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d794:	6878      	ldr	r0, [r7, #4]
 801d796:	f7f5 f841 	bl	801281c <pbuf_clen>
 801d79a:	4603      	mov	r3, r0
 801d79c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d79e:	4b0c      	ldr	r3, [pc, #48]	; (801d7d0 <ip4_reass+0x2b0>)
 801d7a0:	881b      	ldrh	r3, [r3, #0]
 801d7a2:	8c3a      	ldrh	r2, [r7, #32]
 801d7a4:	429a      	cmp	r2, r3
 801d7a6:	d906      	bls.n	801d7b6 <ip4_reass+0x296>
 801d7a8:	4b0b      	ldr	r3, [pc, #44]	; (801d7d8 <ip4_reass+0x2b8>)
 801d7aa:	f240 229b 	movw	r2, #667	; 0x29b
 801d7ae:	490b      	ldr	r1, [pc, #44]	; (801d7dc <ip4_reass+0x2bc>)
 801d7b0:	480b      	ldr	r0, [pc, #44]	; (801d7e0 <ip4_reass+0x2c0>)
 801d7b2:	f001 fb37 	bl	801ee24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d7b6:	4b06      	ldr	r3, [pc, #24]	; (801d7d0 <ip4_reass+0x2b0>)
 801d7b8:	881a      	ldrh	r2, [r3, #0]
 801d7ba:	8c3b      	ldrh	r3, [r7, #32]
 801d7bc:	1ad3      	subs	r3, r2, r3
 801d7be:	b29a      	uxth	r2, r3
 801d7c0:	4b03      	ldr	r3, [pc, #12]	; (801d7d0 <ip4_reass+0x2b0>)
 801d7c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	e038      	b.n	801d83a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	e036      	b.n	801d83a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d7cc:	bf00      	nop
 801d7ce:	e00a      	b.n	801d7e6 <ip4_reass+0x2c6>
 801d7d0:	2000ca24 	.word	0x2000ca24
 801d7d4:	2000ca20 	.word	0x2000ca20
 801d7d8:	08024294 	.word	0x08024294
 801d7dc:	08024404 	.word	0x08024404
 801d7e0:	080242dc 	.word	0x080242dc
    goto nullreturn_ipr;
 801d7e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d106      	bne.n	801d7fa <ip4_reass+0x2da>
 801d7ec:	4b15      	ldr	r3, [pc, #84]	; (801d844 <ip4_reass+0x324>)
 801d7ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d7f2:	4915      	ldr	r1, [pc, #84]	; (801d848 <ip4_reass+0x328>)
 801d7f4:	4815      	ldr	r0, [pc, #84]	; (801d84c <ip4_reass+0x32c>)
 801d7f6:	f001 fb15 	bl	801ee24 <iprintf>
  if (ipr->p == NULL) {
 801d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7fc:	685b      	ldr	r3, [r3, #4]
 801d7fe:	2b00      	cmp	r3, #0
 801d800:	d116      	bne.n	801d830 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d802:	4b13      	ldr	r3, [pc, #76]	; (801d850 <ip4_reass+0x330>)
 801d804:	681b      	ldr	r3, [r3, #0]
 801d806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d808:	429a      	cmp	r2, r3
 801d80a:	d006      	beq.n	801d81a <ip4_reass+0x2fa>
 801d80c:	4b0d      	ldr	r3, [pc, #52]	; (801d844 <ip4_reass+0x324>)
 801d80e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d812:	4910      	ldr	r1, [pc, #64]	; (801d854 <ip4_reass+0x334>)
 801d814:	480d      	ldr	r0, [pc, #52]	; (801d84c <ip4_reass+0x32c>)
 801d816:	f001 fb05 	bl	801ee24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d81a:	2100      	movs	r1, #0
 801d81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d81e:	f7ff fce7 	bl	801d1f0 <ip_reass_dequeue_datagram>
 801d822:	e006      	b.n	801d832 <ip4_reass+0x312>
    goto nullreturn;
 801d824:	bf00      	nop
 801d826:	e004      	b.n	801d832 <ip4_reass+0x312>
    goto nullreturn;
 801d828:	bf00      	nop
 801d82a:	e002      	b.n	801d832 <ip4_reass+0x312>
      goto nullreturn;
 801d82c:	bf00      	nop
 801d82e:	e000      	b.n	801d832 <ip4_reass+0x312>
  }

nullreturn:
 801d830:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7f4 ff64 	bl	8012700 <pbuf_free>
  return NULL;
 801d838:	2300      	movs	r3, #0
}
 801d83a:	4618      	mov	r0, r3
 801d83c:	3738      	adds	r7, #56	; 0x38
 801d83e:	46bd      	mov	sp, r7
 801d840:	bd80      	pop	{r7, pc}
 801d842:	bf00      	nop
 801d844:	08024294 	.word	0x08024294
 801d848:	08024420 	.word	0x08024420
 801d84c:	080242dc 	.word	0x080242dc
 801d850:	2000ca20 	.word	0x2000ca20
 801d854:	0802442c 	.word	0x0802442c

0801d858 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d858:	b580      	push	{r7, lr}
 801d85a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d85c:	2005      	movs	r0, #5
 801d85e:	f7f3 fff1 	bl	8011844 <memp_malloc>
 801d862:	4603      	mov	r3, r0
}
 801d864:	4618      	mov	r0, r3
 801d866:	bd80      	pop	{r7, pc}

0801d868 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b082      	sub	sp, #8
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d870:	687b      	ldr	r3, [r7, #4]
 801d872:	2b00      	cmp	r3, #0
 801d874:	d106      	bne.n	801d884 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d876:	4b07      	ldr	r3, [pc, #28]	; (801d894 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d878:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d87c:	4906      	ldr	r1, [pc, #24]	; (801d898 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d87e:	4807      	ldr	r0, [pc, #28]	; (801d89c <ip_frag_free_pbuf_custom_ref+0x34>)
 801d880:	f001 fad0 	bl	801ee24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d884:	6879      	ldr	r1, [r7, #4]
 801d886:	2005      	movs	r0, #5
 801d888:	f7f4 f852 	bl	8011930 <memp_free>
}
 801d88c:	bf00      	nop
 801d88e:	3708      	adds	r7, #8
 801d890:	46bd      	mov	sp, r7
 801d892:	bd80      	pop	{r7, pc}
 801d894:	08024294 	.word	0x08024294
 801d898:	0802444c 	.word	0x0802444c
 801d89c:	080242dc 	.word	0x080242dc

0801d8a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d8a0:	b580      	push	{r7, lr}
 801d8a2:	b084      	sub	sp, #16
 801d8a4:	af00      	add	r7, sp, #0
 801d8a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d106      	bne.n	801d8c0 <ipfrag_free_pbuf_custom+0x20>
 801d8b2:	4b11      	ldr	r3, [pc, #68]	; (801d8f8 <ipfrag_free_pbuf_custom+0x58>)
 801d8b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d8b8:	4910      	ldr	r1, [pc, #64]	; (801d8fc <ipfrag_free_pbuf_custom+0x5c>)
 801d8ba:	4811      	ldr	r0, [pc, #68]	; (801d900 <ipfrag_free_pbuf_custom+0x60>)
 801d8bc:	f001 fab2 	bl	801ee24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d8c0:	68fa      	ldr	r2, [r7, #12]
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	429a      	cmp	r2, r3
 801d8c6:	d006      	beq.n	801d8d6 <ipfrag_free_pbuf_custom+0x36>
 801d8c8:	4b0b      	ldr	r3, [pc, #44]	; (801d8f8 <ipfrag_free_pbuf_custom+0x58>)
 801d8ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d8ce:	490d      	ldr	r1, [pc, #52]	; (801d904 <ipfrag_free_pbuf_custom+0x64>)
 801d8d0:	480b      	ldr	r0, [pc, #44]	; (801d900 <ipfrag_free_pbuf_custom+0x60>)
 801d8d2:	f001 faa7 	bl	801ee24 <iprintf>
  if (pcr->original != NULL) {
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	695b      	ldr	r3, [r3, #20]
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	d004      	beq.n	801d8e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	695b      	ldr	r3, [r3, #20]
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	f7f4 ff0c 	bl	8012700 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d8e8:	68f8      	ldr	r0, [r7, #12]
 801d8ea:	f7ff ffbd 	bl	801d868 <ip_frag_free_pbuf_custom_ref>
}
 801d8ee:	bf00      	nop
 801d8f0:	3710      	adds	r7, #16
 801d8f2:	46bd      	mov	sp, r7
 801d8f4:	bd80      	pop	{r7, pc}
 801d8f6:	bf00      	nop
 801d8f8:	08024294 	.word	0x08024294
 801d8fc:	08024458 	.word	0x08024458
 801d900:	080242dc 	.word	0x080242dc
 801d904:	08024464 	.word	0x08024464

0801d908 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d908:	b580      	push	{r7, lr}
 801d90a:	b094      	sub	sp, #80	; 0x50
 801d90c:	af02      	add	r7, sp, #8
 801d90e:	60f8      	str	r0, [r7, #12]
 801d910:	60b9      	str	r1, [r7, #8]
 801d912:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d914:	2300      	movs	r3, #0
 801d916:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d91a:	68bb      	ldr	r3, [r7, #8]
 801d91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d91e:	3b14      	subs	r3, #20
 801d920:	2b00      	cmp	r3, #0
 801d922:	da00      	bge.n	801d926 <ip4_frag+0x1e>
 801d924:	3307      	adds	r3, #7
 801d926:	10db      	asrs	r3, r3, #3
 801d928:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d92a:	2314      	movs	r3, #20
 801d92c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	685b      	ldr	r3, [r3, #4]
 801d932:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d936:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d93a:	781b      	ldrb	r3, [r3, #0]
 801d93c:	f003 030f 	and.w	r3, r3, #15
 801d940:	b2db      	uxtb	r3, r3
 801d942:	009b      	lsls	r3, r3, #2
 801d944:	b2db      	uxtb	r3, r3
 801d946:	2b14      	cmp	r3, #20
 801d948:	d002      	beq.n	801d950 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d94a:	f06f 0305 	mvn.w	r3, #5
 801d94e:	e110      	b.n	801db72 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	895b      	ldrh	r3, [r3, #10]
 801d954:	2b13      	cmp	r3, #19
 801d956:	d809      	bhi.n	801d96c <ip4_frag+0x64>
 801d958:	4b88      	ldr	r3, [pc, #544]	; (801db7c <ip4_frag+0x274>)
 801d95a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d95e:	4988      	ldr	r1, [pc, #544]	; (801db80 <ip4_frag+0x278>)
 801d960:	4888      	ldr	r0, [pc, #544]	; (801db84 <ip4_frag+0x27c>)
 801d962:	f001 fa5f 	bl	801ee24 <iprintf>
 801d966:	f06f 0305 	mvn.w	r3, #5
 801d96a:	e102      	b.n	801db72 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d96e:	88db      	ldrh	r3, [r3, #6]
 801d970:	b29b      	uxth	r3, r3
 801d972:	4618      	mov	r0, r3
 801d974:	f7f3 fa8e 	bl	8010e94 <lwip_htons>
 801d978:	4603      	mov	r3, r0
 801d97a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d97c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d97e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d986:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d98c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	891b      	ldrh	r3, [r3, #8]
 801d992:	3b14      	subs	r3, #20
 801d994:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d998:	e0e1      	b.n	801db5e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d99a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d99c:	00db      	lsls	r3, r3, #3
 801d99e:	b29b      	uxth	r3, r3
 801d9a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9a4:	4293      	cmp	r3, r2
 801d9a6:	bf28      	it	cs
 801d9a8:	4613      	movcs	r3, r2
 801d9aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d9ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d9b0:	2114      	movs	r1, #20
 801d9b2:	200e      	movs	r0, #14
 801d9b4:	f7f4 fbc0 	bl	8012138 <pbuf_alloc>
 801d9b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	f000 80d5 	beq.w	801db6c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9c4:	895b      	ldrh	r3, [r3, #10]
 801d9c6:	2b13      	cmp	r3, #19
 801d9c8:	d806      	bhi.n	801d9d8 <ip4_frag+0xd0>
 801d9ca:	4b6c      	ldr	r3, [pc, #432]	; (801db7c <ip4_frag+0x274>)
 801d9cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d9d0:	496d      	ldr	r1, [pc, #436]	; (801db88 <ip4_frag+0x280>)
 801d9d2:	486c      	ldr	r0, [pc, #432]	; (801db84 <ip4_frag+0x27c>)
 801d9d4:	f001 fa26 	bl	801ee24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9da:	685b      	ldr	r3, [r3, #4]
 801d9dc:	2214      	movs	r2, #20
 801d9de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f001 fc84 	bl	801f2ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9e8:	685b      	ldr	r3, [r3, #4]
 801d9ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d9ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d9ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d9f2:	e064      	b.n	801dabe <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	895a      	ldrh	r2, [r3, #10]
 801d9f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9fa:	1ad3      	subs	r3, r2, r3
 801d9fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	895b      	ldrh	r3, [r3, #10]
 801da02:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801da04:	429a      	cmp	r2, r3
 801da06:	d906      	bls.n	801da16 <ip4_frag+0x10e>
 801da08:	4b5c      	ldr	r3, [pc, #368]	; (801db7c <ip4_frag+0x274>)
 801da0a:	f240 322d 	movw	r2, #813	; 0x32d
 801da0e:	495f      	ldr	r1, [pc, #380]	; (801db8c <ip4_frag+0x284>)
 801da10:	485c      	ldr	r0, [pc, #368]	; (801db84 <ip4_frag+0x27c>)
 801da12:	f001 fa07 	bl	801ee24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801da16:	8bfa      	ldrh	r2, [r7, #30]
 801da18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801da1c:	4293      	cmp	r3, r2
 801da1e:	bf28      	it	cs
 801da20:	4613      	movcs	r3, r2
 801da22:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801da26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d105      	bne.n	801da3a <ip4_frag+0x132>
        poff = 0;
 801da2e:	2300      	movs	r3, #0
 801da30:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801da32:	68fb      	ldr	r3, [r7, #12]
 801da34:	681b      	ldr	r3, [r3, #0]
 801da36:	60fb      	str	r3, [r7, #12]
        continue;
 801da38:	e041      	b.n	801dabe <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801da3a:	f7ff ff0d 	bl	801d858 <ip_frag_alloc_pbuf_custom_ref>
 801da3e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801da40:	69bb      	ldr	r3, [r7, #24]
 801da42:	2b00      	cmp	r3, #0
 801da44:	d103      	bne.n	801da4e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801da46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da48:	f7f4 fe5a 	bl	8012700 <pbuf_free>
        goto memerr;
 801da4c:	e08f      	b.n	801db6e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801da4e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801da54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da56:	4413      	add	r3, r2
 801da58:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801da5c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801da60:	9201      	str	r2, [sp, #4]
 801da62:	9300      	str	r3, [sp, #0]
 801da64:	4603      	mov	r3, r0
 801da66:	2241      	movs	r2, #65	; 0x41
 801da68:	2000      	movs	r0, #0
 801da6a:	f7f4 fc8f 	bl	801238c <pbuf_alloced_custom>
 801da6e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801da70:	697b      	ldr	r3, [r7, #20]
 801da72:	2b00      	cmp	r3, #0
 801da74:	d106      	bne.n	801da84 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801da76:	69b8      	ldr	r0, [r7, #24]
 801da78:	f7ff fef6 	bl	801d868 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801da7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da7e:	f7f4 fe3f 	bl	8012700 <pbuf_free>
        goto memerr;
 801da82:	e074      	b.n	801db6e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801da84:	68f8      	ldr	r0, [r7, #12]
 801da86:	f7f4 fee1 	bl	801284c <pbuf_ref>
      pcr->original = p;
 801da8a:	69bb      	ldr	r3, [r7, #24]
 801da8c:	68fa      	ldr	r2, [r7, #12]
 801da8e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801da90:	69bb      	ldr	r3, [r7, #24]
 801da92:	4a3f      	ldr	r2, [pc, #252]	; (801db90 <ip4_frag+0x288>)
 801da94:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801da96:	6979      	ldr	r1, [r7, #20]
 801da98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da9a:	f7f4 feff 	bl	801289c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801da9e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801daa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801daa6:	1ad3      	subs	r3, r2, r3
 801daa8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801daac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d004      	beq.n	801dabe <ip4_frag+0x1b6>
        poff = 0;
 801dab4:	2300      	movs	r3, #0
 801dab6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801dabe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d196      	bne.n	801d9f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801dac6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dac8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801dacc:	4413      	add	r3, r2
 801dace:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801dad0:	68bb      	ldr	r3, [r7, #8]
 801dad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801dad4:	f1a3 0213 	sub.w	r2, r3, #19
 801dad8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dadc:	429a      	cmp	r2, r3
 801dade:	bfcc      	ite	gt
 801dae0:	2301      	movgt	r3, #1
 801dae2:	2300      	movle	r3, #0
 801dae4:	b2db      	uxtb	r3, r3
 801dae6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801dae8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801daec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801daf0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801daf2:	6a3b      	ldr	r3, [r7, #32]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d002      	beq.n	801dafe <ip4_frag+0x1f6>
 801daf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d003      	beq.n	801db06 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801dafe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801db04:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801db06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f3 f9c3 	bl	8010e94 <lwip_htons>
 801db0e:	4603      	mov	r3, r0
 801db10:	461a      	mov	r2, r3
 801db12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db14:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801db16:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801db18:	3314      	adds	r3, #20
 801db1a:	b29b      	uxth	r3, r3
 801db1c:	4618      	mov	r0, r3
 801db1e:	f7f3 f9b9 	bl	8010e94 <lwip_htons>
 801db22:	4603      	mov	r3, r0
 801db24:	461a      	mov	r2, r3
 801db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db28:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801db2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db2c:	2200      	movs	r2, #0
 801db2e:	729a      	strb	r2, [r3, #10]
 801db30:	2200      	movs	r2, #0
 801db32:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801db34:	68bb      	ldr	r3, [r7, #8]
 801db36:	695b      	ldr	r3, [r3, #20]
 801db38:	687a      	ldr	r2, [r7, #4]
 801db3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801db3c:	68b8      	ldr	r0, [r7, #8]
 801db3e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801db40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db42:	f7f4 fddd 	bl	8012700 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801db46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801db4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801db4c:	1ad3      	subs	r3, r2, r3
 801db4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801db52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801db56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801db58:	4413      	add	r3, r2
 801db5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801db5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db62:	2b00      	cmp	r3, #0
 801db64:	f47f af19 	bne.w	801d99a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801db68:	2300      	movs	r3, #0
 801db6a:	e002      	b.n	801db72 <ip4_frag+0x26a>
      goto memerr;
 801db6c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801db6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801db72:	4618      	mov	r0, r3
 801db74:	3748      	adds	r7, #72	; 0x48
 801db76:	46bd      	mov	sp, r7
 801db78:	bd80      	pop	{r7, pc}
 801db7a:	bf00      	nop
 801db7c:	08024294 	.word	0x08024294
 801db80:	08024470 	.word	0x08024470
 801db84:	080242dc 	.word	0x080242dc
 801db88:	0802448c 	.word	0x0802448c
 801db8c:	080244ac 	.word	0x080244ac
 801db90:	0801d8a1 	.word	0x0801d8a1

0801db94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b086      	sub	sp, #24
 801db98:	af00      	add	r7, sp, #0
 801db9a:	6078      	str	r0, [r7, #4]
 801db9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801db9e:	230e      	movs	r3, #14
 801dba0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	895b      	ldrh	r3, [r3, #10]
 801dba6:	2b0e      	cmp	r3, #14
 801dba8:	d96e      	bls.n	801dc88 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	7bdb      	ldrb	r3, [r3, #15]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d106      	bne.n	801dbc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbb8:	3301      	adds	r3, #1
 801dbba:	b2da      	uxtb	r2, r3
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801dbc0:	687b      	ldr	r3, [r7, #4]
 801dbc2:	685b      	ldr	r3, [r3, #4]
 801dbc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801dbc6:	693b      	ldr	r3, [r7, #16]
 801dbc8:	7b1a      	ldrb	r2, [r3, #12]
 801dbca:	7b5b      	ldrb	r3, [r3, #13]
 801dbcc:	021b      	lsls	r3, r3, #8
 801dbce:	4313      	orrs	r3, r2
 801dbd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801dbd2:	693b      	ldr	r3, [r7, #16]
 801dbd4:	781b      	ldrb	r3, [r3, #0]
 801dbd6:	f003 0301 	and.w	r3, r3, #1
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d023      	beq.n	801dc26 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801dbde:	693b      	ldr	r3, [r7, #16]
 801dbe0:	781b      	ldrb	r3, [r3, #0]
 801dbe2:	2b01      	cmp	r3, #1
 801dbe4:	d10f      	bne.n	801dc06 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dbe6:	693b      	ldr	r3, [r7, #16]
 801dbe8:	785b      	ldrb	r3, [r3, #1]
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d11b      	bne.n	801dc26 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801dbee:	693b      	ldr	r3, [r7, #16]
 801dbf0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801dbf2:	2b5e      	cmp	r3, #94	; 0x5e
 801dbf4:	d117      	bne.n	801dc26 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	7b5b      	ldrb	r3, [r3, #13]
 801dbfa:	f043 0310 	orr.w	r3, r3, #16
 801dbfe:	b2da      	uxtb	r2, r3
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	735a      	strb	r2, [r3, #13]
 801dc04:	e00f      	b.n	801dc26 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dc06:	693b      	ldr	r3, [r7, #16]
 801dc08:	2206      	movs	r2, #6
 801dc0a:	4928      	ldr	r1, [pc, #160]	; (801dcac <ethernet_input+0x118>)
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	f001 fa4f 	bl	801f0b0 <memcmp>
 801dc12:	4603      	mov	r3, r0
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d106      	bne.n	801dc26 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	7b5b      	ldrb	r3, [r3, #13]
 801dc1c:	f043 0308 	orr.w	r3, r3, #8
 801dc20:	b2da      	uxtb	r2, r3
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dc26:	89fb      	ldrh	r3, [r7, #14]
 801dc28:	2b08      	cmp	r3, #8
 801dc2a:	d003      	beq.n	801dc34 <ethernet_input+0xa0>
 801dc2c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801dc30:	d014      	beq.n	801dc5c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dc32:	e032      	b.n	801dc9a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc34:	683b      	ldr	r3, [r7, #0]
 801dc36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dc3a:	f003 0308 	and.w	r3, r3, #8
 801dc3e:	2b00      	cmp	r3, #0
 801dc40:	d024      	beq.n	801dc8c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc42:	8afb      	ldrh	r3, [r7, #22]
 801dc44:	4619      	mov	r1, r3
 801dc46:	6878      	ldr	r0, [r7, #4]
 801dc48:	f7f4 fcd4 	bl	80125f4 <pbuf_remove_header>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d11e      	bne.n	801dc90 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dc52:	6839      	ldr	r1, [r7, #0]
 801dc54:	6878      	ldr	r0, [r7, #4]
 801dc56:	f7fe ff03 	bl	801ca60 <ip4_input>
      break;
 801dc5a:	e013      	b.n	801dc84 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dc5c:	683b      	ldr	r3, [r7, #0]
 801dc5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dc62:	f003 0308 	and.w	r3, r3, #8
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d014      	beq.n	801dc94 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc6a:	8afb      	ldrh	r3, [r7, #22]
 801dc6c:	4619      	mov	r1, r3
 801dc6e:	6878      	ldr	r0, [r7, #4]
 801dc70:	f7f4 fcc0 	bl	80125f4 <pbuf_remove_header>
 801dc74:	4603      	mov	r3, r0
 801dc76:	2b00      	cmp	r3, #0
 801dc78:	d10e      	bne.n	801dc98 <ethernet_input+0x104>
        etharp_input(p, netif);
 801dc7a:	6839      	ldr	r1, [r7, #0]
 801dc7c:	6878      	ldr	r0, [r7, #4]
 801dc7e:	f7fe f89f 	bl	801bdc0 <etharp_input>
      break;
 801dc82:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dc84:	2300      	movs	r3, #0
 801dc86:	e00c      	b.n	801dca2 <ethernet_input+0x10e>
    goto free_and_return;
 801dc88:	bf00      	nop
 801dc8a:	e006      	b.n	801dc9a <ethernet_input+0x106>
        goto free_and_return;
 801dc8c:	bf00      	nop
 801dc8e:	e004      	b.n	801dc9a <ethernet_input+0x106>
        goto free_and_return;
 801dc90:	bf00      	nop
 801dc92:	e002      	b.n	801dc9a <ethernet_input+0x106>
        goto free_and_return;
 801dc94:	bf00      	nop
 801dc96:	e000      	b.n	801dc9a <ethernet_input+0x106>
        goto free_and_return;
 801dc98:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dc9a:	6878      	ldr	r0, [r7, #4]
 801dc9c:	f7f4 fd30 	bl	8012700 <pbuf_free>
  return ERR_OK;
 801dca0:	2300      	movs	r3, #0
}
 801dca2:	4618      	mov	r0, r3
 801dca4:	3718      	adds	r7, #24
 801dca6:	46bd      	mov	sp, r7
 801dca8:	bd80      	pop	{r7, pc}
 801dcaa:	bf00      	nop
 801dcac:	0802478c 	.word	0x0802478c

0801dcb0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dcb0:	b580      	push	{r7, lr}
 801dcb2:	b086      	sub	sp, #24
 801dcb4:	af00      	add	r7, sp, #0
 801dcb6:	60f8      	str	r0, [r7, #12]
 801dcb8:	60b9      	str	r1, [r7, #8]
 801dcba:	607a      	str	r2, [r7, #4]
 801dcbc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dcbe:	8c3b      	ldrh	r3, [r7, #32]
 801dcc0:	4618      	mov	r0, r3
 801dcc2:	f7f3 f8e7 	bl	8010e94 <lwip_htons>
 801dcc6:	4603      	mov	r3, r0
 801dcc8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dcca:	210e      	movs	r1, #14
 801dccc:	68b8      	ldr	r0, [r7, #8]
 801dcce:	f7f4 fc81 	bl	80125d4 <pbuf_add_header>
 801dcd2:	4603      	mov	r3, r0
 801dcd4:	2b00      	cmp	r3, #0
 801dcd6:	d125      	bne.n	801dd24 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dcd8:	68bb      	ldr	r3, [r7, #8]
 801dcda:	685b      	ldr	r3, [r3, #4]
 801dcdc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dcde:	693b      	ldr	r3, [r7, #16]
 801dce0:	8afa      	ldrh	r2, [r7, #22]
 801dce2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dce4:	693b      	ldr	r3, [r7, #16]
 801dce6:	2206      	movs	r2, #6
 801dce8:	6839      	ldr	r1, [r7, #0]
 801dcea:	4618      	mov	r0, r3
 801dcec:	f001 faff 	bl	801f2ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dcf0:	693b      	ldr	r3, [r7, #16]
 801dcf2:	3306      	adds	r3, #6
 801dcf4:	2206      	movs	r2, #6
 801dcf6:	6879      	ldr	r1, [r7, #4]
 801dcf8:	4618      	mov	r0, r3
 801dcfa:	f001 faf8 	bl	801f2ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dcfe:	68fb      	ldr	r3, [r7, #12]
 801dd00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801dd04:	2b06      	cmp	r3, #6
 801dd06:	d006      	beq.n	801dd16 <ethernet_output+0x66>
 801dd08:	4b0a      	ldr	r3, [pc, #40]	; (801dd34 <ethernet_output+0x84>)
 801dd0a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dd0e:	490a      	ldr	r1, [pc, #40]	; (801dd38 <ethernet_output+0x88>)
 801dd10:	480a      	ldr	r0, [pc, #40]	; (801dd3c <ethernet_output+0x8c>)
 801dd12:	f001 f887 	bl	801ee24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	699b      	ldr	r3, [r3, #24]
 801dd1a:	68b9      	ldr	r1, [r7, #8]
 801dd1c:	68f8      	ldr	r0, [r7, #12]
 801dd1e:	4798      	blx	r3
 801dd20:	4603      	mov	r3, r0
 801dd22:	e002      	b.n	801dd2a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dd24:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dd26:	f06f 0301 	mvn.w	r3, #1
}
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	3718      	adds	r7, #24
 801dd2e:	46bd      	mov	sp, r7
 801dd30:	bd80      	pop	{r7, pc}
 801dd32:	bf00      	nop
 801dd34:	080244bc 	.word	0x080244bc
 801dd38:	080244f4 	.word	0x080244f4
 801dd3c:	08024528 	.word	0x08024528

0801dd40 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801dd40:	b580      	push	{r7, lr}
 801dd42:	b086      	sub	sp, #24
 801dd44:	af00      	add	r7, sp, #0
 801dd46:	6078      	str	r0, [r7, #4]
 801dd48:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801dd4a:	683b      	ldr	r3, [r7, #0]
 801dd4c:	60bb      	str	r3, [r7, #8]
 801dd4e:	2304      	movs	r3, #4
 801dd50:	60fb      	str	r3, [r7, #12]
 801dd52:	2300      	movs	r3, #0
 801dd54:	613b      	str	r3, [r7, #16]
 801dd56:	2300      	movs	r3, #0
 801dd58:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801dd5a:	f107 0308 	add.w	r3, r7, #8
 801dd5e:	2100      	movs	r1, #0
 801dd60:	4618      	mov	r0, r3
 801dd62:	f7e8 fac6 	bl	80062f2 <osMessageCreate>
 801dd66:	4602      	mov	r2, r0
 801dd68:	687b      	ldr	r3, [r7, #4]
 801dd6a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	681b      	ldr	r3, [r3, #0]
 801dd70:	2b00      	cmp	r3, #0
 801dd72:	d102      	bne.n	801dd7a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801dd74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dd78:	e000      	b.n	801dd7c <sys_mbox_new+0x3c>

  return ERR_OK;
 801dd7a:	2300      	movs	r3, #0
}
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	3718      	adds	r7, #24
 801dd80:	46bd      	mov	sp, r7
 801dd82:	bd80      	pop	{r7, pc}

0801dd84 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dd84:	b580      	push	{r7, lr}
 801dd86:	b082      	sub	sp, #8
 801dd88:	af00      	add	r7, sp, #0
 801dd8a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	4618      	mov	r0, r3
 801dd92:	f7e8 fb8b 	bl	80064ac <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801dd96:	687b      	ldr	r3, [r7, #4]
 801dd98:	681b      	ldr	r3, [r3, #0]
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f7e8 fb9c 	bl	80064d8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801dda0:	bf00      	nop
 801dda2:	3708      	adds	r7, #8
 801dda4:	46bd      	mov	sp, r7
 801dda6:	bd80      	pop	{r7, pc}

0801dda8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b084      	sub	sp, #16
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	6078      	str	r0, [r7, #4]
 801ddb0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	681b      	ldr	r3, [r3, #0]
 801ddb6:	6839      	ldr	r1, [r7, #0]
 801ddb8:	2200      	movs	r2, #0
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7e8 fac2 	bl	8006344 <osMessagePut>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d102      	bne.n	801ddcc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801ddc6:	2300      	movs	r3, #0
 801ddc8:	73fb      	strb	r3, [r7, #15]
 801ddca:	e001      	b.n	801ddd0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ddcc:	23ff      	movs	r3, #255	; 0xff
 801ddce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ddd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ddd4:	4618      	mov	r0, r3
 801ddd6:	3710      	adds	r7, #16
 801ddd8:	46bd      	mov	sp, r7
 801ddda:	bd80      	pop	{r7, pc}

0801dddc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b08c      	sub	sp, #48	; 0x30
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	61f8      	str	r0, [r7, #28]
 801dde4:	61b9      	str	r1, [r7, #24]
 801dde6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801dde8:	f7e8 f8ae 	bl	8005f48 <osKernelSysTick>
 801ddec:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ddee:	697b      	ldr	r3, [r7, #20]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d017      	beq.n	801de24 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801ddf4:	69fb      	ldr	r3, [r7, #28]
 801ddf6:	6819      	ldr	r1, [r3, #0]
 801ddf8:	f107 0320 	add.w	r3, r7, #32
 801ddfc:	697a      	ldr	r2, [r7, #20]
 801ddfe:	4618      	mov	r0, r3
 801de00:	f7e8 fae0 	bl	80063c4 <osMessageGet>

    if(event.status == osEventMessage)
 801de04:	6a3b      	ldr	r3, [r7, #32]
 801de06:	2b10      	cmp	r3, #16
 801de08:	d109      	bne.n	801de1e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801de0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de0c:	461a      	mov	r2, r3
 801de0e:	69bb      	ldr	r3, [r7, #24]
 801de10:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801de12:	f7e8 f899 	bl	8005f48 <osKernelSysTick>
 801de16:	4602      	mov	r2, r0
 801de18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de1a:	1ad3      	subs	r3, r2, r3
 801de1c:	e019      	b.n	801de52 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801de1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de22:	e016      	b.n	801de52 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801de24:	69fb      	ldr	r3, [r7, #28]
 801de26:	6819      	ldr	r1, [r3, #0]
 801de28:	463b      	mov	r3, r7
 801de2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801de2e:	4618      	mov	r0, r3
 801de30:	f7e8 fac8 	bl	80063c4 <osMessageGet>
 801de34:	f107 0320 	add.w	r3, r7, #32
 801de38:	463a      	mov	r2, r7
 801de3a:	ca07      	ldmia	r2, {r0, r1, r2}
 801de3c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de42:	461a      	mov	r2, r3
 801de44:	69bb      	ldr	r3, [r7, #24]
 801de46:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801de48:	f7e8 f87e 	bl	8005f48 <osKernelSysTick>
 801de4c:	4602      	mov	r2, r0
 801de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de50:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801de52:	4618      	mov	r0, r3
 801de54:	3730      	adds	r7, #48	; 0x30
 801de56:	46bd      	mov	sp, r7
 801de58:	bd80      	pop	{r7, pc}

0801de5a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801de5a:	b580      	push	{r7, lr}
 801de5c:	b086      	sub	sp, #24
 801de5e:	af00      	add	r7, sp, #0
 801de60:	6078      	str	r0, [r7, #4]
 801de62:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	6819      	ldr	r1, [r3, #0]
 801de68:	f107 030c 	add.w	r3, r7, #12
 801de6c:	2200      	movs	r2, #0
 801de6e:	4618      	mov	r0, r3
 801de70:	f7e8 faa8 	bl	80063c4 <osMessageGet>

  if(event.status == osEventMessage)
 801de74:	68fb      	ldr	r3, [r7, #12]
 801de76:	2b10      	cmp	r3, #16
 801de78:	d105      	bne.n	801de86 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801de7a:	693b      	ldr	r3, [r7, #16]
 801de7c:	461a      	mov	r2, r3
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801de82:	2300      	movs	r3, #0
 801de84:	e001      	b.n	801de8a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801de86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801de8a:	4618      	mov	r0, r3
 801de8c:	3718      	adds	r7, #24
 801de8e:	46bd      	mov	sp, r7
 801de90:	bd80      	pop	{r7, pc}

0801de92 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801de92:	b480      	push	{r7}
 801de94:	b083      	sub	sp, #12
 801de96:	af00      	add	r7, sp, #0
 801de98:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	681b      	ldr	r3, [r3, #0]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d101      	bne.n	801dea6 <sys_mbox_valid+0x14>
    return 0;
 801dea2:	2300      	movs	r3, #0
 801dea4:	e000      	b.n	801dea8 <sys_mbox_valid+0x16>
  else
    return 1;
 801dea6:	2301      	movs	r3, #1
}
 801dea8:	4618      	mov	r0, r3
 801deaa:	370c      	adds	r7, #12
 801deac:	46bd      	mov	sp, r7
 801deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deb2:	4770      	bx	lr

0801deb4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801deb4:	b480      	push	{r7}
 801deb6:	b083      	sub	sp, #12
 801deb8:	af00      	add	r7, sp, #0
 801deba:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	2200      	movs	r2, #0
 801dec0:	601a      	str	r2, [r3, #0]
}
 801dec2:	bf00      	nop
 801dec4:	370c      	adds	r7, #12
 801dec6:	46bd      	mov	sp, r7
 801dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801decc:	4770      	bx	lr

0801dece <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801dece:	b580      	push	{r7, lr}
 801ded0:	b084      	sub	sp, #16
 801ded2:	af00      	add	r7, sp, #0
 801ded4:	6078      	str	r0, [r7, #4]
 801ded6:	460b      	mov	r3, r1
 801ded8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801deda:	2300      	movs	r3, #0
 801dedc:	60bb      	str	r3, [r7, #8]
 801dede:	2300      	movs	r3, #0
 801dee0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801dee2:	f107 0308 	add.w	r3, r7, #8
 801dee6:	2101      	movs	r1, #1
 801dee8:	4618      	mov	r0, r3
 801deea:	f7e8 f939 	bl	8006160 <osSemaphoreCreate>
 801deee:	4602      	mov	r2, r0
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d102      	bne.n	801df02 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801defc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df00:	e009      	b.n	801df16 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801df02:	78fb      	ldrb	r3, [r7, #3]
 801df04:	2b00      	cmp	r3, #0
 801df06:	d105      	bne.n	801df14 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	2100      	movs	r1, #0
 801df0e:	4618      	mov	r0, r3
 801df10:	f7e8 f958 	bl	80061c4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801df14:	2300      	movs	r3, #0
}
 801df16:	4618      	mov	r0, r3
 801df18:	3710      	adds	r7, #16
 801df1a:	46bd      	mov	sp, r7
 801df1c:	bd80      	pop	{r7, pc}

0801df1e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801df1e:	b580      	push	{r7, lr}
 801df20:	b084      	sub	sp, #16
 801df22:	af00      	add	r7, sp, #0
 801df24:	6078      	str	r0, [r7, #4]
 801df26:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801df28:	f7e8 f80e 	bl	8005f48 <osKernelSysTick>
 801df2c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801df2e:	683b      	ldr	r3, [r7, #0]
 801df30:	2b00      	cmp	r3, #0
 801df32:	d011      	beq.n	801df58 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801df34:	687b      	ldr	r3, [r7, #4]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	6839      	ldr	r1, [r7, #0]
 801df3a:	4618      	mov	r0, r3
 801df3c:	f7e8 f942 	bl	80061c4 <osSemaphoreWait>
 801df40:	4603      	mov	r3, r0
 801df42:	2b00      	cmp	r3, #0
 801df44:	d105      	bne.n	801df52 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801df46:	f7e7 ffff 	bl	8005f48 <osKernelSysTick>
 801df4a:	4602      	mov	r2, r0
 801df4c:	68fb      	ldr	r3, [r7, #12]
 801df4e:	1ad3      	subs	r3, r2, r3
 801df50:	e012      	b.n	801df78 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801df52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df56:	e00f      	b.n	801df78 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801df58:	bf00      	nop
 801df5a:	687b      	ldr	r3, [r7, #4]
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801df62:	4618      	mov	r0, r3
 801df64:	f7e8 f92e 	bl	80061c4 <osSemaphoreWait>
 801df68:	4603      	mov	r3, r0
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d1f5      	bne.n	801df5a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801df6e:	f7e7 ffeb 	bl	8005f48 <osKernelSysTick>
 801df72:	4602      	mov	r2, r0
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801df78:	4618      	mov	r0, r3
 801df7a:	3710      	adds	r7, #16
 801df7c:	46bd      	mov	sp, r7
 801df7e:	bd80      	pop	{r7, pc}

0801df80 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801df80:	b580      	push	{r7, lr}
 801df82:	b082      	sub	sp, #8
 801df84:	af00      	add	r7, sp, #0
 801df86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801df88:	687b      	ldr	r3, [r7, #4]
 801df8a:	681b      	ldr	r3, [r3, #0]
 801df8c:	4618      	mov	r0, r3
 801df8e:	f7e8 f967 	bl	8006260 <osSemaphoreRelease>
}
 801df92:	bf00      	nop
 801df94:	3708      	adds	r7, #8
 801df96:	46bd      	mov	sp, r7
 801df98:	bd80      	pop	{r7, pc}

0801df9a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801df9a:	b580      	push	{r7, lr}
 801df9c:	b082      	sub	sp, #8
 801df9e:	af00      	add	r7, sp, #0
 801dfa0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	f7e8 f990 	bl	80062cc <osSemaphoreDelete>
}
 801dfac:	bf00      	nop
 801dfae:	3708      	adds	r7, #8
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	bd80      	pop	{r7, pc}

0801dfb4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801dfb4:	b480      	push	{r7}
 801dfb6:	b083      	sub	sp, #12
 801dfb8:	af00      	add	r7, sp, #0
 801dfba:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	681b      	ldr	r3, [r3, #0]
 801dfc0:	2b00      	cmp	r3, #0
 801dfc2:	d101      	bne.n	801dfc8 <sys_sem_valid+0x14>
    return 0;
 801dfc4:	2300      	movs	r3, #0
 801dfc6:	e000      	b.n	801dfca <sys_sem_valid+0x16>
  else
    return 1;
 801dfc8:	2301      	movs	r3, #1
}
 801dfca:	4618      	mov	r0, r3
 801dfcc:	370c      	adds	r7, #12
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfd4:	4770      	bx	lr

0801dfd6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801dfd6:	b480      	push	{r7}
 801dfd8:	b083      	sub	sp, #12
 801dfda:	af00      	add	r7, sp, #0
 801dfdc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801dfde:	687b      	ldr	r3, [r7, #4]
 801dfe0:	2200      	movs	r2, #0
 801dfe2:	601a      	str	r2, [r3, #0]
}
 801dfe4:	bf00      	nop
 801dfe6:	370c      	adds	r7, #12
 801dfe8:	46bd      	mov	sp, r7
 801dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfee:	4770      	bx	lr

0801dff0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801dff0:	b580      	push	{r7, lr}
 801dff2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801dff4:	4803      	ldr	r0, [pc, #12]	; (801e004 <sys_init+0x14>)
 801dff6:	f7e8 f817 	bl	8006028 <osMutexCreate>
 801dffa:	4603      	mov	r3, r0
 801dffc:	4a02      	ldr	r2, [pc, #8]	; (801e008 <sys_init+0x18>)
 801dffe:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801e000:	bf00      	nop
 801e002:	bd80      	pop	{r7, pc}
 801e004:	0802479c 	.word	0x0802479c
 801e008:	2000ca28 	.word	0x2000ca28

0801e00c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801e00c:	b580      	push	{r7, lr}
 801e00e:	b084      	sub	sp, #16
 801e010:	af00      	add	r7, sp, #0
 801e012:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801e014:	2300      	movs	r3, #0
 801e016:	60bb      	str	r3, [r7, #8]
 801e018:	2300      	movs	r3, #0
 801e01a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801e01c:	f107 0308 	add.w	r3, r7, #8
 801e020:	4618      	mov	r0, r3
 801e022:	f7e8 f801 	bl	8006028 <osMutexCreate>
 801e026:	4602      	mov	r2, r0
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	681b      	ldr	r3, [r3, #0]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d102      	bne.n	801e03a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801e034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e038:	e000      	b.n	801e03c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801e03a:	2300      	movs	r3, #0
}
 801e03c:	4618      	mov	r0, r3
 801e03e:	3710      	adds	r7, #16
 801e040:	46bd      	mov	sp, r7
 801e042:	bd80      	pop	{r7, pc}

0801e044 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801e044:	b580      	push	{r7, lr}
 801e046:	b082      	sub	sp, #8
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	681b      	ldr	r3, [r3, #0]
 801e050:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e054:	4618      	mov	r0, r3
 801e056:	f7e7 ffff 	bl	8006058 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801e05a:	bf00      	nop
 801e05c:	3708      	adds	r7, #8
 801e05e:	46bd      	mov	sp, r7
 801e060:	bd80      	pop	{r7, pc}

0801e062 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e062:	b580      	push	{r7, lr}
 801e064:	b082      	sub	sp, #8
 801e066:	af00      	add	r7, sp, #0
 801e068:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e06a:	687b      	ldr	r3, [r7, #4]
 801e06c:	681b      	ldr	r3, [r3, #0]
 801e06e:	4618      	mov	r0, r3
 801e070:	f7e8 f840 	bl	80060f4 <osMutexRelease>
}
 801e074:	bf00      	nop
 801e076:	3708      	adds	r7, #8
 801e078:	46bd      	mov	sp, r7
 801e07a:	bd80      	pop	{r7, pc}

0801e07c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e07c:	b580      	push	{r7, lr}
 801e07e:	b08c      	sub	sp, #48	; 0x30
 801e080:	af00      	add	r7, sp, #0
 801e082:	60f8      	str	r0, [r7, #12]
 801e084:	60b9      	str	r1, [r7, #8]
 801e086:	607a      	str	r2, [r7, #4]
 801e088:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e08a:	f107 0314 	add.w	r3, r7, #20
 801e08e:	2200      	movs	r2, #0
 801e090:	601a      	str	r2, [r3, #0]
 801e092:	605a      	str	r2, [r3, #4]
 801e094:	609a      	str	r2, [r3, #8]
 801e096:	60da      	str	r2, [r3, #12]
 801e098:	611a      	str	r2, [r3, #16]
 801e09a:	615a      	str	r2, [r3, #20]
 801e09c:	619a      	str	r2, [r3, #24]
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	617b      	str	r3, [r7, #20]
 801e0a2:	68bb      	ldr	r3, [r7, #8]
 801e0a4:	61bb      	str	r3, [r7, #24]
 801e0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e0a8:	b21b      	sxth	r3, r3
 801e0aa:	83bb      	strh	r3, [r7, #28]
 801e0ac:	683b      	ldr	r3, [r7, #0]
 801e0ae:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e0b0:	f107 0314 	add.w	r3, r7, #20
 801e0b4:	6879      	ldr	r1, [r7, #4]
 801e0b6:	4618      	mov	r0, r3
 801e0b8:	f7e7 ff56 	bl	8005f68 <osThreadCreate>
 801e0bc:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3730      	adds	r7, #48	; 0x30
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
	...

0801e0c8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e0c8:	b580      	push	{r7, lr}
 801e0ca:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e0cc:	4b04      	ldr	r3, [pc, #16]	; (801e0e0 <sys_arch_protect+0x18>)
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	f7e7 ffbf 	bl	8006058 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e0da:	2301      	movs	r3, #1
}
 801e0dc:	4618      	mov	r0, r3
 801e0de:	bd80      	pop	{r7, pc}
 801e0e0:	2000ca28 	.word	0x2000ca28

0801e0e4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e0e4:	b580      	push	{r7, lr}
 801e0e6:	b082      	sub	sp, #8
 801e0e8:	af00      	add	r7, sp, #0
 801e0ea:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e0ec:	4b04      	ldr	r3, [pc, #16]	; (801e100 <sys_arch_unprotect+0x1c>)
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	4618      	mov	r0, r3
 801e0f2:	f7e7 ffff 	bl	80060f4 <osMutexRelease>
}
 801e0f6:	bf00      	nop
 801e0f8:	3708      	adds	r7, #8
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	bd80      	pop	{r7, pc}
 801e0fe:	bf00      	nop
 801e100:	2000ca28 	.word	0x2000ca28

0801e104 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 801e104:	b580      	push	{r7, lr}
 801e106:	b086      	sub	sp, #24
 801e108:	af02      	add	r7, sp, #8
 801e10a:	4603      	mov	r3, r0
 801e10c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 801e10e:	f107 020f 	add.w	r2, r7, #15
 801e112:	1df9      	adds	r1, r7, #7
 801e114:	2364      	movs	r3, #100	; 0x64
 801e116:	9300      	str	r3, [sp, #0]
 801e118:	2301      	movs	r3, #1
 801e11a:	4804      	ldr	r0, [pc, #16]	; (801e12c <W25qxx_Spi+0x28>)
 801e11c:	f7e6 f978 	bl	8004410 <HAL_SPI_TransmitReceive>


	return ret;
 801e120:	7bfb      	ldrb	r3, [r7, #15]
}
 801e122:	4618      	mov	r0, r3
 801e124:	3710      	adds	r7, #16
 801e126:	46bd      	mov	sp, r7
 801e128:	bd80      	pop	{r7, pc}
 801e12a:	bf00      	nop
 801e12c:	20000560 	.word	0x20000560

0801e130 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 801e130:	b580      	push	{r7, lr}
 801e132:	b084      	sub	sp, #16
 801e134:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801e136:	2300      	movs	r3, #0
 801e138:	60fb      	str	r3, [r7, #12]
 801e13a:	2300      	movs	r3, #0
 801e13c:	60bb      	str	r3, [r7, #8]
 801e13e:	2300      	movs	r3, #0
 801e140:	607b      	str	r3, [r7, #4]
 801e142:	2300      	movs	r3, #0
 801e144:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e146:	2200      	movs	r2, #0
 801e148:	2108      	movs	r1, #8
 801e14a:	4813      	ldr	r0, [pc, #76]	; (801e198 <W25qxx_ReadID+0x68>)
 801e14c:	f7e5 f894 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 801e150:	209f      	movs	r0, #159	; 0x9f
 801e152:	f7ff ffd7 	bl	801e104 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e156:	20a5      	movs	r0, #165	; 0xa5
 801e158:	f7ff ffd4 	bl	801e104 <W25qxx_Spi>
 801e15c:	4603      	mov	r3, r0
 801e15e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e160:	20a5      	movs	r0, #165	; 0xa5
 801e162:	f7ff ffcf 	bl	801e104 <W25qxx_Spi>
 801e166:	4603      	mov	r3, r0
 801e168:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e16a:	20a5      	movs	r0, #165	; 0xa5
 801e16c:	f7ff ffca 	bl	801e104 <W25qxx_Spi>
 801e170:	4603      	mov	r3, r0
 801e172:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e174:	2201      	movs	r2, #1
 801e176:	2108      	movs	r1, #8
 801e178:	4807      	ldr	r0, [pc, #28]	; (801e198 <W25qxx_ReadID+0x68>)
 801e17a:	f7e5 f87d 	bl	8003278 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 801e17e:	68bb      	ldr	r3, [r7, #8]
 801e180:	041a      	lsls	r2, r3, #16
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	021b      	lsls	r3, r3, #8
 801e186:	4313      	orrs	r3, r2
 801e188:	683a      	ldr	r2, [r7, #0]
 801e18a:	4313      	orrs	r3, r2
 801e18c:	60fb      	str	r3, [r7, #12]
	return Temp;
 801e18e:	68fb      	ldr	r3, [r7, #12]
}
 801e190:	4618      	mov	r0, r3
 801e192:	3710      	adds	r7, #16
 801e194:	46bd      	mov	sp, r7
 801e196:	bd80      	pop	{r7, pc}
 801e198:	40021000 	.word	0x40021000

0801e19c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 801e19c:	b590      	push	{r4, r7, lr}
 801e19e:	b083      	sub	sp, #12
 801e1a0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e1a2:	2200      	movs	r2, #0
 801e1a4:	2108      	movs	r1, #8
 801e1a6:	4816      	ldr	r0, [pc, #88]	; (801e200 <W25qxx_ReadUniqID+0x64>)
 801e1a8:	f7e5 f866 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 801e1ac:	204b      	movs	r0, #75	; 0x4b
 801e1ae:	f7ff ffa9 	bl	801e104 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801e1b2:	2300      	movs	r3, #0
 801e1b4:	71fb      	strb	r3, [r7, #7]
 801e1b6:	e005      	b.n	801e1c4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e1b8:	20a5      	movs	r0, #165	; 0xa5
 801e1ba:	f7ff ffa3 	bl	801e104 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 801e1be:	79fb      	ldrb	r3, [r7, #7]
 801e1c0:	3301      	adds	r3, #1
 801e1c2:	71fb      	strb	r3, [r7, #7]
 801e1c4:	79fb      	ldrb	r3, [r7, #7]
 801e1c6:	2b03      	cmp	r3, #3
 801e1c8:	d9f6      	bls.n	801e1b8 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 801e1ca:	2300      	movs	r3, #0
 801e1cc:	71bb      	strb	r3, [r7, #6]
 801e1ce:	e00b      	b.n	801e1e8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e1d0:	79bc      	ldrb	r4, [r7, #6]
 801e1d2:	20a5      	movs	r0, #165	; 0xa5
 801e1d4:	f7ff ff96 	bl	801e104 <W25qxx_Spi>
 801e1d8:	4603      	mov	r3, r0
 801e1da:	461a      	mov	r2, r3
 801e1dc:	4b09      	ldr	r3, [pc, #36]	; (801e204 <W25qxx_ReadUniqID+0x68>)
 801e1de:	4423      	add	r3, r4
 801e1e0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 801e1e2:	79bb      	ldrb	r3, [r7, #6]
 801e1e4:	3301      	adds	r3, #1
 801e1e6:	71bb      	strb	r3, [r7, #6]
 801e1e8:	79bb      	ldrb	r3, [r7, #6]
 801e1ea:	2b07      	cmp	r3, #7
 801e1ec:	d9f0      	bls.n	801e1d0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e1ee:	2201      	movs	r2, #1
 801e1f0:	2108      	movs	r1, #8
 801e1f2:	4803      	ldr	r0, [pc, #12]	; (801e200 <W25qxx_ReadUniqID+0x64>)
 801e1f4:	f7e5 f840 	bl	8003278 <HAL_GPIO_WritePin>
}
 801e1f8:	bf00      	nop
 801e1fa:	370c      	adds	r7, #12
 801e1fc:	46bd      	mov	sp, r7
 801e1fe:	bd90      	pop	{r4, r7, pc}
 801e200:	40021000 	.word	0x40021000
 801e204:	2000ca2c 	.word	0x2000ca2c

0801e208 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 801e208:	b580      	push	{r7, lr}
 801e20a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e20c:	2200      	movs	r2, #0
 801e20e:	2108      	movs	r1, #8
 801e210:	4807      	ldr	r0, [pc, #28]	; (801e230 <W25qxx_WriteEnable+0x28>)
 801e212:	f7e5 f831 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 801e216:	2006      	movs	r0, #6
 801e218:	f7ff ff74 	bl	801e104 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e21c:	2201      	movs	r2, #1
 801e21e:	2108      	movs	r1, #8
 801e220:	4803      	ldr	r0, [pc, #12]	; (801e230 <W25qxx_WriteEnable+0x28>)
 801e222:	f7e5 f829 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 801e226:	2001      	movs	r0, #1
 801e228:	f7e3 fb28 	bl	800187c <HAL_Delay>
}
 801e22c:	bf00      	nop
 801e22e:	bd80      	pop	{r7, pc}
 801e230:	40021000 	.word	0x40021000

0801e234 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b084      	sub	sp, #16
 801e238:	af00      	add	r7, sp, #0
 801e23a:	4603      	mov	r3, r0
 801e23c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 801e23e:	2300      	movs	r3, #0
 801e240:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e242:	2200      	movs	r2, #0
 801e244:	2108      	movs	r1, #8
 801e246:	481c      	ldr	r0, [pc, #112]	; (801e2b8 <W25qxx_ReadStatusRegister+0x84>)
 801e248:	f7e5 f816 	bl	8003278 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 801e24c:	79fb      	ldrb	r3, [r7, #7]
 801e24e:	2b01      	cmp	r3, #1
 801e250:	d10c      	bne.n	801e26c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 801e252:	2005      	movs	r0, #5
 801e254:	f7ff ff56 	bl	801e104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e258:	20a5      	movs	r0, #165	; 0xa5
 801e25a:	f7ff ff53 	bl	801e104 <W25qxx_Spi>
 801e25e:	4603      	mov	r3, r0
 801e260:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 801e262:	4a16      	ldr	r2, [pc, #88]	; (801e2bc <W25qxx_ReadStatusRegister+0x88>)
 801e264:	7bfb      	ldrb	r3, [r7, #15]
 801e266:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 801e26a:	e01b      	b.n	801e2a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 801e26c:	79fb      	ldrb	r3, [r7, #7]
 801e26e:	2b02      	cmp	r3, #2
 801e270:	d10c      	bne.n	801e28c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 801e272:	2035      	movs	r0, #53	; 0x35
 801e274:	f7ff ff46 	bl	801e104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e278:	20a5      	movs	r0, #165	; 0xa5
 801e27a:	f7ff ff43 	bl	801e104 <W25qxx_Spi>
 801e27e:	4603      	mov	r3, r0
 801e280:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 801e282:	4a0e      	ldr	r2, [pc, #56]	; (801e2bc <W25qxx_ReadStatusRegister+0x88>)
 801e284:	7bfb      	ldrb	r3, [r7, #15]
 801e286:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 801e28a:	e00b      	b.n	801e2a4 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 801e28c:	2015      	movs	r0, #21
 801e28e:	f7ff ff39 	bl	801e104 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e292:	20a5      	movs	r0, #165	; 0xa5
 801e294:	f7ff ff36 	bl	801e104 <W25qxx_Spi>
 801e298:	4603      	mov	r3, r0
 801e29a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 801e29c:	4a07      	ldr	r2, [pc, #28]	; (801e2bc <W25qxx_ReadStatusRegister+0x88>)
 801e29e:	7bfb      	ldrb	r3, [r7, #15]
 801e2a0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e2a4:	2201      	movs	r2, #1
 801e2a6:	2108      	movs	r1, #8
 801e2a8:	4803      	ldr	r0, [pc, #12]	; (801e2b8 <W25qxx_ReadStatusRegister+0x84>)
 801e2aa:	f7e4 ffe5 	bl	8003278 <HAL_GPIO_WritePin>
	return status;
 801e2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 801e2b0:	4618      	mov	r0, r3
 801e2b2:	3710      	adds	r7, #16
 801e2b4:	46bd      	mov	sp, r7
 801e2b6:	bd80      	pop	{r7, pc}
 801e2b8:	40021000 	.word	0x40021000
 801e2bc:	2000ca2c 	.word	0x2000ca2c

0801e2c0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 801e2c4:	2001      	movs	r0, #1
 801e2c6:	f7e3 fad9 	bl	800187c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	2108      	movs	r1, #8
 801e2ce:	480f      	ldr	r0, [pc, #60]	; (801e30c <W25qxx_WaitForWriteEnd+0x4c>)
 801e2d0:	f7e4 ffd2 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 801e2d4:	2005      	movs	r0, #5
 801e2d6:	f7ff ff15 	bl	801e104 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 801e2da:	20a5      	movs	r0, #165	; 0xa5
 801e2dc:	f7ff ff12 	bl	801e104 <W25qxx_Spi>
 801e2e0:	4603      	mov	r3, r0
 801e2e2:	461a      	mov	r2, r3
 801e2e4:	4b0a      	ldr	r3, [pc, #40]	; (801e310 <W25qxx_WaitForWriteEnd+0x50>)
 801e2e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 801e2ea:	2001      	movs	r0, #1
 801e2ec:	f7e3 fac6 	bl	800187c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 801e2f0:	4b07      	ldr	r3, [pc, #28]	; (801e310 <W25qxx_WaitForWriteEnd+0x50>)
 801e2f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801e2f6:	f003 0301 	and.w	r3, r3, #1
 801e2fa:	2b00      	cmp	r3, #0
 801e2fc:	d1ed      	bne.n	801e2da <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e2fe:	2201      	movs	r2, #1
 801e300:	2108      	movs	r1, #8
 801e302:	4802      	ldr	r0, [pc, #8]	; (801e30c <W25qxx_WaitForWriteEnd+0x4c>)
 801e304:	f7e4 ffb8 	bl	8003278 <HAL_GPIO_WritePin>
}
 801e308:	bf00      	nop
 801e30a:	bd80      	pop	{r7, pc}
 801e30c:	40021000 	.word	0x40021000
 801e310:	2000ca2c 	.word	0x2000ca2c

0801e314 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 801e314:	b580      	push	{r7, lr}
 801e316:	b082      	sub	sp, #8
 801e318:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 801e31a:	4b65      	ldr	r3, [pc, #404]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e31c:	2201      	movs	r2, #1
 801e31e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 801e322:	e002      	b.n	801e32a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 801e324:	2001      	movs	r0, #1
 801e326:	f7e3 faa9 	bl	800187c <HAL_Delay>
	while (HAL_GetTick() < 100)
 801e32a:	f7e3 fa9b 	bl	8001864 <HAL_GetTick>
 801e32e:	4603      	mov	r3, r0
 801e330:	2b63      	cmp	r3, #99	; 0x63
 801e332:	d9f7      	bls.n	801e324 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e334:	2201      	movs	r2, #1
 801e336:	2108      	movs	r1, #8
 801e338:	485e      	ldr	r0, [pc, #376]	; (801e4b4 <W25qxx_Init+0x1a0>)
 801e33a:	f7e4 ff9d 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 801e33e:	2064      	movs	r0, #100	; 0x64
 801e340:	f7e3 fa9c 	bl	800187c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 801e344:	f7ff fef4 	bl	801e130 <W25qxx_ReadID>
 801e348:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 801e34a:	687b      	ldr	r3, [r7, #4]
 801e34c:	b2db      	uxtb	r3, r3
 801e34e:	3b11      	subs	r3, #17
 801e350:	2b0f      	cmp	r3, #15
 801e352:	d86c      	bhi.n	801e42e <W25qxx_Init+0x11a>
 801e354:	a201      	add	r2, pc, #4	; (adr r2, 801e35c <W25qxx_Init+0x48>)
 801e356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e35a:	bf00      	nop
 801e35c:	0801e421 	.word	0x0801e421
 801e360:	0801e413 	.word	0x0801e413
 801e364:	0801e405 	.word	0x0801e405
 801e368:	0801e3f7 	.word	0x0801e3f7
 801e36c:	0801e3e9 	.word	0x0801e3e9
 801e370:	0801e3db 	.word	0x0801e3db
 801e374:	0801e3cd 	.word	0x0801e3cd
 801e378:	0801e3bd 	.word	0x0801e3bd
 801e37c:	0801e3ad 	.word	0x0801e3ad
 801e380:	0801e42f 	.word	0x0801e42f
 801e384:	0801e42f 	.word	0x0801e42f
 801e388:	0801e42f 	.word	0x0801e42f
 801e38c:	0801e42f 	.word	0x0801e42f
 801e390:	0801e42f 	.word	0x0801e42f
 801e394:	0801e42f 	.word	0x0801e42f
 801e398:	0801e39d 	.word	0x0801e39d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 801e39c:	4b44      	ldr	r3, [pc, #272]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e39e:	220a      	movs	r2, #10
 801e3a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 801e3a2:	4b43      	ldr	r3, [pc, #268]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e3a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 801e3aa:	e046      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 801e3ac:	4b40      	ldr	r3, [pc, #256]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3ae:	2209      	movs	r2, #9
 801e3b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 801e3b2:	4b3f      	ldr	r3, [pc, #252]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e3b8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 801e3ba:	e03e      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 801e3bc:	4b3c      	ldr	r3, [pc, #240]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3be:	2208      	movs	r2, #8
 801e3c0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 801e3c2:	4b3b      	ldr	r3, [pc, #236]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e3c8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 801e3ca:	e036      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 801e3cc:	4b38      	ldr	r3, [pc, #224]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3ce:	2207      	movs	r2, #7
 801e3d0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 801e3d2:	4b37      	ldr	r3, [pc, #220]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3d4:	2280      	movs	r2, #128	; 0x80
 801e3d6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 801e3d8:	e02f      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 801e3da:	4b35      	ldr	r3, [pc, #212]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3dc:	2206      	movs	r2, #6
 801e3de:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 801e3e0:	4b33      	ldr	r3, [pc, #204]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3e2:	2240      	movs	r2, #64	; 0x40
 801e3e4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 801e3e6:	e028      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 801e3e8:	4b31      	ldr	r3, [pc, #196]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3ea:	2205      	movs	r2, #5
 801e3ec:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 801e3ee:	4b30      	ldr	r3, [pc, #192]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3f0:	2220      	movs	r2, #32
 801e3f2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 801e3f4:	e021      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 801e3f6:	4b2e      	ldr	r3, [pc, #184]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3f8:	2204      	movs	r2, #4
 801e3fa:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 801e3fc:	4b2c      	ldr	r3, [pc, #176]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e3fe:	2210      	movs	r2, #16
 801e400:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 801e402:	e01a      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 801e404:	4b2a      	ldr	r3, [pc, #168]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e406:	2203      	movs	r2, #3
 801e408:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 801e40a:	4b29      	ldr	r3, [pc, #164]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e40c:	2208      	movs	r2, #8
 801e40e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 801e410:	e013      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 801e412:	4b27      	ldr	r3, [pc, #156]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e414:	2202      	movs	r2, #2
 801e416:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 801e418:	4b25      	ldr	r3, [pc, #148]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e41a:	2204      	movs	r2, #4
 801e41c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 801e41e:	e00c      	b.n	801e43a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 801e420:	4b23      	ldr	r3, [pc, #140]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e422:	2201      	movs	r2, #1
 801e424:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 801e426:	4b22      	ldr	r3, [pc, #136]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e428:	2202      	movs	r2, #2
 801e42a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 801e42c:	e005      	b.n	801e43a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 801e42e:	4b20      	ldr	r3, [pc, #128]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e430:	2200      	movs	r2, #0
 801e432:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 801e436:	2300      	movs	r3, #0
 801e438:	e036      	b.n	801e4a8 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 801e43a:	4b1d      	ldr	r3, [pc, #116]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e43c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e440:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 801e442:	4b1b      	ldr	r3, [pc, #108]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801e448:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 801e44a:	4b19      	ldr	r3, [pc, #100]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e44c:	69db      	ldr	r3, [r3, #28]
 801e44e:	011b      	lsls	r3, r3, #4
 801e450:	4a17      	ldr	r2, [pc, #92]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e452:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 801e454:	4b16      	ldr	r3, [pc, #88]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e456:	695b      	ldr	r3, [r3, #20]
 801e458:	4a15      	ldr	r2, [pc, #84]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e45a:	6912      	ldr	r2, [r2, #16]
 801e45c:	fb02 f303 	mul.w	r3, r2, r3
 801e460:	4a13      	ldr	r2, [pc, #76]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e462:	8952      	ldrh	r2, [r2, #10]
 801e464:	fbb3 f3f2 	udiv	r3, r3, r2
 801e468:	4a11      	ldr	r2, [pc, #68]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e46a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 801e46c:	4b10      	ldr	r3, [pc, #64]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e46e:	691b      	ldr	r3, [r3, #16]
 801e470:	011b      	lsls	r3, r3, #4
 801e472:	4a0f      	ldr	r2, [pc, #60]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e474:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 801e476:	4b0e      	ldr	r3, [pc, #56]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e478:	695b      	ldr	r3, [r3, #20]
 801e47a:	4a0d      	ldr	r2, [pc, #52]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e47c:	6912      	ldr	r2, [r2, #16]
 801e47e:	fb02 f303 	mul.w	r3, r2, r3
 801e482:	0a9b      	lsrs	r3, r3, #10
 801e484:	4a0a      	ldr	r2, [pc, #40]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e486:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 801e488:	f7ff fe88 	bl	801e19c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 801e48c:	2001      	movs	r0, #1
 801e48e:	f7ff fed1 	bl	801e234 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 801e492:	2002      	movs	r0, #2
 801e494:	f7ff fece 	bl	801e234 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 801e498:	2003      	movs	r0, #3
 801e49a:	f7ff fecb 	bl	801e234 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 801e49e:	4b04      	ldr	r3, [pc, #16]	; (801e4b0 <W25qxx_Init+0x19c>)
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 801e4a6:	2301      	movs	r3, #1
}
 801e4a8:	4618      	mov	r0, r3
 801e4aa:	3708      	adds	r7, #8
 801e4ac:	46bd      	mov	sp, r7
 801e4ae:	bd80      	pop	{r7, pc}
 801e4b0:	2000ca2c 	.word	0x2000ca2c
 801e4b4:	40021000 	.word	0x40021000

0801e4b8 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 801e4b8:	b580      	push	{r7, lr}
 801e4ba:	b082      	sub	sp, #8
 801e4bc:	af00      	add	r7, sp, #0
 801e4be:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 801e4c0:	e002      	b.n	801e4c8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 801e4c2:	2001      	movs	r0, #1
 801e4c4:	f7e3 f9da 	bl	800187c <HAL_Delay>
	while (w25qxx.Lock == 1)
 801e4c8:	4b26      	ldr	r3, [pc, #152]	; (801e564 <W25qxx_EraseSector+0xac>)
 801e4ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801e4ce:	2b01      	cmp	r3, #1
 801e4d0:	d0f7      	beq.n	801e4c2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 801e4d2:	4b24      	ldr	r3, [pc, #144]	; (801e564 <W25qxx_EraseSector+0xac>)
 801e4d4:	2201      	movs	r2, #1
 801e4d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 801e4da:	f7ff fef1 	bl	801e2c0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 801e4de:	4b21      	ldr	r3, [pc, #132]	; (801e564 <W25qxx_EraseSector+0xac>)
 801e4e0:	691a      	ldr	r2, [r3, #16]
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	fb02 f303 	mul.w	r3, r2, r3
 801e4e8:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 801e4ea:	f7ff fe8d 	bl	801e208 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e4ee:	2200      	movs	r2, #0
 801e4f0:	2108      	movs	r1, #8
 801e4f2:	481d      	ldr	r0, [pc, #116]	; (801e568 <W25qxx_EraseSector+0xb0>)
 801e4f4:	f7e4 fec0 	bl	8003278 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 801e4f8:	4b1a      	ldr	r3, [pc, #104]	; (801e564 <W25qxx_EraseSector+0xac>)
 801e4fa:	781b      	ldrb	r3, [r3, #0]
 801e4fc:	2b08      	cmp	r3, #8
 801e4fe:	d909      	bls.n	801e514 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 801e500:	2021      	movs	r0, #33	; 0x21
 801e502:	f7ff fdff 	bl	801e104 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	0e1b      	lsrs	r3, r3, #24
 801e50a:	b2db      	uxtb	r3, r3
 801e50c:	4618      	mov	r0, r3
 801e50e:	f7ff fdf9 	bl	801e104 <W25qxx_Spi>
 801e512:	e002      	b.n	801e51a <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 801e514:	2020      	movs	r0, #32
 801e516:	f7ff fdf5 	bl	801e104 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	0c1b      	lsrs	r3, r3, #16
 801e51e:	b2db      	uxtb	r3, r3
 801e520:	4618      	mov	r0, r3
 801e522:	f7ff fdef 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	0a1b      	lsrs	r3, r3, #8
 801e52a:	b2db      	uxtb	r3, r3
 801e52c:	4618      	mov	r0, r3
 801e52e:	f7ff fde9 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 801e532:	687b      	ldr	r3, [r7, #4]
 801e534:	b2db      	uxtb	r3, r3
 801e536:	4618      	mov	r0, r3
 801e538:	f7ff fde4 	bl	801e104 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e53c:	2201      	movs	r2, #1
 801e53e:	2108      	movs	r1, #8
 801e540:	4809      	ldr	r0, [pc, #36]	; (801e568 <W25qxx_EraseSector+0xb0>)
 801e542:	f7e4 fe99 	bl	8003278 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 801e546:	f7ff febb 	bl	801e2c0 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 801e54a:	2001      	movs	r0, #1
 801e54c:	f7e3 f996 	bl	800187c <HAL_Delay>
	w25qxx.Lock = 0;
 801e550:	4b04      	ldr	r3, [pc, #16]	; (801e564 <W25qxx_EraseSector+0xac>)
 801e552:	2200      	movs	r2, #0
 801e554:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 801e558:	bf00      	nop
 801e55a:	4618      	mov	r0, r3
 801e55c:	3708      	adds	r7, #8
 801e55e:	46bd      	mov	sp, r7
 801e560:	bd80      	pop	{r7, pc}
 801e562:	bf00      	nop
 801e564:	2000ca2c 	.word	0x2000ca2c
 801e568:	40021000 	.word	0x40021000

0801e56c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 801e56c:	b480      	push	{r7}
 801e56e:	b083      	sub	sp, #12
 801e570:	af00      	add	r7, sp, #0
 801e572:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 801e574:	4b07      	ldr	r3, [pc, #28]	; (801e594 <W25qxx_SectorToPage+0x28>)
 801e576:	691b      	ldr	r3, [r3, #16]
 801e578:	687a      	ldr	r2, [r7, #4]
 801e57a:	fb02 f303 	mul.w	r3, r2, r3
 801e57e:	4a05      	ldr	r2, [pc, #20]	; (801e594 <W25qxx_SectorToPage+0x28>)
 801e580:	8952      	ldrh	r2, [r2, #10]
 801e582:	fbb3 f3f2 	udiv	r3, r3, r2
}
 801e586:	4618      	mov	r0, r3
 801e588:	370c      	adds	r7, #12
 801e58a:	46bd      	mov	sp, r7
 801e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e590:	4770      	bx	lr
 801e592:	bf00      	nop
 801e594:	2000ca2c 	.word	0x2000ca2c

0801e598 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 801e598:	b580      	push	{r7, lr}
 801e59a:	b084      	sub	sp, #16
 801e59c:	af00      	add	r7, sp, #0
 801e59e:	60f8      	str	r0, [r7, #12]
 801e5a0:	60b9      	str	r1, [r7, #8]
 801e5a2:	607a      	str	r2, [r7, #4]
 801e5a4:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801e5a6:	e002      	b.n	801e5ae <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 801e5a8:	2001      	movs	r0, #1
 801e5aa:	f7e3 f967 	bl	800187c <HAL_Delay>
	while (w25qxx.Lock == 1)
 801e5ae:	4b39      	ldr	r3, [pc, #228]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5b0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801e5b4:	2b01      	cmp	r3, #1
 801e5b6:	d0f7      	beq.n	801e5a8 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 801e5b8:	4b36      	ldr	r3, [pc, #216]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5ba:	2201      	movs	r2, #1
 801e5bc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 801e5c0:	683a      	ldr	r2, [r7, #0]
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	4413      	add	r3, r2
 801e5c6:	4a33      	ldr	r2, [pc, #204]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5c8:	8952      	ldrh	r2, [r2, #10]
 801e5ca:	4293      	cmp	r3, r2
 801e5cc:	d802      	bhi.n	801e5d4 <W25qxx_WritePage+0x3c>
 801e5ce:	683b      	ldr	r3, [r7, #0]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	d105      	bne.n	801e5e0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801e5d4:	4b2f      	ldr	r3, [pc, #188]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5d6:	895b      	ldrh	r3, [r3, #10]
 801e5d8:	461a      	mov	r2, r3
 801e5da:	687b      	ldr	r3, [r7, #4]
 801e5dc:	1ad3      	subs	r3, r2, r3
 801e5de:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 801e5e0:	687a      	ldr	r2, [r7, #4]
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	4413      	add	r3, r2
 801e5e6:	4a2b      	ldr	r2, [pc, #172]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5e8:	8952      	ldrh	r2, [r2, #10]
 801e5ea:	4293      	cmp	r3, r2
 801e5ec:	d905      	bls.n	801e5fa <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801e5ee:	4b29      	ldr	r3, [pc, #164]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e5f0:	895b      	ldrh	r3, [r3, #10]
 801e5f2:	461a      	mov	r2, r3
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	1ad3      	subs	r3, r2, r3
 801e5f8:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 801e5fa:	f7ff fe61 	bl	801e2c0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 801e5fe:	f7ff fe03 	bl	801e208 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e602:	2200      	movs	r2, #0
 801e604:	2108      	movs	r1, #8
 801e606:	4824      	ldr	r0, [pc, #144]	; (801e698 <W25qxx_WritePage+0x100>)
 801e608:	f7e4 fe36 	bl	8003278 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 801e60c:	4b21      	ldr	r3, [pc, #132]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e60e:	895b      	ldrh	r3, [r3, #10]
 801e610:	461a      	mov	r2, r3
 801e612:	68bb      	ldr	r3, [r7, #8]
 801e614:	fb02 f303 	mul.w	r3, r2, r3
 801e618:	687a      	ldr	r2, [r7, #4]
 801e61a:	4413      	add	r3, r2
 801e61c:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 801e61e:	4b1d      	ldr	r3, [pc, #116]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e620:	781b      	ldrb	r3, [r3, #0]
 801e622:	2b08      	cmp	r3, #8
 801e624:	d909      	bls.n	801e63a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 801e626:	2012      	movs	r0, #18
 801e628:	f7ff fd6c 	bl	801e104 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801e62c:	68bb      	ldr	r3, [r7, #8]
 801e62e:	0e1b      	lsrs	r3, r3, #24
 801e630:	b2db      	uxtb	r3, r3
 801e632:	4618      	mov	r0, r3
 801e634:	f7ff fd66 	bl	801e104 <W25qxx_Spi>
 801e638:	e002      	b.n	801e640 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 801e63a:	2002      	movs	r0, #2
 801e63c:	f7ff fd62 	bl	801e104 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	0c1b      	lsrs	r3, r3, #16
 801e644:	b2db      	uxtb	r3, r3
 801e646:	4618      	mov	r0, r3
 801e648:	f7ff fd5c 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801e64c:	68bb      	ldr	r3, [r7, #8]
 801e64e:	0a1b      	lsrs	r3, r3, #8
 801e650:	b2db      	uxtb	r3, r3
 801e652:	4618      	mov	r0, r3
 801e654:	f7ff fd56 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801e658:	68bb      	ldr	r3, [r7, #8]
 801e65a:	b2db      	uxtb	r3, r3
 801e65c:	4618      	mov	r0, r3
 801e65e:	f7ff fd51 	bl	801e104 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 801e662:	683b      	ldr	r3, [r7, #0]
 801e664:	b29a      	uxth	r2, r3
 801e666:	2364      	movs	r3, #100	; 0x64
 801e668:	68f9      	ldr	r1, [r7, #12]
 801e66a:	480c      	ldr	r0, [pc, #48]	; (801e69c <W25qxx_WritePage+0x104>)
 801e66c:	f7e5 fc75 	bl	8003f5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e670:	2201      	movs	r2, #1
 801e672:	2108      	movs	r1, #8
 801e674:	4808      	ldr	r0, [pc, #32]	; (801e698 <W25qxx_WritePage+0x100>)
 801e676:	f7e4 fdff 	bl	8003278 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 801e67a:	f7ff fe21 	bl	801e2c0 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801e67e:	2001      	movs	r0, #1
 801e680:	f7e3 f8fc 	bl	800187c <HAL_Delay>
	w25qxx.Lock = 0;
 801e684:	4b03      	ldr	r3, [pc, #12]	; (801e694 <W25qxx_WritePage+0xfc>)
 801e686:	2200      	movs	r2, #0
 801e688:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801e68c:	bf00      	nop
 801e68e:	3710      	adds	r7, #16
 801e690:	46bd      	mov	sp, r7
 801e692:	bd80      	pop	{r7, pc}
 801e694:	2000ca2c 	.word	0x2000ca2c
 801e698:	40021000 	.word	0x40021000
 801e69c:	20000560 	.word	0x20000560

0801e6a0 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 801e6a0:	b580      	push	{r7, lr}
 801e6a2:	b088      	sub	sp, #32
 801e6a4:	af00      	add	r7, sp, #0
 801e6a6:	60f8      	str	r0, [r7, #12]
 801e6a8:	60b9      	str	r1, [r7, #8]
 801e6aa:	607a      	str	r2, [r7, #4]
 801e6ac:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 801e6ae:	4b2d      	ldr	r3, [pc, #180]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6b0:	691b      	ldr	r3, [r3, #16]
 801e6b2:	683a      	ldr	r2, [r7, #0]
 801e6b4:	429a      	cmp	r2, r3
 801e6b6:	d802      	bhi.n	801e6be <W25qxx_WriteSector+0x1e>
 801e6b8:	683b      	ldr	r3, [r7, #0]
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d102      	bne.n	801e6c4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 801e6be:	4b29      	ldr	r3, [pc, #164]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6c0:	691b      	ldr	r3, [r3, #16]
 801e6c2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801e6c4:	4b27      	ldr	r3, [pc, #156]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6c6:	691b      	ldr	r3, [r3, #16]
 801e6c8:	687a      	ldr	r2, [r7, #4]
 801e6ca:	429a      	cmp	r2, r3
 801e6cc:	d301      	bcc.n	801e6d2 <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	e043      	b.n	801e75a <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 801e6d2:	687a      	ldr	r2, [r7, #4]
 801e6d4:	683b      	ldr	r3, [r7, #0]
 801e6d6:	441a      	add	r2, r3
 801e6d8:	4b22      	ldr	r3, [pc, #136]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6da:	691b      	ldr	r3, [r3, #16]
 801e6dc:	429a      	cmp	r2, r3
 801e6de:	d905      	bls.n	801e6ec <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 801e6e0:	4b20      	ldr	r3, [pc, #128]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6e2:	691a      	ldr	r2, [r3, #16]
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	1ad3      	subs	r3, r2, r3
 801e6e8:	61bb      	str	r3, [r7, #24]
 801e6ea:	e001      	b.n	801e6f0 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 801e6ec:	683b      	ldr	r3, [r7, #0]
 801e6ee:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801e6f0:	68b8      	ldr	r0, [r7, #8]
 801e6f2:	f7ff ff3b 	bl	801e56c <W25qxx_SectorToPage>
 801e6f6:	4602      	mov	r2, r0
 801e6f8:	4b1a      	ldr	r3, [pc, #104]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e6fa:	895b      	ldrh	r3, [r3, #10]
 801e6fc:	4619      	mov	r1, r3
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	fbb3 f3f1 	udiv	r3, r3, r1
 801e704:	4413      	add	r3, r2
 801e706:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801e708:	4b16      	ldr	r3, [pc, #88]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e70a:	895b      	ldrh	r3, [r3, #10]
 801e70c:	461a      	mov	r2, r3
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	fbb3 f1f2 	udiv	r1, r3, r2
 801e714:	fb01 f202 	mul.w	r2, r1, r2
 801e718:	1a9b      	subs	r3, r3, r2
 801e71a:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 801e71c:	69bb      	ldr	r3, [r7, #24]
 801e71e:	697a      	ldr	r2, [r7, #20]
 801e720:	69f9      	ldr	r1, [r7, #28]
 801e722:	68f8      	ldr	r0, [r7, #12]
 801e724:	f7ff ff38 	bl	801e598 <W25qxx_WritePage>
		StartPage++;
 801e728:	69fb      	ldr	r3, [r7, #28]
 801e72a:	3301      	adds	r3, #1
 801e72c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 801e72e:	4b0d      	ldr	r3, [pc, #52]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e730:	895b      	ldrh	r3, [r3, #10]
 801e732:	461a      	mov	r2, r3
 801e734:	697b      	ldr	r3, [r7, #20]
 801e736:	1a9a      	subs	r2, r3, r2
 801e738:	69bb      	ldr	r3, [r7, #24]
 801e73a:	4413      	add	r3, r2
 801e73c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801e73e:	4b09      	ldr	r3, [pc, #36]	; (801e764 <W25qxx_WriteSector+0xc4>)
 801e740:	895b      	ldrh	r3, [r3, #10]
 801e742:	461a      	mov	r2, r3
 801e744:	697b      	ldr	r3, [r7, #20]
 801e746:	1ad3      	subs	r3, r2, r3
 801e748:	68fa      	ldr	r2, [r7, #12]
 801e74a:	4413      	add	r3, r2
 801e74c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801e74e:	2300      	movs	r3, #0
 801e750:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 801e752:	69bb      	ldr	r3, [r7, #24]
 801e754:	2b00      	cmp	r3, #0
 801e756:	dce1      	bgt.n	801e71c <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 801e758:	2301      	movs	r3, #1

}
 801e75a:	4618      	mov	r0, r3
 801e75c:	3720      	adds	r7, #32
 801e75e:	46bd      	mov	sp, r7
 801e760:	bd80      	pop	{r7, pc}
 801e762:	bf00      	nop
 801e764:	2000ca2c 	.word	0x2000ca2c

0801e768 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 801e768:	b580      	push	{r7, lr}
 801e76a:	b084      	sub	sp, #16
 801e76c:	af00      	add	r7, sp, #0
 801e76e:	60f8      	str	r0, [r7, #12]
 801e770:	60b9      	str	r1, [r7, #8]
 801e772:	607a      	str	r2, [r7, #4]
 801e774:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 801e776:	e002      	b.n	801e77e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 801e778:	2001      	movs	r0, #1
 801e77a:	f7e3 f87f 	bl	800187c <HAL_Delay>
	while (w25qxx.Lock == 1)
 801e77e:	4b36      	ldr	r3, [pc, #216]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e780:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 801e784:	2b01      	cmp	r3, #1
 801e786:	d0f7      	beq.n	801e778 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 801e788:	4b33      	ldr	r3, [pc, #204]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e78a:	2201      	movs	r2, #1
 801e78c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 801e790:	4b31      	ldr	r3, [pc, #196]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e792:	895b      	ldrh	r3, [r3, #10]
 801e794:	461a      	mov	r2, r3
 801e796:	683b      	ldr	r3, [r7, #0]
 801e798:	4293      	cmp	r3, r2
 801e79a:	d802      	bhi.n	801e7a2 <W25qxx_ReadPage+0x3a>
 801e79c:	683b      	ldr	r3, [r7, #0]
 801e79e:	2b00      	cmp	r3, #0
 801e7a0:	d102      	bne.n	801e7a8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 801e7a2:	4b2d      	ldr	r3, [pc, #180]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e7a4:	895b      	ldrh	r3, [r3, #10]
 801e7a6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 801e7a8:	687a      	ldr	r2, [r7, #4]
 801e7aa:	683b      	ldr	r3, [r7, #0]
 801e7ac:	4413      	add	r3, r2
 801e7ae:	4a2a      	ldr	r2, [pc, #168]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e7b0:	8952      	ldrh	r2, [r2, #10]
 801e7b2:	4293      	cmp	r3, r2
 801e7b4:	d905      	bls.n	801e7c2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 801e7b6:	4b28      	ldr	r3, [pc, #160]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e7b8:	895b      	ldrh	r3, [r3, #10]
 801e7ba:	461a      	mov	r2, r3
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	1ad3      	subs	r3, r2, r3
 801e7c0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 801e7c2:	4b25      	ldr	r3, [pc, #148]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e7c4:	895b      	ldrh	r3, [r3, #10]
 801e7c6:	461a      	mov	r2, r3
 801e7c8:	68bb      	ldr	r3, [r7, #8]
 801e7ca:	fb02 f303 	mul.w	r3, r2, r3
 801e7ce:	687a      	ldr	r2, [r7, #4]
 801e7d0:	4413      	add	r3, r2
 801e7d2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 801e7d4:	2200      	movs	r2, #0
 801e7d6:	2108      	movs	r1, #8
 801e7d8:	4820      	ldr	r0, [pc, #128]	; (801e85c <W25qxx_ReadPage+0xf4>)
 801e7da:	f7e4 fd4d 	bl	8003278 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 801e7de:	4b1e      	ldr	r3, [pc, #120]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e7e0:	781b      	ldrb	r3, [r3, #0]
 801e7e2:	2b08      	cmp	r3, #8
 801e7e4:	d909      	bls.n	801e7fa <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 801e7e6:	200c      	movs	r0, #12
 801e7e8:	f7ff fc8c 	bl	801e104 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 801e7ec:	68bb      	ldr	r3, [r7, #8]
 801e7ee:	0e1b      	lsrs	r3, r3, #24
 801e7f0:	b2db      	uxtb	r3, r3
 801e7f2:	4618      	mov	r0, r3
 801e7f4:	f7ff fc86 	bl	801e104 <W25qxx_Spi>
 801e7f8:	e002      	b.n	801e800 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 801e7fa:	200b      	movs	r0, #11
 801e7fc:	f7ff fc82 	bl	801e104 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 801e800:	68bb      	ldr	r3, [r7, #8]
 801e802:	0c1b      	lsrs	r3, r3, #16
 801e804:	b2db      	uxtb	r3, r3
 801e806:	4618      	mov	r0, r3
 801e808:	f7ff fc7c 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 801e80c:	68bb      	ldr	r3, [r7, #8]
 801e80e:	0a1b      	lsrs	r3, r3, #8
 801e810:	b2db      	uxtb	r3, r3
 801e812:	4618      	mov	r0, r3
 801e814:	f7ff fc76 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 801e818:	68bb      	ldr	r3, [r7, #8]
 801e81a:	b2db      	uxtb	r3, r3
 801e81c:	4618      	mov	r0, r3
 801e81e:	f7ff fc71 	bl	801e104 <W25qxx_Spi>
	W25qxx_Spi(0);
 801e822:	2000      	movs	r0, #0
 801e824:	f7ff fc6e 	bl	801e104 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 801e828:	683b      	ldr	r3, [r7, #0]
 801e82a:	b29a      	uxth	r2, r3
 801e82c:	2364      	movs	r3, #100	; 0x64
 801e82e:	68f9      	ldr	r1, [r7, #12]
 801e830:	480b      	ldr	r0, [pc, #44]	; (801e860 <W25qxx_ReadPage+0xf8>)
 801e832:	f7e5 fcd5 	bl	80041e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 801e836:	2201      	movs	r2, #1
 801e838:	2108      	movs	r1, #8
 801e83a:	4808      	ldr	r0, [pc, #32]	; (801e85c <W25qxx_ReadPage+0xf4>)
 801e83c:	f7e4 fd1c 	bl	8003278 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 801e840:	2001      	movs	r0, #1
 801e842:	f7e3 f81b 	bl	800187c <HAL_Delay>
	w25qxx.Lock = 0;
 801e846:	4b04      	ldr	r3, [pc, #16]	; (801e858 <W25qxx_ReadPage+0xf0>)
 801e848:	2200      	movs	r2, #0
 801e84a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 801e84e:	bf00      	nop
 801e850:	3710      	adds	r7, #16
 801e852:	46bd      	mov	sp, r7
 801e854:	bd80      	pop	{r7, pc}
 801e856:	bf00      	nop
 801e858:	2000ca2c 	.word	0x2000ca2c
 801e85c:	40021000 	.word	0x40021000
 801e860:	20000560 	.word	0x20000560

0801e864 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 801e864:	b580      	push	{r7, lr}
 801e866:	b088      	sub	sp, #32
 801e868:	af00      	add	r7, sp, #0
 801e86a:	60f8      	str	r0, [r7, #12]
 801e86c:	60b9      	str	r1, [r7, #8]
 801e86e:	607a      	str	r2, [r7, #4]
 801e870:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 801e872:	4b2d      	ldr	r3, [pc, #180]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e874:	691b      	ldr	r3, [r3, #16]
 801e876:	683a      	ldr	r2, [r7, #0]
 801e878:	429a      	cmp	r2, r3
 801e87a:	d802      	bhi.n	801e882 <W25qxx_ReadSector+0x1e>
 801e87c:	683b      	ldr	r3, [r7, #0]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d102      	bne.n	801e888 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 801e882:	4b29      	ldr	r3, [pc, #164]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e884:	691b      	ldr	r3, [r3, #16]
 801e886:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 801e888:	4b27      	ldr	r3, [pc, #156]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e88a:	691b      	ldr	r3, [r3, #16]
 801e88c:	687a      	ldr	r2, [r7, #4]
 801e88e:	429a      	cmp	r2, r3
 801e890:	d301      	bcc.n	801e896 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 801e892:	2300      	movs	r3, #0
 801e894:	e043      	b.n	801e91e <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 801e896:	687a      	ldr	r2, [r7, #4]
 801e898:	683b      	ldr	r3, [r7, #0]
 801e89a:	441a      	add	r2, r3
 801e89c:	4b22      	ldr	r3, [pc, #136]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e89e:	691b      	ldr	r3, [r3, #16]
 801e8a0:	429a      	cmp	r2, r3
 801e8a2:	d905      	bls.n	801e8b0 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 801e8a4:	4b20      	ldr	r3, [pc, #128]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e8a6:	691a      	ldr	r2, [r3, #16]
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	1ad3      	subs	r3, r2, r3
 801e8ac:	61bb      	str	r3, [r7, #24]
 801e8ae:	e001      	b.n	801e8b4 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 801e8b0:	683b      	ldr	r3, [r7, #0]
 801e8b2:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 801e8b4:	68b8      	ldr	r0, [r7, #8]
 801e8b6:	f7ff fe59 	bl	801e56c <W25qxx_SectorToPage>
 801e8ba:	4602      	mov	r2, r0
 801e8bc:	4b1a      	ldr	r3, [pc, #104]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e8be:	895b      	ldrh	r3, [r3, #10]
 801e8c0:	4619      	mov	r1, r3
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	fbb3 f3f1 	udiv	r3, r3, r1
 801e8c8:	4413      	add	r3, r2
 801e8ca:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 801e8cc:	4b16      	ldr	r3, [pc, #88]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e8ce:	895b      	ldrh	r3, [r3, #10]
 801e8d0:	461a      	mov	r2, r3
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	fbb3 f1f2 	udiv	r1, r3, r2
 801e8d8:	fb01 f202 	mul.w	r2, r1, r2
 801e8dc:	1a9b      	subs	r3, r3, r2
 801e8de:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 801e8e0:	69bb      	ldr	r3, [r7, #24]
 801e8e2:	697a      	ldr	r2, [r7, #20]
 801e8e4:	69f9      	ldr	r1, [r7, #28]
 801e8e6:	68f8      	ldr	r0, [r7, #12]
 801e8e8:	f7ff ff3e 	bl	801e768 <W25qxx_ReadPage>
		StartPage++;
 801e8ec:	69fb      	ldr	r3, [r7, #28]
 801e8ee:	3301      	adds	r3, #1
 801e8f0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 801e8f2:	4b0d      	ldr	r3, [pc, #52]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e8f4:	895b      	ldrh	r3, [r3, #10]
 801e8f6:	461a      	mov	r2, r3
 801e8f8:	697b      	ldr	r3, [r7, #20]
 801e8fa:	1a9a      	subs	r2, r3, r2
 801e8fc:	69bb      	ldr	r3, [r7, #24]
 801e8fe:	4413      	add	r3, r2
 801e900:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 801e902:	4b09      	ldr	r3, [pc, #36]	; (801e928 <W25qxx_ReadSector+0xc4>)
 801e904:	895b      	ldrh	r3, [r3, #10]
 801e906:	461a      	mov	r2, r3
 801e908:	697b      	ldr	r3, [r7, #20]
 801e90a:	1ad3      	subs	r3, r2, r3
 801e90c:	68fa      	ldr	r2, [r7, #12]
 801e90e:	4413      	add	r3, r2
 801e910:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 801e912:	2300      	movs	r3, #0
 801e914:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 801e916:	69bb      	ldr	r3, [r7, #24]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	dce1      	bgt.n	801e8e0 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 801e91c:	2301      	movs	r3, #1
}
 801e91e:	4618      	mov	r0, r3
 801e920:	3720      	adds	r7, #32
 801e922:	46bd      	mov	sp, r7
 801e924:	bd80      	pop	{r7, pc}
 801e926:	bf00      	nop
 801e928:	2000ca2c 	.word	0x2000ca2c

0801e92c <__assert_func>:
 801e92c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e92e:	4614      	mov	r4, r2
 801e930:	461a      	mov	r2, r3
 801e932:	4b09      	ldr	r3, [pc, #36]	; (801e958 <__assert_func+0x2c>)
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	4605      	mov	r5, r0
 801e938:	68d8      	ldr	r0, [r3, #12]
 801e93a:	b14c      	cbz	r4, 801e950 <__assert_func+0x24>
 801e93c:	4b07      	ldr	r3, [pc, #28]	; (801e95c <__assert_func+0x30>)
 801e93e:	9100      	str	r1, [sp, #0]
 801e940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e944:	4906      	ldr	r1, [pc, #24]	; (801e960 <__assert_func+0x34>)
 801e946:	462b      	mov	r3, r5
 801e948:	f000 fa3c 	bl	801edc4 <fiprintf>
 801e94c:	f000 fcdd 	bl	801f30a <abort>
 801e950:	4b04      	ldr	r3, [pc, #16]	; (801e964 <__assert_func+0x38>)
 801e952:	461c      	mov	r4, r3
 801e954:	e7f3      	b.n	801e93e <__assert_func+0x12>
 801e956:	bf00      	nop
 801e958:	2000008c 	.word	0x2000008c
 801e95c:	080247a4 	.word	0x080247a4
 801e960:	080247b1 	.word	0x080247b1
 801e964:	080247df 	.word	0x080247df

0801e968 <atoi>:
 801e968:	220a      	movs	r2, #10
 801e96a:	2100      	movs	r1, #0
 801e96c:	f000 b97c 	b.w	801ec68 <strtol>

0801e970 <malloc>:
 801e970:	4b02      	ldr	r3, [pc, #8]	; (801e97c <malloc+0xc>)
 801e972:	4601      	mov	r1, r0
 801e974:	6818      	ldr	r0, [r3, #0]
 801e976:	f000 b82b 	b.w	801e9d0 <_malloc_r>
 801e97a:	bf00      	nop
 801e97c:	2000008c 	.word	0x2000008c

0801e980 <free>:
 801e980:	4b02      	ldr	r3, [pc, #8]	; (801e98c <free+0xc>)
 801e982:	4601      	mov	r1, r0
 801e984:	6818      	ldr	r0, [r3, #0]
 801e986:	f000 bcc7 	b.w	801f318 <_free_r>
 801e98a:	bf00      	nop
 801e98c:	2000008c 	.word	0x2000008c

0801e990 <sbrk_aligned>:
 801e990:	b570      	push	{r4, r5, r6, lr}
 801e992:	4e0e      	ldr	r6, [pc, #56]	; (801e9cc <sbrk_aligned+0x3c>)
 801e994:	460c      	mov	r4, r1
 801e996:	6831      	ldr	r1, [r6, #0]
 801e998:	4605      	mov	r5, r0
 801e99a:	b911      	cbnz	r1, 801e9a2 <sbrk_aligned+0x12>
 801e99c:	f000 fc58 	bl	801f250 <_sbrk_r>
 801e9a0:	6030      	str	r0, [r6, #0]
 801e9a2:	4621      	mov	r1, r4
 801e9a4:	4628      	mov	r0, r5
 801e9a6:	f000 fc53 	bl	801f250 <_sbrk_r>
 801e9aa:	1c43      	adds	r3, r0, #1
 801e9ac:	d00a      	beq.n	801e9c4 <sbrk_aligned+0x34>
 801e9ae:	1cc4      	adds	r4, r0, #3
 801e9b0:	f024 0403 	bic.w	r4, r4, #3
 801e9b4:	42a0      	cmp	r0, r4
 801e9b6:	d007      	beq.n	801e9c8 <sbrk_aligned+0x38>
 801e9b8:	1a21      	subs	r1, r4, r0
 801e9ba:	4628      	mov	r0, r5
 801e9bc:	f000 fc48 	bl	801f250 <_sbrk_r>
 801e9c0:	3001      	adds	r0, #1
 801e9c2:	d101      	bne.n	801e9c8 <sbrk_aligned+0x38>
 801e9c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	bd70      	pop	{r4, r5, r6, pc}
 801e9cc:	2000ca58 	.word	0x2000ca58

0801e9d0 <_malloc_r>:
 801e9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9d4:	1ccd      	adds	r5, r1, #3
 801e9d6:	f025 0503 	bic.w	r5, r5, #3
 801e9da:	3508      	adds	r5, #8
 801e9dc:	2d0c      	cmp	r5, #12
 801e9de:	bf38      	it	cc
 801e9e0:	250c      	movcc	r5, #12
 801e9e2:	2d00      	cmp	r5, #0
 801e9e4:	4607      	mov	r7, r0
 801e9e6:	db01      	blt.n	801e9ec <_malloc_r+0x1c>
 801e9e8:	42a9      	cmp	r1, r5
 801e9ea:	d905      	bls.n	801e9f8 <_malloc_r+0x28>
 801e9ec:	230c      	movs	r3, #12
 801e9ee:	603b      	str	r3, [r7, #0]
 801e9f0:	2600      	movs	r6, #0
 801e9f2:	4630      	mov	r0, r6
 801e9f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801eacc <_malloc_r+0xfc>
 801e9fc:	f000 f868 	bl	801ead0 <__malloc_lock>
 801ea00:	f8d8 3000 	ldr.w	r3, [r8]
 801ea04:	461c      	mov	r4, r3
 801ea06:	bb5c      	cbnz	r4, 801ea60 <_malloc_r+0x90>
 801ea08:	4629      	mov	r1, r5
 801ea0a:	4638      	mov	r0, r7
 801ea0c:	f7ff ffc0 	bl	801e990 <sbrk_aligned>
 801ea10:	1c43      	adds	r3, r0, #1
 801ea12:	4604      	mov	r4, r0
 801ea14:	d155      	bne.n	801eac2 <_malloc_r+0xf2>
 801ea16:	f8d8 4000 	ldr.w	r4, [r8]
 801ea1a:	4626      	mov	r6, r4
 801ea1c:	2e00      	cmp	r6, #0
 801ea1e:	d145      	bne.n	801eaac <_malloc_r+0xdc>
 801ea20:	2c00      	cmp	r4, #0
 801ea22:	d048      	beq.n	801eab6 <_malloc_r+0xe6>
 801ea24:	6823      	ldr	r3, [r4, #0]
 801ea26:	4631      	mov	r1, r6
 801ea28:	4638      	mov	r0, r7
 801ea2a:	eb04 0903 	add.w	r9, r4, r3
 801ea2e:	f000 fc0f 	bl	801f250 <_sbrk_r>
 801ea32:	4581      	cmp	r9, r0
 801ea34:	d13f      	bne.n	801eab6 <_malloc_r+0xe6>
 801ea36:	6821      	ldr	r1, [r4, #0]
 801ea38:	1a6d      	subs	r5, r5, r1
 801ea3a:	4629      	mov	r1, r5
 801ea3c:	4638      	mov	r0, r7
 801ea3e:	f7ff ffa7 	bl	801e990 <sbrk_aligned>
 801ea42:	3001      	adds	r0, #1
 801ea44:	d037      	beq.n	801eab6 <_malloc_r+0xe6>
 801ea46:	6823      	ldr	r3, [r4, #0]
 801ea48:	442b      	add	r3, r5
 801ea4a:	6023      	str	r3, [r4, #0]
 801ea4c:	f8d8 3000 	ldr.w	r3, [r8]
 801ea50:	2b00      	cmp	r3, #0
 801ea52:	d038      	beq.n	801eac6 <_malloc_r+0xf6>
 801ea54:	685a      	ldr	r2, [r3, #4]
 801ea56:	42a2      	cmp	r2, r4
 801ea58:	d12b      	bne.n	801eab2 <_malloc_r+0xe2>
 801ea5a:	2200      	movs	r2, #0
 801ea5c:	605a      	str	r2, [r3, #4]
 801ea5e:	e00f      	b.n	801ea80 <_malloc_r+0xb0>
 801ea60:	6822      	ldr	r2, [r4, #0]
 801ea62:	1b52      	subs	r2, r2, r5
 801ea64:	d41f      	bmi.n	801eaa6 <_malloc_r+0xd6>
 801ea66:	2a0b      	cmp	r2, #11
 801ea68:	d917      	bls.n	801ea9a <_malloc_r+0xca>
 801ea6a:	1961      	adds	r1, r4, r5
 801ea6c:	42a3      	cmp	r3, r4
 801ea6e:	6025      	str	r5, [r4, #0]
 801ea70:	bf18      	it	ne
 801ea72:	6059      	strne	r1, [r3, #4]
 801ea74:	6863      	ldr	r3, [r4, #4]
 801ea76:	bf08      	it	eq
 801ea78:	f8c8 1000 	streq.w	r1, [r8]
 801ea7c:	5162      	str	r2, [r4, r5]
 801ea7e:	604b      	str	r3, [r1, #4]
 801ea80:	4638      	mov	r0, r7
 801ea82:	f104 060b 	add.w	r6, r4, #11
 801ea86:	f000 f829 	bl	801eadc <__malloc_unlock>
 801ea8a:	f026 0607 	bic.w	r6, r6, #7
 801ea8e:	1d23      	adds	r3, r4, #4
 801ea90:	1af2      	subs	r2, r6, r3
 801ea92:	d0ae      	beq.n	801e9f2 <_malloc_r+0x22>
 801ea94:	1b9b      	subs	r3, r3, r6
 801ea96:	50a3      	str	r3, [r4, r2]
 801ea98:	e7ab      	b.n	801e9f2 <_malloc_r+0x22>
 801ea9a:	42a3      	cmp	r3, r4
 801ea9c:	6862      	ldr	r2, [r4, #4]
 801ea9e:	d1dd      	bne.n	801ea5c <_malloc_r+0x8c>
 801eaa0:	f8c8 2000 	str.w	r2, [r8]
 801eaa4:	e7ec      	b.n	801ea80 <_malloc_r+0xb0>
 801eaa6:	4623      	mov	r3, r4
 801eaa8:	6864      	ldr	r4, [r4, #4]
 801eaaa:	e7ac      	b.n	801ea06 <_malloc_r+0x36>
 801eaac:	4634      	mov	r4, r6
 801eaae:	6876      	ldr	r6, [r6, #4]
 801eab0:	e7b4      	b.n	801ea1c <_malloc_r+0x4c>
 801eab2:	4613      	mov	r3, r2
 801eab4:	e7cc      	b.n	801ea50 <_malloc_r+0x80>
 801eab6:	230c      	movs	r3, #12
 801eab8:	603b      	str	r3, [r7, #0]
 801eaba:	4638      	mov	r0, r7
 801eabc:	f000 f80e 	bl	801eadc <__malloc_unlock>
 801eac0:	e797      	b.n	801e9f2 <_malloc_r+0x22>
 801eac2:	6025      	str	r5, [r4, #0]
 801eac4:	e7dc      	b.n	801ea80 <_malloc_r+0xb0>
 801eac6:	605b      	str	r3, [r3, #4]
 801eac8:	deff      	udf	#255	; 0xff
 801eaca:	bf00      	nop
 801eacc:	2000ca54 	.word	0x2000ca54

0801ead0 <__malloc_lock>:
 801ead0:	4801      	ldr	r0, [pc, #4]	; (801ead8 <__malloc_lock+0x8>)
 801ead2:	f000 bc0a 	b.w	801f2ea <__retarget_lock_acquire_recursive>
 801ead6:	bf00      	nop
 801ead8:	2000cb9c 	.word	0x2000cb9c

0801eadc <__malloc_unlock>:
 801eadc:	4801      	ldr	r0, [pc, #4]	; (801eae4 <__malloc_unlock+0x8>)
 801eade:	f000 bc05 	b.w	801f2ec <__retarget_lock_release_recursive>
 801eae2:	bf00      	nop
 801eae4:	2000cb9c 	.word	0x2000cb9c

0801eae8 <rand>:
 801eae8:	4b16      	ldr	r3, [pc, #88]	; (801eb44 <rand+0x5c>)
 801eaea:	b510      	push	{r4, lr}
 801eaec:	681c      	ldr	r4, [r3, #0]
 801eaee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801eaf0:	b9b3      	cbnz	r3, 801eb20 <rand+0x38>
 801eaf2:	2018      	movs	r0, #24
 801eaf4:	f7ff ff3c 	bl	801e970 <malloc>
 801eaf8:	4602      	mov	r2, r0
 801eafa:	6320      	str	r0, [r4, #48]	; 0x30
 801eafc:	b920      	cbnz	r0, 801eb08 <rand+0x20>
 801eafe:	4b12      	ldr	r3, [pc, #72]	; (801eb48 <rand+0x60>)
 801eb00:	4812      	ldr	r0, [pc, #72]	; (801eb4c <rand+0x64>)
 801eb02:	2152      	movs	r1, #82	; 0x52
 801eb04:	f7ff ff12 	bl	801e92c <__assert_func>
 801eb08:	4911      	ldr	r1, [pc, #68]	; (801eb50 <rand+0x68>)
 801eb0a:	4b12      	ldr	r3, [pc, #72]	; (801eb54 <rand+0x6c>)
 801eb0c:	e9c0 1300 	strd	r1, r3, [r0]
 801eb10:	4b11      	ldr	r3, [pc, #68]	; (801eb58 <rand+0x70>)
 801eb12:	6083      	str	r3, [r0, #8]
 801eb14:	230b      	movs	r3, #11
 801eb16:	8183      	strh	r3, [r0, #12]
 801eb18:	2100      	movs	r1, #0
 801eb1a:	2001      	movs	r0, #1
 801eb1c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801eb20:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801eb22:	480e      	ldr	r0, [pc, #56]	; (801eb5c <rand+0x74>)
 801eb24:	690b      	ldr	r3, [r1, #16]
 801eb26:	694c      	ldr	r4, [r1, #20]
 801eb28:	4a0d      	ldr	r2, [pc, #52]	; (801eb60 <rand+0x78>)
 801eb2a:	4358      	muls	r0, r3
 801eb2c:	fb02 0004 	mla	r0, r2, r4, r0
 801eb30:	fba3 3202 	umull	r3, r2, r3, r2
 801eb34:	3301      	adds	r3, #1
 801eb36:	eb40 0002 	adc.w	r0, r0, r2
 801eb3a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801eb3e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801eb42:	bd10      	pop	{r4, pc}
 801eb44:	2000008c 	.word	0x2000008c
 801eb48:	080247e0 	.word	0x080247e0
 801eb4c:	080247f7 	.word	0x080247f7
 801eb50:	abcd330e 	.word	0xabcd330e
 801eb54:	e66d1234 	.word	0xe66d1234
 801eb58:	0005deec 	.word	0x0005deec
 801eb5c:	5851f42d 	.word	0x5851f42d
 801eb60:	4c957f2d 	.word	0x4c957f2d

0801eb64 <_strtol_l.constprop.0>:
 801eb64:	2b01      	cmp	r3, #1
 801eb66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eb6a:	d001      	beq.n	801eb70 <_strtol_l.constprop.0+0xc>
 801eb6c:	2b24      	cmp	r3, #36	; 0x24
 801eb6e:	d906      	bls.n	801eb7e <_strtol_l.constprop.0+0x1a>
 801eb70:	f000 fb90 	bl	801f294 <__errno>
 801eb74:	2316      	movs	r3, #22
 801eb76:	6003      	str	r3, [r0, #0]
 801eb78:	2000      	movs	r0, #0
 801eb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb7e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ec64 <_strtol_l.constprop.0+0x100>
 801eb82:	460d      	mov	r5, r1
 801eb84:	462e      	mov	r6, r5
 801eb86:	f815 4b01 	ldrb.w	r4, [r5], #1
 801eb8a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801eb8e:	f017 0708 	ands.w	r7, r7, #8
 801eb92:	d1f7      	bne.n	801eb84 <_strtol_l.constprop.0+0x20>
 801eb94:	2c2d      	cmp	r4, #45	; 0x2d
 801eb96:	d132      	bne.n	801ebfe <_strtol_l.constprop.0+0x9a>
 801eb98:	782c      	ldrb	r4, [r5, #0]
 801eb9a:	2701      	movs	r7, #1
 801eb9c:	1cb5      	adds	r5, r6, #2
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d05b      	beq.n	801ec5a <_strtol_l.constprop.0+0xf6>
 801eba2:	2b10      	cmp	r3, #16
 801eba4:	d109      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801eba6:	2c30      	cmp	r4, #48	; 0x30
 801eba8:	d107      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801ebaa:	782c      	ldrb	r4, [r5, #0]
 801ebac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ebb0:	2c58      	cmp	r4, #88	; 0x58
 801ebb2:	d14d      	bne.n	801ec50 <_strtol_l.constprop.0+0xec>
 801ebb4:	786c      	ldrb	r4, [r5, #1]
 801ebb6:	2310      	movs	r3, #16
 801ebb8:	3502      	adds	r5, #2
 801ebba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ebbe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801ebc2:	f04f 0e00 	mov.w	lr, #0
 801ebc6:	fbb8 f9f3 	udiv	r9, r8, r3
 801ebca:	4676      	mov	r6, lr
 801ebcc:	fb03 8a19 	mls	sl, r3, r9, r8
 801ebd0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ebd4:	f1bc 0f09 	cmp.w	ip, #9
 801ebd8:	d816      	bhi.n	801ec08 <_strtol_l.constprop.0+0xa4>
 801ebda:	4664      	mov	r4, ip
 801ebdc:	42a3      	cmp	r3, r4
 801ebde:	dd24      	ble.n	801ec2a <_strtol_l.constprop.0+0xc6>
 801ebe0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801ebe4:	d008      	beq.n	801ebf8 <_strtol_l.constprop.0+0x94>
 801ebe6:	45b1      	cmp	r9, r6
 801ebe8:	d31c      	bcc.n	801ec24 <_strtol_l.constprop.0+0xc0>
 801ebea:	d101      	bne.n	801ebf0 <_strtol_l.constprop.0+0x8c>
 801ebec:	45a2      	cmp	sl, r4
 801ebee:	db19      	blt.n	801ec24 <_strtol_l.constprop.0+0xc0>
 801ebf0:	fb06 4603 	mla	r6, r6, r3, r4
 801ebf4:	f04f 0e01 	mov.w	lr, #1
 801ebf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ebfc:	e7e8      	b.n	801ebd0 <_strtol_l.constprop.0+0x6c>
 801ebfe:	2c2b      	cmp	r4, #43	; 0x2b
 801ec00:	bf04      	itt	eq
 801ec02:	782c      	ldrbeq	r4, [r5, #0]
 801ec04:	1cb5      	addeq	r5, r6, #2
 801ec06:	e7ca      	b.n	801eb9e <_strtol_l.constprop.0+0x3a>
 801ec08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801ec0c:	f1bc 0f19 	cmp.w	ip, #25
 801ec10:	d801      	bhi.n	801ec16 <_strtol_l.constprop.0+0xb2>
 801ec12:	3c37      	subs	r4, #55	; 0x37
 801ec14:	e7e2      	b.n	801ebdc <_strtol_l.constprop.0+0x78>
 801ec16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801ec1a:	f1bc 0f19 	cmp.w	ip, #25
 801ec1e:	d804      	bhi.n	801ec2a <_strtol_l.constprop.0+0xc6>
 801ec20:	3c57      	subs	r4, #87	; 0x57
 801ec22:	e7db      	b.n	801ebdc <_strtol_l.constprop.0+0x78>
 801ec24:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 801ec28:	e7e6      	b.n	801ebf8 <_strtol_l.constprop.0+0x94>
 801ec2a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 801ec2e:	d105      	bne.n	801ec3c <_strtol_l.constprop.0+0xd8>
 801ec30:	2322      	movs	r3, #34	; 0x22
 801ec32:	6003      	str	r3, [r0, #0]
 801ec34:	4646      	mov	r6, r8
 801ec36:	b942      	cbnz	r2, 801ec4a <_strtol_l.constprop.0+0xe6>
 801ec38:	4630      	mov	r0, r6
 801ec3a:	e79e      	b.n	801eb7a <_strtol_l.constprop.0+0x16>
 801ec3c:	b107      	cbz	r7, 801ec40 <_strtol_l.constprop.0+0xdc>
 801ec3e:	4276      	negs	r6, r6
 801ec40:	2a00      	cmp	r2, #0
 801ec42:	d0f9      	beq.n	801ec38 <_strtol_l.constprop.0+0xd4>
 801ec44:	f1be 0f00 	cmp.w	lr, #0
 801ec48:	d000      	beq.n	801ec4c <_strtol_l.constprop.0+0xe8>
 801ec4a:	1e69      	subs	r1, r5, #1
 801ec4c:	6011      	str	r1, [r2, #0]
 801ec4e:	e7f3      	b.n	801ec38 <_strtol_l.constprop.0+0xd4>
 801ec50:	2430      	movs	r4, #48	; 0x30
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d1b1      	bne.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec56:	2308      	movs	r3, #8
 801ec58:	e7af      	b.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec5a:	2c30      	cmp	r4, #48	; 0x30
 801ec5c:	d0a5      	beq.n	801ebaa <_strtol_l.constprop.0+0x46>
 801ec5e:	230a      	movs	r3, #10
 801ec60:	e7ab      	b.n	801ebba <_strtol_l.constprop.0+0x56>
 801ec62:	bf00      	nop
 801ec64:	08024850 	.word	0x08024850

0801ec68 <strtol>:
 801ec68:	4613      	mov	r3, r2
 801ec6a:	460a      	mov	r2, r1
 801ec6c:	4601      	mov	r1, r0
 801ec6e:	4802      	ldr	r0, [pc, #8]	; (801ec78 <strtol+0x10>)
 801ec70:	6800      	ldr	r0, [r0, #0]
 801ec72:	f7ff bf77 	b.w	801eb64 <_strtol_l.constprop.0>
 801ec76:	bf00      	nop
 801ec78:	2000008c 	.word	0x2000008c

0801ec7c <std>:
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	b510      	push	{r4, lr}
 801ec80:	4604      	mov	r4, r0
 801ec82:	e9c0 3300 	strd	r3, r3, [r0]
 801ec86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ec8a:	6083      	str	r3, [r0, #8]
 801ec8c:	8181      	strh	r1, [r0, #12]
 801ec8e:	6643      	str	r3, [r0, #100]	; 0x64
 801ec90:	81c2      	strh	r2, [r0, #14]
 801ec92:	6183      	str	r3, [r0, #24]
 801ec94:	4619      	mov	r1, r3
 801ec96:	2208      	movs	r2, #8
 801ec98:	305c      	adds	r0, #92	; 0x5c
 801ec9a:	f000 fa19 	bl	801f0d0 <memset>
 801ec9e:	4b0d      	ldr	r3, [pc, #52]	; (801ecd4 <std+0x58>)
 801eca0:	6263      	str	r3, [r4, #36]	; 0x24
 801eca2:	4b0d      	ldr	r3, [pc, #52]	; (801ecd8 <std+0x5c>)
 801eca4:	62a3      	str	r3, [r4, #40]	; 0x28
 801eca6:	4b0d      	ldr	r3, [pc, #52]	; (801ecdc <std+0x60>)
 801eca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ecaa:	4b0d      	ldr	r3, [pc, #52]	; (801ece0 <std+0x64>)
 801ecac:	6323      	str	r3, [r4, #48]	; 0x30
 801ecae:	4b0d      	ldr	r3, [pc, #52]	; (801ece4 <std+0x68>)
 801ecb0:	6224      	str	r4, [r4, #32]
 801ecb2:	429c      	cmp	r4, r3
 801ecb4:	d006      	beq.n	801ecc4 <std+0x48>
 801ecb6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801ecba:	4294      	cmp	r4, r2
 801ecbc:	d002      	beq.n	801ecc4 <std+0x48>
 801ecbe:	33d0      	adds	r3, #208	; 0xd0
 801ecc0:	429c      	cmp	r4, r3
 801ecc2:	d105      	bne.n	801ecd0 <std+0x54>
 801ecc4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ecc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eccc:	f000 bb0c 	b.w	801f2e8 <__retarget_lock_init_recursive>
 801ecd0:	bd10      	pop	{r4, pc}
 801ecd2:	bf00      	nop
 801ecd4:	0801ef01 	.word	0x0801ef01
 801ecd8:	0801ef23 	.word	0x0801ef23
 801ecdc:	0801ef5b 	.word	0x0801ef5b
 801ece0:	0801ef7f 	.word	0x0801ef7f
 801ece4:	2000ca5c 	.word	0x2000ca5c

0801ece8 <stdio_exit_handler>:
 801ece8:	4a02      	ldr	r2, [pc, #8]	; (801ecf4 <stdio_exit_handler+0xc>)
 801ecea:	4903      	ldr	r1, [pc, #12]	; (801ecf8 <stdio_exit_handler+0x10>)
 801ecec:	4803      	ldr	r0, [pc, #12]	; (801ecfc <stdio_exit_handler+0x14>)
 801ecee:	f000 b87b 	b.w	801ede8 <_fwalk_sglue>
 801ecf2:	bf00      	nop
 801ecf4:	20000034 	.word	0x20000034
 801ecf8:	0801fa65 	.word	0x0801fa65
 801ecfc:	20000040 	.word	0x20000040

0801ed00 <cleanup_stdio>:
 801ed00:	6841      	ldr	r1, [r0, #4]
 801ed02:	4b0c      	ldr	r3, [pc, #48]	; (801ed34 <cleanup_stdio+0x34>)
 801ed04:	4299      	cmp	r1, r3
 801ed06:	b510      	push	{r4, lr}
 801ed08:	4604      	mov	r4, r0
 801ed0a:	d001      	beq.n	801ed10 <cleanup_stdio+0x10>
 801ed0c:	f000 feaa 	bl	801fa64 <_fflush_r>
 801ed10:	68a1      	ldr	r1, [r4, #8]
 801ed12:	4b09      	ldr	r3, [pc, #36]	; (801ed38 <cleanup_stdio+0x38>)
 801ed14:	4299      	cmp	r1, r3
 801ed16:	d002      	beq.n	801ed1e <cleanup_stdio+0x1e>
 801ed18:	4620      	mov	r0, r4
 801ed1a:	f000 fea3 	bl	801fa64 <_fflush_r>
 801ed1e:	68e1      	ldr	r1, [r4, #12]
 801ed20:	4b06      	ldr	r3, [pc, #24]	; (801ed3c <cleanup_stdio+0x3c>)
 801ed22:	4299      	cmp	r1, r3
 801ed24:	d004      	beq.n	801ed30 <cleanup_stdio+0x30>
 801ed26:	4620      	mov	r0, r4
 801ed28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed2c:	f000 be9a 	b.w	801fa64 <_fflush_r>
 801ed30:	bd10      	pop	{r4, pc}
 801ed32:	bf00      	nop
 801ed34:	2000ca5c 	.word	0x2000ca5c
 801ed38:	2000cac4 	.word	0x2000cac4
 801ed3c:	2000cb2c 	.word	0x2000cb2c

0801ed40 <global_stdio_init.part.0>:
 801ed40:	b510      	push	{r4, lr}
 801ed42:	4b0b      	ldr	r3, [pc, #44]	; (801ed70 <global_stdio_init.part.0+0x30>)
 801ed44:	4c0b      	ldr	r4, [pc, #44]	; (801ed74 <global_stdio_init.part.0+0x34>)
 801ed46:	4a0c      	ldr	r2, [pc, #48]	; (801ed78 <global_stdio_init.part.0+0x38>)
 801ed48:	601a      	str	r2, [r3, #0]
 801ed4a:	4620      	mov	r0, r4
 801ed4c:	2200      	movs	r2, #0
 801ed4e:	2104      	movs	r1, #4
 801ed50:	f7ff ff94 	bl	801ec7c <std>
 801ed54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ed58:	2201      	movs	r2, #1
 801ed5a:	2109      	movs	r1, #9
 801ed5c:	f7ff ff8e 	bl	801ec7c <std>
 801ed60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801ed64:	2202      	movs	r2, #2
 801ed66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ed6a:	2112      	movs	r1, #18
 801ed6c:	f7ff bf86 	b.w	801ec7c <std>
 801ed70:	2000cb94 	.word	0x2000cb94
 801ed74:	2000ca5c 	.word	0x2000ca5c
 801ed78:	0801ece9 	.word	0x0801ece9

0801ed7c <__sfp_lock_acquire>:
 801ed7c:	4801      	ldr	r0, [pc, #4]	; (801ed84 <__sfp_lock_acquire+0x8>)
 801ed7e:	f000 bab4 	b.w	801f2ea <__retarget_lock_acquire_recursive>
 801ed82:	bf00      	nop
 801ed84:	2000cb9d 	.word	0x2000cb9d

0801ed88 <__sfp_lock_release>:
 801ed88:	4801      	ldr	r0, [pc, #4]	; (801ed90 <__sfp_lock_release+0x8>)
 801ed8a:	f000 baaf 	b.w	801f2ec <__retarget_lock_release_recursive>
 801ed8e:	bf00      	nop
 801ed90:	2000cb9d 	.word	0x2000cb9d

0801ed94 <__sinit>:
 801ed94:	b510      	push	{r4, lr}
 801ed96:	4604      	mov	r4, r0
 801ed98:	f7ff fff0 	bl	801ed7c <__sfp_lock_acquire>
 801ed9c:	6a23      	ldr	r3, [r4, #32]
 801ed9e:	b11b      	cbz	r3, 801eda8 <__sinit+0x14>
 801eda0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eda4:	f7ff bff0 	b.w	801ed88 <__sfp_lock_release>
 801eda8:	4b04      	ldr	r3, [pc, #16]	; (801edbc <__sinit+0x28>)
 801edaa:	6223      	str	r3, [r4, #32]
 801edac:	4b04      	ldr	r3, [pc, #16]	; (801edc0 <__sinit+0x2c>)
 801edae:	681b      	ldr	r3, [r3, #0]
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d1f5      	bne.n	801eda0 <__sinit+0xc>
 801edb4:	f7ff ffc4 	bl	801ed40 <global_stdio_init.part.0>
 801edb8:	e7f2      	b.n	801eda0 <__sinit+0xc>
 801edba:	bf00      	nop
 801edbc:	0801ed01 	.word	0x0801ed01
 801edc0:	2000cb94 	.word	0x2000cb94

0801edc4 <fiprintf>:
 801edc4:	b40e      	push	{r1, r2, r3}
 801edc6:	b503      	push	{r0, r1, lr}
 801edc8:	4601      	mov	r1, r0
 801edca:	ab03      	add	r3, sp, #12
 801edcc:	4805      	ldr	r0, [pc, #20]	; (801ede4 <fiprintf+0x20>)
 801edce:	f853 2b04 	ldr.w	r2, [r3], #4
 801edd2:	6800      	ldr	r0, [r0, #0]
 801edd4:	9301      	str	r3, [sp, #4]
 801edd6:	f000 fb15 	bl	801f404 <_vfiprintf_r>
 801edda:	b002      	add	sp, #8
 801eddc:	f85d eb04 	ldr.w	lr, [sp], #4
 801ede0:	b003      	add	sp, #12
 801ede2:	4770      	bx	lr
 801ede4:	2000008c 	.word	0x2000008c

0801ede8 <_fwalk_sglue>:
 801ede8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edec:	4607      	mov	r7, r0
 801edee:	4688      	mov	r8, r1
 801edf0:	4614      	mov	r4, r2
 801edf2:	2600      	movs	r6, #0
 801edf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801edf8:	f1b9 0901 	subs.w	r9, r9, #1
 801edfc:	d505      	bpl.n	801ee0a <_fwalk_sglue+0x22>
 801edfe:	6824      	ldr	r4, [r4, #0]
 801ee00:	2c00      	cmp	r4, #0
 801ee02:	d1f7      	bne.n	801edf4 <_fwalk_sglue+0xc>
 801ee04:	4630      	mov	r0, r6
 801ee06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee0a:	89ab      	ldrh	r3, [r5, #12]
 801ee0c:	2b01      	cmp	r3, #1
 801ee0e:	d907      	bls.n	801ee20 <_fwalk_sglue+0x38>
 801ee10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ee14:	3301      	adds	r3, #1
 801ee16:	d003      	beq.n	801ee20 <_fwalk_sglue+0x38>
 801ee18:	4629      	mov	r1, r5
 801ee1a:	4638      	mov	r0, r7
 801ee1c:	47c0      	blx	r8
 801ee1e:	4306      	orrs	r6, r0
 801ee20:	3568      	adds	r5, #104	; 0x68
 801ee22:	e7e9      	b.n	801edf8 <_fwalk_sglue+0x10>

0801ee24 <iprintf>:
 801ee24:	b40f      	push	{r0, r1, r2, r3}
 801ee26:	b507      	push	{r0, r1, r2, lr}
 801ee28:	4906      	ldr	r1, [pc, #24]	; (801ee44 <iprintf+0x20>)
 801ee2a:	ab04      	add	r3, sp, #16
 801ee2c:	6808      	ldr	r0, [r1, #0]
 801ee2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee32:	6881      	ldr	r1, [r0, #8]
 801ee34:	9301      	str	r3, [sp, #4]
 801ee36:	f000 fae5 	bl	801f404 <_vfiprintf_r>
 801ee3a:	b003      	add	sp, #12
 801ee3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee40:	b004      	add	sp, #16
 801ee42:	4770      	bx	lr
 801ee44:	2000008c 	.word	0x2000008c

0801ee48 <_puts_r>:
 801ee48:	6a03      	ldr	r3, [r0, #32]
 801ee4a:	b570      	push	{r4, r5, r6, lr}
 801ee4c:	6884      	ldr	r4, [r0, #8]
 801ee4e:	4605      	mov	r5, r0
 801ee50:	460e      	mov	r6, r1
 801ee52:	b90b      	cbnz	r3, 801ee58 <_puts_r+0x10>
 801ee54:	f7ff ff9e 	bl	801ed94 <__sinit>
 801ee58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ee5a:	07db      	lsls	r3, r3, #31
 801ee5c:	d405      	bmi.n	801ee6a <_puts_r+0x22>
 801ee5e:	89a3      	ldrh	r3, [r4, #12]
 801ee60:	0598      	lsls	r0, r3, #22
 801ee62:	d402      	bmi.n	801ee6a <_puts_r+0x22>
 801ee64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ee66:	f000 fa40 	bl	801f2ea <__retarget_lock_acquire_recursive>
 801ee6a:	89a3      	ldrh	r3, [r4, #12]
 801ee6c:	0719      	lsls	r1, r3, #28
 801ee6e:	d513      	bpl.n	801ee98 <_puts_r+0x50>
 801ee70:	6923      	ldr	r3, [r4, #16]
 801ee72:	b18b      	cbz	r3, 801ee98 <_puts_r+0x50>
 801ee74:	3e01      	subs	r6, #1
 801ee76:	68a3      	ldr	r3, [r4, #8]
 801ee78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ee7c:	3b01      	subs	r3, #1
 801ee7e:	60a3      	str	r3, [r4, #8]
 801ee80:	b9e9      	cbnz	r1, 801eebe <_puts_r+0x76>
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	da2e      	bge.n	801eee4 <_puts_r+0x9c>
 801ee86:	4622      	mov	r2, r4
 801ee88:	210a      	movs	r1, #10
 801ee8a:	4628      	mov	r0, r5
 801ee8c:	f000 f87b 	bl	801ef86 <__swbuf_r>
 801ee90:	3001      	adds	r0, #1
 801ee92:	d007      	beq.n	801eea4 <_puts_r+0x5c>
 801ee94:	250a      	movs	r5, #10
 801ee96:	e007      	b.n	801eea8 <_puts_r+0x60>
 801ee98:	4621      	mov	r1, r4
 801ee9a:	4628      	mov	r0, r5
 801ee9c:	f000 f8b0 	bl	801f000 <__swsetup_r>
 801eea0:	2800      	cmp	r0, #0
 801eea2:	d0e7      	beq.n	801ee74 <_puts_r+0x2c>
 801eea4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801eea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eeaa:	07da      	lsls	r2, r3, #31
 801eeac:	d405      	bmi.n	801eeba <_puts_r+0x72>
 801eeae:	89a3      	ldrh	r3, [r4, #12]
 801eeb0:	059b      	lsls	r3, r3, #22
 801eeb2:	d402      	bmi.n	801eeba <_puts_r+0x72>
 801eeb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eeb6:	f000 fa19 	bl	801f2ec <__retarget_lock_release_recursive>
 801eeba:	4628      	mov	r0, r5
 801eebc:	bd70      	pop	{r4, r5, r6, pc}
 801eebe:	2b00      	cmp	r3, #0
 801eec0:	da04      	bge.n	801eecc <_puts_r+0x84>
 801eec2:	69a2      	ldr	r2, [r4, #24]
 801eec4:	429a      	cmp	r2, r3
 801eec6:	dc06      	bgt.n	801eed6 <_puts_r+0x8e>
 801eec8:	290a      	cmp	r1, #10
 801eeca:	d004      	beq.n	801eed6 <_puts_r+0x8e>
 801eecc:	6823      	ldr	r3, [r4, #0]
 801eece:	1c5a      	adds	r2, r3, #1
 801eed0:	6022      	str	r2, [r4, #0]
 801eed2:	7019      	strb	r1, [r3, #0]
 801eed4:	e7cf      	b.n	801ee76 <_puts_r+0x2e>
 801eed6:	4622      	mov	r2, r4
 801eed8:	4628      	mov	r0, r5
 801eeda:	f000 f854 	bl	801ef86 <__swbuf_r>
 801eede:	3001      	adds	r0, #1
 801eee0:	d1c9      	bne.n	801ee76 <_puts_r+0x2e>
 801eee2:	e7df      	b.n	801eea4 <_puts_r+0x5c>
 801eee4:	6823      	ldr	r3, [r4, #0]
 801eee6:	250a      	movs	r5, #10
 801eee8:	1c5a      	adds	r2, r3, #1
 801eeea:	6022      	str	r2, [r4, #0]
 801eeec:	701d      	strb	r5, [r3, #0]
 801eeee:	e7db      	b.n	801eea8 <_puts_r+0x60>

0801eef0 <puts>:
 801eef0:	4b02      	ldr	r3, [pc, #8]	; (801eefc <puts+0xc>)
 801eef2:	4601      	mov	r1, r0
 801eef4:	6818      	ldr	r0, [r3, #0]
 801eef6:	f7ff bfa7 	b.w	801ee48 <_puts_r>
 801eefa:	bf00      	nop
 801eefc:	2000008c 	.word	0x2000008c

0801ef00 <__sread>:
 801ef00:	b510      	push	{r4, lr}
 801ef02:	460c      	mov	r4, r1
 801ef04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef08:	f000 f990 	bl	801f22c <_read_r>
 801ef0c:	2800      	cmp	r0, #0
 801ef0e:	bfab      	itete	ge
 801ef10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ef12:	89a3      	ldrhlt	r3, [r4, #12]
 801ef14:	181b      	addge	r3, r3, r0
 801ef16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ef1a:	bfac      	ite	ge
 801ef1c:	6563      	strge	r3, [r4, #84]	; 0x54
 801ef1e:	81a3      	strhlt	r3, [r4, #12]
 801ef20:	bd10      	pop	{r4, pc}

0801ef22 <__swrite>:
 801ef22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ef26:	461f      	mov	r7, r3
 801ef28:	898b      	ldrh	r3, [r1, #12]
 801ef2a:	05db      	lsls	r3, r3, #23
 801ef2c:	4605      	mov	r5, r0
 801ef2e:	460c      	mov	r4, r1
 801ef30:	4616      	mov	r6, r2
 801ef32:	d505      	bpl.n	801ef40 <__swrite+0x1e>
 801ef34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef38:	2302      	movs	r3, #2
 801ef3a:	2200      	movs	r2, #0
 801ef3c:	f000 f964 	bl	801f208 <_lseek_r>
 801ef40:	89a3      	ldrh	r3, [r4, #12]
 801ef42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ef4a:	81a3      	strh	r3, [r4, #12]
 801ef4c:	4632      	mov	r2, r6
 801ef4e:	463b      	mov	r3, r7
 801ef50:	4628      	mov	r0, r5
 801ef52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ef56:	f000 b98b 	b.w	801f270 <_write_r>

0801ef5a <__sseek>:
 801ef5a:	b510      	push	{r4, lr}
 801ef5c:	460c      	mov	r4, r1
 801ef5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef62:	f000 f951 	bl	801f208 <_lseek_r>
 801ef66:	1c43      	adds	r3, r0, #1
 801ef68:	89a3      	ldrh	r3, [r4, #12]
 801ef6a:	bf15      	itete	ne
 801ef6c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ef6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ef72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ef76:	81a3      	strheq	r3, [r4, #12]
 801ef78:	bf18      	it	ne
 801ef7a:	81a3      	strhne	r3, [r4, #12]
 801ef7c:	bd10      	pop	{r4, pc}

0801ef7e <__sclose>:
 801ef7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ef82:	f000 b8db 	b.w	801f13c <_close_r>

0801ef86 <__swbuf_r>:
 801ef86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef88:	460e      	mov	r6, r1
 801ef8a:	4614      	mov	r4, r2
 801ef8c:	4605      	mov	r5, r0
 801ef8e:	b118      	cbz	r0, 801ef98 <__swbuf_r+0x12>
 801ef90:	6a03      	ldr	r3, [r0, #32]
 801ef92:	b90b      	cbnz	r3, 801ef98 <__swbuf_r+0x12>
 801ef94:	f7ff fefe 	bl	801ed94 <__sinit>
 801ef98:	69a3      	ldr	r3, [r4, #24]
 801ef9a:	60a3      	str	r3, [r4, #8]
 801ef9c:	89a3      	ldrh	r3, [r4, #12]
 801ef9e:	071a      	lsls	r2, r3, #28
 801efa0:	d525      	bpl.n	801efee <__swbuf_r+0x68>
 801efa2:	6923      	ldr	r3, [r4, #16]
 801efa4:	b31b      	cbz	r3, 801efee <__swbuf_r+0x68>
 801efa6:	6823      	ldr	r3, [r4, #0]
 801efa8:	6922      	ldr	r2, [r4, #16]
 801efaa:	1a98      	subs	r0, r3, r2
 801efac:	6963      	ldr	r3, [r4, #20]
 801efae:	b2f6      	uxtb	r6, r6
 801efb0:	4283      	cmp	r3, r0
 801efb2:	4637      	mov	r7, r6
 801efb4:	dc04      	bgt.n	801efc0 <__swbuf_r+0x3a>
 801efb6:	4621      	mov	r1, r4
 801efb8:	4628      	mov	r0, r5
 801efba:	f000 fd53 	bl	801fa64 <_fflush_r>
 801efbe:	b9e0      	cbnz	r0, 801effa <__swbuf_r+0x74>
 801efc0:	68a3      	ldr	r3, [r4, #8]
 801efc2:	3b01      	subs	r3, #1
 801efc4:	60a3      	str	r3, [r4, #8]
 801efc6:	6823      	ldr	r3, [r4, #0]
 801efc8:	1c5a      	adds	r2, r3, #1
 801efca:	6022      	str	r2, [r4, #0]
 801efcc:	701e      	strb	r6, [r3, #0]
 801efce:	6962      	ldr	r2, [r4, #20]
 801efd0:	1c43      	adds	r3, r0, #1
 801efd2:	429a      	cmp	r2, r3
 801efd4:	d004      	beq.n	801efe0 <__swbuf_r+0x5a>
 801efd6:	89a3      	ldrh	r3, [r4, #12]
 801efd8:	07db      	lsls	r3, r3, #31
 801efda:	d506      	bpl.n	801efea <__swbuf_r+0x64>
 801efdc:	2e0a      	cmp	r6, #10
 801efde:	d104      	bne.n	801efea <__swbuf_r+0x64>
 801efe0:	4621      	mov	r1, r4
 801efe2:	4628      	mov	r0, r5
 801efe4:	f000 fd3e 	bl	801fa64 <_fflush_r>
 801efe8:	b938      	cbnz	r0, 801effa <__swbuf_r+0x74>
 801efea:	4638      	mov	r0, r7
 801efec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801efee:	4621      	mov	r1, r4
 801eff0:	4628      	mov	r0, r5
 801eff2:	f000 f805 	bl	801f000 <__swsetup_r>
 801eff6:	2800      	cmp	r0, #0
 801eff8:	d0d5      	beq.n	801efa6 <__swbuf_r+0x20>
 801effa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801effe:	e7f4      	b.n	801efea <__swbuf_r+0x64>

0801f000 <__swsetup_r>:
 801f000:	b538      	push	{r3, r4, r5, lr}
 801f002:	4b2a      	ldr	r3, [pc, #168]	; (801f0ac <__swsetup_r+0xac>)
 801f004:	4605      	mov	r5, r0
 801f006:	6818      	ldr	r0, [r3, #0]
 801f008:	460c      	mov	r4, r1
 801f00a:	b118      	cbz	r0, 801f014 <__swsetup_r+0x14>
 801f00c:	6a03      	ldr	r3, [r0, #32]
 801f00e:	b90b      	cbnz	r3, 801f014 <__swsetup_r+0x14>
 801f010:	f7ff fec0 	bl	801ed94 <__sinit>
 801f014:	89a3      	ldrh	r3, [r4, #12]
 801f016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f01a:	0718      	lsls	r0, r3, #28
 801f01c:	d422      	bmi.n	801f064 <__swsetup_r+0x64>
 801f01e:	06d9      	lsls	r1, r3, #27
 801f020:	d407      	bmi.n	801f032 <__swsetup_r+0x32>
 801f022:	2309      	movs	r3, #9
 801f024:	602b      	str	r3, [r5, #0]
 801f026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f02a:	81a3      	strh	r3, [r4, #12]
 801f02c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f030:	e034      	b.n	801f09c <__swsetup_r+0x9c>
 801f032:	0758      	lsls	r0, r3, #29
 801f034:	d512      	bpl.n	801f05c <__swsetup_r+0x5c>
 801f036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f038:	b141      	cbz	r1, 801f04c <__swsetup_r+0x4c>
 801f03a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f03e:	4299      	cmp	r1, r3
 801f040:	d002      	beq.n	801f048 <__swsetup_r+0x48>
 801f042:	4628      	mov	r0, r5
 801f044:	f000 f968 	bl	801f318 <_free_r>
 801f048:	2300      	movs	r3, #0
 801f04a:	6363      	str	r3, [r4, #52]	; 0x34
 801f04c:	89a3      	ldrh	r3, [r4, #12]
 801f04e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f052:	81a3      	strh	r3, [r4, #12]
 801f054:	2300      	movs	r3, #0
 801f056:	6063      	str	r3, [r4, #4]
 801f058:	6923      	ldr	r3, [r4, #16]
 801f05a:	6023      	str	r3, [r4, #0]
 801f05c:	89a3      	ldrh	r3, [r4, #12]
 801f05e:	f043 0308 	orr.w	r3, r3, #8
 801f062:	81a3      	strh	r3, [r4, #12]
 801f064:	6923      	ldr	r3, [r4, #16]
 801f066:	b94b      	cbnz	r3, 801f07c <__swsetup_r+0x7c>
 801f068:	89a3      	ldrh	r3, [r4, #12]
 801f06a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f072:	d003      	beq.n	801f07c <__swsetup_r+0x7c>
 801f074:	4621      	mov	r1, r4
 801f076:	4628      	mov	r0, r5
 801f078:	f000 fd42 	bl	801fb00 <__smakebuf_r>
 801f07c:	89a0      	ldrh	r0, [r4, #12]
 801f07e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f082:	f010 0301 	ands.w	r3, r0, #1
 801f086:	d00a      	beq.n	801f09e <__swsetup_r+0x9e>
 801f088:	2300      	movs	r3, #0
 801f08a:	60a3      	str	r3, [r4, #8]
 801f08c:	6963      	ldr	r3, [r4, #20]
 801f08e:	425b      	negs	r3, r3
 801f090:	61a3      	str	r3, [r4, #24]
 801f092:	6923      	ldr	r3, [r4, #16]
 801f094:	b943      	cbnz	r3, 801f0a8 <__swsetup_r+0xa8>
 801f096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f09a:	d1c4      	bne.n	801f026 <__swsetup_r+0x26>
 801f09c:	bd38      	pop	{r3, r4, r5, pc}
 801f09e:	0781      	lsls	r1, r0, #30
 801f0a0:	bf58      	it	pl
 801f0a2:	6963      	ldrpl	r3, [r4, #20]
 801f0a4:	60a3      	str	r3, [r4, #8]
 801f0a6:	e7f4      	b.n	801f092 <__swsetup_r+0x92>
 801f0a8:	2000      	movs	r0, #0
 801f0aa:	e7f7      	b.n	801f09c <__swsetup_r+0x9c>
 801f0ac:	2000008c 	.word	0x2000008c

0801f0b0 <memcmp>:
 801f0b0:	b510      	push	{r4, lr}
 801f0b2:	3901      	subs	r1, #1
 801f0b4:	4402      	add	r2, r0
 801f0b6:	4290      	cmp	r0, r2
 801f0b8:	d101      	bne.n	801f0be <memcmp+0xe>
 801f0ba:	2000      	movs	r0, #0
 801f0bc:	e005      	b.n	801f0ca <memcmp+0x1a>
 801f0be:	7803      	ldrb	r3, [r0, #0]
 801f0c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f0c4:	42a3      	cmp	r3, r4
 801f0c6:	d001      	beq.n	801f0cc <memcmp+0x1c>
 801f0c8:	1b18      	subs	r0, r3, r4
 801f0ca:	bd10      	pop	{r4, pc}
 801f0cc:	3001      	adds	r0, #1
 801f0ce:	e7f2      	b.n	801f0b6 <memcmp+0x6>

0801f0d0 <memset>:
 801f0d0:	4402      	add	r2, r0
 801f0d2:	4603      	mov	r3, r0
 801f0d4:	4293      	cmp	r3, r2
 801f0d6:	d100      	bne.n	801f0da <memset+0xa>
 801f0d8:	4770      	bx	lr
 801f0da:	f803 1b01 	strb.w	r1, [r3], #1
 801f0de:	e7f9      	b.n	801f0d4 <memset+0x4>

0801f0e0 <strchr>:
 801f0e0:	b2c9      	uxtb	r1, r1
 801f0e2:	4603      	mov	r3, r0
 801f0e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f0e8:	b11a      	cbz	r2, 801f0f2 <strchr+0x12>
 801f0ea:	428a      	cmp	r2, r1
 801f0ec:	d1f9      	bne.n	801f0e2 <strchr+0x2>
 801f0ee:	4618      	mov	r0, r3
 801f0f0:	4770      	bx	lr
 801f0f2:	2900      	cmp	r1, #0
 801f0f4:	bf18      	it	ne
 801f0f6:	2300      	movne	r3, #0
 801f0f8:	e7f9      	b.n	801f0ee <strchr+0xe>

0801f0fa <strcspn>:
 801f0fa:	b570      	push	{r4, r5, r6, lr}
 801f0fc:	4603      	mov	r3, r0
 801f0fe:	461e      	mov	r6, r3
 801f100:	f813 4b01 	ldrb.w	r4, [r3], #1
 801f104:	b144      	cbz	r4, 801f118 <strcspn+0x1e>
 801f106:	1e4a      	subs	r2, r1, #1
 801f108:	e001      	b.n	801f10e <strcspn+0x14>
 801f10a:	42a5      	cmp	r5, r4
 801f10c:	d004      	beq.n	801f118 <strcspn+0x1e>
 801f10e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801f112:	2d00      	cmp	r5, #0
 801f114:	d1f9      	bne.n	801f10a <strcspn+0x10>
 801f116:	e7f2      	b.n	801f0fe <strcspn+0x4>
 801f118:	1a30      	subs	r0, r6, r0
 801f11a:	bd70      	pop	{r4, r5, r6, pc}

0801f11c <strspn>:
 801f11c:	b570      	push	{r4, r5, r6, lr}
 801f11e:	4603      	mov	r3, r0
 801f120:	461e      	mov	r6, r3
 801f122:	f813 4b01 	ldrb.w	r4, [r3], #1
 801f126:	b13c      	cbz	r4, 801f138 <strspn+0x1c>
 801f128:	1e4a      	subs	r2, r1, #1
 801f12a:	e001      	b.n	801f130 <strspn+0x14>
 801f12c:	42a5      	cmp	r5, r4
 801f12e:	d0f7      	beq.n	801f120 <strspn+0x4>
 801f130:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 801f134:	2d00      	cmp	r5, #0
 801f136:	d1f9      	bne.n	801f12c <strspn+0x10>
 801f138:	1a30      	subs	r0, r6, r0
 801f13a:	bd70      	pop	{r4, r5, r6, pc}

0801f13c <_close_r>:
 801f13c:	b538      	push	{r3, r4, r5, lr}
 801f13e:	4d06      	ldr	r5, [pc, #24]	; (801f158 <_close_r+0x1c>)
 801f140:	2300      	movs	r3, #0
 801f142:	4604      	mov	r4, r0
 801f144:	4608      	mov	r0, r1
 801f146:	602b      	str	r3, [r5, #0]
 801f148:	f7e2 f8db 	bl	8001302 <_close>
 801f14c:	1c43      	adds	r3, r0, #1
 801f14e:	d102      	bne.n	801f156 <_close_r+0x1a>
 801f150:	682b      	ldr	r3, [r5, #0]
 801f152:	b103      	cbz	r3, 801f156 <_close_r+0x1a>
 801f154:	6023      	str	r3, [r4, #0]
 801f156:	bd38      	pop	{r3, r4, r5, pc}
 801f158:	2000cb98 	.word	0x2000cb98

0801f15c <_reclaim_reent>:
 801f15c:	4b29      	ldr	r3, [pc, #164]	; (801f204 <_reclaim_reent+0xa8>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	4283      	cmp	r3, r0
 801f162:	b570      	push	{r4, r5, r6, lr}
 801f164:	4604      	mov	r4, r0
 801f166:	d04b      	beq.n	801f200 <_reclaim_reent+0xa4>
 801f168:	69c3      	ldr	r3, [r0, #28]
 801f16a:	b143      	cbz	r3, 801f17e <_reclaim_reent+0x22>
 801f16c:	68db      	ldr	r3, [r3, #12]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d144      	bne.n	801f1fc <_reclaim_reent+0xa0>
 801f172:	69e3      	ldr	r3, [r4, #28]
 801f174:	6819      	ldr	r1, [r3, #0]
 801f176:	b111      	cbz	r1, 801f17e <_reclaim_reent+0x22>
 801f178:	4620      	mov	r0, r4
 801f17a:	f000 f8cd 	bl	801f318 <_free_r>
 801f17e:	6961      	ldr	r1, [r4, #20]
 801f180:	b111      	cbz	r1, 801f188 <_reclaim_reent+0x2c>
 801f182:	4620      	mov	r0, r4
 801f184:	f000 f8c8 	bl	801f318 <_free_r>
 801f188:	69e1      	ldr	r1, [r4, #28]
 801f18a:	b111      	cbz	r1, 801f192 <_reclaim_reent+0x36>
 801f18c:	4620      	mov	r0, r4
 801f18e:	f000 f8c3 	bl	801f318 <_free_r>
 801f192:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f194:	b111      	cbz	r1, 801f19c <_reclaim_reent+0x40>
 801f196:	4620      	mov	r0, r4
 801f198:	f000 f8be 	bl	801f318 <_free_r>
 801f19c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f19e:	b111      	cbz	r1, 801f1a6 <_reclaim_reent+0x4a>
 801f1a0:	4620      	mov	r0, r4
 801f1a2:	f000 f8b9 	bl	801f318 <_free_r>
 801f1a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f1a8:	b111      	cbz	r1, 801f1b0 <_reclaim_reent+0x54>
 801f1aa:	4620      	mov	r0, r4
 801f1ac:	f000 f8b4 	bl	801f318 <_free_r>
 801f1b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f1b2:	b111      	cbz	r1, 801f1ba <_reclaim_reent+0x5e>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f000 f8af 	bl	801f318 <_free_r>
 801f1ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801f1bc:	b111      	cbz	r1, 801f1c4 <_reclaim_reent+0x68>
 801f1be:	4620      	mov	r0, r4
 801f1c0:	f000 f8aa 	bl	801f318 <_free_r>
 801f1c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801f1c6:	b111      	cbz	r1, 801f1ce <_reclaim_reent+0x72>
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f000 f8a5 	bl	801f318 <_free_r>
 801f1ce:	6a23      	ldr	r3, [r4, #32]
 801f1d0:	b1b3      	cbz	r3, 801f200 <_reclaim_reent+0xa4>
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1d8:	4718      	bx	r3
 801f1da:	5949      	ldr	r1, [r1, r5]
 801f1dc:	b941      	cbnz	r1, 801f1f0 <_reclaim_reent+0x94>
 801f1de:	3504      	adds	r5, #4
 801f1e0:	69e3      	ldr	r3, [r4, #28]
 801f1e2:	2d80      	cmp	r5, #128	; 0x80
 801f1e4:	68d9      	ldr	r1, [r3, #12]
 801f1e6:	d1f8      	bne.n	801f1da <_reclaim_reent+0x7e>
 801f1e8:	4620      	mov	r0, r4
 801f1ea:	f000 f895 	bl	801f318 <_free_r>
 801f1ee:	e7c0      	b.n	801f172 <_reclaim_reent+0x16>
 801f1f0:	680e      	ldr	r6, [r1, #0]
 801f1f2:	4620      	mov	r0, r4
 801f1f4:	f000 f890 	bl	801f318 <_free_r>
 801f1f8:	4631      	mov	r1, r6
 801f1fa:	e7ef      	b.n	801f1dc <_reclaim_reent+0x80>
 801f1fc:	2500      	movs	r5, #0
 801f1fe:	e7ef      	b.n	801f1e0 <_reclaim_reent+0x84>
 801f200:	bd70      	pop	{r4, r5, r6, pc}
 801f202:	bf00      	nop
 801f204:	2000008c 	.word	0x2000008c

0801f208 <_lseek_r>:
 801f208:	b538      	push	{r3, r4, r5, lr}
 801f20a:	4d07      	ldr	r5, [pc, #28]	; (801f228 <_lseek_r+0x20>)
 801f20c:	4604      	mov	r4, r0
 801f20e:	4608      	mov	r0, r1
 801f210:	4611      	mov	r1, r2
 801f212:	2200      	movs	r2, #0
 801f214:	602a      	str	r2, [r5, #0]
 801f216:	461a      	mov	r2, r3
 801f218:	f7e2 f89a 	bl	8001350 <_lseek>
 801f21c:	1c43      	adds	r3, r0, #1
 801f21e:	d102      	bne.n	801f226 <_lseek_r+0x1e>
 801f220:	682b      	ldr	r3, [r5, #0]
 801f222:	b103      	cbz	r3, 801f226 <_lseek_r+0x1e>
 801f224:	6023      	str	r3, [r4, #0]
 801f226:	bd38      	pop	{r3, r4, r5, pc}
 801f228:	2000cb98 	.word	0x2000cb98

0801f22c <_read_r>:
 801f22c:	b538      	push	{r3, r4, r5, lr}
 801f22e:	4d07      	ldr	r5, [pc, #28]	; (801f24c <_read_r+0x20>)
 801f230:	4604      	mov	r4, r0
 801f232:	4608      	mov	r0, r1
 801f234:	4611      	mov	r1, r2
 801f236:	2200      	movs	r2, #0
 801f238:	602a      	str	r2, [r5, #0]
 801f23a:	461a      	mov	r2, r3
 801f23c:	f7e2 f828 	bl	8001290 <_read>
 801f240:	1c43      	adds	r3, r0, #1
 801f242:	d102      	bne.n	801f24a <_read_r+0x1e>
 801f244:	682b      	ldr	r3, [r5, #0]
 801f246:	b103      	cbz	r3, 801f24a <_read_r+0x1e>
 801f248:	6023      	str	r3, [r4, #0]
 801f24a:	bd38      	pop	{r3, r4, r5, pc}
 801f24c:	2000cb98 	.word	0x2000cb98

0801f250 <_sbrk_r>:
 801f250:	b538      	push	{r3, r4, r5, lr}
 801f252:	4d06      	ldr	r5, [pc, #24]	; (801f26c <_sbrk_r+0x1c>)
 801f254:	2300      	movs	r3, #0
 801f256:	4604      	mov	r4, r0
 801f258:	4608      	mov	r0, r1
 801f25a:	602b      	str	r3, [r5, #0]
 801f25c:	f7e2 f886 	bl	800136c <_sbrk>
 801f260:	1c43      	adds	r3, r0, #1
 801f262:	d102      	bne.n	801f26a <_sbrk_r+0x1a>
 801f264:	682b      	ldr	r3, [r5, #0]
 801f266:	b103      	cbz	r3, 801f26a <_sbrk_r+0x1a>
 801f268:	6023      	str	r3, [r4, #0]
 801f26a:	bd38      	pop	{r3, r4, r5, pc}
 801f26c:	2000cb98 	.word	0x2000cb98

0801f270 <_write_r>:
 801f270:	b538      	push	{r3, r4, r5, lr}
 801f272:	4d07      	ldr	r5, [pc, #28]	; (801f290 <_write_r+0x20>)
 801f274:	4604      	mov	r4, r0
 801f276:	4608      	mov	r0, r1
 801f278:	4611      	mov	r1, r2
 801f27a:	2200      	movs	r2, #0
 801f27c:	602a      	str	r2, [r5, #0]
 801f27e:	461a      	mov	r2, r3
 801f280:	f7e2 f823 	bl	80012ca <_write>
 801f284:	1c43      	adds	r3, r0, #1
 801f286:	d102      	bne.n	801f28e <_write_r+0x1e>
 801f288:	682b      	ldr	r3, [r5, #0]
 801f28a:	b103      	cbz	r3, 801f28e <_write_r+0x1e>
 801f28c:	6023      	str	r3, [r4, #0]
 801f28e:	bd38      	pop	{r3, r4, r5, pc}
 801f290:	2000cb98 	.word	0x2000cb98

0801f294 <__errno>:
 801f294:	4b01      	ldr	r3, [pc, #4]	; (801f29c <__errno+0x8>)
 801f296:	6818      	ldr	r0, [r3, #0]
 801f298:	4770      	bx	lr
 801f29a:	bf00      	nop
 801f29c:	2000008c 	.word	0x2000008c

0801f2a0 <__libc_init_array>:
 801f2a0:	b570      	push	{r4, r5, r6, lr}
 801f2a2:	4d0d      	ldr	r5, [pc, #52]	; (801f2d8 <__libc_init_array+0x38>)
 801f2a4:	4c0d      	ldr	r4, [pc, #52]	; (801f2dc <__libc_init_array+0x3c>)
 801f2a6:	1b64      	subs	r4, r4, r5
 801f2a8:	10a4      	asrs	r4, r4, #2
 801f2aa:	2600      	movs	r6, #0
 801f2ac:	42a6      	cmp	r6, r4
 801f2ae:	d109      	bne.n	801f2c4 <__libc_init_array+0x24>
 801f2b0:	4d0b      	ldr	r5, [pc, #44]	; (801f2e0 <__libc_init_array+0x40>)
 801f2b2:	4c0c      	ldr	r4, [pc, #48]	; (801f2e4 <__libc_init_array+0x44>)
 801f2b4:	f000 fcc6 	bl	801fc44 <_init>
 801f2b8:	1b64      	subs	r4, r4, r5
 801f2ba:	10a4      	asrs	r4, r4, #2
 801f2bc:	2600      	movs	r6, #0
 801f2be:	42a6      	cmp	r6, r4
 801f2c0:	d105      	bne.n	801f2ce <__libc_init_array+0x2e>
 801f2c2:	bd70      	pop	{r4, r5, r6, pc}
 801f2c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2c8:	4798      	blx	r3
 801f2ca:	3601      	adds	r6, #1
 801f2cc:	e7ee      	b.n	801f2ac <__libc_init_array+0xc>
 801f2ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801f2d2:	4798      	blx	r3
 801f2d4:	3601      	adds	r6, #1
 801f2d6:	e7f2      	b.n	801f2be <__libc_init_array+0x1e>
 801f2d8:	0802498c 	.word	0x0802498c
 801f2dc:	0802498c 	.word	0x0802498c
 801f2e0:	0802498c 	.word	0x0802498c
 801f2e4:	08024990 	.word	0x08024990

0801f2e8 <__retarget_lock_init_recursive>:
 801f2e8:	4770      	bx	lr

0801f2ea <__retarget_lock_acquire_recursive>:
 801f2ea:	4770      	bx	lr

0801f2ec <__retarget_lock_release_recursive>:
 801f2ec:	4770      	bx	lr

0801f2ee <memcpy>:
 801f2ee:	440a      	add	r2, r1
 801f2f0:	4291      	cmp	r1, r2
 801f2f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801f2f6:	d100      	bne.n	801f2fa <memcpy+0xc>
 801f2f8:	4770      	bx	lr
 801f2fa:	b510      	push	{r4, lr}
 801f2fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f300:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f304:	4291      	cmp	r1, r2
 801f306:	d1f9      	bne.n	801f2fc <memcpy+0xe>
 801f308:	bd10      	pop	{r4, pc}

0801f30a <abort>:
 801f30a:	b508      	push	{r3, lr}
 801f30c:	2006      	movs	r0, #6
 801f30e:	f000 fc5b 	bl	801fbc8 <raise>
 801f312:	2001      	movs	r0, #1
 801f314:	f7e1 ffb2 	bl	800127c <_exit>

0801f318 <_free_r>:
 801f318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f31a:	2900      	cmp	r1, #0
 801f31c:	d044      	beq.n	801f3a8 <_free_r+0x90>
 801f31e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f322:	9001      	str	r0, [sp, #4]
 801f324:	2b00      	cmp	r3, #0
 801f326:	f1a1 0404 	sub.w	r4, r1, #4
 801f32a:	bfb8      	it	lt
 801f32c:	18e4      	addlt	r4, r4, r3
 801f32e:	f7ff fbcf 	bl	801ead0 <__malloc_lock>
 801f332:	4a1e      	ldr	r2, [pc, #120]	; (801f3ac <_free_r+0x94>)
 801f334:	9801      	ldr	r0, [sp, #4]
 801f336:	6813      	ldr	r3, [r2, #0]
 801f338:	b933      	cbnz	r3, 801f348 <_free_r+0x30>
 801f33a:	6063      	str	r3, [r4, #4]
 801f33c:	6014      	str	r4, [r2, #0]
 801f33e:	b003      	add	sp, #12
 801f340:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f344:	f7ff bbca 	b.w	801eadc <__malloc_unlock>
 801f348:	42a3      	cmp	r3, r4
 801f34a:	d908      	bls.n	801f35e <_free_r+0x46>
 801f34c:	6825      	ldr	r5, [r4, #0]
 801f34e:	1961      	adds	r1, r4, r5
 801f350:	428b      	cmp	r3, r1
 801f352:	bf01      	itttt	eq
 801f354:	6819      	ldreq	r1, [r3, #0]
 801f356:	685b      	ldreq	r3, [r3, #4]
 801f358:	1949      	addeq	r1, r1, r5
 801f35a:	6021      	streq	r1, [r4, #0]
 801f35c:	e7ed      	b.n	801f33a <_free_r+0x22>
 801f35e:	461a      	mov	r2, r3
 801f360:	685b      	ldr	r3, [r3, #4]
 801f362:	b10b      	cbz	r3, 801f368 <_free_r+0x50>
 801f364:	42a3      	cmp	r3, r4
 801f366:	d9fa      	bls.n	801f35e <_free_r+0x46>
 801f368:	6811      	ldr	r1, [r2, #0]
 801f36a:	1855      	adds	r5, r2, r1
 801f36c:	42a5      	cmp	r5, r4
 801f36e:	d10b      	bne.n	801f388 <_free_r+0x70>
 801f370:	6824      	ldr	r4, [r4, #0]
 801f372:	4421      	add	r1, r4
 801f374:	1854      	adds	r4, r2, r1
 801f376:	42a3      	cmp	r3, r4
 801f378:	6011      	str	r1, [r2, #0]
 801f37a:	d1e0      	bne.n	801f33e <_free_r+0x26>
 801f37c:	681c      	ldr	r4, [r3, #0]
 801f37e:	685b      	ldr	r3, [r3, #4]
 801f380:	6053      	str	r3, [r2, #4]
 801f382:	440c      	add	r4, r1
 801f384:	6014      	str	r4, [r2, #0]
 801f386:	e7da      	b.n	801f33e <_free_r+0x26>
 801f388:	d902      	bls.n	801f390 <_free_r+0x78>
 801f38a:	230c      	movs	r3, #12
 801f38c:	6003      	str	r3, [r0, #0]
 801f38e:	e7d6      	b.n	801f33e <_free_r+0x26>
 801f390:	6825      	ldr	r5, [r4, #0]
 801f392:	1961      	adds	r1, r4, r5
 801f394:	428b      	cmp	r3, r1
 801f396:	bf04      	itt	eq
 801f398:	6819      	ldreq	r1, [r3, #0]
 801f39a:	685b      	ldreq	r3, [r3, #4]
 801f39c:	6063      	str	r3, [r4, #4]
 801f39e:	bf04      	itt	eq
 801f3a0:	1949      	addeq	r1, r1, r5
 801f3a2:	6021      	streq	r1, [r4, #0]
 801f3a4:	6054      	str	r4, [r2, #4]
 801f3a6:	e7ca      	b.n	801f33e <_free_r+0x26>
 801f3a8:	b003      	add	sp, #12
 801f3aa:	bd30      	pop	{r4, r5, pc}
 801f3ac:	2000ca54 	.word	0x2000ca54

0801f3b0 <__sfputc_r>:
 801f3b0:	6893      	ldr	r3, [r2, #8]
 801f3b2:	3b01      	subs	r3, #1
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	b410      	push	{r4}
 801f3b8:	6093      	str	r3, [r2, #8]
 801f3ba:	da08      	bge.n	801f3ce <__sfputc_r+0x1e>
 801f3bc:	6994      	ldr	r4, [r2, #24]
 801f3be:	42a3      	cmp	r3, r4
 801f3c0:	db01      	blt.n	801f3c6 <__sfputc_r+0x16>
 801f3c2:	290a      	cmp	r1, #10
 801f3c4:	d103      	bne.n	801f3ce <__sfputc_r+0x1e>
 801f3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3ca:	f7ff bddc 	b.w	801ef86 <__swbuf_r>
 801f3ce:	6813      	ldr	r3, [r2, #0]
 801f3d0:	1c58      	adds	r0, r3, #1
 801f3d2:	6010      	str	r0, [r2, #0]
 801f3d4:	7019      	strb	r1, [r3, #0]
 801f3d6:	4608      	mov	r0, r1
 801f3d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f3dc:	4770      	bx	lr

0801f3de <__sfputs_r>:
 801f3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f3e0:	4606      	mov	r6, r0
 801f3e2:	460f      	mov	r7, r1
 801f3e4:	4614      	mov	r4, r2
 801f3e6:	18d5      	adds	r5, r2, r3
 801f3e8:	42ac      	cmp	r4, r5
 801f3ea:	d101      	bne.n	801f3f0 <__sfputs_r+0x12>
 801f3ec:	2000      	movs	r0, #0
 801f3ee:	e007      	b.n	801f400 <__sfputs_r+0x22>
 801f3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f3f4:	463a      	mov	r2, r7
 801f3f6:	4630      	mov	r0, r6
 801f3f8:	f7ff ffda 	bl	801f3b0 <__sfputc_r>
 801f3fc:	1c43      	adds	r3, r0, #1
 801f3fe:	d1f3      	bne.n	801f3e8 <__sfputs_r+0xa>
 801f400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f404 <_vfiprintf_r>:
 801f404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f408:	460d      	mov	r5, r1
 801f40a:	b09d      	sub	sp, #116	; 0x74
 801f40c:	4614      	mov	r4, r2
 801f40e:	4698      	mov	r8, r3
 801f410:	4606      	mov	r6, r0
 801f412:	b118      	cbz	r0, 801f41c <_vfiprintf_r+0x18>
 801f414:	6a03      	ldr	r3, [r0, #32]
 801f416:	b90b      	cbnz	r3, 801f41c <_vfiprintf_r+0x18>
 801f418:	f7ff fcbc 	bl	801ed94 <__sinit>
 801f41c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f41e:	07d9      	lsls	r1, r3, #31
 801f420:	d405      	bmi.n	801f42e <_vfiprintf_r+0x2a>
 801f422:	89ab      	ldrh	r3, [r5, #12]
 801f424:	059a      	lsls	r2, r3, #22
 801f426:	d402      	bmi.n	801f42e <_vfiprintf_r+0x2a>
 801f428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f42a:	f7ff ff5e 	bl	801f2ea <__retarget_lock_acquire_recursive>
 801f42e:	89ab      	ldrh	r3, [r5, #12]
 801f430:	071b      	lsls	r3, r3, #28
 801f432:	d501      	bpl.n	801f438 <_vfiprintf_r+0x34>
 801f434:	692b      	ldr	r3, [r5, #16]
 801f436:	b99b      	cbnz	r3, 801f460 <_vfiprintf_r+0x5c>
 801f438:	4629      	mov	r1, r5
 801f43a:	4630      	mov	r0, r6
 801f43c:	f7ff fde0 	bl	801f000 <__swsetup_r>
 801f440:	b170      	cbz	r0, 801f460 <_vfiprintf_r+0x5c>
 801f442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f444:	07dc      	lsls	r4, r3, #31
 801f446:	d504      	bpl.n	801f452 <_vfiprintf_r+0x4e>
 801f448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f44c:	b01d      	add	sp, #116	; 0x74
 801f44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f452:	89ab      	ldrh	r3, [r5, #12]
 801f454:	0598      	lsls	r0, r3, #22
 801f456:	d4f7      	bmi.n	801f448 <_vfiprintf_r+0x44>
 801f458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f45a:	f7ff ff47 	bl	801f2ec <__retarget_lock_release_recursive>
 801f45e:	e7f3      	b.n	801f448 <_vfiprintf_r+0x44>
 801f460:	2300      	movs	r3, #0
 801f462:	9309      	str	r3, [sp, #36]	; 0x24
 801f464:	2320      	movs	r3, #32
 801f466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f46a:	f8cd 800c 	str.w	r8, [sp, #12]
 801f46e:	2330      	movs	r3, #48	; 0x30
 801f470:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801f624 <_vfiprintf_r+0x220>
 801f474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f478:	f04f 0901 	mov.w	r9, #1
 801f47c:	4623      	mov	r3, r4
 801f47e:	469a      	mov	sl, r3
 801f480:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f484:	b10a      	cbz	r2, 801f48a <_vfiprintf_r+0x86>
 801f486:	2a25      	cmp	r2, #37	; 0x25
 801f488:	d1f9      	bne.n	801f47e <_vfiprintf_r+0x7a>
 801f48a:	ebba 0b04 	subs.w	fp, sl, r4
 801f48e:	d00b      	beq.n	801f4a8 <_vfiprintf_r+0xa4>
 801f490:	465b      	mov	r3, fp
 801f492:	4622      	mov	r2, r4
 801f494:	4629      	mov	r1, r5
 801f496:	4630      	mov	r0, r6
 801f498:	f7ff ffa1 	bl	801f3de <__sfputs_r>
 801f49c:	3001      	adds	r0, #1
 801f49e:	f000 80a9 	beq.w	801f5f4 <_vfiprintf_r+0x1f0>
 801f4a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f4a4:	445a      	add	r2, fp
 801f4a6:	9209      	str	r2, [sp, #36]	; 0x24
 801f4a8:	f89a 3000 	ldrb.w	r3, [sl]
 801f4ac:	2b00      	cmp	r3, #0
 801f4ae:	f000 80a1 	beq.w	801f5f4 <_vfiprintf_r+0x1f0>
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f4b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f4bc:	f10a 0a01 	add.w	sl, sl, #1
 801f4c0:	9304      	str	r3, [sp, #16]
 801f4c2:	9307      	str	r3, [sp, #28]
 801f4c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f4c8:	931a      	str	r3, [sp, #104]	; 0x68
 801f4ca:	4654      	mov	r4, sl
 801f4cc:	2205      	movs	r2, #5
 801f4ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4d2:	4854      	ldr	r0, [pc, #336]	; (801f624 <_vfiprintf_r+0x220>)
 801f4d4:	f7e0 fe84 	bl	80001e0 <memchr>
 801f4d8:	9a04      	ldr	r2, [sp, #16]
 801f4da:	b9d8      	cbnz	r0, 801f514 <_vfiprintf_r+0x110>
 801f4dc:	06d1      	lsls	r1, r2, #27
 801f4de:	bf44      	itt	mi
 801f4e0:	2320      	movmi	r3, #32
 801f4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4e6:	0713      	lsls	r3, r2, #28
 801f4e8:	bf44      	itt	mi
 801f4ea:	232b      	movmi	r3, #43	; 0x2b
 801f4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f4f0:	f89a 3000 	ldrb.w	r3, [sl]
 801f4f4:	2b2a      	cmp	r3, #42	; 0x2a
 801f4f6:	d015      	beq.n	801f524 <_vfiprintf_r+0x120>
 801f4f8:	9a07      	ldr	r2, [sp, #28]
 801f4fa:	4654      	mov	r4, sl
 801f4fc:	2000      	movs	r0, #0
 801f4fe:	f04f 0c0a 	mov.w	ip, #10
 801f502:	4621      	mov	r1, r4
 801f504:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f508:	3b30      	subs	r3, #48	; 0x30
 801f50a:	2b09      	cmp	r3, #9
 801f50c:	d94d      	bls.n	801f5aa <_vfiprintf_r+0x1a6>
 801f50e:	b1b0      	cbz	r0, 801f53e <_vfiprintf_r+0x13a>
 801f510:	9207      	str	r2, [sp, #28]
 801f512:	e014      	b.n	801f53e <_vfiprintf_r+0x13a>
 801f514:	eba0 0308 	sub.w	r3, r0, r8
 801f518:	fa09 f303 	lsl.w	r3, r9, r3
 801f51c:	4313      	orrs	r3, r2
 801f51e:	9304      	str	r3, [sp, #16]
 801f520:	46a2      	mov	sl, r4
 801f522:	e7d2      	b.n	801f4ca <_vfiprintf_r+0xc6>
 801f524:	9b03      	ldr	r3, [sp, #12]
 801f526:	1d19      	adds	r1, r3, #4
 801f528:	681b      	ldr	r3, [r3, #0]
 801f52a:	9103      	str	r1, [sp, #12]
 801f52c:	2b00      	cmp	r3, #0
 801f52e:	bfbb      	ittet	lt
 801f530:	425b      	neglt	r3, r3
 801f532:	f042 0202 	orrlt.w	r2, r2, #2
 801f536:	9307      	strge	r3, [sp, #28]
 801f538:	9307      	strlt	r3, [sp, #28]
 801f53a:	bfb8      	it	lt
 801f53c:	9204      	strlt	r2, [sp, #16]
 801f53e:	7823      	ldrb	r3, [r4, #0]
 801f540:	2b2e      	cmp	r3, #46	; 0x2e
 801f542:	d10c      	bne.n	801f55e <_vfiprintf_r+0x15a>
 801f544:	7863      	ldrb	r3, [r4, #1]
 801f546:	2b2a      	cmp	r3, #42	; 0x2a
 801f548:	d134      	bne.n	801f5b4 <_vfiprintf_r+0x1b0>
 801f54a:	9b03      	ldr	r3, [sp, #12]
 801f54c:	1d1a      	adds	r2, r3, #4
 801f54e:	681b      	ldr	r3, [r3, #0]
 801f550:	9203      	str	r2, [sp, #12]
 801f552:	2b00      	cmp	r3, #0
 801f554:	bfb8      	it	lt
 801f556:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f55a:	3402      	adds	r4, #2
 801f55c:	9305      	str	r3, [sp, #20]
 801f55e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801f634 <_vfiprintf_r+0x230>
 801f562:	7821      	ldrb	r1, [r4, #0]
 801f564:	2203      	movs	r2, #3
 801f566:	4650      	mov	r0, sl
 801f568:	f7e0 fe3a 	bl	80001e0 <memchr>
 801f56c:	b138      	cbz	r0, 801f57e <_vfiprintf_r+0x17a>
 801f56e:	9b04      	ldr	r3, [sp, #16]
 801f570:	eba0 000a 	sub.w	r0, r0, sl
 801f574:	2240      	movs	r2, #64	; 0x40
 801f576:	4082      	lsls	r2, r0
 801f578:	4313      	orrs	r3, r2
 801f57a:	3401      	adds	r4, #1
 801f57c:	9304      	str	r3, [sp, #16]
 801f57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f582:	4829      	ldr	r0, [pc, #164]	; (801f628 <_vfiprintf_r+0x224>)
 801f584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f588:	2206      	movs	r2, #6
 801f58a:	f7e0 fe29 	bl	80001e0 <memchr>
 801f58e:	2800      	cmp	r0, #0
 801f590:	d03f      	beq.n	801f612 <_vfiprintf_r+0x20e>
 801f592:	4b26      	ldr	r3, [pc, #152]	; (801f62c <_vfiprintf_r+0x228>)
 801f594:	bb1b      	cbnz	r3, 801f5de <_vfiprintf_r+0x1da>
 801f596:	9b03      	ldr	r3, [sp, #12]
 801f598:	3307      	adds	r3, #7
 801f59a:	f023 0307 	bic.w	r3, r3, #7
 801f59e:	3308      	adds	r3, #8
 801f5a0:	9303      	str	r3, [sp, #12]
 801f5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f5a4:	443b      	add	r3, r7
 801f5a6:	9309      	str	r3, [sp, #36]	; 0x24
 801f5a8:	e768      	b.n	801f47c <_vfiprintf_r+0x78>
 801f5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 801f5ae:	460c      	mov	r4, r1
 801f5b0:	2001      	movs	r0, #1
 801f5b2:	e7a6      	b.n	801f502 <_vfiprintf_r+0xfe>
 801f5b4:	2300      	movs	r3, #0
 801f5b6:	3401      	adds	r4, #1
 801f5b8:	9305      	str	r3, [sp, #20]
 801f5ba:	4619      	mov	r1, r3
 801f5bc:	f04f 0c0a 	mov.w	ip, #10
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f5c6:	3a30      	subs	r2, #48	; 0x30
 801f5c8:	2a09      	cmp	r2, #9
 801f5ca:	d903      	bls.n	801f5d4 <_vfiprintf_r+0x1d0>
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	d0c6      	beq.n	801f55e <_vfiprintf_r+0x15a>
 801f5d0:	9105      	str	r1, [sp, #20]
 801f5d2:	e7c4      	b.n	801f55e <_vfiprintf_r+0x15a>
 801f5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 801f5d8:	4604      	mov	r4, r0
 801f5da:	2301      	movs	r3, #1
 801f5dc:	e7f0      	b.n	801f5c0 <_vfiprintf_r+0x1bc>
 801f5de:	ab03      	add	r3, sp, #12
 801f5e0:	9300      	str	r3, [sp, #0]
 801f5e2:	462a      	mov	r2, r5
 801f5e4:	4b12      	ldr	r3, [pc, #72]	; (801f630 <_vfiprintf_r+0x22c>)
 801f5e6:	a904      	add	r1, sp, #16
 801f5e8:	4630      	mov	r0, r6
 801f5ea:	f3af 8000 	nop.w
 801f5ee:	4607      	mov	r7, r0
 801f5f0:	1c78      	adds	r0, r7, #1
 801f5f2:	d1d6      	bne.n	801f5a2 <_vfiprintf_r+0x19e>
 801f5f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f5f6:	07d9      	lsls	r1, r3, #31
 801f5f8:	d405      	bmi.n	801f606 <_vfiprintf_r+0x202>
 801f5fa:	89ab      	ldrh	r3, [r5, #12]
 801f5fc:	059a      	lsls	r2, r3, #22
 801f5fe:	d402      	bmi.n	801f606 <_vfiprintf_r+0x202>
 801f600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f602:	f7ff fe73 	bl	801f2ec <__retarget_lock_release_recursive>
 801f606:	89ab      	ldrh	r3, [r5, #12]
 801f608:	065b      	lsls	r3, r3, #25
 801f60a:	f53f af1d 	bmi.w	801f448 <_vfiprintf_r+0x44>
 801f60e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f610:	e71c      	b.n	801f44c <_vfiprintf_r+0x48>
 801f612:	ab03      	add	r3, sp, #12
 801f614:	9300      	str	r3, [sp, #0]
 801f616:	462a      	mov	r2, r5
 801f618:	4b05      	ldr	r3, [pc, #20]	; (801f630 <_vfiprintf_r+0x22c>)
 801f61a:	a904      	add	r1, sp, #16
 801f61c:	4630      	mov	r0, r6
 801f61e:	f000 f879 	bl	801f714 <_printf_i>
 801f622:	e7e4      	b.n	801f5ee <_vfiprintf_r+0x1ea>
 801f624:	08024950 	.word	0x08024950
 801f628:	0802495a 	.word	0x0802495a
 801f62c:	00000000 	.word	0x00000000
 801f630:	0801f3df 	.word	0x0801f3df
 801f634:	08024956 	.word	0x08024956

0801f638 <_printf_common>:
 801f638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f63c:	4616      	mov	r6, r2
 801f63e:	4699      	mov	r9, r3
 801f640:	688a      	ldr	r2, [r1, #8]
 801f642:	690b      	ldr	r3, [r1, #16]
 801f644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f648:	4293      	cmp	r3, r2
 801f64a:	bfb8      	it	lt
 801f64c:	4613      	movlt	r3, r2
 801f64e:	6033      	str	r3, [r6, #0]
 801f650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f654:	4607      	mov	r7, r0
 801f656:	460c      	mov	r4, r1
 801f658:	b10a      	cbz	r2, 801f65e <_printf_common+0x26>
 801f65a:	3301      	adds	r3, #1
 801f65c:	6033      	str	r3, [r6, #0]
 801f65e:	6823      	ldr	r3, [r4, #0]
 801f660:	0699      	lsls	r1, r3, #26
 801f662:	bf42      	ittt	mi
 801f664:	6833      	ldrmi	r3, [r6, #0]
 801f666:	3302      	addmi	r3, #2
 801f668:	6033      	strmi	r3, [r6, #0]
 801f66a:	6825      	ldr	r5, [r4, #0]
 801f66c:	f015 0506 	ands.w	r5, r5, #6
 801f670:	d106      	bne.n	801f680 <_printf_common+0x48>
 801f672:	f104 0a19 	add.w	sl, r4, #25
 801f676:	68e3      	ldr	r3, [r4, #12]
 801f678:	6832      	ldr	r2, [r6, #0]
 801f67a:	1a9b      	subs	r3, r3, r2
 801f67c:	42ab      	cmp	r3, r5
 801f67e:	dc26      	bgt.n	801f6ce <_printf_common+0x96>
 801f680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f684:	1e13      	subs	r3, r2, #0
 801f686:	6822      	ldr	r2, [r4, #0]
 801f688:	bf18      	it	ne
 801f68a:	2301      	movne	r3, #1
 801f68c:	0692      	lsls	r2, r2, #26
 801f68e:	d42b      	bmi.n	801f6e8 <_printf_common+0xb0>
 801f690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f694:	4649      	mov	r1, r9
 801f696:	4638      	mov	r0, r7
 801f698:	47c0      	blx	r8
 801f69a:	3001      	adds	r0, #1
 801f69c:	d01e      	beq.n	801f6dc <_printf_common+0xa4>
 801f69e:	6823      	ldr	r3, [r4, #0]
 801f6a0:	6922      	ldr	r2, [r4, #16]
 801f6a2:	f003 0306 	and.w	r3, r3, #6
 801f6a6:	2b04      	cmp	r3, #4
 801f6a8:	bf02      	ittt	eq
 801f6aa:	68e5      	ldreq	r5, [r4, #12]
 801f6ac:	6833      	ldreq	r3, [r6, #0]
 801f6ae:	1aed      	subeq	r5, r5, r3
 801f6b0:	68a3      	ldr	r3, [r4, #8]
 801f6b2:	bf0c      	ite	eq
 801f6b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f6b8:	2500      	movne	r5, #0
 801f6ba:	4293      	cmp	r3, r2
 801f6bc:	bfc4      	itt	gt
 801f6be:	1a9b      	subgt	r3, r3, r2
 801f6c0:	18ed      	addgt	r5, r5, r3
 801f6c2:	2600      	movs	r6, #0
 801f6c4:	341a      	adds	r4, #26
 801f6c6:	42b5      	cmp	r5, r6
 801f6c8:	d11a      	bne.n	801f700 <_printf_common+0xc8>
 801f6ca:	2000      	movs	r0, #0
 801f6cc:	e008      	b.n	801f6e0 <_printf_common+0xa8>
 801f6ce:	2301      	movs	r3, #1
 801f6d0:	4652      	mov	r2, sl
 801f6d2:	4649      	mov	r1, r9
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	47c0      	blx	r8
 801f6d8:	3001      	adds	r0, #1
 801f6da:	d103      	bne.n	801f6e4 <_printf_common+0xac>
 801f6dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6e4:	3501      	adds	r5, #1
 801f6e6:	e7c6      	b.n	801f676 <_printf_common+0x3e>
 801f6e8:	18e1      	adds	r1, r4, r3
 801f6ea:	1c5a      	adds	r2, r3, #1
 801f6ec:	2030      	movs	r0, #48	; 0x30
 801f6ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f6f2:	4422      	add	r2, r4
 801f6f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f6f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f6fc:	3302      	adds	r3, #2
 801f6fe:	e7c7      	b.n	801f690 <_printf_common+0x58>
 801f700:	2301      	movs	r3, #1
 801f702:	4622      	mov	r2, r4
 801f704:	4649      	mov	r1, r9
 801f706:	4638      	mov	r0, r7
 801f708:	47c0      	blx	r8
 801f70a:	3001      	adds	r0, #1
 801f70c:	d0e6      	beq.n	801f6dc <_printf_common+0xa4>
 801f70e:	3601      	adds	r6, #1
 801f710:	e7d9      	b.n	801f6c6 <_printf_common+0x8e>
	...

0801f714 <_printf_i>:
 801f714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f718:	7e0f      	ldrb	r7, [r1, #24]
 801f71a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f71c:	2f78      	cmp	r7, #120	; 0x78
 801f71e:	4691      	mov	r9, r2
 801f720:	4680      	mov	r8, r0
 801f722:	460c      	mov	r4, r1
 801f724:	469a      	mov	sl, r3
 801f726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f72a:	d807      	bhi.n	801f73c <_printf_i+0x28>
 801f72c:	2f62      	cmp	r7, #98	; 0x62
 801f72e:	d80a      	bhi.n	801f746 <_printf_i+0x32>
 801f730:	2f00      	cmp	r7, #0
 801f732:	f000 80d4 	beq.w	801f8de <_printf_i+0x1ca>
 801f736:	2f58      	cmp	r7, #88	; 0x58
 801f738:	f000 80c0 	beq.w	801f8bc <_printf_i+0x1a8>
 801f73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f744:	e03a      	b.n	801f7bc <_printf_i+0xa8>
 801f746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f74a:	2b15      	cmp	r3, #21
 801f74c:	d8f6      	bhi.n	801f73c <_printf_i+0x28>
 801f74e:	a101      	add	r1, pc, #4	; (adr r1, 801f754 <_printf_i+0x40>)
 801f750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f754:	0801f7ad 	.word	0x0801f7ad
 801f758:	0801f7c1 	.word	0x0801f7c1
 801f75c:	0801f73d 	.word	0x0801f73d
 801f760:	0801f73d 	.word	0x0801f73d
 801f764:	0801f73d 	.word	0x0801f73d
 801f768:	0801f73d 	.word	0x0801f73d
 801f76c:	0801f7c1 	.word	0x0801f7c1
 801f770:	0801f73d 	.word	0x0801f73d
 801f774:	0801f73d 	.word	0x0801f73d
 801f778:	0801f73d 	.word	0x0801f73d
 801f77c:	0801f73d 	.word	0x0801f73d
 801f780:	0801f8c5 	.word	0x0801f8c5
 801f784:	0801f7ed 	.word	0x0801f7ed
 801f788:	0801f87f 	.word	0x0801f87f
 801f78c:	0801f73d 	.word	0x0801f73d
 801f790:	0801f73d 	.word	0x0801f73d
 801f794:	0801f8e7 	.word	0x0801f8e7
 801f798:	0801f73d 	.word	0x0801f73d
 801f79c:	0801f7ed 	.word	0x0801f7ed
 801f7a0:	0801f73d 	.word	0x0801f73d
 801f7a4:	0801f73d 	.word	0x0801f73d
 801f7a8:	0801f887 	.word	0x0801f887
 801f7ac:	682b      	ldr	r3, [r5, #0]
 801f7ae:	1d1a      	adds	r2, r3, #4
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	602a      	str	r2, [r5, #0]
 801f7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f7b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f7bc:	2301      	movs	r3, #1
 801f7be:	e09f      	b.n	801f900 <_printf_i+0x1ec>
 801f7c0:	6820      	ldr	r0, [r4, #0]
 801f7c2:	682b      	ldr	r3, [r5, #0]
 801f7c4:	0607      	lsls	r7, r0, #24
 801f7c6:	f103 0104 	add.w	r1, r3, #4
 801f7ca:	6029      	str	r1, [r5, #0]
 801f7cc:	d501      	bpl.n	801f7d2 <_printf_i+0xbe>
 801f7ce:	681e      	ldr	r6, [r3, #0]
 801f7d0:	e003      	b.n	801f7da <_printf_i+0xc6>
 801f7d2:	0646      	lsls	r6, r0, #25
 801f7d4:	d5fb      	bpl.n	801f7ce <_printf_i+0xba>
 801f7d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f7da:	2e00      	cmp	r6, #0
 801f7dc:	da03      	bge.n	801f7e6 <_printf_i+0xd2>
 801f7de:	232d      	movs	r3, #45	; 0x2d
 801f7e0:	4276      	negs	r6, r6
 801f7e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f7e6:	485a      	ldr	r0, [pc, #360]	; (801f950 <_printf_i+0x23c>)
 801f7e8:	230a      	movs	r3, #10
 801f7ea:	e012      	b.n	801f812 <_printf_i+0xfe>
 801f7ec:	682b      	ldr	r3, [r5, #0]
 801f7ee:	6820      	ldr	r0, [r4, #0]
 801f7f0:	1d19      	adds	r1, r3, #4
 801f7f2:	6029      	str	r1, [r5, #0]
 801f7f4:	0605      	lsls	r5, r0, #24
 801f7f6:	d501      	bpl.n	801f7fc <_printf_i+0xe8>
 801f7f8:	681e      	ldr	r6, [r3, #0]
 801f7fa:	e002      	b.n	801f802 <_printf_i+0xee>
 801f7fc:	0641      	lsls	r1, r0, #25
 801f7fe:	d5fb      	bpl.n	801f7f8 <_printf_i+0xe4>
 801f800:	881e      	ldrh	r6, [r3, #0]
 801f802:	4853      	ldr	r0, [pc, #332]	; (801f950 <_printf_i+0x23c>)
 801f804:	2f6f      	cmp	r7, #111	; 0x6f
 801f806:	bf0c      	ite	eq
 801f808:	2308      	moveq	r3, #8
 801f80a:	230a      	movne	r3, #10
 801f80c:	2100      	movs	r1, #0
 801f80e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f812:	6865      	ldr	r5, [r4, #4]
 801f814:	60a5      	str	r5, [r4, #8]
 801f816:	2d00      	cmp	r5, #0
 801f818:	bfa2      	ittt	ge
 801f81a:	6821      	ldrge	r1, [r4, #0]
 801f81c:	f021 0104 	bicge.w	r1, r1, #4
 801f820:	6021      	strge	r1, [r4, #0]
 801f822:	b90e      	cbnz	r6, 801f828 <_printf_i+0x114>
 801f824:	2d00      	cmp	r5, #0
 801f826:	d04b      	beq.n	801f8c0 <_printf_i+0x1ac>
 801f828:	4615      	mov	r5, r2
 801f82a:	fbb6 f1f3 	udiv	r1, r6, r3
 801f82e:	fb03 6711 	mls	r7, r3, r1, r6
 801f832:	5dc7      	ldrb	r7, [r0, r7]
 801f834:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f838:	4637      	mov	r7, r6
 801f83a:	42bb      	cmp	r3, r7
 801f83c:	460e      	mov	r6, r1
 801f83e:	d9f4      	bls.n	801f82a <_printf_i+0x116>
 801f840:	2b08      	cmp	r3, #8
 801f842:	d10b      	bne.n	801f85c <_printf_i+0x148>
 801f844:	6823      	ldr	r3, [r4, #0]
 801f846:	07de      	lsls	r6, r3, #31
 801f848:	d508      	bpl.n	801f85c <_printf_i+0x148>
 801f84a:	6923      	ldr	r3, [r4, #16]
 801f84c:	6861      	ldr	r1, [r4, #4]
 801f84e:	4299      	cmp	r1, r3
 801f850:	bfde      	ittt	le
 801f852:	2330      	movle	r3, #48	; 0x30
 801f854:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f858:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801f85c:	1b52      	subs	r2, r2, r5
 801f85e:	6122      	str	r2, [r4, #16]
 801f860:	f8cd a000 	str.w	sl, [sp]
 801f864:	464b      	mov	r3, r9
 801f866:	aa03      	add	r2, sp, #12
 801f868:	4621      	mov	r1, r4
 801f86a:	4640      	mov	r0, r8
 801f86c:	f7ff fee4 	bl	801f638 <_printf_common>
 801f870:	3001      	adds	r0, #1
 801f872:	d14a      	bne.n	801f90a <_printf_i+0x1f6>
 801f874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801f878:	b004      	add	sp, #16
 801f87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f87e:	6823      	ldr	r3, [r4, #0]
 801f880:	f043 0320 	orr.w	r3, r3, #32
 801f884:	6023      	str	r3, [r4, #0]
 801f886:	4833      	ldr	r0, [pc, #204]	; (801f954 <_printf_i+0x240>)
 801f888:	2778      	movs	r7, #120	; 0x78
 801f88a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801f88e:	6823      	ldr	r3, [r4, #0]
 801f890:	6829      	ldr	r1, [r5, #0]
 801f892:	061f      	lsls	r7, r3, #24
 801f894:	f851 6b04 	ldr.w	r6, [r1], #4
 801f898:	d402      	bmi.n	801f8a0 <_printf_i+0x18c>
 801f89a:	065f      	lsls	r7, r3, #25
 801f89c:	bf48      	it	mi
 801f89e:	b2b6      	uxthmi	r6, r6
 801f8a0:	07df      	lsls	r7, r3, #31
 801f8a2:	bf48      	it	mi
 801f8a4:	f043 0320 	orrmi.w	r3, r3, #32
 801f8a8:	6029      	str	r1, [r5, #0]
 801f8aa:	bf48      	it	mi
 801f8ac:	6023      	strmi	r3, [r4, #0]
 801f8ae:	b91e      	cbnz	r6, 801f8b8 <_printf_i+0x1a4>
 801f8b0:	6823      	ldr	r3, [r4, #0]
 801f8b2:	f023 0320 	bic.w	r3, r3, #32
 801f8b6:	6023      	str	r3, [r4, #0]
 801f8b8:	2310      	movs	r3, #16
 801f8ba:	e7a7      	b.n	801f80c <_printf_i+0xf8>
 801f8bc:	4824      	ldr	r0, [pc, #144]	; (801f950 <_printf_i+0x23c>)
 801f8be:	e7e4      	b.n	801f88a <_printf_i+0x176>
 801f8c0:	4615      	mov	r5, r2
 801f8c2:	e7bd      	b.n	801f840 <_printf_i+0x12c>
 801f8c4:	682b      	ldr	r3, [r5, #0]
 801f8c6:	6826      	ldr	r6, [r4, #0]
 801f8c8:	6961      	ldr	r1, [r4, #20]
 801f8ca:	1d18      	adds	r0, r3, #4
 801f8cc:	6028      	str	r0, [r5, #0]
 801f8ce:	0635      	lsls	r5, r6, #24
 801f8d0:	681b      	ldr	r3, [r3, #0]
 801f8d2:	d501      	bpl.n	801f8d8 <_printf_i+0x1c4>
 801f8d4:	6019      	str	r1, [r3, #0]
 801f8d6:	e002      	b.n	801f8de <_printf_i+0x1ca>
 801f8d8:	0670      	lsls	r0, r6, #25
 801f8da:	d5fb      	bpl.n	801f8d4 <_printf_i+0x1c0>
 801f8dc:	8019      	strh	r1, [r3, #0]
 801f8de:	2300      	movs	r3, #0
 801f8e0:	6123      	str	r3, [r4, #16]
 801f8e2:	4615      	mov	r5, r2
 801f8e4:	e7bc      	b.n	801f860 <_printf_i+0x14c>
 801f8e6:	682b      	ldr	r3, [r5, #0]
 801f8e8:	1d1a      	adds	r2, r3, #4
 801f8ea:	602a      	str	r2, [r5, #0]
 801f8ec:	681d      	ldr	r5, [r3, #0]
 801f8ee:	6862      	ldr	r2, [r4, #4]
 801f8f0:	2100      	movs	r1, #0
 801f8f2:	4628      	mov	r0, r5
 801f8f4:	f7e0 fc74 	bl	80001e0 <memchr>
 801f8f8:	b108      	cbz	r0, 801f8fe <_printf_i+0x1ea>
 801f8fa:	1b40      	subs	r0, r0, r5
 801f8fc:	6060      	str	r0, [r4, #4]
 801f8fe:	6863      	ldr	r3, [r4, #4]
 801f900:	6123      	str	r3, [r4, #16]
 801f902:	2300      	movs	r3, #0
 801f904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f908:	e7aa      	b.n	801f860 <_printf_i+0x14c>
 801f90a:	6923      	ldr	r3, [r4, #16]
 801f90c:	462a      	mov	r2, r5
 801f90e:	4649      	mov	r1, r9
 801f910:	4640      	mov	r0, r8
 801f912:	47d0      	blx	sl
 801f914:	3001      	adds	r0, #1
 801f916:	d0ad      	beq.n	801f874 <_printf_i+0x160>
 801f918:	6823      	ldr	r3, [r4, #0]
 801f91a:	079b      	lsls	r3, r3, #30
 801f91c:	d413      	bmi.n	801f946 <_printf_i+0x232>
 801f91e:	68e0      	ldr	r0, [r4, #12]
 801f920:	9b03      	ldr	r3, [sp, #12]
 801f922:	4298      	cmp	r0, r3
 801f924:	bfb8      	it	lt
 801f926:	4618      	movlt	r0, r3
 801f928:	e7a6      	b.n	801f878 <_printf_i+0x164>
 801f92a:	2301      	movs	r3, #1
 801f92c:	4632      	mov	r2, r6
 801f92e:	4649      	mov	r1, r9
 801f930:	4640      	mov	r0, r8
 801f932:	47d0      	blx	sl
 801f934:	3001      	adds	r0, #1
 801f936:	d09d      	beq.n	801f874 <_printf_i+0x160>
 801f938:	3501      	adds	r5, #1
 801f93a:	68e3      	ldr	r3, [r4, #12]
 801f93c:	9903      	ldr	r1, [sp, #12]
 801f93e:	1a5b      	subs	r3, r3, r1
 801f940:	42ab      	cmp	r3, r5
 801f942:	dcf2      	bgt.n	801f92a <_printf_i+0x216>
 801f944:	e7eb      	b.n	801f91e <_printf_i+0x20a>
 801f946:	2500      	movs	r5, #0
 801f948:	f104 0619 	add.w	r6, r4, #25
 801f94c:	e7f5      	b.n	801f93a <_printf_i+0x226>
 801f94e:	bf00      	nop
 801f950:	08024961 	.word	0x08024961
 801f954:	08024972 	.word	0x08024972

0801f958 <__sflush_r>:
 801f958:	898a      	ldrh	r2, [r1, #12]
 801f95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f95e:	4605      	mov	r5, r0
 801f960:	0710      	lsls	r0, r2, #28
 801f962:	460c      	mov	r4, r1
 801f964:	d458      	bmi.n	801fa18 <__sflush_r+0xc0>
 801f966:	684b      	ldr	r3, [r1, #4]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	dc05      	bgt.n	801f978 <__sflush_r+0x20>
 801f96c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801f96e:	2b00      	cmp	r3, #0
 801f970:	dc02      	bgt.n	801f978 <__sflush_r+0x20>
 801f972:	2000      	movs	r0, #0
 801f974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f97a:	2e00      	cmp	r6, #0
 801f97c:	d0f9      	beq.n	801f972 <__sflush_r+0x1a>
 801f97e:	2300      	movs	r3, #0
 801f980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801f984:	682f      	ldr	r7, [r5, #0]
 801f986:	6a21      	ldr	r1, [r4, #32]
 801f988:	602b      	str	r3, [r5, #0]
 801f98a:	d032      	beq.n	801f9f2 <__sflush_r+0x9a>
 801f98c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801f98e:	89a3      	ldrh	r3, [r4, #12]
 801f990:	075a      	lsls	r2, r3, #29
 801f992:	d505      	bpl.n	801f9a0 <__sflush_r+0x48>
 801f994:	6863      	ldr	r3, [r4, #4]
 801f996:	1ac0      	subs	r0, r0, r3
 801f998:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f99a:	b10b      	cbz	r3, 801f9a0 <__sflush_r+0x48>
 801f99c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801f99e:	1ac0      	subs	r0, r0, r3
 801f9a0:	2300      	movs	r3, #0
 801f9a2:	4602      	mov	r2, r0
 801f9a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801f9a6:	6a21      	ldr	r1, [r4, #32]
 801f9a8:	4628      	mov	r0, r5
 801f9aa:	47b0      	blx	r6
 801f9ac:	1c43      	adds	r3, r0, #1
 801f9ae:	89a3      	ldrh	r3, [r4, #12]
 801f9b0:	d106      	bne.n	801f9c0 <__sflush_r+0x68>
 801f9b2:	6829      	ldr	r1, [r5, #0]
 801f9b4:	291d      	cmp	r1, #29
 801f9b6:	d82b      	bhi.n	801fa10 <__sflush_r+0xb8>
 801f9b8:	4a29      	ldr	r2, [pc, #164]	; (801fa60 <__sflush_r+0x108>)
 801f9ba:	410a      	asrs	r2, r1
 801f9bc:	07d6      	lsls	r6, r2, #31
 801f9be:	d427      	bmi.n	801fa10 <__sflush_r+0xb8>
 801f9c0:	2200      	movs	r2, #0
 801f9c2:	6062      	str	r2, [r4, #4]
 801f9c4:	04d9      	lsls	r1, r3, #19
 801f9c6:	6922      	ldr	r2, [r4, #16]
 801f9c8:	6022      	str	r2, [r4, #0]
 801f9ca:	d504      	bpl.n	801f9d6 <__sflush_r+0x7e>
 801f9cc:	1c42      	adds	r2, r0, #1
 801f9ce:	d101      	bne.n	801f9d4 <__sflush_r+0x7c>
 801f9d0:	682b      	ldr	r3, [r5, #0]
 801f9d2:	b903      	cbnz	r3, 801f9d6 <__sflush_r+0x7e>
 801f9d4:	6560      	str	r0, [r4, #84]	; 0x54
 801f9d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f9d8:	602f      	str	r7, [r5, #0]
 801f9da:	2900      	cmp	r1, #0
 801f9dc:	d0c9      	beq.n	801f972 <__sflush_r+0x1a>
 801f9de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f9e2:	4299      	cmp	r1, r3
 801f9e4:	d002      	beq.n	801f9ec <__sflush_r+0x94>
 801f9e6:	4628      	mov	r0, r5
 801f9e8:	f7ff fc96 	bl	801f318 <_free_r>
 801f9ec:	2000      	movs	r0, #0
 801f9ee:	6360      	str	r0, [r4, #52]	; 0x34
 801f9f0:	e7c0      	b.n	801f974 <__sflush_r+0x1c>
 801f9f2:	2301      	movs	r3, #1
 801f9f4:	4628      	mov	r0, r5
 801f9f6:	47b0      	blx	r6
 801f9f8:	1c41      	adds	r1, r0, #1
 801f9fa:	d1c8      	bne.n	801f98e <__sflush_r+0x36>
 801f9fc:	682b      	ldr	r3, [r5, #0]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d0c5      	beq.n	801f98e <__sflush_r+0x36>
 801fa02:	2b1d      	cmp	r3, #29
 801fa04:	d001      	beq.n	801fa0a <__sflush_r+0xb2>
 801fa06:	2b16      	cmp	r3, #22
 801fa08:	d101      	bne.n	801fa0e <__sflush_r+0xb6>
 801fa0a:	602f      	str	r7, [r5, #0]
 801fa0c:	e7b1      	b.n	801f972 <__sflush_r+0x1a>
 801fa0e:	89a3      	ldrh	r3, [r4, #12]
 801fa10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa14:	81a3      	strh	r3, [r4, #12]
 801fa16:	e7ad      	b.n	801f974 <__sflush_r+0x1c>
 801fa18:	690f      	ldr	r7, [r1, #16]
 801fa1a:	2f00      	cmp	r7, #0
 801fa1c:	d0a9      	beq.n	801f972 <__sflush_r+0x1a>
 801fa1e:	0793      	lsls	r3, r2, #30
 801fa20:	680e      	ldr	r6, [r1, #0]
 801fa22:	bf08      	it	eq
 801fa24:	694b      	ldreq	r3, [r1, #20]
 801fa26:	600f      	str	r7, [r1, #0]
 801fa28:	bf18      	it	ne
 801fa2a:	2300      	movne	r3, #0
 801fa2c:	eba6 0807 	sub.w	r8, r6, r7
 801fa30:	608b      	str	r3, [r1, #8]
 801fa32:	f1b8 0f00 	cmp.w	r8, #0
 801fa36:	dd9c      	ble.n	801f972 <__sflush_r+0x1a>
 801fa38:	6a21      	ldr	r1, [r4, #32]
 801fa3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801fa3c:	4643      	mov	r3, r8
 801fa3e:	463a      	mov	r2, r7
 801fa40:	4628      	mov	r0, r5
 801fa42:	47b0      	blx	r6
 801fa44:	2800      	cmp	r0, #0
 801fa46:	dc06      	bgt.n	801fa56 <__sflush_r+0xfe>
 801fa48:	89a3      	ldrh	r3, [r4, #12]
 801fa4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fa4e:	81a3      	strh	r3, [r4, #12]
 801fa50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fa54:	e78e      	b.n	801f974 <__sflush_r+0x1c>
 801fa56:	4407      	add	r7, r0
 801fa58:	eba8 0800 	sub.w	r8, r8, r0
 801fa5c:	e7e9      	b.n	801fa32 <__sflush_r+0xda>
 801fa5e:	bf00      	nop
 801fa60:	dfbffffe 	.word	0xdfbffffe

0801fa64 <_fflush_r>:
 801fa64:	b538      	push	{r3, r4, r5, lr}
 801fa66:	690b      	ldr	r3, [r1, #16]
 801fa68:	4605      	mov	r5, r0
 801fa6a:	460c      	mov	r4, r1
 801fa6c:	b913      	cbnz	r3, 801fa74 <_fflush_r+0x10>
 801fa6e:	2500      	movs	r5, #0
 801fa70:	4628      	mov	r0, r5
 801fa72:	bd38      	pop	{r3, r4, r5, pc}
 801fa74:	b118      	cbz	r0, 801fa7e <_fflush_r+0x1a>
 801fa76:	6a03      	ldr	r3, [r0, #32]
 801fa78:	b90b      	cbnz	r3, 801fa7e <_fflush_r+0x1a>
 801fa7a:	f7ff f98b 	bl	801ed94 <__sinit>
 801fa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa82:	2b00      	cmp	r3, #0
 801fa84:	d0f3      	beq.n	801fa6e <_fflush_r+0xa>
 801fa86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801fa88:	07d0      	lsls	r0, r2, #31
 801fa8a:	d404      	bmi.n	801fa96 <_fflush_r+0x32>
 801fa8c:	0599      	lsls	r1, r3, #22
 801fa8e:	d402      	bmi.n	801fa96 <_fflush_r+0x32>
 801fa90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801fa92:	f7ff fc2a 	bl	801f2ea <__retarget_lock_acquire_recursive>
 801fa96:	4628      	mov	r0, r5
 801fa98:	4621      	mov	r1, r4
 801fa9a:	f7ff ff5d 	bl	801f958 <__sflush_r>
 801fa9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801faa0:	07da      	lsls	r2, r3, #31
 801faa2:	4605      	mov	r5, r0
 801faa4:	d4e4      	bmi.n	801fa70 <_fflush_r+0xc>
 801faa6:	89a3      	ldrh	r3, [r4, #12]
 801faa8:	059b      	lsls	r3, r3, #22
 801faaa:	d4e1      	bmi.n	801fa70 <_fflush_r+0xc>
 801faac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801faae:	f7ff fc1d 	bl	801f2ec <__retarget_lock_release_recursive>
 801fab2:	e7dd      	b.n	801fa70 <_fflush_r+0xc>

0801fab4 <__swhatbuf_r>:
 801fab4:	b570      	push	{r4, r5, r6, lr}
 801fab6:	460c      	mov	r4, r1
 801fab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fabc:	2900      	cmp	r1, #0
 801fabe:	b096      	sub	sp, #88	; 0x58
 801fac0:	4615      	mov	r5, r2
 801fac2:	461e      	mov	r6, r3
 801fac4:	da0d      	bge.n	801fae2 <__swhatbuf_r+0x2e>
 801fac6:	89a3      	ldrh	r3, [r4, #12]
 801fac8:	f013 0f80 	tst.w	r3, #128	; 0x80
 801facc:	f04f 0100 	mov.w	r1, #0
 801fad0:	bf0c      	ite	eq
 801fad2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801fad6:	2340      	movne	r3, #64	; 0x40
 801fad8:	2000      	movs	r0, #0
 801fada:	6031      	str	r1, [r6, #0]
 801fadc:	602b      	str	r3, [r5, #0]
 801fade:	b016      	add	sp, #88	; 0x58
 801fae0:	bd70      	pop	{r4, r5, r6, pc}
 801fae2:	466a      	mov	r2, sp
 801fae4:	f000 f878 	bl	801fbd8 <_fstat_r>
 801fae8:	2800      	cmp	r0, #0
 801faea:	dbec      	blt.n	801fac6 <__swhatbuf_r+0x12>
 801faec:	9901      	ldr	r1, [sp, #4]
 801faee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801faf2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801faf6:	4259      	negs	r1, r3
 801faf8:	4159      	adcs	r1, r3
 801fafa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801fafe:	e7eb      	b.n	801fad8 <__swhatbuf_r+0x24>

0801fb00 <__smakebuf_r>:
 801fb00:	898b      	ldrh	r3, [r1, #12]
 801fb02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fb04:	079d      	lsls	r5, r3, #30
 801fb06:	4606      	mov	r6, r0
 801fb08:	460c      	mov	r4, r1
 801fb0a:	d507      	bpl.n	801fb1c <__smakebuf_r+0x1c>
 801fb0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801fb10:	6023      	str	r3, [r4, #0]
 801fb12:	6123      	str	r3, [r4, #16]
 801fb14:	2301      	movs	r3, #1
 801fb16:	6163      	str	r3, [r4, #20]
 801fb18:	b002      	add	sp, #8
 801fb1a:	bd70      	pop	{r4, r5, r6, pc}
 801fb1c:	ab01      	add	r3, sp, #4
 801fb1e:	466a      	mov	r2, sp
 801fb20:	f7ff ffc8 	bl	801fab4 <__swhatbuf_r>
 801fb24:	9900      	ldr	r1, [sp, #0]
 801fb26:	4605      	mov	r5, r0
 801fb28:	4630      	mov	r0, r6
 801fb2a:	f7fe ff51 	bl	801e9d0 <_malloc_r>
 801fb2e:	b948      	cbnz	r0, 801fb44 <__smakebuf_r+0x44>
 801fb30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fb34:	059a      	lsls	r2, r3, #22
 801fb36:	d4ef      	bmi.n	801fb18 <__smakebuf_r+0x18>
 801fb38:	f023 0303 	bic.w	r3, r3, #3
 801fb3c:	f043 0302 	orr.w	r3, r3, #2
 801fb40:	81a3      	strh	r3, [r4, #12]
 801fb42:	e7e3      	b.n	801fb0c <__smakebuf_r+0xc>
 801fb44:	89a3      	ldrh	r3, [r4, #12]
 801fb46:	6020      	str	r0, [r4, #0]
 801fb48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fb4c:	81a3      	strh	r3, [r4, #12]
 801fb4e:	9b00      	ldr	r3, [sp, #0]
 801fb50:	6163      	str	r3, [r4, #20]
 801fb52:	9b01      	ldr	r3, [sp, #4]
 801fb54:	6120      	str	r0, [r4, #16]
 801fb56:	b15b      	cbz	r3, 801fb70 <__smakebuf_r+0x70>
 801fb58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb5c:	4630      	mov	r0, r6
 801fb5e:	f000 f84d 	bl	801fbfc <_isatty_r>
 801fb62:	b128      	cbz	r0, 801fb70 <__smakebuf_r+0x70>
 801fb64:	89a3      	ldrh	r3, [r4, #12]
 801fb66:	f023 0303 	bic.w	r3, r3, #3
 801fb6a:	f043 0301 	orr.w	r3, r3, #1
 801fb6e:	81a3      	strh	r3, [r4, #12]
 801fb70:	89a3      	ldrh	r3, [r4, #12]
 801fb72:	431d      	orrs	r5, r3
 801fb74:	81a5      	strh	r5, [r4, #12]
 801fb76:	e7cf      	b.n	801fb18 <__smakebuf_r+0x18>

0801fb78 <_raise_r>:
 801fb78:	291f      	cmp	r1, #31
 801fb7a:	b538      	push	{r3, r4, r5, lr}
 801fb7c:	4604      	mov	r4, r0
 801fb7e:	460d      	mov	r5, r1
 801fb80:	d904      	bls.n	801fb8c <_raise_r+0x14>
 801fb82:	2316      	movs	r3, #22
 801fb84:	6003      	str	r3, [r0, #0]
 801fb86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801fb8a:	bd38      	pop	{r3, r4, r5, pc}
 801fb8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801fb8e:	b112      	cbz	r2, 801fb96 <_raise_r+0x1e>
 801fb90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fb94:	b94b      	cbnz	r3, 801fbaa <_raise_r+0x32>
 801fb96:	4620      	mov	r0, r4
 801fb98:	f000 f852 	bl	801fc40 <_getpid_r>
 801fb9c:	462a      	mov	r2, r5
 801fb9e:	4601      	mov	r1, r0
 801fba0:	4620      	mov	r0, r4
 801fba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fba6:	f000 b839 	b.w	801fc1c <_kill_r>
 801fbaa:	2b01      	cmp	r3, #1
 801fbac:	d00a      	beq.n	801fbc4 <_raise_r+0x4c>
 801fbae:	1c59      	adds	r1, r3, #1
 801fbb0:	d103      	bne.n	801fbba <_raise_r+0x42>
 801fbb2:	2316      	movs	r3, #22
 801fbb4:	6003      	str	r3, [r0, #0]
 801fbb6:	2001      	movs	r0, #1
 801fbb8:	e7e7      	b.n	801fb8a <_raise_r+0x12>
 801fbba:	2400      	movs	r4, #0
 801fbbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801fbc0:	4628      	mov	r0, r5
 801fbc2:	4798      	blx	r3
 801fbc4:	2000      	movs	r0, #0
 801fbc6:	e7e0      	b.n	801fb8a <_raise_r+0x12>

0801fbc8 <raise>:
 801fbc8:	4b02      	ldr	r3, [pc, #8]	; (801fbd4 <raise+0xc>)
 801fbca:	4601      	mov	r1, r0
 801fbcc:	6818      	ldr	r0, [r3, #0]
 801fbce:	f7ff bfd3 	b.w	801fb78 <_raise_r>
 801fbd2:	bf00      	nop
 801fbd4:	2000008c 	.word	0x2000008c

0801fbd8 <_fstat_r>:
 801fbd8:	b538      	push	{r3, r4, r5, lr}
 801fbda:	4d07      	ldr	r5, [pc, #28]	; (801fbf8 <_fstat_r+0x20>)
 801fbdc:	2300      	movs	r3, #0
 801fbde:	4604      	mov	r4, r0
 801fbe0:	4608      	mov	r0, r1
 801fbe2:	4611      	mov	r1, r2
 801fbe4:	602b      	str	r3, [r5, #0]
 801fbe6:	f7e1 fb98 	bl	800131a <_fstat>
 801fbea:	1c43      	adds	r3, r0, #1
 801fbec:	d102      	bne.n	801fbf4 <_fstat_r+0x1c>
 801fbee:	682b      	ldr	r3, [r5, #0]
 801fbf0:	b103      	cbz	r3, 801fbf4 <_fstat_r+0x1c>
 801fbf2:	6023      	str	r3, [r4, #0]
 801fbf4:	bd38      	pop	{r3, r4, r5, pc}
 801fbf6:	bf00      	nop
 801fbf8:	2000cb98 	.word	0x2000cb98

0801fbfc <_isatty_r>:
 801fbfc:	b538      	push	{r3, r4, r5, lr}
 801fbfe:	4d06      	ldr	r5, [pc, #24]	; (801fc18 <_isatty_r+0x1c>)
 801fc00:	2300      	movs	r3, #0
 801fc02:	4604      	mov	r4, r0
 801fc04:	4608      	mov	r0, r1
 801fc06:	602b      	str	r3, [r5, #0]
 801fc08:	f7e1 fb97 	bl	800133a <_isatty>
 801fc0c:	1c43      	adds	r3, r0, #1
 801fc0e:	d102      	bne.n	801fc16 <_isatty_r+0x1a>
 801fc10:	682b      	ldr	r3, [r5, #0]
 801fc12:	b103      	cbz	r3, 801fc16 <_isatty_r+0x1a>
 801fc14:	6023      	str	r3, [r4, #0]
 801fc16:	bd38      	pop	{r3, r4, r5, pc}
 801fc18:	2000cb98 	.word	0x2000cb98

0801fc1c <_kill_r>:
 801fc1c:	b538      	push	{r3, r4, r5, lr}
 801fc1e:	4d07      	ldr	r5, [pc, #28]	; (801fc3c <_kill_r+0x20>)
 801fc20:	2300      	movs	r3, #0
 801fc22:	4604      	mov	r4, r0
 801fc24:	4608      	mov	r0, r1
 801fc26:	4611      	mov	r1, r2
 801fc28:	602b      	str	r3, [r5, #0]
 801fc2a:	f7e1 fb15 	bl	8001258 <_kill>
 801fc2e:	1c43      	adds	r3, r0, #1
 801fc30:	d102      	bne.n	801fc38 <_kill_r+0x1c>
 801fc32:	682b      	ldr	r3, [r5, #0]
 801fc34:	b103      	cbz	r3, 801fc38 <_kill_r+0x1c>
 801fc36:	6023      	str	r3, [r4, #0]
 801fc38:	bd38      	pop	{r3, r4, r5, pc}
 801fc3a:	bf00      	nop
 801fc3c:	2000cb98 	.word	0x2000cb98

0801fc40 <_getpid_r>:
 801fc40:	f7e1 bb02 	b.w	8001248 <_getpid>

0801fc44 <_init>:
 801fc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc46:	bf00      	nop
 801fc48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc4a:	bc08      	pop	{r3}
 801fc4c:	469e      	mov	lr, r3
 801fc4e:	4770      	bx	lr

0801fc50 <_fini>:
 801fc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc52:	bf00      	nop
 801fc54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc56:	bc08      	pop	{r3}
 801fc58:	469e      	mov	lr, r3
 801fc5a:	4770      	bx	lr
